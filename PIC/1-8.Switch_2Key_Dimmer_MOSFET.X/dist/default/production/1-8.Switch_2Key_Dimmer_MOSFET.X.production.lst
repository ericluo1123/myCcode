

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Nov 15 16:45:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	intentry,global,class=CODE,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	dabs	1,0x7E,2
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  011D                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  0191                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0193                     	;# 
   209  0193                     	;# 
   210  0194                     	;# 
   211  0195                     	;# 
   212  0196                     	;# 
   213  0197                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  020D                     	;# 
   226  0210                     	;# 
   227  0211                     	;# 
   228  0211                     	;# 
   229  0212                     	;# 
   230  0212                     	;# 
   231  0213                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0214                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0216                     	;# 
   239  0216                     	;# 
   240  0217                     	;# 
   241  0217                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0FE4                     	;# 
   254  0FE5                     	;# 
   255  0FE6                     	;# 
   256  0FE7                     	;# 
   257  0FE8                     	;# 
   258  0FE9                     	;# 
   259  0FEA                     	;# 
   260  0FEB                     	;# 
   261  0FED                     	;# 
   262  0FEE                     	;# 
   263  0FEF                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  0090                     	;# 
   295  0091                     	;# 
   296  0092                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0099                     	;# 
   301  009A                     	;# 
   302  009B                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  0116                     	;# 
   311  0117                     	;# 
   312  011D                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  018E                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0197                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020D                     	;# 
   337  0210                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0291                     	;# 
   354  0291                     	;# 
   355  0292                     	;# 
   356  0293                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  0394                     	;# 
   362  0395                     	;# 
   363  0396                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0090                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0097                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018D                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019C                     	;# 
   444  019D                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  020D                     	;# 
   448  0210                     	;# 
   449  0211                     	;# 
   450  0211                     	;# 
   451  0212                     	;# 
   452  0212                     	;# 
   453  0213                     	;# 
   454  0213                     	;# 
   455  0214                     	;# 
   456  0214                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0216                     	;# 
   461  0216                     	;# 
   462  0217                     	;# 
   463  0217                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  0394                     	;# 
   473  0395                     	;# 
   474  0396                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0010                     	;# 
   502  0011                     	;# 
   503  0012                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0016                     	;# 
   507  0017                     	;# 
   508  0018                     	;# 
   509  0019                     	;# 
   510  001A                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0116                     	;# 
   533  0117                     	;# 
   534  011D                     	;# 
   535  018C                     	;# 
   536  018D                     	;# 
   537  018E                     	;# 
   538  0191                     	;# 
   539  0191                     	;# 
   540  0192                     	;# 
   541  0193                     	;# 
   542  0193                     	;# 
   543  0194                     	;# 
   544  0195                     	;# 
   545  0196                     	;# 
   546  0197                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019C                     	;# 
   554  019C                     	;# 
   555  019D                     	;# 
   556  019E                     	;# 
   557  019F                     	;# 
   558  020D                     	;# 
   559  0210                     	;# 
   560  0211                     	;# 
   561  0211                     	;# 
   562  0212                     	;# 
   563  0212                     	;# 
   564  0213                     	;# 
   565  0213                     	;# 
   566  0214                     	;# 
   567  0214                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0298                     	;# 
   580  0298                     	;# 
   581  0299                     	;# 
   582  029A                     	;# 
   583  0394                     	;# 
   584  0395                     	;# 
   585  0396                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0010                     	;# 
   613  0011                     	;# 
   614  0012                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0016                     	;# 
   618  0017                     	;# 
   619  0018                     	;# 
   620  0019                     	;# 
   621  001A                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  008C                     	;# 
   625  008D                     	;# 
   626  008E                     	;# 
   627  0090                     	;# 
   628  0091                     	;# 
   629  0092                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0099                     	;# 
   634  009A                     	;# 
   635  009B                     	;# 
   636  009B                     	;# 
   637  009C                     	;# 
   638  009D                     	;# 
   639  009E                     	;# 
   640  010C                     	;# 
   641  010D                     	;# 
   642  010E                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  011D                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  018E                     	;# 
   649  0191                     	;# 
   650  0191                     	;# 
   651  0192                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0197                     	;# 
   658  0199                     	;# 
   659  019A                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019C                     	;# 
   665  019C                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  020D                     	;# 
   670  0210                     	;# 
   671  0211                     	;# 
   672  0211                     	;# 
   673  0212                     	;# 
   674  0212                     	;# 
   675  0213                     	;# 
   676  0213                     	;# 
   677  0214                     	;# 
   678  0214                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0216                     	;# 
   683  0216                     	;# 
   684  0217                     	;# 
   685  0217                     	;# 
   686  0291                     	;# 
   687  0291                     	;# 
   688  0292                     	;# 
   689  0293                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  0394                     	;# 
   695  0395                     	;# 
   696  0396                     	;# 
   697  0FE4                     	;# 
   698  0FE5                     	;# 
   699  0FE6                     	;# 
   700  0FE7                     	;# 
   701  0FE8                     	;# 
   702  0FE9                     	;# 
   703  0FEA                     	;# 
   704  0FEB                     	;# 
   705  0FED                     	;# 
   706  0FEE                     	;# 
   707  0FEF                     	;# 
   708  0000                     	;# 
   709  0001                     	;# 
   710  0002                     	;# 
   711  0003                     	;# 
   712  0004                     	;# 
   713  0005                     	;# 
   714  0006                     	;# 
   715  0007                     	;# 
   716  0008                     	;# 
   717  0009                     	;# 
   718  000A                     	;# 
   719  000B                     	;# 
   720  000C                     	;# 
   721  000D                     	;# 
   722  000E                     	;# 
   723  0010                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  008C                     	;# 
   736  008D                     	;# 
   737  008E                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0092                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  0116                     	;# 
   755  0117                     	;# 
   756  011D                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  018E                     	;# 
   760  0191                     	;# 
   761  0191                     	;# 
   762  0192                     	;# 
   763  0193                     	;# 
   764  0193                     	;# 
   765  0194                     	;# 
   766  0195                     	;# 
   767  0196                     	;# 
   768  0197                     	;# 
   769  0199                     	;# 
   770  019A                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019C                     	;# 
   776  019C                     	;# 
   777  019D                     	;# 
   778  019E                     	;# 
   779  019F                     	;# 
   780  020D                     	;# 
   781  0210                     	;# 
   782  0211                     	;# 
   783  0211                     	;# 
   784  0212                     	;# 
   785  0212                     	;# 
   786  0213                     	;# 
   787  0213                     	;# 
   788  0214                     	;# 
   789  0214                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0216                     	;# 
   794  0216                     	;# 
   795  0217                     	;# 
   796  0217                     	;# 
   797  0291                     	;# 
   798  0291                     	;# 
   799  0292                     	;# 
   800  0293                     	;# 
   801  0298                     	;# 
   802  0298                     	;# 
   803  0299                     	;# 
   804  029A                     	;# 
   805  0394                     	;# 
   806  0395                     	;# 
   807  0396                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000D                     	;# 
   833  000E                     	;# 
   834  0010                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0015                     	;# 
   838  0016                     	;# 
   839  0016                     	;# 
   840  0017                     	;# 
   841  0018                     	;# 
   842  0019                     	;# 
   843  001A                     	;# 
   844  001B                     	;# 
   845  001C                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  0090                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0095                     	;# 
   853  0096                     	;# 
   854  0097                     	;# 
   855  0099                     	;# 
   856  009A                     	;# 
   857  009B                     	;# 
   858  009B                     	;# 
   859  009C                     	;# 
   860  009D                     	;# 
   861  009E                     	;# 
   862  010C                     	;# 
   863  010D                     	;# 
   864  010E                     	;# 
   865  0116                     	;# 
   866  0117                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018D                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0197                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020D                     	;# 
   892  0210                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0216                     	;# 
   905  0216                     	;# 
   906  0217                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0298                     	;# 
   913  0298                     	;# 
   914  0299                     	;# 
   915  029A                     	;# 
   916  0394                     	;# 
   917  0395                     	;# 
   918  0396                     	;# 
   919  0FE4                     	;# 
   920  0FE5                     	;# 
   921  0FE6                     	;# 
   922  0FE7                     	;# 
   923  0FE8                     	;# 
   924  0FE9                     	;# 
   925  0FEA                     	;# 
   926  0FEB                     	;# 
   927  0FED                     	;# 
   928  0FEE                     	;# 
   929  0FEF                     	;# 
   930  0000                     	;# 
   931  0001                     	;# 
   932  0002                     	;# 
   933  0003                     	;# 
   934  0004                     	;# 
   935  0005                     	;# 
   936  0006                     	;# 
   937  0007                     	;# 
   938  0008                     	;# 
   939  0009                     	;# 
   940  000A                     	;# 
   941  000B                     	;# 
   942  000C                     	;# 
   943  000D                     	;# 
   944  000E                     	;# 
   945  0010                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0090                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0197                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019C                     	;# 
   999  019D                     	;# 
  1000  019E                     	;# 
  1001  019F                     	;# 
  1002  020D                     	;# 
  1003  0210                     	;# 
  1004  0211                     	;# 
  1005  0211                     	;# 
  1006  0212                     	;# 
  1007  0212                     	;# 
  1008  0213                     	;# 
  1009  0213                     	;# 
  1010  0214                     	;# 
  1011  0214                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0216                     	;# 
  1016  0216                     	;# 
  1017  0217                     	;# 
  1018  0217                     	;# 
  1019  0291                     	;# 
  1020  0291                     	;# 
  1021  0292                     	;# 
  1022  0293                     	;# 
  1023  0298                     	;# 
  1024  0298                     	;# 
  1025  0299                     	;# 
  1026  029A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  0010                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  008C                     	;# 
  1069  008D                     	;# 
  1070  008E                     	;# 
  1071  0090                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0097                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  010C                     	;# 
  1085  010D                     	;# 
  1086  010E                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  011D                     	;# 
  1090  018C                     	;# 
  1091  018D                     	;# 
  1092  018E                     	;# 
  1093  0191                     	;# 
  1094  0191                     	;# 
  1095  0192                     	;# 
  1096  0193                     	;# 
  1097  0193                     	;# 
  1098  0194                     	;# 
  1099  0195                     	;# 
  1100  0196                     	;# 
  1101  0197                     	;# 
  1102  0199                     	;# 
  1103  019A                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019C                     	;# 
  1109  019C                     	;# 
  1110  019D                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  020D                     	;# 
  1114  0210                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  0291                     	;# 
  1131  0291                     	;# 
  1132  0292                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  000E                     	;# 
  1167  0010                     	;# 
  1168  0011                     	;# 
  1169  0012                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  008C                     	;# 
  1180  008D                     	;# 
  1181  008E                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0095                     	;# 
  1186  0096                     	;# 
  1187  0097                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  010E                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  011D                     	;# 
  1201  018C                     	;# 
  1202  018D                     	;# 
  1203  018E                     	;# 
  1204  0191                     	;# 
  1205  0191                     	;# 
  1206  0192                     	;# 
  1207  0193                     	;# 
  1208  0193                     	;# 
  1209  0194                     	;# 
  1210  0195                     	;# 
  1211  0196                     	;# 
  1212  0197                     	;# 
  1213  0199                     	;# 
  1214  019A                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019C                     	;# 
  1220  019C                     	;# 
  1221  019D                     	;# 
  1222  019E                     	;# 
  1223  019F                     	;# 
  1224  020D                     	;# 
  1225  0210                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0298                     	;# 
  1246  0298                     	;# 
  1247  0299                     	;# 
  1248  029A                     	;# 
  1249  0394                     	;# 
  1250  0395                     	;# 
  1251  0396                     	;# 
  1252  0FE4                     	;# 
  1253  0FE5                     	;# 
  1254  0FE6                     	;# 
  1255  0FE7                     	;# 
  1256  0FE8                     	;# 
  1257  0FE9                     	;# 
  1258  0FEA                     	;# 
  1259  0FEB                     	;# 
  1260  0FED                     	;# 
  1261  0FEE                     	;# 
  1262  0FEF                     	;# 
  1263  0000                     	;# 
  1264  0001                     	;# 
  1265  0002                     	;# 
  1266  0003                     	;# 
  1267  0004                     	;# 
  1268  0005                     	;# 
  1269  0006                     	;# 
  1270  0007                     	;# 
  1271  0008                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  0010                     	;# 
  1279  0011                     	;# 
  1280  0012                     	;# 
  1281  0015                     	;# 
  1282  0016                     	;# 
  1283  0016                     	;# 
  1284  0017                     	;# 
  1285  0018                     	;# 
  1286  0019                     	;# 
  1287  001A                     	;# 
  1288  001B                     	;# 
  1289  001C                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  0090                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0095                     	;# 
  1297  0096                     	;# 
  1298  0097                     	;# 
  1299  0099                     	;# 
  1300  009A                     	;# 
  1301  009B                     	;# 
  1302  009B                     	;# 
  1303  009C                     	;# 
  1304  009D                     	;# 
  1305  009E                     	;# 
  1306  010C                     	;# 
  1307  010D                     	;# 
  1308  010E                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  011D                     	;# 
  1312  018C                     	;# 
  1313  018D                     	;# 
  1314  018E                     	;# 
  1315  0191                     	;# 
  1316  0191                     	;# 
  1317  0192                     	;# 
  1318  0193                     	;# 
  1319  0193                     	;# 
  1320  0194                     	;# 
  1321  0195                     	;# 
  1322  0196                     	;# 
  1323  0197                     	;# 
  1324  0199                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019E                     	;# 
  1334  019F                     	;# 
  1335  020D                     	;# 
  1336  0210                     	;# 
  1337  0211                     	;# 
  1338  0211                     	;# 
  1339  0212                     	;# 
  1340  0212                     	;# 
  1341  0213                     	;# 
  1342  0213                     	;# 
  1343  0214                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0216                     	;# 
  1349  0216                     	;# 
  1350  0217                     	;# 
  1351  0217                     	;# 
  1352  0291                     	;# 
  1353  0291                     	;# 
  1354  0292                     	;# 
  1355  0293                     	;# 
  1356  0298                     	;# 
  1357  0298                     	;# 
  1358  0299                     	;# 
  1359  029A                     	;# 
  1360  0394                     	;# 
  1361  0395                     	;# 
  1362  0396                     	;# 
  1363  0FE4                     	;# 
  1364  0FE5                     	;# 
  1365  0FE6                     	;# 
  1366  0FE7                     	;# 
  1367  0FE8                     	;# 
  1368  0FE9                     	;# 
  1369  0FEA                     	;# 
  1370  0FEB                     	;# 
  1371  0FED                     	;# 
  1372  0FEE                     	;# 
  1373  0FEF                     	;# 
  1374  0000                     	;# 
  1375  0001                     	;# 
  1376  0002                     	;# 
  1377  0003                     	;# 
  1378  0004                     	;# 
  1379  0005                     	;# 
  1380  0006                     	;# 
  1381  0007                     	;# 
  1382  0008                     	;# 
  1383  0009                     	;# 
  1384  000A                     	;# 
  1385  000B                     	;# 
  1386  000C                     	;# 
  1387  000D                     	;# 
  1388  000E                     	;# 
  1389  0010                     	;# 
  1390  0011                     	;# 
  1391  0012                     	;# 
  1392  0015                     	;# 
  1393  0016                     	;# 
  1394  0016                     	;# 
  1395  0017                     	;# 
  1396  0018                     	;# 
  1397  0019                     	;# 
  1398  001A                     	;# 
  1399  001B                     	;# 
  1400  001C                     	;# 
  1401  008C                     	;# 
  1402  008D                     	;# 
  1403  008E                     	;# 
  1404  0090                     	;# 
  1405  0091                     	;# 
  1406  0092                     	;# 
  1407  0095                     	;# 
  1408  0096                     	;# 
  1409  0097                     	;# 
  1410  0099                     	;# 
  1411  009A                     	;# 
  1412  009B                     	;# 
  1413  009B                     	;# 
  1414  009C                     	;# 
  1415  009D                     	;# 
  1416  009E                     	;# 
  1417  010C                     	;# 
  1418  010D                     	;# 
  1419  010E                     	;# 
  1420  0116                     	;# 
  1421  0117                     	;# 
  1422  011D                     	;# 
  1423  018C                     	;# 
  1424  018D                     	;# 
  1425  018E                     	;# 
  1426  0191                     	;# 
  1427  0191                     	;# 
  1428  0192                     	;# 
  1429  0193                     	;# 
  1430  0193                     	;# 
  1431  0194                     	;# 
  1432  0195                     	;# 
  1433  0196                     	;# 
  1434  0197                     	;# 
  1435  0199                     	;# 
  1436  019A                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019C                     	;# 
  1442  019C                     	;# 
  1443  019D                     	;# 
  1444  019E                     	;# 
  1445  019F                     	;# 
  1446  020D                     	;# 
  1447  0210                     	;# 
  1448  0211                     	;# 
  1449  0211                     	;# 
  1450  0212                     	;# 
  1451  0212                     	;# 
  1452  0213                     	;# 
  1453  0213                     	;# 
  1454  0214                     	;# 
  1455  0214                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0216                     	;# 
  1460  0216                     	;# 
  1461  0217                     	;# 
  1462  0217                     	;# 
  1463  0291                     	;# 
  1464  0291                     	;# 
  1465  0292                     	;# 
  1466  0293                     	;# 
  1467  0298                     	;# 
  1468  0298                     	;# 
  1469  0299                     	;# 
  1470  029A                     	;# 
  1471  0394                     	;# 
  1472  0395                     	;# 
  1473  0396                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0010                     	;# 
  1501  0011                     	;# 
  1502  0012                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008D                     	;# 
  1514  008E                     	;# 
  1515  0090                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  011D                     	;# 
  1534  018C                     	;# 
  1535  018D                     	;# 
  1536  018E                     	;# 
  1537  0191                     	;# 
  1538  0191                     	;# 
  1539  0192                     	;# 
  1540  0193                     	;# 
  1541  0193                     	;# 
  1542  0194                     	;# 
  1543  0195                     	;# 
  1544  0196                     	;# 
  1545  0197                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019C                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020D                     	;# 
  1558  0210                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0298                     	;# 
  1579  0298                     	;# 
  1580  0299                     	;# 
  1581  029A                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0FE4                     	;# 
  1586  0FE5                     	;# 
  1587  0FE6                     	;# 
  1588  0FE7                     	;# 
  1589  0FE8                     	;# 
  1590  0FE9                     	;# 
  1591  0FEA                     	;# 
  1592  0FEB                     	;# 
  1593  0FED                     	;# 
  1594  0FEE                     	;# 
  1595  0FEF                     	;# 
  1596  0000                     	;# 
  1597  0001                     	;# 
  1598  0002                     	;# 
  1599  0003                     	;# 
  1600  0004                     	;# 
  1601  0005                     	;# 
  1602  0006                     	;# 
  1603  0007                     	;# 
  1604  0008                     	;# 
  1605  0009                     	;# 
  1606  000A                     	;# 
  1607  000B                     	;# 
  1608  000C                     	;# 
  1609  000D                     	;# 
  1610  000E                     	;# 
  1611  0010                     	;# 
  1612  0011                     	;# 
  1613  0012                     	;# 
  1614  0015                     	;# 
  1615  0016                     	;# 
  1616  0016                     	;# 
  1617  0017                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  001A                     	;# 
  1621  001B                     	;# 
  1622  001C                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0090                     	;# 
  1627  0091                     	;# 
  1628  0092                     	;# 
  1629  0095                     	;# 
  1630  0096                     	;# 
  1631  0097                     	;# 
  1632  0099                     	;# 
  1633  009A                     	;# 
  1634  009B                     	;# 
  1635  009B                     	;# 
  1636  009C                     	;# 
  1637  009D                     	;# 
  1638  009E                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  0116                     	;# 
  1643  0117                     	;# 
  1644  011D                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0197                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019C                     	;# 
  1664  019C                     	;# 
  1665  019D                     	;# 
  1666  019E                     	;# 
  1667  019F                     	;# 
  1668  020D                     	;# 
  1669  0210                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0291                     	;# 
  1686  0291                     	;# 
  1687  0292                     	;# 
  1688  0293                     	;# 
  1689  0298                     	;# 
  1690  0298                     	;# 
  1691  0299                     	;# 
  1692  029A                     	;# 
  1693  0394                     	;# 
  1694  0395                     	;# 
  1695  0396                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000D                     	;# 
  1721  000E                     	;# 
  1722  0010                     	;# 
  1723  0011                     	;# 
  1724  0012                     	;# 
  1725  0015                     	;# 
  1726  0016                     	;# 
  1727  0016                     	;# 
  1728  0017                     	;# 
  1729  0018                     	;# 
  1730  0019                     	;# 
  1731  001A                     	;# 
  1732  001B                     	;# 
  1733  001C                     	;# 
  1734  008C                     	;# 
  1735  008D                     	;# 
  1736  008E                     	;# 
  1737  0090                     	;# 
  1738  0091                     	;# 
  1739  0092                     	;# 
  1740  0095                     	;# 
  1741  0096                     	;# 
  1742  0097                     	;# 
  1743  0099                     	;# 
  1744  009A                     	;# 
  1745  009B                     	;# 
  1746  009B                     	;# 
  1747  009C                     	;# 
  1748  009D                     	;# 
  1749  009E                     	;# 
  1750  010C                     	;# 
  1751  010D                     	;# 
  1752  010E                     	;# 
  1753  0116                     	;# 
  1754  0117                     	;# 
  1755  011D                     	;# 
  1756  018C                     	;# 
  1757  018D                     	;# 
  1758  018E                     	;# 
  1759  0191                     	;# 
  1760  0191                     	;# 
  1761  0192                     	;# 
  1762  0193                     	;# 
  1763  0193                     	;# 
  1764  0194                     	;# 
  1765  0195                     	;# 
  1766  0196                     	;# 
  1767  0197                     	;# 
  1768  0199                     	;# 
  1769  019A                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019C                     	;# 
  1775  019C                     	;# 
  1776  019D                     	;# 
  1777  019E                     	;# 
  1778  019F                     	;# 
  1779  020D                     	;# 
  1780  0210                     	;# 
  1781  0211                     	;# 
  1782  0211                     	;# 
  1783  0212                     	;# 
  1784  0212                     	;# 
  1785  0213                     	;# 
  1786  0213                     	;# 
  1787  0214                     	;# 
  1788  0214                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0216                     	;# 
  1793  0216                     	;# 
  1794  0217                     	;# 
  1795  0217                     	;# 
  1796  0291                     	;# 
  1797  0291                     	;# 
  1798  0292                     	;# 
  1799  0293                     	;# 
  1800  0298                     	;# 
  1801  0298                     	;# 
  1802  0299                     	;# 
  1803  029A                     	;# 
  1804  0394                     	;# 
  1805  0395                     	;# 
  1806  0396                     	;# 
  1807  0FE4                     	;# 
  1808  0FE5                     	;# 
  1809  0FE6                     	;# 
  1810  0FE7                     	;# 
  1811  0FE8                     	;# 
  1812  0FE9                     	;# 
  1813  0FEA                     	;# 
  1814  0FEB                     	;# 
  1815  0FED                     	;# 
  1816  0FEE                     	;# 
  1817  0FEF                     	;# 
  1818  0000                     	;# 
  1819  0001                     	;# 
  1820  0002                     	;# 
  1821  0003                     	;# 
  1822  0004                     	;# 
  1823  0005                     	;# 
  1824  0006                     	;# 
  1825  0007                     	;# 
  1826  0008                     	;# 
  1827  0009                     	;# 
  1828  000A                     	;# 
  1829  000B                     	;# 
  1830  000C                     	;# 
  1831  000D                     	;# 
  1832  000E                     	;# 
  1833  0010                     	;# 
  1834  0011                     	;# 
  1835  0012                     	;# 
  1836  0015                     	;# 
  1837  0016                     	;# 
  1838  0016                     	;# 
  1839  0017                     	;# 
  1840  0018                     	;# 
  1841  0019                     	;# 
  1842  001A                     	;# 
  1843  001B                     	;# 
  1844  001C                     	;# 
  1845  008C                     	;# 
  1846  008D                     	;# 
  1847  008E                     	;# 
  1848  0090                     	;# 
  1849  0091                     	;# 
  1850  0092                     	;# 
  1851  0095                     	;# 
  1852  0096                     	;# 
  1853  0097                     	;# 
  1854  0099                     	;# 
  1855  009A                     	;# 
  1856  009B                     	;# 
  1857  009B                     	;# 
  1858  009C                     	;# 
  1859  009D                     	;# 
  1860  009E                     	;# 
  1861  010C                     	;# 
  1862  010D                     	;# 
  1863  010E                     	;# 
  1864  0116                     	;# 
  1865  0117                     	;# 
  1866  011D                     	;# 
  1867  018C                     	;# 
  1868  018D                     	;# 
  1869  018E                     	;# 
  1870  0191                     	;# 
  1871  0191                     	;# 
  1872  0192                     	;# 
  1873  0193                     	;# 
  1874  0193                     	;# 
  1875  0194                     	;# 
  1876  0195                     	;# 
  1877  0196                     	;# 
  1878  0197                     	;# 
  1879  0199                     	;# 
  1880  019A                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019C                     	;# 
  1886  019C                     	;# 
  1887  019D                     	;# 
  1888  019E                     	;# 
  1889  019F                     	;# 
  1890  020D                     	;# 
  1891  0210                     	;# 
  1892  0211                     	;# 
  1893  0211                     	;# 
  1894  0212                     	;# 
  1895  0212                     	;# 
  1896  0213                     	;# 
  1897  0213                     	;# 
  1898  0214                     	;# 
  1899  0214                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0216                     	;# 
  1904  0216                     	;# 
  1905  0217                     	;# 
  1906  0217                     	;# 
  1907  0291                     	;# 
  1908  0291                     	;# 
  1909  0292                     	;# 
  1910  0293                     	;# 
  1911  0298                     	;# 
  1912  0298                     	;# 
  1913  0299                     	;# 
  1914  029A                     	;# 
  1915  0394                     	;# 
  1916  0395                     	;# 
  1917  0396                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0015                     	;# 
  1948  0016                     	;# 
  1949  0016                     	;# 
  1950  0017                     	;# 
  1951  0018                     	;# 
  1952  0019                     	;# 
  1953  001A                     	;# 
  1954  001B                     	;# 
  1955  001C                     	;# 
  1956  008C                     	;# 
  1957  008D                     	;# 
  1958  008E                     	;# 
  1959  0090                     	;# 
  1960  0091                     	;# 
  1961  0092                     	;# 
  1962  0095                     	;# 
  1963  0096                     	;# 
  1964  0097                     	;# 
  1965  0099                     	;# 
  1966  009A                     	;# 
  1967  009B                     	;# 
  1968  009B                     	;# 
  1969  009C                     	;# 
  1970  009D                     	;# 
  1971  009E                     	;# 
  1972  010C                     	;# 
  1973  010D                     	;# 
  1974  010E                     	;# 
  1975  0116                     	;# 
  1976  0117                     	;# 
  1977  011D                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0191                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0193                     	;# 
  1985  0193                     	;# 
  1986  0194                     	;# 
  1987  0195                     	;# 
  1988  0196                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019F                     	;# 
  2001  020D                     	;# 
  2002  0210                     	;# 
  2003  0211                     	;# 
  2004  0211                     	;# 
  2005  0212                     	;# 
  2006  0212                     	;# 
  2007  0213                     	;# 
  2008  0213                     	;# 
  2009  0214                     	;# 
  2010  0214                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0216                     	;# 
  2015  0216                     	;# 
  2016  0217                     	;# 
  2017  0217                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0298                     	;# 
  2023  0298                     	;# 
  2024  0299                     	;# 
  2025  029A                     	;# 
  2026  0394                     	;# 
  2027  0395                     	;# 
  2028  0396                     	;# 
  2029  0FE4                     	;# 
  2030  0FE5                     	;# 
  2031  0FE6                     	;# 
  2032  0FE7                     	;# 
  2033  0FE8                     	;# 
  2034  0FE9                     	;# 
  2035  0FEA                     	;# 
  2036  0FEB                     	;# 
  2037  0FED                     	;# 
  2038  0FEE                     	;# 
  2039  0FEF                     	;# 
  2040                           
  2041                           	psect	idataBANK4
  2042  1F54                     __pidataBANK4:	
  2043                           
  2044                           ;initializer for __product
  2045  1F54  3463               	retlw	99
  2046  1F55  3402               	retlw	2
  2047  1F56  3400               	retlw	0
  2048  1F57  3400               	retlw	0
  2049  1F58  3400               	retlw	0
  2050  1F59  3400               	retlw	0
  2051  1F5A  3400               	retlw	0
  2052  1F5B  3400               	retlw	0
  2053  1F5C  3400               	retlw	0
  2054  1F5D  3400               	retlw	0
  2055  1F5E  3400               	retlw	0
  2056  1F5F  3400               	retlw	0
  2057  1F60  34FF               	retlw	255
  2058  1F61  34FF               	retlw	255
  2059  1F62  34FF               	retlw	255
  2060  1F63  3400               	retlw	0
  2061  1F64  3400               	retlw	0
  2062  1F65  3400               	retlw	0
  2063  1F66  3400               	retlw	0
  2064  1F67  3400               	retlw	0
  2065  1F68  3400               	retlw	0
  2066  1F69  3400               	retlw	0
  2067  1F6A  3400               	retlw	0
  2068  1F6B  3400               	retlw	0
  2069  1F6C  3400               	retlw	0
  2070  1F6D  3400               	retlw	0
  2071  1F6E  3400               	retlw	0
  2072  1F6F  3400               	retlw	0
  2073  1F70  3400               	retlw	0
  2074  1F71  3400               	retlw	0
  2075  1F72  3400               	retlw	0
  2076  1F73  3400               	retlw	0
  2077                           
  2078                           	psect	stringtext
  2079  1000                     __pstringtext:	
  2080  1000                     _CC2500_registers_address:	
  2081  1000  3403               	retlw	3
  2082  1001  3416               	retlw	22
  2083  1002  3417               	retlw	23
  2084  1003  341E               	retlw	30
  2085  1004  341F               	retlw	31
  2086  1005  3420               	retlw	32
  2087  1006  342A               	retlw	42
  2088  1007  342B               	retlw	43
  2089  1008  340B               	retlw	11
  2090  1009  340C               	retlw	12
  2091  100A  340D               	retlw	13
  2092  100B  340E               	retlw	14
  2093  100C  340F               	retlw	15
  2094  100D  3410               	retlw	16
  2095  100E  3411               	retlw	17
  2096  100F  3412               	retlw	18
  2097  1010  3413               	retlw	19
  2098  1011  3414               	retlw	20
  2099  1012  340A               	retlw	10
  2100  1013  3415               	retlw	21
  2101  1014  3421               	retlw	33
  2102  1015  3422               	retlw	34
  2103  1016  3418               	retlw	24
  2104  1017  3419               	retlw	25
  2105  1018  341A               	retlw	26
  2106  1019  341B               	retlw	27
  2107  101A  341C               	retlw	28
  2108  101B  341D               	retlw	29
  2109  101C  3423               	retlw	35
  2110  101D  3424               	retlw	36
  2111  101E  3425               	retlw	37
  2112  101F  3426               	retlw	38
  2113  1020  3429               	retlw	41
  2114  1021  342C               	retlw	44
  2115  1022  342D               	retlw	45
  2116  1023  342E               	retlw	46
  2117  1024  3400               	retlw	0
  2118  1025  3401               	retlw	1
  2119  1026  3402               	retlw	2
  2120  1027  3407               	retlw	7
  2121  1028  3408               	retlw	8
  2122  1029  3409               	retlw	9
  2123  102A  3406               	retlw	6
  2124  102B  3404               	retlw	4
  2125  102C  3405               	retlw	5
  2126  102D  3427               	retlw	39
  2127  102E  3428               	retlw	40
  2128  102F                     __end_of_CC2500_registers_address:	
  2129  102F                     _CC2500_rfSettings:	
  2130  102F  3407               	retlw	7
  2131  1030  3407               	retlw	7
  2132  1031  3430               	retlw	48
  2133  1032  3487               	retlw	135
  2134  1033  346B               	retlw	107
  2135  1034  34F8               	retlw	248
  2136  1035  347F               	retlw	127
  2137  1036  343F               	retlw	63
  2138  1037  3409               	retlw	9
  2139  1038  3400               	retlw	0
  2140  1039  345C               	retlw	92
  2141  103A  34A7               	retlw	167
  2142  103B  3462               	retlw	98
  2143  103C  3486               	retlw	134
  2144  103D  3483               	retlw	131
  2145  103E  3403               	retlw	3
  2146  103F  3422               	retlw	34
  2147  1040  34F8               	retlw	248
  2148  1041  3400               	retlw	0
  2149  1042  3444               	retlw	68
  2150  1043  34B6               	retlw	182
  2151  1044  3410               	retlw	16
  2152  1045  3418               	retlw	24
  2153  1046  341D               	retlw	29
  2154  1047  341C               	retlw	28
  2155  1048  34C7               	retlw	199
  2156  1049  3400               	retlw	0
  2157  104A  34B2               	retlw	178
  2158  104B  34EA               	retlw	234
  2159  104C  340A               	retlw	10
  2160  104D  3400               	retlw	0
  2161  104E  3411               	retlw	17
  2162  104F  3459               	retlw	89
  2163  1050  3488               	retlw	136
  2164  1051  3431               	retlw	49
  2165  1052  340B               	retlw	11
  2166  1053  342F               	retlw	47
  2167  1054  342E               	retlw	46
  2168  1055  3406               	retlw	6
  2169  1056  3404               	retlw	4
  2170  1057  3405               	retlw	5
  2171  1058  3400               	retlw	0
  2172  1059  3430               	retlw	48
  2173  105A  34D3               	retlw	211
  2174  105B  3491               	retlw	145
  2175  105C  3441               	retlw	65
  2176  105D  3400               	retlw	0
  2177  105E                     __end_of_CC2500_rfSettings:	
  2178  105E                     _CC2500_patable_vaule:	
  2179  105E  34FE               	retlw	254
  2180  105F  34FE               	retlw	254
  2181  1060  34FE               	retlw	254
  2182  1061  34FE               	retlw	254
  2183  1062  34FE               	retlw	254
  2184  1063  34FE               	retlw	254
  2185  1064  34FE               	retlw	254
  2186  1065  34FE               	retlw	254
  2187  1066                     __end_of_CC2500_patable_vaule:	
  2188                           
  2189                           	psect	nvBANK0
  2190  006F                     __pnvBANK0:	
  2191  006F                     _product:	
  2192  006F                     	ds	1
  2193  000C                     _PORTA	set	12
  2194  000D                     _PORTB	set	13
  2195  000E                     _PORTC	set	14
  2196  0018                     _T1CON	set	24
  2197  0017                     _TMR1H	set	23
  2198  0016                     _TMR1L	set	22
  2199  005F                     _GIE	set	95
  2200  005B                     _IOCIE	set	91
  2201  0058                     _IOCIF	set	88
  2202  005E                     _PEIE	set	94
  2203  0060                     _RA0	set	96
  2204  0063                     _RA3	set	99
  2205  0064                     _RA4	set	100
  2206  0066                     _RA6	set	102
  2207  0067                     _RA7	set	103
  2208  0068                     _RB0	set	104
  2209  0069                     _RB1	set	105
  2210  006B                     _RB3	set	107
  2211  006C                     _RB4	set	108
  2212  006D                     _RB5	set	109
  2213  0070                     _RC0	set	112
  2214  0071                     _RC1	set	113
  2215  0072                     _RC2	set	114
  2216  0074                     _RC4	set	116
  2217  0075                     _RC5	set	117
  2218  0077                     _RC7	set	119
  2219  0088                     _TMR1IF	set	136
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0099                     _OSCCON	set	153
  2225  008C                     _TRISA	set	140
  2226  008D                     _TRISB	set	141
  2227  008E                     _TRISC	set	142
  2228  0097                     _WDTCON	set	151
  2229  04E9                     _GO_nDONE	set	1257
  2230  0488                     _TMR1IE	set	1160
  2231  0117                     _FVRCON	set	279
  2232  010C                     _LATA	set	268
  2233  010D                     _LATB	set	269
  2234  010E                     _LATC	set	270
  2235  018C                     _ANSELA	set	396
  2236  018D                     _ANSELB	set	397
  2237  018E                     _ANSELC	set	398
  2238  0192                     _PMADRH	set	402
  2239  0191                     _PMADRL	set	401
  2240  0196                     _PMCON2	set	406
  2241  0194                     _PMDATH	set	404
  2242  0193                     _PMDATL	set	403
  2243  0CAE                     _CFGS	set	3246
  2244  0CAC                     _FREE	set	3244
  2245  0CAD                     _LWLO	set	3245
  2246  0CA8                     _RD	set	3240
  2247  0CA9                     _WR	set	3241
  2248  0CAA                     _WREN	set	3242
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0015                     start_initialization:	
  2260  0015                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2267  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2270  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  001B  30A0               	movlw	low __pbssBANK1
  2274  001C  0084               	movwf	4
  2275  001D  3000               	movlw	high __pbssBANK1
  2276  001E  0085               	movwf	5
  2277  001F  3046               	movlw	70
  2278  0020  319B  236D  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  0023  3020               	movlw	low __pbssBANK2
  2282  0024  0084               	movwf	4
  2283  0025  3001               	movlw	high __pbssBANK2
  2284  0026  0085               	movwf	5
  2285  0027  3050               	movlw	80
  2286  0028  319B  236D  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  002B  30A0               	movlw	low __pbssBANK3
  2290  002C  0084               	movwf	4
  2291  002D  3001               	movlw	high __pbssBANK3
  2292  002E  0085               	movwf	5
  2293  002F  3045               	movlw	69
  2294  0030  319B  236D  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK4
  2297  0033  3020               	movlw	low __pbssBANK4
  2298  0034  0084               	movwf	4
  2299  0035  3002               	movlw	high __pbssBANK4
  2300  0036  0085               	movwf	5
  2301  0037  3025               	movlw	37
  2302  0038  319B  236D  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK4
  2305  003B  3054               	movlw	low __pidataBANK4
  2306  003C  0084               	movwf	4
  2307  003D  309F               	movlw	(high __pidataBANK4)| (0+128)
  2308  003E  0085               	movwf	5
  2309  003F  3045               	movlw	low __pdataBANK4
  2310  0040  0086               	movwf	6
  2311  0041  3002               	movlw	high __pdataBANK4
  2312  0042  0087               	movwf	7
  2313  0043  3020               	movlw	32
  2314  0044  319B  2367         	fcall	init_ram
  2315  0046                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0046                     __end_of__initialization:	
  2319  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0047  0020               	movlb	0
  2321  0048  3196  2EF5         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03E8                     __pbitbssCOMMON:	
  2325  03E8                     _Receive_OK:	
  2326  03E8                     	ds	1
  2327  03E9                     _Transceive_OK:	
  2328  03E9                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0078                     __pbssCOMMON:	
  2332  0078                     _DelayOff:	
  2333  0078                     	ds	1
  2334  0079                     _DimmerLights:	
  2335  0079                     	ds	1
  2336  007A                     _DimmerLightsIntr:	
  2337  007A                     	ds	1
  2338  007B                     _LED:	
  2339  007B                     	ds	1
  2340  007C                     _Sw:	
  2341  007C                     	ds	1
  2342                           
  2343                           	psect	bssBANK1
  2344  00A0                     __pbssBANK1:	
  2345  00A0                     _myMain:	
  2346  00A0                     	ds	16
  2347  00B0                     _Buz1:	
  2348  00B0                     	ds	12
  2349  00BC                     _RF1:	
  2350  00BC                     	ds	12
  2351  00C8                     _CRC:	
  2352  00C8                     	ds	1
  2353  00C9                     _DimmerLights11:	
  2354  00C9                     	ds	1
  2355  00CA                     _DimmerLights22:	
  2356  00CA                     	ds	1
  2357  00CB                     _DimmerLightsIntrIOC:	
  2358  00CB                     	ds	1
  2359  00CC                     _RSSI:	
  2360  00CC                     	ds	1
  2361  00CD                     _Rx_Length:	
  2362  00CD                     	ds	1
  2363  00CE                     _SPI0Buffer:	
  2364  00CE                     	ds	1
  2365  00CF                     _SwDetect:	
  2366  00CF                     	ds	1
  2367  00D0                     _Tx_Length:	
  2368  00D0                     	ds	1
  2369  00D1                     _r_address:	
  2370  00D1                     	ds	1
  2371  00D2                     _r_data:	
  2372  00D2                     	ds	1
  2373  00D3                     _s_data:	
  2374  00D3                     	ds	1
  2375  00D4                     _Temp:	
  2376  00D4                     	ds	18
  2377                           
  2378                           	psect	bssBANK2
  2379  0120                     __pbssBANK2:	
  2380  0120                     _Dimmer:	
  2381  0120                     	ds	3
  2382  0123                     _Timer1:	
  2383  0123                     	ds	3
  2384  0126                     _RF_Count:	
  2385  0126                     	ds	2
  2386  0128                     _WDT:	
  2387  0128                     	ds	2
  2388  012A                     _Load:	
  2389  012A                     	ds	45
  2390  0157                     _Sw1:	
  2391  0157                     	ds	9
  2392  0160                     _VarErrLED:	
  2393  0160                     	ds	4
  2394  0164                     _VarLED1:	
  2395  0164                     	ds	4
  2396  0168                     _VarLED2:	
  2397  0168                     	ds	4
  2398  016C                     _DlySw1:	
  2399  016C                     	ds	2
  2400  016E                     _DlySw2:	
  2401  016E                     	ds	2
  2402                           
  2403                           	psect	bssBANK3
  2404  01A0                     __pbssBANK3:	
  2405  01A0                     _RF_Data:	
  2406  01A0                     	ds	30
  2407  01BE                     _DimmerLights1:	
  2408  01BE                     	ds	15
  2409  01CD                     _DimmerLights2:	
  2410  01CD                     	ds	15
  2411  01DC                     _Sw2:	
  2412  01DC                     	ds	9
  2413                           
  2414                           	psect	bssBANK4
  2415  0220                     __pbssBANK4:	
  2416  0220                     _Memory:	
  2417  0220                     	ds	37
  2418                           
  2419                           	psect	dataBANK4
  2420  0245                     __pdataBANK4:	
  2421  0245                     __product:	
  2422  0245                     	ds	32
  2423                           
  2424                           	psect	clrtext
  2425  1B6D                     clear_ram0:	
  2426                           ;	Called with FSR0 containing the base address, and
  2427                           ;	WREG with the size to clear
  2428                           
  2429  1B6D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2430  1B6E                     clrloop0:	
  2431  1B6E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2432  1B6F  3101               	addfsr 0,1
  2433  1B70  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2434  1B71  2B6E               	goto	clrloop0	;have we reached the end yet?
  2435  1B72  3400               	retlw	0	;all done for this memory range, return
  2436                           
  2437                           	psect	inittext
  2438  1B67                     init_ram:	
  2439  1B67  00FE               	movwf	126
  2440  1B68                     initloop:	
  2441  1B68  0012               	moviw fsr0++
  2442  1B69  001E               	movwi fsr1++
  2443  1B6A  0BFE               	decfsz	126,f
  2444  1B6B  2B68               	goto	initloop
  2445  1B6C  3400               	retlw	0
  2446                           
  2447                           	psect	cstackBANK1
  2448  00E6                     __pcstackBANK1:	
  2449  00E6                     setMain_Exception@buz:	
  2450                           
  2451                           ; 1 bytes @ 0x0
  2452  00E6                     	ds	1
  2453  00E7                     _setMain_Exception$7061:	
  2454                           
  2455                           ; 2 bytes @ 0x1
  2456  00E7                     	ds	2
  2457  00E9                     setMain_Exception@status:	
  2458                           
  2459                           ; 1 bytes @ 0x3
  2460  00E9                     	ds	1
  2461  00EA                     setMain_Exception@command:	
  2462                           
  2463                           ; 1 bytes @ 0x4
  2464  00EA                     	ds	1
  2465  00EB                     ?_main:	
  2466  00EB                     main@argc:	
  2467                           ; 2 bytes @ 0x5
  2468                           
  2469                           
  2470                           ; 2 bytes @ 0x5
  2471  00EB                     	ds	2
  2472  00ED                     main@argv:	
  2473                           
  2474                           ; 2 bytes @ 0x7
  2475  00ED                     	ds	2
  2476                           
  2477                           	psect	cstackCOMMON
  2478  0070                     __pcstackCOMMON:	
  2479  0070                     ?_Timeout_Counter:	
  2480  0070                     ?_set_TimeoutCleared:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_CC2500_WriteByte:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_CC2500_WriteCommand:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_CC2500_ReadStatus:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_CC2500_ReadByte:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_CC2500_PowerRST:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_CC2500_InitSetREG:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_CC2500_InitPATable:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_CC2500_ClearTXFIFO:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_CC2500_ClearRXFIFO:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_CC2500_FrequencyCabr:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_CC2500_SIDLEMode:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_DlyOff_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_DlyOff_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_setDimmerLights_SwOn:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_setDimmerLights_SwOff:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_setDimmerLights_Initialization:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_Dimmer_Initialization:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_setDimmerLights_Main:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_setTxData:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setDimmerLights_Line:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setLED_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setLED_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_Fosc_Set:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_IO_Set:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_TMR1_Set:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_ADC_Set:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_IOC_Set:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_WDT_Set:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_IOC_ISR:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_TMR1_ISR:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_Flash_Memory_Write:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Flash_Memory_Modify:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_WDT_Clearing:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setLoad_AH_AL_Restore:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setTemp_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setTemp_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRF_Initialization:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRF_Main:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_getRxData:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setLog_Code:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setControl_Lights_Table:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_setRFSW_Control:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_setRFSW_AdjControl:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_setRF_DimmerValue:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setSw_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setMain_Exception:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setSw_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_myMain_Initialization:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_my_MainTimer:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_Buzzer_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Buzzer_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_CC2500_TxData:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_CC2500_RxData:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_CC2500_PowerOnInitial:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DelayOffPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DelayOff_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DelayOff_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerIntrIOCPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ??_DimmerIntrIOCPointSelect:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerIntrPointSelect:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ??_DimmerIntrPointSelect:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setDimmerLights_IntrControl:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_DimmerLightsPointSelect:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_DimmerLights_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_DimmerLights_Main:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setDimmerLights_AdjControl:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_ErrorClose:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerLights_AdjRF:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_LedPointSelect:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_LED_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_LED_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Mcu_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_ISR:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setDimmerReClock:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Flash_Memory_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Flash_Memory_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Flash_Memory_Unlock:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Erasing:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setMemory_Modify:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setMemory_LoopSave:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_WDT_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Load_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_getLoad_AD:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Load_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_Temp_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_getTemp_AD:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Temp_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_RF_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setRF_Learn:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_TouchPower:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_SwPointSelect:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_Switch_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_Switch_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_getDimmerLights_Status:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DelayTimejudge:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_getMain_All_Error_Status:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ?_getLoad_OK:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_getMain_LightsStatus:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_getPercentValue:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_Flash_Memory_Read:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_getMain_LoadOK:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_getMain_Lights_Count:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_getRF_KeyStatus:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_getSw_KeyStatus:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_getAll_DimmerLights_AdjGO:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_getDimmer_LoadOK:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_getDimmerLights_Line:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_setPercentValue:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0x0
  2815  0070                     	ds	1
  2816  0071                     DimmerIntrIOCPointSelect@lights:	
  2817  0071                     DimmerIntrPointSelect@lights:	
  2818                           ; 1 bytes @ 0x1
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x1
  2822  0071                     	ds	1
  2823  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2824  0072                     ??_setDimmerLights_IntrControl:	
  2825                           ; 0 bytes @ 0x2
  2826                           
  2827  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2828                           ; 0 bytes @ 0x2
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x2
  2832  0072                     	ds	1
  2833  0073                     ??_IOC_ISR:	
  2834  0073                     ??_setDimmerReClock:	
  2835                           ; 0 bytes @ 0x3
  2836                           
  2837                           
  2838                           ; 0 bytes @ 0x3
  2839  0073                     	ds	3
  2840  0076                     setDimmerLights_IntrControl@lights:	
  2841                           
  2842                           ; 1 bytes @ 0x6
  2843  0076                     	ds	1
  2844  0077                     ??_TMR1_ISR:	
  2845  0077                     ??_ISR:	
  2846                           ; 0 bytes @ 0x7
  2847                           
  2848                           
  2849                           ; 0 bytes @ 0x7
  2850  0077                     	ds	1
  2851                           
  2852                           	psect	cstackBANK0
  2853  0020                     __pcstackBANK0:	
  2854  0020                     ??_Timeout_Counter:	
  2855  0020                     ??_set_TimeoutCleared:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_CC2500_WriteByte:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_CC2500_ReadByte:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ?_DelayTime_1us:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_Dimmer_Initialization:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_getMain_All_Error_Status:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_getLoad_OK:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setTxData:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_setDimmerLights_Line:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_Fosc_Set:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_IO_Set:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_TMR1_Set:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_ADC_Set:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_IOC_Set:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_WDT_Set:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Read:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ?_setMemory_Data:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_Flash_Memory_Write:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_WDT_Clearing:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_setLoad_AH_AL_Restore:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_getMain_Lights_Count:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_setTemp_Initialization:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_setRF_Initialization:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_getRF_KeyStatus:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_getSw_KeyStatus:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ??_myMain_Initialization:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ??_Buzzer_Initialization:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0020                     ??_Buzzer_Main:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0020                     ??_DelayOffPointSelect:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0020                     ??_DimmerLightsPointSelect:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0020                     ??_getAll_DimmerLights_AdjGO:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0020                     ??_getDimmer_LoadOK:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0020                     ??_getDimmerLights_Line:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0020                     ??_LedPointSelect:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_Flash_Memory_Unlock:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_Flash_Memory_Erasing:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_setMemory_Modify:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_setMemory_LoopSave:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_WDT_Main:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_Temp_Initialization:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_setRF_Learn:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ??_TouchPower:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_SwPointSelect:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ?___bmul:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ?_getBuz_GO:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0020                     ?_getAD:	
  2991                           ; 2 bytes @ 0x0
  2992                           
  2993  0020                     ?___awdiv:	
  2994                           ; 2 bytes @ 0x0
  2995                           
  2996  0020                     ?___ftpack:	
  2997                           ; 2 bytes @ 0x0
  2998                           
  2999  0020                     getDimmer_LoadOK@status:	
  3000                           ; 3 bytes @ 0x0
  3001                           
  3002  0020                     setDimmerLights_Line@lights:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0020                     getAD@adcon1:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0020                     setMemory_Data@data:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0020                     getLoad_OK@ok:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0020                     getMain_Lights_Count@count:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0020                     ___bmul@multiplicand:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020  0020                     DelayTime_1us@count:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0020                     ___awdiv@divisor:	
  3024                           ; 2 bytes @ 0x0
  3025                           
  3026  0020                     ___ftpack@arg:	
  3027                           ; 2 bytes @ 0x0
  3028                           
  3029                           
  3030                           ; 3 bytes @ 0x0
  3031  0020                     	ds	1
  3032  0021                     ??_setMemory_Data:	
  3033  0021                     ??_getMain_LoadOK:	
  3034                           ; 0 bytes @ 0x1
  3035                           
  3036  0021                     ??_Mcu_Initialization:	
  3037                           ; 0 bytes @ 0x1
  3038                           
  3039  0021                     ??_RF_Initialization:	
  3040                           ; 0 bytes @ 0x1
  3041                           
  3042  0021                     ??___bmul:	
  3043                           ; 0 bytes @ 0x1
  3044                           
  3045  0021                     CC2500_WriteByte@loop_a:	
  3046                           ; 0 bytes @ 0x1
  3047                           
  3048  0021                     CC2500_ReadByte@loop_b:	
  3049                           ; 1 bytes @ 0x1
  3050                           
  3051  0021                     DelayOffPointSelect@sw:	
  3052                           ; 1 bytes @ 0x1
  3053                           
  3054  0021                     DimmerLightsPointSelect@lights:	
  3055                           ; 1 bytes @ 0x1
  3056                           
  3057  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3058                           ; 1 bytes @ 0x1
  3059                           
  3060  0021                     getDimmerLights_Line@line:	
  3061                           ; 1 bytes @ 0x1
  3062                           
  3063  0021                     LedPointSelect@led:	
  3064                           ; 1 bytes @ 0x1
  3065                           
  3066  0021                     Flash_Memory_Read@i:	
  3067                           ; 1 bytes @ 0x1
  3068                           
  3069  0021                     Flash_Memory_Write@i:	
  3070                           ; 1 bytes @ 0x1
  3071                           
  3072  0021                     setMemory_Modify@command:	
  3073                           ; 1 bytes @ 0x1
  3074                           
  3075  0021                     setMemory_LoopSave@command:	
  3076                           ; 1 bytes @ 0x1
  3077                           
  3078  0021                     setLoad_AH_AL_Restore@i:	
  3079                           ; 1 bytes @ 0x1
  3080                           
  3081  0021                     setRF_Learn@command:	
  3082                           ; 1 bytes @ 0x1
  3083                           
  3084  0021                     getRF_KeyStatus@key:	
  3085                           ; 1 bytes @ 0x1
  3086                           
  3087  0021                     SwPointSelect@sw:	
  3088                           ; 1 bytes @ 0x1
  3089                           
  3090  0021                     _getSw_KeyStatus$6326:	
  3091                           ; 1 bytes @ 0x1
  3092                           
  3093  0021                     getMain_Lights_Count@status3:	
  3094                           ; 1 bytes @ 0x1
  3095                           
  3096  0021                     _getMain_All_Error_Status$7072:	
  3097                           ; 1 bytes @ 0x1
  3098                           
  3099                           
  3100                           ; 2 bytes @ 0x1
  3101  0021                     	ds	1
  3102  0022                     ??_CC2500_WriteCommand:	
  3103  0022                     ??_CC2500_ReadStatus:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0022                     ??_DelayTime_1us:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0022                     ?_CC2500_WriteREG:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0022                     ??_DlyOff_Initialization:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0022                     ??_getDimmerLights_Status:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0022                     ??_setDimmerLights_Initialization:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0022                     ?_setDimmerLights_Trigger:	
  3122                           ; 0 bytes @ 0x2
  3123                           
  3124  0022                     ?_setDimmerLights_TriggerAdj:	
  3125                           ; 0 bytes @ 0x2
  3126                           
  3127  0022                     ?_setLED:	
  3128                           ; 0 bytes @ 0x2
  3129                           
  3130  0022                     ??_setLED_Main:	
  3131                           ; 0 bytes @ 0x2
  3132                           
  3133  0022                     ??_getBuz_GO:	
  3134                           ; 0 bytes @ 0x2
  3135                           
  3136  0022                     ??_Load_Initialization:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0022                     CC2500_WriteREG@value:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0022                     DlyOff_Initialization@sw:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0022                     getDimmerLights_Status@lights:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0022                     _getAll_DimmerLights_AdjGO$2557:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0022                     setDimmerLights_Trigger@command:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0022                     setDimmerLights_TriggerAdj@command:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0022                     setLED@command:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0022                     Flash_Memory_Read@address:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0022                     setMemory_Data@address:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0022                     _getRF_KeyStatus$5253:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169  0022                     _getSw_KeyStatus$6327:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172  0022                     getMain_Lights_Count@status1:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0022                     getMain_LoadOK@ok:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0022                     ___bmul@product:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0022                     DelayTime_1us@i:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0022                     ___awdiv@dividend:	
  3185                           ; 2 bytes @ 0x2
  3186                           
  3187                           
  3188                           ; 2 bytes @ 0x2
  3189  0022                     	ds	1
  3190  0023                     ??_CC2500_WriteREG:	
  3191  0023                     ??_setDimmerLights_Trigger:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0023                     ??_setDimmerLights_TriggerAdj:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0023                     ??_setLED:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0023                     ??_DelayOff_Initialization:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0023                     ??_getAD:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0023                     CC2500_WriteCommand@command:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0023                     CC2500_ReadStatus@status_addr:	
  3210                           ; 1 bytes @ 0x3
  3211                           
  3212  0023                     setDimmerLights_Initialization@lights:	
  3213                           ; 1 bytes @ 0x3
  3214                           
  3215  0023                     getDimmerLights_Status@status:	
  3216                           ; 1 bytes @ 0x3
  3217                           
  3218  0023                     setLED@led:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0023                     getAD@adcon0:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0023                     Flash_Memory_Read@ret:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0023                     getSw_KeyStatus@status:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0023                     getMain_Lights_Count@status2:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0023                     ___bmul@multiplier:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0023                     ___ftpack@exp:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0023                     _getMain_All_Error_Status$7073:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242                           
  3243                           ; 2 bytes @ 0x3
  3244  0023                     	ds	1
  3245  0024                     ??_CC2500_ClearTXFIFO:	
  3246  0024                     ??_CC2500_ClearRXFIFO:	
  3247                           ; 0 bytes @ 0x4
  3248                           
  3249  0024                     ??_CC2500_SIDLEMode:	
  3250                           ; 0 bytes @ 0x4
  3251                           
  3252  0024                     ??_DelayTimejudge:	
  3253                           ; 0 bytes @ 0x4
  3254                           
  3255  0024                     ??_getMain_LightsStatus:	
  3256                           ; 0 bytes @ 0x4
  3257                           
  3258  0024                     ??_setLED_Initialization:	
  3259                           ; 0 bytes @ 0x4
  3260                           
  3261  0024                     ??_Flash_Memory_Modify:	
  3262                           ; 0 bytes @ 0x4
  3263                           
  3264  0024                     ??_setSw_Initialization:	
  3265                           ; 0 bytes @ 0x4
  3266                           
  3267  0024                     ??_CC2500_TxData:	
  3268                           ; 0 bytes @ 0x4
  3269                           
  3270  0024                     ??_CC2500_RxData:	
  3271                           ; 0 bytes @ 0x4
  3272                           
  3273  0024                     ??_DimmerLights_Initialization:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0024                     ??_getLoad_AD:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0024                     ??_getTemp_AD:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0024                     ??___awdiv:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0024                     CC2500_WriteREG@w_addr:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0024                     setDimmerLights_Trigger@lights:	
  3289                           ; 1 bytes @ 0x4
  3290                           
  3291  0024                     setDimmerLights_TriggerAdj@lights:	
  3292                           ; 1 bytes @ 0x4
  3293                           
  3294  0024                     setLED_Initialization@led:	
  3295                           ; 1 bytes @ 0x4
  3296                           
  3297  0024                     setLED_Main@led:	
  3298                           ; 1 bytes @ 0x4
  3299                           
  3300  0024                     setSw_Initialization@sw:	
  3301                           ; 1 bytes @ 0x4
  3302                           
  3303  0024                     getSw_KeyStatus@sw:	
  3304                           ; 1 bytes @ 0x4
  3305                           
  3306  0024                     ___ftpack@sign:	
  3307                           ; 1 bytes @ 0x4
  3308                           
  3309  0024                     getBuz_GO@i:	
  3310                           ; 1 bytes @ 0x4
  3311                           
  3312  0024                     DelayTime_1us@j:	
  3313                           ; 2 bytes @ 0x4
  3314                           
  3315                           
  3316                           ; 2 bytes @ 0x4
  3317  0024                     	ds	1
  3318  0025                     ??_CC2500_InitSetREG:	
  3319  0025                     ??_CC2500_InitPATable:	
  3320                           ; 0 bytes @ 0x5
  3321                           
  3322  0025                     ??___ftpack:	
  3323                           ; 0 bytes @ 0x5
  3324                           
  3325  0025                     ??_setDimmerLights_AdjControl:	
  3326                           ; 0 bytes @ 0x5
  3327                           
  3328  0025                     ??_LED_Initialization:	
  3329                           ; 0 bytes @ 0x5
  3330                           
  3331  0025                     ??_LED_Main:	
  3332                           ; 0 bytes @ 0x5
  3333                           
  3334  0025                     ??_Switch_Initialization:	
  3335                           ; 0 bytes @ 0x5
  3336                           
  3337  0025                     CC2500_TxData@loop_e:	
  3338                           ; 0 bytes @ 0x5
  3339                           
  3340  0025                     CC2500_RxData@loop_f:	
  3341                           ; 1 bytes @ 0x5
  3342                           
  3343  0025                     Flash_Memory_Modify@i:	
  3344                           ; 1 bytes @ 0x5
  3345                           
  3346  0025                     getTemp_AD@channel:	
  3347                           ; 1 bytes @ 0x5
  3348                           
  3349  0025                     getMain_LightsStatus@count:	
  3350                           ; 1 bytes @ 0x5
  3351                           
  3352  0025                     getMain_All_Error_Status@command:	
  3353                           ; 1 bytes @ 0x5
  3354                           
  3355  0025                     ___awdiv@counter:	
  3356                           ; 1 bytes @ 0x5
  3357                           
  3358                           
  3359                           ; 1 bytes @ 0x5
  3360  0025                     	ds	1
  3361  0026                     ??_CC2500_PowerRST:	
  3362  0026                     ??_CC2500_FrequencyCabr:	
  3363                           ; 0 bytes @ 0x6
  3364                           
  3365  0026                     CC2500_InitSetREG@temp1:	
  3366                           ; 0 bytes @ 0x6
  3367                           
  3368  0026                     CC2500_InitPATable@temp:	
  3369                           ; 1 bytes @ 0x6
  3370                           
  3371  0026                     DelayTimejudge@i:	
  3372                           ; 1 bytes @ 0x6
  3373                           
  3374  0026                     setDimmerLights_AdjControl@idle:	
  3375                           ; 1 bytes @ 0x6
  3376                           
  3377  0026                     getLoad_AD@channel:	
  3378                           ; 1 bytes @ 0x6
  3379                           
  3380  0026                     getMain_All_Error_Status@status:	
  3381                           ; 1 bytes @ 0x6
  3382                           
  3383  0026                     ___awdiv@sign:	
  3384                           ; 1 bytes @ 0x6
  3385                           
  3386  0026                     getMain_LightsStatus@i:	
  3387                           ; 1 bytes @ 0x6
  3388                           
  3389                           
  3390                           ; 2 bytes @ 0x6
  3391  0026                     	ds	1
  3392  0027                     ?_setDimmerLights:	
  3393  0027                     ??_setTemp_Main:	
  3394                           ; 0 bytes @ 0x7
  3395                           
  3396  0027                     CC2500_InitSetREG@temp2:	
  3397                           ; 0 bytes @ 0x7
  3398                           
  3399  0027                     CC2500_InitPATable@loop_d:	
  3400                           ; 1 bytes @ 0x7
  3401                           
  3402  0027                     DelayTimejudge@j:	
  3403                           ; 1 bytes @ 0x7
  3404                           
  3405  0027                     _setDimmerLights_AdjControl$2577:	
  3406                           ; 1 bytes @ 0x7
  3407                           
  3408  0027                     setDimmerLights@status:	
  3409                           ; 1 bytes @ 0x7
  3410                           
  3411  0027                     getLoad_AD@k:	
  3412                           ; 1 bytes @ 0x7
  3413                           
  3414  0027                     ___awdiv@quotient:	
  3415                           ; 1 bytes @ 0x7
  3416                           
  3417                           
  3418                           ; 2 bytes @ 0x7
  3419  0027                     	ds	1
  3420  0028                     ??_setDimmerLights:	
  3421  0028                     ?___awtoft:	
  3422                           ; 0 bytes @ 0x8
  3423                           
  3424  0028                     CC2500_InitSetREG@loop_c:	
  3425                           ; 3 bytes @ 0x8
  3426                           
  3427  0028                     DelayTimejudge@k:	
  3428                           ; 1 bytes @ 0x8
  3429                           
  3430  0028                     setDimmerLights_AdjControl@sw:	
  3431                           ; 1 bytes @ 0x8
  3432                           
  3433  0028                     getLoad_AD@j:	
  3434                           ; 1 bytes @ 0x8
  3435                           
  3436  0028                     getMain_LightsStatus@status:	
  3437                           ; 1 bytes @ 0x8
  3438                           
  3439  0028                     ___awtoft@c:	
  3440                           ; 1 bytes @ 0x8
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x8
  3444  0028                     	ds	1
  3445  0029                     ?_setBuz:	
  3446  0029                     ??_CC2500_PowerOnInitial:	
  3447                           ; 0 bytes @ 0x9
  3448                           
  3449  0029                     ??_Flash_Memory_Main:	
  3450                           ; 0 bytes @ 0x9
  3451                           
  3452  0029                     ??_Load_Main:	
  3453                           ; 0 bytes @ 0x9
  3454                           
  3455  0029                     ??_Temp_Main:	
  3456                           ; 0 bytes @ 0x9
  3457                           
  3458  0029                     DelayTimejudge@value:	
  3459                           ; 0 bytes @ 0x9
  3460                           
  3461  0029                     setDimmerLights@lights:	
  3462                           ; 1 bytes @ 0x9
  3463                           
  3464  0029                     getLoad_AD@i:	
  3465                           ; 1 bytes @ 0x9
  3466                           
  3467  0029                     setBuz@time:	
  3468                           ; 1 bytes @ 0x9
  3469                           
  3470                           
  3471                           ; 2 bytes @ 0x9
  3472  0029                     	ds	1
  3473  002A                     ?_setDelayOff_GO:	
  3474  002A                     setDelayOff_GO@command:	
  3475                           ; 0 bytes @ 0xA
  3476                           
  3477                           
  3478                           ; 1 bytes @ 0xA
  3479  002A                     	ds	1
  3480  002B                     ??_setBuz:	
  3481  002B                     ??___awtoft:	
  3482                           ; 0 bytes @ 0xB
  3483                           
  3484  002B                     setDelayOff_GO@value:	
  3485                           ; 0 bytes @ 0xB
  3486                           
  3487  002B                     Load_Main@j:	
  3488                           ; 1 bytes @ 0xB
  3489                           
  3490                           
  3491                           ; 1 bytes @ 0xB
  3492  002B                     	ds	1
  3493  002C                     ??_setDelayOff_GO:	
  3494  002C                     setBuz@count:	
  3495                           ; 0 bytes @ 0xC
  3496                           
  3497  002C                     Load_Main@adjgo:	
  3498                           ; 1 bytes @ 0xC
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0xC
  3502  002C                     	ds	1
  3503  002D                     ??_setLog_Code:	
  3504  002D                     ??_my_MainTimer:	
  3505                           ; 0 bytes @ 0xD
  3506                           
  3507  002D                     _Load_Main$3848:	
  3508                           ; 0 bytes @ 0xD
  3509                           
  3510  002D                     ___awtoft@sign:	
  3511                           ; 1 bytes @ 0xD
  3512                           
  3513                           
  3514                           ; 1 bytes @ 0xD
  3515  002D                     	ds	1
  3516  002E                     ?___ftdiv:	
  3517  002E                     ?___ftmul:	
  3518                           ; 3 bytes @ 0xE
  3519                           
  3520  002E                     setDelayOff_GO@sw:	
  3521                           ; 3 bytes @ 0xE
  3522                           
  3523  002E                     Load_Main@error:	
  3524                           ; 1 bytes @ 0xE
  3525                           
  3526  002E                     ___ftdiv@f2:	
  3527                           ; 1 bytes @ 0xE
  3528                           
  3529  002E                     ___ftmul@f1:	
  3530                           ; 3 bytes @ 0xE
  3531                           
  3532                           
  3533                           ; 3 bytes @ 0xE
  3534  002E                     	ds	1
  3535  002F                     Load_Main@i:	
  3536                           
  3537                           ; 1 bytes @ 0xF
  3538  002F                     	ds	2
  3539  0031                     ___ftdiv@f1:	
  3540  0031                     ___ftmul@f2:	
  3541                           ; 3 bytes @ 0x11
  3542                           
  3543                           
  3544                           ; 3 bytes @ 0x11
  3545  0031                     	ds	3
  3546  0034                     ??___ftdiv:	
  3547  0034                     ??___ftmul:	
  3548                           ; 0 bytes @ 0x14
  3549                           
  3550                           
  3551                           ; 0 bytes @ 0x14
  3552  0034                     	ds	4
  3553  0038                     ___ftdiv@cntr:	
  3554  0038                     ___ftmul@exp:	
  3555                           ; 1 bytes @ 0x18
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x18
  3559  0038                     	ds	1
  3560  0039                     ___ftdiv@f3:	
  3561  0039                     ___ftmul@f3_as_product:	
  3562                           ; 3 bytes @ 0x19
  3563                           
  3564                           
  3565                           ; 3 bytes @ 0x19
  3566  0039                     	ds	3
  3567  003C                     ___ftdiv@exp:	
  3568  003C                     ___ftmul@cntr:	
  3569                           ; 1 bytes @ 0x1C
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x1C
  3573  003C                     	ds	1
  3574  003D                     ___ftdiv@sign:	
  3575  003D                     ___ftmul@sign:	
  3576                           ; 1 bytes @ 0x1D
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x1D
  3580  003D                     	ds	1
  3581  003E                     ?___ftadd:	
  3582  003E                     ___ftadd@f1:	
  3583                           ; 3 bytes @ 0x1E
  3584                           
  3585                           
  3586                           ; 3 bytes @ 0x1E
  3587  003E                     	ds	3
  3588  0041                     ___ftadd@f2:	
  3589                           
  3590                           ; 3 bytes @ 0x21
  3591  0041                     	ds	3
  3592  0044                     ??___ftadd:	
  3593                           
  3594                           ; 0 bytes @ 0x24
  3595  0044                     	ds	4
  3596  0048                     ___ftadd@sign:	
  3597                           
  3598                           ; 1 bytes @ 0x28
  3599  0048                     	ds	1
  3600  0049                     ___ftadd@exp2:	
  3601                           
  3602                           ; 1 bytes @ 0x29
  3603  0049                     	ds	1
  3604  004A                     ___ftadd@exp1:	
  3605                           
  3606                           ; 1 bytes @ 0x2A
  3607  004A                     	ds	1
  3608  004B                     ?___fttol:	
  3609  004B                     ___fttol@f1:	
  3610                           ; 4 bytes @ 0x2B
  3611                           
  3612                           
  3613                           ; 3 bytes @ 0x2B
  3614  004B                     	ds	4
  3615  004F                     ??___fttol:	
  3616                           
  3617                           ; 0 bytes @ 0x2F
  3618  004F                     	ds	4
  3619  0053                     ___fttol@sign1:	
  3620                           
  3621                           ; 1 bytes @ 0x33
  3622  0053                     	ds	1
  3623  0054                     ___fttol@lval:	
  3624                           
  3625                           ; 4 bytes @ 0x34
  3626  0054                     	ds	4
  3627  0058                     ___fttol@exp1:	
  3628                           
  3629                           ; 1 bytes @ 0x38
  3630  0058                     	ds	1
  3631  0059                     ??_getPercentValue:	
  3632  0059                     ??_setPercentValue:	
  3633                           ; 0 bytes @ 0x39
  3634                           
  3635  0059                     setPercentValue@value:	
  3636                           ; 0 bytes @ 0x39
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0x39
  3640  0059                     	ds	1
  3641  005A                     setPercentValue@i:	
  3642                           
  3643                           ; 3 bytes @ 0x3A
  3644  005A                     	ds	1
  3645  005B                     getPercentValue@value:	
  3646                           
  3647                           ; 1 bytes @ 0x3B
  3648  005B                     	ds	1
  3649  005C                     getPercentValue@i:	
  3650                           
  3651                           ; 3 bytes @ 0x3C
  3652  005C                     	ds	1
  3653  005D                     ?_setRF_DimmerLights:	
  3654  005D                     ??_Flash_Memory_Initialization:	
  3655                           ; 0 bytes @ 0x3D
  3656                           
  3657  005D                     setRF_DimmerLights@on:	
  3658                           ; 0 bytes @ 0x3D
  3659                           
  3660                           
  3661                           ; 1 bytes @ 0x3D
  3662  005D                     	ds	1
  3663  005E                     ??_setRF_DimmerLights:	
  3664  005E                     Flash_Memory_Initialization@i:	
  3665                           ; 0 bytes @ 0x3E
  3666                           
  3667                           
  3668                           ; 1 bytes @ 0x3E
  3669  005E                     	ds	1
  3670  005F                     ??_setDimmerLights_AdjRF:	
  3671                           
  3672                           ; 0 bytes @ 0x3F
  3673  005F                     	ds	1
  3674  0060                     setDimmerLights_AdjRF@lights:	
  3675  0060                     setRF_DimmerLights@status:	
  3676                           ; 1 bytes @ 0x40
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x40
  3680  0060                     	ds	1
  3681  0061                     ??_setRF_DimmerValue:	
  3682  0061                     setRF_DimmerLights@lights:	
  3683                           ; 0 bytes @ 0x41
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x41
  3687  0061                     	ds	1
  3688  0062                     ??_setDimmerLights_SwOn:	
  3689  0062                     ??_setDimmerLights_SwOff:	
  3690                           ; 0 bytes @ 0x42
  3691                           
  3692  0062                     ?_setDimmerLights_Adj:	
  3693                           ; 0 bytes @ 0x42
  3694                           
  3695  0062                     setDimmerLights_Adj@status:	
  3696                           ; 0 bytes @ 0x42
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x42
  3700  0062                     	ds	1
  3701  0063                     ??_setDimmerLights_Adj:	
  3702  0063                     setDimmerLights_SwOn@idle:	
  3703                           ; 0 bytes @ 0x43
  3704                           
  3705  0063                     setRF_DimmerValue@lights:	
  3706                           ; 1 bytes @ 0x43
  3707                           
  3708                           
  3709                           ; 1 bytes @ 0x43
  3710  0063                     	ds	1
  3711  0064                     ??_setRFSW_AdjControl:	
  3712  0064                     setDimmerLights_SwOn@sw:	
  3713                           ; 0 bytes @ 0x44
  3714                           
  3715  0064                     setDimmerLights_SwOff@command:	
  3716                           ; 1 bytes @ 0x44
  3717                           
  3718  0064                     setDimmerLights_Adj@lights:	
  3719                           ; 1 bytes @ 0x44
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x44
  3723  0064                     	ds	1
  3724  0065                     ??_setDimmerLights_Main:	
  3725  0065                     setDimmerLights_Main@lights:	
  3726                           ; 0 bytes @ 0x45
  3727                           
  3728  0065                     setDimmerLights_SwOff@sw:	
  3729                           ; 1 bytes @ 0x45
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0x45
  3733  0065                     	ds	1
  3734  0066                     ??_DlyOff_Main:	
  3735  0066                     ??_setRFSW_Control:	
  3736                           ; 0 bytes @ 0x46
  3737                           
  3738  0066                     ??_setSw_Main:	
  3739                           ; 0 bytes @ 0x46
  3740                           
  3741  0066                     ??_DimmerLights_Main:	
  3742                           ; 0 bytes @ 0x46
  3743                           
  3744  0066                     ??_setDimmerLights_ErrorClose:	
  3745                           ; 0 bytes @ 0x46
  3746                           
  3747  0066                     setRFSW_AdjControl@status:	
  3748                           ; 0 bytes @ 0x46
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x46
  3752  0066                     	ds	1
  3753  0067                     setDimmerLights_ErrorClose@count:	
  3754  0067                     setRFSW_Control@status:	
  3755                           ; 1 bytes @ 0x47
  3756                           
  3757  0067                     setRFSW_AdjControl@sw:	
  3758                           ; 1 bytes @ 0x47
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x47
  3762  0067                     	ds	1
  3763  0068                     DlyOff_Main@sw:	
  3764  0068                     setDimmerLights_ErrorClose@lights:	
  3765                           ; 1 bytes @ 0x48
  3766                           
  3767  0068                     setRFSW_Control@sw:	
  3768                           ; 1 bytes @ 0x48
  3769                           
  3770  0068                     setSw_Main@sw:	
  3771                           ; 1 bytes @ 0x48
  3772                           
  3773  0068                     _DimmerLights_Main$2494:	
  3774                           ; 1 bytes @ 0x48
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x48
  3778  0068                     	ds	1
  3779  0069                     ??_getRxData:	
  3780  0069                     ??_setControl_Lights_Table:	
  3781                           ; 0 bytes @ 0x49
  3782                           
  3783  0069                     ??_DelayOff_Main:	
  3784                           ; 0 bytes @ 0x49
  3785                           
  3786  0069                     setDimmerLights_ErrorClose@i:	
  3787                           ; 0 bytes @ 0x49
  3788                           
  3789                           
  3790                           ; 2 bytes @ 0x49
  3791  0069                     	ds	1
  3792  006A                     getRxData@error:	
  3793                           
  3794                           ; 1 bytes @ 0x4A
  3795  006A                     	ds	1
  3796  006B                     ??_setRF_Main:	
  3797  006B                     ??_setMain_Exception:	
  3798                           ; 0 bytes @ 0x4B
  3799                           
  3800                           
  3801                           ; 0 bytes @ 0x4B
  3802  006B                     	ds	1
  3803  006C                     setRF_Main@loop_f:	
  3804                           
  3805                           ; 1 bytes @ 0x4C
  3806  006C                     	ds	1
  3807  006D                     ??_Switch_Main:	
  3808  006D                     setRF_Main@Receive_OK:	
  3809                           ; 0 bytes @ 0x4D
  3810                           
  3811                           
  3812                           ; 1 bytes @ 0x4D
  3813  006D                     	ds	1
  3814  006E                     setRF_Main@error:	
  3815  006E                     Switch_Main@error:	
  3816                           ; 1 bytes @ 0x4E
  3817                           
  3818                           
  3819                           ; 1 bytes @ 0x4E
  3820  006E                     	ds	1
  3821  006F                     ??_RF_Main:	
  3822  006F                     ??_main:	
  3823                           ; 0 bytes @ 0x4F
  3824                           
  3825                           
  3826                           	psect	maintext
  3827  16F5                     __pmaintext:	
  3828                           ; 0 bytes @ 0x4F
  3829 ;;
  3830 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3831 ;;
  3832 ;; *************** function _main *****************
  3833 ;; Defined at:
  3834 ;;		line 7 in file "../src/main_B1.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  argc            2    5[BANK1 ] int 
  3837 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  2    5[BANK1 ] int 
  3842 ;; Registers used:
  3843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 17F/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3849 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;Total ram usage:        4 bytes
  3854 ;; Hardware stack levels required when called:   15
  3855 ;; This function calls:
  3856 ;;		_Buzzer_Initialization
  3857 ;;		_Buzzer_Main
  3858 ;;		_CC2500_PowerOnInitial
  3859 ;;		_DelayOff_Initialization
  3860 ;;		_DelayOff_Main
  3861 ;;		_DimmerLights_Initialization
  3862 ;;		_DimmerLights_Main
  3863 ;;		_Flash_Memory_Initialization
  3864 ;;		_Flash_Memory_Main
  3865 ;;		_LED_Initialization
  3866 ;;		_LED_Main
  3867 ;;		_Load_Initialization
  3868 ;;		_Load_Main
  3869 ;;		_Mcu_Initialization
  3870 ;;		_RF_Initialization
  3871 ;;		_RF_Main
  3872 ;;		_Switch_Initialization
  3873 ;;		_Switch_Main
  3874 ;;		_Temp_Initialization
  3875 ;;		_Temp_Main
  3876 ;;		_WDT_Main
  3877 ;;		_getLoad_AD
  3878 ;;		_getTemp_AD
  3879 ;;		_myMain_Initialization
  3880 ;;		_my_MainTimer
  3881 ;; This function is called by:
  3882 ;;		Startup code after reset
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _main
  3888  16F5                     _main:	
  3889                           
  3890                           ;main_B1.c: 8: myMain_Initialization();
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3894  16F5  319C  2453  3196   	fcall	_myMain_Initialization
  3895                           
  3896                           ;main_B1.c: 9: Mcu_Initialization();
  3897  16F8  319C  24DA  3196   	fcall	_Mcu_Initialization
  3898                           
  3899                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3900  16FB  3186  2620  3196   	fcall	_Flash_Memory_Initialization
  3901                           
  3902                           ;main_B1.c: 11: LED_Initialization();
  3903  16FE  319B  23ED  3196   	fcall	_LED_Initialization
  3904                           
  3905                           ;main_B1.c: 12: Buzzer_Initialization();
  3906  1701  319B  2341  3196   	fcall	_Buzzer_Initialization
  3907                           
  3908                           ;main_B1.c: 14: ;;
  3909                           ;main_B1.c: 15: Temp_Initialization();
  3910  1704  319B  234A  3196   	fcall	_Temp_Initialization
  3911                           
  3912                           ;main_B1.c: 16: Load_Initialization();
  3913  1707  319B  2362  3196   	fcall	_Load_Initialization
  3914                           
  3915                           ;main_B1.c: 17: ;;
  3916                           ;main_B1.c: 18: DelayOff_Initialization();
  3917  170A  319B  2382  3196   	fcall	_DelayOff_Initialization
  3918                           
  3919                           ;main_B1.c: 20: DimmerLights_Initialization();
  3920  170D  319E  2604  3196   	fcall	_DimmerLights_Initialization
  3921                           
  3922                           ;main_B1.c: 21: ;;
  3923                           ;main_B1.c: 22: ;;
  3924                           ;main_B1.c: 23: ;;
  3925                           ;main_B1.c: 24: Switch_Initialization();
  3926  1710  319C  2429  3196   	fcall	_Switch_Initialization
  3927                           
  3928                           ;main_B1.c: 25: RF_Initialization();
  3929  1713  319B  2344  3196   	fcall	_RF_Initialization
  3930                           
  3931                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3932  1716  319D  25AF  3196   	fcall	_CC2500_PowerOnInitial
  3933  1719                     l8239:	
  3934                           ;main_B1.c: 27: ;;
  3935                           ;main_B1.c: 29: while (1) {
  3936                           
  3937                           
  3938                           ;main_B1.c: 31: if (myMain.PowerON == 1) {
  3939  1719  0021               	movlb	1	; select bank1
  3940  171A  1C20               	btfss	_myMain^(0+128),0
  3941  171B  2F24               	goto	l8243
  3942                           
  3943                           ;main_B1.c: 37: getLoad_AD(0x05);
  3944  171C  3005               	movlw	5
  3945  171D  318C  246F  3196   	fcall	_getLoad_AD
  3946                           
  3947                           ;main_B1.c: 41: getTemp_AD(0x09);
  3948  1720  3009               	movlw	9
  3949  1721  3193  2341  3196   	fcall	_getTemp_AD
  3950  1724                     l8243:	
  3951                           
  3952                           ;main_B1.c: 56: }
  3953                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3954  1724  0022               	movlb	2	; select bank2
  3955  1725  1C23               	btfss	_Timer1^(0+256),0
  3956  1726  2F19               	goto	l8239
  3957                           
  3958                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3959  1727  1023               	bcf	_Timer1^(0+256),0
  3960                           
  3961                           ;main_B1.c: 94: my_MainTimer();
  3962  1728  3193  2378  3196   	fcall	_my_MainTimer
  3963                           
  3964                           ;main_B1.c: 95: WDT_Main();
  3965  172B  319C  24EC  3196   	fcall	_WDT_Main
  3966                           
  3967                           ;main_B1.c: 96: ;;
  3968                           ;main_B1.c: 97: ;;
  3969                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3970  172E  0021               	movlb	1	; select bank1
  3971  172F  1C20               	btfss	_myMain^(0+128),0
  3972  1730  2F19               	goto	l8239
  3973                           
  3974                           ;main_B1.c: 99: Flash_Memory_Main();
  3975  1731  3192  229E  3196   	fcall	_Flash_Memory_Main
  3976                           
  3977                           ;main_B1.c: 101: LED_Main();
  3978  1734  319B  23F9  3196   	fcall	_LED_Main
  3979                           
  3980                           ;main_B1.c: 102: Buzzer_Main();
  3981  1737  3194  24B9  3196   	fcall	_Buzzer_Main
  3982                           
  3983                           ;main_B1.c: 104: ;;
  3984                           ;main_B1.c: 105: Temp_Main();
  3985  173A  3188  2000  3196   	fcall	_Temp_Main
  3986                           
  3987                           ;main_B1.c: 106: Load_Main();
  3988  173D  3181  21B9  3196   	fcall	_Load_Main
  3989                           
  3990                           ;main_B1.c: 107: ;;
  3991                           ;main_B1.c: 109: ;;
  3992                           ;main_B1.c: 110: DimmerLights_Main();
  3993  1740  3192  2200  3196   	fcall	_DimmerLights_Main
  3994                           
  3995                           ;main_B1.c: 111: Switch_Main();
  3996  1743  319F  27DC  3196   	fcall	_Switch_Main
  3997                           
  3998                           ;main_B1.c: 112: ;;
  3999                           ;main_B1.c: 113: ;;
  4000                           ;main_B1.c: 115: RF_Main();
  4001  1746  319B  2347  3196   	fcall	_RF_Main
  4002                           
  4003                           ;main_B1.c: 116: DelayOff_Main();
  4004  1749  319B  238A  3196   	fcall	_DelayOff_Main
  4005                           
  4006                           ;main_B1.c: 117: ;;
  4007  174C  2F19               	goto	l8239
  4008  174D                     __end_of_main:	
  4009                           ;main_B1.c: 125: }
  4010                           ;main_B1.c: 126: }
  4011                           ;main_B1.c: 160: }
  4012                           ;main_B1.c: 161: return (0);
  4013                           ;	Return value of _main is never used
  4014                           
  4015                           
  4016                           	psect	text1
  4017  1378                     __ptext1:	
  4018 ;; *************** function _my_MainTimer *****************
  4019 ;; Defined at:
  4020 ;;		line 180 in file "../src/main_B1.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;		None               void
  4027 ;; Registers used:
  4028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    7
  4041 ;; This function calls:
  4042 ;;		_setBuz
  4043 ;; This function is called by:
  4044 ;;		_main
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _my_MainTimer
  4050  1378                     _my_MainTimer:	
  4051                           
  4052                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4056  1378  0021               	movlb	1	; select bank1
  4057  1379  1820               	btfsc	_myMain^(0+128),0
  4058  137A  2B99               	goto	l8103
  4059                           
  4060                           ;main_B1.c: 183: myMain.PowerCount++;
  4061  137B  3001               	movlw	1
  4062  137C  07A2               	addwf	(_myMain^(0+128)+2),f
  4063  137D  3000               	movlw	0
  4064  137E  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4065                           
  4066                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  4067  137F  3002               	movlw	2
  4068  1380  3EA0               	addlw	_myMain& (0+255)
  4069  1381  0086               	movwf	6
  4070  1382  0187               	clrf	7
  4071  1383  3F40               	moviw [0]fsr1
  4072  1384  3A96               	xorlw	150
  4073  1385  1D03               	skipz
  4074  1386  2B89               	goto	u8225
  4075  1387  3F41               	moviw [1]fsr1
  4076  1388  3A00               	xorlw	0
  4077  1389                     u8225:	
  4078  1389  1D03               	skipz
  4079  138A  0008               	return
  4080                           
  4081                           ;main_B1.c: 185: {
  4082                           ;main_B1.c: 186: myMain.PowerCount = 0;
  4083  138B  01A2               	clrf	(_myMain^(0+128)+2)
  4084  138C  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4085                           
  4086                           ;main_B1.c: 187: myMain.PowerON = 1;
  4087  138D  1420               	bsf	_myMain^(0+128),0
  4088                           
  4089                           ;main_B1.c: 193: setBuz(3, 50);
  4090  138E  3032               	movlw	50
  4091  138F  0020               	movlb	0	; select bank0
  4092  1390  00A9               	movwf	setBuz@time
  4093  1391  3000               	movlw	0
  4094  1392  00AA               	movwf	setBuz@time+1
  4095  1393  3003               	movlw	3
  4096  1394  3197  274D         	fcall	_setBuz
  4097                           
  4098                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4099  1396  0021               	movlb	1	; select bank1
  4100  1397  1620               	bsf	_myMain^(0+128),4
  4101                           
  4102                           ;main_B1.c: 203: }
  4103                           ;main_B1.c: 204: } else {
  4104  1398  0008               	return
  4105  1399                     l8103:	
  4106                           
  4107                           ;main_B1.c: 212: myMain.Count1++;
  4108  1399  3001               	movlw	1
  4109  139A  07A6               	addwf	(_myMain^(0+128)+6),f
  4110  139B  3000               	movlw	0
  4111  139C  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4112                           
  4113                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  4114  139D  3006               	movlw	6
  4115  139E  3EA0               	addlw	_myMain& (0+255)
  4116  139F  0086               	movwf	6
  4117  13A0  0187               	clrf	7
  4118  13A1  3F40               	moviw [0]fsr1
  4119  13A2  3A64               	xorlw	100
  4120  13A3  1D03               	skipz
  4121  13A4  2BA7               	goto	u8235
  4122  13A5  3F41               	moviw [1]fsr1
  4123  13A6  3A00               	xorlw	0
  4124  13A7                     u8235:	
  4125  13A7  1D03               	skipz
  4126  13A8  0008               	return
  4127                           
  4128                           ;main_B1.c: 214: {
  4129                           ;main_B1.c: 215: myMain.Count1 = 0;
  4130  13A9  01A6               	clrf	(_myMain^(0+128)+6)
  4131  13AA  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4132                           
  4133                           ;main_B1.c: 227: if (myMain.Flag) {
  4134  13AB  1CA0               	btfss	_myMain^(0+128),1
  4135  13AC  2BAF               	goto	l2673
  4136                           
  4137                           ;main_B1.c: 228: myMain.Flag = 0;
  4138  13AD  10A0               	bcf	_myMain^(0+128),1
  4139                           
  4140                           ;main_B1.c: 237: } else {
  4141  13AE  0008               	return
  4142  13AF                     l2673:	
  4143                           
  4144                           ;main_B1.c: 238: myMain.Flag = 1;
  4145  13AF  14A0               	bsf	_myMain^(0+128),1
  4146  13B0  0008               	return
  4147  13B1                     __end_of_my_MainTimer:	
  4148                           
  4149                           	psect	text2
  4150  1C53                     __ptext2:	
  4151 ;; *************** function _myMain_Initialization *****************
  4152 ;; Defined at:
  4153 ;;		line 167 in file "../src/main_B1.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;		None               void
  4160 ;; Registers used:
  4161 ;;		wreg, fsr1l, fsr1h
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;Total ram usage:        1 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    5
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function _myMain_Initialization
  4183  1C53                     _myMain_Initialization:	
  4184                           
  4185                           ;main_B1.c: 169: product = &_product;
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4189  1C53  3045               	movlw	__product& (0+255)
  4190  1C54  0020               	movlb	0	; select bank0
  4191  1C55  00A0               	movwf	??_myMain_Initialization
  4192  1C56  0820               	movf	??_myMain_Initialization,w
  4193  1C57  00EF               	movwf	_product
  4194                           
  4195                           ;main_B1.c: 170: product->Data[20] = 210;
  4196  1C58  30D2               	movlw	210
  4197  1C59  00A0               	movwf	??_myMain_Initialization
  4198  1C5A  086F               	movf	_product,w
  4199  1C5B  3E14               	addlw	20
  4200  1C5C  0086               	movwf	6
  4201  1C5D  3002               	movlw	2	; select bank4/5
  4202  1C5E  0087               	movwf	7
  4203  1C5F  0820               	movf	??_myMain_Initialization,w
  4204  1C60  0081               	movwf	1
  4205  1C61  0008               	return
  4206  1C62                     __end_of_myMain_Initialization:	
  4207                           
  4208                           	psect	text3
  4209  1341                     __ptext3:	
  4210 ;; *************** function _getTemp_AD *****************
  4211 ;; Defined at:
  4212 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  channel         1    wreg     unsigned char 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  channel         1    5[BANK0 ] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;		None               void
  4219 ;; Registers used:
  4220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;Total ram usage:        2 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    7
  4233 ;; This function calls:
  4234 ;;		_getAD
  4235 ;; This function is called by:
  4236 ;;		_main
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _getTemp_AD
  4242  1341                     _getTemp_AD:	
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4246                           ;getTemp_AD@channel stored from wreg
  4247  1341  0020               	movlb	0	; select bank0
  4248  1342  00A5               	movwf	getTemp_AD@channel
  4249                           
  4250                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4251  1343  0021               	movlb	1	; select bank1
  4252  1344  1D54               	btfss	_Temp^(0+128),2
  4253  1345  0008               	return
  4254                           
  4255                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4256  1346  1654               	bsf	_Temp^(0+128),4
  4257                           
  4258                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4259  1347  30F0               	movlw	240
  4260  1348  0020               	movlb	0	; select bank0
  4261  1349  00A4               	movwf	??_getTemp_AD
  4262  134A  0824               	movf	??_getTemp_AD,w
  4263  134B  00A0               	movwf	getAD@adcon1
  4264  134C  0825               	movf	getTemp_AD@channel,w
  4265  134D  319F  2734  3193   	fcall	_getAD
  4266  1350  0020               	movlb	0	; select bank0
  4267  1351  0821               	movf	?_getAD+1,w
  4268  1352  0021               	movlb	1	; select bank1
  4269  1353  01E1               	clrf	((_Temp+1)^(0+128)+12)
  4270  1354  07E1               	addwf	((_Temp+1)^(0+128)+12),f
  4271  1355  0020               	movlb	0	; select bank0
  4272  1356  0820               	movf	?_getAD,w
  4273  1357  0021               	movlb	1	; select bank1
  4274  1358  01E0               	clrf	(_Temp^(0+128)+12)
  4275  1359  07E0               	addwf	(_Temp^(0+128)+12),f
  4276                           
  4277                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4278  135A  0861               	movf	((_Temp+1)^(0+128)+12),w
  4279  135B  025D               	subwf	((_Temp+1)^(0+128)+8),w
  4280  135C  1D03               	skipz
  4281  135D  2B60               	goto	u8165
  4282  135E  0860               	movf	(_Temp^(0+128)+12),w
  4283  135F  025C               	subwf	(_Temp^(0+128)+8),w
  4284  1360                     u8165:	
  4285  1360  1803               	skipnc
  4286  1361  2B69               	goto	l8051
  4287                           
  4288                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4289  1362  0861               	movf	((_Temp+1)^(0+128)+12),w
  4290  1363  01DD               	clrf	((_Temp+1)^(0+128)+8)
  4291  1364  07DD               	addwf	((_Temp+1)^(0+128)+8),f
  4292  1365  0860               	movf	(_Temp^(0+128)+12),w
  4293  1366  01DC               	clrf	(_Temp^(0+128)+8)
  4294  1367  07DC               	addwf	(_Temp^(0+128)+8),f
  4295                           
  4296                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4297  1368  0008               	return
  4298  1369                     l8051:	
  4299  1369  0861               	movf	((_Temp+1)^(0+128)+12),w
  4300  136A  025F               	subwf	((_Temp+1)^(0+128)+10),w
  4301  136B  1D03               	skipz
  4302  136C  2B6F               	goto	u8175
  4303  136D  0860               	movf	(_Temp^(0+128)+12),w
  4304  136E  025E               	subwf	(_Temp^(0+128)+10),w
  4305  136F                     u8175:	
  4306  136F  1803               	skipnc
  4307  1370  0008               	return
  4308                           
  4309                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4310  1371  0861               	movf	((_Temp+1)^(0+128)+12),w
  4311  1372  01DF               	clrf	((_Temp+1)^(0+128)+10)
  4312  1373  07DF               	addwf	((_Temp+1)^(0+128)+10),f
  4313  1374  0860               	movf	(_Temp^(0+128)+12),w
  4314  1375  01DE               	clrf	(_Temp^(0+128)+10)
  4315  1376  07DE               	addwf	(_Temp^(0+128)+10),f
  4316  1377  0008               	return
  4317  1378                     __end_of_getTemp_AD:	
  4318                           
  4319                           	psect	text4
  4320  0C6F                     __ptext4:	
  4321 ;; *************** function _getLoad_AD *****************
  4322 ;; Defined at:
  4323 ;;		line 15 in file "../src/OverLoad_B1.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  channel         1    wreg     unsigned char 
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  channel         1    6[BANK0 ] unsigned char 
  4328 ;;  i               1    9[BANK0 ] unsigned char 
  4329 ;;  j               1    8[BANK0 ] unsigned char 
  4330 ;;  k               1    7[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;Total ram usage:        6 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    7
  4347 ;; This function calls:
  4348 ;;		_getAD
  4349 ;; This function is called by:
  4350 ;;		_main
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           
  4355                           ;psect for function _getLoad_AD
  4356  0C6F                     _getLoad_AD:	
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4360                           ;getLoad_AD@channel stored from wreg
  4361  0C6F  0020               	movlb	0	; select bank0
  4362  0C70  00A6               	movwf	getLoad_AD@channel
  4363                           
  4364                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4365  0C71  01A9               	clrf	getLoad_AD@i
  4366  0C72  01A8               	clrf	getLoad_AD@j
  4367  0C73  01A7               	clrf	getLoad_AD@k
  4368                           
  4369                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4370  0C74  0022               	movlb	2	; select bank2
  4371  0C75  1E2A               	btfss	_Load^(0+256),4
  4372  0C76  0008               	return
  4373                           
  4374                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4375  0C77  30F3               	movlw	243
  4376  0C78  0020               	movlb	0	; select bank0
  4377  0C79  00A4               	movwf	??_getLoad_AD
  4378  0C7A  0824               	movf	??_getLoad_AD,w
  4379  0C7B  00A0               	movwf	getAD@adcon1
  4380  0C7C  0826               	movf	getLoad_AD@channel,w
  4381  0C7D  319F  2734  318C   	fcall	_getAD
  4382  0C80  0020               	movlb	0	; select bank0
  4383  0C81  0821               	movf	?_getAD+1,w
  4384  0C82  0022               	movlb	2	; select bank2
  4385  0C83  01CC               	clrf	((_Load+1)^(0+256)+33)
  4386  0C84  07CC               	addwf	((_Load+1)^(0+256)+33),f
  4387  0C85  0020               	movlb	0	; select bank0
  4388  0C86  0820               	movf	?_getAD,w
  4389  0C87  0022               	movlb	2	; select bank2
  4390  0C88  01CB               	clrf	(_Load^(0+256)+33)
  4391  0C89  07CB               	addwf	(_Load^(0+256)+33),f
  4392                           
  4393                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4394  0C8A  0020               	movlb	0	; select bank0
  4395  0C8B  01A9               	clrf	getLoad_AD@i
  4396  0C8C  3004               	movlw	4
  4397  0C8D  0229               	subwf	getLoad_AD@i,w
  4398  0C8E  1803               	btfsc	3,0
  4399  0C8F  2CBD               	goto	l7873
  4400  0C90                     l7861:	
  4401                           
  4402                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4403  0C90  3529               	lslf	getLoad_AD@i,w
  4404  0C91  3E35               	addlw	(_Load+11)& (0+255)
  4405  0C92  0086               	movwf	6
  4406  0C93  3001               	movlw	1	; select bank2/3
  4407  0C94  0087               	movwf	7
  4408  0C95  3F40               	moviw [0]fsr1
  4409  0C96  00A4               	movwf	??_getLoad_AD
  4410  0C97  3F41               	moviw [1]fsr1
  4411  0C98  00A5               	movwf	??_getLoad_AD+1
  4412  0C99  0022               	movlb	2	; select bank2
  4413  0C9A  084C               	movf	((_Load+1)^(0+256)+33),w
  4414  0C9B  0020               	movlb	0	; select bank0
  4415  0C9C  0225               	subwf	??_getLoad_AD+1,w
  4416  0C9D  1D03               	skipz
  4417  0C9E  2CA3               	goto	u7785
  4418  0C9F  0022               	movlb	2	; select bank2
  4419  0CA0  084B               	movf	(_Load^(0+256)+33),w
  4420  0CA1  0020               	movlb	0	; select bank0
  4421  0CA2  0224               	subwf	??_getLoad_AD,w
  4422  0CA3                     u7785:	
  4423  0CA3  1803               	skipnc
  4424  0CA4  2CB5               	goto	l7869
  4425  0CA5  08A8               	movf	getLoad_AD@j,f
  4426  0CA6  1D03               	skipz
  4427  0CA7  2CB5               	goto	l7869
  4428                           
  4429                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4430  0CA8  3529               	lslf	getLoad_AD@i,w
  4431  0CA9  3E35               	addlw	(_Load+11)& (0+255)
  4432  0CAA  0086               	movwf	6
  4433  0CAB  3001               	movlw	1	; select bank2/3
  4434  0CAC  0087               	movwf	7
  4435  0CAD  0022               	movlb	2	; select bank2
  4436  0CAE  084B               	movf	(_Load^(0+256)+33),w
  4437  0CAF  3FC0               	movwi [0]fsr1
  4438  0CB0  084C               	movf	((_Load+1)^(0+256)+33),w
  4439  0CB1  3FC1               	movwi [1]fsr1
  4440                           
  4441                           ;OverLoad_B1.c: 24: j = 1;
  4442  0CB2  0020               	movlb	0	; select bank0
  4443  0CB3  01A8               	clrf	getLoad_AD@j
  4444  0CB4  0AA8               	incf	getLoad_AD@j,f
  4445  0CB5                     l7869:	
  4446  0CB5  3001               	movlw	1
  4447  0CB6  00A4               	movwf	??_getLoad_AD
  4448  0CB7  0824               	movf	??_getLoad_AD,w
  4449  0CB8  07A9               	addwf	getLoad_AD@i,f
  4450  0CB9  3004               	movlw	4
  4451  0CBA  0229               	subwf	getLoad_AD@i,w
  4452  0CBB  1C03               	skipc
  4453  0CBC  2C90               	goto	l7861
  4454  0CBD                     l7873:	
  4455                           
  4456                           ;OverLoad_B1.c: 25: }
  4457                           ;OverLoad_B1.c: 26: }
  4458                           ;OverLoad_B1.c: 27: if (j == 0) {
  4459  0CBD  08A8               	movf	getLoad_AD@j,f
  4460  0CBE  1D03               	skipz
  4461  0CBF  0008               	return
  4462                           
  4463                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4464  0CC0  01A9               	clrf	getLoad_AD@i
  4465  0CC1                     L1:	
  4466  0CC1  3004               	movlw	4
  4467  0CC2  0229               	subwf	getLoad_AD@i,w
  4468  0CC3  1803               	btfsc	3,0
  4469  0CC4  0008               	return
  4470                           
  4471                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4472  0CC5  3529               	lslf	getLoad_AD@i,w
  4473  0CC6  3E3F               	addlw	(_Load+21)& (0+255)
  4474  0CC7  0086               	movwf	6
  4475  0CC8  3001               	movlw	1	; select bank2/3
  4476  0CC9  0087               	movwf	7
  4477  0CCA  3F40               	moviw [0]fsr1
  4478  0CCB  00A4               	movwf	??_getLoad_AD
  4479  0CCC  3F41               	moviw [1]fsr1
  4480  0CCD  00A5               	movwf	??_getLoad_AD+1
  4481  0CCE  0825               	movf	??_getLoad_AD+1,w
  4482  0CCF  0022               	movlb	2	; select bank2
  4483  0CD0  024C               	subwf	((_Load+1)^(0+256)+33),w
  4484  0CD1  1D03               	skipz
  4485  0CD2  2CD7               	goto	u7835
  4486  0CD3  0020               	movlb	0	; select bank0
  4487  0CD4  0824               	movf	??_getLoad_AD,w
  4488  0CD5  0022               	movlb	2	; select bank2
  4489  0CD6  024B               	subwf	(_Load^(0+256)+33),w
  4490  0CD7                     u7835:	
  4491  0CD7  1803               	skipnc
  4492  0CD8  2CEA               	goto	l7889
  4493  0CD9  0020               	movlb	0	; select bank0
  4494  0CDA  08A7               	movf	getLoad_AD@k,f
  4495  0CDB  1D03               	skipz
  4496  0CDC  2CEA               	goto	l7889
  4497                           
  4498                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4499  0CDD  3529               	lslf	getLoad_AD@i,w
  4500  0CDE  3E3F               	addlw	(_Load+21)& (0+255)
  4501  0CDF  0086               	movwf	6
  4502  0CE0  3001               	movlw	1	; select bank2/3
  4503  0CE1  0087               	movwf	7
  4504  0CE2  0022               	movlb	2	; select bank2
  4505  0CE3  084B               	movf	(_Load^(0+256)+33),w
  4506  0CE4  3FC0               	movwi [0]fsr1
  4507  0CE5  084C               	movf	((_Load+1)^(0+256)+33),w
  4508  0CE6  3FC1               	movwi [1]fsr1
  4509                           
  4510                           ;OverLoad_B1.c: 31: k = 1;
  4511  0CE7  0020               	movlb	0	; select bank0
  4512  0CE8  01A7               	clrf	getLoad_AD@k
  4513  0CE9  0AA7               	incf	getLoad_AD@k,f
  4514  0CEA                     l7889:	
  4515  0CEA  3001               	movlw	1
  4516  0CEB  0020               	movlb	0	; select bank0
  4517  0CEC  00A4               	movwf	??_getLoad_AD
  4518  0CED  0824               	movf	??_getLoad_AD,w
  4519  0CEE  07A9               	addwf	getLoad_AD@i,f
  4520  0CEF  2CC1               	goto	L1
  4521  0CF0                     __end_of_getLoad_AD:	
  4522                           
  4523                           	psect	text5
  4524  1F34                     __ptext5:	
  4525 ;; *************** function _getAD *****************
  4526 ;; Defined at:
  4527 ;;		line 454 in file "../src/MCU_B1.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  adcon0          1    wreg     unsigned char 
  4530 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  2    0[BANK0 ] int 
  4535 ;; Registers used:
  4536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4542 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;Total ram usage:        4 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    6
  4549 ;; This function calls:
  4550 ;;		_Timeout_Counter
  4551 ;;		_set_TimeoutCleared
  4552 ;; This function is called by:
  4553 ;;		_getLoad_AD
  4554 ;;		_getTemp_AD
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function _getAD
  4560  1F34                     _getAD:	
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4564                           ;getAD@adcon0 stored from wreg
  4565  1F34  0020               	movlb	0	; select bank0
  4566  1F35  00A3               	movwf	getAD@adcon0
  4567                           
  4568                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4569  1F36  0823               	movf	getAD@adcon0,w
  4570  1F37  0021               	movlb	1	; select bank1
  4571  1F38  009D               	movwf	29	;volatile
  4572                           
  4573                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4574  1F39  0020               	movlb	0	; select bank0
  4575  1F3A  0820               	movf	getAD@adcon1,w
  4576  1F3B  0021               	movlb	1	; select bank1
  4577  1F3C  009E               	movwf	30	;volatile
  4578                           
  4579                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4580  1F3D  149D               	bsf	29,1	;volatile
  4581                           
  4582                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4583  1F3E  2F42               	goto	l7289
  4584  1F3F                     l7287:	
  4585                           
  4586                           ;MCU_B1.c: 459: Timeout_Counter();
  4587  1F3F  319D  259A  319F   	fcall	_Timeout_Counter
  4588  1F42                     l7289:	
  4589  1F42  0021               	movlb	1	; select bank1
  4590  1F43  1C9D               	btfss	29,1	;volatile
  4591  1F44  2F47               	goto	l7293
  4592  1F45  1D2D               	btfss	(_myMain^(0+128)+13),2
  4593  1F46  2F3F               	goto	l7287
  4594  1F47                     l7293:	
  4595                           
  4596                           ;MCU_B1.c: 460: };
  4597                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4598  1F47  319B  235D         	fcall	_set_TimeoutCleared
  4599                           
  4600                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4601  1F49  0021               	movlb	1	; select bank1
  4602  1F4A  081C               	movf	28,w	;volatile
  4603  1F4B  0020               	movlb	0	; select bank0
  4604  1F4C  01A1               	clrf	?_getAD+1
  4605  1F4D  07A1               	addwf	?_getAD+1,f
  4606  1F4E  0021               	movlb	1	; select bank1
  4607  1F4F  081B               	movf	27,w	;volatile
  4608  1F50  0020               	movlb	0	; select bank0
  4609  1F51  01A0               	clrf	?_getAD
  4610  1F52  07A0               	addwf	?_getAD,f
  4611  1F53  0008               	return
  4612  1F54                     __end_of_getAD:	
  4613                           
  4614                           	psect	text6
  4615  1CEC                     __ptext6:	
  4616 ;; *************** function _WDT_Main *****************
  4617 ;; Defined at:
  4618 ;;		line 1033 in file "../src/MCU_B1.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;		None               void
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, pclath, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4636 ;;Total ram usage:        1 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    6
  4639 ;; This function calls:
  4640 ;;		_WDT_Clearing
  4641 ;; This function is called by:
  4642 ;;		_main
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function _WDT_Main
  4648  1CEC                     _WDT_Main:	
  4649                           
  4650                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4651                           
  4652                           ;incstack = 0
  4653                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4654  1CEC  0022               	movlb	2	; select bank2
  4655  1CED  1C28               	btfss	_WDT^(0+256),0
  4656  1CEE  0008               	return
  4657                           
  4658                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4659  1CEF  3001               	movlw	1
  4660  1CF0  02A9               	subwf	(_WDT^(0+256)+1),f
  4661  1CF1  0829               	movf	(_WDT^(0+256)+1),w
  4662  1CF2  3AFF               	xorlw	255
  4663  1CF3  1903               	skipnz
  4664  1CF4  0008               	return
  4665                           
  4666                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4667  1CF5  3064               	movlw	100
  4668  1CF6  0020               	movlb	0	; select bank0
  4669  1CF7  00A0               	movwf	??_WDT_Main
  4670  1CF8  0820               	movf	??_WDT_Main,w
  4671  1CF9  0022               	movlb	2	; select bank2
  4672  1CFA  00A9               	movwf	(_WDT^(0+256)+1)
  4673                           
  4674                           ;MCU_B1.c: 1037: WDT_Clearing();
  4675  1CFB  3180  2002         	fcall	_WDT_Clearing
  4676  1CFD  0008               	return
  4677  1CFE                     __end_of_WDT_Main:	
  4678                           
  4679                           	psect	text7
  4680  0002                     __ptext7:	
  4681 ;; *************** function _WDT_Clearing *****************
  4682 ;; Defined at:
  4683 ;;		line 1043 in file "../src/MCU_B1.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;		None               void
  4690 ;; Registers used:
  4691 ;;		None
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;Total ram usage:        0 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    5
  4704 ;; This function calls:
  4705 ;;		Nothing
  4706 ;; This function is called by:
  4707 ;;		_WDT_Main
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           
  4712                           ;psect for function _WDT_Clearing
  4713  0002                     _WDT_Clearing:	
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _WDT_Clearing: []
  4717  0002  0064               	clrwdt	;# 
  4718  0003  0008               	return
  4719  0004                     __end_of_WDT_Clearing:	
  4720                           
  4721                           	psect	text8
  4722  0800                     __ptext8:	
  4723 ;; *************** function _Temp_Main *****************
  4724 ;; Defined at:
  4725 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;		None
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;		None               void
  4732 ;; Registers used:
  4733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;Total ram usage:        0 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    7
  4746 ;; This function calls:
  4747 ;;		_setTemp_Main
  4748 ;; This function is called by:
  4749 ;;		_main
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _Temp_Main
  4755  0800                     _Temp_Main:	
  4756                           
  4757                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4761  0800  318E  260A         	fcall	_setTemp_Main
  4762  0802  0008               	return
  4763  0803                     __end_of_Temp_Main:	
  4764                           
  4765                           	psect	text9
  4766  0E0A                     __ptext9:	
  4767 ;; *************** function _setTemp_Main *****************
  4768 ;; Defined at:
  4769 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;		None
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;		None
  4774 ;; Return value:  Size  Location     Type
  4775 ;;		None               void
  4776 ;; Registers used:
  4777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;Total ram usage:        2 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    6
  4790 ;; This function calls:
  4791 ;;		_getMain_All_Error_Status
  4792 ;; This function is called by:
  4793 ;;		_Temp_Main
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function _setTemp_Main
  4799  0E0A                     _setTemp_Main:	
  4800                           
  4801                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4805  0E0A  0021               	movlb	1	; select bank1
  4806  0E0B  1C54               	btfss	_Temp^(0+128),0
  4807  0E0C  2E9F               	goto	l1613
  4808                           
  4809                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4810  0E0D  1954               	btfsc	_Temp^(0+128),2
  4811  0E0E  2E1E               	goto	l7365
  4812                           
  4813                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4814  0E0F  3001               	movlw	1
  4815  0E10  07D5               	addwf	(_Temp^(0+128)+1),f
  4816  0E11  3000               	movlw	0
  4817  0E12  3DD6               	addwfc	((_Temp+1)^(0+128)+1),f
  4818                           
  4819                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4820  0E13  3001               	movlw	1
  4821  0E14  0256               	subwf	((_Temp+1)^(0+128)+1),w
  4822  0E15  30F4               	movlw	244
  4823  0E16  1903               	skipnz
  4824  0E17  0255               	subwf	(_Temp^(0+128)+1),w
  4825  0E18  1C03               	skipc
  4826  0E19  0008               	return
  4827                           
  4828                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4829  0E1A  01D5               	clrf	(_Temp^(0+128)+1)
  4830  0E1B  01D6               	clrf	((_Temp+1)^(0+128)+1)
  4831                           
  4832                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4833  0E1C  1554               	bsf	_Temp^(0+128),2
  4834                           
  4835                           ;OverTemperature_B1.c: 65: }
  4836                           ;OverTemperature_B1.c: 66: } else {
  4837  0E1D  0008               	return
  4838  0E1E                     l7365:	
  4839                           
  4840                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4841  0E1E  3002               	movlw	2
  4842  0E1F  3191  21CD  318E   	fcall	_getMain_All_Error_Status
  4843  0E22  3800               	iorlw	0
  4844  0E23  1D03               	skipz
  4845  0E24  0008               	return
  4846                           
  4847                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4848  0E25  3001               	movlw	1
  4849  0E26  0021               	movlb	1	; select bank1
  4850  0E27  07D5               	addwf	(_Temp^(0+128)+1),f
  4851  0E28  3000               	movlw	0
  4852  0E29  3DD6               	addwfc	((_Temp+1)^(0+128)+1),f
  4853                           
  4854                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4855  0E2A  3000               	movlw	0
  4856  0E2B  0256               	subwf	((_Temp+1)^(0+128)+1),w
  4857  0E2C  3005               	movlw	5
  4858  0E2D  1903               	skipnz
  4859  0E2E  0255               	subwf	(_Temp^(0+128)+1),w
  4860  0E2F  1C03               	skipc
  4861  0E30  0008               	return
  4862                           
  4863                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4864  0E31  01D5               	clrf	(_Temp^(0+128)+1)
  4865  0E32  01D6               	clrf	((_Temp+1)^(0+128)+1)
  4866                           
  4867                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4868  0E33  1E54               	btfss	_Temp^(0+128),4
  4869  0E34  0008               	return
  4870                           
  4871                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4872  0E35  1154               	bcf	_Temp^(0+128),2
  4873                           
  4874                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4875  0E36  300A               	movlw	10
  4876  0E37  3ED4               	addlw	_Temp& (0+255)
  4877  0E38  0086               	movwf	6
  4878  0E39  0187               	clrf	7
  4879  0E3A  3008               	movlw	8
  4880  0E3B  3ED4               	addlw	_Temp& (0+255)
  4881  0E3C  0084               	movwf	4
  4882  0E3D  0185               	clrf	5
  4883  0E3E  3F40               	moviw [0]fsr1
  4884  0E3F  0700               	addwf	0,w
  4885  0E40  0020               	movlb	0	; select bank0
  4886  0E41  00A7               	movwf	??_setTemp_Main
  4887  0E42  3101               	addfsr 0,1
  4888  0E43  3F41               	moviw [1]fsr1
  4889  0E44  3D00               	addwfc	0,w
  4890  0E45  00A8               	movwf	??_setTemp_Main+1
  4891  0E46  36A8               	lsrf	??_setTemp_Main+1,f
  4892  0E47  0CA7               	rrf	??_setTemp_Main,f
  4893  0E48  0827               	movf	??_setTemp_Main,w
  4894  0E49  0021               	movlb	1	; select bank1
  4895  0E4A  00DA               	movwf	(_Temp^(0+128)+6)
  4896  0E4B  0020               	movlb	0	; select bank0
  4897  0E4C  0828               	movf	??_setTemp_Main+1,w
  4898  0E4D  0021               	movlb	1	; select bank1
  4899  0E4E  00DB               	movwf	((_Temp+1)^(0+128)+6)
  4900                           
  4901                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4902  0E4F  3058               	movlw	88
  4903  0E50  00E2               	movwf	(_Temp^(0+128)+14)
  4904  0E51  3002               	movlw	2
  4905  0E52  00E3               	movwf	(_Temp^(0+128)+15)
  4906                           
  4907                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4908  0E53  3026               	movlw	38
  4909  0E54  00E4               	movwf	(_Temp^(0+128)+16)
  4910  0E55  3002               	movlw	2
  4911  0E56  00E5               	movwf	(_Temp^(0+128)+17)
  4912                           
  4913                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4914  0E57  1CD4               	btfss	_Temp^(0+128),1
  4915  0E58  2E6E               	goto	l7395
  4916                           
  4917                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4918  0E59  0863               	movf	((_Temp+1)^(0+128)+14),w
  4919  0E5A  025B               	subwf	((_Temp+1)^(0+128)+6),w
  4920  0E5B  1D03               	skipz
  4921  0E5C  2E5F               	goto	u6925
  4922  0E5D  0862               	movf	(_Temp^(0+128)+14),w
  4923  0E5E  025A               	subwf	(_Temp^(0+128)+6),w
  4924  0E5F                     u6925:	
  4925  0E5F  1C03               	skipc
  4926  0E60  2E83               	goto	l7405
  4927                           
  4928                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4929  0E61  3001               	movlw	1
  4930  0E62  0020               	movlb	0	; select bank0
  4931  0E63  00A7               	movwf	??_setTemp_Main
  4932  0E64  0827               	movf	??_setTemp_Main,w
  4933  0E65  0021               	movlb	1	; select bank1
  4934  0E66  07D7               	addwf	(_Temp^(0+128)+3),f
  4935                           
  4936                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4937  0E67  3003               	movlw	3
  4938  0E68  0257               	subwf	(_Temp^(0+128)+3),w
  4939  0E69  1C03               	skipc
  4940  0E6A  2E84               	goto	l7407
  4941                           
  4942                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4943  0E6B  01D7               	clrf	(_Temp^(0+128)+3)
  4944                           
  4945                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4946  0E6C  10D4               	bcf	_Temp^(0+128),1
  4947                           
  4948                           ;OverTemperature_B1.c: 96: }
  4949                           ;OverTemperature_B1.c: 97: } else {
  4950  0E6D  2E84               	goto	l7407
  4951  0E6E                     l7395:	
  4952                           ;OverTemperature_B1.c: 99: }
  4953                           ;OverTemperature_B1.c: 100: } else {
  4954                           
  4955                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4956                           
  4957                           
  4958                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4959  0E6E  085B               	movf	((_Temp+1)^(0+128)+6),w
  4960  0E6F  0265               	subwf	((_Temp+1)^(0+128)+16),w
  4961  0E70  1D03               	skipz
  4962  0E71  2E74               	goto	u6945
  4963  0E72  085A               	movf	(_Temp^(0+128)+6),w
  4964  0E73  0264               	subwf	(_Temp^(0+128)+16),w
  4965  0E74                     u6945:	
  4966  0E74  1C03               	skipc
  4967  0E75  2E83               	goto	l7405
  4968                           
  4969                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4970  0E76  3001               	movlw	1
  4971  0E77  0020               	movlb	0	; select bank0
  4972  0E78  00A7               	movwf	??_setTemp_Main
  4973  0E79  0827               	movf	??_setTemp_Main,w
  4974  0E7A  0021               	movlb	1	; select bank1
  4975  0E7B  07D7               	addwf	(_Temp^(0+128)+3),f
  4976                           
  4977                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4978  0E7C  3003               	movlw	3
  4979  0E7D  0257               	subwf	(_Temp^(0+128)+3),w
  4980  0E7E  1C03               	skipc
  4981  0E7F  2E84               	goto	l7407
  4982                           
  4983                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4984  0E80  01D7               	clrf	(_Temp^(0+128)+3)
  4985                           
  4986                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  4987  0E81  14D4               	bsf	_Temp^(0+128),1
  4988                           
  4989                           ;OverTemperature_B1.c: 106: }
  4990                           ;OverTemperature_B1.c: 107: } else {
  4991  0E82  2E84               	goto	l7407
  4992  0E83                     l7405:	
  4993                           
  4994                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  4995  0E83  01D7               	clrf	(_Temp^(0+128)+3)
  4996  0E84                     l7407:	
  4997                           
  4998                           ;OverTemperature_B1.c: 109: }
  4999                           ;OverTemperature_B1.c: 110: }
  5000                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5001  0E84  085B               	movf	((_Temp+1)^(0+128)+6),w
  5002  0E85  0020               	movlb	0	; select bank0
  5003  0E86  00A7               	movwf	??_setTemp_Main
  5004  0E87  086F               	movf	_product,w
  5005  0E88  3E18               	addlw	24
  5006  0E89  0086               	movwf	6
  5007  0E8A  3002               	movlw	2	; select bank4/5
  5008  0E8B  0087               	movwf	7
  5009  0E8C  0827               	movf	??_setTemp_Main,w
  5010  0E8D  0081               	movwf	1
  5011                           
  5012                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5013  0E8E  0021               	movlb	1	; select bank1
  5014  0E8F  085A               	movf	(_Temp^(0+128)+6),w
  5015  0E90  0020               	movlb	0	; select bank0
  5016  0E91  00A7               	movwf	??_setTemp_Main
  5017  0E92  086F               	movf	_product,w
  5018  0E93  3E19               	addlw	25
  5019  0E94  0086               	movwf	6
  5020  0E95  3002               	movlw	2	; select bank4/5
  5021  0E96  0087               	movwf	7
  5022  0E97  0827               	movf	??_setTemp_Main,w
  5023  0E98  0081               	movwf	1
  5024                           
  5025                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5026  0E99  0021               	movlb	1	; select bank1
  5027  0E9A  01DC               	clrf	(_Temp^(0+128)+8)
  5028  0E9B  01DD               	clrf	((_Temp+1)^(0+128)+8)
  5029                           
  5030                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5031  0E9C  01DE               	clrf	(_Temp^(0+128)+10)
  5032  0E9D  01DF               	clrf	((_Temp+1)^(0+128)+10)
  5033                           
  5034                           ;OverTemperature_B1.c: 117: }
  5035                           ;OverTemperature_B1.c: 118: }
  5036                           ;OverTemperature_B1.c: 119: }
  5037                           ;OverTemperature_B1.c: 120: }
  5038                           ;OverTemperature_B1.c: 121: } else {
  5039  0E9E  0008               	return
  5040  0E9F                     l1613:	
  5041                           
  5042                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5043  0E9F  1C20               	btfss	_myMain^(0+128),0
  5044  0EA0  0008               	return
  5045                           
  5046                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5047  0EA1  1454               	bsf	_Temp^(0+128),0
  5048  0EA2  0008               	return
  5049  0EA3                     __end_of_setTemp_Main:	
  5050                           
  5051                           	psect	text10
  5052  1B4A                     __ptext10:	
  5053 ;; *************** function _Temp_Initialization *****************
  5054 ;; Defined at:
  5055 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		status,2, status,0, pclath, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;Total ram usage:        0 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    6
  5076 ;; This function calls:
  5077 ;;		_setTemp_Initialization
  5078 ;; This function is called by:
  5079 ;;		_main
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function _Temp_Initialization
  5085  1B4A                     _Temp_Initialization:	
  5086                           
  5087                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5091  1B4A  3187  27FF         	fcall	_setTemp_Initialization
  5092  1B4C  0008               	return
  5093  1B4D                     __end_of_Temp_Initialization:	
  5094                           
  5095                           	psect	text11
  5096  07FF                     __ptext11:	
  5097 ;; *************** function _setTemp_Initialization *****************
  5098 ;; Defined at:
  5099 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;		None
  5104 ;; Return value:  Size  Location     Type
  5105 ;;		None               void
  5106 ;; Registers used:
  5107 ;;		None
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;Total ram usage:        0 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    5
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_Temp_Initialization
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           
  5128                           ;psect for function _setTemp_Initialization
  5129  07FF                     _setTemp_Initialization:	
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in _setTemp_Initialization: []
  5133  07FF  0008               	return
  5134  0800                     __end_of_setTemp_Initialization:	
  5135                           
  5136                           	psect	text12
  5137  1FDC                     __ptext12:	
  5138 ;; *************** function _Switch_Main *****************
  5139 ;; Defined at:
  5140 ;;		line 72 in file "../src/Switch_B1.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  error           1   78[BANK0 ] unsigned char 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;		None               void
  5147 ;; Registers used:
  5148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;Total ram usage:        2 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:   12
  5161 ;; This function calls:
  5162 ;;		_TouchPower
  5163 ;;		_getMain_All_Error_Status
  5164 ;;		_setMain_Exception
  5165 ;;		_setSw_Main
  5166 ;; This function is called by:
  5167 ;;		_main
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _Switch_Main
  5173  1FDC                     _Switch_Main:	
  5174                           
  5175                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5176                           
  5177                           ;incstack = 0
  5178                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5179  1FDC  3000               	movlw	0
  5180  1FDD  3191  21CD  319F   	fcall	_getMain_All_Error_Status
  5181  1FE0  0020               	movlb	0	; select bank0
  5182  1FE1  00ED               	movwf	??_Switch_Main
  5183  1FE2  086D               	movf	??_Switch_Main,w
  5184  1FE3  00EE               	movwf	Switch_Main@error
  5185                           
  5186                           ;Switch_B1.c: 74: if (error != 0) {
  5187  1FE4  086E               	movf	Switch_Main@error,w
  5188  1FE5  1903               	btfsc	3,2
  5189  1FE6  2FEC               	goto	l2379
  5190                           
  5191                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5192  1FE7  0021               	movlb	1	; select bank1
  5193  1FE8  184F               	btfsc	_SwDetect^(0+128),0
  5194  1FE9  2FF5               	goto	l8079
  5195                           
  5196                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5197  1FEA  144F               	bsf	_SwDetect^(0+128),0
  5198  1FEB  2FF0               	goto	L2
  5199  1FEC                     l2379:	
  5200                           ;Switch_B1.c: 80: }
  5201                           ;Switch_B1.c: 81: } else {
  5202                           
  5203                           ;Switch_B1.c: 78: setMain_Exception(error);
  5204                           
  5205                           
  5206                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5207  1FEC  0021               	movlb	1	; select bank1
  5208  1FED  1C4F               	btfss	_SwDetect^(0+128),0
  5209  1FEE  2FF5               	goto	l8079
  5210                           
  5211                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5212  1FEF  104F               	bcf	_SwDetect^(0+128),0
  5213  1FF0                     L2:	
  5214                           
  5215                           ;Switch_B1.c: 85: setMain_Exception(error);
  5216  1FF0  0020               	movlb	0	; select bank0
  5217  1FF1  086E               	movf	Switch_Main@error,w
  5218  1FF2  3189  21E0  319F   	fcall	_setMain_Exception
  5219  1FF5                     l8079:	
  5220                           
  5221                           ;Switch_B1.c: 87: }
  5222                           ;Switch_B1.c: 88: }
  5223                           ;Switch_B1.c: 91: setSw_Main(1);
  5224  1FF5  3001               	movlw	1
  5225  1FF6  3180  204A  319F   	fcall	_setSw_Main
  5226                           
  5227                           ;Switch_B1.c: 95: setSw_Main(2);
  5228  1FF9  3002               	movlw	2
  5229  1FFA  3180  204A  319F   	fcall	_setSw_Main
  5230                           
  5231                           ;Switch_B1.c: 103: TouchPower();
  5232  1FFD  319D  25D9         	fcall	_TouchPower
  5233  1FFF  0008               	return
  5234  2000                     __end_of_Switch_Main:	
  5235                           
  5236                           	psect	text13
  5237  004A                     __ptext13:	
  5238 ;; *************** function _setSw_Main *****************
  5239 ;; Defined at:
  5240 ;;		line 137 in file "../src/Switch_B1.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  sw              1    wreg     unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  sw              1   72[BANK0 ] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;		None               void
  5247 ;; Registers used:
  5248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;Total ram usage:        3 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:   10
  5261 ;; This function calls:
  5262 ;;		_SwPointSelect
  5263 ;;		_getSw_KeyStatus
  5264 ;;		_setBuz
  5265 ;;		_setDimmerLights_AdjControl
  5266 ;;		_setDimmerLights_SwOff
  5267 ;;		_setDimmerLights_SwOn
  5268 ;;		_setRF_Learn
  5269 ;; This function is called by:
  5270 ;;		_Switch_Main
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           
  5275                           ;psect for function _setSw_Main
  5276  004A                     _setSw_Main:	
  5277                           
  5278                           ;incstack = 0
  5279                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5280                           ;setSw_Main@sw stored from wreg
  5281  004A  0020               	movlb	0	; select bank0
  5282  004B  00E8               	movwf	setSw_Main@sw
  5283                           
  5284                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5285  004C  0868               	movf	setSw_Main@sw,w
  5286  004D  319D  2572  3180   	fcall	_SwPointSelect
  5287                           
  5288                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5289  0050  087C               	movf	_Sw,w
  5290  0051  0086               	movwf	6
  5291  0052  3001               	movlw	1	; select bank2/3
  5292  0053  0087               	movwf	7
  5293  0054  1C01               	btfss	1,0
  5294  0055  29B0               	goto	l2389
  5295                           
  5296                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5297  0056  0021               	movlb	1	; select bank1
  5298  0057  184F               	btfsc	_SwDetect^(0+128),0
  5299  0058  2874               	goto	l7581
  5300                           
  5301                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5302  0059  0A7C               	incf	_Sw,w
  5303  005A  0086               	movwf	6
  5304  005B  3001               	movlw	1	; select bank2/3
  5305  005C  0087               	movwf	7
  5306  005D  1081               	bcf	1,1
  5307                           
  5308                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5309  005E  0020               	movlb	0	; select bank0
  5310  005F  0868               	movf	setSw_Main@sw,w
  5311  0060  319E  26F5  3180   	fcall	_getSw_KeyStatus
  5312  0063  3A01               	xorlw	1
  5313  0064  3000               	movlw	0
  5314  0065  1903               	skipnz
  5315  0066  3001               	movlw	1
  5316  0067  0020               	movlb	0	; select bank0
  5317  0068  00E6               	movwf	??_setSw_Main
  5318  0069  087C               	movf	_Sw,w
  5319  006A  0086               	movwf	6
  5320  006B  3001               	movlw	1	; select bank2/3
  5321  006C  0087               	movwf	7
  5322  006D  0DE6               	rlf	??_setSw_Main,f
  5323  006E  0801               	movf	1,w
  5324  006F  0666               	xorwf	??_setSw_Main,w
  5325  0070  39FD               	andlw	-3
  5326  0071  0666               	xorwf	??_setSw_Main,w
  5327  0072  0081               	movwf	1
  5328                           
  5329                           ;Switch_B1.c: 143: } else {
  5330  0073  2889               	goto	l2391
  5331  0074                     l7581:	
  5332                           
  5333                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5334  0074  0A7C               	incf	_Sw,w
  5335  0075  0086               	movwf	6
  5336  0076  3001               	movlw	1	; select bank2/3
  5337  0077  0087               	movwf	7
  5338  0078  1881               	btfsc	1,1
  5339  0079  2889               	goto	l2391
  5340                           
  5341                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5342  007A  0A7C               	incf	_Sw,w
  5343  007B  0086               	movwf	6
  5344  007C  3001               	movlw	1	; select bank2/3
  5345  007D  0087               	movwf	7
  5346  007E  1481               	bsf	1,1
  5347                           
  5348                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5349  007F  087C               	movf	_Sw,w
  5350  0080  0086               	movwf	6
  5351  0081  3001               	movlw	1	; select bank2/3
  5352  0082  0087               	movwf	7
  5353  0083  1081               	bcf	1,1
  5354                           
  5355                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5356  0084  087C               	movf	_Sw,w
  5357  0085  0086               	movwf	6
  5358  0086  3001               	movlw	1	; select bank2/3
  5359  0087  0087               	movwf	7
  5360  0088  1501               	bsf	1,2
  5361  0089                     l2391:	
  5362                           
  5363                           ;Switch_B1.c: 148: }
  5364                           ;Switch_B1.c: 149: }
  5365                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5366  0089  087C               	movf	_Sw,w
  5367  008A  0086               	movwf	6
  5368  008B  3001               	movlw	1	; select bank2/3
  5369  008C  0087               	movwf	7
  5370  008D  1C81               	btfss	1,1
  5371  008E  2959               	goto	l7631
  5372                           
  5373                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5374  008F  087C               	movf	_Sw,w
  5375  0090  0086               	movwf	6
  5376  0091  3001               	movlw	1	; select bank2/3
  5377  0092  0087               	movwf	7
  5378  0093  1901               	btfsc	1,2
  5379  0094  28B7               	goto	l7597
  5380                           
  5381                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5382  0095  3001               	movlw	1
  5383  0096  0020               	movlb	0	; select bank0
  5384  0097  00E6               	movwf	??_setSw_Main
  5385  0098  087C               	movf	_Sw,w
  5386  0099  3E02               	addlw	2
  5387  009A  0086               	movwf	6
  5388  009B  3001               	movlw	1	; select bank2/3
  5389  009C  0087               	movwf	7
  5390  009D  0866               	movf	??_setSw_Main,w
  5391  009E  0781               	addwf	1,f
  5392                           
  5393                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5394  009F  087C               	movf	_Sw,w
  5395  00A0  3E02               	addlw	2
  5396  00A1  0086               	movwf	6
  5397  00A2  3001               	movlw	1	; select bank2/3
  5398  00A3  0087               	movwf	7
  5399  00A4  3005               	movlw	5
  5400  00A5  0201               	subwf	1,w
  5401  00A6  1C03               	skipc
  5402  00A7  0008               	return
  5403                           
  5404                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5405  00A8  087C               	movf	_Sw,w
  5406  00A9  3E02               	addlw	2
  5407  00AA  0086               	movwf	6
  5408  00AB  3001               	movlw	1	; select bank2/3
  5409  00AC  0087               	movwf	7
  5410  00AD  0181               	clrf	1
  5411                           
  5412                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5413  00AE  087C               	movf	_Sw,w
  5414  00AF  0086               	movwf	6
  5415  00B0  3001               	movlw	1	; select bank2/3
  5416  00B1  0087               	movwf	7
  5417  00B2  1501               	bsf	1,2
  5418                           
  5419                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5420  00B3  0868               	movf	setSw_Main@sw,w
  5421  00B4  3187  27B9         	fcall	_setDimmerLights_SwOn
  5422                           
  5423                           ;Switch_B1.c: 162: }
  5424                           ;Switch_B1.c: 163: } else {
  5425  00B6  0008               	return
  5426  00B7                     l7597:	
  5427                           
  5428                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5429  00B7  087C               	movf	_Sw,w
  5430  00B8  0086               	movwf	6
  5431  00B9  3001               	movlw	1	; select bank2/3
  5432  00BA  0087               	movwf	7
  5433  00BB  1981               	btfsc	1,3
  5434  00BC  28E9               	goto	l7607
  5435                           
  5436                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5437  00BD  087C               	movf	_Sw,w
  5438  00BE  3E03               	addlw	3
  5439  00BF  0086               	movwf	6
  5440  00C0  3001               	movlw	1	; select bank2/3
  5441  00C1  0087               	movwf	7
  5442  00C2  3001               	movlw	1
  5443  00C3  0781               	addwf	1,f
  5444  00C4  3141               	addfsr 1,1
  5445  00C5  1803               	skipnc
  5446  00C6  0A81               	incf	1,f
  5447                           
  5448                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5449  00C7  087C               	movf	_Sw,w
  5450  00C8  3E03               	addlw	3
  5451  00C9  0086               	movwf	6
  5452  00CA  3001               	movlw	1	; select bank2/3
  5453  00CB  0087               	movwf	7
  5454  00CC  3F40               	moviw [0]fsr1
  5455  00CD  0020               	movlb	0	; select bank0
  5456  00CE  00E6               	movwf	??_setSw_Main
  5457  00CF  3F41               	moviw [1]fsr1
  5458  00D0  00E7               	movwf	??_setSw_Main+1
  5459  00D1  3000               	movlw	0
  5460  00D2  0267               	subwf	??_setSw_Main+1,w
  5461  00D3  3096               	movlw	150
  5462  00D4  1903               	skipnz
  5463  00D5  0266               	subwf	??_setSw_Main,w
  5464  00D6  1C03               	skipc
  5465  00D7  0008               	return
  5466                           
  5467                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5468  00D8  087C               	movf	_Sw,w
  5469  00D9  3E03               	addlw	3
  5470  00DA  0086               	movwf	6
  5471  00DB  3001               	movlw	1	; select bank2/3
  5472  00DC  0087               	movwf	7
  5473  00DD  3000               	movlw	0
  5474  00DE  3FC0               	movwi [0]fsr1
  5475  00DF  3FC1               	movwi [1]fsr1
  5476                           
  5477                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5478  00E0  087C               	movf	_Sw,w
  5479  00E1  0086               	movwf	6
  5480  00E2  3001               	movlw	1	; select bank2/3
  5481  00E3  0087               	movwf	7
  5482  00E4  1581               	bsf	1,3
  5483                           
  5484                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5485  00E5  0868               	movf	setSw_Main@sw,w
  5486  00E6  3192  2269         	fcall	_setDimmerLights_AdjControl
  5487                           
  5488                           ;Switch_B1.c: 174: }
  5489                           ;Switch_B1.c: 175: } else {
  5490  00E8  0008               	return
  5491  00E9                     l7607:	
  5492                           
  5493                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5494  00E9  087C               	movf	_Sw,w
  5495  00EA  0086               	movwf	6
  5496  00EB  3001               	movlw	1	; select bank2/3
  5497  00EC  0087               	movwf	7
  5498  00ED  1A01               	btfsc	1,4
  5499  00EE  2927               	goto	l7621
  5500                           
  5501                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5502  00EF  087C               	movf	_Sw,w
  5503  00F0  3E05               	addlw	5
  5504  00F1  0086               	movwf	6
  5505  00F2  3001               	movlw	1	; select bank2/3
  5506  00F3  0087               	movwf	7
  5507  00F4  3001               	movlw	1
  5508  00F5  0781               	addwf	1,f
  5509  00F6  3141               	addfsr 1,1
  5510  00F7  1803               	skipnc
  5511  00F8  0A81               	incf	1,f
  5512                           
  5513                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5514  00F9  087C               	movf	_Sw,w
  5515  00FA  3E05               	addlw	5
  5516  00FB  0086               	movwf	6
  5517  00FC  3001               	movlw	1	; select bank2/3
  5518  00FD  0087               	movwf	7
  5519  00FE  3F40               	moviw [0]fsr1
  5520  00FF  0020               	movlb	0	; select bank0
  5521  0100  00E6               	movwf	??_setSw_Main
  5522  0101  3F41               	moviw [1]fsr1
  5523  0102  00E7               	movwf	??_setSw_Main+1
  5524  0103  3000               	movlw	0
  5525  0104  0267               	subwf	??_setSw_Main+1,w
  5526  0105  3096               	movlw	150
  5527  0106  1903               	skipnz
  5528  0107  0266               	subwf	??_setSw_Main,w
  5529  0108  1C03               	skipc
  5530  0109  0008               	return
  5531                           
  5532                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5533  010A  087C               	movf	_Sw,w
  5534  010B  3E05               	addlw	5
  5535  010C  0086               	movwf	6
  5536  010D  3001               	movlw	1	; select bank2/3
  5537  010E  0087               	movwf	7
  5538  010F  3000               	movlw	0
  5539  0110  3FC0               	movwi [0]fsr1
  5540  0111  3FC1               	movwi [1]fsr1
  5541                           
  5542                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5543  0112  087C               	movf	_Sw,w
  5544  0113  0086               	movwf	6
  5545  0114  3001               	movlw	1	; select bank2/3
  5546  0115  0087               	movwf	7
  5547  0116  1601               	bsf	1,4
  5548                           
  5549                           ;Switch_B1.c: 183: setRF_Learn(1);
  5550  0117  3001               	movlw	1
  5551  0118  319D  2586  3180   	fcall	_setRF_Learn
  5552                           
  5553                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5554  011B  0021               	movlb	1	; select bank1
  5555  011C  1EA0               	btfss	_myMain^(0+128),5
  5556  011D  0008               	return
  5557                           
  5558                           ;Switch_B1.c: 186: setBuz(2, 100);
  5559  011E  3064               	movlw	100
  5560  011F  0020               	movlb	0	; select bank0
  5561  0120  00A9               	movwf	setBuz@time
  5562  0121  3000               	movlw	0
  5563  0122  00AA               	movwf	setBuz@time+1
  5564  0123  3002               	movlw	2
  5565  0124  3197  274D         	fcall	_setBuz
  5566                           
  5567                           ;Switch_B1.c: 187: }
  5568                           ;Switch_B1.c: 189: }
  5569                           ;Switch_B1.c: 190: } else {
  5570  0126  0008               	return
  5571  0127                     l7621:	
  5572                           
  5573                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5574  0127  087C               	movf	_Sw,w
  5575  0128  0086               	movwf	6
  5576  0129  3001               	movlw	1	; select bank2/3
  5577  012A  0087               	movwf	7
  5578  012B  1A81               	btfsc	1,5
  5579  012C  0008               	return
  5580                           
  5581                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5582  012D  087C               	movf	_Sw,w
  5583  012E  3E07               	addlw	7
  5584  012F  0086               	movwf	6
  5585  0130  3001               	movlw	1	; select bank2/3
  5586  0131  0087               	movwf	7
  5587  0132  3001               	movlw	1
  5588  0133  0781               	addwf	1,f
  5589  0134  3141               	addfsr 1,1
  5590  0135  1803               	skipnc
  5591  0136  0A81               	incf	1,f
  5592                           
  5593                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5594  0137  087C               	movf	_Sw,w
  5595  0138  3E07               	addlw	7
  5596  0139  0086               	movwf	6
  5597  013A  3001               	movlw	1	; select bank2/3
  5598  013B  0087               	movwf	7
  5599  013C  3F40               	moviw [0]fsr1
  5600  013D  0020               	movlb	0	; select bank0
  5601  013E  00E6               	movwf	??_setSw_Main
  5602  013F  3F41               	moviw [1]fsr1
  5603  0140  00E7               	movwf	??_setSw_Main+1
  5604  0141  3001               	movlw	1
  5605  0142  0267               	subwf	??_setSw_Main+1,w
  5606  0143  302C               	movlw	44
  5607  0144  1903               	skipnz
  5608  0145  0266               	subwf	??_setSw_Main,w
  5609  0146  1C03               	skipc
  5610  0147  0008               	return
  5611                           
  5612                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5613  0148  087C               	movf	_Sw,w
  5614  0149  3E07               	addlw	7
  5615  014A  0086               	movwf	6
  5616  014B  3001               	movlw	1	; select bank2/3
  5617  014C  0087               	movwf	7
  5618  014D  3000               	movlw	0
  5619  014E  3FC0               	movwi [0]fsr1
  5620  014F  3FC1               	movwi [1]fsr1
  5621                           
  5622                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5623  0150  087C               	movf	_Sw,w
  5624  0151  0086               	movwf	6
  5625  0152  3001               	movlw	1	; select bank2/3
  5626  0153  0087               	movwf	7
  5627  0154  1681               	bsf	1,5
  5628                           
  5629                           ;Switch_B1.c: 198: setRF_Learn(0);
  5630  0155  3000               	movlw	0
  5631  0156  319D  2586         	fcall	_setRF_Learn
  5632                           
  5633                           ;Switch_B1.c: 201: }
  5634                           ;Switch_B1.c: 202: }
  5635                           ;Switch_B1.c: 203: }
  5636                           ;Switch_B1.c: 204: }
  5637                           ;Switch_B1.c: 205: }
  5638                           ;Switch_B1.c: 206: } else {
  5639  0158  0008               	return
  5640  0159                     l7631:	
  5641                           
  5642                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5643  0159  087C               	movf	_Sw,w
  5644  015A  0086               	movwf	6
  5645  015B  3001               	movlw	1	; select bank2/3
  5646  015C  0087               	movwf	7
  5647  015D  1D01               	btfss	1,2
  5648  015E  0008               	return
  5649                           
  5650                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5651  015F  3001               	movlw	1
  5652  0160  0020               	movlb	0	; select bank0
  5653  0161  00E6               	movwf	??_setSw_Main
  5654  0162  087C               	movf	_Sw,w
  5655  0163  3E02               	addlw	2
  5656  0164  0086               	movwf	6
  5657  0165  3001               	movlw	1	; select bank2/3
  5658  0166  0087               	movwf	7
  5659  0167  0866               	movf	??_setSw_Main,w
  5660  0168  0781               	addwf	1,f
  5661                           
  5662                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5663  0169  087C               	movf	_Sw,w
  5664  016A  3E02               	addlw	2
  5665  016B  0086               	movwf	6
  5666  016C  3001               	movlw	1	; select bank2/3
  5667  016D  0087               	movwf	7
  5668  016E  3005               	movlw	5
  5669  016F  0201               	subwf	1,w
  5670  0170  1C03               	skipc
  5671  0171  0008               	return
  5672                           
  5673                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5674  0172  087C               	movf	_Sw,w
  5675  0173  3E02               	addlw	2
  5676  0174  0086               	movwf	6
  5677  0175  3001               	movlw	1	; select bank2/3
  5678  0176  0087               	movwf	7
  5679  0177  0181               	clrf	1
  5680                           
  5681                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5682  0178  087C               	movf	_Sw,w
  5683  0179  0086               	movwf	6
  5684  017A  3001               	movlw	1	; select bank2/3
  5685  017B  0087               	movwf	7
  5686  017C  1101               	bcf	1,2
  5687                           
  5688                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5689  017D  087C               	movf	_Sw,w
  5690  017E  3E03               	addlw	3
  5691  017F  0086               	movwf	6
  5692  0180  3001               	movlw	1	; select bank2/3
  5693  0181  0087               	movwf	7
  5694  0182  3000               	movlw	0
  5695  0183  3FC0               	movwi [0]fsr1
  5696  0184  3FC1               	movwi [1]fsr1
  5697                           
  5698                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5699  0185  087C               	movf	_Sw,w
  5700  0186  0086               	movwf	6
  5701  0187  3001               	movlw	1	; select bank2/3
  5702  0188  0087               	movwf	7
  5703  0189  1181               	bcf	1,3
  5704                           
  5705                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5706  018A  087C               	movf	_Sw,w
  5707  018B  3E05               	addlw	5
  5708  018C  0086               	movwf	6
  5709  018D  3001               	movlw	1	; select bank2/3
  5710  018E  0087               	movwf	7
  5711  018F  3000               	movlw	0
  5712  0190  3FC0               	movwi [0]fsr1
  5713  0191  3FC1               	movwi [1]fsr1
  5714                           
  5715                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5716  0192  087C               	movf	_Sw,w
  5717  0193  0086               	movwf	6
  5718  0194  3001               	movlw	1	; select bank2/3
  5719  0195  0087               	movwf	7
  5720  0196  1201               	bcf	1,4
  5721                           
  5722                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5723  0197  087C               	movf	_Sw,w
  5724  0198  3E07               	addlw	7
  5725  0199  0086               	movwf	6
  5726  019A  3001               	movlw	1	; select bank2/3
  5727  019B  0087               	movwf	7
  5728  019C  3000               	movlw	0
  5729  019D  3FC0               	movwi [0]fsr1
  5730  019E  3FC1               	movwi [1]fsr1
  5731                           
  5732                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5733  019F  087C               	movf	_Sw,w
  5734  01A0  0086               	movwf	6
  5735  01A1  3001               	movlw	1	; select bank2/3
  5736  01A2  0087               	movwf	7
  5737  01A3  1281               	bcf	1,5
  5738                           
  5739                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5740  01A4  0021               	movlb	1	; select bank1
  5741  01A5  184F               	btfsc	_SwDetect^(0+128),0
  5742  01A6  29AC               	goto	l7657
  5743                           
  5744                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5745  01A7  0020               	movlb	0	; select bank0
  5746  01A8  0868               	movf	setSw_Main@sw,w
  5747  01A9  3188  205E  3180   	fcall	_setDimmerLights_SwOff
  5748  01AC                     l7657:	
  5749                           
  5750                           ;Switch_B1.c: 221: }
  5751                           ;Switch_B1.c: 224: setRF_Learn(0);
  5752  01AC  3000               	movlw	0
  5753  01AD  319D  2586         	fcall	_setRF_Learn
  5754                           
  5755                           ;Switch_B1.c: 226: }
  5756                           ;Switch_B1.c: 227: }
  5757                           ;Switch_B1.c: 228: }
  5758                           ;Switch_B1.c: 229: } else {
  5759  01AF  0008               	return
  5760  01B0                     l2389:	
  5761                           
  5762                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5763  01B0  0021               	movlb	1	; select bank1
  5764  01B1  1C20               	btfss	_myMain^(0+128),0
  5765  01B2  0008               	return
  5766                           
  5767                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5768  01B3  087C               	movf	_Sw,w
  5769  01B4  0086               	movwf	6
  5770  01B5  3001               	movlw	1	; select bank2/3
  5771  01B6  0087               	movwf	7
  5772  01B7  1401               	bsf	1,0
  5773  01B8  0008               	return
  5774  01B9                     __end_of_setSw_Main:	
  5775                           
  5776                           	psect	text14
  5777  1D86                     __ptext14:	
  5778 ;; *************** function _setRF_Learn *****************
  5779 ;; Defined at:
  5780 ;;		line 23 in file "../src/RF_Control_B1.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  command         1    wreg     unsigned char 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  command         1    1[BANK0 ] unsigned char 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;		None               void
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;Total ram usage:        2 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    5
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_setSw_Main
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           
  5809                           ;psect for function _setRF_Learn
  5810  1D86                     _setRF_Learn:	
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5814                           ;setRF_Learn@command stored from wreg
  5815  1D86  0020               	movlb	0	; select bank0
  5816  1D87  00A1               	movwf	setRF_Learn@command
  5817                           
  5818                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5819  1D88  0821               	movf	setRF_Learn@command,w
  5820  1D89  3A01               	xorlw	1
  5821  1D8A  3000               	movlw	0
  5822  1D8B  1903               	skipnz
  5823  1D8C  3001               	movlw	1
  5824  1D8D  00A0               	movwf	??_setRF_Learn
  5825  1D8E  0EA0               	swapf	??_setRF_Learn,f
  5826  1D8F  0DA0               	rlf	??_setRF_Learn,f
  5827  1D90  0DA0               	rlf	??_setRF_Learn,f
  5828  1D91  0021               	movlb	1	; select bank1
  5829  1D92  083C               	movf	_RF1^(0+128),w
  5830  1D93  0020               	movlb	0	; select bank0
  5831  1D94  0620               	xorwf	??_setRF_Learn,w
  5832  1D95  39BF               	andlw	-65
  5833  1D96  0620               	xorwf	??_setRF_Learn,w
  5834  1D97  0021               	movlb	1	; select bank1
  5835  1D98  00BC               	movwf	_RF1^(0+128)
  5836  1D99  0008               	return
  5837  1D9A                     __end_of_setRF_Learn:	
  5838                           
  5839                           	psect	text15
  5840  1269                     __ptext15:	
  5841 ;; *************** function _setDimmerLights_AdjControl *****************
  5842 ;; Defined at:
  5843 ;;		line 565 in file "../src/Dimmer_B1.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  sw              1    wreg     unsigned char 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  sw              1    8[BANK0 ] unsigned char 
  5848 ;;  idle            1    6[BANK0 ] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;		None               void
  5851 ;; Registers used:
  5852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;Total ram usage:        4 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    7
  5865 ;; This function calls:
  5866 ;;		_DimmerLightsPointSelect
  5867 ;;		_getAll_DimmerLights_AdjGO
  5868 ;;		_setDimmerLights_TriggerAdj
  5869 ;; This function is called by:
  5870 ;;		_setSw_Main
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           
  5875                           ;psect for function _setDimmerLights_AdjControl
  5876  1269                     _setDimmerLights_AdjControl:	
  5877                           
  5878                           ;incstack = 0
  5879                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5880                           ;setDimmerLights_AdjControl@sw stored from wreg
  5881  1269  0020               	movlb	0	; select bank0
  5882  126A  00A8               	movwf	setDimmerLights_AdjControl@sw
  5883                           
  5884                           ;Dimmer_B1.c: 566: DimmerLightsPointSelect(sw);
  5885  126B  0828               	movf	setDimmerLights_AdjControl@sw,w
  5886  126C  319C  24FE  3192   	fcall	_DimmerLightsPointSelect
  5887                           
  5888                           ;Dimmer_B1.c: 567: char idle = 0;
  5889  126F  0020               	movlb	0	; select bank0
  5890  1270  01A6               	clrf	setDimmerLights_AdjControl@idle
  5891                           
  5892                           ;Dimmer_B1.c: 569: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5893  1271  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5894  1272  319C  2472  3192   	fcall	_getAll_DimmerLights_AdjGO
  5895  1275  3A01               	xorlw	1
  5896  1276  1D03               	skipz
  5897  1277  2A7E               	goto	l6773
  5898  1278  0022               	movlb	2	; select bank2
  5899  1279  1CA0               	btfss	_Dimmer^(0+256),1
  5900  127A  2A7E               	goto	l6773
  5901  127B  0020               	movlb	0	; select bank0
  5902  127C  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5903  127D  0AA7               	incf	_setDimmerLights_AdjControl$2577,f
  5904  127E                     l6773:	
  5905  127E  0020               	movlb	0	; select bank0
  5906  127F  0827               	movf	_setDimmerLights_AdjControl$2577,w
  5907  1280  00A5               	movwf	??_setDimmerLights_AdjControl
  5908  1281  0825               	movf	??_setDimmerLights_AdjControl,w
  5909  1282  00A6               	movwf	setDimmerLights_AdjControl@idle
  5910                           
  5911                           ;Dimmer_B1.c: 571: if (idle == 0) {
  5912  1283  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5913  1284  1D03               	skipz
  5914  1285  0008               	return
  5915                           
  5916                           ;Dimmer_B1.c: 572: if (DimmerLights->SwFlag == 1) {
  5917  1286  0879               	movf	_DimmerLights,w
  5918  1287  3E09               	addlw	9
  5919  1288  0086               	movwf	6
  5920  1289  3001               	movlw	1	; select bank2/3
  5921  128A  0087               	movwf	7
  5922  128B  1F01               	btfss	1,6
  5923  128C  0008               	return
  5924                           
  5925                           ;Dimmer_B1.c: 573: DimmerLights->SwAdj = 1;
  5926  128D  0879               	movf	_DimmerLights,w
  5927  128E  3E09               	addlw	9
  5928  128F  0086               	movwf	6
  5929  1290  3001               	movlw	1	; select bank2/3
  5930  1291  0087               	movwf	7
  5931  1292  1781               	bsf	1,7
  5932                           
  5933                           ;Dimmer_B1.c: 574: DimmerLights->Status = 1;
  5934  1293  0879               	movf	_DimmerLights,w
  5935  1294  0086               	movwf	6
  5936  1295  3001               	movlw	1	; select bank2/3
  5937  1296  0087               	movwf	7
  5938  1297  1681               	bsf	1,5
  5939                           
  5940                           ;Dimmer_B1.c: 575: setDimmerLights_TriggerAdj(sw, 1);
  5941  1298  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5942  1299  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5943  129A  0828               	movf	setDimmerLights_AdjControl@sw,w
  5944  129B  319F  2714         	fcall	_setDimmerLights_TriggerAdj
  5945  129D  0008               	return
  5946  129E                     __end_of_setDimmerLights_AdjControl:	
  5947                           
  5948                           	psect	text16
  5949  1EF5                     __ptext16:	
  5950 ;; *************** function _getSw_KeyStatus *****************
  5951 ;; Defined at:
  5952 ;;		line 237 in file "../src/Switch_B1.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  sw              1    wreg     unsigned char 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  sw              1    4[BANK0 ] unsigned char 
  5957 ;;  status          1    3[BANK0 ] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      unsigned char 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;Total ram usage:        5 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    5
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_setSw_Main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _getSw_KeyStatus
  5983  1EF5                     _getSw_KeyStatus:	
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5987                           ;getSw_KeyStatus@sw stored from wreg
  5988  1EF5  0020               	movlb	0	; select bank0
  5989  1EF6  00A4               	movwf	getSw_KeyStatus@sw
  5990                           
  5991                           ;Switch_B1.c: 238: char status = 0;
  5992  1EF7  01A3               	clrf	getSw_KeyStatus@status
  5993                           
  5994                           ;Switch_B1.c: 250: if (sw == 1) {
  5995  1EF8  0824               	movf	getSw_KeyStatus@sw,w
  5996  1EF9  3A01               	xorlw	1
  5997  1EFA  1D03               	skipz
  5998  1EFB  2F04               	goto	l6983
  5999                           
  6000                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6001  1EFC  01A1               	clrf	_getSw_KeyStatus$6326
  6002  1EFD  0AA1               	incf	_getSw_KeyStatus$6326,f
  6003  1EFE  1F0C               	btfss	12,6	;volatile
  6004  1EFF  1A0C               	btfsc	12,4	;volatile
  6005  1F00  2F02               	goto	l6981
  6006  1F01  01A1               	clrf	_getSw_KeyStatus$6326
  6007  1F02                     l6981:	
  6008  1F02  0821               	movf	_getSw_KeyStatus$6326,w
  6009  1F03  2F0F               	goto	L3
  6010  1F04                     l6983:	
  6011                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6012                           
  6013  1F04  0824               	movf	getSw_KeyStatus@sw,w
  6014  1F05  3A02               	xorlw	2
  6015  1F06  1D03               	skipz
  6016  1F07  2F12               	goto	l6993
  6017                           
  6018                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6019  1F08  01A2               	clrf	_getSw_KeyStatus$6327
  6020  1F09  0AA2               	incf	_getSw_KeyStatus$6327,f
  6021  1F0A  1C0C               	btfss	12,0	;volatile
  6022  1F0B  188D               	btfsc	13,1	;volatile
  6023  1F0C  2F0E               	goto	l6991
  6024  1F0D  01A2               	clrf	_getSw_KeyStatus$6327
  6025  1F0E                     l6991:	
  6026  1F0E  0822               	movf	_getSw_KeyStatus$6327,w
  6027  1F0F                     L3:	
  6028  1F0F  00A0               	movwf	??_getSw_KeyStatus
  6029  1F10  0820               	movf	??_getSw_KeyStatus,w
  6030  1F11  00A3               	movwf	getSw_KeyStatus@status
  6031  1F12                     l6993:	
  6032                           
  6033                           ;Switch_B1.c: 254: }
  6034                           ;Switch_B1.c: 261: return status;
  6035  1F12  0823               	movf	getSw_KeyStatus@status,w
  6036  1F13  0008               	return
  6037  1F14                     __end_of_getSw_KeyStatus:	
  6038                           
  6039                           	psect	text17
  6040  1D72                     __ptext17:	
  6041 ;; *************** function _SwPointSelect *****************
  6042 ;; Defined at:
  6043 ;;		line 25 in file "../src/Switch_B1.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  sw              1    wreg     unsigned char 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  sw              1    1[BANK0 ] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;		None               void
  6050 ;; Registers used:
  6051 ;;		wreg
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;Total ram usage:        2 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    5
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_setSw_Main
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _SwPointSelect
  6073  1D72                     _SwPointSelect:	
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _SwPointSelect: [wreg]
  6077                           ;SwPointSelect@sw stored from wreg
  6078  1D72  0020               	movlb	0	; select bank0
  6079  1D73  00A1               	movwf	SwPointSelect@sw
  6080                           
  6081                           ;Switch_B1.c: 28: if (sw == 1) {
  6082  1D74  0821               	movf	SwPointSelect@sw,w
  6083  1D75  3A01               	xorlw	1
  6084  1D76  1D03               	skipz
  6085  1D77  2D7D               	goto	l6967
  6086                           
  6087                           ;Switch_B1.c: 29: Sw = &Sw1;
  6088  1D78  3057               	movlw	_Sw1& (0+255)
  6089  1D79  00A0               	movwf	??_SwPointSelect
  6090  1D7A  0820               	movf	??_SwPointSelect,w
  6091  1D7B  00FC               	movwf	_Sw
  6092                           
  6093                           ;Switch_B1.c: 30: }
  6094  1D7C  0008               	return
  6095  1D7D                     l6967:	
  6096                           
  6097                           ;Switch_B1.c: 33: else if (sw == 2) {
  6098  1D7D  0821               	movf	SwPointSelect@sw,w
  6099  1D7E  3A02               	xorlw	2
  6100  1D7F  1D03               	skipz
  6101  1D80  0008               	return
  6102                           
  6103                           ;Switch_B1.c: 34: Sw = &Sw2;
  6104  1D81  30DC               	movlw	_Sw2& (0+255)
  6105  1D82  00A0               	movwf	??_SwPointSelect
  6106  1D83  0820               	movf	??_SwPointSelect,w
  6107  1D84  00FC               	movwf	_Sw
  6108  1D85  0008               	return
  6109  1D86                     __end_of_SwPointSelect:	
  6110                           
  6111                           	psect	text18
  6112  09E0                     __ptext18:	
  6113 ;; *************** function _setMain_Exception *****************
  6114 ;; Defined at:
  6115 ;;		line 276 in file "../src/main_B1.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  command         1    wreg     unsigned char 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  command         1    4[BANK1 ] unsigned char 
  6120 ;;  status          1    3[BANK1 ] unsigned char 
  6121 ;;  buz             1    0[BANK1 ] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;		None               void
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        7 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:   11
  6138 ;; This function calls:
  6139 ;;		_getDimmerLights_Line
  6140 ;;		_getMain_LightsStatus
  6141 ;;		_setBuz
  6142 ;;		_setDimmerLights_ErrorClose
  6143 ;;		_setLED
  6144 ;; This function is called by:
  6145 ;;		_Switch_Main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _setMain_Exception
  6151  09E0                     _setMain_Exception:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6155                           ;setMain_Exception@command stored from wreg
  6156  09E0  0021               	movlb	1	; select bank1
  6157  09E1  00EA               	movwf	setMain_Exception@command^(0+128)
  6158                           
  6159                           ;main_B1.c: 277: char status = 0, buz = 0;
  6160  09E2  01E9               	clrf	setMain_Exception@status^(0+128)
  6161  09E3  01E6               	clrf	setMain_Exception@buz^(0+128)
  6162                           
  6163                           ;main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  6164  09E4  086A               	movf	setMain_Exception@command^(0+128),w
  6165  09E5  3A03               	xorlw	3
  6166  09E6  1903               	skipnz
  6167  09E7  29ED               	goto	l7543
  6168  09E8  30FF               	movlw	255
  6169  09E9  00E7               	movwf	_setMain_Exception$7061^(0+128)
  6170  09EA  3000               	movlw	0
  6171  09EB  00E8               	movwf	(_setMain_Exception$7061^(0+128)+1)
  6172  09EC  29FA               	goto	l7545
  6173  09ED                     l7543:	
  6174  09ED  319D  2537  3189   	fcall	_getDimmerLights_Line
  6175  09F0  0020               	movlb	0	; select bank0
  6176  09F1  00EB               	movwf	??_setMain_Exception
  6177  09F2  01EC               	clrf	??_setMain_Exception+1
  6178  09F3  086B               	movf	??_setMain_Exception,w
  6179  09F4  0021               	movlb	1	; select bank1
  6180  09F5  00E7               	movwf	_setMain_Exception$7061^(0+128)
  6181  09F6  0020               	movlb	0	; select bank0
  6182  09F7  086C               	movf	??_setMain_Exception+1,w
  6183  09F8  0021               	movlb	1	; select bank1
  6184  09F9  00E8               	movwf	(_setMain_Exception$7061+1)^(0+128)
  6185  09FA                     l7545:	
  6186  09FA  0867               	movf	_setMain_Exception$7061^(0+128),w
  6187  09FB  0020               	movlb	0	; select bank0
  6188  09FC  00EB               	movwf	??_setMain_Exception
  6189  09FD  086B               	movf	??_setMain_Exception,w
  6190  09FE  0021               	movlb	1	; select bank1
  6191  09FF  00E9               	movwf	setMain_Exception@status^(0+128)
  6192                           
  6193                           ;main_B1.c: 294: if (command == 0) {
  6194  0A00  08EA               	movf	setMain_Exception@command^(0+128),f
  6195  0A01  1D03               	skipz
  6196  0A02  2A05               	goto	l7551
  6197                           
  6198                           ;main_B1.c: 295: setLED(99, 10);
  6199  0A03  300A               	movlw	10
  6200  0A04  2A06               	goto	L4
  6201  0A05                     l7551:	
  6202                           ;main_B1.c: 296: } else {
  6203                           
  6204                           
  6205                           ;main_B1.c: 297: setLED(99, 11);
  6206  0A05  300B               	movlw	11
  6207  0A06                     L4:	
  6208  0A06  0020               	movlb	0	; select bank0
  6209  0A07  00EB               	movwf	??_setMain_Exception
  6210  0A08  086B               	movf	??_setMain_Exception,w
  6211  0A09  00A2               	movwf	setLED@command
  6212  0A0A  3063               	movlw	99
  6213  0A0B  3195  2551  3189   	fcall	_setLED
  6214                           
  6215                           ;main_B1.c: 298: }
  6216                           ;main_B1.c: 300: if (command != 0) {
  6217  0A0E  0021               	movlb	1	; select bank1
  6218  0A0F  086A               	movf	setMain_Exception@command^(0+128),w
  6219  0A10  1903               	btfsc	3,2
  6220  0A11  0008               	return
  6221                           
  6222                           ;main_B1.c: 301: switch (command) {
  6223  0A12  2A33               	goto	l7567
  6224  0A13                     l7557:	
  6225                           ;main_B1.c: 302: case 2:
  6226                           
  6227                           
  6228                           ;main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  6229  0A13  3191  2172  3189   	fcall	_getMain_LightsStatus
  6230  0A16  3A01               	xorlw	1
  6231  0A17  1D03               	skipz
  6232  0A18  2A3C               	goto	l7569
  6233                           
  6234                           ;main_B1.c: 304: setBuz(10, 300);
  6235  0A19  302C               	movlw	44
  6236  0A1A  0020               	movlb	0	; select bank0
  6237  0A1B  00A9               	movwf	setBuz@time
  6238  0A1C  3001               	movlw	1
  6239  0A1D  00AA               	movwf	setBuz@time+1
  6240  0A1E  300A               	movlw	10
  6241  0A1F  3197  274D  3189   	fcall	_setBuz
  6242                           
  6243                           ;main_B1.c: 305: }
  6244                           ;main_B1.c: 306: break;
  6245  0A22  2A3C               	goto	l7569
  6246  0A23                     l7561:	
  6247                           ;main_B1.c: 307: case 3:
  6248                           
  6249                           
  6250                           ;main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  6251  0A23  3191  2172  3189   	fcall	_getMain_LightsStatus
  6252  0A26  3A01               	xorlw	1
  6253  0A27  1D03               	skipz
  6254  0A28  2A3C               	goto	l7569
  6255                           
  6256                           ;main_B1.c: 309: setBuz(5, 300);
  6257  0A29  302C               	movlw	44
  6258  0A2A  0020               	movlb	0	; select bank0
  6259  0A2B  00A9               	movwf	setBuz@time
  6260  0A2C  3001               	movlw	1
  6261  0A2D  00AA               	movwf	setBuz@time+1
  6262  0A2E  3005               	movlw	5
  6263  0A2F  3197  274D  3189   	fcall	_setBuz
  6264                           
  6265                           ;main_B1.c: 312: }
  6266                           
  6267                           ;main_B1.c: 310: }
  6268                           ;main_B1.c: 311: break;
  6269  0A32  2A3C               	goto	l7569
  6270  0A33                     l7567:	
  6271  0A33  0021               	movlb	1	; select bank1
  6272  0A34  086A               	movf	setMain_Exception@command^(0+128),w
  6273                           
  6274                           ; Switch size 1, requested type "space"
  6275                           ; Number of cases is 2, Range of values is 2 to 3
  6276                           ; switch strategies available:
  6277                           ; Name         Instructions Cycles
  6278                           ; simple_byte            7     4 (average)
  6279                           ; direct_byte           13     9 (fixed)
  6280                           ; jumptable            263     9 (fixed)
  6281                           ;	Chosen strategy is simple_byte
  6282  0A35  3A02               	xorlw	2	; case 2
  6283  0A36  1903               	skipnz
  6284  0A37  2A13               	goto	l7557
  6285  0A38  3A01               	xorlw	1	; case 3
  6286  0A39  1903               	skipnz
  6287  0A3A  2A23               	goto	l7561
  6288  0A3B  2A3C               	goto	l7569
  6289  0A3C                     l7569:	
  6290                           
  6291                           ;main_B1.c: 313: setDimmerLights_ErrorClose(status);
  6292  0A3C  0021               	movlb	1	; select bank1
  6293  0A3D  0869               	movf	setMain_Exception@status^(0+128),w
  6294  0A3E  3197  27A6         	fcall	_setDimmerLights_ErrorClose
  6295  0A40  0021               	movlb	1	; select bank1
  6296  0A41  0008               	return
  6297  0A42                     __end_of_setMain_Exception:	
  6298                           
  6299                           	psect	text19
  6300  17A6                     __ptext19:	
  6301 ;; *************** function _setDimmerLights_ErrorClose *****************
  6302 ;; Defined at:
  6303 ;;		line 581 in file "../src/Dimmer_B1.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;  lights          1    wreg     unsigned char 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  lights          1   72[BANK0 ] unsigned char 
  6308 ;;  i               2   73[BANK0 ] int 
  6309 ;;  count           1   71[BANK0 ] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;		None               void
  6312 ;; Registers used:
  6313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;Total ram usage:        5 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:   10
  6326 ;; This function calls:
  6327 ;;		_DimmerLightsPointSelect
  6328 ;;		_getDimmerLights_Status
  6329 ;;		_setDimmerLights_SwOff
  6330 ;; This function is called by:
  6331 ;;		_setMain_Exception
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _setDimmerLights_ErrorClose
  6337  17A6                     _setDimmerLights_ErrorClose:	
  6338                           
  6339                           ;incstack = 0
  6340                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6341                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6342  17A6  0020               	movlb	0	; select bank0
  6343  17A7  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6344                           
  6345                           ;Dimmer_B1.c: 582: if (lights == 255) {
  6346  17A8  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6347  17A9  3AFF               	xorlw	255
  6348  17AA  1D03               	skipz
  6349  17AB  2FE3               	goto	l6801
  6350                           
  6351                           ;Dimmer_B1.c: 587: char count = 2;
  6352  17AC  3002               	movlw	2
  6353  17AD  00E6               	movwf	??_setDimmerLights_ErrorClose
  6354  17AE  0866               	movf	??_setDimmerLights_ErrorClose,w
  6355  17AF  00E7               	movwf	setDimmerLights_ErrorClose@count
  6356                           
  6357                           ;Dimmer_B1.c: 592: for (int i = 0; i < count; i++) {
  6358  17B0  01E9               	clrf	setDimmerLights_ErrorClose@i
  6359  17B1  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6360  17B2                     l6799:	
  6361  17B2  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6362  17B3  3A80               	xorlw	128
  6363  17B4  00E6               	movwf	??_setDimmerLights_ErrorClose
  6364  17B5  3080               	movlw	128
  6365  17B6  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6366  17B7  1D03               	skipz
  6367  17B8  2FBB               	goto	u6035
  6368  17B9  0867               	movf	setDimmerLights_ErrorClose@count,w
  6369  17BA  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6370  17BB                     u6035:	
  6371  17BB  1803               	btfsc	3,0
  6372  17BC  0008               	return
  6373                           
  6374                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(i + 1);
  6375  17BD  0020               	movlb	0	; select bank0
  6376  17BE  0869               	movf	setDimmerLights_ErrorClose@i,w
  6377  17BF  3E01               	addlw	1
  6378  17C0  319C  24FE  3197   	fcall	_DimmerLightsPointSelect
  6379                           
  6380                           ;Dimmer_B1.c: 594: if (getDimmerLights_Status(i + 1) == 1) {
  6381  17C3  0020               	movlb	0	; select bank0
  6382  17C4  0869               	movf	setDimmerLights_ErrorClose@i,w
  6383  17C5  3E01               	addlw	1
  6384  17C6  319C  2462  3197   	fcall	_getDimmerLights_Status
  6385  17C9  3A01               	xorlw	1
  6386  17CA  1D03               	skipz
  6387  17CB  2FDD               	goto	l6797
  6388                           
  6389                           ;Dimmer_B1.c: 595: DimmerLights->SwFlag = 1;
  6390  17CC  0879               	movf	_DimmerLights,w
  6391  17CD  3E09               	addlw	9
  6392  17CE  0086               	movwf	6
  6393  17CF  3001               	movlw	1	; select bank2/3
  6394  17D0  0087               	movwf	7
  6395  17D1  1701               	bsf	1,6
  6396                           
  6397                           ;Dimmer_B1.c: 596: DimmerLights->Status = 0;
  6398  17D2  0879               	movf	_DimmerLights,w
  6399  17D3  0086               	movwf	6
  6400  17D4  3001               	movlw	1	; select bank2/3
  6401  17D5  0087               	movwf	7
  6402  17D6  1281               	bcf	1,5
  6403                           
  6404                           ;Dimmer_B1.c: 597: setDimmerLights_SwOff(i + 1);
  6405  17D7  0020               	movlb	0	; select bank0
  6406  17D8  0869               	movf	setDimmerLights_ErrorClose@i,w
  6407  17D9  3E01               	addlw	1
  6408  17DA  3188  205E  3197   	fcall	_setDimmerLights_SwOff
  6409  17DD                     l6797:	
  6410  17DD  3001               	movlw	1
  6411  17DE  0020               	movlb	0	; select bank0
  6412  17DF  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6413  17E0  3000               	movlw	0
  6414  17E1  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6415  17E2  2FB2               	goto	l6799
  6416  17E3                     l6801:	
  6417                           ;Dimmer_B1.c: 598: }
  6418                           ;Dimmer_B1.c: 599: }
  6419                           ;Dimmer_B1.c: 600: } else {
  6420                           
  6421                           
  6422                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(lights);
  6423  17E3  0020               	movlb	0	; select bank0
  6424  17E4  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6425  17E5  319C  24FE  3197   	fcall	_DimmerLightsPointSelect
  6426                           
  6427                           ;Dimmer_B1.c: 602: if (getDimmerLights_Status(lights) == 1) {
  6428  17E8  0020               	movlb	0	; select bank0
  6429  17E9  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6430  17EA  319C  2462  3197   	fcall	_getDimmerLights_Status
  6431  17ED  3A01               	xorlw	1
  6432  17EE  1D03               	skipz
  6433  17EF  0008               	return
  6434                           
  6435                           ;Dimmer_B1.c: 603: DimmerLights->SwFlag = 1;
  6436  17F0  0879               	movf	_DimmerLights,w
  6437  17F1  3E09               	addlw	9
  6438  17F2  0086               	movwf	6
  6439  17F3  3001               	movlw	1	; select bank2/3
  6440  17F4  0087               	movwf	7
  6441  17F5  1701               	bsf	1,6
  6442                           
  6443                           ;Dimmer_B1.c: 604: DimmerLights->Status = 0;
  6444  17F6  0879               	movf	_DimmerLights,w
  6445  17F7  0086               	movwf	6
  6446  17F8  3001               	movlw	1	; select bank2/3
  6447  17F9  0087               	movwf	7
  6448  17FA  1281               	bcf	1,5
  6449                           
  6450                           ;Dimmer_B1.c: 605: setDimmerLights_SwOff(lights);
  6451  17FB  0020               	movlb	0	; select bank0
  6452  17FC  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6453  17FD  3188  205E         	fcall	_setDimmerLights_SwOff
  6454  17FF  0008               	return
  6455  1800                     __end_of_setDimmerLights_ErrorClose:	
  6456                           
  6457                           	psect	text20
  6458  1D37                     __ptext20:	
  6459 ;; *************** function _getDimmerLights_Line *****************
  6460 ;; Defined at:
  6461 ;;		line 730 in file "../src/Dimmer_B1.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  line            1    1[BANK0 ] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      unsigned char 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;Total ram usage:        2 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    5
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_setMain_Exception
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _getDimmerLights_Line
  6491  1D37                     _getDimmerLights_Line:	
  6492                           
  6493                           ;Dimmer_B1.c: 731: char line = 0;
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6497  1D37  0020               	movlb	0	; select bank0
  6498  1D38  01A1               	clrf	getDimmerLights_Line@line
  6499                           
  6500                           ;Dimmer_B1.c: 733: if (DimmerLights1.Line == 1) {
  6501  1D39  0023               	movlb	3	; select bank3
  6502  1D3A  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6503  1D3B  2D40               	goto	l864
  6504                           
  6505                           ;Dimmer_B1.c: 734: line = 1;
  6506  1D3C  0020               	movlb	0	; select bank0
  6507  1D3D  01A1               	clrf	getDimmerLights_Line@line
  6508  1D3E  0AA1               	incf	getDimmerLights_Line@line,f
  6509                           
  6510                           ;Dimmer_B1.c: 735: }
  6511  1D3F  2D47               	goto	l865
  6512  1D40                     l864:	
  6513                           
  6514                           ;Dimmer_B1.c: 738: else if (DimmerLights2.Line == 1) {
  6515  1D40  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6516  1D41  2D47               	goto	l865
  6517                           
  6518                           ;Dimmer_B1.c: 739: line = 2;
  6519  1D42  3002               	movlw	2
  6520  1D43  0020               	movlb	0	; select bank0
  6521  1D44  00A0               	movwf	??_getDimmerLights_Line
  6522  1D45  0820               	movf	??_getDimmerLights_Line,w
  6523  1D46  00A1               	movwf	getDimmerLights_Line@line
  6524  1D47                     l865:	
  6525                           
  6526                           ;Dimmer_B1.c: 740: }
  6527                           ;Dimmer_B1.c: 747: return line;
  6528  1D47  0020               	movlb	0	; select bank0
  6529  1D48  0821               	movf	getDimmerLights_Line@line,w
  6530  1D49  0008               	return
  6531  1D4A                     __end_of_getDimmerLights_Line:	
  6532                           
  6533                           	psect	text21
  6534  1C29                     __ptext21:	
  6535 ;; *************** function _Switch_Initialization *****************
  6536 ;; Defined at:
  6537 ;;		line 46 in file "../src/Switch_B1.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;		None
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;		None
  6542 ;; Return value:  Size  Location     Type
  6543 ;;		None               void
  6544 ;; Registers used:
  6545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;Total ram usage:        0 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    8
  6558 ;; This function calls:
  6559 ;;		_TouchPower
  6560 ;;		_setSw_Initialization
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _Switch_Initialization
  6568  1C29                     _Switch_Initialization:	
  6569                           
  6570                           ;Switch_B1.c: 47: TouchPower();
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6574  1C29  319D  25D9  319C   	fcall	_TouchPower
  6575                           
  6576                           ;Switch_B1.c: 49: WPUB1 = 0;
  6577  1C2C  0024               	movlb	4	; select bank4
  6578  1C2D  108D               	bcf	13,1	;volatile
  6579                           
  6580                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6581  1C2E  3001               	movlw	1
  6582  1C2F  319B  23A2  319C   	fcall	_setSw_Initialization
  6583                           
  6584                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6585  1C32  3002               	movlw	2
  6586  1C33  319B  23A2         	fcall	_setSw_Initialization
  6587  1C35  0008               	return
  6588  1C36                     __end_of_Switch_Initialization:	
  6589                           
  6590                           	psect	text22
  6591  1BA2                     __ptext22:	
  6592 ;; *************** function _setSw_Initialization *****************
  6593 ;; Defined at:
  6594 ;;		line 109 in file "../src/Switch_B1.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  sw              1    wreg     unsigned char 
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  sw              1    4[BANK0 ] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;		None               void
  6601 ;; Registers used:
  6602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;Total ram usage:        1 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    7
  6615 ;; This function calls:
  6616 ;;		_setLED
  6617 ;; This function is called by:
  6618 ;;		_Switch_Initialization
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function _setSw_Initialization
  6624  1BA2                     _setSw_Initialization:	
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6628                           ;setSw_Initialization@sw stored from wreg
  6629  1BA2  0020               	movlb	0	; select bank0
  6630  1BA3  00A4               	movwf	setSw_Initialization@sw
  6631                           
  6632                           ;Switch_B1.c: 110: setLED(sw, 1);
  6633  1BA4  01A2               	clrf	setLED@command
  6634  1BA5  0AA2               	incf	setLED@command,f
  6635  1BA6  0824               	movf	setSw_Initialization@sw,w
  6636  1BA7  3195  2551         	fcall	_setLED
  6637  1BA9  0008               	return
  6638  1BAA                     __end_of_setSw_Initialization:	
  6639                           
  6640                           	psect	text23
  6641  1DD9                     __ptext23:	
  6642 ;; *************** function _TouchPower *****************
  6643 ;; Defined at:
  6644 ;;		line 10 in file "../src/Switch_B1.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    6
  6665 ;; This function calls:
  6666 ;;		_Timeout_Counter
  6667 ;;		_set_TimeoutCleared
  6668 ;; This function is called by:
  6669 ;;		_Switch_Initialization
  6670 ;;		_Switch_Main
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           
  6675                           ;psect for function _TouchPower
  6676  1DD9                     _TouchPower:	
  6677                           
  6678                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6679                           
  6680                           ;incstack = 0
  6681                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6682  1DD9  0020               	movlb	0	; select bank0
  6683  1DDA  1A8E               	btfsc	14,5	;volatile
  6684  1DDB  0008               	return
  6685                           
  6686                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6687  1DDC  0021               	movlb	1	; select bank1
  6688  1DDD  1C20               	btfss	_myMain^(0+128),0
  6689  1DDE  0008               	return
  6690  1DDF  2DE5               	goto	l7529
  6691  1DE0                     l2363:	
  6692                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6693                           
  6694                           
  6695                           ;Switch_B1.c: 14: RC5 = 1;
  6696  1DE0  0020               	movlb	0	; select bank0
  6697  1DE1  168E               	bsf	14,5	;volatile
  6698                           
  6699                           ;Switch_B1.c: 15: Timeout_Counter();
  6700  1DE2  319D  259A  319D   	fcall	_Timeout_Counter
  6701  1DE5                     l7529:	
  6702  1DE5  0020               	movlb	0	; select bank0
  6703  1DE6  1A8E               	btfsc	14,5	;volatile
  6704  1DE7  2DEB               	goto	l7533
  6705  1DE8  0021               	movlb	1	; select bank1
  6706  1DE9  1D2D               	btfss	(_myMain^(0+128)+13),2
  6707  1DEA  2DE0               	goto	l2363
  6708  1DEB                     l7533:	
  6709                           
  6710                           ;Switch_B1.c: 16: }
  6711                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6712  1DEB  319B  235D         	fcall	_set_TimeoutCleared
  6713  1DED  0008               	return
  6714  1DEE                     __end_of_TouchPower:	
  6715                           
  6716                           	psect	text24
  6717  1B47                     __ptext24:	
  6718 ;; *************** function _RF_Main *****************
  6719 ;; Defined at:
  6720 ;;		line 16 in file "../src/RF_Control_B1.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        0 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:   14
  6741 ;; This function calls:
  6742 ;;		_setRF_Main
  6743 ;; This function is called by:
  6744 ;;		_main
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _RF_Main
  6750  1B47                     _RF_Main:	
  6751                           
  6752                           ;RF_Control_B1.c: 18: setRF_Main();
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6756  1B47  3185  252F         	fcall	_setRF_Main
  6757  1B49  0008               	return
  6758  1B4A                     __end_of_RF_Main:	
  6759                           
  6760                           	psect	text25
  6761  052F                     __ptext25:	
  6762 ;; *************** function _setRF_Main *****************
  6763 ;; Defined at:
  6764 ;;		line 52 in file "../src/RF_Control_B1.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;		None
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  error           1   78[BANK0 ] unsigned char 
  6769 ;;  Receive_OK      1   77[BANK0 ] unsigned char 
  6770 ;;  loop_f          1   76[BANK0 ] unsigned char 
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        4 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:   13
  6787 ;; This function calls:
  6788 ;;		_CC2500_ReadStatus
  6789 ;;		_CC2500_RxData
  6790 ;;		_CC2500_TxData
  6791 ;;		_CC2500_WriteCommand
  6792 ;;		_getBuz_GO
  6793 ;;		_getMain_All_Error_Status
  6794 ;;		_getRF_KeyStatus
  6795 ;;		_getRxData
  6796 ;; This function is called by:
  6797 ;;		_RF_Main
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _setRF_Main
  6803  052F                     _setRF_Main:	
  6804                           
  6805                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6809  052F  0020               	movlb	0	; select bank0
  6810  0530  01EC               	clrf	setRF_Main@loop_f
  6811  0531  01ED               	clrf	setRF_Main@Receive_OK
  6812  0532  01EE               	clrf	setRF_Main@error
  6813                           
  6814                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6815  0533  0021               	movlb	1	; select bank1
  6816  0534  1C3C               	btfss	_RF1^(0+128),0
  6817  0535  2E1C               	goto	l1964
  6818                           
  6819                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6820  0536  319C  2494  3185   	fcall	_getBuz_GO
  6821  0539  0020               	movlb	0	; select bank0
  6822  053A  0821               	movf	?_getBuz_GO+1,w
  6823  053B  0420               	iorwf	?_getBuz_GO,w
  6824  053C  1D03               	skipz
  6825  053D  0008               	return
  6826                           
  6827                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6828  053E  3000               	movlw	0
  6829  053F  3191  21CD  3185   	fcall	_getMain_All_Error_Status
  6830  0542  3800               	iorlw	0
  6831  0543  1D03               	skipz
  6832  0544  2D59               	goto	l1966
  6833                           
  6834                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6835  0545  319C  24A5  3185   	fcall	_getRF_KeyStatus
  6836  0548  3A01               	xorlw	1
  6837  0549  3000               	movlw	0
  6838  054A  1903               	skipnz
  6839  054B  3001               	movlw	1
  6840  054C  0020               	movlb	0	; select bank0
  6841  054D  00EB               	movwf	??_setRF_Main
  6842  054E  0CEB               	rrf	??_setRF_Main,f
  6843  054F  0CEB               	rrf	??_setRF_Main,f
  6844  0550  0021               	movlb	1	; select bank1
  6845  0551  083C               	movf	_RF1^(0+128),w
  6846  0552  0020               	movlb	0	; select bank0
  6847  0553  066B               	xorwf	??_setRF_Main,w
  6848  0554  397F               	andlw	-129
  6849  0555  066B               	xorwf	??_setRF_Main,w
  6850  0556  0021               	movlb	1	; select bank1
  6851  0557  00BC               	movwf	_RF1^(0+128)
  6852                           
  6853                           ;RF_Control_B1.c: 65: } else {
  6854  0558  2D5B               	goto	l1967
  6855  0559                     l1966:	
  6856                           
  6857                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6858  0559  0021               	movlb	1	; select bank1
  6859  055A  13BC               	bcf	_RF1^(0+128),7
  6860  055B                     l1967:	
  6861                           
  6862                           ;RF_Control_B1.c: 70: }
  6863                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6864  055B  1BBC               	btfsc	_RF1^(0+128),7
  6865  055C  1B3C               	btfsc	_RF1^(0+128),6
  6866  055D  2D63               	goto	l1968
  6867                           
  6868                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6869  055E  01BE               	clrf	(_RF1^(0+128)+2)
  6870  055F  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6871                           
  6872                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6873  0560  14BD               	bsf	(_RF1^(0+128)+1),1
  6874                           
  6875                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6876  0561  11BC               	bcf	_RF1^(0+128),3
  6877                           
  6878                           ;RF_Control_B1.c: 76: } else {
  6879  0562  0008               	return
  6880  0563                     l1968:	
  6881                           
  6882                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6883  0563  18BD               	btfsc	(_RF1^(0+128)+1),1
  6884  0564  1B3C               	btfsc	_RF1^(0+128),6
  6885  0565  2D7A               	goto	l7445
  6886                           
  6887                           ;RF_Control_B1.c: 78: RF1.Count++;
  6888  0566  3001               	movlw	1
  6889  0567  07BE               	addwf	(_RF1^(0+128)+2),f
  6890  0568  3000               	movlw	0
  6891  0569  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6892                           
  6893                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6894  056A  3002               	movlw	2
  6895  056B  3EBC               	addlw	_RF1& (0+255)
  6896  056C  0086               	movwf	6
  6897  056D  0187               	clrf	7
  6898  056E  3F40               	moviw [0]fsr1
  6899  056F  0643               	xorwf	(_RF1^(0+128)+7),w
  6900  0570  1D03               	skipz
  6901  0571  2D74               	goto	u7045
  6902  0572  3F41               	moviw [1]fsr1
  6903  0573  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6904  0574                     u7045:	
  6905  0574  1D03               	skipz
  6906  0575  2DE9               	goto	l7497
  6907                           
  6908                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6909  0576  01BE               	clrf	(_RF1^(0+128)+2)
  6910  0577  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6911                           
  6912                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6913  0578  10BD               	bcf	(_RF1^(0+128)+1),1
  6914                           
  6915                           ;RF_Control_B1.c: 82: }
  6916                           ;RF_Control_B1.c: 83: } else {
  6917  0579  2DE9               	goto	l7497
  6918  057A                     l7445:	
  6919                           
  6920                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6921  057A  01BE               	clrf	(_RF1^(0+128)+2)
  6922  057B  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6923                           
  6924                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6925  057C  10BD               	bcf	(_RF1^(0+128)+1),1
  6926                           
  6927                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6928  057D  193C               	btfsc	_RF1^(0+128),2
  6929  057E  1B3C               	btfsc	_RF1^(0+128),6
  6930  057F  2D9B               	goto	l1973
  6931                           
  6932                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6933  0580  113C               	bcf	_RF1^(0+128),2
  6934                           
  6935                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6936  0581  11BC               	bcf	_RF1^(0+128),3
  6937                           
  6938                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6939  0582  10BC               	bcf	_RF1^(0+128),1
  6940                           
  6941                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6942  0583  303B               	movlw	59
  6943  0584  3190  2083  3185   	fcall	_CC2500_ReadStatus
  6944                           
  6945                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6946  0587  0021               	movlb	1	; select bank1
  6947  0588  0853               	movf	_s_data^(0+128),w
  6948  0589  1903               	btfsc	3,2
  6949  058A  2D97               	goto	l1974
  6950                           
  6951                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6952  058B  3036               	movlw	54
  6953  058C  319E  264D  3185   	fcall	_CC2500_WriteCommand
  6954                           
  6955                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6956  058F  303B               	movlw	59
  6957  0590  319E  264D  3185   	fcall	_CC2500_WriteCommand
  6958                           
  6959                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6960  0593  303A               	movlw	58
  6961  0594  319E  264D  3185   	fcall	_CC2500_WriteCommand
  6962  0597                     l1974:	
  6963                           
  6964                           ;RF_Control_B1.c: 97: }
  6965                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6966  0597  318A  2242  3185   	fcall	_CC2500_TxData
  6967                           
  6968                           ;RF_Control_B1.c: 100: } else {
  6969  059A  2DE9               	goto	l7497
  6970  059B                     l1973:	
  6971                           
  6972                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6973  059B  1DBC               	btfss	_RF1^(0+128),3
  6974  059C  2DD4               	goto	l1976
  6975                           
  6976                           ;RF_Control_B1.c: 104: CC2500_RxData();
  6977  059D  318B  23F9  3185   	fcall	_CC2500_RxData
  6978                           
  6979                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  6980  05A0  0021               	movlb	1	; select bank1
  6981  05A1  1CBC               	btfss	_RF1^(0+128),1
  6982  05A2  2DE9               	goto	l7497
  6983                           
  6984                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  6985  05A3  10BC               	bcf	_RF1^(0+128),1
  6986                           
  6987                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  6988  05A4  12BD               	bcf	(_RF1^(0+128)+1),5
  6989                           
  6990                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  6991  05A5  01C6               	clrf	(_RF1^(0+128)+10)
  6992  05A6  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6993                           
  6994                           ;RF_Control_B1.c: 117: getRxData();
  6995  05A7  318B  2385  3185   	fcall	_getRxData
  6996                           
  6997                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  6998  05AA  0021               	movlb	1	; select bank1
  6999  05AB  14BD               	bsf	(_RF1^(0+128)+1),1
  7000                           
  7001                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7002  05AC  1DBD               	btfss	(_RF1^(0+128)+1),3
  7003  05AD  2DBB               	goto	l7481
  7004                           
  7005                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  7006  05AE  3000               	movlw	0
  7007  05AF  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7008  05B0  300B               	movlw	11
  7009  05B1  1903               	skipnz
  7010  05B2  0243               	subwf	(_RF1^(0+128)+7),w
  7011  05B3  1C03               	skipc
  7012  05B4  2DB9               	goto	l7479
  7013                           
  7014                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  7015  05B5  300A               	movlw	10
  7016  05B6  00C3               	movwf	(_RF1^(0+128)+7)
  7017  05B7  3000               	movlw	0
  7018  05B8  00C4               	movwf	(_RF1^(0+128)+8)
  7019  05B9                     l7479:	
  7020                           
  7021                           ;RF_Control_B1.c: 125: }
  7022                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7023  05B9  01C0               	clrf	(_RF1^(0+128)+4)
  7024                           
  7025                           ;RF_Control_B1.c: 127: } else {
  7026  05BA  2DE9               	goto	l7497
  7027  05BB                     l7481:	
  7028                           
  7029                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7030  05BB  3001               	movlw	1
  7031  05BC  0020               	movlb	0	; select bank0
  7032  05BD  00EB               	movwf	??_setRF_Main
  7033  05BE  086B               	movf	??_setRF_Main,w
  7034  05BF  0021               	movlb	1	; select bank1
  7035  05C0  07C0               	addwf	(_RF1^(0+128)+4),f
  7036                           
  7037                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7038  05C1  0840               	movf	(_RF1^(0+128)+4),w
  7039  05C2  3A02               	xorlw	2
  7040  05C3  1D03               	skipz
  7041  05C4  2DE9               	goto	l7497
  7042                           
  7043                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7044  05C5  01C0               	clrf	(_RF1^(0+128)+4)
  7045                           
  7046                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7047  05C6  01C1               	clrf	(_RF1^(0+128)+5)
  7048  05C7  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7049                           
  7050                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  7051  05C8  3000               	movlw	0
  7052  05C9  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7053  05CA  30C8               	movlw	200
  7054  05CB  1903               	skipnz
  7055  05CC  0243               	subwf	(_RF1^(0+128)+7),w
  7056  05CD  1803               	skipnc
  7057  05CE  2DE9               	goto	l7497
  7058                           
  7059                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7060  05CF  300A               	movlw	10
  7061  05D0  07C3               	addwf	(_RF1^(0+128)+7),f
  7062  05D1  3000               	movlw	0
  7063  05D2  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7064                           
  7065                           ;RF_Control_B1.c: 134: }
  7066                           ;RF_Control_B1.c: 135: }
  7067                           ;RF_Control_B1.c: 136: }
  7068                           ;RF_Control_B1.c: 137: }
  7069                           ;RF_Control_B1.c: 138: } else {
  7070  05D3  2DE9               	goto	l7497
  7071  05D4                     l1976:	
  7072                           
  7073                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7074  05D4  1DBC               	btfss	_RF1^(0+128),3
  7075  05D5  18BC               	btfsc	_RF1^(0+128),1
  7076  05D6  2DE9               	goto	l7497
  7077                           
  7078                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7079  05D7  15BC               	bsf	_RF1^(0+128),3
  7080                           
  7081                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7082  05D8  16BD               	bsf	(_RF1^(0+128)+1),5
  7083                           
  7084                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7085  05D9  3036               	movlw	54
  7086  05DA  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7087                           
  7088                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7089  05DD  303B               	movlw	59
  7090  05DE  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7091                           
  7092                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7093  05E1  303A               	movlw	58
  7094  05E2  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7095                           
  7096                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7097  05E5  3034               	movlw	52
  7098  05E6  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7099  05E9                     l7497:	
  7100                           
  7101                           ;RF_Control_B1.c: 148: }
  7102                           ;RF_Control_B1.c: 150: }
  7103                           ;RF_Control_B1.c: 151: }
  7104                           ;RF_Control_B1.c: 152: }
  7105                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  7106  05E9  0021               	movlb	1	; select bank1
  7107  05EA  1DBC               	btfss	_RF1^(0+128),3
  7108  05EB  2E0A               	goto	l7509
  7109                           
  7110                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7111  05EC  3001               	movlw	1
  7112  05ED  07C1               	addwf	(_RF1^(0+128)+5),f
  7113  05EE  3000               	movlw	0
  7114  05EF  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7115                           
  7116                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  7117  05F0  3005               	movlw	5
  7118  05F1  3EBC               	addlw	_RF1& (0+255)
  7119  05F2  0086               	movwf	6
  7120  05F3  0187               	clrf	7
  7121  05F4  3F40               	moviw [0]fsr1
  7122  05F5  3A64               	xorlw	100
  7123  05F6  1D03               	skipz
  7124  05F7  2DFA               	goto	u7175
  7125  05F8  3F41               	moviw [1]fsr1
  7126  05F9  3A00               	xorlw	0
  7127  05FA                     u7175:	
  7128  05FA  1D03               	skipz
  7129  05FB  2E0A               	goto	l7509
  7130                           
  7131                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7132  05FC  01C1               	clrf	(_RF1^(0+128)+5)
  7133  05FD  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7134                           
  7135                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  7136  05FE  01C0               	clrf	(_RF1^(0+128)+4)
  7137                           
  7138                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  7139  05FF  3000               	movlw	0
  7140  0600  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7141  0601  300B               	movlw	11
  7142  0602  1903               	skipnz
  7143  0603  0243               	subwf	(_RF1^(0+128)+7),w
  7144  0604  1C03               	skipc
  7145  0605  2E0A               	goto	l7509
  7146                           
  7147                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  7148  0606  300A               	movlw	10
  7149  0607  02C3               	subwf	(_RF1^(0+128)+7),f
  7150  0608  3000               	movlw	0
  7151  0609  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7152  060A                     l7509:	
  7153                           
  7154                           ;RF_Control_B1.c: 160: }
  7155                           ;RF_Control_B1.c: 161: }
  7156                           ;RF_Control_B1.c: 162: }
  7157                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  7158  060A  1EBD               	btfss	(_RF1^(0+128)+1),5
  7159  060B  0008               	return
  7160                           
  7161                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  7162  060C  3001               	movlw	1
  7163  060D  07C6               	addwf	(_RF1^(0+128)+10),f
  7164  060E  3000               	movlw	0
  7165  060F  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7166                           
  7167                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  7168  0610  3075               	movlw	117
  7169  0611  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7170  0612  3030               	movlw	48
  7171  0613  1903               	skipnz
  7172  0614  0246               	subwf	(_RF1^(0+128)+10),w
  7173  0615  1C03               	skipc
  7174  0616  0008               	return
  7175                           
  7176                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  7177  0617  01C6               	clrf	(_RF1^(0+128)+10)
  7178  0618  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7179                           
  7180                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  7181  0619  11BC               	bcf	_RF1^(0+128),3
  7182                           
  7183                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  7184  061A  10BC               	bcf	_RF1^(0+128),1
  7185                           
  7186                           ;RF_Control_B1.c: 169: }
  7187                           ;RF_Control_B1.c: 170: }
  7188                           ;RF_Control_B1.c: 171: }
  7189                           ;RF_Control_B1.c: 172: }
  7190                           ;RF_Control_B1.c: 179: } else {
  7191  061B  0008               	return
  7192  061C                     l1964:	
  7193                           
  7194                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7195  061C  1C20               	btfss	_myMain^(0+128),0
  7196  061D  0008               	return
  7197                           
  7198                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7199  061E  143C               	bsf	_RF1^(0+128),0
  7200  061F  0008               	return
  7201  0620                     __end_of_setRF_Main:	
  7202                           
  7203                           	psect	text26
  7204  0B85                     __ptext26:	
  7205 ;; *************** function _getRxData *****************
  7206 ;; Defined at:
  7207 ;;		line 269 in file "../src/RF_Control_B1.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  error           1   74[BANK0 ] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;		None               void
  7214 ;; Registers used:
  7215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;Total ram usage:        2 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:   12
  7228 ;; This function calls:
  7229 ;;		_getMain_All_Error_Status
  7230 ;;		_setControl_Lights_Table
  7231 ;;		_setLog_Code
  7232 ;; This function is called by:
  7233 ;;		_setRF_Main
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           
  7238                           ;psect for function _getRxData
  7239  0B85                     _getRxData:	
  7240                           
  7241                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7242                           
  7243                           ;incstack = 0
  7244                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7245  0B85  3000               	movlw	0
  7246  0B86  3191  21CD  318B   	fcall	_getMain_All_Error_Status
  7247  0B89  0020               	movlb	0	; select bank0
  7248  0B8A  00E9               	movwf	??_getRxData
  7249  0B8B  0869               	movf	??_getRxData,w
  7250  0B8C  00EA               	movwf	getRxData@error
  7251                           
  7252                           ;RF_Control_B1.c: 271: if (error == 0) {
  7253  0B8D  08EA               	movf	getRxData@error,f
  7254  0B8E  1D03               	skipz
  7255  0B8F  0008               	return
  7256                           
  7257                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7258  0B90  0021               	movlb	1	; select bank1
  7259  0B91  1F3C               	btfss	_RF1^(0+128),6
  7260  0B92  2BA3               	goto	l6929
  7261                           
  7262                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7263  0B93  0023               	movlb	3	; select bank3
  7264  0B94  08A0               	movf	_RF_Data^(0+384),f
  7265  0B95  1D03               	skipz
  7266  0B96  2BA0               	goto	l2015
  7267  0B97  0821               	movf	(_RF_Data^(0+384)+1),w
  7268  0B98  3A64               	xorlw	100
  7269  0B99  1D03               	skipz
  7270  0B9A  2BA0               	goto	l2015
  7271                           
  7272                           ;RF_Control_B1.c: 274: setLog_Code();
  7273  0B9B  3192  22D4         	fcall	_setLog_Code
  7274                           
  7275                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7276  0B9D  0021               	movlb	1	; select bank1
  7277  0B9E  15BD               	bsf	(_RF1^(0+128)+1),3
  7278                           
  7279                           ;RF_Control_B1.c: 276: } else {
  7280  0B9F  0008               	return
  7281  0BA0                     l2015:	
  7282                           
  7283                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7284  0BA0  0021               	movlb	1	; select bank1
  7285  0BA1  11BD               	bcf	(_RF1^(0+128)+1),3
  7286                           
  7287                           ;RF_Control_B1.c: 278: }
  7288                           ;RF_Control_B1.c: 279: } else {
  7289  0BA2  0008               	return
  7290  0BA3                     l6929:	
  7291                           
  7292                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7293  0BA3  0023               	movlb	3	; select bank3
  7294  0BA4  08A0               	movf	_RF_Data^(0+384),f
  7295  0BA5  1D03               	skipz
  7296  0BA6  2BE1               	goto	l6951
  7297  0BA7  0821               	movf	(_RF_Data^(0+384)+1),w
  7298  0BA8  3A02               	xorlw	2
  7299  0BA9  1D03               	skipz
  7300  0BAA  2BE1               	goto	l6951
  7301                           
  7302                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7303  0BAB  082C               	movf	(_RF_Data^(0+384)+12),w
  7304  0BAC  3AFF               	xorlw	255
  7305  0BAD  1D03               	skipz
  7306  0BAE  2BBB               	goto	l6941
  7307  0BAF  082D               	movf	(_RF_Data^(0+384)+13),w
  7308  0BB0  3AFF               	xorlw	255
  7309  0BB1  1D03               	skipz
  7310  0BB2  2BBB               	goto	l6941
  7311  0BB3  082E               	movf	(_RF_Data^(0+384)+14),w
  7312  0BB4  3AFF               	xorlw	255
  7313  0BB5  1D03               	skipz
  7314  0BB6  2BBB               	goto	l6941
  7315                           
  7316                           ;RF_Control_B1.c: 283: __nop();
  7317  0BB7  0000               	nop
  7318                           
  7319                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7320  0BB8  0021               	movlb	1	; select bank1
  7321  0BB9  11BD               	bcf	(_RF1^(0+128)+1),3
  7322                           
  7323                           ;RF_Control_B1.c: 285: } else {
  7324  0BBA  0008               	return
  7325  0BBB                     l6941:	
  7326                           
  7327                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7328  0BBB  0020               	movlb	0	; select bank0
  7329  0BBC  086F               	movf	_product,w
  7330  0BBD  3E0C               	addlw	12
  7331  0BBE  0086               	movwf	6
  7332  0BBF  3002               	movlw	2	; select bank4/5
  7333  0BC0  0087               	movwf	7
  7334  0BC1  0023               	movlb	3	; select bank3
  7335  0BC2  082C               	movf	(_RF_Data^(0+384)+12),w
  7336  0BC3  0601               	xorwf	1,w
  7337  0BC4  1D03               	skipz
  7338  0BC5  0008               	return
  7339  0BC6  0020               	movlb	0	; select bank0
  7340  0BC7  086F               	movf	_product,w
  7341  0BC8  3E0D               	addlw	13
  7342  0BC9  0086               	movwf	6
  7343  0BCA  3002               	movlw	2	; select bank4/5
  7344  0BCB  0087               	movwf	7
  7345  0BCC  0023               	movlb	3	; select bank3
  7346  0BCD  082D               	movf	(_RF_Data^(0+384)+13),w
  7347  0BCE  0601               	xorwf	1,w
  7348  0BCF  1D03               	skipz
  7349  0BD0  0008               	return
  7350  0BD1  0020               	movlb	0	; select bank0
  7351  0BD2  086F               	movf	_product,w
  7352  0BD3  3E0E               	addlw	14
  7353  0BD4  0086               	movwf	6
  7354  0BD5  3002               	movlw	2	; select bank4/5
  7355  0BD6  0087               	movwf	7
  7356  0BD7  0023               	movlb	3	; select bank3
  7357  0BD8  082E               	movf	(_RF_Data^(0+384)+14),w
  7358  0BD9  0601               	xorwf	1,w
  7359  0BDA  1D03               	skipz
  7360  0BDB  0008               	return
  7361                           
  7362                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7363  0BDC  318B  2316         	fcall	_setControl_Lights_Table
  7364                           
  7365                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7366  0BDE  0021               	movlb	1	; select bank1
  7367  0BDF  15BD               	bsf	(_RF1^(0+128)+1),3
  7368                           
  7369                           ;RF_Control_B1.c: 289: }
  7370                           ;RF_Control_B1.c: 290: }
  7371                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7372  0BE0  0008               	return
  7373  0BE1                     l6951:	
  7374  0BE1  0023               	movlb	3	; select bank3
  7375  0BE2  0820               	movf	_RF_Data^(0+384),w
  7376  0BE3  3AFF               	xorlw	255
  7377  0BE4  1D03               	skipz
  7378  0BE5  2BEC               	goto	l6957
  7379  0BE6  0821               	movf	(_RF_Data^(0+384)+1),w
  7380  0BE7  3A02               	xorlw	2
  7381  0BE8  1D03               	skipz
  7382  0BE9  2BEC               	goto	l6957
  7383                           
  7384                           ;RF_Control_B1.c: 292: __nop();
  7385  0BEA  0000               	nop
  7386                           
  7387                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7388  0BEB  0008               	return
  7389  0BEC                     l6957:	
  7390  0BEC  0023               	movlb	3	; select bank3
  7391  0BED  08A0               	movf	_RF_Data^(0+384),f
  7392  0BEE  1D03               	skipz
  7393  0BEF  2BF6               	goto	l2025
  7394  0BF0  0821               	movf	(_RF_Data^(0+384)+1),w
  7395  0BF1  3A65               	xorlw	101
  7396  0BF2  1D03               	skipz
  7397  0BF3  2BF6               	goto	l2025
  7398                           
  7399                           ;RF_Control_B1.c: 294: __nop();
  7400  0BF4  0000               	nop
  7401                           
  7402                           ;RF_Control_B1.c: 295: } else {
  7403  0BF5  0008               	return
  7404  0BF6                     l2025:	
  7405                           
  7406                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7407  0BF6  0021               	movlb	1	; select bank1
  7408  0BF7  11BD               	bcf	(_RF1^(0+128)+1),3
  7409                           
  7410                           ;RF_Control_B1.c: 297: }
  7411                           ;RF_Control_B1.c: 302: }
  7412                           ;RF_Control_B1.c: 303: } else {
  7413  0BF8  0008               	return
  7414  0BF9                     __end_of_getRxData:	
  7415                           ;RF_Control_B1.c: 304: ;
  7416                           
  7417                           
  7418                           	psect	text27
  7419  12D4                     __ptext27:	
  7420 ;; *************** function _setLog_Code *****************
  7421 ;; Defined at:
  7422 ;;		line 309 in file "../src/RF_Control_B1.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;Total ram usage:        1 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    7
  7443 ;; This function calls:
  7444 ;;		_setBuz
  7445 ;;		_setMemory_LoopSave
  7446 ;;		_setMemory_Modify
  7447 ;; This function is called by:
  7448 ;;		_getRxData
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           
  7453                           ;psect for function _setLog_Code
  7454  12D4                     _setLog_Code:	
  7455                           
  7456                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7457                           
  7458                           ;incstack = 0
  7459                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7460  12D4  0021               	movlb	1	; select bank1
  7461  12D5  133C               	bcf	_RF1^(0+128),6
  7462                           
  7463                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7464  12D6  0023               	movlb	3	; select bank3
  7465  12D7  082C               	movf	(_RF_Data^(0+384)+12),w
  7466  12D8  0020               	movlb	0	; select bank0
  7467  12D9  00AD               	movwf	??_setLog_Code
  7468  12DA  086F               	movf	_product,w
  7469  12DB  3E0C               	addlw	12
  7470  12DC  0086               	movwf	6
  7471  12DD  3002               	movlw	2	; select bank4/5
  7472  12DE  0087               	movwf	7
  7473  12DF  082D               	movf	??_setLog_Code,w
  7474  12E0  0081               	movwf	1
  7475                           
  7476                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7477  12E1  0023               	movlb	3	; select bank3
  7478  12E2  082D               	movf	(_RF_Data^(0+384)+13),w
  7479  12E3  0020               	movlb	0	; select bank0
  7480  12E4  00AD               	movwf	??_setLog_Code
  7481  12E5  086F               	movf	_product,w
  7482  12E6  3E0D               	addlw	13
  7483  12E7  0086               	movwf	6
  7484  12E8  3002               	movlw	2	; select bank4/5
  7485  12E9  0087               	movwf	7
  7486  12EA  082D               	movf	??_setLog_Code,w
  7487  12EB  0081               	movwf	1
  7488                           
  7489                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7490  12EC  0023               	movlb	3	; select bank3
  7491  12ED  082E               	movf	(_RF_Data^(0+384)+14),w
  7492  12EE  0020               	movlb	0	; select bank0
  7493  12EF  00AD               	movwf	??_setLog_Code
  7494  12F0  086F               	movf	_product,w
  7495  12F1  3E0E               	addlw	14
  7496  12F2  0086               	movwf	6
  7497  12F3  3002               	movlw	2	; select bank4/5
  7498  12F4  0087               	movwf	7
  7499  12F5  082D               	movf	??_setLog_Code,w
  7500  12F6  0081               	movwf	1
  7501                           
  7502                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7503  12F7  3064               	movlw	100
  7504  12F8  00A9               	movwf	setBuz@time
  7505  12F9  3000               	movlw	0
  7506  12FA  00AA               	movwf	setBuz@time+1
  7507  12FB  3001               	movlw	1
  7508  12FC  3197  274D  3192   	fcall	_setBuz
  7509                           
  7510                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7511  12FF  0021               	movlb	1	; select bank1
  7512  1300  1EA0               	btfss	_myMain^(0+128),5
  7513  1301  2B06               	goto	l2031
  7514                           
  7515                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7516  1302  3001               	movlw	1
  7517  1303  319D  2524  3192   	fcall	_setMemory_LoopSave
  7518  1306                     l2031:	
  7519                           
  7520                           ;RF_Control_B1.c: 317: }
  7521                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7522  1306  3001               	movlw	1
  7523  1307  319D  2511         	fcall	_setMemory_Modify
  7524  1309  0008               	return
  7525  130A                     __end_of_setLog_Code:	
  7526                           
  7527                           	psect	text28
  7528  1D24                     __ptext28:	
  7529 ;; *************** function _setMemory_LoopSave *****************
  7530 ;; Defined at:
  7531 ;;		line 1006 in file "../src/MCU_B1.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  command         1    wreg     unsigned char 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;  command         1    1[BANK0 ] unsigned char 
  7536 ;; Return value:  Size  Location     Type
  7537 ;;		None               void
  7538 ;; Registers used:
  7539 ;;		wreg, status,2, status,0
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;Total ram usage:        2 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    5
  7552 ;; This function calls:
  7553 ;;		Nothing
  7554 ;; This function is called by:
  7555 ;;		_setLog_Code
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _setMemory_LoopSave
  7561  1D24                     _setMemory_LoopSave:	
  7562                           
  7563                           ;incstack = 0
  7564                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7565                           ;setMemory_LoopSave@command stored from wreg
  7566  1D24  0020               	movlb	0	; select bank0
  7567  1D25  00A1               	movwf	setMemory_LoopSave@command
  7568                           
  7569                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7570  1D26  0821               	movf	setMemory_LoopSave@command,w
  7571  1D27  3A01               	xorlw	1
  7572  1D28  3000               	movlw	0
  7573  1D29  1903               	skipnz
  7574  1D2A  3001               	movlw	1
  7575  1D2B  00A0               	movwf	??_setMemory_LoopSave
  7576  1D2C  0DA0               	rlf	??_setMemory_LoopSave,f
  7577  1D2D  0DA0               	rlf	??_setMemory_LoopSave,f
  7578  1D2E  0024               	movlb	4	; select bank4
  7579  1D2F  0844               	movf	(_Memory^(0+512)+36),w
  7580  1D30  0020               	movlb	0	; select bank0
  7581  1D31  0620               	xorwf	??_setMemory_LoopSave,w
  7582  1D32  39FB               	andlw	-5
  7583  1D33  0620               	xorwf	??_setMemory_LoopSave,w
  7584  1D34  0024               	movlb	4	; select bank4
  7585  1D35  00C4               	movwf	(_Memory^(0+512)+36)
  7586  1D36  0008               	return
  7587  1D37                     __end_of_setMemory_LoopSave:	
  7588                           
  7589                           	psect	text29
  7590  0B16                     __ptext29:	
  7591 ;; *************** function _setControl_Lights_Table *****************
  7592 ;; Defined at:
  7593 ;;		line 322 in file "../src/RF_Control_B1.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;		None
  7598 ;; Return value:  Size  Location     Type
  7599 ;;		None               void
  7600 ;; Registers used:
  7601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:        0 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:   11
  7614 ;; This function calls:
  7615 ;;		_setBuz
  7616 ;;		_setRFSW_AdjControl
  7617 ;;		_setRFSW_Control
  7618 ;;		_setTxData
  7619 ;; This function is called by:
  7620 ;;		_getRxData
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           
  7625                           ;psect for function _setControl_Lights_Table
  7626  0B16                     _setControl_Lights_Table:	
  7627                           
  7628                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7632  0B16  2B69               	goto	l6527
  7633  0B17                     l6499:	
  7634                           ;RF_Control_B1.c: 324: case 0x00:
  7635                           
  7636                           
  7637                           ;RF_Control_B1.c: 327: setRFSW_Control(1);
  7638  0B17  3001               	movlw	1
  7639  0B18  3196  269D  318B   	fcall	_setRFSW_Control
  7640                           
  7641                           ;RF_Control_B1.c: 333: setRFSW_Control(2);
  7642  0B1B  3002               	movlw	2
  7643  0B1C  3196  269D  318B   	fcall	_setRFSW_Control
  7644                           
  7645                           ;RF_Control_B1.c: 341: product->Data[9]=0;
  7646  0B1F  0020               	movlb	0	; select bank0
  7647  0B20  086F               	movf	_product,w
  7648  0B21  3E09               	addlw	9
  7649  0B22  0086               	movwf	6
  7650  0B23  3002               	movlw	2	; select bank4/5
  7651  0B24  0087               	movwf	7
  7652  0B25  0181               	clrf	1
  7653                           
  7654                           ;RF_Control_B1.c: 342: product->Data[11]=0;
  7655  0B26  086F               	movf	_product,w
  7656  0B27  3E0B               	addlw	11
  7657  0B28  0086               	movwf	6
  7658  0B29  3002               	movlw	2	; select bank4/5
  7659  0B2A  0087               	movwf	7
  7660  0B2B  0181               	clrf	1
  7661                           
  7662                           ;RF_Control_B1.c: 343: product->Data[15]=0;
  7663  0B2C  086F               	movf	_product,w
  7664  0B2D  3E0F               	addlw	15
  7665  0B2E  0086               	movwf	6
  7666  0B2F  3002               	movlw	2	; select bank4/5
  7667  0B30  0087               	movwf	7
  7668  0B31  0181               	clrf	1
  7669                           
  7670                           ;RF_Control_B1.c: 344: product->Data[17]=0;
  7671  0B32  086F               	movf	_product,w
  7672  0B33  3E11               	addlw	17
  7673  0B34  0086               	movwf	6
  7674  0B35  3002               	movlw	2	; select bank4/5
  7675  0B36  0087               	movwf	7
  7676  0B37  0181               	clrf	1
  7677                           
  7678                           ;RF_Control_B1.c: 345: setBuz(1, 100);
  7679  0B38  3064               	movlw	100
  7680  0B39  00A9               	movwf	setBuz@time
  7681  0B3A  3000               	movlw	0
  7682  0B3B  00AA               	movwf	setBuz@time+1
  7683  0B3C  3001               	movlw	1
  7684  0B3D  3197  274D  318B   	fcall	_setBuz
  7685                           
  7686                           ;RF_Control_B1.c: 346: setTxData();
  7687  0B40  3186  26FC         	fcall	_setTxData
  7688                           
  7689                           ;RF_Control_B1.c: 347: break;
  7690  0B42  0008               	return
  7691  0B43                     l6513:	
  7692                           ;RF_Control_B1.c: 348: case 0x20:
  7693                           
  7694                           
  7695                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  7696  0B43  0020               	movlb	0	; select bank0
  7697  0B44  086F               	movf	_product,w
  7698  0B45  3E09               	addlw	9
  7699  0B46  0086               	movwf	6
  7700  0B47  3002               	movlw	2	; select bank4/5
  7701  0B48  0087               	movwf	7
  7702  0B49  0181               	clrf	1
  7703                           
  7704                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  7705  0B4A  086F               	movf	_product,w
  7706  0B4B  3E0B               	addlw	11
  7707  0B4C  0086               	movwf	6
  7708  0B4D  3002               	movlw	2	; select bank4/5
  7709  0B4E  0087               	movwf	7
  7710  0B4F  0181               	clrf	1
  7711                           
  7712                           ;RF_Control_B1.c: 351: product->Data[17]=0;
  7713  0B50  086F               	movf	_product,w
  7714  0B51  3E11               	addlw	17
  7715  0B52  0086               	movwf	6
  7716  0B53  3002               	movlw	2	; select bank4/5
  7717  0B54  0087               	movwf	7
  7718  0B55  0181               	clrf	1
  7719                           
  7720                           ;RF_Control_B1.c: 352: setTxData();
  7721  0B56  3186  26FC         	fcall	_setTxData
  7722                           
  7723                           ;RF_Control_B1.c: 353: break;
  7724  0B58  0008               	return
  7725  0B59                     l6517:	
  7726                           ;RF_Control_B1.c: 354: case 0x01:
  7727                           
  7728                           
  7729                           ;RF_Control_B1.c: 356: setRFSW_Control(1);
  7730  0B59  3001               	movlw	1
  7731  0B5A  3196  269D         	fcall	_setRFSW_Control
  7732                           
  7733                           ;RF_Control_B1.c: 358: break;
  7734  0B5C  0008               	return
  7735  0B5D                     l6519:	
  7736                           ;RF_Control_B1.c: 359: case 0x02:
  7737                           
  7738                           
  7739                           ;RF_Control_B1.c: 361: setRFSW_Control(2);
  7740  0B5D  3002               	movlw	2
  7741  0B5E  3196  269D         	fcall	_setRFSW_Control
  7742                           
  7743                           ;RF_Control_B1.c: 368: break;
  7744                           
  7745                           ;RF_Control_B1.c: 364: case 0x03:
  7746                           
  7747                           ;RF_Control_B1.c: 363: break;
  7748  0B60  0008               	return
  7749  0B61                     l6521:	
  7750                           ;RF_Control_B1.c: 369: case 0x11:
  7751                           
  7752                           
  7753                           ;RF_Control_B1.c: 372: setRFSW_AdjControl(1);
  7754  0B61  3001               	movlw	1
  7755  0B62  3193  23EF         	fcall	_setRFSW_AdjControl
  7756                           
  7757                           ;RF_Control_B1.c: 375: break;
  7758  0B64  0008               	return
  7759  0B65                     l6523:	
  7760                           ;RF_Control_B1.c: 376: case 0x21:
  7761                           
  7762                           
  7763                           ;RF_Control_B1.c: 379: setRFSW_AdjControl(2);
  7764  0B65  3002               	movlw	2
  7765  0B66  3193  23EF         	fcall	_setRFSW_AdjControl
  7766                           
  7767                           ;RF_Control_B1.c: 390: }
  7768                           
  7769                           ;RF_Control_B1.c: 389: break;
  7770                           
  7771                           ;RF_Control_B1.c: 383: case 0x31:
  7772                           
  7773                           ;RF_Control_B1.c: 382: break;
  7774  0B68  0008               	return
  7775  0B69                     l6527:	
  7776  0B69  0023               	movlb	3	; select bank3
  7777  0B6A  082F               	movf	(_RF_Data^(0+384)+15),w
  7778                           
  7779                           ; Switch size 1, requested type "space"
  7780                           ; Number of cases is 8, Range of values is 0 to 49
  7781                           ; switch strategies available:
  7782                           ; Name         Instructions Cycles
  7783                           ; simple_byte           25    13 (average)
  7784                           ; direct_byte          106     6 (fixed)
  7785                           ; jumptable            260     6 (fixed)
  7786                           ;	Chosen strategy is simple_byte
  7787  0B6B  3A00               	xorlw	0	; case 0
  7788  0B6C  1903               	skipnz
  7789  0B6D  2B17               	goto	l6499
  7790  0B6E  3A01               	xorlw	1	; case 1
  7791  0B6F  1903               	skipnz
  7792  0B70  2B59               	goto	l6517
  7793  0B71  3A03               	xorlw	3	; case 2
  7794  0B72  1903               	skipnz
  7795  0B73  2B5D               	goto	l6519
  7796  0B74  3A01               	xorlw	1	; case 3
  7797  0B75  1903               	skipnz
  7798  0B76  2B84               	goto	l2045
  7799  0B77  3A12               	xorlw	18	; case 17
  7800  0B78  1903               	skipnz
  7801  0B79  2B61               	goto	l6521
  7802  0B7A  3A31               	xorlw	49	; case 32
  7803  0B7B  1903               	skipnz
  7804  0B7C  2B43               	goto	l6513
  7805  0B7D  3A01               	xorlw	1	; case 33
  7806  0B7E  1903               	skipnz
  7807  0B7F  2B65               	goto	l6523
  7808  0B80  3A10               	xorlw	16	; case 49
  7809  0B81  1903               	skipnz
  7810  0B82  2B84               	goto	l2045
  7811  0B83  2B84               	goto	l2045
  7812  0B84                     l2045:	
  7813  0B84  0008               	return
  7814  0B85                     __end_of_setControl_Lights_Table:	
  7815                           
  7816                           	psect	text30
  7817  169D                     __ptext30:	
  7818 ;; *************** function _setRFSW_Control *****************
  7819 ;; Defined at:
  7820 ;;		line 473 in file "../src/RF_Control_B1.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  sw              1    wreg     unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  sw              1   72[BANK0 ] unsigned char 
  7825 ;;  status          1   71[BANK0 ] unsigned char 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;		None               void
  7828 ;; Registers used:
  7829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;Total ram usage:        3 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:   10
  7842 ;; This function calls:
  7843 ;;		_getDimmerLights_Status
  7844 ;;		_setDelayOff_GO
  7845 ;;		_setDimmerLights_SwOff
  7846 ;;		_setDimmerLights_SwOn
  7847 ;;		_setRF_DimmerLights
  7848 ;; This function is called by:
  7849 ;;		_setControl_Lights_Table
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _setRFSW_Control
  7855  169D                     _setRFSW_Control:	
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7859                           ;setRFSW_Control@sw stored from wreg
  7860  169D  0020               	movlb	0	; select bank0
  7861  169E  00E8               	movwf	setRFSW_Control@sw
  7862                           
  7863                           ;RF_Control_B1.c: 474: char status = 0;
  7864  169F  01E7               	clrf	setRFSW_Control@status
  7865                           
  7866                           ;RF_Control_B1.c: 478: setDimmerLights_SwOn(sw);
  7867  16A0  0868               	movf	setRFSW_Control@sw,w
  7868  16A1  3187  27B9  3196   	fcall	_setDimmerLights_SwOn
  7869                           
  7870                           ;RF_Control_B1.c: 479: status = getDimmerLights_Status(sw);
  7871  16A4  0020               	movlb	0	; select bank0
  7872  16A5  0868               	movf	setRFSW_Control@sw,w
  7873  16A6  319C  2462  3196   	fcall	_getDimmerLights_Status
  7874  16A9  0020               	movlb	0	; select bank0
  7875  16AA  00E6               	movwf	??_setRFSW_Control
  7876  16AB  0866               	movf	??_setRFSW_Control,w
  7877  16AC  00E7               	movwf	setRFSW_Control@status
  7878                           
  7879                           ;RF_Control_B1.c: 481: if (status == 1) {
  7880  16AD  0867               	movf	setRFSW_Control@status,w
  7881  16AE  3A01               	xorlw	1
  7882  16AF  1D03               	skipz
  7883  16B0  2ECA               	goto	l6333
  7884                           
  7885                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7886  16B1  0023               	movlb	3	; select bank3
  7887  16B2  0830               	movf	(_RF_Data^(0+384)+16),w
  7888  16B3  3A80               	xorlw	128
  7889  16B4  1D03               	skipz
  7890  16B5  2EC3               	goto	l2049
  7891                           
  7892                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7893  16B6  0020               	movlb	0	; select bank0
  7894  16B7  01AA               	clrf	setDelayOff_GO@command
  7895  16B8  0AAA               	incf	setDelayOff_GO@command,f
  7896  16B9  0023               	movlb	3	; select bank3
  7897  16BA  0831               	movf	(_RF_Data^(0+384)+17),w
  7898  16BB  0020               	movlb	0	; select bank0
  7899  16BC  00E6               	movwf	??_setRFSW_Control
  7900  16BD  0866               	movf	??_setRFSW_Control,w
  7901  16BE  00AB               	movwf	setDelayOff_GO@value
  7902  16BF  0868               	movf	setRFSW_Control@sw,w
  7903  16C0  3188  20BD  3196   	fcall	_setDelayOff_GO
  7904  16C3                     l2049:	
  7905                           
  7906                           ;RF_Control_B1.c: 484: }
  7907                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7908  16C3  0020               	movlb	0	; select bank0
  7909  16C4  01DD               	clrf	setRF_DimmerLights@on
  7910  16C5  0ADD               	incf	setRF_DimmerLights@on,f
  7911  16C6  0868               	movf	setRFSW_Control@sw,w
  7912  16C7  318A  22AA         	fcall	_setRF_DimmerLights
  7913                           
  7914                           ;RF_Control_B1.c: 488: } else {
  7915  16C9  0008               	return
  7916  16CA                     l6333:	
  7917                           
  7918                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7919  16CA  0023               	movlb	3	; select bank3
  7920  16CB  0830               	movf	(_RF_Data^(0+384)+16),w
  7921  16CC  3A80               	xorlw	128
  7922  16CD  1D03               	skipz
  7923  16CE  2EE3               	goto	l6337
  7924                           
  7925                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7926  16CF  0020               	movlb	0	; select bank0
  7927  16D0  01AA               	clrf	setDelayOff_GO@command
  7928  16D1  0AAA               	incf	setDelayOff_GO@command,f
  7929  16D2  0023               	movlb	3	; select bank3
  7930  16D3  0831               	movf	(_RF_Data^(0+384)+17),w
  7931  16D4  0020               	movlb	0	; select bank0
  7932  16D5  00E6               	movwf	??_setRFSW_Control
  7933  16D6  0866               	movf	??_setRFSW_Control,w
  7934  16D7  00AB               	movwf	setDelayOff_GO@value
  7935  16D8  0868               	movf	setRFSW_Control@sw,w
  7936  16D9  3188  20BD  3196   	fcall	_setDelayOff_GO
  7937                           
  7938                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7939  16DC  0020               	movlb	0	; select bank0
  7940  16DD  01DD               	clrf	setRF_DimmerLights@on
  7941  16DE  0ADD               	incf	setRF_DimmerLights@on,f
  7942  16DF  0868               	movf	setRFSW_Control@sw,w
  7943  16E0  318A  22AA         	fcall	_setRF_DimmerLights
  7944                           
  7945                           ;RF_Control_B1.c: 492: } else {
  7946  16E2  0008               	return
  7947  16E3                     l6337:	
  7948                           
  7949                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7950  16E3  0020               	movlb	0	; select bank0
  7951  16E4  0868               	movf	setRFSW_Control@sw,w
  7952  16E5  3188  205E  3196   	fcall	_setDimmerLights_SwOff
  7953                           
  7954                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7955  16E8  0020               	movlb	0	; select bank0
  7956  16E9  01DD               	clrf	setRF_DimmerLights@on
  7957  16EA  0868               	movf	setRFSW_Control@sw,w
  7958  16EB  318A  22AA  3196   	fcall	_setRF_DimmerLights
  7959                           
  7960                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7961  16EE  0020               	movlb	0	; select bank0
  7962  16EF  01AA               	clrf	setDelayOff_GO@command
  7963  16F0  01AB               	clrf	setDelayOff_GO@value
  7964  16F1  0868               	movf	setRFSW_Control@sw,w
  7965  16F2  3188  20BD         	fcall	_setDelayOff_GO
  7966  16F4  0008               	return
  7967  16F5                     __end_of_setRFSW_Control:	
  7968                           
  7969                           	psect	text31
  7970  13EF                     __ptext31:	
  7971 ;; *************** function _setRFSW_AdjControl *****************
  7972 ;; Defined at:
  7973 ;;		line 503 in file "../src/RF_Control_B1.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  sw              1    wreg     unsigned char 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  sw              1   71[BANK0 ] unsigned char 
  7978 ;;  status          1   70[BANK0 ] unsigned char 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;		None               void
  7981 ;; Registers used:
  7982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;Total ram usage:        4 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; Hardware stack levels required when called:   10
  7995 ;; This function calls:
  7996 ;;		_getDimmerLights_Status
  7997 ;;		_setMemory_Modify
  7998 ;;		_setRF_DimmerValue
  7999 ;;		_setTxData
  8000 ;; This function is called by:
  8001 ;;		_setControl_Lights_Table
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           
  8006                           ;psect for function _setRFSW_AdjControl
  8007  13EF                     _setRFSW_AdjControl:	
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8011                           ;setRFSW_AdjControl@sw stored from wreg
  8012  13EF  0020               	movlb	0	; select bank0
  8013  13F0  00E7               	movwf	setRFSW_AdjControl@sw
  8014                           
  8015                           ;RF_Control_B1.c: 504: char status = 0;
  8016  13F1  01E6               	clrf	setRFSW_AdjControl@status
  8017                           
  8018                           ;RF_Control_B1.c: 506: status = getDimmerLights_Status(sw);
  8019  13F2  0867               	movf	setRFSW_AdjControl@sw,w
  8020  13F3  319C  2462  3193   	fcall	_getDimmerLights_Status
  8021  13F6  0020               	movlb	0	; select bank0
  8022  13F7  00E4               	movwf	??_setRFSW_AdjControl
  8023  13F8  0864               	movf	??_setRFSW_AdjControl,w
  8024  13F9  00E6               	movwf	setRFSW_AdjControl@status
  8025                           
  8026                           ;RF_Control_B1.c: 509: if (status == 1) {
  8027  13FA  0866               	movf	setRFSW_AdjControl@status,w
  8028  13FB  3A01               	xorlw	1
  8029  13FC  1D03               	skipz
  8030  13FD  2C08               	goto	l6349
  8031                           
  8032                           ;RF_Control_B1.c: 510: setMemory_Modify(1);
  8033  13FE  3001               	movlw	1
  8034  13FF  319D  2511  3193   	fcall	_setMemory_Modify
  8035                           
  8036                           ;RF_Control_B1.c: 511: setRF_DimmerValue(sw);
  8037  1402  0020               	movlb	0	; select bank0
  8038  1403  0867               	movf	setRFSW_AdjControl@sw,w
  8039  1404  3192  2234  3193   	fcall	_setRF_DimmerValue
  8040                           
  8041                           ;RF_Control_B1.c: 512: } else {
  8042  1407  2C1A               	goto	l2057
  8043  1408                     l6349:	
  8044                           
  8045                           ;RF_Control_B1.c: 513: product->Data[9]=product->Data[20 + sw];
  8046  1408  0020               	movlb	0	; select bank0
  8047  1409  0867               	movf	setRFSW_AdjControl@sw,w
  8048  140A  3E14               	addlw	20
  8049  140B  076F               	addwf	_product,w
  8050  140C  00E4               	movwf	??_setRFSW_AdjControl
  8051  140D  0864               	movf	??_setRFSW_AdjControl,w
  8052  140E  0086               	movwf	6
  8053  140F  3002               	movlw	2	; select bank4/5
  8054  1410  0087               	movwf	7
  8055  1411  0801               	movf	1,w
  8056  1412  00E5               	movwf	??_setRFSW_AdjControl+1
  8057  1413  086F               	movf	_product,w
  8058  1414  3E09               	addlw	9
  8059  1415  0086               	movwf	6
  8060  1416  3002               	movlw	2	; select bank4/5
  8061  1417  0087               	movwf	7
  8062  1418  0865               	movf	??_setRFSW_AdjControl+1,w
  8063  1419  0081               	movwf	1
  8064  141A                     l2057:	
  8065                           
  8066                           ;RF_Control_B1.c: 514: }
  8067                           ;RF_Control_B1.c: 515: product->Data[17]=product->Data[26 + sw];
  8068  141A  0020               	movlb	0	; select bank0
  8069  141B  0867               	movf	setRFSW_AdjControl@sw,w
  8070  141C  3E1A               	addlw	26
  8071  141D  076F               	addwf	_product,w
  8072  141E  00E4               	movwf	??_setRFSW_AdjControl
  8073  141F  0864               	movf	??_setRFSW_AdjControl,w
  8074  1420  0086               	movwf	6
  8075  1421  3002               	movlw	2	; select bank4/5
  8076  1422  0087               	movwf	7
  8077  1423  0801               	movf	1,w
  8078  1424  00E5               	movwf	??_setRFSW_AdjControl+1
  8079  1425  086F               	movf	_product,w
  8080  1426  3E11               	addlw	17
  8081  1427  0086               	movwf	6
  8082  1428  3002               	movlw	2	; select bank4/5
  8083  1429  0087               	movwf	7
  8084  142A  0865               	movf	??_setRFSW_AdjControl+1,w
  8085  142B  0081               	movwf	1
  8086                           
  8087                           ;RF_Control_B1.c: 516: setTxData();
  8088  142C  3186  26FC         	fcall	_setTxData
  8089  142E  0008               	return
  8090  142F                     __end_of_setRFSW_AdjControl:	
  8091                           
  8092                           	psect	text32
  8093  1234                     __ptext32:	
  8094 ;; *************** function _setRF_DimmerValue *****************
  8095 ;; Defined at:
  8096 ;;		line 521 in file "../src/RF_Control_B1.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  lights          1    wreg     unsigned char 
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;  lights          1   67[BANK0 ] unsigned char 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;		None               void
  8103 ;; Registers used:
  8104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;Total ram usage:        3 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    9
  8117 ;; This function calls:
  8118 ;;		_setDimmerLights_AdjRF
  8119 ;; This function is called by:
  8120 ;;		_setRFSW_AdjControl
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           
  8125                           ;psect for function _setRF_DimmerValue
  8126  1234                     _setRF_DimmerValue:	
  8127                           
  8128                           ;incstack = 0
  8129                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8130                           ;setRF_DimmerValue@lights stored from wreg
  8131  1234  0020               	movlb	0	; select bank0
  8132  1235  00E3               	movwf	setRF_DimmerValue@lights
  8133                           
  8134                           ;RF_Control_B1.c: 522: if (RF_Data[9] > 0x64) {
  8135  1236  3065               	movlw	101
  8136  1237  0023               	movlb	3	; select bank3
  8137  1238  0229               	subwf	(_RF_Data^(0+384)+9),w
  8138  1239  1C03               	skipc
  8139  123A  2A41               	goto	l6257
  8140                           
  8141                           ;RF_Control_B1.c: 523: RF_Data[9] = 0x64;
  8142  123B  3064               	movlw	100
  8143  123C  0020               	movlb	0	; select bank0
  8144  123D  00E1               	movwf	??_setRF_DimmerValue
  8145  123E  0861               	movf	??_setRF_DimmerValue,w
  8146  123F  0023               	movlb	3	; select bank3
  8147  1240  00A9               	movwf	(_RF_Data^(0+384)+9)
  8148  1241                     l6257:	
  8149                           
  8150                           ;RF_Control_B1.c: 524: }
  8151                           ;RF_Control_B1.c: 525: product->Data[9]=RF_Data[9];
  8152  1241  0829               	movf	(_RF_Data^(0+384)+9),w
  8153  1242  0020               	movlb	0	; select bank0
  8154  1243  00E1               	movwf	??_setRF_DimmerValue
  8155  1244  086F               	movf	_product,w
  8156  1245  3E09               	addlw	9
  8157  1246  0086               	movwf	6
  8158  1247  3002               	movlw	2	; select bank4/5
  8159  1248  0087               	movwf	7
  8160  1249  0861               	movf	??_setRF_DimmerValue,w
  8161  124A  0081               	movwf	1
  8162                           
  8163                           ;RF_Control_B1.c: 526: product->Data[11]=lights;
  8164  124B  0863               	movf	setRF_DimmerValue@lights,w
  8165  124C  00E1               	movwf	??_setRF_DimmerValue
  8166  124D  086F               	movf	_product,w
  8167  124E  3E0B               	addlw	11
  8168  124F  0086               	movwf	6
  8169  1250  3002               	movlw	2	; select bank4/5
  8170  1251  0087               	movwf	7
  8171  1252  0861               	movf	??_setRF_DimmerValue,w
  8172  1253  0081               	movwf	1
  8173                           
  8174                           ;RF_Control_B1.c: 527: product->Data[(20 + lights)]=product->Data[9];
  8175  1254  086F               	movf	_product,w
  8176  1255  3E09               	addlw	9
  8177  1256  0086               	movwf	6
  8178  1257  3002               	movlw	2	; select bank4/5
  8179  1258  0087               	movwf	7
  8180  1259  0801               	movf	1,w
  8181  125A  00E1               	movwf	??_setRF_DimmerValue
  8182  125B  0863               	movf	setRF_DimmerValue@lights,w
  8183  125C  3E14               	addlw	20
  8184  125D  076F               	addwf	_product,w
  8185  125E  00E2               	movwf	??_setRF_DimmerValue+1
  8186  125F  0862               	movf	??_setRF_DimmerValue+1,w
  8187  1260  0086               	movwf	6
  8188  1261  3002               	movlw	2	; select bank4/5
  8189  1262  0087               	movwf	7
  8190  1263  0861               	movf	??_setRF_DimmerValue,w
  8191  1264  0081               	movwf	1
  8192                           
  8193                           ;RF_Control_B1.c: 528: setDimmerLights_AdjRF(lights);
  8194  1265  0863               	movf	setRF_DimmerValue@lights,w
  8195  1266  319F  27B9         	fcall	_setDimmerLights_AdjRF
  8196  1268  0008               	return
  8197  1269                     __end_of_setRF_DimmerValue:	
  8198                           
  8199                           	psect	text33
  8200  1FB9                     __ptext33:	
  8201 ;; *************** function _setDimmerLights_AdjRF *****************
  8202 ;; Defined at:
  8203 ;;		line 780 in file "../src/Dimmer_B1.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  lights          1    wreg     unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  lights          1   64[BANK0 ] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;Total ram usage:        2 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    8
  8224 ;; This function calls:
  8225 ;;		_DimmerLightsPointSelect
  8226 ;;		_getPercentValue
  8227 ;; This function is called by:
  8228 ;;		_setRF_DimmerValue
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _setDimmerLights_AdjRF
  8234  1FB9                     _setDimmerLights_AdjRF:	
  8235                           
  8236                           ;incstack = 0
  8237                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8238                           ;setDimmerLights_AdjRF@lights stored from wreg
  8239  1FB9  0020               	movlb	0	; select bank0
  8240  1FBA  00E0               	movwf	setDimmerLights_AdjRF@lights
  8241                           
  8242                           ;Dimmer_B1.c: 781: DimmerLightsPointSelect(lights);
  8243  1FBB  0860               	movf	setDimmerLights_AdjRF@lights,w
  8244  1FBC  319C  24FE  319F   	fcall	_DimmerLightsPointSelect
  8245                           
  8246                           ;Dimmer_B1.c: 782: DimmerLights->AdjRF = 1;
  8247  1FBF  0879               	movf	_DimmerLights,w
  8248  1FC0  0086               	movwf	6
  8249  1FC1  3001               	movlw	1	; select bank2/3
  8250  1FC2  0087               	movwf	7
  8251  1FC3  1501               	bsf	1,2
  8252                           
  8253                           ;Dimmer_B1.c: 783: DimmerLights->Signal = 1;
  8254  1FC4  0879               	movf	_DimmerLights,w
  8255  1FC5  0086               	movwf	6
  8256  1FC6  3001               	movlw	1	; select bank2/3
  8257  1FC7  0087               	movwf	7
  8258  1FC8  1481               	bsf	1,1
  8259                           
  8260                           ;Dimmer_B1.c: 784: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8261  1FC9  0020               	movlb	0	; select bank0
  8262  1FCA  086F               	movf	_product,w
  8263  1FCB  3E09               	addlw	9
  8264  1FCC  0086               	movwf	6
  8265  1FCD  3002               	movlw	2	; select bank4/5
  8266  1FCE  0087               	movwf	7
  8267  1FCF  0801               	movf	1,w
  8268  1FD0  3188  2003         	fcall	_getPercentValue
  8269  1FD2  0020               	movlb	0	; select bank0
  8270  1FD3  00DF               	movwf	??_setDimmerLights_AdjRF
  8271  1FD4  0879               	movf	_DimmerLights,w
  8272  1FD5  3E05               	addlw	5
  8273  1FD6  0086               	movwf	6
  8274  1FD7  3001               	movlw	1	; select bank2/3
  8275  1FD8  0087               	movwf	7
  8276  1FD9  085F               	movf	??_setDimmerLights_AdjRF,w
  8277  1FDA  0081               	movwf	1
  8278  1FDB  0008               	return
  8279  1FDC                     __end_of_setDimmerLights_AdjRF:	
  8280                           
  8281                           	psect	text34
  8282  0803                     __ptext34:	
  8283 ;; *************** function _getPercentValue *****************
  8284 ;; Defined at:
  8285 ;;		line 892 in file "../src/Dimmer_B1.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  value           1    wreg     unsigned char 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  value           1   59[BANK0 ] unsigned char 
  8290 ;;  i               3   60[BANK0 ] float 
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      unsigned char 
  8293 ;; Registers used:
  8294 ;;		wreg, status,2, status,0, pclath, cstack
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;Total ram usage:        6 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:    7
  8307 ;; This function calls:
  8308 ;;		___awtoft
  8309 ;;		___ftadd
  8310 ;;		___ftdiv
  8311 ;;		___ftmul
  8312 ;;		___fttol
  8313 ;; This function is called by:
  8314 ;;		_setDimmerLights_AdjRF
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           
  8319                           ;psect for function _getPercentValue
  8320  0803                     _getPercentValue:	
  8321                           
  8322                           ;incstack = 0
  8323                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8324                           ;getPercentValue@value stored from wreg
  8325  0803  0020               	movlb	0	; select bank0
  8326  0804  00DB               	movwf	getPercentValue@value
  8327                           
  8328                           ;Dimmer_B1.c: 900: float i = ((char)(80*0.8)) - ((char)(25*0.8));
  8329  0805  3000               	movlw	0
  8330  0806  00DC               	movwf	getPercentValue@i
  8331  0807  3030               	movlw	48
  8332  0808  00DD               	movwf	getPercentValue@i+1
  8333  0809  3042               	movlw	66
  8334  080A  00DE               	movwf	getPercentValue@i+2
  8335                           
  8336                           ;Dimmer_B1.c: 901: i /= 100;
  8337  080B  3000               	movlw	0
  8338  080C  00AE               	movwf	___ftdiv@f2
  8339  080D  30C8               	movlw	200
  8340  080E  00AF               	movwf	___ftdiv@f2+1
  8341  080F  3042               	movlw	66
  8342  0810  00B0               	movwf	___ftdiv@f2+2
  8343  0811  085C               	movf	getPercentValue@i,w
  8344  0812  00B1               	movwf	___ftdiv@f1
  8345  0813  085D               	movf	getPercentValue@i+1,w
  8346  0814  00B2               	movwf	___ftdiv@f1+1
  8347  0815  085E               	movf	getPercentValue@i+2,w
  8348  0816  00B3               	movwf	___ftdiv@f1+2
  8349  0817  318E  26A3  3188   	fcall	___ftdiv
  8350  081A  0020               	movlb	0	; select bank0
  8351  081B  082E               	movf	?___ftdiv,w
  8352  081C  00DC               	movwf	getPercentValue@i
  8353  081D  082F               	movf	?___ftdiv+1,w
  8354  081E  00DD               	movwf	getPercentValue@i+1
  8355  081F  0830               	movf	?___ftdiv+2,w
  8356  0820  00DE               	movwf	getPercentValue@i+2
  8357                           
  8358                           ;Dimmer_B1.c: 903: return (char) (((100 - value) * i) + ((char)(80*0.8)));
  8359  0821  085B               	movf	getPercentValue@value,w
  8360  0822  00D9               	movwf	??_getPercentValue
  8361  0823  01DA               	clrf	??_getPercentValue+1
  8362  0824  09D9               	comf	??_getPercentValue,f
  8363  0825  09DA               	comf	??_getPercentValue+1,f
  8364  0826  0AD9               	incf	??_getPercentValue,f
  8365  0827  1903               	skipnz
  8366  0828  0ADA               	incf	??_getPercentValue+1,f
  8367  0829  0859               	movf	??_getPercentValue,w
  8368  082A  3E64               	addlw	100
  8369  082B  00A8               	movwf	___awtoft@c
  8370  082C  3000               	movlw	0
  8371  082D  3D5A               	addwfc	??_getPercentValue+1,w
  8372  082E  00A9               	movwf	___awtoft@c+1
  8373  082F  319F  2774  3188   	fcall	___awtoft
  8374  0832  0020               	movlb	0	; select bank0
  8375  0833  0828               	movf	?___awtoft,w
  8376  0834  00B1               	movwf	___ftmul@f2
  8377  0835  0829               	movf	?___awtoft+1,w
  8378  0836  00B2               	movwf	___ftmul@f2+1
  8379  0837  082A               	movf	?___awtoft+2,w
  8380  0838  00B3               	movwf	___ftmul@f2+2
  8381  0839  085C               	movf	getPercentValue@i,w
  8382  083A  00AE               	movwf	___ftmul@f1
  8383  083B  085D               	movf	getPercentValue@i+1,w
  8384  083C  00AF               	movwf	___ftmul@f1+1
  8385  083D  085E               	movf	getPercentValue@i+2,w
  8386  083E  00B0               	movwf	___ftmul@f1+2
  8387  083F  318F  274C  3188   	fcall	___ftmul
  8388  0842  0020               	movlb	0	; select bank0
  8389  0843  082E               	movf	?___ftmul,w
  8390  0844  00C1               	movwf	___ftadd@f2
  8391  0845  082F               	movf	?___ftmul+1,w
  8392  0846  00C2               	movwf	___ftadd@f2+1
  8393  0847  0830               	movf	?___ftmul+2,w
  8394  0848  00C3               	movwf	___ftadd@f2+2
  8395  0849  3000               	movlw	0
  8396  084A  00BE               	movwf	___ftadd@f1
  8397  084B  3080               	movlw	128
  8398  084C  00BF               	movwf	___ftadd@f1+1
  8399  084D  3042               	movlw	66
  8400  084E  00C0               	movwf	___ftadd@f1+2
  8401  084F  3184  2439  3188   	fcall	___ftadd
  8402  0852  0020               	movlb	0	; select bank0
  8403  0853  083E               	movf	?___ftadd,w
  8404  0854  00CB               	movwf	___fttol@f1
  8405  0855  083F               	movf	?___ftadd+1,w
  8406  0856  00CC               	movwf	___fttol@f1+1
  8407  0857  0840               	movf	?___ftadd+2,w
  8408  0858  00CD               	movwf	___fttol@f1+2
  8409  0859  318C  24F0         	fcall	___fttol
  8410  085B  0020               	movlb	0	; select bank0
  8411  085C  084B               	movf	?___fttol,w
  8412  085D  0008               	return
  8413  085E                     __end_of_getPercentValue:	
  8414                           
  8415                           	psect	text35
  8416  0F4C                     __ptext35:	
  8417 ;; *************** function ___ftmul *****************
  8418 ;; Defined at:
  8419 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;  f1              3   14[BANK0 ] float 
  8422 ;;  f2              3   17[BANK0 ] float 
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8425 ;;  sign            1   29[BANK0 ] unsigned char 
  8426 ;;  cntr            1   28[BANK0 ] unsigned char 
  8427 ;;  exp             1   24[BANK0 ] unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  3   14[BANK0 ] float 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2, status,0, pclath, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:       16 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    6
  8444 ;; This function calls:
  8445 ;;		___ftpack
  8446 ;; This function is called by:
  8447 ;;		_getPercentValue
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function ___ftmul
  8453  0F4C                     ___ftmul:	
  8454                           
  8455                           ;incstack = 0
  8456                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8457  0F4C  0020               	movlb	0	; select bank0
  8458  0F4D  082E               	movf	___ftmul@f1,w
  8459  0F4E  00B4               	movwf	??___ftmul
  8460  0F4F  082F               	movf	___ftmul@f1+1,w
  8461  0F50  00B5               	movwf	??___ftmul+1
  8462  0F51  0830               	movf	___ftmul@f1+2,w
  8463  0F52  00B6               	movwf	??___ftmul+2
  8464  0F53  1003               	clrc
  8465  0F54  0D35               	rlf	??___ftmul+1,w
  8466  0F55  0D36               	rlf	??___ftmul+2,w
  8467  0F56  00B7               	movwf	??___ftmul+3
  8468  0F57  0837               	movf	??___ftmul+3,w
  8469  0F58  00B8               	movwf	___ftmul@exp
  8470  0F59  08B8               	movf	___ftmul@exp,f
  8471  0F5A  1D03               	skipz
  8472  0F5B  2F63               	goto	l5873
  8473  0F5C  3000               	movlw	0
  8474  0F5D  00AE               	movwf	?___ftmul
  8475  0F5E  3000               	movlw	0
  8476  0F5F  00AF               	movwf	?___ftmul+1
  8477  0F60  3000               	movlw	0
  8478  0F61  00B0               	movwf	?___ftmul+2
  8479  0F62  0008               	return
  8480  0F63                     l5873:	
  8481  0F63  0831               	movf	___ftmul@f2,w
  8482  0F64  00B4               	movwf	??___ftmul
  8483  0F65  0832               	movf	___ftmul@f2+1,w
  8484  0F66  00B5               	movwf	??___ftmul+1
  8485  0F67  0833               	movf	___ftmul@f2+2,w
  8486  0F68  00B6               	movwf	??___ftmul+2
  8487  0F69  1003               	clrc
  8488  0F6A  0D35               	rlf	??___ftmul+1,w
  8489  0F6B  0D36               	rlf	??___ftmul+2,w
  8490  0F6C  00B7               	movwf	??___ftmul+3
  8491  0F6D  0837               	movf	??___ftmul+3,w
  8492  0F6E  00BD               	movwf	___ftmul@sign
  8493  0F6F  08BD               	movf	___ftmul@sign,f
  8494  0F70  1D03               	skipz
  8495  0F71  2F79               	goto	l5879
  8496  0F72  3000               	movlw	0
  8497  0F73  00AE               	movwf	?___ftmul
  8498  0F74  3000               	movlw	0
  8499  0F75  00AF               	movwf	?___ftmul+1
  8500  0F76  3000               	movlw	0
  8501  0F77  00B0               	movwf	?___ftmul+2
  8502  0F78  0008               	return
  8503  0F79                     l5879:	
  8504  0F79  083D               	movf	___ftmul@sign,w
  8505  0F7A  3E7B               	addlw	123
  8506  0F7B  00B4               	movwf	??___ftmul
  8507  0F7C  0834               	movf	??___ftmul,w
  8508  0F7D  07B8               	addwf	___ftmul@exp,f
  8509  0F7E  082E               	movf	___ftmul@f1,w
  8510  0F7F  00B4               	movwf	??___ftmul
  8511  0F80  082F               	movf	___ftmul@f1+1,w
  8512  0F81  00B5               	movwf	??___ftmul+1
  8513  0F82  0830               	movf	___ftmul@f1+2,w
  8514  0F83  00B6               	movwf	??___ftmul+2
  8515  0F84  3010               	movlw	16
  8516  0F85                     u4665:	
  8517  0F85  36B6               	lsrf	??___ftmul+2,f
  8518  0F86  0CB5               	rrf	??___ftmul+1,f
  8519  0F87  0CB4               	rrf	??___ftmul,f
  8520  0F88  0B89               	decfsz	9,f
  8521  0F89  2F85               	goto	u4665
  8522  0F8A  0834               	movf	??___ftmul,w
  8523  0F8B  00B7               	movwf	??___ftmul+3
  8524  0F8C  0837               	movf	??___ftmul+3,w
  8525  0F8D  00BD               	movwf	___ftmul@sign
  8526  0F8E  0831               	movf	___ftmul@f2,w
  8527  0F8F  00B4               	movwf	??___ftmul
  8528  0F90  0832               	movf	___ftmul@f2+1,w
  8529  0F91  00B5               	movwf	??___ftmul+1
  8530  0F92  0833               	movf	___ftmul@f2+2,w
  8531  0F93  00B6               	movwf	??___ftmul+2
  8532  0F94  3010               	movlw	16
  8533  0F95                     u4675:	
  8534  0F95  36B6               	lsrf	??___ftmul+2,f
  8535  0F96  0CB5               	rrf	??___ftmul+1,f
  8536  0F97  0CB4               	rrf	??___ftmul,f
  8537  0F98  0B89               	decfsz	9,f
  8538  0F99  2F95               	goto	u4675
  8539  0F9A  0834               	movf	??___ftmul,w
  8540  0F9B  00B7               	movwf	??___ftmul+3
  8541  0F9C  0837               	movf	??___ftmul+3,w
  8542  0F9D  06BD               	xorwf	___ftmul@sign,f
  8543  0F9E  3080               	movlw	128
  8544  0F9F  00B4               	movwf	??___ftmul
  8545  0FA0  0834               	movf	??___ftmul,w
  8546  0FA1  05BD               	andwf	___ftmul@sign,f
  8547  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8548  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8549  0FA4  30FF               	movlw	255
  8550  0FA5  05B1               	andwf	___ftmul@f2,f
  8551  0FA6  30FF               	movlw	255
  8552  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8553  0FA8  3000               	movlw	0
  8554  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8555  0FAA  3000               	movlw	0
  8556  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8557  0FAC  3000               	movlw	0
  8558  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8559  0FAE  3000               	movlw	0
  8560  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8561  0FB0  3007               	movlw	7
  8562  0FB1  00B4               	movwf	??___ftmul
  8563  0FB2  0834               	movf	??___ftmul,w
  8564  0FB3  00BC               	movwf	___ftmul@cntr
  8565  0FB4                     l5891:	
  8566  0FB4  1C2E               	btfss	___ftmul@f1,0
  8567  0FB5  2FBC               	goto	l5895
  8568  0FB6  0831               	movf	___ftmul@f2,w
  8569  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8570  0FB8  0832               	movf	___ftmul@f2+1,w
  8571  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8572  0FBA  0833               	movf	___ftmul@f2+2,w
  8573  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8574  0FBC                     l5895:	
  8575  0FBC  3001               	movlw	1
  8576  0FBD                     u4695:	
  8577  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8578  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8579  0FBF  0CAE               	rrf	___ftmul@f1,f
  8580  0FC0  0B89               	decfsz	9,f
  8581  0FC1  2FBD               	goto	u4695
  8582  0FC2  3001               	movlw	1
  8583  0FC3                     u4705:	
  8584  0FC3  35B1               	lslf	___ftmul@f2,f
  8585  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8586  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8587  0FC6  0B89               	decfsz	9,f
  8588  0FC7  2FC3               	goto	u4705
  8589  0FC8  3001               	movlw	1
  8590  0FC9  02BC               	subwf	___ftmul@cntr,f
  8591  0FCA  1D03               	btfss	3,2
  8592  0FCB  2FB4               	goto	l5891
  8593  0FCC  3009               	movlw	9
  8594  0FCD  00B4               	movwf	??___ftmul
  8595  0FCE  0834               	movf	??___ftmul,w
  8596  0FCF  00BC               	movwf	___ftmul@cntr
  8597  0FD0                     l5903:	
  8598  0FD0  1C2E               	btfss	___ftmul@f1,0
  8599  0FD1  2FD8               	goto	l5907
  8600  0FD2  0831               	movf	___ftmul@f2,w
  8601  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8602  0FD4  0832               	movf	___ftmul@f2+1,w
  8603  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8604  0FD6  0833               	movf	___ftmul@f2+2,w
  8605  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8606  0FD8                     l5907:	
  8607  0FD8  3001               	movlw	1
  8608  0FD9                     u4735:	
  8609  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8610  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8611  0FDB  0CAE               	rrf	___ftmul@f1,f
  8612  0FDC  0B89               	decfsz	9,f
  8613  0FDD  2FD9               	goto	u4735
  8614  0FDE  3001               	movlw	1
  8615  0FDF                     u4745:	
  8616  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8617  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8618  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8619  0FE2  0B89               	decfsz	9,f
  8620  0FE3  2FDF               	goto	u4745
  8621  0FE4  3001               	movlw	1
  8622  0FE5  02BC               	subwf	___ftmul@cntr,f
  8623  0FE6  1D03               	btfss	3,2
  8624  0FE7  2FD0               	goto	l5903
  8625  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8626  0FE9  00A0               	movwf	___ftpack@arg
  8627  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8628  0FEB  00A1               	movwf	___ftpack@arg+1
  8629  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8630  0FED  00A2               	movwf	___ftpack@arg+2
  8631  0FEE  0838               	movf	___ftmul@exp,w
  8632  0FEF  00B4               	movwf	??___ftmul
  8633  0FF0  0834               	movf	??___ftmul,w
  8634  0FF1  00A3               	movwf	___ftpack@exp
  8635  0FF2  083D               	movf	___ftmul@sign,w
  8636  0FF3  00B5               	movwf	??___ftmul+1
  8637  0FF4  0835               	movf	??___ftmul+1,w
  8638  0FF5  00A4               	movwf	___ftpack@sign
  8639  0FF6  3189  211E         	fcall	___ftpack
  8640  0FF8  0020               	movlb	0	; select bank0
  8641  0FF9  0820               	movf	?___ftpack,w
  8642  0FFA  00AE               	movwf	?___ftmul
  8643  0FFB  0821               	movf	?___ftpack+1,w
  8644  0FFC  00AF               	movwf	?___ftmul+1
  8645  0FFD  0822               	movf	?___ftpack+2,w
  8646  0FFE  00B0               	movwf	?___ftmul+2
  8647  0FFF  0008               	return
  8648  1000                     __end_of___ftmul:	
  8649                           
  8650                           	psect	text36
  8651  0439                     __ptext36:	
  8652 ;; *************** function ___ftadd *****************
  8653 ;; Defined at:
  8654 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  f1              3   30[BANK0 ] float 
  8657 ;;  f2              3   33[BANK0 ] float 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  exp1            1   42[BANK0 ] unsigned char 
  8660 ;;  exp2            1   41[BANK0 ] unsigned char 
  8661 ;;  sign            1   40[BANK0 ] unsigned char 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;                  3   30[BANK0 ] float 
  8664 ;; Registers used:
  8665 ;;		wreg, status,2, status,0, pclath, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8671 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;Total ram usage:       13 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    6
  8678 ;; This function calls:
  8679 ;;		___ftpack
  8680 ;; This function is called by:
  8681 ;;		_getPercentValue
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           
  8686                           ;psect for function ___ftadd
  8687  0439                     ___ftadd:	
  8688                           
  8689                           ;incstack = 0
  8690                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8691  0439  0020               	movlb	0	; select bank0
  8692  043A  083E               	movf	___ftadd@f1,w
  8693  043B  00C4               	movwf	??___ftadd
  8694  043C  083F               	movf	___ftadd@f1+1,w
  8695  043D  00C5               	movwf	??___ftadd+1
  8696  043E  0840               	movf	___ftadd@f1+2,w
  8697  043F  00C6               	movwf	??___ftadd+2
  8698  0440  1003               	clrc
  8699  0441  0D45               	rlf	??___ftadd+1,w
  8700  0442  0D46               	rlf	??___ftadd+2,w
  8701  0443  00C7               	movwf	??___ftadd+3
  8702  0444  0847               	movf	??___ftadd+3,w
  8703  0445  00CA               	movwf	___ftadd@exp1
  8704  0446  0841               	movf	___ftadd@f2,w
  8705  0447  00C4               	movwf	??___ftadd
  8706  0448  0842               	movf	___ftadd@f2+1,w
  8707  0449  00C5               	movwf	??___ftadd+1
  8708  044A  0843               	movf	___ftadd@f2+2,w
  8709  044B  00C6               	movwf	??___ftadd+2
  8710  044C  1003               	clrc
  8711  044D  0D45               	rlf	??___ftadd+1,w
  8712  044E  0D46               	rlf	??___ftadd+2,w
  8713  044F  00C7               	movwf	??___ftadd+3
  8714  0450  0847               	movf	??___ftadd+3,w
  8715  0451  00C9               	movwf	___ftadd@exp2
  8716  0452  084A               	movf	___ftadd@exp1,w
  8717  0453  1903               	btfsc	3,2
  8718  0454  2C61               	goto	l5761
  8719  0455  0849               	movf	___ftadd@exp2,w
  8720  0456  024A               	subwf	___ftadd@exp1,w
  8721  0457  1803               	skipnc
  8722  0458  2C68               	goto	l5765
  8723  0459  034A               	decf	___ftadd@exp1,w
  8724  045A  3AFF               	xorlw	255
  8725  045B  0749               	addwf	___ftadd@exp2,w
  8726  045C  00C4               	movwf	??___ftadd
  8727  045D  3019               	movlw	25
  8728  045E  0244               	subwf	??___ftadd,w
  8729  045F  1C03               	skipc
  8730  0460  2C68               	goto	l5765
  8731  0461                     l5761:	
  8732  0461  0841               	movf	___ftadd@f2,w
  8733  0462  00BE               	movwf	?___ftadd
  8734  0463  0842               	movf	___ftadd@f2+1,w
  8735  0464  00BF               	movwf	?___ftadd+1
  8736  0465  0843               	movf	___ftadd@f2+2,w
  8737  0466  00C0               	movwf	?___ftadd+2
  8738  0467  0008               	return
  8739  0468                     l5765:	
  8740  0468  0849               	movf	___ftadd@exp2,w
  8741  0469  1903               	btfsc	3,2
  8742  046A  0008               	return
  8743  046B  084A               	movf	___ftadd@exp1,w
  8744  046C  0249               	subwf	___ftadd@exp2,w
  8745  046D  1803               	skipnc
  8746  046E  2C77               	goto	l5771
  8747  046F  0349               	decf	___ftadd@exp2,w
  8748  0470  3AFF               	xorlw	255
  8749  0471  074A               	addwf	___ftadd@exp1,w
  8750  0472  00C4               	movwf	??___ftadd
  8751  0473  3019               	movlw	25
  8752  0474  0244               	subwf	??___ftadd,w
  8753  0475  1803               	btfsc	3,0
  8754  0476  0008               	return
  8755  0477                     l5771:	
  8756  0477  3006               	movlw	6
  8757  0478  00C4               	movwf	??___ftadd
  8758  0479  0844               	movf	??___ftadd,w
  8759  047A  00C8               	movwf	___ftadd@sign
  8760  047B  1BC0               	btfsc	___ftadd@f1+2,7
  8761  047C  17C8               	bsf	___ftadd@sign,7
  8762  047D  1BC3               	btfsc	___ftadd@f2+2,7
  8763  047E  1748               	bsf	___ftadd@sign,6
  8764  047F  17BF               	bsf	___ftadd@f1+1,7
  8765  0480  30FF               	movlw	255
  8766  0481  05BE               	andwf	___ftadd@f1,f
  8767  0482  30FF               	movlw	255
  8768  0483  05BF               	andwf	___ftadd@f1+1,f
  8769  0484  3000               	movlw	0
  8770  0485  05C0               	andwf	___ftadd@f1+2,f
  8771  0486  17C2               	bsf	___ftadd@f2+1,7
  8772  0487  30FF               	movlw	255
  8773  0488  05C1               	andwf	___ftadd@f2,f
  8774  0489  30FF               	movlw	255
  8775  048A  05C2               	andwf	___ftadd@f2+1,f
  8776  048B  3000               	movlw	0
  8777  048C  05C3               	andwf	___ftadd@f2+2,f
  8778  048D  0849               	movf	___ftadd@exp2,w
  8779  048E  024A               	subwf	___ftadd@exp1,w
  8780  048F  1803               	skipnc
  8781  0490  2CB3               	goto	l5793
  8782  0491                     l5783:	
  8783  0491  3001               	movlw	1
  8784  0492                     u4425:	
  8785  0492  35C1               	lslf	___ftadd@f2,f
  8786  0493  0DC2               	rlf	___ftadd@f2+1,f
  8787  0494  0DC3               	rlf	___ftadd@f2+2,f
  8788  0495  0B89               	decfsz	9,f
  8789  0496  2C92               	goto	u4425
  8790  0497  3001               	movlw	1
  8791  0498  02C9               	subwf	___ftadd@exp2,f
  8792  0499  0849               	movf	___ftadd@exp2,w
  8793  049A  064A               	xorwf	___ftadd@exp1,w
  8794  049B  1903               	skipnz
  8795  049C  2CAE               	goto	l5791
  8796  049D  3001               	movlw	1
  8797  049E  02C8               	subwf	___ftadd@sign,f
  8798  049F  0848               	movf	___ftadd@sign,w
  8799  04A0  3907               	andlw	7
  8800  04A1  1903               	btfsc	3,2
  8801  04A2  2CAE               	goto	l5791
  8802  04A3  2C91               	goto	l5783
  8803  04A4                     l5789:	
  8804  04A4  3001               	movlw	1
  8805  04A5                     u4455:	
  8806  04A5  36C0               	lsrf	___ftadd@f1+2,f
  8807  04A6  0CBF               	rrf	___ftadd@f1+1,f
  8808  04A7  0CBE               	rrf	___ftadd@f1,f
  8809  04A8  0B89               	decfsz	9,f
  8810  04A9  2CA5               	goto	u4455
  8811  04AA  3001               	movlw	1
  8812  04AB  00C4               	movwf	??___ftadd
  8813  04AC  0844               	movf	??___ftadd,w
  8814  04AD  07CA               	addwf	___ftadd@exp1,f
  8815  04AE                     l5791:	
  8816  04AE  084A               	movf	___ftadd@exp1,w
  8817  04AF  0649               	xorwf	___ftadd@exp2,w
  8818  04B0  1903               	btfsc	3,2
  8819  04B1  2CD8               	goto	l2922
  8820  04B2  2CA4               	goto	l5789
  8821  04B3                     l5793:	
  8822  04B3  084A               	movf	___ftadd@exp1,w
  8823  04B4  0249               	subwf	___ftadd@exp2,w
  8824  04B5  1803               	skipnc
  8825  04B6  2CD8               	goto	l2922
  8826  04B7                     l5795:	
  8827  04B7  3001               	movlw	1
  8828  04B8                     u4485:	
  8829  04B8  35BE               	lslf	___ftadd@f1,f
  8830  04B9  0DBF               	rlf	___ftadd@f1+1,f
  8831  04BA  0DC0               	rlf	___ftadd@f1+2,f
  8832  04BB  0B89               	decfsz	9,f
  8833  04BC  2CB8               	goto	u4485
  8834  04BD  3001               	movlw	1
  8835  04BE  02CA               	subwf	___ftadd@exp1,f
  8836  04BF  0849               	movf	___ftadd@exp2,w
  8837  04C0  064A               	xorwf	___ftadd@exp1,w
  8838  04C1  1903               	skipnz
  8839  04C2  2CD4               	goto	l5803
  8840  04C3  3001               	movlw	1
  8841  04C4  02C8               	subwf	___ftadd@sign,f
  8842  04C5  0848               	movf	___ftadd@sign,w
  8843  04C6  3907               	andlw	7
  8844  04C7  1903               	btfsc	3,2
  8845  04C8  2CD4               	goto	l5803
  8846  04C9  2CB7               	goto	l5795
  8847  04CA                     l5801:	
  8848  04CA  3001               	movlw	1
  8849  04CB                     u4515:	
  8850  04CB  36C3               	lsrf	___ftadd@f2+2,f
  8851  04CC  0CC2               	rrf	___ftadd@f2+1,f
  8852  04CD  0CC1               	rrf	___ftadd@f2,f
  8853  04CE  0B89               	decfsz	9,f
  8854  04CF  2CCB               	goto	u4515
  8855  04D0  3001               	movlw	1
  8856  04D1  00C4               	movwf	??___ftadd
  8857  04D2  0844               	movf	??___ftadd,w
  8858  04D3  07C9               	addwf	___ftadd@exp2,f
  8859  04D4                     l5803:	
  8860  04D4  084A               	movf	___ftadd@exp1,w
  8861  04D5  0649               	xorwf	___ftadd@exp2,w
  8862  04D6  1D03               	skipz
  8863  04D7  2CCA               	goto	l5801
  8864  04D8                     l2922:	
  8865  04D8  1FC8               	btfss	___ftadd@sign,7
  8866  04D9  2CEA               	goto	l5807
  8867  04DA  30FF               	movlw	255
  8868  04DB  06BE               	xorwf	___ftadd@f1,f
  8869  04DC  30FF               	movlw	255
  8870  04DD  06BF               	xorwf	___ftadd@f1+1,f
  8871  04DE  30FF               	movlw	255
  8872  04DF  06C0               	xorwf	___ftadd@f1+2,f
  8873  04E0  3001               	movlw	1
  8874  04E1  07BE               	addwf	___ftadd@f1,f
  8875  04E2  3000               	movlw	0
  8876  04E3  1803               	skipnc
  8877  04E4  3001               	movlw	1
  8878  04E5  07BF               	addwf	___ftadd@f1+1,f
  8879  04E6  3000               	movlw	0
  8880  04E7  1803               	skipnc
  8881  04E8  3001               	movlw	1
  8882  04E9  07C0               	addwf	___ftadd@f1+2,f
  8883  04EA                     l5807:	
  8884  04EA  1F48               	btfss	___ftadd@sign,6
  8885  04EB  2CFC               	goto	l5811
  8886  04EC  30FF               	movlw	255
  8887  04ED  06C1               	xorwf	___ftadd@f2,f
  8888  04EE  30FF               	movlw	255
  8889  04EF  06C2               	xorwf	___ftadd@f2+1,f
  8890  04F0  30FF               	movlw	255
  8891  04F1  06C3               	xorwf	___ftadd@f2+2,f
  8892  04F2  3001               	movlw	1
  8893  04F3  07C1               	addwf	___ftadd@f2,f
  8894  04F4  3000               	movlw	0
  8895  04F5  1803               	skipnc
  8896  04F6  3001               	movlw	1
  8897  04F7  07C2               	addwf	___ftadd@f2+1,f
  8898  04F8  3000               	movlw	0
  8899  04F9  1803               	skipnc
  8900  04FA  3001               	movlw	1
  8901  04FB  07C3               	addwf	___ftadd@f2+2,f
  8902  04FC                     l5811:	
  8903  04FC  01C8               	clrf	___ftadd@sign
  8904  04FD  083E               	movf	___ftadd@f1,w
  8905  04FE  07C1               	addwf	___ftadd@f2,f
  8906  04FF  083F               	movf	___ftadd@f1+1,w
  8907  0500  3DC2               	addwfc	___ftadd@f2+1,f
  8908  0501  0840               	movf	___ftadd@f1+2,w
  8909  0502  3DC3               	addwfc	___ftadd@f2+2,f
  8910  0503  1FC3               	btfss	___ftadd@f2+2,7
  8911  0504  2D17               	goto	l5821
  8912  0505  30FF               	movlw	255
  8913  0506  06C1               	xorwf	___ftadd@f2,f
  8914  0507  30FF               	movlw	255
  8915  0508  06C2               	xorwf	___ftadd@f2+1,f
  8916  0509  30FF               	movlw	255
  8917  050A  06C3               	xorwf	___ftadd@f2+2,f
  8918  050B  3001               	movlw	1
  8919  050C  07C1               	addwf	___ftadd@f2,f
  8920  050D  3000               	movlw	0
  8921  050E  1803               	skipnc
  8922  050F  3001               	movlw	1
  8923  0510  07C2               	addwf	___ftadd@f2+1,f
  8924  0511  3000               	movlw	0
  8925  0512  1803               	skipnc
  8926  0513  3001               	movlw	1
  8927  0514  07C3               	addwf	___ftadd@f2+2,f
  8928  0515  01C8               	clrf	___ftadd@sign
  8929  0516  0AC8               	incf	___ftadd@sign,f
  8930  0517                     l5821:	
  8931  0517  0841               	movf	___ftadd@f2,w
  8932  0518  00A0               	movwf	___ftpack@arg
  8933  0519  0842               	movf	___ftadd@f2+1,w
  8934  051A  00A1               	movwf	___ftpack@arg+1
  8935  051B  0843               	movf	___ftadd@f2+2,w
  8936  051C  00A2               	movwf	___ftpack@arg+2
  8937  051D  084A               	movf	___ftadd@exp1,w
  8938  051E  00C4               	movwf	??___ftadd
  8939  051F  0844               	movf	??___ftadd,w
  8940  0520  00A3               	movwf	___ftpack@exp
  8941  0521  0848               	movf	___ftadd@sign,w
  8942  0522  00C5               	movwf	??___ftadd+1
  8943  0523  0845               	movf	??___ftadd+1,w
  8944  0524  00A4               	movwf	___ftpack@sign
  8945  0525  3189  211E         	fcall	___ftpack
  8946  0527  0020               	movlb	0	; select bank0
  8947  0528  0820               	movf	?___ftpack,w
  8948  0529  00BE               	movwf	?___ftadd
  8949  052A  0821               	movf	?___ftpack+1,w
  8950  052B  00BF               	movwf	?___ftadd+1
  8951  052C  0822               	movf	?___ftpack+2,w
  8952  052D  00C0               	movwf	?___ftadd+2
  8953  052E  0008               	return
  8954  052F                     __end_of___ftadd:	
  8955                           
  8956                           	psect	text37
  8957  1D11                     __ptext37:	
  8958 ;; *************** function _setMemory_Modify *****************
  8959 ;; Defined at:
  8960 ;;		line 1000 in file "../src/MCU_B1.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  command         1    wreg     unsigned char 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  command         1    1[BANK0 ] unsigned char 
  8965 ;; Return value:  Size  Location     Type
  8966 ;;		None               void
  8967 ;; Registers used:
  8968 ;;		wreg, status,2, status,0
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;Total ram usage:        2 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    5
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_setLog_Code
  8985 ;;		_setRFSW_AdjControl
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           
  8990                           ;psect for function _setMemory_Modify
  8991  1D11                     _setMemory_Modify:	
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8995                           ;setMemory_Modify@command stored from wreg
  8996  1D11  0020               	movlb	0	; select bank0
  8997  1D12  00A1               	movwf	setMemory_Modify@command
  8998                           
  8999                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  9000  1D13  0821               	movf	setMemory_Modify@command,w
  9001  1D14  3A01               	xorlw	1
  9002  1D15  3000               	movlw	0
  9003  1D16  1903               	skipnz
  9004  1D17  3001               	movlw	1
  9005  1D18  00A0               	movwf	??_setMemory_Modify
  9006  1D19  0024               	movlb	4	; select bank4
  9007  1D1A  0844               	movf	(_Memory^(0+512)+36),w
  9008  1D1B  0020               	movlb	0	; select bank0
  9009  1D1C  0620               	xorwf	??_setMemory_Modify,w
  9010  1D1D  39FE               	andlw	-2
  9011  1D1E  0620               	xorwf	??_setMemory_Modify,w
  9012  1D1F  0024               	movlb	4	; select bank4
  9013  1D20  00C4               	movwf	(_Memory^(0+512)+36)
  9014                           
  9015                           ;MCU_B1.c: 1002: Memory.Time = 0;
  9016  1D21  01C2               	clrf	(_Memory^(0+512)+34)
  9017  1D22  01C3               	clrf	((_Memory+1)^(0+512)+34)
  9018  1D23  0008               	return
  9019  1D24                     __end_of_setMemory_Modify:	
  9020                           
  9021                           	psect	text38
  9022  1CA5                     __ptext38:	
  9023 ;; *************** function _getRF_KeyStatus *****************
  9024 ;; Defined at:
  9025 ;;		line 187 in file "../src/RF_Control_B1.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;		None
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  key             1    1[BANK0 ] unsigned char 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      unsigned char 
  9032 ;; Registers used:
  9033 ;;		wreg, status,2
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;Total ram usage:        3 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    5
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_setRF_Main
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _getRF_KeyStatus
  9055  1CA5                     _getRF_KeyStatus:	
  9056                           
  9057                           ;RF_Control_B1.c: 188: char key = 0;
  9058                           
  9059                           ;incstack = 0
  9060                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  9061  1CA5  0020               	movlb	0	; select bank0
  9062  1CA6  01A1               	clrf	getRF_KeyStatus@key
  9063                           
  9064                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  9065  1CA7  01A2               	clrf	_getRF_KeyStatus$5253
  9066  1CA8  0AA2               	incf	_getRF_KeyStatus$5253,f
  9067  1CA9  1F0C               	btfss	12,6	;volatile
  9068  1CAA  1A0C               	btfsc	12,4	;volatile
  9069  1CAB  2CB0               	goto	l6909
  9070  1CAC  1C0C               	btfss	12,0	;volatile
  9071  1CAD  188D               	btfsc	13,1	;volatile
  9072  1CAE  2CB0               	goto	l6909
  9073  1CAF  01A2               	clrf	_getRF_KeyStatus$5253
  9074  1CB0                     l6909:	
  9075  1CB0  0822               	movf	_getRF_KeyStatus$5253,w
  9076  1CB1  00A0               	movwf	??_getRF_KeyStatus
  9077  1CB2  0820               	movf	??_getRF_KeyStatus,w
  9078  1CB3  00A1               	movwf	getRF_KeyStatus@key
  9079                           
  9080                           ;RF_Control_B1.c: 200: return key;
  9081  1CB4  0821               	movf	getRF_KeyStatus@key,w
  9082  1CB5  0008               	return
  9083  1CB6                     __end_of_getRF_KeyStatus:	
  9084                           
  9085                           	psect	text39
  9086  1C94                     __ptext39:	
  9087 ;; *************** function _getBuz_GO *****************
  9088 ;; Defined at:
  9089 ;;		line 82 in file "../src/Buzzer_B1.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;		None
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  i               2    4[BANK0 ] int 
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  2    0[BANK0 ] int 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        6 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    5
  9110 ;; This function calls:
  9111 ;;		Nothing
  9112 ;; This function is called by:
  9113 ;;		_setRF_Main
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           
  9118                           ;psect for function _getBuz_GO
  9119  1C94                     _getBuz_GO:	
  9120                           
  9121                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9122                           
  9123                           ;incstack = 0
  9124                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9125  1C94  0021               	movlb	1	; select bank1
  9126  1C95  0C30               	rrf	_Buz1^(0+128),w
  9127  1C96  3901               	andlw	1
  9128  1C97  0020               	movlb	0	; select bank0
  9129  1C98  00A2               	movwf	??_getBuz_GO
  9130  1C99  01A3               	clrf	??_getBuz_GO+1
  9131  1C9A  0822               	movf	??_getBuz_GO,w
  9132  1C9B  00A4               	movwf	getBuz_GO@i
  9133  1C9C  0823               	movf	??_getBuz_GO+1,w
  9134  1C9D  00A5               	movwf	getBuz_GO@i+1
  9135                           
  9136                           ;Buzzer_B1.c: 84: return i;
  9137  1C9E  0825               	movf	getBuz_GO@i+1,w
  9138  1C9F  01A1               	clrf	?_getBuz_GO+1
  9139  1CA0  07A1               	addwf	?_getBuz_GO+1,f
  9140  1CA1  0824               	movf	getBuz_GO@i,w
  9141  1CA2  01A0               	clrf	?_getBuz_GO
  9142  1CA3  07A0               	addwf	?_getBuz_GO,f
  9143  1CA4  0008               	return
  9144  1CA5                     __end_of_getBuz_GO:	
  9145                           
  9146                           	psect	text40
  9147  0A42                     __ptext40:	
  9148 ;; *************** function _CC2500_TxData *****************
  9149 ;; Defined at:
  9150 ;;		line 32 in file "../src/CC2500_B1.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9155 ;; Return value:  Size  Location     Type
  9156 ;;		None               void
  9157 ;; Registers used:
  9158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;Total ram usage:        2 bytes
  9169 ;; Hardware stack levels used:    1
  9170 ;; Hardware stack levels required when called:    7
  9171 ;; This function calls:
  9172 ;;		_CC2500_WriteByte
  9173 ;;		_CC2500_WriteCommand
  9174 ;;		_Timeout_Counter
  9175 ;;		_set_TimeoutCleared
  9176 ;; This function is called by:
  9177 ;;		_setRF_Main
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           
  9182                           ;psect for function _CC2500_TxData
  9183  0A42                     _CC2500_TxData:	
  9184                           
  9185                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9186                           ;CC2500_B1.c: 35: RC4 = 0;
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9190  0A42  0020               	movlb	0	; select bank0
  9191  0A43  120E               	bcf	14,4	;volatile
  9192                           
  9193                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9194  0A44  307F               	movlw	127
  9195  0A45  00A4               	movwf	??_CC2500_TxData
  9196  0A46  0824               	movf	??_CC2500_TxData,w
  9197  0A47  0021               	movlb	1	; select bank1
  9198  0A48  00CE               	movwf	_SPI0Buffer^(0+128)
  9199                           
  9200                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9201  0A49  2A4D               	goto	l6539
  9202  0A4A                     l6537:	
  9203                           
  9204                           ;CC2500_B1.c: 38: Timeout_Counter();
  9205  0A4A  319D  259A  318A   	fcall	_Timeout_Counter
  9206  0A4D                     l6539:	
  9207  0A4D  0020               	movlb	0	; select bank0
  9208  0A4E  1D0E               	btfss	14,2	;volatile
  9209  0A4F  2A53               	goto	l6543
  9210  0A50  0021               	movlb	1	; select bank1
  9211  0A51  1D2D               	btfss	(_myMain^(0+128)+13),2
  9212  0A52  2A4A               	goto	l6537
  9213  0A53                     l6543:	
  9214                           
  9215                           ;CC2500_B1.c: 39: };
  9216                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9217  0A53  319B  235D  318A   	fcall	_set_TimeoutCleared
  9218                           
  9219                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9220  0A56  319E  261B  318A   	fcall	_CC2500_WriteByte
  9221                           
  9222                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9223  0A59  0021               	movlb	1	; select bank1
  9224  0A5A  0850               	movf	_Tx_Length^(0+128),w
  9225  0A5B  0020               	movlb	0	; select bank0
  9226  0A5C  00A4               	movwf	??_CC2500_TxData
  9227  0A5D  0824               	movf	??_CC2500_TxData,w
  9228  0A5E  0021               	movlb	1	; select bank1
  9229  0A5F  00CE               	movwf	_SPI0Buffer^(0+128)
  9230                           
  9231                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9232  0A60  319E  261B  318A   	fcall	_CC2500_WriteByte
  9233                           
  9234                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9235  0A63  0020               	movlb	0	; select bank0
  9236  0A64  01A5               	clrf	CC2500_TxData@loop_e
  9237  0A65                     l6557:	
  9238  0A65  0021               	movlb	1	; select bank1
  9239  0A66  0850               	movf	_Tx_Length^(0+128),w
  9240  0A67  0020               	movlb	0	; select bank0
  9241  0A68  0225               	subwf	CC2500_TxData@loop_e,w
  9242  0A69  1803               	btfsc	3,0
  9243  0A6A  2A7E               	goto	l255
  9244                           
  9245                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9246  0A6B  0825               	movf	CC2500_TxData@loop_e,w
  9247  0A6C  3EA0               	addlw	_RF_Data& (0+255)
  9248  0A6D  0086               	movwf	6
  9249  0A6E  3001               	movlw	1	; select bank3/4
  9250  0A6F  0087               	movwf	7
  9251  0A70  0801               	movf	1,w
  9252  0A71  00A4               	movwf	??_CC2500_TxData
  9253  0A72  0824               	movf	??_CC2500_TxData,w
  9254  0A73  0021               	movlb	1	; select bank1
  9255  0A74  00CE               	movwf	_SPI0Buffer^(0+128)
  9256                           
  9257                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9258  0A75  319E  261B  318A   	fcall	_CC2500_WriteByte
  9259  0A78  3001               	movlw	1
  9260  0A79  0020               	movlb	0	; select bank0
  9261  0A7A  00A4               	movwf	??_CC2500_TxData
  9262  0A7B  0824               	movf	??_CC2500_TxData,w
  9263  0A7C  07A5               	addwf	CC2500_TxData@loop_e,f
  9264  0A7D  2A65               	goto	l6557
  9265  0A7E                     l255:	
  9266                           
  9267                           ;CC2500_B1.c: 48: }
  9268                           ;CC2500_B1.c: 49: RC4 = 1;
  9269  0A7E  160E               	bsf	14,4	;volatile
  9270                           
  9271                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9272  0A7F  3035               	movlw	53
  9273  0A80  319E  264D  318A   	fcall	_CC2500_WriteCommand
  9274                           
  9275                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9276  0A83  2A87               	goto	l6563
  9277  0A84                     l6561:	
  9278                           
  9279                           ;CC2500_B1.c: 52: Timeout_Counter();
  9280  0A84  319D  259A  318A   	fcall	_Timeout_Counter
  9281  0A87                     l6563:	
  9282  0A87  0020               	movlb	0	; select bank0
  9283  0A88  180D               	btfsc	13,0	;volatile
  9284  0A89  2A8D               	goto	l6567
  9285  0A8A  0021               	movlb	1	; select bank1
  9286  0A8B  1D2D               	btfss	(_myMain^(0+128)+13),2
  9287  0A8C  2A84               	goto	l6561
  9288  0A8D                     l6567:	
  9289                           
  9290                           ;CC2500_B1.c: 53: };
  9291                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9292  0A8D  319B  235D  318A   	fcall	_set_TimeoutCleared
  9293                           
  9294                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9295  0A90  2A94               	goto	l6571
  9296  0A91                     l6569:	
  9297                           
  9298                           ;CC2500_B1.c: 57: Timeout_Counter();
  9299  0A91  319D  259A  318A   	fcall	_Timeout_Counter
  9300  0A94                     l6571:	
  9301  0A94  0020               	movlb	0	; select bank0
  9302  0A95  1C0D               	btfss	13,0	;volatile
  9303  0A96  2A9A               	goto	l6575
  9304  0A97  0021               	movlb	1	; select bank1
  9305  0A98  1D2D               	btfss	(_myMain^(0+128)+13),2
  9306  0A99  2A91               	goto	l6569
  9307  0A9A                     l6575:	
  9308                           
  9309                           ;CC2500_B1.c: 58: };
  9310                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9311  0A9A  319B  235D  318A   	fcall	_set_TimeoutCleared
  9312                           
  9313                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9314  0A9D  3036               	movlw	54
  9315  0A9E  319E  264D  318A   	fcall	_CC2500_WriteCommand
  9316                           
  9317                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9318  0AA1  303B               	movlw	59
  9319  0AA2  319E  264D  318A   	fcall	_CC2500_WriteCommand
  9320                           
  9321                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9322  0AA5  303A               	movlw	58
  9323  0AA6  319E  264D         	fcall	_CC2500_WriteCommand
  9324                           
  9325                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9326  0AA8  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9327  0AA9  0008               	return
  9328  0AAA                     __end_of_CC2500_TxData:	
  9329                           
  9330                           	psect	text41
  9331  0BF9                     __ptext41:	
  9332 ;; *************** function _CC2500_RxData *****************
  9333 ;; Defined at:
  9334 ;;		line 70 in file "../src/CC2500_B1.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;		None
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:        2 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    7
  9355 ;; This function calls:
  9356 ;;		_CC2500_ReadByte
  9357 ;;		_CC2500_ReadStatus
  9358 ;;		_CC2500_WriteByte
  9359 ;;		_Timeout_Counter
  9360 ;;		_set_TimeoutCleared
  9361 ;; This function is called by:
  9362 ;;		_setRF_Main
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _CC2500_RxData
  9368  0BF9                     _CC2500_RxData:	
  9369                           
  9370                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9371                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9375  0BF9  0020               	movlb	0	; select bank0
  9376  0BFA  180D               	btfsc	13,0	;volatile
  9377  0BFB  2C00               	goto	l6591
  9378  0BFC  2C09               	goto	l6597
  9379  0BFD                     l6589:	
  9380                           ;CC2500_B1.c: 76: {
  9381                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9382                           
  9383                           
  9384                           ;CC2500_B1.c: 78: Timeout_Counter();
  9385  0BFD  319D  259A  318B   	fcall	_Timeout_Counter
  9386  0C00                     l6591:	
  9387  0C00  0020               	movlb	0	; select bank0
  9388  0C01  1C0D               	btfss	13,0	;volatile
  9389  0C02  2C06               	goto	l6595
  9390  0C03  0021               	movlb	1	; select bank1
  9391  0C04  1D2D               	btfss	(_myMain^(0+128)+13),2
  9392  0C05  2BFD               	goto	l6589
  9393  0C06                     l6595:	
  9394                           
  9395                           ;CC2500_B1.c: 79: };
  9396                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9397  0C06  319B  235D  318B   	fcall	_set_TimeoutCleared
  9398  0C09                     l6597:	
  9399                           
  9400                           ;CC2500_B1.c: 81: }
  9401                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9402  0C09  303B               	movlw	59
  9403  0C0A  3190  2083  318B   	fcall	_CC2500_ReadStatus
  9404                           
  9405                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9406  0C0D  0021               	movlb	1	; select bank1
  9407  0C0E  0853               	movf	_s_data^(0+128),w
  9408  0C0F  1903               	btfsc	3,2
  9409  0C10  0008               	return
  9410                           
  9411                           ;CC2500_B1.c: 86: RC4 = 0;
  9412  0C11  0020               	movlb	0	; select bank0
  9413  0C12  120E               	bcf	14,4	;volatile
  9414                           
  9415                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9416  0C13  30FF               	movlw	255
  9417  0C14  00A4               	movwf	??_CC2500_RxData
  9418  0C15  0824               	movf	??_CC2500_RxData,w
  9419  0C16  0021               	movlb	1	; select bank1
  9420  0C17  00CE               	movwf	_SPI0Buffer^(0+128)
  9421                           
  9422                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9423  0C18  2C1F               	goto	l6607
  9424  0C19                     l6609:	
  9425  0C19  0021               	movlb	1	; select bank1
  9426  0C1A  192D               	btfsc	(_myMain^(0+128)+13),2
  9427  0C1B  2C22               	goto	l280
  9428                           
  9429                           ;CC2500_B1.c: 89: Timeout_Counter();
  9430  0C1C  319D  259A  318B   	fcall	_Timeout_Counter
  9431  0C1F                     l6607:	
  9432  0C1F  0020               	movlb	0	; select bank0
  9433  0C20  190E               	btfsc	14,2	;volatile
  9434  0C21  2C19               	goto	l6609
  9435  0C22                     l280:	
  9436                           
  9437                           ;CC2500_B1.c: 90: };
  9438                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9439  0C22  0021               	movlb	1	; select bank1
  9440  0C23  192D               	btfsc	(_myMain^(0+128)+13),2
  9441  0C24  2C69               	goto	l281
  9442                           
  9443                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9444  0C25  319E  261B  318B   	fcall	_CC2500_WriteByte
  9445                           
  9446                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9447  0C28  3190  2066  318B   	fcall	_CC2500_ReadByte
  9448                           
  9449                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9450  0C2B  0021               	movlb	1	; select bank1
  9451  0C2C  084E               	movf	_SPI0Buffer^(0+128),w
  9452  0C2D  0020               	movlb	0	; select bank0
  9453  0C2E  00A4               	movwf	??_CC2500_RxData
  9454  0C2F  0824               	movf	??_CC2500_RxData,w
  9455  0C30  0021               	movlb	1	; select bank1
  9456  0C31  00CD               	movwf	_Rx_Length^(0+128)
  9457                           
  9458                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9459  0C32  0020               	movlb	0	; select bank0
  9460  0C33  01A5               	clrf	CC2500_RxData@loop_f
  9461  0C34                     l6623:	
  9462  0C34  0021               	movlb	1	; select bank1
  9463  0C35  084D               	movf	_Rx_Length^(0+128),w
  9464  0C36  0020               	movlb	0	; select bank0
  9465  0C37  0225               	subwf	CC2500_RxData@loop_f,w
  9466  0C38  1803               	btfsc	3,0
  9467  0C39  2C4D               	goto	l6625
  9468                           
  9469                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9470  0C3A  3190  2066  318B   	fcall	_CC2500_ReadByte
  9471                           
  9472                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9473  0C3D  0021               	movlb	1	; select bank1
  9474  0C3E  084E               	movf	_SPI0Buffer^(0+128),w
  9475  0C3F  0020               	movlb	0	; select bank0
  9476  0C40  00A4               	movwf	??_CC2500_RxData
  9477  0C41  0825               	movf	CC2500_RxData@loop_f,w
  9478  0C42  3EA0               	addlw	_RF_Data& (0+255)
  9479  0C43  0086               	movwf	6
  9480  0C44  3001               	movlw	1	; select bank3/4
  9481  0C45  0087               	movwf	7
  9482  0C46  0824               	movf	??_CC2500_RxData,w
  9483  0C47  0081               	movwf	1
  9484  0C48  3001               	movlw	1
  9485  0C49  00A4               	movwf	??_CC2500_RxData
  9486  0C4A  0824               	movf	??_CC2500_RxData,w
  9487  0C4B  07A5               	addwf	CC2500_RxData@loop_f,f
  9488  0C4C  2C34               	goto	l6623
  9489  0C4D                     l6625:	
  9490                           
  9491                           ;CC2500_B1.c: 99: }
  9492                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9493  0C4D  3190  2066  318B   	fcall	_CC2500_ReadByte
  9494                           
  9495                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9496  0C50  0021               	movlb	1	; select bank1
  9497  0C51  084E               	movf	_SPI0Buffer^(0+128),w
  9498  0C52  0020               	movlb	0	; select bank0
  9499  0C53  00A4               	movwf	??_CC2500_RxData
  9500  0C54  0824               	movf	??_CC2500_RxData,w
  9501  0C55  0021               	movlb	1	; select bank1
  9502  0C56  00CC               	movwf	_RSSI^(0+128)
  9503                           
  9504                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9505  0C57  3190  2066  318B   	fcall	_CC2500_ReadByte
  9506                           
  9507                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9508  0C5A  0021               	movlb	1	; select bank1
  9509  0C5B  084E               	movf	_SPI0Buffer^(0+128),w
  9510  0C5C  0020               	movlb	0	; select bank0
  9511  0C5D  00A4               	movwf	??_CC2500_RxData
  9512  0C5E  0824               	movf	??_CC2500_RxData,w
  9513  0C5F  0021               	movlb	1	; select bank1
  9514  0C60  00C8               	movwf	_CRC^(0+128)
  9515                           
  9516                           ;CC2500_B1.c: 104: RC4 = 1;
  9517  0C61  0020               	movlb	0	; select bank0
  9518  0C62  160E               	bsf	14,4	;volatile
  9519                           
  9520                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9521  0C63  0021               	movlb	1	; select bank1
  9522  0C64  1BC8               	btfsc	_CRC^(0+128),7
  9523                           
  9524                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9525  0C65  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9526                           
  9527                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9528  0C66  11BC               	bcf	_RF1^(0+128),3
  9529                           
  9530                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9531  0C67  14BC               	bsf	_RF1^(0+128),1
  9532                           
  9533                           ;CC2500_B1.c: 110: } else {
  9534  0C68  2C6B               	goto	l6637
  9535  0C69                     l281:	
  9536                           
  9537                           ;CC2500_B1.c: 111: RC4 = 1;
  9538  0C69  0020               	movlb	0	; select bank0
  9539  0C6A  160E               	bsf	14,4	;volatile
  9540  0C6B                     l6637:	
  9541                           
  9542                           ;CC2500_B1.c: 112: }
  9543                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9544  0C6B  319B  235D         	fcall	_set_TimeoutCleared
  9545  0C6D  0021               	movlb	1	; select bank1
  9546  0C6E  0008               	return
  9547  0C6F                     __end_of_CC2500_RxData:	
  9548                           
  9549                           	psect	text42
  9550  1083                     __ptext42:	
  9551 ;; *************** function _CC2500_ReadStatus *****************
  9552 ;; Defined at:
  9553 ;;		line 304 in file "../src/CC2500_B1.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  status_addr     1    wreg     unsigned char 
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9558 ;; Return value:  Size  Location     Type
  9559 ;;		None               void
  9560 ;; Registers used:
  9561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9562 ;; Tracked objects:
  9563 ;;		On entry : 0/0
  9564 ;;		On exit  : 0/0
  9565 ;;		Unchanged: 0/0
  9566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;Total ram usage:        2 bytes
  9572 ;; Hardware stack levels used:    1
  9573 ;; Hardware stack levels required when called:    6
  9574 ;; This function calls:
  9575 ;;		_CC2500_ReadByte
  9576 ;;		_CC2500_WriteByte
  9577 ;;		_Timeout_Counter
  9578 ;;		_set_TimeoutCleared
  9579 ;; This function is called by:
  9580 ;;		_CC2500_RxData
  9581 ;;		_setRF_Main
  9582 ;; This function uses a non-reentrant model
  9583 ;;
  9584                           
  9585                           
  9586                           ;psect for function _CC2500_ReadStatus
  9587  1083                     _CC2500_ReadStatus:	
  9588                           
  9589                           ;incstack = 0
  9590                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9591                           ;CC2500_ReadStatus@status_addr stored from wreg
  9592  1083  0020               	movlb	0	; select bank0
  9593  1084  00A3               	movwf	CC2500_ReadStatus@status_addr
  9594                           
  9595                           ;CC2500_B1.c: 305: RC4 = 0;
  9596  1085  120E               	bcf	14,4	;volatile
  9597                           
  9598                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9599  1086  0823               	movf	CC2500_ReadStatus@status_addr,w
  9600  1087  3EC0               	addlw	192
  9601  1088  00A2               	movwf	??_CC2500_ReadStatus
  9602  1089  0822               	movf	??_CC2500_ReadStatus,w
  9603  108A  0021               	movlb	1	; select bank1
  9604  108B  00CE               	movwf	_SPI0Buffer^(0+128)
  9605                           
  9606                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9607  108C  2890               	goto	l6375
  9608  108D                     l6373:	
  9609                           
  9610                           ;CC2500_B1.c: 309: Timeout_Counter();
  9611  108D  319D  259A  3190   	fcall	_Timeout_Counter
  9612  1090                     l6375:	
  9613  1090  0020               	movlb	0	; select bank0
  9614  1091  1D0E               	btfss	14,2	;volatile
  9615  1092  2896               	goto	l6379
  9616  1093  0021               	movlb	1	; select bank1
  9617  1094  1D2D               	btfss	(_myMain^(0+128)+13),2
  9618  1095  288D               	goto	l6373
  9619  1096                     l6379:	
  9620                           
  9621                           ;CC2500_B1.c: 310: };
  9622                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9623  1096  319B  235D  3190   	fcall	_set_TimeoutCleared
  9624                           
  9625                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9626  1099  319E  261B  3190   	fcall	_CC2500_WriteByte
  9627                           
  9628                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9629  109C  3190  2066         	fcall	_CC2500_ReadByte
  9630                           
  9631                           ;CC2500_B1.c: 315: RC4 = 1;
  9632  109E  0020               	movlb	0	; select bank0
  9633  109F  160E               	bsf	14,4	;volatile
  9634                           
  9635                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9636  10A0  0021               	movlb	1	; select bank1
  9637  10A1  084E               	movf	_SPI0Buffer^(0+128),w
  9638  10A2  0020               	movlb	0	; select bank0
  9639  10A3  00A2               	movwf	??_CC2500_ReadStatus
  9640  10A4  0822               	movf	??_CC2500_ReadStatus,w
  9641  10A5  0021               	movlb	1	; select bank1
  9642  10A6  00D3               	movwf	_s_data^(0+128)
  9643  10A7  0008               	return
  9644  10A8                     __end_of_CC2500_ReadStatus:	
  9645                           
  9646                           	psect	text43
  9647  1066                     __ptext43:	
  9648 ;; *************** function _CC2500_ReadByte *****************
  9649 ;; Defined at:
  9650 ;;		line 238 in file "../src/CC2500_B1.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;		None
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;		None               void
  9657 ;; Registers used:
  9658 ;;		wreg, status,2, status,0
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        2 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    5
  9671 ;; This function calls:
  9672 ;;		Nothing
  9673 ;; This function is called by:
  9674 ;;		_CC2500_RxData
  9675 ;;		_CC2500_ReadStatus
  9676 ;;		_CC2500_ReadREG
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _CC2500_ReadByte
  9682  1066                     _CC2500_ReadByte:	
  9683                           
  9684                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9685                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9686                           
  9687                           ;incstack = 0
  9688                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9689  1066  0020               	movlb	0	; select bank0
  9690  1067  01A1               	clrf	CC2500_ReadByte@loop_b
  9691  1068                     L5:	
  9692  1068  3008               	movlw	8
  9693  1069  0221               	subwf	CC2500_ReadByte@loop_b,w
  9694  106A  1803               	btfsc	3,0
  9695  106B  0008               	return
  9696                           
  9697                           ;CC2500_B1.c: 241: RC1 = 1;
  9698  106C  148E               	bsf	14,1	;volatile
  9699                           
  9700                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9701  106D  1003               	clrc
  9702  106E  0021               	movlb	1	; select bank1
  9703  106F  0DCE               	rlf	_SPI0Buffer^(0+128),f
  9704                           
  9705                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9706  1070  0020               	movlb	0	; select bank0
  9707  1071  1D0E               	btfss	14,2	;volatile
  9708  1072  2876               	goto	l6305
  9709                           
  9710                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9711  1073  0021               	movlb	1	; select bank1
  9712  1074  144E               	bsf	_SPI0Buffer^(0+128),0
  9713  1075  287C               	goto	l6307
  9714  1076                     l6305:	
  9715                           
  9716                           ;CC2500_B1.c: 245: else
  9717                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9718  1076  30FE               	movlw	254
  9719  1077  0020               	movlb	0	; select bank0
  9720  1078  00A0               	movwf	??_CC2500_ReadByte
  9721  1079  0820               	movf	??_CC2500_ReadByte,w
  9722  107A  0021               	movlb	1	; select bank1
  9723  107B  05CE               	andwf	_SPI0Buffer^(0+128),f
  9724  107C                     l6307:	
  9725                           
  9726                           ;CC2500_B1.c: 247: RC1 = 0;
  9727  107C  0020               	movlb	0	; select bank0
  9728  107D  108E               	bcf	14,1	;volatile
  9729  107E  3001               	movlw	1
  9730  107F  00A0               	movwf	??_CC2500_ReadByte
  9731  1080  0820               	movf	??_CC2500_ReadByte,w
  9732  1081  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9733  1082  2868               	goto	L5
  9734  1083                     __end_of_CC2500_ReadByte:	
  9735                           
  9736                           	psect	text44
  9737  1B44                     __ptext44:	
  9738 ;; *************** function _RF_Initialization *****************
  9739 ;; Defined at:
  9740 ;;		line 9 in file "../src/RF_Control_B1.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;		None
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;		None
  9745 ;; Return value:  Size  Location     Type
  9746 ;;		None               void
  9747 ;; Registers used:
  9748 ;;		wreg, status,2, status,0, pclath, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;Total ram usage:        0 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    6
  9761 ;; This function calls:
  9762 ;;		_setRF_Initialization
  9763 ;; This function is called by:
  9764 ;;		_main
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _RF_Initialization
  9770  1B44                     _RF_Initialization:	
  9771                           
  9772                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9773                           
  9774                           ;incstack = 0
  9775                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9776  1B44  319B  23BE         	fcall	_setRF_Initialization
  9777  1B46  0008               	return
  9778  1B47                     __end_of_RF_Initialization:	
  9779                           
  9780                           	psect	text45
  9781  1BBE                     __ptext45:	
  9782 ;; *************** function _setRF_Initialization *****************
  9783 ;; Defined at:
  9784 ;;		line 43 in file "../src/RF_Control_B1.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;		None               void
  9791 ;; Registers used:
  9792 ;;		wreg
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;Total ram usage:        1 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    5
  9805 ;; This function calls:
  9806 ;;		Nothing
  9807 ;; This function is called by:
  9808 ;;		_RF_Initialization
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           
  9813                           ;psect for function _setRF_Initialization
  9814  1BBE                     _setRF_Initialization:	
  9815                           
  9816                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9817                           
  9818                           ;incstack = 0
  9819                           ; Regs used in _setRF_Initialization: [wreg]
  9820  1BBE  3015               	movlw	21
  9821  1BBF  0020               	movlb	0	; select bank0
  9822  1BC0  00A0               	movwf	??_setRF_Initialization
  9823  1BC1  0820               	movf	??_setRF_Initialization,w
  9824  1BC2  0021               	movlb	1	; select bank1
  9825  1BC3  00D0               	movwf	_Tx_Length^(0+128)
  9826                           
  9827                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9828  1BC4  300A               	movlw	10
  9829  1BC5  00C3               	movwf	(_RF1^(0+128)+7)
  9830  1BC6  3000               	movlw	0
  9831  1BC7  00C4               	movwf	(_RF1^(0+128)+8)
  9832  1BC8  0008               	return
  9833  1BC9                     __end_of_setRF_Initialization:	
  9834                           
  9835                           	psect	text46
  9836  1CDA                     __ptext46:	
  9837 ;; *************** function _Mcu_Initialization *****************
  9838 ;; Defined at:
  9839 ;;		line 30 in file "../src/MCU_B1.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;		None               void
  9846 ;; Registers used:
  9847 ;;		wreg, status,2, status,0, pclath, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;Total ram usage:        0 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    6
  9860 ;; This function calls:
  9861 ;;		_ADC_Set
  9862 ;;		_Fosc_Set
  9863 ;;		_IOC_Set
  9864 ;;		_IO_Set
  9865 ;;		_TMR1_Set
  9866 ;;		_WDT_Set
  9867 ;; This function is called by:
  9868 ;;		_main
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           
  9873                           ;psect for function _Mcu_Initialization
  9874  1CDA                     _Mcu_Initialization:	
  9875                           
  9876                           ;MCU_B1.c: 32: Fosc_Set();
  9877                           
  9878                           ;incstack = 0
  9879                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9880  1CDA  319B  2359  319C   	fcall	_Fosc_Set
  9881                           
  9882                           ;MCU_B1.c: 34: IO_Set();
  9883  1CDD  319E  2634  319C   	fcall	_IO_Set
  9884                           
  9885                           ;MCU_B1.c: 36: ;;
  9886                           ;MCU_B1.c: 38: TMR1_Set();
  9887  1CE0  319C  2411  319C   	fcall	_TMR1_Set
  9888                           
  9889                           ;MCU_B1.c: 40: ADC_Set();
  9890  1CE3  319B  2373  319C   	fcall	_ADC_Set
  9891                           
  9892                           ;MCU_B1.c: 42: ;;
  9893                           ;MCU_B1.c: 44: ;;
  9894                           ;MCU_B1.c: 46: IOC_Set();
  9895  1CE6  319C  2405  319C   	fcall	_IOC_Set
  9896                           
  9897                           ;MCU_B1.c: 48: ;;
  9898                           ;MCU_B1.c: 50: ;;
  9899                           ;MCU_B1.c: 52: WDT_Set();
  9900  1CE9  319C  241D         	fcall	_WDT_Set
  9901  1CEB  0008               	return
  9902  1CEC                     __end_of_Mcu_Initialization:	
  9903                           
  9904                           	psect	text47
  9905  1C1D                     __ptext47:	
  9906 ;; *************** function _WDT_Set *****************
  9907 ;; Defined at:
  9908 ;;		line 1019 in file "../src/MCU_B1.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        1 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    5
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_Mcu_Initialization
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _WDT_Set
  9938  1C1D                     _WDT_Set:	
  9939                           
  9940                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in _WDT_Set: [wreg]
  9944  1C1D  3017               	movlw	23
  9945  1C1E  0021               	movlb	1	; select bank1
  9946  1C1F  0097               	movwf	23	;volatile
  9947                           
  9948                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9949  1C20  0022               	movlb	2	; select bank2
  9950  1C21  1428               	bsf	_WDT^(0+256),0
  9951                           
  9952                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9953  1C22  300A               	movlw	10
  9954  1C23  0020               	movlb	0	; select bank0
  9955  1C24  00A0               	movwf	??_WDT_Set
  9956  1C25  0820               	movf	??_WDT_Set,w
  9957  1C26  0022               	movlb	2	; select bank2
  9958  1C27  00A9               	movwf	(_WDT^(0+256)+1)
  9959  1C28  0008               	return
  9960  1C29                     __end_of_WDT_Set:	
  9961                           
  9962                           	psect	text48
  9963  1C11                     __ptext48:	
  9964 ;; *************** function _TMR1_Set *****************
  9965 ;; Defined at:
  9966 ;;		line 199 in file "../src/MCU_B1.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;		None               void
  9973 ;; Registers used:
  9974 ;;		wreg
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;Total ram usage:        0 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    5
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		_Mcu_Initialization
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           
  9995                           ;psect for function _TMR1_Set
  9996  1C11                     _TMR1_Set:	
  9997                           
  9998                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9999                           
 10000                           ;incstack = 0
 10001                           ; Regs used in _TMR1_Set: [wreg]
 10002  1C11  3041               	movlw	65
 10003  1C12  0020               	movlb	0	; select bank0
 10004  1C13  0098               	movwf	24	;volatile
 10005                           
 10006                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10007  1C14  30FA               	movlw	250
 10008  1C15  0097               	movwf	23	;volatile
 10009                           
 10010                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10011  1C16  3038               	movlw	56
 10012  1C17  0096               	movwf	22	;volatile
 10013                           
 10014                           ;MCU_B1.c: 203: TMR1IE = 1;
 10015  1C18  0021               	movlb	1	; select bank1
 10016  1C19  1411               	bsf	17,0	;volatile
 10017                           
 10018                           ;MCU_B1.c: 204: PEIE = 1;
 10019  1C1A  170B               	bsf	11,6	;volatile
 10020                           
 10021                           ;MCU_B1.c: 205: GIE = 1;
 10022  1C1B  178B               	bsf	11,7	;volatile
 10023  1C1C  0008               	return
 10024  1C1D                     __end_of_TMR1_Set:	
 10025                           
 10026                           	psect	text49
 10027  1E34                     __ptext49:	
 10028 ;; *************** function _IO_Set *****************
 10029 ;; Defined at:
 10030 ;;		line 60 in file "../src/MCU_B1.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;		None
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;		None
 10035 ;; Return value:  Size  Location     Type
 10036 ;;		None               void
 10037 ;; Registers used:
 10038 ;;		wreg, status,2
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;Total ram usage:        0 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    5
 10051 ;; This function calls:
 10052 ;;		Nothing
 10053 ;; This function is called by:
 10054 ;;		_Mcu_Initialization
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function _IO_Set
 10060  1E34                     _IO_Set:	
 10061                           
 10062                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10063                           
 10064                           ;incstack = 0
 10065                           ; Regs used in _IO_Set: [wreg+status,2]
 10066  1E34  3077               	movlw	119
 10067  1E35  0021               	movlb	1	; select bank1
 10068  1E36  008C               	movwf	12	;volatile
 10069                           
 10070                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10071  1E37  3007               	movlw	7
 10072  1E38  008D               	movwf	13	;volatile
 10073                           
 10074                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10075  1E39  300C               	movlw	12
 10076  1E3A  008E               	movwf	14	;volatile
 10077                           
 10078                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10079  1E3B  0022               	movlb	2	; select bank2
 10080  1E3C  018C               	clrf	12	;volatile
 10081                           
 10082                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10083  1E3D  3002               	movlw	2
 10084  1E3E  008D               	movwf	13	;volatile
 10085                           
 10086                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10087  1E3F  018E               	clrf	14	;volatile
 10088                           
 10089                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10090  1E40  3022               	movlw	34
 10091  1E41  0023               	movlb	3	; select bank3
 10092  1E42  008C               	movwf	12	;volatile
 10093                           
 10094                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10095  1E43  018D               	clrf	13	;volatile
 10096                           
 10097                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10098  1E44  018E               	clrf	14	;volatile
 10099                           
 10100                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10101  1E45  3077               	movlw	119
 10102  1E46  0020               	movlb	0	; select bank0
 10103  1E47  008C               	movwf	12	;volatile
 10104                           
 10105                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10106  1E48  3007               	movlw	7
 10107  1E49  008D               	movwf	13	;volatile
 10108                           
 10109                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10110  1E4A  300C               	movlw	12
 10111  1E4B  008E               	movwf	14	;volatile
 10112  1E4C  0008               	return
 10113  1E4D                     __end_of_IO_Set:	
 10114                           
 10115                           	psect	text50
 10116  1C05                     __ptext50:	
 10117 ;; *************** function _IOC_Set *****************
 10118 ;; Defined at:
 10119 ;;		line 366 in file "../src/MCU_B1.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;		None
 10122 ;; Auto vars:     Size  Location     Type
 10123 ;;		None
 10124 ;; Return value:  Size  Location     Type
 10125 ;;		None               void
 10126 ;; Registers used:
 10127 ;;		wreg, status,2
 10128 ;; Tracked objects:
 10129 ;;		On entry : 0/0
 10130 ;;		On exit  : 0/0
 10131 ;;		Unchanged: 0/0
 10132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;Total ram usage:        0 bytes
 10138 ;; Hardware stack levels used:    1
 10139 ;; Hardware stack levels required when called:    5
 10140 ;; This function calls:
 10141 ;;		Nothing
 10142 ;; This function is called by:
 10143 ;;		_Mcu_Initialization
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           
 10148                           ;psect for function _IOC_Set
 10149  1C05                     _IOC_Set:	
 10150                           
 10151                           ;MCU_B1.c: 367: WPUB2 = 0;
 10152                           
 10153                           ;incstack = 0
 10154                           ; Regs used in _IOC_Set: [wreg+status,2]
 10155  1C05  0024               	movlb	4	; select bank4
 10156  1C06  110D               	bcf	13,2	;volatile
 10157                           
 10158                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
 10159  1C07  0027               	movlb	7	; select bank7
 10160  1C08  0194               	clrf	20	;volatile
 10161                           
 10162                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
 10163  1C09  3004               	movlw	4
 10164  1C0A  0095               	movwf	21	;volatile
 10165                           
 10166                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10167  1C0B  0196               	clrf	22	;volatile
 10168                           
 10169                           ;MCU_B1.c: 394: IOCIE = 1;
 10170  1C0C  158B               	bsf	11,3	;volatile
 10171                           
 10172                           ;MCU_B1.c: 395: IOCIF = 0;
 10173  1C0D  100B               	bcf	11,0	;volatile
 10174                           
 10175                           ;MCU_B1.c: 396: PEIE = 1;
 10176  1C0E  170B               	bsf	11,6	;volatile
 10177                           
 10178                           ;MCU_B1.c: 397: GIE = 1;
 10179  1C0F  178B               	bsf	11,7	;volatile
 10180  1C10  0008               	return
 10181  1C11                     __end_of_IOC_Set:	
 10182                           
 10183                           	psect	text51
 10184  1B59                     __ptext51:	
 10185 ;; *************** function _Fosc_Set *****************
 10186 ;; Defined at:
 10187 ;;		line 56 in file "../src/MCU_B1.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;		None
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;		None
 10192 ;; Return value:  Size  Location     Type
 10193 ;;		None               void
 10194 ;; Registers used:
 10195 ;;		wreg
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;Total ram usage:        0 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    5
 10208 ;; This function calls:
 10209 ;;		Nothing
 10210 ;; This function is called by:
 10211 ;;		_Mcu_Initialization
 10212 ;; This function uses a non-reentrant model
 10213 ;;
 10214                           
 10215                           
 10216                           ;psect for function _Fosc_Set
 10217  1B59                     _Fosc_Set:	
 10218                           
 10219                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10220                           
 10221                           ;incstack = 0
 10222                           ; Regs used in _Fosc_Set: [wreg]
 10223  1B59  3078               	movlw	120
 10224  1B5A  0021               	movlb	1	; select bank1
 10225  1B5B  0099               	movwf	25	;volatile
 10226  1B5C  0008               	return
 10227  1B5D                     __end_of_Fosc_Set:	
 10228                           
 10229                           	psect	text52
 10230  1B73                     __ptext52:	
 10231 ;; *************** function _ADC_Set *****************
 10232 ;; Defined at:
 10233 ;;		line 420 in file "../src/MCU_B1.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;		None
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;		None
 10238 ;; Return value:  Size  Location     Type
 10239 ;;		None               void
 10240 ;; Registers used:
 10241 ;;		wreg
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;Total ram usage:        0 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    5
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_Mcu_Initialization
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           
 10262                           ;psect for function _ADC_Set
 10263  1B73                     _ADC_Set:	
 10264                           
 10265                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10266                           
 10267                           ;incstack = 0
 10268                           ; Regs used in _ADC_Set: [wreg]
 10269  1B73  30F3               	movlw	243
 10270  1B74  0021               	movlb	1	; select bank1
 10271  1B75  009E               	movwf	30	;volatile
 10272                           
 10273                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10274  1B76  30C1               	movlw	193
 10275  1B77  0022               	movlb	2	; select bank2
 10276  1B78  0097               	movwf	23	;volatile
 10277  1B79  0008               	return
 10278  1B7A                     __end_of_ADC_Set:	
 10279                           
 10280                           	psect	text53
 10281  01B9                     __ptext53:	
 10282 ;; *************** function _Load_Main *****************
 10283 ;; Defined at:
 10284 ;;		line 39 in file "../src/OverLoad_B1.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  i               1   15[BANK0 ] unsigned char 
 10289 ;;  error           1   14[BANK0 ] unsigned char 
 10290 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10291 ;;  j               1   11[BANK0 ] unsigned char 
 10292 ;; Return value:  Size  Location     Type
 10293 ;;		None               void
 10294 ;; Registers used:
 10295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;Total ram usage:        7 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    8
 10308 ;; This function calls:
 10309 ;;		_getAll_DimmerLights_AdjGO
 10310 ;;		_getMain_All_Error_Status
 10311 ;;		_getMain_LightsStatus
 10312 ;;		_getMain_Lights_Count
 10313 ;;		_getMain_LoadOK
 10314 ;;		_setLoad_AH_AL_Restore
 10315 ;; This function is called by:
 10316 ;;		_main
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _Load_Main
 10322  01B9                     _Load_Main:	
 10323                           
 10324                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10325                           
 10326                           ;incstack = 0
 10327                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10328  01B9  0020               	movlb	0	; select bank0
 10329  01BA  01AF               	clrf	Load_Main@i
 10330  01BB  01AB               	clrf	Load_Main@j
 10331  01BC  3000               	movlw	0
 10332  01BD  3191  21CD  3181   	fcall	_getMain_All_Error_Status
 10333  01C0  0020               	movlb	0	; select bank0
 10334  01C1  00A9               	movwf	??_Load_Main
 10335  01C2  0829               	movf	??_Load_Main,w
 10336  01C3  00AE               	movwf	Load_Main@error
 10337  01C4  01AC               	clrf	Load_Main@adjgo
 10338                           
 10339                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10340  01C5  0022               	movlb	2	; select bank2
 10341  01C6  1C2A               	btfss	_Load^(0+256),0
 10342  01C7  2AF7               	goto	l1458
 10343                           
 10344                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10345  01C8  319C  2472  3181   	fcall	_getAll_DimmerLights_AdjGO
 10346  01CB  0020               	movlb	0	; select bank0
 10347  01CC  00A9               	movwf	??_Load_Main
 10348  01CD  0829               	movf	??_Load_Main,w
 10349  01CE  00AC               	movwf	Load_Main@adjgo
 10350                           
 10351                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10352  01CF  01AD               	clrf	_Load_Main$3848
 10353  01D0  3191  2172  3181   	fcall	_getMain_LightsStatus
 10354  01D3  3A01               	xorlw	1
 10355  01D4  1D03               	skipz
 10356  01D5  29DF               	goto	l7913
 10357  01D6  0020               	movlb	0	; select bank0
 10358  01D7  08AE               	movf	Load_Main@error,f
 10359  01D8  1D03               	skipz
 10360  01D9  29DF               	goto	l7913
 10361  01DA  08AC               	movf	Load_Main@adjgo,f
 10362  01DB  1D03               	skipz
 10363  01DC  29DF               	goto	l7913
 10364  01DD  01AD               	clrf	_Load_Main$3848
 10365  01DE  0AAD               	incf	_Load_Main$3848,f
 10366  01DF                     l7913:	
 10367  01DF  0020               	movlb	0	; select bank0
 10368  01E0  082D               	movf	_Load_Main$3848,w
 10369  01E1  0022               	movlb	2	; select bank2
 10370  01E2  10AA               	bcf	_Load^(0+256),1
 10371  01E3  1D03               	skipz
 10372  01E4  14AA               	bsf	_Load^(0+256),1
 10373                           
 10374                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10375  01E5  319C  2436  3181   	fcall	_getMain_LoadOK
 10376  01E8  3A01               	xorlw	1
 10377  01E9  1D03               	skipz
 10378  01EA  29F0               	goto	l1461
 10379  01EB  0022               	movlb	2	; select bank2
 10380  01EC  19AA               	btfsc	_Load^(0+256),3
 10381  01ED  29F0               	goto	l1461
 10382                           
 10383                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10384  01EE  15AA               	bsf	_Load^(0+256),3
 10385                           
 10386                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10387  01EF  13AA               	bcf	_Load^(0+256),7
 10388  01F0                     l1461:	
 10389                           
 10390                           ;OverLoad_B1.c: 50: }
 10391                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10392  01F0  0022               	movlb	2	; select bank2
 10393  01F1  1CAA               	btfss	_Load^(0+256),1
 10394  01F2  2AC7               	goto	l1462
 10395                           
 10396                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10397  01F3  152A               	bsf	_Load^(0+256),2
 10398                           
 10399                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10400  01F4  1E2A               	btfss	_Load^(0+256),4
 10401  01F5  2AC5               	goto	l1463
 10402                           
 10403                           ;OverLoad_B1.c: 57: Load.Time++;
 10404  01F6  3001               	movlw	1
 10405  01F7  07AB               	addwf	(_Load^(0+256)+1),f
 10406  01F8  3000               	movlw	0
 10407  01F9  3DAC               	addwfc	((_Load+1)^(0+256)+1),f
 10408                           
 10409                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10410  01FA  3000               	movlw	0
 10411  01FB  022C               	subwf	((_Load+1)^(0+256)+1),w
 10412  01FC  3005               	movlw	5
 10413  01FD  1903               	skipnz
 10414  01FE  022B               	subwf	(_Load^(0+256)+1),w
 10415  01FF  1C03               	skipc
 10416  0200  0008               	return
 10417                           
 10418                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10419  0201  01AB               	clrf	(_Load^(0+256)+1)
 10420  0202  01AC               	clrf	((_Load+1)^(0+256)+1)
 10421                           
 10422                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10423  0203  122A               	bcf	_Load^(0+256),4
 10424                           
 10425                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
 10426  0204  0020               	movlb	0	; select bank0
 10427  0205  01AF               	clrf	Load_Main@i
 10428  0206  3004               	movlw	4
 10429  0207  022F               	subwf	Load_Main@i,w
 10430  0208  1803               	btfsc	3,0
 10431  0209  2A34               	goto	l7939
 10432  020A                     l7933:	
 10433                           
 10434                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
 10435  020A  352F               	lslf	Load_Main@i,w
 10436  020B  3E35               	addlw	(_Load+11)& (0+255)
 10437  020C  0086               	movwf	6
 10438  020D  3001               	movlw	1	; select bank2/3
 10439  020E  0087               	movwf	7
 10440  020F  3F40               	moviw [0]fsr1
 10441  0210  00A9               	movwf	??_Load_Main
 10442  0211  3F41               	moviw [1]fsr1
 10443  0212  00AA               	movwf	??_Load_Main+1
 10444  0213  0829               	movf	??_Load_Main,w
 10445  0214  0022               	movlb	2	; select bank2
 10446  0215  07AF               	addwf	(_Load^(0+256)+5),f
 10447  0216  0020               	movlb	0	; select bank0
 10448  0217  082A               	movf	??_Load_Main+1,w
 10449  0218  0022               	movlb	2	; select bank2
 10450  0219  3DB0               	addwfc	((_Load+1)^(0+256)+5),f
 10451                           
 10452                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
 10453  021A  0020               	movlb	0	; select bank0
 10454  021B  352F               	lslf	Load_Main@i,w
 10455  021C  3E3F               	addlw	(_Load+21)& (0+255)
 10456  021D  0086               	movwf	6
 10457  021E  3001               	movlw	1	; select bank2/3
 10458  021F  0087               	movwf	7
 10459  0220  3F40               	moviw [0]fsr1
 10460  0221  00A9               	movwf	??_Load_Main
 10461  0222  3F41               	moviw [1]fsr1
 10462  0223  00AA               	movwf	??_Load_Main+1
 10463  0224  0829               	movf	??_Load_Main,w
 10464  0225  0022               	movlb	2	; select bank2
 10465  0226  07B1               	addwf	(_Load^(0+256)+7),f
 10466  0227  0020               	movlb	0	; select bank0
 10467  0228  082A               	movf	??_Load_Main+1,w
 10468  0229  0022               	movlb	2	; select bank2
 10469  022A  3DB2               	addwfc	((_Load+1)^(0+256)+7),f
 10470  022B  3001               	movlw	1
 10471  022C  0020               	movlb	0	; select bank0
 10472  022D  00A9               	movwf	??_Load_Main
 10473  022E  0829               	movf	??_Load_Main,w
 10474  022F  07AF               	addwf	Load_Main@i,f
 10475  0230  3004               	movlw	4
 10476  0231  022F               	subwf	Load_Main@i,w
 10477  0232  1C03               	skipc
 10478  0233  2A0A               	goto	l7933
 10479  0234                     l7939:	
 10480                           
 10481                           ;OverLoad_B1.c: 65: }
 10482                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
 10483  0234  3002               	movlw	2
 10484  0235  0022               	movlb	2	; select bank2
 10485  0236                     u7975:	
 10486  0236  36B0               	lsrf	((_Load+1)^(0+256)+5),f
 10487  0237  0CAF               	rrf	(_Load^(0+256)+5),f
 10488  0238  0B89               	decfsz	9,f
 10489  0239  2A36               	goto	u7975
 10490                           
 10491                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
 10492  023A  3002               	movlw	2
 10493  023B                     u7985:	
 10494  023B  36B2               	lsrf	((_Load+1)^(0+256)+7),f
 10495  023C  0CB1               	rrf	(_Load^(0+256)+7),f
 10496  023D  0B89               	decfsz	9,f
 10497  023E  2A3B               	goto	u7985
 10498                           
 10499                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10500  023F  319E  269C  3181   	fcall	_setLoad_AH_AL_Restore
 10501                           
 10502                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
 10503  0242  0022               	movlb	2	; select bank2
 10504  0243  0830               	movf	((_Load+1)^(0+256)+5),w
 10505  0244  0232               	subwf	((_Load+1)^(0+256)+7),w
 10506  0245  1D03               	skipz
 10507  0246  2A49               	goto	u7995
 10508  0247  082F               	movf	(_Load^(0+256)+5),w
 10509  0248  0231               	subwf	(_Load^(0+256)+7),w
 10510  0249                     u7995:	
 10511  0249  1803               	skipnc
 10512  024A  0008               	return
 10513                           
 10514                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
 10515  024B  3005               	movlw	5
 10516  024C  3E2A               	addlw	_Load& (0+255)
 10517  024D  0086               	movwf	6
 10518  024E  3001               	movlw	1	; select bank2/3
 10519  024F  0087               	movwf	7
 10520  0250  0931               	comf	(_Load^(0+256)+7),w
 10521  0251  0020               	movlb	0	; select bank0
 10522  0252  00A9               	movwf	??_Load_Main
 10523  0253  0022               	movlb	2	; select bank2
 10524  0254  0932               	comf	((_Load+1)^(0+256)+7),w
 10525  0255  0020               	movlb	0	; select bank0
 10526  0256  00AA               	movwf	??_Load_Main+1
 10527  0257  0AA9               	incf	??_Load_Main,f
 10528  0258  1903               	skipnz
 10529  0259  0AAA               	incf	??_Load_Main+1,f
 10530  025A  3F40               	moviw [0]fsr1
 10531  025B  0729               	addwf	??_Load_Main,w
 10532  025C  0022               	movlb	2	; select bank2
 10533  025D  00C9               	movwf	(_Load^(0+256)+31)
 10534  025E  3F41               	moviw [1]fsr1
 10535  025F  0020               	movlb	0	; select bank0
 10536  0260  3D2A               	addwfc	??_Load_Main+1,w
 10537  0261  0022               	movlb	2	; select bank2
 10538  0262  00CA               	movwf	(_Load^(0+256)+32)
 10539                           
 10540                           ;OverLoad_B1.c: 71: Load.ADH = 0;
 10541  0263  01AF               	clrf	(_Load^(0+256)+5)
 10542  0264  01B0               	clrf	((_Load+1)^(0+256)+5)
 10543                           
 10544                           ;OverLoad_B1.c: 72: Load.ADL = 0;
 10545  0265  01B1               	clrf	(_Load^(0+256)+7)
 10546  0266  01B2               	clrf	((_Load+1)^(0+256)+7)
 10547                           
 10548                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
 10549  0267  319D  25EE  3181   	fcall	_getMain_Lights_Count
 10550  026A  0020               	movlb	0	; select bank0
 10551  026B  00A9               	movwf	??_Load_Main
 10552  026C  0829               	movf	??_Load_Main,w
 10553  026D  0022               	movlb	2	; select bank2
 10554  026E  00D5               	movwf	(_Load^(0+256)+43)
 10555                           
 10556                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
 10557  026F  1DAA               	btfss	_Load^(0+256),3
 10558  0270  2A96               	goto	l7971
 10559                           
 10560                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
 10561  0271  3002               	movlw	2
 10562  0272  0253               	subwf	(_Load^(0+256)+41),w
 10563  0273  1803               	skipnc
 10564  0274  2A96               	goto	l7971
 10565                           
 10566                           ;OverLoad_B1.c: 77: Load.Count++;
 10567  0275  3001               	movlw	1
 10568  0276  0020               	movlb	0	; select bank0
 10569  0277  00A9               	movwf	??_Load_Main
 10570  0278  0829               	movf	??_Load_Main,w
 10571  0279  0022               	movlb	2	; select bank2
 10572  027A  07D3               	addwf	(_Load^(0+256)+41),f
 10573                           
 10574                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
 10575  027B  0853               	movf	(_Load^(0+256)+41),w
 10576  027C  3A01               	xorlw	1
 10577  027D  1D03               	skipz
 10578  027E  2A83               	goto	l7963
 10579                           
 10580                           ;OverLoad_B1.c: 79: Load.JudgeValue = 0x400;
 10581  027F  3000               	movlw	0
 10582  0280  00CF               	movwf	(_Load^(0+256)+37)
 10583  0281  3004               	movlw	4
 10584  0282  2A8E               	goto	L6
 10585  0283                     l7963:	
 10586                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
 10587                           
 10588  0283  0853               	movf	(_Load^(0+256)+41),w
 10589  0284  3A02               	xorlw	2
 10590  0285  1D03               	skipz
 10591  0286  2A96               	goto	l7971
 10592                           
 10593                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
 10594  0287  0855               	movf	(_Load^(0+256)+43),w
 10595  0288  3A01               	xorlw	1
 10596  0289  1D03               	skipz
 10597  028A  2A90               	goto	l7969
 10598                           
 10599                           ;OverLoad_B1.c: 82: Load.JudgeValue = 0x32;
 10600  028B  3032               	movlw	50
 10601  028C  00CF               	movwf	(_Load^(0+256)+37)
 10602  028D  3000               	movlw	0
 10603  028E                     L6:	
 10604  028E  00D0               	movwf	(_Load^(0+256)+38)
 10605                           
 10606                           ;OverLoad_B1.c: 83: } else {
 10607  028F  2A96               	goto	l7971
 10608  0290                     l7969:	
 10609                           
 10610                           ;OverLoad_B1.c: 84: Load.JudgeValue = 0x32 + Load.TotalLoad;
 10611  0290  0833               	movf	(_Load^(0+256)+9),w
 10612  0291  3E32               	addlw	50
 10613  0292  00CF               	movwf	(_Load^(0+256)+37)
 10614  0293  3000               	movlw	0
 10615  0294  3D34               	addwfc	((_Load+1)^(0+256)+9),w
 10616  0295  00D0               	movwf	((_Load+1)^(0+256)+37)
 10617  0296                     l7971:	
 10618                           
 10619                           ;OverLoad_B1.c: 85: }
 10620                           ;OverLoad_B1.c: 86: }
 10621                           ;OverLoad_B1.c: 87: }
 10622                           ;OverLoad_B1.c: 88: }
 10623                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10624  0296  0850               	movf	((_Load+1)^(0+256)+37),w
 10625  0297  024A               	subwf	((_Load+1)^(0+256)+31),w
 10626  0298  1D03               	skipz
 10627  0299  2A9C               	goto	u8055
 10628  029A  084F               	movf	(_Load^(0+256)+37),w
 10629  029B  0249               	subwf	(_Load^(0+256)+31),w
 10630  029C                     u8055:	
 10631  029C  1C03               	skipc
 10632  029D  2AAB               	goto	l7981
 10633                           
 10634                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10635  029E  3001               	movlw	1
 10636  029F  0020               	movlb	0	; select bank0
 10637  02A0  00A9               	movwf	??_Load_Main
 10638  02A1  0829               	movf	??_Load_Main,w
 10639  02A2  0022               	movlb	2	; select bank2
 10640  02A3  07D4               	addwf	(_Load^(0+256)+42),f
 10641                           
 10642                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10643  02A4  3003               	movlw	3
 10644  02A5  0254               	subwf	(_Load^(0+256)+42),w
 10645  02A6  1C03               	skipc
 10646  02A7  0008               	return
 10647                           
 10648                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10649  02A8  01D4               	clrf	(_Load^(0+256)+42)
 10650                           
 10651                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
 10652  02A9  16AA               	bsf	_Load^(0+256),5
 10653                           
 10654                           ;OverLoad_B1.c: 107: }
 10655                           ;OverLoad_B1.c: 108: } else {
 10656  02AA  0008               	return
 10657  02AB                     l7981:	
 10658                           
 10659                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
 10660  02AB  01D4               	clrf	(_Load^(0+256)+42)
 10661                           
 10662                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
 10663  02AC  1DAA               	btfss	_Load^(0+256),3
 10664  02AD  0008               	return
 10665                           
 10666                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10667  02AE  1BAA               	btfsc	_Load^(0+256),7
 10668  02AF  0008               	return
 10669                           
 10670                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10671  02B0  3001               	movlw	1
 10672  02B1  0020               	movlb	0	; select bank0
 10673  02B2  00A9               	movwf	??_Load_Main
 10674  02B3  0829               	movf	??_Load_Main,w
 10675  02B4  0022               	movlb	2	; select bank2
 10676  02B5  07D6               	addwf	(_Load^(0+256)+44),f
 10677                           
 10678                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
 10679  02B6  3003               	movlw	3
 10680  02B7  0256               	subwf	(_Load^(0+256)+44),w
 10681  02B8  1C03               	skipc
 10682  02B9  0008               	return
 10683                           
 10684                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10685  02BA  01D6               	clrf	(_Load^(0+256)+44)
 10686                           
 10687                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10688  02BB  17AA               	bsf	_Load^(0+256),7
 10689                           
 10690                           ;OverLoad_B1.c: 116: Load.Run = 0;
 10691  02BC  11AA               	bcf	_Load^(0+256),3
 10692                           
 10693                           ;OverLoad_B1.c: 117: Load.Count = 0;
 10694  02BD  01D3               	clrf	(_Load^(0+256)+41)
 10695                           
 10696                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10697  02BE  084A               	movf	((_Load+1)^(0+256)+31),w
 10698  02BF  01B4               	clrf	((_Load+1)^(0+256)+9)
 10699  02C0  07B4               	addwf	((_Load+1)^(0+256)+9),f
 10700  02C1  0849               	movf	(_Load^(0+256)+31),w
 10701  02C2  01B3               	clrf	(_Load^(0+256)+9)
 10702  02C3  07B3               	addwf	(_Load^(0+256)+9),f
 10703                           
 10704                           ;OverLoad_B1.c: 127: }
 10705                           ;OverLoad_B1.c: 128: }
 10706                           ;OverLoad_B1.c: 129: }
 10707                           ;OverLoad_B1.c: 130: }
 10708                           ;OverLoad_B1.c: 131: }
 10709                           ;OverLoad_B1.c: 132: }
 10710                           ;OverLoad_B1.c: 133: } else {
 10711  02C4  0008               	return
 10712  02C5                     l1463:	
 10713                           
 10714                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
 10715  02C5  162A               	bsf	_Load^(0+256),4
 10716                           
 10717                           ;OverLoad_B1.c: 135: }
 10718                           ;OverLoad_B1.c: 136: } else {
 10719  02C6  0008               	return
 10720  02C7                     l1462:	
 10721                           
 10722                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
 10723  02C7  1D2A               	btfss	_Load^(0+256),2
 10724  02C8  2AE5               	goto	l8029
 10725  02C9  0020               	movlb	0	; select bank0
 10726  02CA  082E               	movf	Load_Main@error,w
 10727  02CB  3A03               	xorlw	3
 10728  02CC  1903               	skipnz
 10729  02CD  2AE5               	goto	l8029
 10730                           
 10731                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
 10732  02CE  0022               	movlb	2	; select bank2
 10733  02CF  112A               	bcf	_Load^(0+256),2
 10734                           
 10735                           ;OverLoad_B1.c: 140: Load.Time = 0;
 10736  02D0  01AB               	clrf	(_Load^(0+256)+1)
 10737  02D1  01AC               	clrf	((_Load+1)^(0+256)+1)
 10738                           
 10739                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
 10740  02D2  122A               	bcf	_Load^(0+256),4
 10741                           
 10742                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
 10743  02D3  319E  269C  3181   	fcall	_setLoad_AH_AL_Restore
 10744                           
 10745                           ;OverLoad_B1.c: 143: Load.Count = 0;
 10746  02D6  0022               	movlb	2	; select bank2
 10747  02D7  01D3               	clrf	(_Load^(0+256)+41)
 10748                           
 10749                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10750  02D8  01D4               	clrf	(_Load^(0+256)+42)
 10751                           
 10752                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
 10753  02D9  01D6               	clrf	(_Load^(0+256)+44)
 10754                           
 10755                           ;OverLoad_B1.c: 147: Load.ADH = 0;
 10756  02DA  01AF               	clrf	(_Load^(0+256)+5)
 10757  02DB  01B0               	clrf	((_Load+1)^(0+256)+5)
 10758                           
 10759                           ;OverLoad_B1.c: 148: Load.ADL = 0;
 10760  02DC  01B1               	clrf	(_Load^(0+256)+7)
 10761  02DD  01B2               	clrf	((_Load+1)^(0+256)+7)
 10762                           
 10763                           ;OverLoad_B1.c: 149: Load.AD = 0;
 10764  02DE  01C9               	clrf	(_Load^(0+256)+31)
 10765  02DF  01CA               	clrf	((_Load+1)^(0+256)+31)
 10766                           
 10767                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
 10768  02E0  01CF               	clrf	(_Load^(0+256)+37)
 10769  02E1  01D0               	clrf	((_Load+1)^(0+256)+37)
 10770                           
 10771                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
 10772  02E2  01D5               	clrf	(_Load^(0+256)+43)
 10773                           
 10774                           ;OverLoad_B1.c: 152: Load.Run = 0;
 10775  02E3  11AA               	bcf	_Load^(0+256),3
 10776                           
 10777                           ;OverLoad_B1.c: 153: Load.OK = 1;
 10778  02E4  17AA               	bsf	_Load^(0+256),7
 10779  02E5                     l8029:	
 10780                           
 10781                           ;OverLoad_B1.c: 161: }
 10782                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
 10783  02E5  0022               	movlb	2	; select bank2
 10784  02E6  1EAA               	btfss	_Load^(0+256),5
 10785  02E7  0008               	return
 10786                           
 10787                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
 10788  02E8  3001               	movlw	1
 10789  02E9  07AD               	addwf	(_Load^(0+256)+3),f
 10790  02EA  3000               	movlw	0
 10791  02EB  3DAE               	addwfc	((_Load+1)^(0+256)+3),f
 10792                           
 10793                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
 10794  02EC  3003               	movlw	3
 10795  02ED  022E               	subwf	((_Load+1)^(0+256)+3),w
 10796  02EE  30E8               	movlw	232
 10797  02EF  1903               	skipnz
 10798  02F0  022D               	subwf	(_Load^(0+256)+3),w
 10799  02F1  1C03               	skipc
 10800  02F2  0008               	return
 10801                           
 10802                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
 10803  02F3  01AD               	clrf	(_Load^(0+256)+3)
 10804  02F4  01AE               	clrf	((_Load+1)^(0+256)+3)
 10805                           
 10806                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
 10807  02F5  12AA               	bcf	_Load^(0+256),5
 10808                           
 10809                           ;OverLoad_B1.c: 173: }
 10810                           ;OverLoad_B1.c: 174: }
 10811                           ;OverLoad_B1.c: 175: }
 10812                           ;OverLoad_B1.c: 176: } else {
 10813  02F6  0008               	return
 10814  02F7                     l1458:	
 10815                           
 10816                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
 10817  02F7  0021               	movlb	1	; select bank1
 10818  02F8  1C20               	btfss	_myMain^(0+128),0
 10819  02F9  0008               	return
 10820                           
 10821                           ;OverLoad_B1.c: 178: Load.Enable = 1;
 10822  02FA  0022               	movlb	2	; select bank2
 10823  02FB  142A               	bsf	_Load^(0+256),0
 10824  02FC  0008               	return
 10825  02FD                     __end_of_Load_Main:	
 10826                           
 10827                           	psect	text54
 10828  1C36                     __ptext54:	
 10829 ;; *************** function _getMain_LoadOK *****************
 10830 ;; Defined at:
 10831 ;;		line 432 in file "../src/main_B1.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  ok              1    2[BANK0 ] unsigned char 
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      unsigned char 
 10838 ;; Registers used:
 10839 ;;		wreg, status,2, pclath, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;Total ram usage:        2 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    6
 10852 ;; This function calls:
 10853 ;;		_getDimmer_LoadOK
 10854 ;; This function is called by:
 10855 ;;		_Load_Main
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _getMain_LoadOK
 10861  1C36                     _getMain_LoadOK:	
 10862                           
 10863                           ;main_B1.c: 433: char ok = 0;
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10867  1C36  0020               	movlb	0	; select bank0
 10868  1C37  01A2               	clrf	getMain_LoadOK@ok
 10869                           
 10870                           ;main_B1.c: 439: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10871  1C38  319B  239A         	fcall	_getDimmer_LoadOK
 10872  1C3A  3A01               	xorlw	1
 10873  1C3B  3000               	movlw	0
 10874  1C3C  1903               	skipnz
 10875  1C3D  3001               	movlw	1
 10876  1C3E  0020               	movlb	0	; select bank0
 10877  1C3F  00A1               	movwf	??_getMain_LoadOK
 10878  1C40  0821               	movf	??_getMain_LoadOK,w
 10879  1C41  00A2               	movwf	getMain_LoadOK@ok
 10880                           
 10881                           ;main_B1.c: 441: return ok;
 10882  1C42  0822               	movf	getMain_LoadOK@ok,w
 10883  1C43  0008               	return
 10884  1C44                     __end_of_getMain_LoadOK:	
 10885                           
 10886                           	psect	text55
 10887  1B9A                     __ptext55:	
 10888 ;; *************** function _getDimmer_LoadOK *****************
 10889 ;; Defined at:
 10890 ;;		line 618 in file "../src/Dimmer_B1.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;		None
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;  status          1    0[BANK0 ] unsigned char 
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      unsigned char 
 10897 ;; Registers used:
 10898 ;;		wreg, status,2
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;Total ram usage:        1 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; Hardware stack levels required when called:    5
 10911 ;; This function calls:
 10912 ;;		Nothing
 10913 ;; This function is called by:
 10914 ;;		_getMain_LoadOK
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           
 10919                           ;psect for function _getDimmer_LoadOK
 10920  1B9A                     _getDimmer_LoadOK:	
 10921                           
 10922                           ;Dimmer_B1.c: 619: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10923                           
 10924                           ;incstack = 0
 10925                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10926  1B9A  3000               	movlw	0
 10927  1B9B  0022               	movlb	2	; select bank2
 10928  1B9C  18A0               	btfsc	_Dimmer^(0+256),1
 10929  1B9D  3001               	movlw	1
 10930  1B9E  0020               	movlb	0	; select bank0
 10931  1B9F  00A0               	movwf	getDimmer_LoadOK@status
 10932                           
 10933                           ;Dimmer_B1.c: 620: return status;
 10934  1BA0  0820               	movf	getDimmer_LoadOK@status,w
 10935  1BA1  0008               	return
 10936  1BA2                     __end_of_getDimmer_LoadOK:	
 10937                           
 10938                           	psect	text56
 10939  1DEE                     __ptext56:	
 10940 ;; *************** function _getMain_Lights_Count *****************
 10941 ;; Defined at:
 10942 ;;		line 402 in file "../src/main_B1.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;  status2         1    3[BANK0 ] unsigned char 
 10947 ;;  status1         1    2[BANK0 ] unsigned char 
 10948 ;;  status3         1    1[BANK0 ] unsigned char 
 10949 ;;  count           1    0[BANK0 ] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      unsigned char 
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        4 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    5
 10966 ;; This function calls:
 10967 ;;		Nothing
 10968 ;; This function is called by:
 10969 ;;		_Load_Main
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           
 10974                           ;psect for function _getMain_Lights_Count
 10975  1DEE                     _getMain_Lights_Count:	
 10976                           
 10977                           ;main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10978                           
 10979                           ;incstack = 0
 10980                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10981  1DEE  0020               	movlb	0	; select bank0
 10982  1DEF  01A2               	clrf	getMain_Lights_Count@status1
 10983  1DF0  01A3               	clrf	getMain_Lights_Count@status2
 10984  1DF1  01A1               	clrf	getMain_Lights_Count@status3
 10985  1DF2  01A0               	clrf	getMain_Lights_Count@count
 10986                           
 10987                           ;main_B1.c: 407: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10988  1DF3  3000               	movlw	0
 10989  1DF4  0023               	movlb	3	; select bank3
 10990  1DF5  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10991  1DF6  3001               	movlw	1
 10992  1DF7  0020               	movlb	0	; select bank0
 10993  1DF8  00A2               	movwf	getMain_Lights_Count@status1
 10994                           
 10995                           ;main_B1.c: 410: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10996  1DF9  3000               	movlw	0
 10997  1DFA  0023               	movlb	3	; select bank3
 10998  1DFB  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10999  1DFC  3001               	movlw	1
 11000  1DFD  0020               	movlb	0	; select bank0
 11001  1DFE  00A3               	movwf	getMain_Lights_Count@status2
 11002                           
 11003                           ;main_B1.c: 428: return count = (status1 + status2 + status3);
 11004  1DFF  0822               	movf	getMain_Lights_Count@status1,w
 11005  1E00  0723               	addwf	getMain_Lights_Count@status2,w
 11006  1E01  0721               	addwf	getMain_Lights_Count@status3,w
 11007  1E02  00A0               	movwf	getMain_Lights_Count@count
 11008  1E03  0008               	return
 11009  1E04                     __end_of_getMain_Lights_Count:	
 11010                           
 11011                           	psect	text57
 11012  1B62                     __ptext57:	
 11013 ;; *************** function _Load_Initialization *****************
 11014 ;; Defined at:
 11015 ;;		line 9 in file "../src/OverLoad_B1.c"
 11016 ;; Parameters:    Size  Location     Type
 11017 ;;		None
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;		None
 11020 ;; Return value:  Size  Location     Type
 11021 ;;		None               void
 11022 ;; Registers used:
 11023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;Total ram usage:        0 bytes
 11034 ;; Hardware stack levels used:    1
 11035 ;; Hardware stack levels required when called:    6
 11036 ;; This function calls:
 11037 ;;		_setLoad_AH_AL_Restore
 11038 ;; This function is called by:
 11039 ;;		_main
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           
 11044                           ;psect for function _Load_Initialization
 11045  1B62                     _Load_Initialization:	
 11046                           
 11047                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11048                           
 11049                           ;incstack = 0
 11050                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11051  1B62  0022               	movlb	2	; select bank2
 11052  1B63  17AA               	bsf	_Load^(0+256),7
 11053                           
 11054                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11055  1B64  319E  269C         	fcall	_setLoad_AH_AL_Restore
 11056  1B66  0008               	return
 11057  1B67                     __end_of_Load_Initialization:	
 11058                           
 11059                           	psect	text58
 11060  1E9C                     __ptext58:	
 11061 ;; *************** function _setLoad_AH_AL_Restore *****************
 11062 ;; Defined at:
 11063 ;;		line 284 in file "../src/OverLoad_B1.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;  i               1    1[BANK0 ] unsigned char 
 11068 ;; Return value:  Size  Location     Type
 11069 ;;		None               void
 11070 ;; Registers used:
 11071 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;Total ram usage:        2 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    5
 11084 ;; This function calls:
 11085 ;;		Nothing
 11086 ;; This function is called by:
 11087 ;;		_Load_Initialization
 11088 ;;		_Load_Main
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _setLoad_AH_AL_Restore
 11094  1E9C                     _setLoad_AH_AL_Restore:	
 11095                           
 11096                           ;OverLoad_B1.c: 285: char i;
 11097                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 11098                           
 11099                           ;incstack = 0
 11100                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11101  1E9C  0020               	movlb	0	; select bank0
 11102  1E9D  01A1               	clrf	setLoad_AH_AL_Restore@i
 11103  1E9E                     L7:	
 11104  1E9E  3005               	movlw	5
 11105  1E9F  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11106  1EA0  1803               	btfsc	3,0
 11107  1EA1  0008               	return
 11108                           
 11109                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 11110  1EA2  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11111  1EA3  3E35               	addlw	(_Load+11)& (0+255)
 11112  1EA4  0086               	movwf	6
 11113  1EA5  3001               	movlw	1	; select bank2/3
 11114  1EA6  0087               	movwf	7
 11115  1EA7  3000               	movlw	0
 11116  1EA8  3FC0               	movwi [0]fsr1
 11117  1EA9  3FC1               	movwi [1]fsr1
 11118                           
 11119                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 11120  1EAA  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11121  1EAB  3E3F               	addlw	(_Load+21)& (0+255)
 11122  1EAC  0086               	movwf	6
 11123  1EAD  3001               	movlw	1	; select bank2/3
 11124  1EAE  0087               	movwf	7
 11125  1EAF  30FF               	movlw	255
 11126  1EB0  3FC0               	movwi [0]fsr1
 11127  1EB1  30FF               	movlw	255
 11128  1EB2  3FC1               	movwi [1]fsr1
 11129  1EB3  3001               	movlw	1
 11130  1EB4  00A0               	movwf	??_setLoad_AH_AL_Restore
 11131  1EB5  0820               	movf	??_setLoad_AH_AL_Restore,w
 11132  1EB6  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11133  1EB7  2E9E               	goto	L7
 11134  1EB8                     __end_of_setLoad_AH_AL_Restore:	
 11135                           
 11136                           	psect	text59
 11137  1BF9                     __ptext59:	
 11138 ;; *************** function _LED_Main *****************
 11139 ;; Defined at:
 11140 ;;		line 47 in file "../src/LED_B1.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;		None
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;		None
 11145 ;; Return value:  Size  Location     Type
 11146 ;;		None               void
 11147 ;; Registers used:
 11148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;Total ram usage:        0 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    7
 11161 ;; This function calls:
 11162 ;;		_setLED_Main
 11163 ;; This function is called by:
 11164 ;;		_main
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           
 11169                           ;psect for function _LED_Main
 11170  1BF9                     _LED_Main:	
 11171                           
 11172                           ;LED_B1.c: 49: setLED_Main(1);
 11173                           
 11174                           ;incstack = 0
 11175                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11176  1BF9  3001               	movlw	1
 11177  1BFA  3193  23B1  319B   	fcall	_setLED_Main
 11178                           
 11179                           ;LED_B1.c: 52: setLED_Main(2);
 11180  1BFD  3002               	movlw	2
 11181  1BFE  3193  23B1  319B   	fcall	_setLED_Main
 11182                           
 11183                           ;LED_B1.c: 58: setLED_Main(99);
 11184  1C01  3063               	movlw	99
 11185  1C02  3193  23B1         	fcall	_setLED_Main
 11186  1C04  0008               	return
 11187  1C05                     __end_of_LED_Main:	
 11188                           
 11189                           	psect	text60
 11190  13B1                     __ptext60:	
 11191 ;; *************** function _setLED_Main *****************
 11192 ;; Defined at:
 11193 ;;		line 216 in file "../src/LED_B1.c"
 11194 ;; Parameters:    Size  Location     Type
 11195 ;;  led             1    wreg     unsigned char 
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;  led             1    4[BANK0 ] unsigned char 
 11198 ;; Return value:  Size  Location     Type
 11199 ;;		None               void
 11200 ;; Registers used:
 11201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11202 ;; Tracked objects:
 11203 ;;		On entry : 0/0
 11204 ;;		On exit  : 0/0
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;Total ram usage:        3 bytes
 11212 ;; Hardware stack levels used:    1
 11213 ;; Hardware stack levels required when called:    6
 11214 ;; This function calls:
 11215 ;;		_LedPointSelect
 11216 ;; This function is called by:
 11217 ;;		_LED_Main
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           
 11222                           ;psect for function _setLED_Main
 11223  13B1                     _setLED_Main:	
 11224                           
 11225                           ;incstack = 0
 11226                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11227                           ;setLED_Main@led stored from wreg
 11228  13B1  0020               	movlb	0	; select bank0
 11229  13B2  00A4               	movwf	setLED_Main@led
 11230                           
 11231                           ;LED_B1.c: 217: LedPointSelect(led);
 11232  13B3  0824               	movf	setLED_Main@led,w
 11233  13B4  319E  2681  3193   	fcall	_LedPointSelect
 11234                           
 11235                           ;LED_B1.c: 218: if (LED->GO == 1) {
 11236  13B7  087B               	movf	_LED,w
 11237  13B8  0086               	movwf	6
 11238  13B9  3001               	movlw	1	; select bank2/3
 11239  13BA  0087               	movwf	7
 11240  13BB  1C81               	btfss	1,1
 11241  13BC  0008               	return
 11242                           
 11243                           ;LED_B1.c: 219: LED->Time++;
 11244  13BD  0A7B               	incf	_LED,w
 11245  13BE  0086               	movwf	6
 11246  13BF  3001               	movlw	1	; select bank2/3
 11247  13C0  0087               	movwf	7
 11248  13C1  3001               	movlw	1
 11249  13C2  0781               	addwf	1,f
 11250  13C3  3141               	addfsr 1,1
 11251  13C4  1803               	skipnc
 11252  13C5  0A81               	incf	1,f
 11253                           
 11254                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
 11255  13C6  0A7B               	incf	_LED,w
 11256  13C7  0086               	movwf	6
 11257  13C8  3001               	movlw	1	; select bank2/3
 11258  13C9  0087               	movwf	7
 11259  13CA  3F40               	moviw [0]fsr1
 11260  13CB  0020               	movlb	0	; select bank0
 11261  13CC  00A2               	movwf	??_setLED_Main
 11262  13CD  3F41               	moviw [1]fsr1
 11263  13CE  00A3               	movwf	??_setLED_Main+1
 11264  13CF  3000               	movlw	0
 11265  13D0  0223               	subwf	??_setLED_Main+1,w
 11266  13D1  3032               	movlw	50
 11267  13D2  1903               	skipnz
 11268  13D3  0222               	subwf	??_setLED_Main,w
 11269  13D4  1C03               	skipc
 11270  13D5  0008               	return
 11271                           
 11272                           ;LED_B1.c: 221: LED->Time = 0;
 11273  13D6  0A7B               	incf	_LED,w
 11274  13D7  0086               	movwf	6
 11275  13D8  3001               	movlw	1	; select bank2/3
 11276  13D9  0087               	movwf	7
 11277  13DA  3000               	movlw	0
 11278  13DB  3FC0               	movwi [0]fsr1
 11279  13DC  3FC1               	movwi [1]fsr1
 11280                           
 11281                           ;LED_B1.c: 223: if (led == 1) {
 11282  13DD  0824               	movf	setLED_Main@led,w
 11283  13DE  3A01               	xorlw	1
 11284                           
 11285                           ;LED_B1.c: 224: RA3 = RA3 == 1 ? 0 : 1;
 11286  13DF  3008               	movlw	8
 11287  13E0  1903               	btfsc	3,2
 11288  13E1  068C               	xorwf	12,f
 11289                           
 11290                           ;LED_B1.c: 225: }
 11291                           ;LED_B1.c: 228: if (led == 2) {
 11292  13E2  0824               	movf	setLED_Main@led,w
 11293  13E3  3A02               	xorlw	2
 11294  13E4  1D03               	skipz
 11295  13E5  2BE8               	goto	l1031
 11296                           
 11297                           ;LED_B1.c: 229: RC7 = RC7 == 1 ? 0 : 1;
 11298  13E6  3080               	movlw	128
 11299  13E7  068E               	xorwf	14,f
 11300  13E8                     l1031:	
 11301                           
 11302                           ;LED_B1.c: 230: }
 11303                           ;LED_B1.c: 238: if (led == 99) {
 11304  13E8  0824               	movf	setLED_Main@led,w
 11305  13E9  3A63               	xorlw	99
 11306  13EA  1D03               	skipz
 11307  13EB  0008               	return
 11308                           
 11309                           ;LED_B1.c: 239: RB5 = RB5 == 1 ? 0 : 1;
 11310  13EC  3020               	movlw	32
 11311  13ED  068D               	xorwf	13,f
 11312  13EE  0008               	return
 11313  13EF                     __end_of_setLED_Main:	
 11314                           
 11315                           	psect	text61
 11316  1BED                     __ptext61:	
 11317 ;; *************** function _LED_Initialization *****************
 11318 ;; Defined at:
 11319 ;;		line 31 in file "../src/LED_B1.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;		None
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;		None
 11324 ;; Return value:  Size  Location     Type
 11325 ;;		None               void
 11326 ;; Registers used:
 11327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;Total ram usage:        0 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    8
 11340 ;; This function calls:
 11341 ;;		_setLED_Initialization
 11342 ;; This function is called by:
 11343 ;;		_main
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           
 11348                           ;psect for function _LED_Initialization
 11349  1BED                     _LED_Initialization:	
 11350                           
 11351                           ;LED_B1.c: 33: setLED_Initialization(1);
 11352                           
 11353                           ;incstack = 0
 11354                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11355  1BED  3001               	movlw	1
 11356  1BEE  319C  2483  319B   	fcall	_setLED_Initialization
 11357                           
 11358                           ;LED_B1.c: 36: setLED_Initialization(2);
 11359  1BF1  3002               	movlw	2
 11360  1BF2  319C  2483  319B   	fcall	_setLED_Initialization
 11361                           
 11362                           ;LED_B1.c: 42: setLED_Initialization(99);
 11363  1BF5  3063               	movlw	99
 11364  1BF6  319C  2483         	fcall	_setLED_Initialization
 11365  1BF8  0008               	return
 11366  1BF9                     __end_of_LED_Initialization:	
 11367                           
 11368                           	psect	text62
 11369  1C83                     __ptext62:	
 11370 ;; *************** function _setLED_Initialization *****************
 11371 ;; Defined at:
 11372 ;;		line 66 in file "../src/LED_B1.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  led             1    wreg     unsigned char 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  led             1    4[BANK0 ] unsigned char 
 11377 ;; Return value:  Size  Location     Type
 11378 ;;		None               void
 11379 ;; Registers used:
 11380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        1 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    7
 11393 ;; This function calls:
 11394 ;;		_LedPointSelect
 11395 ;;		_setLED
 11396 ;; This function is called by:
 11397 ;;		_LED_Initialization
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _setLED_Initialization
 11403  1C83                     _setLED_Initialization:	
 11404                           
 11405                           ;incstack = 0
 11406                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11407                           ;setLED_Initialization@led stored from wreg
 11408  1C83  0020               	movlb	0	; select bank0
 11409  1C84  00A4               	movwf	setLED_Initialization@led
 11410                           
 11411                           ;LED_B1.c: 67: LedPointSelect(led);
 11412  1C85  0824               	movf	setLED_Initialization@led,w
 11413  1C86  319E  2681  319C   	fcall	_LedPointSelect
 11414                           
 11415                           ;LED_B1.c: 68: LED->Enable = 1;
 11416  1C89  087B               	movf	_LED,w
 11417  1C8A  0086               	movwf	6
 11418  1C8B  3001               	movlw	1	; select bank2/3
 11419  1C8C  0087               	movwf	7
 11420  1C8D  1401               	bsf	1,0
 11421                           
 11422                           ;LED_B1.c: 69: setLED(led, 0);
 11423  1C8E  0020               	movlb	0	; select bank0
 11424  1C8F  01A2               	clrf	setLED@command
 11425  1C90  0824               	movf	setLED_Initialization@led,w
 11426  1C91  3195  2551         	fcall	_setLED
 11427  1C93  0008               	return
 11428  1C94                     __end_of_setLED_Initialization:	
 11429                           
 11430                           	psect	text63
 11431  129E                     __ptext63:	
 11432 ;; *************** function _Flash_Memory_Main *****************
 11433 ;; Defined at:
 11434 ;;		line 901 in file "../src/MCU_B1.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;		None
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;		None
 11439 ;; Return value:  Size  Location     Type
 11440 ;;		None               void
 11441 ;; Registers used:
 11442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;Total ram usage:        1 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:    8
 11455 ;; This function calls:
 11456 ;;		_Flash_Memory_Modify
 11457 ;;		_getMain_LightsStatus
 11458 ;; This function is called by:
 11459 ;;		_main
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           
 11464                           ;psect for function _Flash_Memory_Main
 11465  129E                     _Flash_Memory_Main:	
 11466                           
 11467                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11468                           
 11469                           ;incstack = 0
 11470                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11471  129E  0024               	movlb	4	; select bank4
 11472  129F  1C44               	btfss	(_Memory^(0+512)+36),0
 11473  12A0  0008               	return
 11474                           
 11475                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11476  12A1  3191  2172  3192   	fcall	_getMain_LightsStatus
 11477  12A4  3A00               	xorlw	0
 11478  12A5  3000               	movlw	0
 11479  12A6  1903               	skipnz
 11480  12A7  3001               	movlw	1
 11481  12A8  0020               	movlb	0	; select bank0
 11482  12A9  00A9               	movwf	??_Flash_Memory_Main
 11483  12AA  0DA9               	rlf	??_Flash_Memory_Main,f
 11484  12AB  0024               	movlb	4	; select bank4
 11485  12AC  0844               	movf	(_Memory^(0+512)+36),w
 11486  12AD  0020               	movlb	0	; select bank0
 11487  12AE  0629               	xorwf	??_Flash_Memory_Main,w
 11488  12AF  39FD               	andlw	-3
 11489  12B0  0629               	xorwf	??_Flash_Memory_Main,w
 11490  12B1  0024               	movlb	4	; select bank4
 11491  12B2  00C4               	movwf	(_Memory^(0+512)+36)
 11492                           
 11493                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11494  12B3  1CC4               	btfss	(_Memory^(0+512)+36),1
 11495  12B4  2ACE               	goto	l1299
 11496                           
 11497                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11498  12B5  15C4               	bsf	(_Memory^(0+512)+36),3
 11499                           
 11500                           ;MCU_B1.c: 906: Memory.Time++;
 11501  12B6  3001               	movlw	1
 11502  12B7  07C2               	addwf	(_Memory^(0+512)+34),f
 11503  12B8  3000               	movlw	0
 11504  12B9  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11505                           
 11506                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11507  12BA  3022               	movlw	34
 11508  12BB  3E20               	addlw	_Memory& (0+255)
 11509  12BC  0086               	movwf	6
 11510  12BD  3002               	movlw	2	; select bank4/5
 11511  12BE  0087               	movwf	7
 11512  12BF  3F40               	moviw [0]fsr1
 11513  12C0  3A19               	xorlw	25
 11514  12C1  1D03               	skipz
 11515  12C2  2AC5               	goto	u7725
 11516  12C3  3F41               	moviw [1]fsr1
 11517  12C4  3A00               	xorlw	0
 11518  12C5                     u7725:	
 11519  12C5  1D03               	skipz
 11520  12C6  0008               	return
 11521                           
 11522                           ;MCU_B1.c: 908: Memory.Time = 0;
 11523  12C7  01C2               	clrf	(_Memory^(0+512)+34)
 11524  12C8  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11525                           
 11526                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11527  12C9  1044               	bcf	(_Memory^(0+512)+36),0
 11528                           
 11529                           ;MCU_B1.c: 910: Memory.GO = 0;
 11530  12CA  10C4               	bcf	(_Memory^(0+512)+36),1
 11531                           
 11532                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11533  12CB  3195  2503         	fcall	_Flash_Memory_Modify
 11534                           
 11535                           ;MCU_B1.c: 912: }
 11536                           ;MCU_B1.c: 913: } else {
 11537  12CD  0008               	return
 11538  12CE                     l1299:	
 11539                           
 11540                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11541  12CE  1DC4               	btfss	(_Memory^(0+512)+36),3
 11542  12CF  0008               	return
 11543                           
 11544                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11545  12D0  11C4               	bcf	(_Memory^(0+512)+36),3
 11546                           
 11547                           ;MCU_B1.c: 916: Memory.Time = 0;
 11548  12D1  01C2               	clrf	(_Memory^(0+512)+34)
 11549  12D2  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11550  12D3  0008               	return
 11551  12D4                     __end_of_Flash_Memory_Main:	
 11552                           
 11553                           	psect	text64
 11554  1503                     __ptext64:	
 11555 ;; *************** function _Flash_Memory_Modify *****************
 11556 ;; Defined at:
 11557 ;;		line 974 in file "../src/MCU_B1.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;		None
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  i               1    5[BANK0 ] unsigned char 
 11562 ;; Return value:  Size  Location     Type
 11563 ;;		None               void
 11564 ;; Registers used:
 11565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;Total ram usage:        2 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; Hardware stack levels required when called:    7
 11578 ;; This function calls:
 11579 ;;		_Flash_Memory_Erasing
 11580 ;;		_Flash_Memory_Read
 11581 ;;		_Flash_Memory_Write
 11582 ;;		_setMemory_Data
 11583 ;; This function is called by:
 11584 ;;		_Flash_Memory_Main
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           
 11589                           ;psect for function _Flash_Memory_Modify
 11590  1503                     _Flash_Memory_Modify:	
 11591                           
 11592                           ;MCU_B1.c: 975: char i = 0;
 11593                           
 11594                           ;incstack = 0
 11595                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11596  1503  0020               	movlb	0	; select bank0
 11597  1504  01A5               	clrf	Flash_Memory_Modify@i
 11598                           
 11599                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11600  1505  01A5               	clrf	Flash_Memory_Modify@i
 11601  1506  3020               	movlw	32
 11602  1507  0225               	subwf	Flash_Memory_Modify@i,w
 11603  1508  1803               	btfsc	3,0
 11604  1509  2D1F               	goto	l7311
 11605  150A                     l7305:	
 11606                           
 11607                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11608  150A  0825               	movf	Flash_Memory_Modify@i,w
 11609  150B  319E  2667  3195   	fcall	_Flash_Memory_Read
 11610  150E  0020               	movlb	0	; select bank0
 11611  150F  00A4               	movwf	??_Flash_Memory_Modify
 11612  1510  0825               	movf	Flash_Memory_Modify@i,w
 11613  1511  3E20               	addlw	_Memory& (0+255)
 11614  1512  0086               	movwf	6
 11615  1513  3002               	movlw	2	; select bank4/5
 11616  1514  0087               	movwf	7
 11617  1515  0824               	movf	??_Flash_Memory_Modify,w
 11618  1516  0081               	movwf	1
 11619  1517  3001               	movlw	1
 11620  1518  00A4               	movwf	??_Flash_Memory_Modify
 11621  1519  0824               	movf	??_Flash_Memory_Modify,w
 11622  151A  07A5               	addwf	Flash_Memory_Modify@i,f
 11623  151B  3020               	movlw	32
 11624  151C  0225               	subwf	Flash_Memory_Modify@i,w
 11625  151D  1C03               	skipc
 11626  151E  2D0A               	goto	l7305
 11627  151F                     l7311:	
 11628                           
 11629                           ;MCU_B1.c: 978: }
 11630                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11631  151F  086F               	movf	_product,w
 11632  1520  0086               	movwf	6
 11633  1521  3002               	movlw	2	; select bank4/5
 11634  1522  0087               	movwf	7
 11635  1523  3002               	movlw	2	; select bank4/5
 11636  1524  3F4C               	moviw [12]fsr1
 11637  1525  00A0               	movwf	setMemory_Data@data
 11638  1526  3000               	movlw	0
 11639  1527  319B  23D5  3195   	fcall	_setMemory_Data
 11640                           
 11641                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11642  152A  0020               	movlb	0	; select bank0
 11643  152B  086F               	movf	_product,w
 11644  152C  0086               	movwf	6
 11645  152D  3002               	movlw	2	; select bank4/5
 11646  152E  0087               	movwf	7
 11647  152F  3002               	movlw	2	; select bank4/5
 11648  1530  3F4D               	moviw [13]fsr1
 11649  1531  00A0               	movwf	setMemory_Data@data
 11650  1532  3001               	movlw	1
 11651  1533  319B  23D5  3195   	fcall	_setMemory_Data
 11652                           
 11653                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11654  1536  0020               	movlb	0	; select bank0
 11655  1537  086F               	movf	_product,w
 11656  1538  0086               	movwf	6
 11657  1539  3002               	movlw	2	; select bank4/5
 11658  153A  0087               	movwf	7
 11659  153B  3002               	movlw	2	; select bank4/5
 11660  153C  3F4E               	moviw [14]fsr1
 11661  153D  00A0               	movwf	setMemory_Data@data
 11662  153E  3002               	movlw	2
 11663  153F  319B  23D5  3195   	fcall	_setMemory_Data
 11664                           
 11665                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11666  1542  0024               	movlb	4	; select bank4
 11667  1543  1D44               	btfss	(_Memory^(0+512)+36),2
 11668  1544  2D49               	goto	l1322
 11669                           
 11670                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11671  1545  1144               	bcf	(_Memory^(0+512)+36),2
 11672                           
 11673                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11674  1546  0021               	movlb	1	; select bank1
 11675  1547  11A0               	bcf	_myMain^(0+128),3
 11676                           
 11677                           ;MCU_B1.c: 990: myMain.First = 0;
 11678  1548  12A0               	bcf	_myMain^(0+128),5
 11679  1549                     l1322:	
 11680                           
 11681                           ;MCU_B1.c: 992: }
 11682                           ;MCU_B1.c: 993: GIE = 0;
 11683  1549  138B               	bcf	11,7	;volatile
 11684                           
 11685                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11686  154A  319B  23E1  3195   	fcall	_Flash_Memory_Erasing
 11687                           
 11688                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11689  154D  3191  219E         	fcall	_Flash_Memory_Write
 11690                           
 11691                           ;MCU_B1.c: 996: GIE = 1;
 11692  154F  178B               	bsf	11,7	;volatile
 11693  1550  0008               	return
 11694  1551                     __end_of_Flash_Memory_Modify:	
 11695                           
 11696                           	psect	text65
 11697  1BE1                     __ptext65:	
 11698 ;; *************** function _Flash_Memory_Erasing *****************
 11699 ;; Defined at:
 11700 ;;		line 963 in file "../src/MCU_B1.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;		None
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;		None
 11705 ;; Return value:  Size  Location     Type
 11706 ;;		None               void
 11707 ;; Registers used:
 11708 ;;		wreg, status,2, status,0, pclath, cstack
 11709 ;; Tracked objects:
 11710 ;;		On entry : 0/0
 11711 ;;		On exit  : 0/0
 11712 ;;		Unchanged: 0/0
 11713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;Total ram usage:        0 bytes
 11719 ;; Hardware stack levels used:    1
 11720 ;; Hardware stack levels required when called:    6
 11721 ;; This function calls:
 11722 ;;		_Flash_Memory_Unlock
 11723 ;; This function is called by:
 11724 ;;		_Flash_Memory_Modify
 11725 ;; This function uses a non-reentrant model
 11726 ;;
 11727                           
 11728                           
 11729                           ;psect for function _Flash_Memory_Erasing
 11730  1BE1                     _Flash_Memory_Erasing:	
 11731                           
 11732                           ;MCU_B1.c: 964: CFGS = 0;
 11733                           
 11734                           ;incstack = 0
 11735                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11736  1BE1  0023               	movlb	3	; select bank3
 11737  1BE2  1315               	bcf	21,6	;volatile
 11738                           
 11739                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11740  1BE3  3030               	movlw	48
 11741  1BE4  0092               	movwf	18	;volatile
 11742                           
 11743                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11744  1BE5  0191               	clrf	17	;volatile
 11745                           
 11746                           ;MCU_B1.c: 967: FREE = 1;
 11747  1BE6  1615               	bsf	21,4	;volatile
 11748                           
 11749                           ;MCU_B1.c: 968: WREN = 1;
 11750  1BE7  1515               	bsf	21,2	;volatile
 11751                           
 11752                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11753  1BE8  319B  23AA         	fcall	_Flash_Memory_Unlock
 11754                           
 11755                           ;MCU_B1.c: 970: WREN = 0;
 11756  1BEA  0023               	movlb	3	; select bank3
 11757  1BEB  1115               	bcf	21,2	;volatile
 11758  1BEC  0008               	return
 11759  1BED                     __end_of_Flash_Memory_Erasing:	
 11760                           
 11761                           	psect	text66
 11762  0620                     __ptext66:	
 11763 ;; *************** function _Flash_Memory_Initialization *****************
 11764 ;; Defined at:
 11765 ;;		line 860 in file "../src/MCU_B1.c"
 11766 ;; Parameters:    Size  Location     Type
 11767 ;;		None
 11768 ;; Auto vars:     Size  Location     Type
 11769 ;;  i               1   62[BANK0 ] unsigned char 
 11770 ;; Return value:  Size  Location     Type
 11771 ;;		None               void
 11772 ;; Registers used:
 11773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11774 ;; Tracked objects:
 11775 ;;		On entry : 0/0
 11776 ;;		On exit  : 0/0
 11777 ;;		Unchanged: 0/0
 11778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;Total ram usage:        2 bytes
 11784 ;; Hardware stack levels used:    1
 11785 ;; Hardware stack levels required when called:    8
 11786 ;; This function calls:
 11787 ;;		_Flash_Memory_Read
 11788 ;;		_Flash_Memory_Write
 11789 ;;		_setMemory_Data
 11790 ;;		_setPercentValue
 11791 ;; This function is called by:
 11792 ;;		_main
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           
 11797                           ;psect for function _Flash_Memory_Initialization
 11798  0620                     _Flash_Memory_Initialization:	
 11799                           
 11800                           ;MCU_B1.c: 861: char i = 0;
 11801                           
 11802                           ;incstack = 0
 11803                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11804  0620  0020               	movlb	0	; select bank0
 11805  0621  01DE               	clrf	Flash_Memory_Initialization@i
 11806                           
 11807                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11808  0622  301F               	movlw	31
 11809  0623  319E  2667  3186   	fcall	_Flash_Memory_Read
 11810  0626  3AAA               	xorlw	170
 11811  0627  1D03               	skipz
 11812  0628  2E92               	goto	l7781
 11813                           
 11814                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11815  0629  3000               	movlw	0
 11816  062A  319E  2667  3186   	fcall	_Flash_Memory_Read
 11817  062D  0020               	movlb	0	; select bank0
 11818  062E  00DD               	movwf	??_Flash_Memory_Initialization
 11819  062F  086F               	movf	_product,w
 11820  0630  3E0C               	addlw	12
 11821  0631  0086               	movwf	6
 11822  0632  3002               	movlw	2	; select bank4/5
 11823  0633  0087               	movwf	7
 11824  0634  085D               	movf	??_Flash_Memory_Initialization,w
 11825  0635  0081               	movwf	1
 11826                           
 11827                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11828  0636  3001               	movlw	1
 11829  0637  319E  2667  3186   	fcall	_Flash_Memory_Read
 11830  063A  0020               	movlb	0	; select bank0
 11831  063B  00DD               	movwf	??_Flash_Memory_Initialization
 11832  063C  086F               	movf	_product,w
 11833  063D  3E0D               	addlw	13
 11834  063E  0086               	movwf	6
 11835  063F  3002               	movlw	2	; select bank4/5
 11836  0640  0087               	movwf	7
 11837  0641  085D               	movf	??_Flash_Memory_Initialization,w
 11838  0642  0081               	movwf	1
 11839                           
 11840                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11841  0643  3002               	movlw	2
 11842  0644  319E  2667  3186   	fcall	_Flash_Memory_Read
 11843  0647  0020               	movlb	0	; select bank0
 11844  0648  00DD               	movwf	??_Flash_Memory_Initialization
 11845  0649  086F               	movf	_product,w
 11846  064A  3E0E               	addlw	14
 11847  064B  0086               	movwf	6
 11848  064C  3002               	movlw	2	; select bank4/5
 11849  064D  0087               	movwf	7
 11850  064E  085D               	movf	??_Flash_Memory_Initialization,w
 11851  064F  0081               	movwf	1
 11852                           
 11853                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 11854  0650  3040               	movlw	64
 11855  0651  3194  2473  3186   	fcall	_setPercentValue
 11856  0654  0020               	movlb	0	; select bank0
 11857  0655  00DD               	movwf	??_Flash_Memory_Initialization
 11858  0656  085D               	movf	??_Flash_Memory_Initialization,w
 11859  0657  00DE               	movwf	Flash_Memory_Initialization@i
 11860                           
 11861                           ;MCU_B1.c: 872: product->Data[21] = i;
 11862  0658  085E               	movf	Flash_Memory_Initialization@i,w
 11863  0659  00DD               	movwf	??_Flash_Memory_Initialization
 11864  065A  086F               	movf	_product,w
 11865  065B  3E15               	addlw	21
 11866  065C  0086               	movwf	6
 11867  065D  3002               	movlw	2	; select bank4/5
 11868  065E  0087               	movwf	7
 11869  065F  085D               	movf	??_Flash_Memory_Initialization,w
 11870  0660  0081               	movwf	1
 11871                           
 11872                           ;MCU_B1.c: 873: product->Data[22] = i;
 11873  0661  085E               	movf	Flash_Memory_Initialization@i,w
 11874  0662  00DD               	movwf	??_Flash_Memory_Initialization
 11875  0663  086F               	movf	_product,w
 11876  0664  3E16               	addlw	22
 11877  0665  0086               	movwf	6
 11878  0666  3002               	movlw	2	; select bank4/5
 11879  0667  0087               	movwf	7
 11880  0668  085D               	movf	??_Flash_Memory_Initialization,w
 11881  0669  0081               	movwf	1
 11882                           
 11883                           ;MCU_B1.c: 874: product->Data[23] = i;
 11884  066A  085E               	movf	Flash_Memory_Initialization@i,w
 11885  066B  00DD               	movwf	??_Flash_Memory_Initialization
 11886  066C  086F               	movf	_product,w
 11887  066D  3E17               	addlw	23
 11888  066E  0086               	movwf	6
 11889  066F  3002               	movlw	2	; select bank4/5
 11890  0670  0087               	movwf	7
 11891  0671  085D               	movf	??_Flash_Memory_Initialization,w
 11892  0672  0081               	movwf	1
 11893                           
 11894                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11895  0673  086F               	movf	_product,w
 11896  0674  3E0C               	addlw	12
 11897  0675  0086               	movwf	6
 11898  0676  3002               	movlw	2	; select bank4/5
 11899  0677  0087               	movwf	7
 11900  0678  0801               	movf	1,w
 11901  0679  3AFF               	xorlw	255
 11902  067A  1D03               	skipz
 11903  067B  0008               	return
 11904  067C  086F               	movf	_product,w
 11905  067D  3E0D               	addlw	13
 11906  067E  0086               	movwf	6
 11907  067F  3002               	movlw	2	; select bank4/5
 11908  0680  0087               	movwf	7
 11909  0681  0801               	movf	1,w
 11910  0682  3AFF               	xorlw	255
 11911  0683  1D03               	skipz
 11912  0684  0008               	return
 11913  0685  086F               	movf	_product,w
 11914  0686  3E0E               	addlw	14
 11915  0687  0086               	movwf	6
 11916  0688  3002               	movlw	2	; select bank4/5
 11917  0689  0087               	movwf	7
 11918  068A  0801               	movf	1,w
 11919  068B  3AFF               	xorlw	255
 11920  068C  1D03               	skipz
 11921  068D  0008               	return
 11922                           
 11923                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11924  068E  0021               	movlb	1	; select bank1
 11925  068F  15A0               	bsf	_myMain^(0+128),3
 11926                           
 11927                           ;MCU_B1.c: 878: myMain.First = 1;
 11928  0690  16A0               	bsf	_myMain^(0+128),5
 11929                           
 11930                           ;MCU_B1.c: 879: }
 11931                           ;MCU_B1.c: 880: } else {
 11932  0691  0008               	return
 11933  0692                     l7781:	
 11934                           
 11935                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 11936  0692  3040               	movlw	64
 11937  0693  3194  2473  3186   	fcall	_setPercentValue
 11938  0696  0020               	movlb	0	; select bank0
 11939  0697  00DD               	movwf	??_Flash_Memory_Initialization
 11940  0698  085D               	movf	??_Flash_Memory_Initialization,w
 11941  0699  00DE               	movwf	Flash_Memory_Initialization@i
 11942                           
 11943                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11944  069A  30FF               	movlw	255
 11945  069B  00DD               	movwf	??_Flash_Memory_Initialization
 11946  069C  085D               	movf	??_Flash_Memory_Initialization,w
 11947  069D  00A0               	movwf	setMemory_Data@data
 11948  069E  3000               	movlw	0
 11949  069F  319B  23D5  3186   	fcall	_setMemory_Data
 11950                           
 11951                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11952  06A2  30FF               	movlw	255
 11953  06A3  0020               	movlb	0	; select bank0
 11954  06A4  00DD               	movwf	??_Flash_Memory_Initialization
 11955  06A5  085D               	movf	??_Flash_Memory_Initialization,w
 11956  06A6  00A0               	movwf	setMemory_Data@data
 11957  06A7  3001               	movlw	1
 11958  06A8  319B  23D5  3186   	fcall	_setMemory_Data
 11959                           
 11960                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11961  06AB  30FF               	movlw	255
 11962  06AC  0020               	movlb	0	; select bank0
 11963  06AD  00DD               	movwf	??_Flash_Memory_Initialization
 11964  06AE  085D               	movf	??_Flash_Memory_Initialization,w
 11965  06AF  00A0               	movwf	setMemory_Data@data
 11966  06B0  3002               	movlw	2
 11967  06B1  319B  23D5  3186   	fcall	_setMemory_Data
 11968                           
 11969                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11970  06B4  30FF               	movlw	255
 11971  06B5  0020               	movlb	0	; select bank0
 11972  06B6  00DD               	movwf	??_Flash_Memory_Initialization
 11973  06B7  085D               	movf	??_Flash_Memory_Initialization,w
 11974  06B8  00A0               	movwf	setMemory_Data@data
 11975  06B9  3003               	movlw	3
 11976  06BA  319B  23D5  3186   	fcall	_setMemory_Data
 11977                           
 11978                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11979  06BD  30FF               	movlw	255
 11980  06BE  0020               	movlb	0	; select bank0
 11981  06BF  00DD               	movwf	??_Flash_Memory_Initialization
 11982  06C0  085D               	movf	??_Flash_Memory_Initialization,w
 11983  06C1  00A0               	movwf	setMemory_Data@data
 11984  06C2  3004               	movlw	4
 11985  06C3  319B  23D5  3186   	fcall	_setMemory_Data
 11986                           
 11987                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11988  06C6  30FF               	movlw	255
 11989  06C7  0020               	movlb	0	; select bank0
 11990  06C8  00DD               	movwf	??_Flash_Memory_Initialization
 11991  06C9  085D               	movf	??_Flash_Memory_Initialization,w
 11992  06CA  00A0               	movwf	setMemory_Data@data
 11993  06CB  3005               	movlw	5
 11994  06CC  319B  23D5  3186   	fcall	_setMemory_Data
 11995                           
 11996                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11997  06CF  30AA               	movlw	170
 11998  06D0  0020               	movlb	0	; select bank0
 11999  06D1  00DD               	movwf	??_Flash_Memory_Initialization
 12000  06D2  085D               	movf	??_Flash_Memory_Initialization,w
 12001  06D3  00A0               	movwf	setMemory_Data@data
 12002  06D4  301F               	movlw	31
 12003  06D5  319B  23D5  3186   	fcall	_setMemory_Data
 12004                           
 12005                           ;MCU_B1.c: 889: product->Data[21] = i;
 12006  06D8  0020               	movlb	0	; select bank0
 12007  06D9  085E               	movf	Flash_Memory_Initialization@i,w
 12008  06DA  00DD               	movwf	??_Flash_Memory_Initialization
 12009  06DB  086F               	movf	_product,w
 12010  06DC  3E15               	addlw	21
 12011  06DD  0086               	movwf	6
 12012  06DE  3002               	movlw	2	; select bank4/5
 12013  06DF  0087               	movwf	7
 12014  06E0  085D               	movf	??_Flash_Memory_Initialization,w
 12015  06E1  0081               	movwf	1
 12016                           
 12017                           ;MCU_B1.c: 890: product->Data[22] = i;
 12018  06E2  085E               	movf	Flash_Memory_Initialization@i,w
 12019  06E3  00DD               	movwf	??_Flash_Memory_Initialization
 12020  06E4  086F               	movf	_product,w
 12021  06E5  3E16               	addlw	22
 12022  06E6  0086               	movwf	6
 12023  06E7  3002               	movlw	2	; select bank4/5
 12024  06E8  0087               	movwf	7
 12025  06E9  085D               	movf	??_Flash_Memory_Initialization,w
 12026  06EA  0081               	movwf	1
 12027                           
 12028                           ;MCU_B1.c: 891: product->Data[23] = i;
 12029  06EB  085E               	movf	Flash_Memory_Initialization@i,w
 12030  06EC  00DD               	movwf	??_Flash_Memory_Initialization
 12031  06ED  086F               	movf	_product,w
 12032  06EE  3E17               	addlw	23
 12033  06EF  0086               	movwf	6
 12034  06F0  3002               	movlw	2	; select bank4/5
 12035  06F1  0087               	movwf	7
 12036  06F2  085D               	movf	??_Flash_Memory_Initialization,w
 12037  06F3  0081               	movwf	1
 12038                           
 12039                           ;MCU_B1.c: 892: GIE = 0;
 12040  06F4  138B               	bcf	11,7	;volatile
 12041                           
 12042                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12043  06F5  3191  219E         	fcall	_Flash_Memory_Write
 12044                           
 12045                           ;MCU_B1.c: 894: GIE = 1;
 12046  06F7  178B               	bsf	11,7	;volatile
 12047                           
 12048                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12049  06F8  0021               	movlb	1	; select bank1
 12050  06F9  15A0               	bsf	_myMain^(0+128),3
 12051                           
 12052                           ;MCU_B1.c: 896: myMain.First = 1;
 12053  06FA  16A0               	bsf	_myMain^(0+128),5
 12054  06FB  0008               	return
 12055  06FC                     __end_of_Flash_Memory_Initialization:	
 12056                           
 12057                           	psect	text67
 12058  1BD5                     __ptext67:	
 12059 ;; *************** function _setMemory_Data *****************
 12060 ;; Defined at:
 12061 ;;		line 1011 in file "../src/MCU_B1.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  address         1    wreg     unsigned char 
 12064 ;;  data            1    0[BANK0 ] unsigned char 
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;  address         1    2[BANK0 ] unsigned char 
 12067 ;; Return value:  Size  Location     Type
 12068 ;;		None               void
 12069 ;; Registers used:
 12070 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12071 ;; Tracked objects:
 12072 ;;		On entry : 0/0
 12073 ;;		On exit  : 0/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12076 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;Total ram usage:        3 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; Hardware stack levels required when called:    5
 12083 ;; This function calls:
 12084 ;;		Nothing
 12085 ;; This function is called by:
 12086 ;;		_Flash_Memory_Initialization
 12087 ;;		_Flash_Memory_Modify
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           
 12092                           ;psect for function _setMemory_Data
 12093  1BD5                     _setMemory_Data:	
 12094                           
 12095                           ;incstack = 0
 12096                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12097                           ;setMemory_Data@address stored from wreg
 12098  1BD5  0020               	movlb	0	; select bank0
 12099  1BD6  00A2               	movwf	setMemory_Data@address
 12100                           
 12101                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12102  1BD7  0820               	movf	setMemory_Data@data,w
 12103  1BD8  00A1               	movwf	??_setMemory_Data
 12104  1BD9  0822               	movf	setMemory_Data@address,w
 12105  1BDA  3E20               	addlw	_Memory& (0+255)
 12106  1BDB  0086               	movwf	6
 12107  1BDC  3002               	movlw	2	; select bank4/5
 12108  1BDD  0087               	movwf	7
 12109  1BDE  0821               	movf	??_setMemory_Data,w
 12110  1BDF  0081               	movwf	1
 12111  1BE0  0008               	return
 12112  1BE1                     __end_of_setMemory_Data:	
 12113                           
 12114                           	psect	text68
 12115  119E                     __ptext68:	
 12116 ;; *************** function _Flash_Memory_Write *****************
 12117 ;; Defined at:
 12118 ;;		line 944 in file "../src/MCU_B1.c"
 12119 ;; Parameters:    Size  Location     Type
 12120 ;;		None
 12121 ;; Auto vars:     Size  Location     Type
 12122 ;;  i               1    1[BANK0 ] unsigned char 
 12123 ;; Return value:  Size  Location     Type
 12124 ;;		None               void
 12125 ;; Registers used:
 12126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;Total ram usage:        2 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    6
 12139 ;; This function calls:
 12140 ;;		_Flash_Memory_Unlock
 12141 ;; This function is called by:
 12142 ;;		_Flash_Memory_Initialization
 12143 ;;		_Flash_Memory_Modify
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           
 12148                           ;psect for function _Flash_Memory_Write
 12149  119E                     _Flash_Memory_Write:	
 12150                           
 12151                           ;MCU_B1.c: 945: char i = 0;
 12152                           
 12153                           ;incstack = 0
 12154                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12155  119E  0020               	movlb	0	; select bank0
 12156  119F  01A1               	clrf	Flash_Memory_Write@i
 12157                           
 12158                           ;MCU_B1.c: 946: CFGS = 0;
 12159  11A0  0023               	movlb	3	; select bank3
 12160  11A1  1315               	bcf	21,6	;volatile
 12161                           
 12162                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12163  11A2  3030               	movlw	48
 12164  11A3  0092               	movwf	18	;volatile
 12165                           
 12166                           ;MCU_B1.c: 948: PMDATH = 0;
 12167  11A4  0194               	clrf	20	;volatile
 12168                           
 12169                           ;MCU_B1.c: 949: FREE = 0;
 12170  11A5  1215               	bcf	21,4	;volatile
 12171                           
 12172                           ;MCU_B1.c: 950: LWLO = 1;
 12173  11A6  1695               	bsf	21,5	;volatile
 12174                           
 12175                           ;MCU_B1.c: 951: WREN = 1;
 12176  11A7  1515               	bsf	21,2	;volatile
 12177                           
 12178                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12179  11A8  0020               	movlb	0	; select bank0
 12180  11A9  01A1               	clrf	Flash_Memory_Write@i
 12181  11AA  3020               	movlw	32
 12182  11AB  0221               	subwf	Flash_Memory_Write@i,w
 12183  11AC  1803               	btfsc	3,0
 12184  11AD  29C6               	goto	l1313
 12185  11AE                     l6865:	
 12186                           
 12187                           ;MCU_B1.c: 953: PMADRL = i;
 12188  11AE  0821               	movf	Flash_Memory_Write@i,w
 12189  11AF  0023               	movlb	3	; select bank3
 12190  11B0  0091               	movwf	17	;volatile
 12191                           
 12192                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12193  11B1  0020               	movlb	0	; select bank0
 12194  11B2  0821               	movf	Flash_Memory_Write@i,w
 12195  11B3  3E20               	addlw	_Memory& (0+255)
 12196  11B4  0086               	movwf	6
 12197  11B5  3002               	movlw	2	; select bank4/5
 12198  11B6  0087               	movwf	7
 12199  11B7  0801               	movf	1,w
 12200  11B8  0023               	movlb	3	; select bank3
 12201  11B9  0093               	movwf	19	;volatile
 12202                           
 12203                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12204  11BA  319B  23AA  3191   	fcall	_Flash_Memory_Unlock
 12205  11BD  3001               	movlw	1
 12206  11BE  0020               	movlb	0	; select bank0
 12207  11BF  00A0               	movwf	??_Flash_Memory_Write
 12208  11C0  0820               	movf	??_Flash_Memory_Write,w
 12209  11C1  07A1               	addwf	Flash_Memory_Write@i,f
 12210  11C2  3020               	movlw	32
 12211  11C3  0221               	subwf	Flash_Memory_Write@i,w
 12212  11C4  1C03               	skipc
 12213  11C5  29AE               	goto	l6865
 12214  11C6                     l1313:	
 12215                           
 12216                           ;MCU_B1.c: 956: }
 12217                           ;MCU_B1.c: 957: LWLO = 0;
 12218  11C6  0023               	movlb	3	; select bank3
 12219  11C7  1295               	bcf	21,5	;volatile
 12220                           
 12221                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12222  11C8  319B  23AA         	fcall	_Flash_Memory_Unlock
 12223                           
 12224                           ;MCU_B1.c: 959: WREN = 0;
 12225  11CA  0023               	movlb	3	; select bank3
 12226  11CB  1115               	bcf	21,2	;volatile
 12227  11CC  0008               	return
 12228  11CD                     __end_of_Flash_Memory_Write:	
 12229                           
 12230                           	psect	text69
 12231  1BAA                     __ptext69:	
 12232 ;; *************** function _Flash_Memory_Unlock *****************
 12233 ;; Defined at:
 12234 ;;		line 923 in file "../src/MCU_B1.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;		None
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;		None
 12239 ;; Return value:  Size  Location     Type
 12240 ;;		None               void
 12241 ;; Registers used:
 12242 ;;		wreg
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;Total ram usage:        0 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; Hardware stack levels required when called:    5
 12255 ;; This function calls:
 12256 ;;		Nothing
 12257 ;; This function is called by:
 12258 ;;		_Flash_Memory_Write
 12259 ;;		_Flash_Memory_Erasing
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           
 12264                           ;psect for function _Flash_Memory_Unlock
 12265  1BAA                     _Flash_Memory_Unlock:	
 12266                           
 12267                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12268                           
 12269                           ;incstack = 0
 12270                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12271  1BAA  3055               	movlw	85
 12272  1BAB  0023               	movlb	3	; select bank3
 12273  1BAC  0096               	movwf	22	;volatile
 12274                           
 12275                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12276  1BAD  30AA               	movlw	170
 12277  1BAE  0096               	movwf	22	;volatile
 12278                           
 12279                           ;MCU_B1.c: 926: WR = 1;
 12280  1BAF  1495               	bsf	21,1	;volatile
 12281                           
 12282                           ;MCU_B1.c: 927: __nop();
 12283  1BB0  0000               	nop
 12284                           
 12285                           ;MCU_B1.c: 928: __nop();
 12286  1BB1  0000               	nop
 12287  1BB2  0008               	return
 12288  1BB3                     __end_of_Flash_Memory_Unlock:	
 12289                           
 12290                           	psect	text70
 12291  1E67                     __ptext70:	
 12292 ;; *************** function _Flash_Memory_Read *****************
 12293 ;; Defined at:
 12294 ;;		line 932 in file "../src/MCU_B1.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  address         1    wreg     unsigned char 
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;  address         1    2[BANK0 ] unsigned char 
 12299 ;;  ret             1    3[BANK0 ] unsigned char 
 12300 ;;  i               1    1[BANK0 ] unsigned char 
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  1    wreg      unsigned char 
 12303 ;; Registers used:
 12304 ;;		wreg, status,2
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;Total ram usage:        4 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; Hardware stack levels required when called:    5
 12317 ;; This function calls:
 12318 ;;		Nothing
 12319 ;; This function is called by:
 12320 ;;		_Flash_Memory_Initialization
 12321 ;;		_Flash_Memory_Modify
 12322 ;; This function uses a non-reentrant model
 12323 ;;
 12324                           
 12325                           
 12326                           ;psect for function _Flash_Memory_Read
 12327  1E67                     _Flash_Memory_Read:	
 12328                           
 12329                           ;incstack = 0
 12330                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12331                           ;Flash_Memory_Read@address stored from wreg
 12332  1E67  0020               	movlb	0	; select bank0
 12333  1E68  00A2               	movwf	Flash_Memory_Read@address
 12334                           
 12335                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12336  1E69  01A1               	clrf	Flash_Memory_Read@i
 12337  1E6A  01A3               	clrf	Flash_Memory_Read@ret
 12338                           
 12339                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12340  1E6B  3030               	movlw	48
 12341  1E6C  0023               	movlb	3	; select bank3
 12342  1E6D  0092               	movwf	18	;volatile
 12343                           
 12344                           ;MCU_B1.c: 935: PMADRL = address;
 12345  1E6E  0020               	movlb	0	; select bank0
 12346  1E6F  0822               	movf	Flash_Memory_Read@address,w
 12347  1E70  0023               	movlb	3	; select bank3
 12348  1E71  0091               	movwf	17	;volatile
 12349                           
 12350                           ;MCU_B1.c: 936: CFGS = 0;
 12351  1E72  1315               	bcf	21,6	;volatile
 12352                           
 12353                           ;MCU_B1.c: 937: RD = 1;
 12354  1E73  1415               	bsf	21,0	;volatile
 12355                           
 12356                           ;MCU_B1.c: 938: i = PMDATH;
 12357  1E74  0814               	movf	20,w	;volatile
 12358  1E75  0020               	movlb	0	; select bank0
 12359  1E76  00A0               	movwf	??_Flash_Memory_Read
 12360  1E77  0820               	movf	??_Flash_Memory_Read,w
 12361  1E78  00A1               	movwf	Flash_Memory_Read@i
 12362                           
 12363                           ;MCU_B1.c: 939: ret = PMDATL;
 12364  1E79  0023               	movlb	3	; select bank3
 12365  1E7A  0813               	movf	19,w	;volatile
 12366  1E7B  0020               	movlb	0	; select bank0
 12367  1E7C  00A0               	movwf	??_Flash_Memory_Read
 12368  1E7D  0820               	movf	??_Flash_Memory_Read,w
 12369  1E7E  00A3               	movwf	Flash_Memory_Read@ret
 12370                           
 12371                           ;MCU_B1.c: 940: return ret;
 12372  1E7F  0823               	movf	Flash_Memory_Read@ret,w
 12373  1E80  0008               	return
 12374  1E81                     __end_of_Flash_Memory_Read:	
 12375                           
 12376                           	psect	text71
 12377  1200                     __ptext71:	
 12378 ;; *************** function _DimmerLights_Main *****************
 12379 ;; Defined at:
 12380 ;;		line 404 in file "../src/Dimmer_B1.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;		None               void
 12387 ;; Registers used:
 12388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;Total ram usage:        4 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:   11
 12401 ;; This function calls:
 12402 ;;		_getLoad_OK
 12403 ;;		_getMain_All_Error_Status
 12404 ;;		_getMain_LightsStatus
 12405 ;;		_setDimmerLights_Main
 12406 ;; This function is called by:
 12407 ;;		_main
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410                           
 12411                           
 12412                           ;psect for function _DimmerLights_Main
 12413  1200                     _DimmerLights_Main:	
 12414                           
 12415                           ;Dimmer_B1.c: 406: if (getMain_All_Error_Status(0) == 0) {
 12416                           
 12417                           ;incstack = 0
 12418                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12419  1200  3000               	movlw	0
 12420  1201  3191  21CD  3192   	fcall	_getMain_All_Error_Status
 12421  1204  3800               	iorlw	0
 12422  1205  1D03               	skipz
 12423  1206  2A2A               	goto	l777
 12424                           
 12425                           ;Dimmer_B1.c: 407: if (Dimmer.LoadOK == 1) {
 12426  1207  0022               	movlb	2	; select bank2
 12427  1208  1CA0               	btfss	_Dimmer^(0+256),1
 12428  1209  2A2C               	goto	l7723
 12429                           
 12430                           ;Dimmer_B1.c: 408: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12431  120A  319B  2392  3192   	fcall	_getLoad_OK
 12432  120D  3A01               	xorlw	1
 12433  120E  1903               	skipnz
 12434  120F  2A21               	goto	l7719
 12435  1210  3191  2172  3192   	fcall	_getMain_LightsStatus
 12436  1213  3A00               	xorlw	0
 12437  1214  1903               	skipnz
 12438  1215  2A21               	goto	l7719
 12439  1216  0022               	movlb	2	; select bank2
 12440  1217  0C20               	rrf	_Dimmer^(0+256),w
 12441  1218  3901               	andlw	1
 12442  1219  0020               	movlb	0	; select bank0
 12443  121A  00E6               	movwf	??_DimmerLights_Main
 12444  121B  01E7               	clrf	??_DimmerLights_Main+1
 12445  121C  0866               	movf	??_DimmerLights_Main,w
 12446  121D  00E8               	movwf	_DimmerLights_Main$2494
 12447  121E  0867               	movf	??_DimmerLights_Main+1,w
 12448  121F  00E9               	movwf	_DimmerLights_Main$2494+1
 12449  1220  2A24               	goto	l7721
 12450  1221                     l7719:	
 12451  1221  0020               	movlb	0	; select bank0
 12452  1222  01E8               	clrf	_DimmerLights_Main$2494
 12453  1223  01E9               	clrf	_DimmerLights_Main$2494+1
 12454  1224                     l7721:	
 12455  1224  0868               	movf	_DimmerLights_Main$2494,w
 12456  1225  0022               	movlb	2	; select bank2
 12457  1226  10A0               	bcf	_Dimmer^(0+256),1
 12458  1227  1D03               	skipz
 12459  1228  14A0               	bsf	_Dimmer^(0+256),1
 12460                           
 12461                           ;Dimmer_B1.c: 409: }
 12462                           ;Dimmer_B1.c: 410: } else {
 12463  1229  2A2C               	goto	l7723
 12464  122A                     l777:	
 12465                           
 12466                           ;Dimmer_B1.c: 411: Dimmer.LoadOK = 0;
 12467  122A  0022               	movlb	2	; select bank2
 12468  122B  10A0               	bcf	_Dimmer^(0+256),1
 12469  122C                     l7723:	
 12470                           
 12471                           ;Dimmer_B1.c: 412: }
 12472                           ;Dimmer_B1.c: 416: setDimmerLights_Main(1);
 12473  122C  3001               	movlw	1
 12474  122D  3196  2646  3192   	fcall	_setDimmerLights_Main
 12475                           
 12476                           ;Dimmer_B1.c: 420: setDimmerLights_Main(2);
 12477  1230  3002               	movlw	2
 12478  1231  3196  2646         	fcall	_setDimmerLights_Main
 12479  1233  0008               	return
 12480  1234                     __end_of_DimmerLights_Main:	
 12481                           
 12482                           	psect	text72
 12483  1646                     __ptext72:	
 12484 ;; *************** function _setDimmerLights_Main *****************
 12485 ;; Defined at:
 12486 ;;		line 430 in file "../src/Dimmer_B1.c"
 12487 ;; Parameters:    Size  Location     Type
 12488 ;;  lights          1    wreg     unsigned char 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;  lights          1   69[BANK0 ] unsigned char 
 12491 ;; Return value:  Size  Location     Type
 12492 ;;		None               void
 12493 ;; Registers used:
 12494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;Total ram usage:        1 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:   10
 12507 ;; This function calls:
 12508 ;;		_DimmerLightsPointSelect
 12509 ;;		_setBuz
 12510 ;;		_setDimmerLights
 12511 ;;		_setDimmerLights_Adj
 12512 ;; This function is called by:
 12513 ;;		_DimmerLights_Main
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           
 12518                           ;psect for function _setDimmerLights_Main
 12519  1646                     _setDimmerLights_Main:	
 12520                           
 12521                           ;incstack = 0
 12522                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12523                           ;setDimmerLights_Main@lights stored from wreg
 12524  1646  0020               	movlb	0	; select bank0
 12525  1647  00E5               	movwf	setDimmerLights_Main@lights
 12526                           
 12527                           ;Dimmer_B1.c: 431: DimmerLightsPointSelect(lights);
 12528  1648  0865               	movf	setDimmerLights_Main@lights,w
 12529  1649  319C  24FE  3196   	fcall	_DimmerLightsPointSelect
 12530                           
 12531                           ;Dimmer_B1.c: 432: if (DimmerLights->Trigger == 1) {
 12532  164C  0879               	movf	_DimmerLights,w
 12533  164D  3E08               	addlw	8
 12534  164E  0086               	movwf	6
 12535  164F  3001               	movlw	1	; select bank2/3
 12536  1650  0087               	movwf	7
 12537  1651  1D01               	btfss	1,2
 12538  1652  2E70               	goto	l7195
 12539                           
 12540                           ;Dimmer_B1.c: 434: if (Dimmer.LoadOK == 0) {
 12541  1653  0022               	movlb	2	; select bank2
 12542  1654  18A0               	btfsc	_Dimmer^(0+256),1
 12543  1655  0008               	return
 12544                           
 12545                           ;Dimmer_B1.c: 435: DimmerLights->Trigger = 0;
 12546  1656  0879               	movf	_DimmerLights,w
 12547  1657  3E08               	addlw	8
 12548  1658  0086               	movwf	6
 12549  1659  3001               	movlw	1	; select bank2/3
 12550  165A  0087               	movwf	7
 12551  165B  1101               	bcf	1,2
 12552                           
 12553                           ;Dimmer_B1.c: 437: if (DimmerLights->Switch == 1) {
 12554  165C  0879               	movf	_DimmerLights,w
 12555  165D  3E08               	addlw	8
 12556  165E  0086               	movwf	6
 12557  165F  3001               	movlw	1	; select bank2/3
 12558  1660  0087               	movwf	7
 12559  1661  1C81               	btfss	1,1
 12560  1662  2E6A               	goto	l7193
 12561                           
 12562                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 1);
 12563  1663  0020               	movlb	0	; select bank0
 12564  1664  01A7               	clrf	setDimmerLights@status
 12565  1665  0AA7               	incf	setDimmerLights@status,f
 12566  1666  0865               	movf	setDimmerLights_Main@lights,w
 12567  1667  318D  2577         	fcall	_setDimmerLights
 12568                           
 12569                           ;Dimmer_B1.c: 439: } else {
 12570  1669  0008               	return
 12571  166A                     l7193:	
 12572                           
 12573                           ;Dimmer_B1.c: 440: setDimmerLights(lights, 0);
 12574  166A  0020               	movlb	0	; select bank0
 12575  166B  01A7               	clrf	setDimmerLights@status
 12576  166C  0865               	movf	setDimmerLights_Main@lights,w
 12577  166D  318D  2577         	fcall	_setDimmerLights
 12578                           
 12579                           ;Dimmer_B1.c: 441: }
 12580                           ;Dimmer_B1.c: 442: }
 12581                           ;Dimmer_B1.c: 443: } else {
 12582  166F  0008               	return
 12583  1670                     l7195:	
 12584                           
 12585                           ;Dimmer_B1.c: 444: if (DimmerLights->TriggerAdj == 1) {
 12586  1670  0879               	movf	_DimmerLights,w
 12587  1671  3E08               	addlw	8
 12588  1672  0086               	movwf	6
 12589  1673  3001               	movlw	1	; select bank2/3
 12590  1674  0087               	movwf	7
 12591  1675  1E01               	btfss	1,4
 12592  1676  0008               	return
 12593                           
 12594                           ;Dimmer_B1.c: 445: if (Dimmer.LoadOK == 0) {
 12595  1677  0022               	movlb	2	; select bank2
 12596  1678  18A0               	btfsc	_Dimmer^(0+256),1
 12597  1679  0008               	return
 12598                           
 12599                           ;Dimmer_B1.c: 446: DimmerLights->TriggerAdj = 0;
 12600  167A  0879               	movf	_DimmerLights,w
 12601  167B  3E08               	addlw	8
 12602  167C  0086               	movwf	6
 12603  167D  3001               	movlw	1	; select bank2/3
 12604  167E  0087               	movwf	7
 12605  167F  1201               	bcf	1,4
 12606                           
 12607                           ;Dimmer_B1.c: 447: if (DimmerLights->AdjGo == 1) {
 12608  1680  0879               	movf	_DimmerLights,w
 12609  1681  3E08               	addlw	8
 12610  1682  0086               	movwf	6
 12611  1683  3001               	movlw	1	; select bank2/3
 12612  1684  0087               	movwf	7
 12613  1685  1D81               	btfss	1,3
 12614  1686  2E97               	goto	l7205
 12615                           
 12616                           ;Dimmer_B1.c: 448: setDimmerLights_Adj(lights, 1);
 12617  1687  0020               	movlb	0	; select bank0
 12618  1688  01E2               	clrf	setDimmerLights_Adj@status
 12619  1689  0AE2               	incf	setDimmerLights_Adj@status,f
 12620  168A  0865               	movf	setDimmerLights_Main@lights,w
 12621  168B  3195  25A1  3196   	fcall	_setDimmerLights_Adj
 12622                           
 12623                           ;Dimmer_B1.c: 449: setBuz(1, 100);
 12624  168E  3064               	movlw	100
 12625  168F  0020               	movlb	0	; select bank0
 12626  1690  00A9               	movwf	setBuz@time
 12627  1691  3000               	movlw	0
 12628  1692  00AA               	movwf	setBuz@time+1
 12629  1693  3001               	movlw	1
 12630  1694  3197  274D         	fcall	_setBuz
 12631                           
 12632                           ;Dimmer_B1.c: 450: } else {
 12633  1696  0008               	return
 12634  1697                     l7205:	
 12635                           
 12636                           ;Dimmer_B1.c: 451: setDimmerLights_Adj(lights, 0);
 12637  1697  0020               	movlb	0	; select bank0
 12638  1698  01E2               	clrf	setDimmerLights_Adj@status
 12639  1699  0865               	movf	setDimmerLights_Main@lights,w
 12640  169A  3195  25A1         	fcall	_setDimmerLights_Adj
 12641  169C  0008               	return
 12642  169D                     __end_of_setDimmerLights_Main:	
 12643                           
 12644                           	psect	text73
 12645  15A1                     __ptext73:	
 12646 ;; *************** function _setDimmerLights_Adj *****************
 12647 ;; Defined at:
 12648 ;;		line 751 in file "../src/Dimmer_B1.c"
 12649 ;; Parameters:    Size  Location     Type
 12650 ;;  lights          1    wreg     unsigned char 
 12651 ;;  status          1   66[BANK0 ] unsigned char 
 12652 ;; Auto vars:     Size  Location     Type
 12653 ;;  lights          1   68[BANK0 ] unsigned char 
 12654 ;; Return value:  Size  Location     Type
 12655 ;;		None               void
 12656 ;; Registers used:
 12657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12658 ;; Tracked objects:
 12659 ;;		On entry : 0/0
 12660 ;;		On exit  : 0/0
 12661 ;;		Unchanged: 0/0
 12662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12663 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;Total ram usage:        3 bytes
 12668 ;; Hardware stack levels used:    1
 12669 ;; Hardware stack levels required when called:    9
 12670 ;; This function calls:
 12671 ;;		_DimmerLightsPointSelect
 12672 ;;		_getMain_All_Error_Status
 12673 ;;		_setRF_DimmerLights
 12674 ;;		_setTxData
 12675 ;; This function is called by:
 12676 ;;		_setDimmerLights_Main
 12677 ;; This function uses a non-reentrant model
 12678 ;;
 12679                           
 12680                           
 12681                           ;psect for function _setDimmerLights_Adj
 12682  15A1                     _setDimmerLights_Adj:	
 12683                           
 12684                           ;incstack = 0
 12685                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12686                           ;setDimmerLights_Adj@lights stored from wreg
 12687  15A1  0020               	movlb	0	; select bank0
 12688  15A2  00E4               	movwf	setDimmerLights_Adj@lights
 12689                           
 12690                           ;Dimmer_B1.c: 752: DimmerLightsPointSelect(lights);
 12691  15A3  0864               	movf	setDimmerLights_Adj@lights,w
 12692  15A4  319C  24FE  3195   	fcall	_DimmerLightsPointSelect
 12693                           
 12694                           ;Dimmer_B1.c: 753: if (status == 1) {
 12695  15A7  0020               	movlb	0	; select bank0
 12696  15A8  0862               	movf	setDimmerLights_Adj@status,w
 12697  15A9  3A01               	xorlw	1
 12698  15AA  1D03               	skipz
 12699  15AB  2DB7               	goto	l6751
 12700                           
 12701                           ;Dimmer_B1.c: 754: DimmerLights->AdjFlag = 1;
 12702  15AC  0879               	movf	_DimmerLights,w
 12703  15AD  0086               	movwf	6
 12704  15AE  3001               	movlw	1	; select bank2/3
 12705  15AF  0087               	movwf	7
 12706  15B0  1581               	bsf	1,3
 12707                           
 12708                           ;Dimmer_B1.c: 755: DimmerLights->Signal = 1;
 12709  15B1  0879               	movf	_DimmerLights,w
 12710  15B2  0086               	movwf	6
 12711  15B3  3001               	movlw	1	; select bank2/3
 12712  15B4  0087               	movwf	7
 12713  15B5  1481               	bsf	1,1
 12714                           
 12715                           ;Dimmer_B1.c: 756: } else {
 12716  15B6  0008               	return
 12717  15B7                     l6751:	
 12718                           
 12719                           ;Dimmer_B1.c: 757: if (DimmerLights->AdjFlag == 1) {
 12720  15B7  0879               	movf	_DimmerLights,w
 12721  15B8  0086               	movwf	6
 12722  15B9  3001               	movlw	1	; select bank2/3
 12723  15BA  0087               	movwf	7
 12724  15BB  1D81               	btfss	1,3
 12725  15BC  0008               	return
 12726                           
 12727                           ;Dimmer_B1.c: 758: DimmerLights->Signal = 0;
 12728  15BD  0879               	movf	_DimmerLights,w
 12729  15BE  0086               	movwf	6
 12730  15BF  3001               	movlw	1	; select bank2/3
 12731  15C0  0087               	movwf	7
 12732  15C1  1081               	bcf	1,1
 12733                           
 12734                           ;Dimmer_B1.c: 759: DimmerLights->AdjFlag = 0;
 12735  15C2  0879               	movf	_DimmerLights,w
 12736  15C3  0086               	movwf	6
 12737  15C4  3001               	movlw	1	; select bank2/3
 12738  15C5  0087               	movwf	7
 12739  15C6  1181               	bcf	1,3
 12740                           
 12741                           ;Dimmer_B1.c: 760: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12742  15C7  0879               	movf	_DimmerLights,w
 12743  15C8  3E04               	addlw	4
 12744  15C9  0086               	movwf	6
 12745  15CA  3001               	movlw	1	; select bank2/3
 12746  15CB  0087               	movwf	7
 12747  15CC  0801               	movf	1,w
 12748  15CD  00E3               	movwf	??_setDimmerLights_Adj
 12749  15CE  0879               	movf	_DimmerLights,w
 12750  15CF  3E05               	addlw	5
 12751  15D0  0086               	movwf	6
 12752  15D1  3001               	movlw	1	; select bank2/3
 12753  15D2  0087               	movwf	7
 12754  15D3  0863               	movf	??_setDimmerLights_Adj,w
 12755  15D4  0081               	movwf	1
 12756                           
 12757                           ;Dimmer_B1.c: 770: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12758  15D5  3000               	movlw	0
 12759  15D6  3191  21CD  3195   	fcall	_getMain_All_Error_Status
 12760  15D9  3A00               	xorlw	0
 12761  15DA  3000               	movlw	0
 12762  15DB  1903               	skipnz
 12763  15DC  3001               	movlw	1
 12764  15DD  0020               	movlb	0	; select bank0
 12765  15DE  00E3               	movwf	??_setDimmerLights_Adj
 12766  15DF  0DE3               	rlf	??_setDimmerLights_Adj,f
 12767  15E0  0022               	movlb	2	; select bank2
 12768  15E1  0820               	movf	_Dimmer^(0+256),w
 12769  15E2  0020               	movlb	0	; select bank0
 12770  15E3  0663               	xorwf	??_setDimmerLights_Adj,w
 12771  15E4  39FD               	andlw	-3
 12772  15E5  0663               	xorwf	??_setDimmerLights_Adj,w
 12773  15E6  0022               	movlb	2	; select bank2
 12774  15E7  00A0               	movwf	_Dimmer^(0+256)
 12775                           
 12776                           ;Dimmer_B1.c: 773: setRF_DimmerLights(lights, 1);
 12777  15E8  0020               	movlb	0	; select bank0
 12778  15E9  01DD               	clrf	setRF_DimmerLights@on
 12779  15EA  0ADD               	incf	setRF_DimmerLights@on,f
 12780  15EB  0864               	movf	setDimmerLights_Adj@lights,w
 12781  15EC  318A  22AA  3195   	fcall	_setRF_DimmerLights
 12782                           
 12783                           ;Dimmer_B1.c: 774: setTxData();
 12784  15EF  3186  26FC         	fcall	_setTxData
 12785  15F1  0008               	return
 12786  15F2                     __end_of_setDimmerLights_Adj:	
 12787                           
 12788                           	psect	text74
 12789  0D77                     __ptext74:	
 12790 ;; *************** function _setDimmerLights *****************
 12791 ;; Defined at:
 12792 ;;		line 630 in file "../src/Dimmer_B1.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  lights          1    wreg     unsigned char 
 12795 ;;  status          1    7[BANK0 ] unsigned char 
 12796 ;; Auto vars:     Size  Location     Type
 12797 ;;  lights          1    9[BANK0 ] unsigned char 
 12798 ;; Return value:  Size  Location     Type
 12799 ;;		None               void
 12800 ;; Registers used:
 12801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12802 ;; Tracked objects:
 12803 ;;		On entry : 0/0
 12804 ;;		On exit  : 0/0
 12805 ;;		Unchanged: 0/0
 12806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12807 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;Total ram usage:        3 bytes
 12812 ;; Hardware stack levels used:    1
 12813 ;; Hardware stack levels required when called:    7
 12814 ;; This function calls:
 12815 ;;		_DimmerLightsPointSelect
 12816 ;;		_getMain_All_Error_Status
 12817 ;;		_setDimmerLights_Line
 12818 ;;		_setLED
 12819 ;; This function is called by:
 12820 ;;		_setDimmerLights_Main
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           
 12825                           ;psect for function _setDimmerLights
 12826  0D77                     _setDimmerLights:	
 12827                           
 12828                           ;incstack = 0
 12829                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12830                           ;setDimmerLights@lights stored from wreg
 12831  0D77  0020               	movlb	0	; select bank0
 12832  0D78  00A9               	movwf	setDimmerLights@lights
 12833                           
 12834                           ;Dimmer_B1.c: 631: DimmerLightsPointSelect(lights);
 12835  0D79  0829               	movf	setDimmerLights@lights,w
 12836  0D7A  319C  24FE  318D   	fcall	_DimmerLightsPointSelect
 12837                           
 12838                           ;Dimmer_B1.c: 634: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12839  0D7D  3000               	movlw	0
 12840  0D7E  3191  21CD  318D   	fcall	_getMain_All_Error_Status
 12841  0D81  3A00               	xorlw	0
 12842  0D82  3000               	movlw	0
 12843  0D83  1903               	skipnz
 12844  0D84  3001               	movlw	1
 12845  0D85  0020               	movlb	0	; select bank0
 12846  0D86  00A8               	movwf	??_setDimmerLights
 12847  0D87  0DA8               	rlf	??_setDimmerLights,f
 12848  0D88  0022               	movlb	2	; select bank2
 12849  0D89  0820               	movf	_Dimmer^(0+256),w
 12850  0D8A  0020               	movlb	0	; select bank0
 12851  0D8B  0628               	xorwf	??_setDimmerLights,w
 12852  0D8C  39FD               	andlw	-3
 12853  0D8D  0628               	xorwf	??_setDimmerLights,w
 12854  0D8E  0022               	movlb	2	; select bank2
 12855  0D8F  00A0               	movwf	_Dimmer^(0+256)
 12856                           
 12857                           ;Dimmer_B1.c: 638: if (status == 1) {
 12858  0D90  0020               	movlb	0	; select bank0
 12859  0D91  0827               	movf	setDimmerLights@status,w
 12860  0D92  3A01               	xorlw	1
 12861  0D93  1D03               	skipz
 12862  0D94  2DCB               	goto	l6729
 12863                           
 12864                           ;Dimmer_B1.c: 639: DimmerLights->Loop = 1;
 12865  0D95  0879               	movf	_DimmerLights,w
 12866  0D96  3E09               	addlw	9
 12867  0D97  0086               	movwf	6
 12868  0D98  3001               	movlw	1	; select bank2/3
 12869  0D99  0087               	movwf	7
 12870  0D9A  1481               	bsf	1,1
 12871                           
 12872                           ;Dimmer_B1.c: 640: setLED(lights, 0);
 12873  0D9B  01A2               	clrf	setLED@command
 12874  0D9C  0829               	movf	setDimmerLights@lights,w
 12875  0D9D  3195  2551  318D   	fcall	_setLED
 12876                           
 12877                           ;Dimmer_B1.c: 642: setDimmerLights_Line(lights);
 12878  0DA0  0020               	movlb	0	; select bank0
 12879  0DA1  0829               	movf	setDimmerLights@lights,w
 12880  0DA2  319D  25C4         	fcall	_setDimmerLights_Line
 12881                           
 12882                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 1;
 12883  0DA4  0879               	movf	_DimmerLights,w
 12884  0DA5  0086               	movwf	6
 12885  0DA6  3001               	movlw	1	; select bank2/3
 12886  0DA7  0087               	movwf	7
 12887  0DA8  1701               	bsf	1,6
 12888                           
 12889                           ;Dimmer_B1.c: 645: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12890  0DA9  0879               	movf	_DimmerLights,w
 12891  0DAA  3E05               	addlw	5
 12892  0DAB  0086               	movwf	6
 12893  0DAC  3001               	movlw	1	; select bank2/3
 12894  0DAD  0087               	movwf	7
 12895  0DAE  0801               	movf	1,w
 12896  0DAF  0020               	movlb	0	; select bank0
 12897  0DB0  00A8               	movwf	??_setDimmerLights
 12898  0DB1  0879               	movf	_DimmerLights,w
 12899  0DB2  3E04               	addlw	4
 12900  0DB3  0086               	movwf	6
 12901  0DB4  3001               	movlw	1	; select bank2/3
 12902  0DB5  0087               	movwf	7
 12903  0DB6  0828               	movf	??_setDimmerLights,w
 12904  0DB7  0081               	movwf	1
 12905                           
 12906                           ;Dimmer_B1.c: 649: DimmerLights->DimmingValue = ((char)(80*0.8));
 12907  0DB8  3040               	movlw	64
 12908  0DB9  00A8               	movwf	??_setDimmerLights
 12909  0DBA  0879               	movf	_DimmerLights,w
 12910  0DBB  3E04               	addlw	4
 12911  0DBC  0086               	movwf	6
 12912  0DBD  3001               	movlw	1	; select bank2/3
 12913  0DBE  0087               	movwf	7
 12914  0DBF  0828               	movf	??_setDimmerLights,w
 12915  0DC0  0081               	movwf	1
 12916                           
 12917                           ;Dimmer_B1.c: 656: DimmerLights->DimmingTimeValue = 7;
 12918  0DC1  3007               	movlw	7
 12919  0DC2  00A8               	movwf	??_setDimmerLights
 12920  0DC3  0879               	movf	_DimmerLights,w
 12921  0DC4  3E02               	addlw	2
 12922  0DC5  0086               	movwf	6
 12923  0DC6  3001               	movlw	1	; select bank2/3
 12924  0DC7  0087               	movwf	7
 12925  0DC8  0828               	movf	??_setDimmerLights,w
 12926  0DC9  0081               	movwf	1
 12927                           
 12928                           ;Dimmer_B1.c: 658: } else {
 12929  0DCA  0008               	return
 12930  0DCB                     l6729:	
 12931                           
 12932                           ;Dimmer_B1.c: 659: DimmerLights->StatusFlag = 0;
 12933  0DCB  0879               	movf	_DimmerLights,w
 12934  0DCC  0086               	movwf	6
 12935  0DCD  3001               	movlw	1	; select bank2/3
 12936  0DCE  0087               	movwf	7
 12937  0DCF  1301               	bcf	1,6
 12938                           
 12939                           ;Dimmer_B1.c: 660: DimmerLights->Loop = 0;
 12940  0DD0  0879               	movf	_DimmerLights,w
 12941  0DD1  3E09               	addlw	9
 12942  0DD2  0086               	movwf	6
 12943  0DD3  3001               	movlw	1	; select bank2/3
 12944  0DD4  0087               	movwf	7
 12945  0DD5  1081               	bcf	1,1
 12946                           
 12947                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12948  0DD6  01A2               	clrf	setLED@command
 12949  0DD7  0AA2               	incf	setLED@command,f
 12950  0DD8  0829               	movf	setDimmerLights@lights,w
 12951  0DD9  3195  2551  318D   	fcall	_setLED
 12952                           
 12953                           ;Dimmer_B1.c: 679: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12954  0DDC  0879               	movf	_DimmerLights,w
 12955  0DDD  3E06               	addlw	6
 12956  0DDE  0086               	movwf	6
 12957  0DDF  3001               	movlw	1	; select bank2/3
 12958  0DE0  0087               	movwf	7
 12959  0DE1  0801               	movf	1,w
 12960  0DE2  0020               	movlb	0	; select bank0
 12961  0DE3  00A8               	movwf	??_setDimmerLights
 12962  0DE4  0879               	movf	_DimmerLights,w
 12963  0DE5  3E04               	addlw	4
 12964  0DE6  0086               	movwf	6
 12965  0DE7  3001               	movlw	1	; select bank2/3
 12966  0DE8  0087               	movwf	7
 12967  0DE9  0828               	movf	??_setDimmerLights,w
 12968  0DEA  0081               	movwf	1
 12969                           
 12970                           ;Dimmer_B1.c: 684: DimmerLights->MosfetClose = 1;
 12971  0DEB  0879               	movf	_DimmerLights,w
 12972  0DEC  3E08               	addlw	8
 12973  0DED  0086               	movwf	6
 12974  0DEE  3001               	movlw	1	; select bank2/3
 12975  0DEF  0087               	movwf	7
 12976  0DF0  1781               	bsf	1,7
 12977                           
 12978                           ;Dimmer_B1.c: 687: DimmerLights->AdjFlag = 0;
 12979  0DF1  0879               	movf	_DimmerLights,w
 12980  0DF2  0086               	movwf	6
 12981  0DF3  3001               	movlw	1	; select bank2/3
 12982  0DF4  0087               	movwf	7
 12983  0DF5  1181               	bcf	1,3
 12984                           
 12985                           ;Dimmer_B1.c: 688: DimmerLights->AdjStatus = 0;
 12986  0DF6  0879               	movf	_DimmerLights,w
 12987  0DF7  0086               	movwf	6
 12988  0DF8  3001               	movlw	1	; select bank2/3
 12989  0DF9  0087               	movwf	7
 12990  0DFA  1201               	bcf	1,4
 12991                           
 12992                           ;Dimmer_B1.c: 689: DimmerLights->AdjRF = 0;
 12993  0DFB  0879               	movf	_DimmerLights,w
 12994  0DFC  0086               	movwf	6
 12995  0DFD  3001               	movlw	1	; select bank2/3
 12996  0DFE  0087               	movwf	7
 12997  0DFF  1101               	bcf	1,2
 12998                           
 12999                           ;Dimmer_B1.c: 690: DimmerLights->DimmingTimeValue = 7;
 13000  0E00  3007               	movlw	7
 13001  0E01  00A8               	movwf	??_setDimmerLights
 13002  0E02  0879               	movf	_DimmerLights,w
 13003  0E03  3E02               	addlw	2
 13004  0E04  0086               	movwf	6
 13005  0E05  3001               	movlw	1	; select bank2/3
 13006  0E06  0087               	movwf	7
 13007  0E07  0828               	movf	??_setDimmerLights,w
 13008  0E08  0081               	movwf	1
 13009  0E09  0008               	return
 13010  0E0A                     __end_of_setDimmerLights:	
 13011                           
 13012                           	psect	text75
 13013  1551                     __ptext75:	
 13014 ;; *************** function _setLED *****************
 13015 ;; Defined at:
 13016 ;;		line 73 in file "../src/LED_B1.c"
 13017 ;; Parameters:    Size  Location     Type
 13018 ;;  led             1    wreg     unsigned char 
 13019 ;;  command         1    2[BANK0 ] unsigned char 
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;  led             1    3[BANK0 ] unsigned char 
 13022 ;; Return value:  Size  Location     Type
 13023 ;;		None               void
 13024 ;; Registers used:
 13025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13026 ;; Tracked objects:
 13027 ;;		On entry : 0/0
 13028 ;;		On exit  : 0/0
 13029 ;;		Unchanged: 0/0
 13030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13031 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13035 ;;Total ram usage:        2 bytes
 13036 ;; Hardware stack levels used:    1
 13037 ;; Hardware stack levels required when called:    6
 13038 ;; This function calls:
 13039 ;;		_LedPointSelect
 13040 ;; This function is called by:
 13041 ;;		_setDimmerLights
 13042 ;;		_setLED_Initialization
 13043 ;;		_setSw_Initialization
 13044 ;;		_setMain_Exception
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           
 13049                           ;psect for function _setLED
 13050  1551                     _setLED:	
 13051                           
 13052                           ;incstack = 0
 13053                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13054                           ;setLED@led stored from wreg
 13055  1551  0020               	movlb	0	; select bank0
 13056  1552  00A3               	movwf	setLED@led
 13057                           
 13058                           ;LED_B1.c: 74: LedPointSelect(led);
 13059  1553  0823               	movf	setLED@led,w
 13060  1554  319E  2681  3195   	fcall	_LedPointSelect
 13061                           
 13062                           ;LED_B1.c: 75: if (command == 0) {
 13063  1557  0020               	movlb	0	; select bank0
 13064  1558  08A2               	movf	setLED@command,f
 13065  1559  1D03               	skipz
 13066  155A  2D68               	goto	l6435
 13067                           
 13068                           ;LED_B1.c: 77: if (led == 1) {
 13069  155B  0823               	movf	setLED@led,w
 13070  155C  3A01               	xorlw	1
 13071  155D  1D03               	skipz
 13072  155E  2D60               	goto	l6427
 13073                           
 13074                           ;LED_B1.c: 81: RA3 = 1;
 13075  155F  158C               	bsf	12,3	;volatile
 13076  1560                     l6427:	
 13077                           
 13078                           ;LED_B1.c: 83: }
 13079                           ;LED_B1.c: 86: if (led == 2) {
 13080  1560  0823               	movf	setLED@led,w
 13081  1561  3A02               	xorlw	2
 13082  1562  1903               	btfsc	3,2
 13083                           
 13084                           ;LED_B1.c: 90: RC7 = 1;
 13085  1563  178E               	bsf	14,7	;volatile
 13086                           
 13087                           ;LED_B1.c: 92: }
 13088                           ;LED_B1.c: 104: if (led == 99) {
 13089  1564  0823               	movf	setLED@led,w
 13090  1565  3A63               	xorlw	99
 13091  1566  1903               	btfsc	3,2
 13092                           
 13093                           ;LED_B1.c: 108: RB5 = 1;
 13094  1567  168D               	bsf	13,5	;volatile
 13095  1568                     l6435:	
 13096                           
 13097                           ;LED_B1.c: 110: }
 13098                           ;LED_B1.c: 112: } if (command == 1) {
 13099  1568  0822               	movf	setLED@command,w
 13100  1569  3A01               	xorlw	1
 13101  156A  1D03               	skipz
 13102  156B  2D79               	goto	l6449
 13103                           
 13104                           ;LED_B1.c: 114: if (led == 1) {
 13105  156C  0823               	movf	setLED@led,w
 13106  156D  3A01               	xorlw	1
 13107  156E  1D03               	skipz
 13108  156F  2D71               	goto	l6441
 13109                           
 13110                           ;LED_B1.c: 118: RA3 = 0;
 13111  1570  118C               	bcf	12,3	;volatile
 13112  1571                     l6441:	
 13113                           
 13114                           ;LED_B1.c: 120: }
 13115                           ;LED_B1.c: 123: if (led == 2) {
 13116  1571  0823               	movf	setLED@led,w
 13117  1572  3A02               	xorlw	2
 13118  1573  1903               	btfsc	3,2
 13119                           
 13120                           ;LED_B1.c: 127: RC7 = 0;
 13121  1574  138E               	bcf	14,7	;volatile
 13122                           
 13123                           ;LED_B1.c: 129: }
 13124                           ;LED_B1.c: 141: if (led == 99) {
 13125  1575  0823               	movf	setLED@led,w
 13126  1576  3A63               	xorlw	99
 13127  1577  1903               	btfsc	3,2
 13128                           
 13129                           ;LED_B1.c: 145: RB5 = 0;
 13130  1578  128D               	bcf	13,5	;volatile
 13131  1579                     l6449:	
 13132                           
 13133                           ;LED_B1.c: 147: }
 13134                           ;LED_B1.c: 149: } if (command == 10) {
 13135  1579  0822               	movf	setLED@command,w
 13136  157A  3A0A               	xorlw	10
 13137  157B  1D03               	skipz
 13138  157C  2D97               	goto	l6465
 13139                           
 13140                           ;LED_B1.c: 150: LED->GO = 0;
 13141  157D  087B               	movf	_LED,w
 13142  157E  0086               	movwf	6
 13143  157F  3001               	movlw	1	; select bank2/3
 13144  1580  0087               	movwf	7
 13145  1581  1081               	bcf	1,1
 13146                           
 13147                           ;LED_B1.c: 151: LED->Time = 0;
 13148  1582  0A7B               	incf	_LED,w
 13149  1583  0086               	movwf	6
 13150  1584  3001               	movlw	1	; select bank2/3
 13151  1585  0087               	movwf	7
 13152  1586  3000               	movlw	0
 13153  1587  3FC0               	movwi [0]fsr1
 13154  1588  3FC1               	movwi [1]fsr1
 13155                           
 13156                           ;LED_B1.c: 153: if (led == 1) {
 13157  1589  0823               	movf	setLED@led,w
 13158  158A  3A01               	xorlw	1
 13159  158B  1D03               	skipz
 13160  158C  2D8F               	goto	l6457
 13161                           
 13162                           ;LED_B1.c: 157: RA3 = 1;
 13163  158D  158C               	bsf	12,3	;volatile
 13164                           
 13165                           ;LED_B1.c: 159: }
 13166  158E  2D93               	goto	l6461
 13167  158F                     l6457:	
 13168                           
 13169                           ;LED_B1.c: 162: else if (led == 2) {
 13170  158F  0823               	movf	setLED@led,w
 13171  1590  3A02               	xorlw	2
 13172  1591  1903               	btfsc	3,2
 13173                           
 13174                           ;LED_B1.c: 166: RC7 = 1;
 13175  1592  178E               	bsf	14,7	;volatile
 13176  1593                     l6461:	
 13177                           
 13178                           ;LED_B1.c: 168: }
 13179                           ;LED_B1.c: 180: if (led == 99) {
 13180  1593  0823               	movf	setLED@led,w
 13181  1594  3A63               	xorlw	99
 13182  1595  1903               	btfsc	3,2
 13183                           
 13184                           ;LED_B1.c: 184: RB5 = 1;
 13185  1596  168D               	bsf	13,5	;volatile
 13186  1597                     l6465:	
 13187                           
 13188                           ;LED_B1.c: 186: }
 13189                           ;LED_B1.c: 188: }
 13190                           ;LED_B1.c: 189: if (command == 11) {
 13191  1597  0822               	movf	setLED@command,w
 13192  1598  3A0B               	xorlw	11
 13193  1599  1D03               	skipz
 13194  159A  0008               	return
 13195                           
 13196                           ;LED_B1.c: 190: LED->GO = 1;
 13197  159B  087B               	movf	_LED,w
 13198  159C  0086               	movwf	6
 13199  159D  3001               	movlw	1	; select bank2/3
 13200  159E  0087               	movwf	7
 13201  159F  1481               	bsf	1,1
 13202  15A0  0008               	return
 13203  15A1                     __end_of_setLED:	
 13204                           
 13205                           	psect	text76
 13206  1E81                     __ptext76:	
 13207 ;; *************** function _LedPointSelect *****************
 13208 ;; Defined at:
 13209 ;;		line 7 in file "../src/LED_B1.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  led             1    wreg     unsigned char 
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;  led             1    1[BANK0 ] unsigned char 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;		None               void
 13216 ;; Registers used:
 13217 ;;		wreg
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;Total ram usage:        2 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    5
 13230 ;; This function calls:
 13231 ;;		Nothing
 13232 ;; This function is called by:
 13233 ;;		_setLED_Initialization
 13234 ;;		_setLED
 13235 ;;		_setLED_Main
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           
 13240                           ;psect for function _LedPointSelect
 13241  1E81                     _LedPointSelect:	
 13242                           
 13243                           ;incstack = 0
 13244                           ; Regs used in _LedPointSelect: [wreg]
 13245                           ;LedPointSelect@led stored from wreg
 13246  1E81  0020               	movlb	0	; select bank0
 13247  1E82  00A1               	movwf	LedPointSelect@led
 13248                           
 13249                           ;LED_B1.c: 9: if (led == 1) {
 13250  1E83  0821               	movf	LedPointSelect@led,w
 13251  1E84  3A01               	xorlw	1
 13252  1E85  1D03               	skipz
 13253  1E86  2E8B               	goto	l996
 13254                           
 13255                           ;LED_B1.c: 10: LED = &VarLED1;
 13256  1E87  3064               	movlw	_VarLED1& (0+255)
 13257  1E88  00A0               	movwf	??_LedPointSelect
 13258  1E89  0820               	movf	??_LedPointSelect,w
 13259  1E8A  00FB               	movwf	_LED
 13260  1E8B                     l996:	
 13261                           
 13262                           ;LED_B1.c: 11: }
 13263                           ;LED_B1.c: 14: if (led == 2) {
 13264  1E8B  0821               	movf	LedPointSelect@led,w
 13265  1E8C  3A02               	xorlw	2
 13266  1E8D  1D03               	skipz
 13267  1E8E  2E93               	goto	l997
 13268                           
 13269                           ;LED_B1.c: 15: LED = &VarLED2;
 13270  1E8F  3068               	movlw	_VarLED2& (0+255)
 13271  1E90  00A0               	movwf	??_LedPointSelect
 13272  1E91  0820               	movf	??_LedPointSelect,w
 13273  1E92  00FB               	movwf	_LED
 13274  1E93                     l997:	
 13275                           
 13276                           ;LED_B1.c: 16: }
 13277                           ;LED_B1.c: 24: if (led == 99) {
 13278  1E93  0821               	movf	LedPointSelect@led,w
 13279  1E94  3A63               	xorlw	99
 13280  1E95  1D03               	skipz
 13281  1E96  0008               	return
 13282                           
 13283                           ;LED_B1.c: 25: LED = &VarErrLED;
 13284  1E97  3060               	movlw	_VarErrLED& (0+255)
 13285  1E98  00A0               	movwf	??_LedPointSelect
 13286  1E99  0820               	movf	??_LedPointSelect,w
 13287  1E9A  00FB               	movwf	_LED
 13288  1E9B  0008               	return
 13289  1E9C                     __end_of_LedPointSelect:	
 13290                           
 13291                           	psect	text77
 13292  1DC4                     __ptext77:	
 13293 ;; *************** function _setDimmerLights_Line *****************
 13294 ;; Defined at:
 13295 ;;		line 702 in file "../src/Dimmer_B1.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;  lights          1    wreg     unsigned char 
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;  lights          1    0[BANK0 ] unsigned char 
 13300 ;; Return value:  Size  Location     Type
 13301 ;;		None               void
 13302 ;; Registers used:
 13303 ;;		wreg
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;Total ram usage:        1 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    5
 13316 ;; This function calls:
 13317 ;;		Nothing
 13318 ;; This function is called by:
 13319 ;;		_setDimmerLights
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           
 13324                           ;psect for function _setDimmerLights_Line
 13325  1DC4                     _setDimmerLights_Line:	
 13326                           
 13327                           ;incstack = 0
 13328                           ; Regs used in _setDimmerLights_Line: [wreg]
 13329                           ;setDimmerLights_Line@lights stored from wreg
 13330  1DC4  0020               	movlb	0	; select bank0
 13331  1DC5  00A0               	movwf	setDimmerLights_Line@lights
 13332                           
 13333                           ;Dimmer_B1.c: 704: DimmerLights1.Line = 0;
 13334  1DC6  0023               	movlb	3	; select bank3
 13335  1DC7  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 13336                           
 13337                           ;Dimmer_B1.c: 707: DimmerLights2.Line = 0;
 13338  1DC8  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 13339                           
 13340                           ;Dimmer_B1.c: 713: if (lights == 1) {
 13341  1DC9  0020               	movlb	0	; select bank0
 13342  1DCA  0820               	movf	setDimmerLights_Line@lights,w
 13343  1DCB  3A01               	xorlw	1
 13344  1DCC  1D03               	skipz
 13345  1DCD  2DD1               	goto	l6475
 13346                           
 13347                           ;Dimmer_B1.c: 714: DimmerLights1.Line = 1;
 13348  1DCE  0023               	movlb	3	; select bank3
 13349  1DCF  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 13350                           
 13351                           ;Dimmer_B1.c: 715: }
 13352  1DD0  0008               	return
 13353  1DD1                     l6475:	
 13354                           
 13355                           ;Dimmer_B1.c: 718: else if (lights == 2) {
 13356  1DD1  0020               	movlb	0	; select bank0
 13357  1DD2  0820               	movf	setDimmerLights_Line@lights,w
 13358  1DD3  3A02               	xorlw	2
 13359  1DD4  1D03               	skipz
 13360  1DD5  0008               	return
 13361                           
 13362                           ;Dimmer_B1.c: 719: DimmerLights2.Line = 1;
 13363  1DD6  0023               	movlb	3	; select bank3
 13364  1DD7  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 13365  1DD8  0008               	return
 13366  1DD9                     __end_of_setDimmerLights_Line:	
 13367                           
 13368                           	psect	text78
 13369  11CD                     __ptext78:	
 13370 ;; *************** function _getMain_All_Error_Status *****************
 13371 ;; Defined at:
 13372 ;;		line 361 in file "../src/main_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;  command         1    wreg     unsigned char 
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  command         1    5[BANK0 ] unsigned char 
 13377 ;;  status          1    6[BANK0 ] unsigned char 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  1    wreg      unsigned char 
 13380 ;; Registers used:
 13381 ;;		wreg, status,2, status,0
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;Total ram usage:        7 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    5
 13394 ;; This function calls:
 13395 ;;		Nothing
 13396 ;; This function is called by:
 13397 ;;		_DimmerLights_Main
 13398 ;;		_setDimmerLights
 13399 ;;		_setDimmerLights_Adj
 13400 ;;		_Load_Main
 13401 ;;		_setTemp_Main
 13402 ;;		_setRF_Main
 13403 ;;		_getRxData
 13404 ;;		_Switch_Main
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           
 13409                           ;psect for function _getMain_All_Error_Status
 13410  11CD                     _getMain_All_Error_Status:	
 13411                           
 13412                           ;incstack = 0
 13413                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13414                           ;getMain_All_Error_Status@command stored from wreg
 13415  11CD  0020               	movlb	0	; select bank0
 13416  11CE  00A5               	movwf	getMain_All_Error_Status@command
 13417                           
 13418                           ;main_B1.c: 362: char status = 0;
 13419  11CF  01A6               	clrf	getMain_All_Error_Status@status
 13420                           
 13421                           ;main_B1.c: 373: if (status == 0 && command != 2) {
 13422  11D0  08A6               	movf	getMain_All_Error_Status@status,f
 13423  11D1  1D03               	skipz
 13424  11D2  29E7               	goto	l6407
 13425  11D3  0825               	movf	getMain_All_Error_Status@command,w
 13426  11D4  3A02               	xorlw	2
 13427  11D5  1903               	skipnz
 13428  11D6  29E7               	goto	l6407
 13429                           
 13430                           ;main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
 13431  11D7  0021               	movlb	1	; select bank1
 13432  11D8  18D4               	btfsc	_Temp^(0+128),1
 13433  11D9  29DE               	goto	l6405
 13434  11DA  0020               	movlb	0	; select bank0
 13435  11DB  01A1               	clrf	_getMain_All_Error_Status$7072
 13436  11DC  01A2               	clrf	_getMain_All_Error_Status$7072+1
 13437  11DD  29E3               	goto	l2716
 13438  11DE                     l6405:	
 13439  11DE  3002               	movlw	2
 13440  11DF  0020               	movlb	0	; select bank0
 13441  11E0  00A1               	movwf	_getMain_All_Error_Status$7072
 13442  11E1  3000               	movlw	0
 13443  11E2  00A2               	movwf	_getMain_All_Error_Status$7072+1
 13444  11E3                     l2716:	
 13445  11E3  0821               	movf	_getMain_All_Error_Status$7072,w
 13446  11E4  00A0               	movwf	??_getMain_All_Error_Status
 13447  11E5  0820               	movf	??_getMain_All_Error_Status,w
 13448  11E6  00A6               	movwf	getMain_All_Error_Status@status
 13449  11E7                     l6407:	
 13450                           
 13451                           ;main_B1.c: 375: }
 13452                           ;main_B1.c: 380: if (status == 0 && command != 3) {
 13453  11E7  08A6               	movf	getMain_All_Error_Status@status,f
 13454  11E8  1D03               	skipz
 13455  11E9  29FE               	goto	l2717
 13456  11EA  0825               	movf	getMain_All_Error_Status@command,w
 13457  11EB  3A03               	xorlw	3
 13458  11EC  1903               	skipnz
 13459  11ED  29FE               	goto	l2717
 13460                           
 13461                           ;main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
 13462  11EE  0022               	movlb	2	; select bank2
 13463  11EF  1AAA               	btfsc	_Load^(0+256),5
 13464  11F0  29F5               	goto	l6415
 13465  11F1  0020               	movlb	0	; select bank0
 13466  11F2  01A3               	clrf	_getMain_All_Error_Status$7073
 13467  11F3  01A4               	clrf	_getMain_All_Error_Status$7073+1
 13468  11F4  29FA               	goto	l2721
 13469  11F5                     l6415:	
 13470  11F5  3003               	movlw	3
 13471  11F6  0020               	movlb	0	; select bank0
 13472  11F7  00A3               	movwf	_getMain_All_Error_Status$7073
 13473  11F8  3000               	movlw	0
 13474  11F9  00A4               	movwf	_getMain_All_Error_Status$7073+1
 13475  11FA                     l2721:	
 13476  11FA  0823               	movf	_getMain_All_Error_Status$7073,w
 13477  11FB  00A0               	movwf	??_getMain_All_Error_Status
 13478  11FC  0820               	movf	??_getMain_All_Error_Status,w
 13479  11FD  00A6               	movwf	getMain_All_Error_Status@status
 13480  11FE                     l2717:	
 13481                           
 13482                           ;main_B1.c: 382: }
 13483                           ;main_B1.c: 398: return status;
 13484  11FE  0826               	movf	getMain_All_Error_Status@status,w
 13485  11FF  0008               	return
 13486  1200                     __end_of_getMain_All_Error_Status:	
 13487                           
 13488                           	psect	text79
 13489  1172                     __ptext79:	
 13490 ;; *************** function _getMain_LightsStatus *****************
 13491 ;; Defined at:
 13492 ;;		line 334 in file "../src/main_B1.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;		None
 13495 ;; Auto vars:     Size  Location     Type
 13496 ;;  i               2    6[BANK0 ] int 
 13497 ;;  status          1    8[BANK0 ] unsigned char 
 13498 ;;  count           1    5[BANK0 ] unsigned char 
 13499 ;; Return value:  Size  Location     Type
 13500 ;;                  1    wreg      unsigned char 
 13501 ;; Registers used:
 13502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;Total ram usage:        5 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; Hardware stack levels required when called:    7
 13515 ;; This function calls:
 13516 ;;		_getDimmerLights_Status
 13517 ;; This function is called by:
 13518 ;;		_DimmerLights_Main
 13519 ;;		_Flash_Memory_Main
 13520 ;;		_Load_Main
 13521 ;;		_setMain_Exception
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _getMain_LightsStatus
 13527  1172                     _getMain_LightsStatus:	
 13528                           
 13529                           ;main_B1.c: 335: char status = 0;
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13533  1172  0020               	movlb	0	; select bank0
 13534  1173  01A8               	clrf	getMain_LightsStatus@status
 13535                           
 13536                           ;main_B1.c: 341: char count = 2;
 13537  1174  3002               	movlw	2
 13538  1175  00A4               	movwf	??_getMain_LightsStatus
 13539  1176  0824               	movf	??_getMain_LightsStatus,w
 13540  1177  00A5               	movwf	getMain_LightsStatus@count
 13541                           
 13542                           ;main_B1.c: 347: for (int i = 0; i < count; i++) {
 13543  1178  01A6               	clrf	getMain_LightsStatus@i
 13544  1179  01A7               	clrf	getMain_LightsStatus@i+1
 13545  117A                     l6705:	
 13546  117A  0827               	movf	getMain_LightsStatus@i+1,w
 13547  117B  3A80               	xorlw	128
 13548  117C  00A4               	movwf	??_getMain_LightsStatus
 13549  117D  3080               	movlw	128
 13550  117E  0224               	subwf	??_getMain_LightsStatus,w
 13551  117F  1D03               	skipz
 13552  1180  2983               	goto	u5935
 13553  1181  0825               	movf	getMain_LightsStatus@count,w
 13554  1182  0226               	subwf	getMain_LightsStatus@i,w
 13555  1183                     u5935:	
 13556  1183  1803               	btfsc	3,0
 13557  1184  299B               	goto	l6707
 13558                           
 13559                           ;main_B1.c: 348: if (status == 0) {
 13560  1185  0020               	movlb	0	; select bank0
 13561  1186  08A8               	movf	getMain_LightsStatus@status,f
 13562  1187  1D03               	skipz
 13563  1188  2996               	goto	l6703
 13564                           
 13565                           ;main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 13566  1189  0826               	movf	getMain_LightsStatus@i,w
 13567  118A  3E01               	addlw	1
 13568  118B  319C  2462  3191   	fcall	_getDimmerLights_Status
 13569  118E  3A01               	xorlw	1
 13570  118F  3000               	movlw	0
 13571  1190  1903               	skipnz
 13572  1191  3001               	movlw	1
 13573  1192  0020               	movlb	0	; select bank0
 13574  1193  00A4               	movwf	??_getMain_LightsStatus
 13575  1194  0824               	movf	??_getMain_LightsStatus,w
 13576  1195  00A8               	movwf	getMain_LightsStatus@status
 13577  1196                     l6703:	
 13578  1196  3001               	movlw	1
 13579  1197  07A6               	addwf	getMain_LightsStatus@i,f
 13580  1198  3000               	movlw	0
 13581  1199  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 13582  119A  297A               	goto	l6705
 13583  119B                     l6707:	
 13584                           
 13585                           ;main_B1.c: 355: }
 13586                           ;main_B1.c: 356: }
 13587                           ;main_B1.c: 357: return status;
 13588  119B  0020               	movlb	0	; select bank0
 13589  119C  0828               	movf	getMain_LightsStatus@status,w
 13590  119D  0008               	return
 13591  119E                     __end_of_getMain_LightsStatus:	
 13592                           
 13593                           	psect	text80
 13594  1B92                     __ptext80:	
 13595 ;; *************** function _getLoad_OK *****************
 13596 ;; Defined at:
 13597 ;;		line 218 in file "../src/OverLoad_B1.c"
 13598 ;; Parameters:    Size  Location     Type
 13599 ;;		None
 13600 ;; Auto vars:     Size  Location     Type
 13601 ;;  ok              1    0[BANK0 ] unsigned char 
 13602 ;; Return value:  Size  Location     Type
 13603 ;;                  1    wreg      unsigned char 
 13604 ;; Registers used:
 13605 ;;		wreg, status,2
 13606 ;; Tracked objects:
 13607 ;;		On entry : 0/0
 13608 ;;		On exit  : 0/0
 13609 ;;		Unchanged: 0/0
 13610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;Total ram usage:        1 bytes
 13616 ;; Hardware stack levels used:    1
 13617 ;; Hardware stack levels required when called:    5
 13618 ;; This function calls:
 13619 ;;		Nothing
 13620 ;; This function is called by:
 13621 ;;		_DimmerLights_Main
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           
 13626                           ;psect for function _getLoad_OK
 13627  1B92                     _getLoad_OK:	
 13628                           
 13629                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
 13630                           
 13631                           ;incstack = 0
 13632                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13633  1B92  3000               	movlw	0
 13634  1B93  0022               	movlb	2	; select bank2
 13635  1B94  1BAA               	btfsc	_Load^(0+256),7
 13636  1B95  3001               	movlw	1
 13637  1B96  0020               	movlb	0	; select bank0
 13638  1B97  00A0               	movwf	getLoad_OK@ok
 13639                           
 13640                           ;OverLoad_B1.c: 220: return ok;
 13641  1B98  0820               	movf	getLoad_OK@ok,w
 13642  1B99  0008               	return
 13643  1B9A                     __end_of_getLoad_OK:	
 13644                           
 13645                           	psect	text81
 13646  1E04                     __ptext81:	
 13647 ;; *************** function _DimmerLights_Initialization *****************
 13648 ;; Defined at:
 13649 ;;		line 343 in file "../src/Dimmer_B1.c"
 13650 ;; Parameters:    Size  Location     Type
 13651 ;;		None
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;		None
 13654 ;; Return value:  Size  Location     Type
 13655 ;;		None               void
 13656 ;; Registers used:
 13657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;Total ram usage:        1 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    7
 13670 ;; This function calls:
 13671 ;;		_Dimmer_Initialization
 13672 ;;		_setDimmerLights_Initialization
 13673 ;; This function is called by:
 13674 ;;		_main
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678                           
 13679                           ;psect for function _DimmerLights_Initialization
 13680  1E04                     _DimmerLights_Initialization:	
 13681                           
 13682                           ;Dimmer_B1.c: 345: DimmerLights11 = &DimmerLights1;
 13683                           
 13684                           ;incstack = 0
 13685                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13686  1E04  30BE               	movlw	_DimmerLights1& (0+255)
 13687  1E05  0020               	movlb	0	; select bank0
 13688  1E06  00A4               	movwf	??_DimmerLights_Initialization
 13689  1E07  0824               	movf	??_DimmerLights_Initialization,w
 13690  1E08  0021               	movlb	1	; select bank1
 13691  1E09  00C9               	movwf	_DimmerLights11^(0+128)
 13692                           
 13693                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(1);
 13694  1E0A  3001               	movlw	1
 13695  1E0B  3190  20CE  319E   	fcall	_setDimmerLights_Initialization
 13696                           
 13697                           ;Dimmer_B1.c: 350: DimmerLights22 = &DimmerLights2;
 13698  1E0E  30CD               	movlw	_DimmerLights2& (0+255)
 13699  1E0F  0020               	movlb	0	; select bank0
 13700  1E10  00A4               	movwf	??_DimmerLights_Initialization
 13701  1E11  0824               	movf	??_DimmerLights_Initialization,w
 13702  1E12  0021               	movlb	1	; select bank1
 13703  1E13  00CA               	movwf	_DimmerLights22^(0+128)
 13704                           
 13705                           ;Dimmer_B1.c: 351: setDimmerLights_Initialization(2);
 13706  1E14  3002               	movlw	2
 13707  1E15  3190  20CE  319E   	fcall	_setDimmerLights_Initialization
 13708                           
 13709                           ;Dimmer_B1.c: 360: Dimmer_Initialization();
 13710  1E18  319B  2340         	fcall	_Dimmer_Initialization
 13711  1E1A  0008               	return
 13712  1E1B                     __end_of_DimmerLights_Initialization:	
 13713                           
 13714                           	psect	text82
 13715  10CE                     __ptext82:	
 13716 ;; *************** function _setDimmerLights_Initialization *****************
 13717 ;; Defined at:
 13718 ;;		line 366 in file "../src/Dimmer_B1.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  lights          1    wreg     unsigned char 
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;  lights          1    3[BANK0 ] unsigned char 
 13723 ;; Return value:  Size  Location     Type
 13724 ;;		None               void
 13725 ;; Registers used:
 13726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        2 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    6
 13739 ;; This function calls:
 13740 ;;		_DimmerLightsPointSelect
 13741 ;; This function is called by:
 13742 ;;		_DimmerLights_Initialization
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           
 13747                           ;psect for function _setDimmerLights_Initialization
 13748  10CE                     _setDimmerLights_Initialization:	
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13752                           ;setDimmerLights_Initialization@lights stored from wreg
 13753  10CE  0020               	movlb	0	; select bank0
 13754  10CF  00A3               	movwf	setDimmerLights_Initialization@lights
 13755                           
 13756                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13757  10D0  0823               	movf	setDimmerLights_Initialization@lights,w
 13758  10D1  319C  24FE         	fcall	_DimmerLightsPointSelect
 13759                           
 13760                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(80*0.8));
 13761  10D3  3040               	movlw	64
 13762  10D4  0020               	movlb	0	; select bank0
 13763  10D5  00A2               	movwf	??_setDimmerLights_Initialization
 13764  10D6  0879               	movf	_DimmerLights,w
 13765  10D7  3E05               	addlw	5
 13766  10D8  0086               	movwf	6
 13767  10D9  3001               	movlw	1	; select bank2/3
 13768  10DA  0087               	movwf	7
 13769  10DB  0822               	movf	??_setDimmerLights_Initialization,w
 13770  10DC  0081               	movwf	1
 13771                           
 13772                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(25*0.8));
 13773  10DD  3014               	movlw	20
 13774  10DE  00A2               	movwf	??_setDimmerLights_Initialization
 13775  10DF  0879               	movf	_DimmerLights,w
 13776  10E0  3E06               	addlw	6
 13777  10E1  0086               	movwf	6
 13778  10E2  3001               	movlw	1	; select bank2/3
 13779  10E3  0087               	movwf	7
 13780  10E4  0822               	movf	??_setDimmerLights_Initialization,w
 13781  10E5  0081               	movwf	1
 13782                           
 13783                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13784  10E6  0879               	movf	_DimmerLights,w
 13785  10E7  3E05               	addlw	5
 13786  10E8  0086               	movwf	6
 13787  10E9  3001               	movlw	1	; select bank2/3
 13788  10EA  0087               	movwf	7
 13789  10EB  0801               	movf	1,w
 13790  10EC  00A2               	movwf	??_setDimmerLights_Initialization
 13791  10ED  0879               	movf	_DimmerLights,w
 13792  10EE  3E04               	addlw	4
 13793  10EF  0086               	movwf	6
 13794  10F0  3001               	movlw	1	; select bank2/3
 13795  10F1  0087               	movwf	7
 13796  10F2  0822               	movf	??_setDimmerLights_Initialization,w
 13797  10F3  0081               	movwf	1
 13798  10F4  0008               	return
 13799  10F5                     __end_of_setDimmerLights_Initialization:	
 13800                           
 13801                           	psect	text83
 13802  1B40                     __ptext83:	
 13803 ;; *************** function _Dimmer_Initialization *****************
 13804 ;; Defined at:
 13805 ;;		line 926 in file "../src/Dimmer_B1.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;		None
 13808 ;; Auto vars:     Size  Location     Type
 13809 ;;		None
 13810 ;; Return value:  Size  Location     Type
 13811 ;;		None               void
 13812 ;; Registers used:
 13813 ;;		None
 13814 ;; Tracked objects:
 13815 ;;		On entry : 0/0
 13816 ;;		On exit  : 0/0
 13817 ;;		Unchanged: 0/0
 13818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;Total ram usage:        0 bytes
 13824 ;; Hardware stack levels used:    1
 13825 ;; Hardware stack levels required when called:    5
 13826 ;; This function calls:
 13827 ;;		Nothing
 13828 ;; This function is called by:
 13829 ;;		_DimmerLights_Initialization
 13830 ;; This function uses a non-reentrant model
 13831 ;;
 13832                           
 13833                           
 13834                           ;psect for function _Dimmer_Initialization
 13835  1B40                     _Dimmer_Initialization:	
 13836                           
 13837                           ;incstack = 0
 13838                           ; Regs used in _Dimmer_Initialization: []
 13839  1B40  0008               	return
 13840  1B41                     __end_of_Dimmer_Initialization:	
 13841                           
 13842                           	psect	text84
 13843  1B8A                     __ptext84:	
 13844 ;; *************** function _DelayOff_Main *****************
 13845 ;; Defined at:
 13846 ;;		line 41 in file "../src/DelayOff_B1.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;		None
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;		None
 13851 ;; Return value:  Size  Location     Type
 13852 ;;		None               void
 13853 ;; Registers used:
 13854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13855 ;; Tracked objects:
 13856 ;;		On entry : 0/0
 13857 ;;		On exit  : 0/0
 13858 ;;		Unchanged: 0/0
 13859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;Total ram usage:        0 bytes
 13865 ;; Hardware stack levels used:    1
 13866 ;; Hardware stack levels required when called:   11
 13867 ;; This function calls:
 13868 ;;		_DlyOff_Main
 13869 ;; This function is called by:
 13870 ;;		_main
 13871 ;; This function uses a non-reentrant model
 13872 ;;
 13873                           
 13874                           
 13875                           ;psect for function _DelayOff_Main
 13876  1B8A                     _DelayOff_Main:	
 13877                           
 13878                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13879                           
 13880                           ;incstack = 0
 13881                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13882  1B8A  3001               	movlw	1
 13883  1B8B  3189  217F  319B   	fcall	_DlyOff_Main
 13884                           
 13885                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13886  1B8E  3002               	movlw	2
 13887  1B8F  3189  217F         	fcall	_DlyOff_Main
 13888  1B91  0008               	return
 13889  1B92                     __end_of_DelayOff_Main:	
 13890                           
 13891                           	psect	text85
 13892  097F                     __ptext85:	
 13893 ;; *************** function _DlyOff_Main *****************
 13894 ;; Defined at:
 13895 ;;		line 62 in file "../src/DelayOff_B1.c"
 13896 ;; Parameters:    Size  Location     Type
 13897 ;;  sw              1    wreg     unsigned char 
 13898 ;; Auto vars:     Size  Location     Type
 13899 ;;  sw              1   72[BANK0 ] unsigned char 
 13900 ;; Return value:  Size  Location     Type
 13901 ;;		None               void
 13902 ;; Registers used:
 13903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13904 ;; Tracked objects:
 13905 ;;		On entry : 0/0
 13906 ;;		On exit  : 0/0
 13907 ;;		Unchanged: 0/0
 13908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;Total ram usage:        3 bytes
 13914 ;; Hardware stack levels used:    1
 13915 ;; Hardware stack levels required when called:   10
 13916 ;; This function calls:
 13917 ;;		_DelayOffPointSelect
 13918 ;;		_getDimmerLights_Status
 13919 ;;		_setDimmerLights_SwOff
 13920 ;;		_setDimmerLights_SwOn
 13921 ;;		_setRF_DimmerLights
 13922 ;; This function is called by:
 13923 ;;		_DelayOff_Main
 13924 ;; This function uses a non-reentrant model
 13925 ;;
 13926                           
 13927                           
 13928                           ;psect for function _DlyOff_Main
 13929  097F                     _DlyOff_Main:	
 13930                           
 13931                           ;incstack = 0
 13932                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13933                           ;DlyOff_Main@sw stored from wreg
 13934  097F  0020               	movlb	0	; select bank0
 13935  0980  00E8               	movwf	DlyOff_Main@sw
 13936                           
 13937                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13938  0981  0868               	movf	DlyOff_Main@sw,w
 13939  0982  319D  255E  3189   	fcall	_DelayOffPointSelect
 13940                           
 13941                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13942  0985  0878               	movf	_DelayOff,w
 13943  0986  0086               	movwf	6
 13944  0987  3001               	movlw	1	; select bank2/3
 13945  0988  0087               	movwf	7
 13946  0989  1C81               	btfss	1,1
 13947  098A  0008               	return
 13948                           
 13949                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13950  098B  0878               	movf	_DelayOff,w
 13951  098C  0086               	movwf	6
 13952  098D  3001               	movlw	1	; select bank2/3
 13953  098E  0087               	movwf	7
 13954  098F  3001               	movlw	1
 13955  0990  0781               	addwf	1,f
 13956  0991  3141               	addfsr 1,1
 13957  0992  1803               	skipnc
 13958  0993  0A81               	incf	1,f
 13959                           
 13960                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13961  0994  0878               	movf	_DelayOff,w
 13962  0995  0086               	movwf	6
 13963  0996  3001               	movlw	1	; select bank2/3
 13964  0997  0087               	movwf	7
 13965  0998  3F40               	moviw [0]fsr1
 13966  0999  0020               	movlb	0	; select bank0
 13967  099A  00E6               	movwf	??_DlyOff_Main
 13968  099B  3F41               	moviw [1]fsr1
 13969  099C  00E7               	movwf	??_DlyOff_Main+1
 13970  099D  3016               	movlw	22
 13971  099E  0267               	subwf	??_DlyOff_Main+1,w
 13972  099F  3012               	movlw	18
 13973  09A0  1903               	skipnz
 13974  09A1  0266               	subwf	??_DlyOff_Main,w
 13975  09A2  1C03               	skipc
 13976  09A3  0008               	return
 13977                           
 13978                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13979  09A4  0878               	movf	_DelayOff,w
 13980  09A5  0086               	movwf	6
 13981  09A6  3001               	movlw	1	; select bank2/3
 13982  09A7  0087               	movwf	7
 13983  09A8  3000               	movlw	0
 13984  09A9  3FC0               	movwi [0]fsr1
 13985  09AA  3FC1               	movwi [1]fsr1
 13986                           
 13987                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13988  09AB  3001               	movlw	1
 13989  09AC  00E6               	movwf	??_DlyOff_Main
 13990  09AD  0878               	movf	_DelayOff,w
 13991  09AE  0086               	movwf	6
 13992  09AF  3001               	movlw	1	; select bank2/3
 13993  09B0  0087               	movwf	7
 13994  09B1  0866               	movf	??_DlyOff_Main,w
 13995  09B2  0781               	addwf	1,f
 13996                           
 13997                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13998  09B3  0878               	movf	_DelayOff,w
 13999  09B4  0086               	movwf	6
 14000  09B5  3001               	movlw	1	; select bank2/3
 14001  09B6  0087               	movwf	7
 14002  09B7  0878               	movf	_DelayOff,w
 14003  09B8  0084               	movwf	4
 14004  09B9  3001               	movlw	1	; select bank2/3
 14005  09BA  0085               	movwf	5
 14006  09BB  0800               	movf	0,w
 14007  09BC  0201               	subwf	1,w
 14008  09BD  1C03               	skipc
 14009  09BE  0008               	return
 14010                           
 14011                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14012  09BF  0878               	movf	_DelayOff,w
 14013  09C0  0086               	movwf	6
 14014  09C1  3001               	movlw	1	; select bank2/3
 14015  09C2  0087               	movwf	7
 14016  09C3  0181               	clrf	1
 14017                           
 14018                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14019  09C4  0878               	movf	_DelayOff,w
 14020  09C5  0086               	movwf	6
 14021  09C6  3001               	movlw	1	; select bank2/3
 14022  09C7  0087               	movwf	7
 14023  09C8  1081               	bcf	1,1
 14024                           
 14025                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14026  09C9  0868               	movf	DlyOff_Main@sw,w
 14027  09CA  3187  27B9  3189   	fcall	_setDimmerLights_SwOn
 14028                           
 14029                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14030  09CD  0020               	movlb	0	; select bank0
 14031  09CE  0868               	movf	DlyOff_Main@sw,w
 14032  09CF  319C  2462  3189   	fcall	_getDimmerLights_Status
 14033  09D2  3A01               	xorlw	1
 14034  09D3  1D03               	skipz
 14035  09D4  29DA               	goto	l582
 14036                           
 14037                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14038  09D5  0020               	movlb	0	; select bank0
 14039  09D6  0868               	movf	DlyOff_Main@sw,w
 14040  09D7  3188  205E  3189   	fcall	_setDimmerLights_SwOff
 14041  09DA                     l582:	
 14042                           
 14043                           ;DelayOff_B1.c: 77: }
 14044                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14045  09DA  0020               	movlb	0	; select bank0
 14046  09DB  01DD               	clrf	setRF_DimmerLights@on
 14047  09DC  0868               	movf	DlyOff_Main@sw,w
 14048  09DD  318A  22AA         	fcall	_setRF_DimmerLights
 14049  09DF  0008               	return
 14050  09E0                     __end_of_DlyOff_Main:	
 14051                           
 14052                           	psect	text86
 14053  07B9                     __ptext86:	
 14054 ;; *************** function _setDimmerLights_SwOn *****************
 14055 ;; Defined at:
 14056 ;;		line 519 in file "../src/Dimmer_B1.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;  sw              1    wreg     unsigned char 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  sw              1   68[BANK0 ] unsigned char 
 14061 ;;  idle            1   67[BANK0 ] unsigned char 
 14062 ;; Return value:  Size  Location     Type
 14063 ;;		None               void
 14064 ;; Registers used:
 14065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14072 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;Total ram usage:        3 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    9
 14078 ;; This function calls:
 14079 ;;		_DimmerLightsPointSelect
 14080 ;;		_getAll_DimmerLights_AdjGO
 14081 ;;		_setBuz
 14082 ;;		_setDimmerLights_Trigger
 14083 ;;		_setRF_DimmerLights
 14084 ;;		_setTxData
 14085 ;; This function is called by:
 14086 ;;		_DlyOff_Main
 14087 ;;		_setRFSW_Control
 14088 ;;		_setSw_Main
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092                           
 14093                           ;psect for function _setDimmerLights_SwOn
 14094  07B9                     _setDimmerLights_SwOn:	
 14095                           
 14096                           ;incstack = 0
 14097                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14098                           ;setDimmerLights_SwOn@sw stored from wreg
 14099  07B9  0020               	movlb	0	; select bank0
 14100  07BA  00E4               	movwf	setDimmerLights_SwOn@sw
 14101                           
 14102                           ;Dimmer_B1.c: 520: DimmerLightsPointSelect(sw);
 14103  07BB  0864               	movf	setDimmerLights_SwOn@sw,w
 14104  07BC  319C  24FE  3187   	fcall	_DimmerLightsPointSelect
 14105                           
 14106                           ;Dimmer_B1.c: 521: char idle = 0;
 14107  07BF  0020               	movlb	0	; select bank0
 14108  07C0  01E3               	clrf	setDimmerLights_SwOn@idle
 14109                           
 14110                           ;Dimmer_B1.c: 523: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 14111  07C1  319C  2472  3187   	fcall	_getAll_DimmerLights_AdjGO
 14112  07C4  3A01               	xorlw	1
 14113  07C5  3000               	movlw	0
 14114  07C6  1903               	skipnz
 14115  07C7  3001               	movlw	1
 14116  07C8  0020               	movlb	0	; select bank0
 14117  07C9  00E2               	movwf	??_setDimmerLights_SwOn
 14118  07CA  0862               	movf	??_setDimmerLights_SwOn,w
 14119  07CB  00E3               	movwf	setDimmerLights_SwOn@idle
 14120                           
 14121                           ;Dimmer_B1.c: 525: if (idle == 0) {
 14122  07CC  08E3               	movf	setDimmerLights_SwOn@idle,f
 14123  07CD  1D03               	skipz
 14124  07CE  0008               	return
 14125                           
 14126                           ;Dimmer_B1.c: 526: DimmerLights->SwFlag = 1;
 14127  07CF  0879               	movf	_DimmerLights,w
 14128  07D0  3E09               	addlw	9
 14129  07D1  0086               	movwf	6
 14130  07D2  3001               	movlw	1	; select bank2/3
 14131  07D3  0087               	movwf	7
 14132  07D4  1701               	bsf	1,6
 14133                           
 14134                           ;Dimmer_B1.c: 527: setBuz(1, 100);
 14135  07D5  3064               	movlw	100
 14136  07D6  00A9               	movwf	setBuz@time
 14137  07D7  3000               	movlw	0
 14138  07D8  00AA               	movwf	setBuz@time+1
 14139  07D9  3001               	movlw	1
 14140  07DA  3197  274D  3187   	fcall	_setBuz
 14141                           
 14142                           ;Dimmer_B1.c: 528: if (DimmerLights->Status == 0) {
 14143  07DD  0879               	movf	_DimmerLights,w
 14144  07DE  0086               	movwf	6
 14145  07DF  3001               	movlw	1	; select bank2/3
 14146  07E0  0087               	movwf	7
 14147  07E1  1A81               	btfsc	1,5
 14148  07E2  2FF9               	goto	l6221
 14149                           
 14150                           ;Dimmer_B1.c: 529: DimmerLights->Status = 1;
 14151  07E3  0879               	movf	_DimmerLights,w
 14152  07E4  0086               	movwf	6
 14153  07E5  3001               	movlw	1	; select bank2/3
 14154  07E6  0087               	movwf	7
 14155  07E7  1681               	bsf	1,5
 14156                           
 14157                           ;Dimmer_B1.c: 530: setDimmerLights_Trigger(sw, 1);
 14158  07E8  0020               	movlb	0	; select bank0
 14159  07E9  01A2               	clrf	setDimmerLights_Trigger@command
 14160  07EA  0AA2               	incf	setDimmerLights_Trigger@command,f
 14161  07EB  0864               	movf	setDimmerLights_SwOn@sw,w
 14162  07EC  319E  26B8  3187   	fcall	_setDimmerLights_Trigger
 14163                           
 14164                           ;Dimmer_B1.c: 531: setRF_DimmerLights(sw, 1);
 14165  07EF  0020               	movlb	0	; select bank0
 14166  07F0  01DD               	clrf	setRF_DimmerLights@on
 14167  07F1  0ADD               	incf	setRF_DimmerLights@on,f
 14168  07F2  0864               	movf	setDimmerLights_SwOn@sw,w
 14169  07F3  318A  22AA  3187   	fcall	_setRF_DimmerLights
 14170                           
 14171                           ;Dimmer_B1.c: 532: setTxData();
 14172  07F6  3186  26FC         	fcall	_setTxData
 14173                           
 14174                           ;Dimmer_B1.c: 533: } else {
 14175  07F8  0008               	return
 14176  07F9                     l6221:	
 14177                           
 14178                           ;Dimmer_B1.c: 534: DimmerLights->Status = 0;
 14179  07F9  0879               	movf	_DimmerLights,w
 14180  07FA  0086               	movwf	6
 14181  07FB  3001               	movlw	1	; select bank2/3
 14182  07FC  0087               	movwf	7
 14183  07FD  1281               	bcf	1,5
 14184  07FE  0008               	return
 14185  07FF                     __end_of_setDimmerLights_SwOn:	
 14186                           
 14187                           	psect	text87
 14188  174D                     __ptext87:	
 14189 ;; *************** function _setBuz *****************
 14190 ;; Defined at:
 14191 ;;		line 22 in file "../src/Buzzer_B1.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  count           1    wreg     unsigned char 
 14194 ;;  time            2    9[BANK0 ] int 
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;  count           1   12[BANK0 ] unsigned char 
 14197 ;; Return value:  Size  Location     Type
 14198 ;;		None               void
 14199 ;; Registers used:
 14200 ;;		wreg, status,2, status,0, pclath, cstack
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;Total ram usage:        4 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; Hardware stack levels required when called:    6
 14213 ;; This function calls:
 14214 ;;		___awdiv
 14215 ;; This function is called by:
 14216 ;;		_setDimmerLights_Main
 14217 ;;		_setDimmerLights_SwOn
 14218 ;;		_setLog_Code
 14219 ;;		_setControl_Lights_Table
 14220 ;;		_setSw_Main
 14221 ;;		_my_MainTimer
 14222 ;;		_setMain_Exception
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           
 14227                           ;psect for function _setBuz
 14228  174D                     _setBuz:	
 14229                           
 14230                           ;incstack = 0
 14231                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14232                           ;setBuz@count stored from wreg
 14233  174D  0020               	movlb	0	; select bank0
 14234  174E  00AC               	movwf	setBuz@count
 14235                           
 14236                           ;Buzzer_B1.c: 23: time /= 10;
 14237  174F  300A               	movlw	10
 14238  1750  00A0               	movwf	___awdiv@divisor
 14239  1751  3000               	movlw	0
 14240  1752  00A1               	movwf	___awdiv@divisor+1
 14241  1753  082A               	movf	setBuz@time+1,w
 14242  1754  01A3               	clrf	___awdiv@dividend+1
 14243  1755  07A3               	addwf	___awdiv@dividend+1,f
 14244  1756  0829               	movf	setBuz@time,w
 14245  1757  01A2               	clrf	___awdiv@dividend
 14246  1758  07A2               	addwf	___awdiv@dividend,f
 14247  1759  3195  25F2  3197   	fcall	___awdiv
 14248  175C  0020               	movlb	0	; select bank0
 14249  175D  0821               	movf	?___awdiv+1,w
 14250  175E  01AA               	clrf	setBuz@time+1
 14251  175F  07AA               	addwf	setBuz@time+1,f
 14252  1760  0820               	movf	?___awdiv,w
 14253  1761  01A9               	clrf	setBuz@time
 14254  1762  07A9               	addwf	setBuz@time,f
 14255                           
 14256                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14257  1763  0021               	movlb	1	; select bank1
 14258  1764  1C30               	btfss	_Buz1^(0+128),0
 14259  1765  0008               	return
 14260                           
 14261                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14262  1766  18B0               	btfsc	_Buz1^(0+128),1
 14263  1767  2F7E               	goto	l96
 14264                           
 14265                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14266  1768  14B0               	bsf	_Buz1^(0+128),1
 14267                           
 14268                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14269  1769  01B1               	clrf	(_Buz1^(0+128)+1)
 14270  176A  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14271                           
 14272                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14273  176B  0020               	movlb	0	; select bank0
 14274  176C  082C               	movf	setBuz@count,w
 14275  176D  00AB               	movwf	??_setBuz
 14276  176E  082B               	movf	??_setBuz,w
 14277  176F  0021               	movlb	1	; select bank1
 14278  1770  00B3               	movwf	(_Buz1^(0+128)+3)
 14279                           
 14280                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14281  1771  0020               	movlb	0	; select bank0
 14282  1772  082A               	movf	setBuz@time+1,w
 14283  1773  0021               	movlb	1	; select bank1
 14284  1774  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14285  1775  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14286  1776  0020               	movlb	0	; select bank0
 14287  1777  0829               	movf	setBuz@time,w
 14288  1778  0021               	movlb	1	; select bank1
 14289  1779  01B6               	clrf	(_Buz1^(0+128)+6)
 14290  177A  07B6               	addwf	(_Buz1^(0+128)+6),f
 14291                           
 14292                           ;Buzzer_B1.c: 30: RB3 = 1;
 14293  177B  0020               	movlb	0	; select bank0
 14294  177C  158D               	bsf	13,3	;volatile
 14295                           
 14296                           ;Buzzer_B1.c: 31: } else {
 14297  177D  0008               	return
 14298  177E                     l96:	
 14299                           
 14300                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14301  177E  19B0               	btfsc	_Buz1^(0+128),3
 14302  177F  2F92               	goto	l98
 14303                           
 14304                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14305  1780  15B0               	bsf	_Buz1^(0+128),3
 14306                           
 14307                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14308  1781  0020               	movlb	0	; select bank0
 14309  1782  082C               	movf	setBuz@count,w
 14310  1783  00AB               	movwf	??_setBuz
 14311  1784  082B               	movf	??_setBuz,w
 14312  1785  0021               	movlb	1	; select bank1
 14313  1786  00B4               	movwf	(_Buz1^(0+128)+4)
 14314                           
 14315                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14316  1787  0020               	movlb	0	; select bank0
 14317  1788  082A               	movf	setBuz@time+1,w
 14318  1789  0021               	movlb	1	; select bank1
 14319  178A  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14320  178B  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14321  178C  0020               	movlb	0	; select bank0
 14322  178D  0829               	movf	setBuz@time,w
 14323  178E  0021               	movlb	1	; select bank1
 14324  178F  01B8               	clrf	(_Buz1^(0+128)+8)
 14325  1790  07B8               	addwf	(_Buz1^(0+128)+8),f
 14326                           
 14327                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14328  1791  0008               	return
 14329  1792                     l98:	
 14330  1792  1A30               	btfsc	_Buz1^(0+128),4
 14331  1793  0008               	return
 14332                           
 14333                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14334  1794  1630               	bsf	_Buz1^(0+128),4
 14335                           
 14336                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14337  1795  0020               	movlb	0	; select bank0
 14338  1796  082C               	movf	setBuz@count,w
 14339  1797  00AB               	movwf	??_setBuz
 14340  1798  082B               	movf	??_setBuz,w
 14341  1799  0021               	movlb	1	; select bank1
 14342  179A  00B5               	movwf	(_Buz1^(0+128)+5)
 14343                           
 14344                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14345  179B  0020               	movlb	0	; select bank0
 14346  179C  082A               	movf	setBuz@time+1,w
 14347  179D  0021               	movlb	1	; select bank1
 14348  179E  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14349  179F  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14350  17A0  0020               	movlb	0	; select bank0
 14351  17A1  0829               	movf	setBuz@time,w
 14352  17A2  0021               	movlb	1	; select bank1
 14353  17A3  01BA               	clrf	(_Buz1^(0+128)+10)
 14354  17A4  07BA               	addwf	(_Buz1^(0+128)+10),f
 14355  17A5  0008               	return
 14356  17A6                     __end_of_setBuz:	
 14357                           
 14358                           	psect	text88
 14359  15F2                     __ptext88:	
 14360 ;; *************** function ___awdiv *****************
 14361 ;; Defined at:
 14362 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14363 ;; Parameters:    Size  Location     Type
 14364 ;;  divisor         2    0[BANK0 ] int 
 14365 ;;  dividend        2    2[BANK0 ] int 
 14366 ;; Auto vars:     Size  Location     Type
 14367 ;;  quotient        2    7[BANK0 ] int 
 14368 ;;  sign            1    6[BANK0 ] unsigned char 
 14369 ;;  counter         1    5[BANK0 ] unsigned char 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  2    0[BANK0 ] int 
 14372 ;; Registers used:
 14373 ;;		wreg, status,2, status,0
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;Total ram usage:        9 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    5
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		_setBuz
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           
 14394                           ;psect for function ___awdiv
 14395  15F2                     ___awdiv:	
 14396                           
 14397                           ;incstack = 0
 14398                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14399  15F2  0020               	movlb	0	; select bank0
 14400  15F3  01A6               	clrf	___awdiv@sign
 14401  15F4  1FA1               	btfss	___awdiv@divisor+1,7
 14402  15F5  2DFD               	goto	l6015
 14403  15F6  09A0               	comf	___awdiv@divisor,f
 14404  15F7  09A1               	comf	___awdiv@divisor+1,f
 14405  15F8  0AA0               	incf	___awdiv@divisor,f
 14406  15F9  1903               	skipnz
 14407  15FA  0AA1               	incf	___awdiv@divisor+1,f
 14408  15FB  01A6               	clrf	___awdiv@sign
 14409  15FC  0AA6               	incf	___awdiv@sign,f
 14410  15FD                     l6015:	
 14411  15FD  1FA3               	btfss	___awdiv@dividend+1,7
 14412  15FE  2E08               	goto	l6021
 14413  15FF  09A2               	comf	___awdiv@dividend,f
 14414  1600  09A3               	comf	___awdiv@dividend+1,f
 14415  1601  0AA2               	incf	___awdiv@dividend,f
 14416  1602  1903               	skipnz
 14417  1603  0AA3               	incf	___awdiv@dividend+1,f
 14418  1604  3001               	movlw	1
 14419  1605  00A4               	movwf	??___awdiv
 14420  1606  0824               	movf	??___awdiv,w
 14421  1607  06A6               	xorwf	___awdiv@sign,f
 14422  1608                     l6021:	
 14423  1608  01A7               	clrf	___awdiv@quotient
 14424  1609  01A8               	clrf	___awdiv@quotient+1
 14425  160A  0821               	movf	___awdiv@divisor+1,w
 14426  160B  0420               	iorwf	___awdiv@divisor,w
 14427  160C  1903               	skipnz
 14428  160D  2E37               	goto	l6043
 14429  160E  01A5               	clrf	___awdiv@counter
 14430  160F  0AA5               	incf	___awdiv@counter,f
 14431  1610                     l6031:	
 14432  1610  1BA1               	btfsc	___awdiv@divisor+1,7
 14433  1611  2E1C               	goto	l6033
 14434  1612  3001               	movlw	1
 14435  1613                     u4955:	
 14436  1613  35A0               	lslf	___awdiv@divisor,f
 14437  1614  0DA1               	rlf	___awdiv@divisor+1,f
 14438  1615  0B89               	decfsz	9,f
 14439  1616  2E13               	goto	u4955
 14440  1617  3001               	movlw	1
 14441  1618  00A4               	movwf	??___awdiv
 14442  1619  0824               	movf	??___awdiv,w
 14443  161A  07A5               	addwf	___awdiv@counter,f
 14444  161B  2E10               	goto	l6031
 14445  161C                     l6033:	
 14446  161C  3001               	movlw	1
 14447  161D                     u4975:	
 14448  161D  35A7               	lslf	___awdiv@quotient,f
 14449  161E  0DA8               	rlf	___awdiv@quotient+1,f
 14450  161F  0B89               	decfsz	9,f
 14451  1620  2E1D               	goto	u4975
 14452  1621  0821               	movf	___awdiv@divisor+1,w
 14453  1622  0223               	subwf	___awdiv@dividend+1,w
 14454  1623  1D03               	skipz
 14455  1624  2E27               	goto	u4985
 14456  1625  0820               	movf	___awdiv@divisor,w
 14457  1626  0222               	subwf	___awdiv@dividend,w
 14458  1627                     u4985:	
 14459  1627  1C03               	skipc
 14460  1628  2E2E               	goto	l6039
 14461  1629  0820               	movf	___awdiv@divisor,w
 14462  162A  02A2               	subwf	___awdiv@dividend,f
 14463  162B  0821               	movf	___awdiv@divisor+1,w
 14464  162C  3BA3               	subwfb	___awdiv@dividend+1,f
 14465  162D  1427               	bsf	___awdiv@quotient,0
 14466  162E                     l6039:	
 14467  162E  3001               	movlw	1
 14468  162F                     u4995:	
 14469  162F  36A1               	lsrf	___awdiv@divisor+1,f
 14470  1630  0CA0               	rrf	___awdiv@divisor,f
 14471  1631  0B89               	decfsz	9,f
 14472  1632  2E2F               	goto	u4995
 14473  1633  3001               	movlw	1
 14474  1634  02A5               	subwf	___awdiv@counter,f
 14475  1635  1D03               	btfss	3,2
 14476  1636  2E1C               	goto	l6033
 14477  1637                     l6043:	
 14478  1637  0826               	movf	___awdiv@sign,w
 14479  1638  1903               	btfsc	3,2
 14480  1639  2E3F               	goto	l6047
 14481  163A  09A7               	comf	___awdiv@quotient,f
 14482  163B  09A8               	comf	___awdiv@quotient+1,f
 14483  163C  0AA7               	incf	___awdiv@quotient,f
 14484  163D  1903               	skipnz
 14485  163E  0AA8               	incf	___awdiv@quotient+1,f
 14486  163F                     l6047:	
 14487  163F  0828               	movf	___awdiv@quotient+1,w
 14488  1640  01A1               	clrf	?___awdiv+1
 14489  1641  07A1               	addwf	?___awdiv+1,f
 14490  1642  0827               	movf	___awdiv@quotient,w
 14491  1643  01A0               	clrf	?___awdiv
 14492  1644  07A0               	addwf	?___awdiv,f
 14493  1645  0008               	return
 14494  1646                     __end_of___awdiv:	
 14495                           
 14496                           	psect	text89
 14497  1C72                     __ptext89:	
 14498 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14499 ;; Defined at:
 14500 ;;		line 504 in file "../src/Dimmer_B1.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;		None
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;  adjgo           1    1[BANK0 ] unsigned char 
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      unsigned char 
 14507 ;; Registers used:
 14508 ;;		wreg, status,2
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;Total ram usage:        3 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:    5
 14521 ;; This function calls:
 14522 ;;		Nothing
 14523 ;; This function is called by:
 14524 ;;		_setDimmerLights_SwOn
 14525 ;;		_setDimmerLights_AdjControl
 14526 ;;		_Load_Main
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _getAll_DimmerLights_AdjGO
 14532  1C72                     _getAll_DimmerLights_AdjGO:	
 14533                           
 14534                           ;Dimmer_B1.c: 505: char adjgo = 0;
 14535                           
 14536                           ;incstack = 0
 14537                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14538  1C72  0020               	movlb	0	; select bank0
 14539  1C73  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14540                           
 14541                           ;Dimmer_B1.c: 510: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14542  1C74  01A2               	clrf	_getAll_DimmerLights_AdjGO$2557
 14543  1C75  0AA2               	incf	_getAll_DimmerLights_AdjGO$2557,f
 14544  1C76  0023               	movlb	3	; select bank3
 14545  1C77  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14546  1C78  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14547  1C79  2C7C               	goto	l6133
 14548  1C7A  0020               	movlb	0	; select bank0
 14549  1C7B  01A2               	clrf	_getAll_DimmerLights_AdjGO$2557
 14550  1C7C                     l6133:	
 14551  1C7C  0020               	movlb	0	; select bank0
 14552  1C7D  0822               	movf	_getAll_DimmerLights_AdjGO$2557,w
 14553  1C7E  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14554  1C7F  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14555  1C80  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14556                           
 14557                           ;Dimmer_B1.c: 515: return adjgo;
 14558  1C81  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14559  1C82  0008               	return
 14560  1C83                     __end_of_getAll_DimmerLights_AdjGO:	
 14561                           
 14562                           	psect	text90
 14563  085E                     __ptext90:	
 14564 ;; *************** function _setDimmerLights_SwOff *****************
 14565 ;; Defined at:
 14566 ;;		line 540 in file "../src/Dimmer_B1.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;  sw              1    wreg     unsigned char 
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;  sw              1   69[BANK0 ] unsigned char 
 14571 ;;  command         1   68[BANK0 ] unsigned char 
 14572 ;; Return value:  Size  Location     Type
 14573 ;;		None               void
 14574 ;; Registers used:
 14575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14576 ;; Tracked objects:
 14577 ;;		On entry : 0/0
 14578 ;;		On exit  : 0/0
 14579 ;;		Unchanged: 0/0
 14580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;Total ram usage:        4 bytes
 14586 ;; Hardware stack levels used:    1
 14587 ;; Hardware stack levels required when called:    9
 14588 ;; This function calls:
 14589 ;;		_DimmerLightsPointSelect
 14590 ;;		_setDelayOff_GO
 14591 ;;		_setDimmerLights_Trigger
 14592 ;;		_setDimmerLights_TriggerAdj
 14593 ;;		_setRF_DimmerLights
 14594 ;;		_setTxData
 14595 ;; This function is called by:
 14596 ;;		_DlyOff_Main
 14597 ;;		_setDimmerLights_ErrorClose
 14598 ;;		_setRFSW_Control
 14599 ;;		_setSw_Main
 14600 ;; This function uses a non-reentrant model
 14601 ;;
 14602                           
 14603                           
 14604                           ;psect for function _setDimmerLights_SwOff
 14605  085E                     _setDimmerLights_SwOff:	
 14606                           
 14607                           ;incstack = 0
 14608                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14609                           ;setDimmerLights_SwOff@sw stored from wreg
 14610  085E  0020               	movlb	0	; select bank0
 14611  085F  00E5               	movwf	setDimmerLights_SwOff@sw
 14612                           
 14613                           ;Dimmer_B1.c: 541: DimmerLightsPointSelect(sw);
 14614  0860  0865               	movf	setDimmerLights_SwOff@sw,w
 14615  0861  319C  24FE  3188   	fcall	_DimmerLightsPointSelect
 14616                           
 14617                           ;Dimmer_B1.c: 542: char command = DimmerLights->Status == 1 ? 1 : 0;
 14618  0864  0879               	movf	_DimmerLights,w
 14619  0865  0086               	movwf	6
 14620  0866  3001               	movlw	1	; select bank2/3
 14621  0867  0087               	movwf	7
 14622  0868  3000               	movlw	0
 14623  0869  1A81               	btfsc	1,5
 14624  086A  3001               	movlw	1
 14625  086B  0020               	movlb	0	; select bank0
 14626  086C  00E4               	movwf	setDimmerLights_SwOff@command
 14627                           
 14628                           ;Dimmer_B1.c: 543: if (DimmerLights->SwFlag == 1) {
 14629  086D  0879               	movf	_DimmerLights,w
 14630  086E  3E09               	addlw	9
 14631  086F  0086               	movwf	6
 14632  0870  3001               	movlw	1	; select bank2/3
 14633  0871  0087               	movwf	7
 14634  0872  1F01               	btfss	1,6
 14635  0873  0008               	return
 14636                           
 14637                           ;Dimmer_B1.c: 544: DimmerLights->SwFlag = 0;
 14638  0874  0879               	movf	_DimmerLights,w
 14639  0875  3E09               	addlw	9
 14640  0876  0086               	movwf	6
 14641  0877  3001               	movlw	1	; select bank2/3
 14642  0878  0087               	movwf	7
 14643  0879  1301               	bcf	1,6
 14644                           
 14645                           ;Dimmer_B1.c: 545: if (DimmerLights->Status == 1) {
 14646  087A  0879               	movf	_DimmerLights,w
 14647  087B  0086               	movwf	6
 14648  087C  3001               	movlw	1	; select bank2/3
 14649  087D  0087               	movwf	7
 14650  087E  1E81               	btfss	1,5
 14651  087F  28A5               	goto	l6247
 14652                           
 14653                           ;Dimmer_B1.c: 546: if (DimmerLights->SwAdj == 1) {
 14654  0880  0879               	movf	_DimmerLights,w
 14655  0881  3E09               	addlw	9
 14656  0882  0086               	movwf	6
 14657  0883  3001               	movlw	1	; select bank2/3
 14658  0884  0087               	movwf	7
 14659  0885  1F81               	btfss	1,7
 14660  0886  28B1               	goto	l826
 14661                           
 14662                           ;Dimmer_B1.c: 547: DimmerLights->SwAdj = 0;
 14663  0887  0879               	movf	_DimmerLights,w
 14664  0888  3E09               	addlw	9
 14665  0889  0086               	movwf	6
 14666  088A  3001               	movlw	1	; select bank2/3
 14667  088B  0087               	movwf	7
 14668  088C  1381               	bcf	1,7
 14669                           
 14670                           ;Dimmer_B1.c: 548: setDimmerLights_TriggerAdj(sw, 0);
 14671  088D  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14672  088E  0865               	movf	setDimmerLights_SwOff@sw,w
 14673  088F  319F  2714  3188   	fcall	_setDimmerLights_TriggerAdj
 14674                           
 14675                           ;Dimmer_B1.c: 549: product->Data[17]=product->Data[26 + sw];
 14676  0892  0020               	movlb	0	; select bank0
 14677  0893  0865               	movf	setDimmerLights_SwOff@sw,w
 14678  0894  3E1A               	addlw	26
 14679  0895  076F               	addwf	_product,w
 14680  0896  00E2               	movwf	??_setDimmerLights_SwOff
 14681  0897  0862               	movf	??_setDimmerLights_SwOff,w
 14682  0898  0086               	movwf	6
 14683  0899  3002               	movlw	2	; select bank4/5
 14684  089A  0087               	movwf	7
 14685  089B  0801               	movf	1,w
 14686  089C  00E3               	movwf	??_setDimmerLights_SwOff+1
 14687  089D  086F               	movf	_product,w
 14688  089E  3E11               	addlw	17
 14689  089F  0086               	movwf	6
 14690  08A0  3002               	movlw	2	; select bank4/5
 14691  08A1  0087               	movwf	7
 14692  08A2  0863               	movf	??_setDimmerLights_SwOff+1,w
 14693  08A3  0081               	movwf	1
 14694                           
 14695                           ;Dimmer_B1.c: 552: }
 14696                           ;Dimmer_B1.c: 553: } else {
 14697  08A4  28B1               	goto	l826
 14698  08A5                     l6247:	
 14699                           
 14700                           ;Dimmer_B1.c: 554: setDimmerLights_Trigger(sw, 0);
 14701  08A5  01A2               	clrf	setDimmerLights_Trigger@command
 14702  08A6  0865               	movf	setDimmerLights_SwOff@sw,w
 14703  08A7  319E  26B8  3188   	fcall	_setDimmerLights_Trigger
 14704                           
 14705                           ;Dimmer_B1.c: 555: setDelayOff_GO(sw, 0, 0);
 14706  08AA  0020               	movlb	0	; select bank0
 14707  08AB  01AA               	clrf	setDelayOff_GO@command
 14708  08AC  01AB               	clrf	setDelayOff_GO@value
 14709  08AD  0865               	movf	setDimmerLights_SwOff@sw,w
 14710  08AE  3188  20BD  3188   	fcall	_setDelayOff_GO
 14711  08B1                     l826:	
 14712                           
 14713                           ;Dimmer_B1.c: 558: }
 14714                           ;Dimmer_B1.c: 559: setRF_DimmerLights(sw, command);
 14715  08B1  0020               	movlb	0	; select bank0
 14716  08B2  0864               	movf	setDimmerLights_SwOff@command,w
 14717  08B3  00E2               	movwf	??_setDimmerLights_SwOff
 14718  08B4  0862               	movf	??_setDimmerLights_SwOff,w
 14719  08B5  00DD               	movwf	setRF_DimmerLights@on
 14720  08B6  0865               	movf	setDimmerLights_SwOff@sw,w
 14721  08B7  318A  22AA  3188   	fcall	_setRF_DimmerLights
 14722                           
 14723                           ;Dimmer_B1.c: 560: setTxData();
 14724  08BA  3186  26FC         	fcall	_setTxData
 14725  08BC  0008               	return
 14726  08BD                     __end_of_setDimmerLights_SwOff:	
 14727                           
 14728                           	psect	text91
 14729  06FC                     __ptext91:	
 14730 ;; *************** function _setTxData *****************
 14731 ;; Defined at:
 14732 ;;		line 204 in file "../src/RF_Control_B1.c"
 14733 ;; Parameters:    Size  Location     Type
 14734 ;;		None
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;  i               1    0        unsigned char 
 14737 ;; Return value:  Size  Location     Type
 14738 ;;		None               void
 14739 ;; Registers used:
 14740 ;;		wreg, fsr1l, fsr1h
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;Total ram usage:        1 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:    5
 14753 ;; This function calls:
 14754 ;;		Nothing
 14755 ;; This function is called by:
 14756 ;;		_setDimmerLights_SwOn
 14757 ;;		_setDimmerLights_SwOff
 14758 ;;		_setDimmerLights_Adj
 14759 ;;		_setControl_Lights_Table
 14760 ;;		_setRFSW_AdjControl
 14761 ;; This function uses a non-reentrant model
 14762 ;;
 14763                           
 14764                           
 14765                           ;psect for function _setTxData
 14766  06FC                     _setTxData:	
 14767                           
 14768                           ;RF_Control_B1.c: 205: char i;
 14769                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 14770                           
 14771                           ;incstack = 0
 14772                           ; Regs used in _setTxData: [wregfsr1]
 14773  06FC  0021               	movlb	1	; select bank1
 14774  06FD  1C3C               	btfss	_RF1^(0+128),0
 14775  06FE  0008               	return
 14776                           
 14777                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 14778  06FF  153C               	bsf	_RF1^(0+128),2
 14779                           
 14780                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 14781  0700  3014               	movlw	20
 14782  0701  00C3               	movwf	(_RF1^(0+128)+7)
 14783  0702  3000               	movlw	0
 14784  0703  00C4               	movwf	(_RF1^(0+128)+8)
 14785                           
 14786                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 14787  0704  3063               	movlw	99
 14788  0705  0020               	movlb	0	; select bank0
 14789  0706  00A0               	movwf	??_setTxData
 14790  0707  0820               	movf	??_setTxData,w
 14791  0708  0023               	movlb	3	; select bank3
 14792  0709  00A0               	movwf	_RF_Data^(0+384)
 14793                           
 14794                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 14795  070A  3002               	movlw	2
 14796  070B  0020               	movlb	0	; select bank0
 14797  070C  00A0               	movwf	??_setTxData
 14798  070D  0820               	movf	??_setTxData,w
 14799  070E  0023               	movlb	3	; select bank3
 14800  070F  00A1               	movwf	(_RF_Data^(0+384)+1)
 14801                           
 14802                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 14803  0710  0020               	movlb	0	; select bank0
 14804  0711  086F               	movf	_product,w
 14805  0712  0086               	movwf	6
 14806  0713  3002               	movlw	2	; select bank4/5
 14807  0714  0087               	movwf	7
 14808  0715  3002               	movlw	2	; select bank4/5
 14809  0716  3F42               	moviw [2]fsr1
 14810  0717  0023               	movlb	3	; select bank3
 14811  0718  00A2               	movwf	(_RF_Data^(0+384)+2)
 14812                           
 14813                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 14814  0719  0020               	movlb	0	; select bank0
 14815  071A  086F               	movf	_product,w
 14816  071B  0086               	movwf	6
 14817  071C  3002               	movlw	2	; select bank4/5
 14818  071D  0087               	movwf	7
 14819  071E  3002               	movlw	2	; select bank4/5
 14820  071F  3F43               	moviw [3]fsr1
 14821  0720  0023               	movlb	3	; select bank3
 14822  0721  00A3               	movwf	(_RF_Data^(0+384)+3)
 14823                           
 14824                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 14825  0722  0020               	movlb	0	; select bank0
 14826  0723  086F               	movf	_product,w
 14827  0724  0086               	movwf	6
 14828  0725  3002               	movlw	2	; select bank4/5
 14829  0726  0087               	movwf	7
 14830  0727  3002               	movlw	2	; select bank4/5
 14831  0728  3F44               	moviw [4]fsr1
 14832  0729  0023               	movlb	3	; select bank3
 14833  072A  00A4               	movwf	(_RF_Data^(0+384)+4)
 14834                           
 14835                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 14836  072B  0020               	movlb	0	; select bank0
 14837  072C  086F               	movf	_product,w
 14838  072D  0086               	movwf	6
 14839  072E  3002               	movlw	2	; select bank4/5
 14840  072F  0087               	movwf	7
 14841  0730  3002               	movlw	2	; select bank4/5
 14842  0731  3F45               	moviw [5]fsr1
 14843  0732  0023               	movlb	3	; select bank3
 14844  0733  00A5               	movwf	(_RF_Data^(0+384)+5)
 14845                           
 14846                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 14847  0734  0020               	movlb	0	; select bank0
 14848  0735  086F               	movf	_product,w
 14849  0736  0086               	movwf	6
 14850  0737  3002               	movlw	2	; select bank4/5
 14851  0738  0087               	movwf	7
 14852  0739  3002               	movlw	2	; select bank4/5
 14853  073A  3F46               	moviw [6]fsr1
 14854  073B  0023               	movlb	3	; select bank3
 14855  073C  00A6               	movwf	(_RF_Data^(0+384)+6)
 14856                           
 14857                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 14858  073D  0020               	movlb	0	; select bank0
 14859  073E  086F               	movf	_product,w
 14860  073F  0086               	movwf	6
 14861  0740  3002               	movlw	2	; select bank4/5
 14862  0741  0087               	movwf	7
 14863  0742  3002               	movlw	2	; select bank4/5
 14864  0743  3F47               	moviw [7]fsr1
 14865  0744  0023               	movlb	3	; select bank3
 14866  0745  00A7               	movwf	(_RF_Data^(0+384)+7)
 14867                           
 14868                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 14869  0746  0020               	movlb	0	; select bank0
 14870  0747  086F               	movf	_product,w
 14871  0748  0086               	movwf	6
 14872  0749  3002               	movlw	2	; select bank4/5
 14873  074A  0087               	movwf	7
 14874  074B  3002               	movlw	2	; select bank4/5
 14875  074C  3F48               	moviw [8]fsr1
 14876  074D  0023               	movlb	3	; select bank3
 14877  074E  00A8               	movwf	(_RF_Data^(0+384)+8)
 14878                           
 14879                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 14880  074F  0020               	movlb	0	; select bank0
 14881  0750  086F               	movf	_product,w
 14882  0751  0086               	movwf	6
 14883  0752  3002               	movlw	2	; select bank4/5
 14884  0753  0087               	movwf	7
 14885  0754  3002               	movlw	2	; select bank4/5
 14886  0755  3F49               	moviw [9]fsr1
 14887  0756  0023               	movlb	3	; select bank3
 14888  0757  00A9               	movwf	(_RF_Data^(0+384)+9)
 14889                           
 14890                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 14891  0758  0020               	movlb	0	; select bank0
 14892  0759  086F               	movf	_product,w
 14893  075A  0086               	movwf	6
 14894  075B  3002               	movlw	2	; select bank4/5
 14895  075C  0087               	movwf	7
 14896  075D  3002               	movlw	2	; select bank4/5
 14897  075E  3F4A               	moviw [10]fsr1
 14898  075F  0023               	movlb	3	; select bank3
 14899  0760  00AA               	movwf	(_RF_Data^(0+384)+10)
 14900                           
 14901                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 14902  0761  0020               	movlb	0	; select bank0
 14903  0762  086F               	movf	_product,w
 14904  0763  0086               	movwf	6
 14905  0764  3002               	movlw	2	; select bank4/5
 14906  0765  0087               	movwf	7
 14907  0766  3002               	movlw	2	; select bank4/5
 14908  0767  3F4B               	moviw [11]fsr1
 14909  0768  0023               	movlb	3	; select bank3
 14910  0769  00AB               	movwf	(_RF_Data^(0+384)+11)
 14911                           
 14912                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 14913  076A  0020               	movlb	0	; select bank0
 14914  076B  086F               	movf	_product,w
 14915  076C  0086               	movwf	6
 14916  076D  3002               	movlw	2	; select bank4/5
 14917  076E  0087               	movwf	7
 14918  076F  3002               	movlw	2	; select bank4/5
 14919  0770  3F4C               	moviw [12]fsr1
 14920  0771  0023               	movlb	3	; select bank3
 14921  0772  00AC               	movwf	(_RF_Data^(0+384)+12)
 14922                           
 14923                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 14924  0773  0020               	movlb	0	; select bank0
 14925  0774  086F               	movf	_product,w
 14926  0775  0086               	movwf	6
 14927  0776  3002               	movlw	2	; select bank4/5
 14928  0777  0087               	movwf	7
 14929  0778  3002               	movlw	2	; select bank4/5
 14930  0779  3F4D               	moviw [13]fsr1
 14931  077A  0023               	movlb	3	; select bank3
 14932  077B  00AD               	movwf	(_RF_Data^(0+384)+13)
 14933                           
 14934                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 14935  077C  0020               	movlb	0	; select bank0
 14936  077D  086F               	movf	_product,w
 14937  077E  0086               	movwf	6
 14938  077F  3002               	movlw	2	; select bank4/5
 14939  0780  0087               	movwf	7
 14940  0781  3002               	movlw	2	; select bank4/5
 14941  0782  3F4E               	moviw [14]fsr1
 14942  0783  0023               	movlb	3	; select bank3
 14943  0784  00AE               	movwf	(_RF_Data^(0+384)+14)
 14944                           
 14945                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 14946  0785  0020               	movlb	0	; select bank0
 14947  0786  086F               	movf	_product,w
 14948  0787  0086               	movwf	6
 14949  0788  3002               	movlw	2	; select bank4/5
 14950  0789  0087               	movwf	7
 14951  078A  3002               	movlw	2	; select bank4/5
 14952  078B  3F4F               	moviw [15]fsr1
 14953  078C  0023               	movlb	3	; select bank3
 14954  078D  00AF               	movwf	(_RF_Data^(0+384)+15)
 14955                           
 14956                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 14957  078E  0020               	movlb	0	; select bank0
 14958  078F  086F               	movf	_product,w
 14959  0790  0086               	movwf	6
 14960  0791  3002               	movlw	2	; select bank4/5
 14961  0792  0087               	movwf	7
 14962  0793  3002               	movlw	2	; select bank4/5
 14963  0794  3F50               	moviw [16]fsr1
 14964  0795  0023               	movlb	3	; select bank3
 14965  0796  00B0               	movwf	(_RF_Data^(0+384)+16)
 14966                           
 14967                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 14968  0797  0020               	movlb	0	; select bank0
 14969  0798  086F               	movf	_product,w
 14970  0799  0086               	movwf	6
 14971  079A  3002               	movlw	2	; select bank4/5
 14972  079B  0087               	movwf	7
 14973  079C  3002               	movlw	2	; select bank4/5
 14974  079D  3F51               	moviw [17]fsr1
 14975  079E  0023               	movlb	3	; select bank3
 14976  079F  00B1               	movwf	(_RF_Data^(0+384)+17)
 14977                           
 14978                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 14979  07A0  0020               	movlb	0	; select bank0
 14980  07A1  086F               	movf	_product,w
 14981  07A2  0086               	movwf	6
 14982  07A3  3002               	movlw	2	; select bank4/5
 14983  07A4  0087               	movwf	7
 14984  07A5  3002               	movlw	2	; select bank4/5
 14985  07A6  3F52               	moviw [18]fsr1
 14986  07A7  0023               	movlb	3	; select bank3
 14987  07A8  00B2               	movwf	(_RF_Data^(0+384)+18)
 14988                           
 14989                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 14990  07A9  0020               	movlb	0	; select bank0
 14991  07AA  086F               	movf	_product,w
 14992  07AB  0086               	movwf	6
 14993  07AC  3002               	movlw	2	; select bank4/5
 14994  07AD  0087               	movwf	7
 14995  07AE  3002               	movlw	2	; select bank4/5
 14996  07AF  3F53               	moviw [19]fsr1
 14997  07B0  0023               	movlb	3	; select bank3
 14998  07B1  00B3               	movwf	(_RF_Data^(0+384)+19)
 14999                           
 15000                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 15001  07B2  30D2               	movlw	210
 15002  07B3  0020               	movlb	0	; select bank0
 15003  07B4  00A0               	movwf	??_setTxData
 15004  07B5  0820               	movf	??_setTxData,w
 15005  07B6  0023               	movlb	3	; select bank3
 15006  07B7  00B4               	movwf	(_RF_Data^(0+384)+20)
 15007  07B8  0008               	return
 15008  07B9                     __end_of_setTxData:	
 15009                           
 15010                           	psect	text92
 15011  0AAA                     __ptext92:	
 15012 ;; *************** function _setRF_DimmerLights *****************
 15013 ;; Defined at:
 15014 ;;		line 532 in file "../src/RF_Control_B1.c"
 15015 ;; Parameters:    Size  Location     Type
 15016 ;;  lights          1    wreg     unsigned char 
 15017 ;;  on              1   61[BANK0 ] unsigned char 
 15018 ;; Auto vars:     Size  Location     Type
 15019 ;;  lights          1   65[BANK0 ] unsigned char 
 15020 ;;  status          1   64[BANK0 ] unsigned char 
 15021 ;; Return value:  Size  Location     Type
 15022 ;;		None               void
 15023 ;; Registers used:
 15024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15030 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;Total ram usage:        5 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:    8
 15037 ;; This function calls:
 15038 ;;		_setPercentValue
 15039 ;; This function is called by:
 15040 ;;		_DlyOff_Main
 15041 ;;		_setDimmerLights_SwOn
 15042 ;;		_setDimmerLights_SwOff
 15043 ;;		_setDimmerLights_Adj
 15044 ;;		_setRFSW_Control
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           
 15049                           ;psect for function _setRF_DimmerLights
 15050  0AAA                     _setRF_DimmerLights:	
 15051                           
 15052                           ;incstack = 0
 15053                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15054                           ;setRF_DimmerLights@lights stored from wreg
 15055  0AAA  0020               	movlb	0	; select bank0
 15056  0AAB  00E1               	movwf	setRF_DimmerLights@lights
 15057                           
 15058                           ;RF_Control_B1.c: 533: char status = 1;
 15059  0AAC  01E0               	clrf	setRF_DimmerLights@status
 15060  0AAD  0AE0               	incf	setRF_DimmerLights@status,f
 15061                           
 15062                           ;RF_Control_B1.c: 534: status <<= (lights - 1);
 15063  0AAE  0861               	movf	setRF_DimmerLights@lights,w
 15064  0AAF  3EFF               	addlw	-1
 15065  0AB0  0A89               	incf	9,f
 15066  0AB1  2AB4               	goto	u5060
 15067  0AB2                     u5065:	
 15068  0AB2  1003               	clrc
 15069  0AB3  0DE0               	rlf	setRF_DimmerLights@status,f
 15070  0AB4                     u5060:	
 15071  0AB4  3EFF               	addlw	-1
 15072  0AB5  1D03               	skipz
 15073  0AB6  2AB2               	goto	u5065
 15074                           
 15075                           ;RF_Control_B1.c: 535: product->Data[11]=lights;
 15076  0AB7  0861               	movf	setRF_DimmerLights@lights,w
 15077  0AB8  00DE               	movwf	??_setRF_DimmerLights
 15078  0AB9  086F               	movf	_product,w
 15079  0ABA  3E0B               	addlw	11
 15080  0ABB  0086               	movwf	6
 15081  0ABC  3002               	movlw	2	; select bank4/5
 15082  0ABD  0087               	movwf	7
 15083  0ABE  085E               	movf	??_setRF_DimmerLights,w
 15084  0ABF  0081               	movwf	1
 15085                           
 15086                           ;RF_Control_B1.c: 538: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 15087  0AC0  3040               	movlw	64
 15088  0AC1  3194  2473  318A   	fcall	_setPercentValue
 15089  0AC4  0020               	movlb	0	; select bank0
 15090  0AC5  00DE               	movwf	??_setRF_DimmerLights
 15091  0AC6  0861               	movf	setRF_DimmerLights@lights,w
 15092  0AC7  3E14               	addlw	20
 15093  0AC8  076F               	addwf	_product,w
 15094  0AC9  00DF               	movwf	??_setRF_DimmerLights+1
 15095  0ACA  085F               	movf	??_setRF_DimmerLights+1,w
 15096  0ACB  0086               	movwf	6
 15097  0ACC  3002               	movlw	2	; select bank4/5
 15098  0ACD  0087               	movwf	7
 15099  0ACE  085E               	movf	??_setRF_DimmerLights,w
 15100  0ACF  0081               	movwf	1
 15101                           
 15102                           ;RF_Control_B1.c: 541: product->Data[9]=product->Data[20 + lights];
 15103  0AD0  0861               	movf	setRF_DimmerLights@lights,w
 15104  0AD1  3E14               	addlw	20
 15105  0AD2  076F               	addwf	_product,w
 15106  0AD3  00DE               	movwf	??_setRF_DimmerLights
 15107  0AD4  085E               	movf	??_setRF_DimmerLights,w
 15108  0AD5  0086               	movwf	6
 15109  0AD6  3002               	movlw	2	; select bank4/5
 15110  0AD7  0087               	movwf	7
 15111  0AD8  0801               	movf	1,w
 15112  0AD9  00DF               	movwf	??_setRF_DimmerLights+1
 15113  0ADA  086F               	movf	_product,w
 15114  0ADB  3E09               	addlw	9
 15115  0ADC  0086               	movwf	6
 15116  0ADD  3002               	movlw	2	; select bank4/5
 15117  0ADE  0087               	movwf	7
 15118  0ADF  085F               	movf	??_setRF_DimmerLights+1,w
 15119  0AE0  0081               	movwf	1
 15120                           
 15121                           ;RF_Control_B1.c: 542: product->Data[17]=product->Data[26 + lights];
 15122  0AE1  0861               	movf	setRF_DimmerLights@lights,w
 15123  0AE2  3E1A               	addlw	26
 15124  0AE3  076F               	addwf	_product,w
 15125  0AE4  00DE               	movwf	??_setRF_DimmerLights
 15126  0AE5  085E               	movf	??_setRF_DimmerLights,w
 15127  0AE6  0086               	movwf	6
 15128  0AE7  3002               	movlw	2	; select bank4/5
 15129  0AE8  0087               	movwf	7
 15130  0AE9  0801               	movf	1,w
 15131  0AEA  00DF               	movwf	??_setRF_DimmerLights+1
 15132  0AEB  086F               	movf	_product,w
 15133  0AEC  3E11               	addlw	17
 15134  0AED  0086               	movwf	6
 15135  0AEE  3002               	movlw	2	; select bank4/5
 15136  0AEF  0087               	movwf	7
 15137  0AF0  085F               	movf	??_setRF_DimmerLights+1,w
 15138  0AF1  0081               	movwf	1
 15139                           
 15140                           ;RF_Control_B1.c: 543: if (on == 1) {
 15141  0AF2  085D               	movf	setRF_DimmerLights@on,w
 15142  0AF3  3A01               	xorlw	1
 15143  0AF4  1D03               	skipz
 15144  0AF5  2B06               	goto	l6095
 15145                           
 15146                           ;RF_Control_B1.c: 544: product->Data[15]=(product->Data[15] | status);
 15147  0AF6  086F               	movf	_product,w
 15148  0AF7  3E0F               	addlw	15
 15149  0AF8  0086               	movwf	6
 15150  0AF9  3002               	movlw	2	; select bank4/5
 15151  0AFA  0087               	movwf	7
 15152  0AFB  0801               	movf	1,w
 15153  0AFC  0460               	iorwf	setRF_DimmerLights@status,w
 15154  0AFD  00DE               	movwf	??_setRF_DimmerLights
 15155  0AFE  086F               	movf	_product,w
 15156  0AFF  3E0F               	addlw	15
 15157  0B00  0086               	movwf	6
 15158  0B01  3002               	movlw	2	; select bank4/5
 15159  0B02  0087               	movwf	7
 15160  0B03  085E               	movf	??_setRF_DimmerLights,w
 15161  0B04  0081               	movwf	1
 15162                           
 15163                           ;RF_Control_B1.c: 545: } else {
 15164  0B05  0008               	return
 15165  0B06                     l6095:	
 15166                           
 15167                           ;RF_Control_B1.c: 546: product->Data[15]=(product->Data[15]&(~status));
 15168  0B06  086F               	movf	_product,w
 15169  0B07  3E0F               	addlw	15
 15170  0B08  0086               	movwf	6
 15171  0B09  3002               	movlw	2	; select bank4/5
 15172  0B0A  0087               	movwf	7
 15173  0B0B  0960               	comf	setRF_DimmerLights@status,w
 15174  0B0C  0501               	andwf	1,w
 15175  0B0D  00DE               	movwf	??_setRF_DimmerLights
 15176  0B0E  086F               	movf	_product,w
 15177  0B0F  3E0F               	addlw	15
 15178  0B10  0086               	movwf	6
 15179  0B11  3002               	movlw	2	; select bank4/5
 15180  0B12  0087               	movwf	7
 15181  0B13  085E               	movf	??_setRF_DimmerLights,w
 15182  0B14  0081               	movwf	1
 15183  0B15  0008               	return
 15184  0B16                     __end_of_setRF_DimmerLights:	
 15185                           
 15186                           	psect	text93
 15187  1473                     __ptext93:	
 15188 ;; *************** function _setPercentValue *****************
 15189 ;; Defined at:
 15190 ;;		line 908 in file "../src/Dimmer_B1.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  value           1    wreg     unsigned char 
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;  value           1   57[BANK0 ] unsigned char 
 15195 ;;  i               3   58[BANK0 ] float 
 15196 ;; Return value:  Size  Location     Type
 15197 ;;                  1    wreg      unsigned char 
 15198 ;; Registers used:
 15199 ;;		wreg, status,2, status,0, pclath, cstack
 15200 ;; Tracked objects:
 15201 ;;		On entry : 0/0
 15202 ;;		On exit  : 0/0
 15203 ;;		Unchanged: 0/0
 15204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;Total ram usage:        4 bytes
 15210 ;; Hardware stack levels used:    1
 15211 ;; Hardware stack levels required when called:    7
 15212 ;; This function calls:
 15213 ;;		___awtoft
 15214 ;;		___ftdiv
 15215 ;;		___fttol
 15216 ;; This function is called by:
 15217 ;;		_Flash_Memory_Initialization
 15218 ;;		_setRF_DimmerLights
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           
 15223                           ;psect for function _setPercentValue
 15224  1473                     _setPercentValue:	
 15225                           
 15226                           ;incstack = 0
 15227                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15228                           ;setPercentValue@value stored from wreg
 15229  1473  0020               	movlb	0	; select bank0
 15230  1474  00D9               	movwf	setPercentValue@value
 15231                           
 15232                           ;Dimmer_B1.c: 916: float i = ((char)(80*0.8)) - ((char)(25*0.8));
 15233  1475  3000               	movlw	0
 15234  1476  00DA               	movwf	setPercentValue@i
 15235  1477  3030               	movlw	48
 15236  1478  00DB               	movwf	setPercentValue@i+1
 15237  1479  3042               	movlw	66
 15238  147A  00DC               	movwf	setPercentValue@i+2
 15239                           
 15240                           ;Dimmer_B1.c: 917: i /= 100;
 15241  147B  3000               	movlw	0
 15242  147C  00AE               	movwf	___ftdiv@f2
 15243  147D  30C8               	movlw	200
 15244  147E  00AF               	movwf	___ftdiv@f2+1
 15245  147F  3042               	movlw	66
 15246  1480  00B0               	movwf	___ftdiv@f2+2
 15247  1481  085A               	movf	setPercentValue@i,w
 15248  1482  00B1               	movwf	___ftdiv@f1
 15249  1483  085B               	movf	setPercentValue@i+1,w
 15250  1484  00B2               	movwf	___ftdiv@f1+1
 15251  1485  085C               	movf	setPercentValue@i+2,w
 15252  1486  00B3               	movwf	___ftdiv@f1+2
 15253  1487  318E  26A3  3194   	fcall	___ftdiv
 15254  148A  0020               	movlb	0	; select bank0
 15255  148B  082E               	movf	?___ftdiv,w
 15256  148C  00DA               	movwf	setPercentValue@i
 15257  148D  082F               	movf	?___ftdiv+1,w
 15258  148E  00DB               	movwf	setPercentValue@i+1
 15259  148F  0830               	movf	?___ftdiv+2,w
 15260  1490  00DC               	movwf	setPercentValue@i+2
 15261                           
 15262                           ;Dimmer_B1.c: 919: return (100 - (char) ((value - ((char)(80*0.8))) / i));
 15263  1491  0859               	movf	setPercentValue@value,w
 15264  1492  3EC0               	addlw	192
 15265  1493  00A8               	movwf	___awtoft@c
 15266  1494  30FF               	movlw	255
 15267  1495  1803               	skipnc
 15268  1496  3000               	movlw	0
 15269  1497  00A9               	movwf	___awtoft@c+1
 15270  1498  319F  2774  3194   	fcall	___awtoft
 15271  149B  0020               	movlb	0	; select bank0
 15272  149C  0828               	movf	?___awtoft,w
 15273  149D  00B1               	movwf	___ftdiv@f1
 15274  149E  0829               	movf	?___awtoft+1,w
 15275  149F  00B2               	movwf	___ftdiv@f1+1
 15276  14A0  082A               	movf	?___awtoft+2,w
 15277  14A1  00B3               	movwf	___ftdiv@f1+2
 15278  14A2  085A               	movf	setPercentValue@i,w
 15279  14A3  00AE               	movwf	___ftdiv@f2
 15280  14A4  085B               	movf	setPercentValue@i+1,w
 15281  14A5  00AF               	movwf	___ftdiv@f2+1
 15282  14A6  085C               	movf	setPercentValue@i+2,w
 15283  14A7  00B0               	movwf	___ftdiv@f2+2
 15284  14A8  318E  26A3  3194   	fcall	___ftdiv
 15285  14AB  0020               	movlb	0	; select bank0
 15286  14AC  082E               	movf	?___ftdiv,w
 15287  14AD  00CB               	movwf	___fttol@f1
 15288  14AE  082F               	movf	?___ftdiv+1,w
 15289  14AF  00CC               	movwf	___fttol@f1+1
 15290  14B0  0830               	movf	?___ftdiv+2,w
 15291  14B1  00CD               	movwf	___fttol@f1+2
 15292  14B2  318C  24F0         	fcall	___fttol
 15293  14B4  0020               	movlb	0	; select bank0
 15294  14B5  034B               	decf	?___fttol,w
 15295  14B6  3AFF               	xorlw	255
 15296  14B7  3E64               	addlw	100
 15297  14B8  0008               	return
 15298  14B9                     __end_of_setPercentValue:	
 15299                           
 15300                           	psect	text94
 15301  0CF0                     __ptext94:	
 15302 ;; *************** function ___fttol *****************
 15303 ;; Defined at:
 15304 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15305 ;; Parameters:    Size  Location     Type
 15306 ;;  f1              3   43[BANK0 ] float 
 15307 ;; Auto vars:     Size  Location     Type
 15308 ;;  lval            4   52[BANK0 ] unsigned long 
 15309 ;;  exp1            1   56[BANK0 ] unsigned char 
 15310 ;;  sign1           1   51[BANK0 ] unsigned char 
 15311 ;; Return value:  Size  Location     Type
 15312 ;;                  4   43[BANK0 ] long 
 15313 ;; Registers used:
 15314 ;;		wreg, status,2, status,0
 15315 ;; Tracked objects:
 15316 ;;		On entry : 0/0
 15317 ;;		On exit  : 0/0
 15318 ;;		Unchanged: 0/0
 15319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15320 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;Total ram usage:       14 bytes
 15325 ;; Hardware stack levels used:    1
 15326 ;; Hardware stack levels required when called:    5
 15327 ;; This function calls:
 15328 ;;		Nothing
 15329 ;; This function is called by:
 15330 ;;		_getPercentValue
 15331 ;;		_setPercentValue
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           
 15336                           ;psect for function ___fttol
 15337  0CF0                     ___fttol:	
 15338                           
 15339                           ;incstack = 0
 15340                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15341  0CF0  0020               	movlb	0	; select bank0
 15342  0CF1  084B               	movf	___fttol@f1,w
 15343  0CF2  00CF               	movwf	??___fttol
 15344  0CF3  084C               	movf	___fttol@f1+1,w
 15345  0CF4  00D0               	movwf	??___fttol+1
 15346  0CF5  084D               	movf	___fttol@f1+2,w
 15347  0CF6  00D1               	movwf	??___fttol+2
 15348  0CF7  1003               	clrc
 15349  0CF8  0D50               	rlf	??___fttol+1,w
 15350  0CF9  0D51               	rlf	??___fttol+2,w
 15351  0CFA  00D2               	movwf	??___fttol+3
 15352  0CFB  0852               	movf	??___fttol+3,w
 15353  0CFC  00D8               	movwf	___fttol@exp1
 15354  0CFD  08D8               	movf	___fttol@exp1,f
 15355  0CFE  1D03               	skipz
 15356  0CFF  2D09               	goto	l5923
 15357  0D00  3000               	movlw	0
 15358  0D01  00CE               	movwf	?___fttol+3
 15359  0D02  3000               	movlw	0
 15360  0D03  00CD               	movwf	?___fttol+2
 15361  0D04  3000               	movlw	0
 15362  0D05  00CC               	movwf	?___fttol+1
 15363  0D06  3000               	movlw	0
 15364  0D07  00CB               	movwf	?___fttol
 15365  0D08  0008               	return
 15366  0D09                     l5923:	
 15367  0D09  084B               	movf	___fttol@f1,w
 15368  0D0A  00CF               	movwf	??___fttol
 15369  0D0B  084C               	movf	___fttol@f1+1,w
 15370  0D0C  00D0               	movwf	??___fttol+1
 15371  0D0D  084D               	movf	___fttol@f1+2,w
 15372  0D0E  00D1               	movwf	??___fttol+2
 15373  0D0F  3017               	movlw	23
 15374  0D10                     u4775:	
 15375  0D10  36D1               	lsrf	??___fttol+2,f
 15376  0D11  0CD0               	rrf	??___fttol+1,f
 15377  0D12  0CCF               	rrf	??___fttol,f
 15378  0D13  0B89               	decfsz	9,f
 15379  0D14  2D10               	goto	u4775
 15380  0D15  084F               	movf	??___fttol,w
 15381  0D16  00D2               	movwf	??___fttol+3
 15382  0D17  0852               	movf	??___fttol+3,w
 15383  0D18  00D3               	movwf	___fttol@sign1
 15384  0D19  17CC               	bsf	___fttol@f1+1,7
 15385  0D1A  30FF               	movlw	255
 15386  0D1B  05CB               	andwf	___fttol@f1,f
 15387  0D1C  30FF               	movlw	255
 15388  0D1D  05CC               	andwf	___fttol@f1+1,f
 15389  0D1E  3000               	movlw	0
 15390  0D1F  05CD               	andwf	___fttol@f1+2,f
 15391  0D20  084B               	movf	___fttol@f1,w
 15392  0D21  00D4               	movwf	___fttol@lval
 15393  0D22  084C               	movf	___fttol@f1+1,w
 15394  0D23  00D5               	movwf	___fttol@lval+1
 15395  0D24  084D               	movf	___fttol@f1+2,w
 15396  0D25  00D6               	movwf	___fttol@lval+2
 15397  0D26  01D7               	clrf	___fttol@lval+3
 15398  0D27  308E               	movlw	142
 15399  0D28  02D8               	subwf	___fttol@exp1,f
 15400  0D29  1FD8               	btfss	___fttol@exp1,7
 15401  0D2A  2D47               	goto	l5943
 15402  0D2B  0858               	movf	___fttol@exp1,w
 15403  0D2C  3A80               	xorlw	128
 15404  0D2D  3E8F               	addlw	143
 15405  0D2E  1803               	skipnc
 15406  0D2F  2D39               	goto	l5941
 15407  0D30  3000               	movlw	0
 15408  0D31  00CE               	movwf	?___fttol+3
 15409  0D32  3000               	movlw	0
 15410  0D33  00CD               	movwf	?___fttol+2
 15411  0D34  3000               	movlw	0
 15412  0D35  00CC               	movwf	?___fttol+1
 15413  0D36  3000               	movlw	0
 15414  0D37  00CB               	movwf	?___fttol
 15415  0D38  0008               	return
 15416  0D39                     l5941:	
 15417  0D39  3001               	movlw	1
 15418  0D3A                     u4805:	
 15419  0D3A  36D7               	lsrf	___fttol@lval+3,f
 15420  0D3B  0CD6               	rrf	___fttol@lval+2,f
 15421  0D3C  0CD5               	rrf	___fttol@lval+1,f
 15422  0D3D  0CD4               	rrf	___fttol@lval,f
 15423  0D3E  0B89               	decfsz	9,f
 15424  0D3F  2D3A               	goto	u4805
 15425  0D40  3001               	movlw	1
 15426  0D41  00CF               	movwf	??___fttol
 15427  0D42  084F               	movf	??___fttol,w
 15428  0D43  07D8               	addwf	___fttol@exp1,f
 15429  0D44  1903               	btfsc	3,2
 15430  0D45  2D60               	goto	l5953
 15431  0D46  2D39               	goto	l5941
 15432  0D47                     l5943:	
 15433  0D47  3018               	movlw	24
 15434  0D48  0258               	subwf	___fttol@exp1,w
 15435  0D49  1C03               	skipc
 15436  0D4A  2D5D               	goto	l5951
 15437  0D4B  3000               	movlw	0
 15438  0D4C  00CE               	movwf	?___fttol+3
 15439  0D4D  3000               	movlw	0
 15440  0D4E  00CD               	movwf	?___fttol+2
 15441  0D4F  3000               	movlw	0
 15442  0D50  00CC               	movwf	?___fttol+1
 15443  0D51  3000               	movlw	0
 15444  0D52  00CB               	movwf	?___fttol
 15445  0D53  0008               	return
 15446  0D54                     l5949:	
 15447  0D54  3001               	movlw	1
 15448  0D55                     u4835:	
 15449  0D55  35D4               	lslf	___fttol@lval,f
 15450  0D56  0DD5               	rlf	___fttol@lval+1,f
 15451  0D57  0DD6               	rlf	___fttol@lval+2,f
 15452  0D58  0DD7               	rlf	___fttol@lval+3,f
 15453  0D59  0B89               	decfsz	9,f
 15454  0D5A  2D55               	goto	u4835
 15455  0D5B  3001               	movlw	1
 15456  0D5C  02D8               	subwf	___fttol@exp1,f
 15457  0D5D                     l5951:	
 15458  0D5D  08D8               	movf	___fttol@exp1,f
 15459  0D5E  1D03               	skipz
 15460  0D5F  2D54               	goto	l5949
 15461  0D60                     l5953:	
 15462  0D60  0853               	movf	___fttol@sign1,w
 15463  0D61  1903               	btfsc	3,2
 15464  0D62  2D6E               	goto	l5957
 15465  0D63  09D4               	comf	___fttol@lval,f
 15466  0D64  09D5               	comf	___fttol@lval+1,f
 15467  0D65  09D6               	comf	___fttol@lval+2,f
 15468  0D66  09D7               	comf	___fttol@lval+3,f
 15469  0D67  0AD4               	incf	___fttol@lval,f
 15470  0D68  1903               	skipnz
 15471  0D69  0AD5               	incf	___fttol@lval+1,f
 15472  0D6A  1903               	skipnz
 15473  0D6B  0AD6               	incf	___fttol@lval+2,f
 15474  0D6C  1903               	skipnz
 15475  0D6D  0AD7               	incf	___fttol@lval+3,f
 15476  0D6E                     l5957:	
 15477  0D6E  0857               	movf	___fttol@lval+3,w
 15478  0D6F  00CE               	movwf	?___fttol+3
 15479  0D70  0856               	movf	___fttol@lval+2,w
 15480  0D71  00CD               	movwf	?___fttol+2
 15481  0D72  0855               	movf	___fttol@lval+1,w
 15482  0D73  00CC               	movwf	?___fttol+1
 15483  0D74  0854               	movf	___fttol@lval,w
 15484  0D75  00CB               	movwf	?___fttol
 15485  0D76  0008               	return
 15486  0D77                     __end_of___fttol:	
 15487                           
 15488                           	psect	text95
 15489  0EA3                     __ptext95:	
 15490 ;; *************** function ___ftdiv *****************
 15491 ;; Defined at:
 15492 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;  f2              3   14[BANK0 ] float 
 15495 ;;  f1              3   17[BANK0 ] float 
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;  f3              3   25[BANK0 ] float 
 15498 ;;  sign            1   29[BANK0 ] unsigned char 
 15499 ;;  exp             1   28[BANK0 ] unsigned char 
 15500 ;;  cntr            1   24[BANK0 ] unsigned char 
 15501 ;; Return value:  Size  Location     Type
 15502 ;;                  3   14[BANK0 ] float 
 15503 ;; Registers used:
 15504 ;;		wreg, status,2, status,0, pclath, cstack
 15505 ;; Tracked objects:
 15506 ;;		On entry : 0/0
 15507 ;;		On exit  : 0/0
 15508 ;;		Unchanged: 0/0
 15509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15510 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;Total ram usage:       16 bytes
 15515 ;; Hardware stack levels used:    1
 15516 ;; Hardware stack levels required when called:    6
 15517 ;; This function calls:
 15518 ;;		___ftpack
 15519 ;; This function is called by:
 15520 ;;		_getPercentValue
 15521 ;;		_setPercentValue
 15522 ;; This function uses a non-reentrant model
 15523 ;;
 15524                           
 15525                           
 15526                           ;psect for function ___ftdiv
 15527  0EA3                     ___ftdiv:	
 15528                           
 15529                           ;incstack = 0
 15530                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15531  0EA3  0020               	movlb	0	; select bank0
 15532  0EA4  0831               	movf	___ftdiv@f1,w
 15533  0EA5  00B4               	movwf	??___ftdiv
 15534  0EA6  0832               	movf	___ftdiv@f1+1,w
 15535  0EA7  00B5               	movwf	??___ftdiv+1
 15536  0EA8  0833               	movf	___ftdiv@f1+2,w
 15537  0EA9  00B6               	movwf	??___ftdiv+2
 15538  0EAA  1003               	clrc
 15539  0EAB  0D35               	rlf	??___ftdiv+1,w
 15540  0EAC  0D36               	rlf	??___ftdiv+2,w
 15541  0EAD  00B7               	movwf	??___ftdiv+3
 15542  0EAE  0837               	movf	??___ftdiv+3,w
 15543  0EAF  00BC               	movwf	___ftdiv@exp
 15544  0EB0  08BC               	movf	___ftdiv@exp,f
 15545  0EB1  1D03               	skipz
 15546  0EB2  2EBA               	goto	l5831
 15547  0EB3  3000               	movlw	0
 15548  0EB4  00AE               	movwf	?___ftdiv
 15549  0EB5  3000               	movlw	0
 15550  0EB6  00AF               	movwf	?___ftdiv+1
 15551  0EB7  3000               	movlw	0
 15552  0EB8  00B0               	movwf	?___ftdiv+2
 15553  0EB9  0008               	return
 15554  0EBA                     l5831:	
 15555  0EBA  082E               	movf	___ftdiv@f2,w
 15556  0EBB  00B4               	movwf	??___ftdiv
 15557  0EBC  082F               	movf	___ftdiv@f2+1,w
 15558  0EBD  00B5               	movwf	??___ftdiv+1
 15559  0EBE  0830               	movf	___ftdiv@f2+2,w
 15560  0EBF  00B6               	movwf	??___ftdiv+2
 15561  0EC0  1003               	clrc
 15562  0EC1  0D35               	rlf	??___ftdiv+1,w
 15563  0EC2  0D36               	rlf	??___ftdiv+2,w
 15564  0EC3  00B7               	movwf	??___ftdiv+3
 15565  0EC4  0837               	movf	??___ftdiv+3,w
 15566  0EC5  00BD               	movwf	___ftdiv@sign
 15567  0EC6  08BD               	movf	___ftdiv@sign,f
 15568  0EC7  1D03               	skipz
 15569  0EC8  2ED0               	goto	l5837
 15570  0EC9  3000               	movlw	0
 15571  0ECA  00AE               	movwf	?___ftdiv
 15572  0ECB  3000               	movlw	0
 15573  0ECC  00AF               	movwf	?___ftdiv+1
 15574  0ECD  3000               	movlw	0
 15575  0ECE  00B0               	movwf	?___ftdiv+2
 15576  0ECF  0008               	return
 15577  0ED0                     l5837:	
 15578  0ED0  3000               	movlw	0
 15579  0ED1  00B9               	movwf	___ftdiv@f3
 15580  0ED2  3000               	movlw	0
 15581  0ED3  00BA               	movwf	___ftdiv@f3+1
 15582  0ED4  3000               	movlw	0
 15583  0ED5  00BB               	movwf	___ftdiv@f3+2
 15584  0ED6  3089               	movlw	137
 15585  0ED7  073D               	addwf	___ftdiv@sign,w
 15586  0ED8  00B4               	movwf	??___ftdiv
 15587  0ED9  0834               	movf	??___ftdiv,w
 15588  0EDA  02BC               	subwf	___ftdiv@exp,f
 15589  0EDB  0831               	movf	___ftdiv@f1,w
 15590  0EDC  00B4               	movwf	??___ftdiv
 15591  0EDD  0832               	movf	___ftdiv@f1+1,w
 15592  0EDE  00B5               	movwf	??___ftdiv+1
 15593  0EDF  0833               	movf	___ftdiv@f1+2,w
 15594  0EE0  00B6               	movwf	??___ftdiv+2
 15595  0EE1  3010               	movlw	16
 15596  0EE2                     u4585:	
 15597  0EE2  36B6               	lsrf	??___ftdiv+2,f
 15598  0EE3  0CB5               	rrf	??___ftdiv+1,f
 15599  0EE4  0CB4               	rrf	??___ftdiv,f
 15600  0EE5  0B89               	decfsz	9,f
 15601  0EE6  2EE2               	goto	u4585
 15602  0EE7  0834               	movf	??___ftdiv,w
 15603  0EE8  00B7               	movwf	??___ftdiv+3
 15604  0EE9  0837               	movf	??___ftdiv+3,w
 15605  0EEA  00BD               	movwf	___ftdiv@sign
 15606  0EEB  082E               	movf	___ftdiv@f2,w
 15607  0EEC  00B4               	movwf	??___ftdiv
 15608  0EED  082F               	movf	___ftdiv@f2+1,w
 15609  0EEE  00B5               	movwf	??___ftdiv+1
 15610  0EEF  0830               	movf	___ftdiv@f2+2,w
 15611  0EF0  00B6               	movwf	??___ftdiv+2
 15612  0EF1  3010               	movlw	16
 15613  0EF2                     u4595:	
 15614  0EF2  36B6               	lsrf	??___ftdiv+2,f
 15615  0EF3  0CB5               	rrf	??___ftdiv+1,f
 15616  0EF4  0CB4               	rrf	??___ftdiv,f
 15617  0EF5  0B89               	decfsz	9,f
 15618  0EF6  2EF2               	goto	u4595
 15619  0EF7  0834               	movf	??___ftdiv,w
 15620  0EF8  00B7               	movwf	??___ftdiv+3
 15621  0EF9  0837               	movf	??___ftdiv+3,w
 15622  0EFA  06BD               	xorwf	___ftdiv@sign,f
 15623  0EFB  3080               	movlw	128
 15624  0EFC  00B4               	movwf	??___ftdiv
 15625  0EFD  0834               	movf	??___ftdiv,w
 15626  0EFE  05BD               	andwf	___ftdiv@sign,f
 15627  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 15628  0F00  30FF               	movlw	255
 15629  0F01  05B1               	andwf	___ftdiv@f1,f
 15630  0F02  30FF               	movlw	255
 15631  0F03  05B2               	andwf	___ftdiv@f1+1,f
 15632  0F04  3000               	movlw	0
 15633  0F05  05B3               	andwf	___ftdiv@f1+2,f
 15634  0F06  17AF               	bsf	___ftdiv@f2+1,7
 15635  0F07  30FF               	movlw	255
 15636  0F08  05AE               	andwf	___ftdiv@f2,f
 15637  0F09  30FF               	movlw	255
 15638  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 15639  0F0B  3000               	movlw	0
 15640  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 15641  0F0D  3018               	movlw	24
 15642  0F0E  00B4               	movwf	??___ftdiv
 15643  0F0F  0834               	movf	??___ftdiv,w
 15644  0F10  00B8               	movwf	___ftdiv@cntr
 15645  0F11                     l5851:	
 15646  0F11  3001               	movlw	1
 15647  0F12                     u4605:	
 15648  0F12  35B9               	lslf	___ftdiv@f3,f
 15649  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 15650  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 15651  0F15  0B89               	decfsz	9,f
 15652  0F16  2F12               	goto	u4605
 15653  0F17  0830               	movf	___ftdiv@f2+2,w
 15654  0F18  0233               	subwf	___ftdiv@f1+2,w
 15655  0F19  1D03               	skipz
 15656  0F1A  2F21               	goto	u4615
 15657  0F1B  082F               	movf	___ftdiv@f2+1,w
 15658  0F1C  0232               	subwf	___ftdiv@f1+1,w
 15659  0F1D  1D03               	skipz
 15660  0F1E  2F21               	goto	u4615
 15661  0F1F  082E               	movf	___ftdiv@f2,w
 15662  0F20  0231               	subwf	___ftdiv@f1,w
 15663  0F21                     u4615:	
 15664  0F21  1C03               	skipc
 15665  0F22  2F2A               	goto	l5859
 15666  0F23  082E               	movf	___ftdiv@f2,w
 15667  0F24  02B1               	subwf	___ftdiv@f1,f
 15668  0F25  082F               	movf	___ftdiv@f2+1,w
 15669  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 15670  0F27  0830               	movf	___ftdiv@f2+2,w
 15671  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 15672  0F29  1439               	bsf	___ftdiv@f3,0
 15673  0F2A                     l5859:	
 15674  0F2A  3001               	movlw	1
 15675  0F2B                     u4625:	
 15676  0F2B  35B1               	lslf	___ftdiv@f1,f
 15677  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 15678  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 15679  0F2E  0B89               	decfsz	9,f
 15680  0F2F  2F2B               	goto	u4625
 15681  0F30  3001               	movlw	1
 15682  0F31  02B8               	subwf	___ftdiv@cntr,f
 15683  0F32  1D03               	btfss	3,2
 15684  0F33  2F11               	goto	l5851
 15685  0F34  0839               	movf	___ftdiv@f3,w
 15686  0F35  00A0               	movwf	___ftpack@arg
 15687  0F36  083A               	movf	___ftdiv@f3+1,w
 15688  0F37  00A1               	movwf	___ftpack@arg+1
 15689  0F38  083B               	movf	___ftdiv@f3+2,w
 15690  0F39  00A2               	movwf	___ftpack@arg+2
 15691  0F3A  083C               	movf	___ftdiv@exp,w
 15692  0F3B  00B4               	movwf	??___ftdiv
 15693  0F3C  0834               	movf	??___ftdiv,w
 15694  0F3D  00A3               	movwf	___ftpack@exp
 15695  0F3E  083D               	movf	___ftdiv@sign,w
 15696  0F3F  00B5               	movwf	??___ftdiv+1
 15697  0F40  0835               	movf	??___ftdiv+1,w
 15698  0F41  00A4               	movwf	___ftpack@sign
 15699  0F42  3189  211E         	fcall	___ftpack
 15700  0F44  0020               	movlb	0	; select bank0
 15701  0F45  0820               	movf	?___ftpack,w
 15702  0F46  00AE               	movwf	?___ftdiv
 15703  0F47  0821               	movf	?___ftpack+1,w
 15704  0F48  00AF               	movwf	?___ftdiv+1
 15705  0F49  0822               	movf	?___ftpack+2,w
 15706  0F4A  00B0               	movwf	?___ftdiv+2
 15707  0F4B  0008               	return
 15708  0F4C                     __end_of___ftdiv:	
 15709                           
 15710                           	psect	text96
 15711  1F74                     __ptext96:	
 15712 ;; *************** function ___awtoft *****************
 15713 ;; Defined at:
 15714 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  c               2    8[BANK0 ] int 
 15717 ;; Auto vars:     Size  Location     Type
 15718 ;;  sign            1   13[BANK0 ] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;                  3    8[BANK0 ] float 
 15721 ;; Registers used:
 15722 ;;		wreg, status,2, status,0, pclath, cstack
 15723 ;; Tracked objects:
 15724 ;;		On entry : 0/0
 15725 ;;		On exit  : 0/0
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15728 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;Total ram usage:        6 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    6
 15735 ;; This function calls:
 15736 ;;		___ftpack
 15737 ;; This function is called by:
 15738 ;;		_getPercentValue
 15739 ;;		_setPercentValue
 15740 ;; This function uses a non-reentrant model
 15741 ;;
 15742                           
 15743                           
 15744                           ;psect for function ___awtoft
 15745  1F74                     ___awtoft:	
 15746                           
 15747                           ;incstack = 0
 15748                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15749  1F74  0020               	movlb	0	; select bank0
 15750  1F75  01AD               	clrf	___awtoft@sign
 15751  1F76  1FA9               	btfss	___awtoft@c+1,7
 15752  1F77  2F7F               	goto	l5749
 15753  1F78  09A8               	comf	___awtoft@c,f
 15754  1F79  09A9               	comf	___awtoft@c+1,f
 15755  1F7A  0AA8               	incf	___awtoft@c,f
 15756  1F7B  1903               	skipnz
 15757  1F7C  0AA9               	incf	___awtoft@c+1,f
 15758  1F7D  01AD               	clrf	___awtoft@sign
 15759  1F7E  0AAD               	incf	___awtoft@sign,f
 15760  1F7F                     l5749:	
 15761  1F7F  0828               	movf	___awtoft@c,w
 15762  1F80  00A0               	movwf	___ftpack@arg
 15763  1F81  0829               	movf	___awtoft@c+1,w
 15764  1F82  00A1               	movwf	___ftpack@arg+1
 15765  1F83  01A2               	clrf	___ftpack@arg+2
 15766  1F84  308E               	movlw	142
 15767  1F85  00AB               	movwf	??___awtoft
 15768  1F86  082B               	movf	??___awtoft,w
 15769  1F87  00A3               	movwf	___ftpack@exp
 15770  1F88  082D               	movf	___awtoft@sign,w
 15771  1F89  00AC               	movwf	??___awtoft+1
 15772  1F8A  082C               	movf	??___awtoft+1,w
 15773  1F8B  00A4               	movwf	___ftpack@sign
 15774  1F8C  3189  211E         	fcall	___ftpack
 15775  1F8E  0020               	movlb	0	; select bank0
 15776  1F8F  0820               	movf	?___ftpack,w
 15777  1F90  00A8               	movwf	?___awtoft
 15778  1F91  0821               	movf	?___ftpack+1,w
 15779  1F92  00A9               	movwf	?___awtoft+1
 15780  1F93  0822               	movf	?___ftpack+2,w
 15781  1F94  00AA               	movwf	?___awtoft+2
 15782  1F95  0008               	return
 15783  1F96                     __end_of___awtoft:	
 15784                           
 15785                           	psect	text97
 15786  091E                     __ptext97:	
 15787 ;; *************** function ___ftpack *****************
 15788 ;; Defined at:
 15789 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15790 ;; Parameters:    Size  Location     Type
 15791 ;;  arg             3    0[BANK0 ] unsigned um
 15792 ;;  exp             1    3[BANK0 ] unsigned char 
 15793 ;;  sign            1    4[BANK0 ] unsigned char 
 15794 ;; Auto vars:     Size  Location     Type
 15795 ;;		None
 15796 ;; Return value:  Size  Location     Type
 15797 ;;                  3    0[BANK0 ] float 
 15798 ;; Registers used:
 15799 ;;		wreg, status,2, status,0
 15800 ;; Tracked objects:
 15801 ;;		On entry : 0/0
 15802 ;;		On exit  : 0/0
 15803 ;;		Unchanged: 0/0
 15804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15805 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;Total ram usage:        8 bytes
 15810 ;; Hardware stack levels used:    1
 15811 ;; Hardware stack levels required when called:    5
 15812 ;; This function calls:
 15813 ;;		Nothing
 15814 ;; This function is called by:
 15815 ;;		___awtoft
 15816 ;;		___ftadd
 15817 ;;		___ftdiv
 15818 ;;		___ftmul
 15819 ;; This function uses a non-reentrant model
 15820 ;;
 15821                           
 15822                           
 15823                           ;psect for function ___ftpack
 15824  091E                     ___ftpack:	
 15825                           
 15826                           ;incstack = 0
 15827                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15828  091E  0020               	movlb	0	; select bank0
 15829  091F  0823               	movf	___ftpack@exp,w
 15830  0920  1903               	btfsc	3,2
 15831  0921  2927               	goto	l5699
 15832  0922  0822               	movf	___ftpack@arg+2,w
 15833  0923  0421               	iorwf	___ftpack@arg+1,w
 15834  0924  0420               	iorwf	___ftpack@arg,w
 15835  0925  1D03               	skipz
 15836  0926  2938               	goto	l5705
 15837  0927                     l5699:	
 15838  0927  3000               	movlw	0
 15839  0928  00A0               	movwf	?___ftpack
 15840  0929  3000               	movlw	0
 15841  092A  00A1               	movwf	?___ftpack+1
 15842  092B  3000               	movlw	0
 15843  092C  00A2               	movwf	?___ftpack+2
 15844  092D  0008               	return
 15845  092E                     l5703:	
 15846  092E  3001               	movlw	1
 15847  092F  00A5               	movwf	??___ftpack
 15848  0930  0825               	movf	??___ftpack,w
 15849  0931  07A3               	addwf	___ftpack@exp,f
 15850  0932  3001               	movlw	1
 15851  0933                     u4215:	
 15852  0933  36A2               	lsrf	___ftpack@arg+2,f
 15853  0934  0CA1               	rrf	___ftpack@arg+1,f
 15854  0935  0CA0               	rrf	___ftpack@arg,f
 15855  0936  0B89               	decfsz	9,f
 15856  0937  2933               	goto	u4215
 15857  0938                     l5705:	
 15858  0938  30FE               	movlw	254
 15859  0939  0522               	andwf	___ftpack@arg+2,w
 15860  093A  1903               	btfsc	3,2
 15861  093B  2951               	goto	l2893
 15862  093C  292E               	goto	l5703
 15863  093D                     l5707:	
 15864  093D  3001               	movlw	1
 15865  093E  00A5               	movwf	??___ftpack
 15866  093F  0825               	movf	??___ftpack,w
 15867  0940  07A3               	addwf	___ftpack@exp,f
 15868  0941  3001               	movlw	1
 15869  0942  07A0               	addwf	___ftpack@arg,f
 15870  0943  3000               	movlw	0
 15871  0944  1803               	skipnc
 15872  0945  3001               	movlw	1
 15873  0946  07A1               	addwf	___ftpack@arg+1,f
 15874  0947  3000               	movlw	0
 15875  0948  1803               	skipnc
 15876  0949  3001               	movlw	1
 15877  094A  07A2               	addwf	___ftpack@arg+2,f
 15878  094B  3001               	movlw	1
 15879  094C                     u4235:	
 15880  094C  36A2               	lsrf	___ftpack@arg+2,f
 15881  094D  0CA1               	rrf	___ftpack@arg+1,f
 15882  094E  0CA0               	rrf	___ftpack@arg,f
 15883  094F  0B89               	decfsz	9,f
 15884  0950  294C               	goto	u4235
 15885  0951                     l2893:	
 15886  0951  30FF               	movlw	255
 15887  0952  0522               	andwf	___ftpack@arg+2,w
 15888  0953  1903               	btfsc	3,2
 15889  0954  295E               	goto	l5715
 15890  0955  293D               	goto	l5707
 15891  0956                     l5713:	
 15892  0956  3001               	movlw	1
 15893  0957  02A3               	subwf	___ftpack@exp,f
 15894  0958  3001               	movlw	1
 15895  0959                     u4255:	
 15896  0959  35A0               	lslf	___ftpack@arg,f
 15897  095A  0DA1               	rlf	___ftpack@arg+1,f
 15898  095B  0DA2               	rlf	___ftpack@arg+2,f
 15899  095C  0B89               	decfsz	9,f
 15900  095D  2959               	goto	u4255
 15901  095E                     l5715:	
 15902  095E  1FA1               	btfss	___ftpack@arg+1,7
 15903  095F  2956               	goto	l5713
 15904  0960  1823               	btfsc	___ftpack@exp,0
 15905  0961  2968               	goto	l2899
 15906  0962  30FF               	movlw	255
 15907  0963  05A0               	andwf	___ftpack@arg,f
 15908  0964  307F               	movlw	127
 15909  0965  05A1               	andwf	___ftpack@arg+1,f
 15910  0966  30FF               	movlw	255
 15911  0967  05A2               	andwf	___ftpack@arg+2,f
 15912  0968                     l2899:	
 15913  0968  1003               	clrc
 15914  0969  0CA3               	rrf	___ftpack@exp,f
 15915  096A  0823               	movf	___ftpack@exp,w
 15916  096B  00A5               	movwf	??___ftpack
 15917  096C  01A6               	clrf	??___ftpack+1
 15918  096D  01A7               	clrf	??___ftpack+2
 15919  096E  3010               	movlw	16
 15920  096F                     u4285:	
 15921  096F  35A5               	lslf	??___ftpack,f
 15922  0970  0DA6               	rlf	??___ftpack+1,f
 15923  0971  0DA7               	rlf	??___ftpack+2,f
 15924  0972  0B89               	decfsz	9,f
 15925  0973  296F               	goto	u4285
 15926  0974  0825               	movf	??___ftpack,w
 15927  0975  04A0               	iorwf	___ftpack@arg,f
 15928  0976  0826               	movf	??___ftpack+1,w
 15929  0977  04A1               	iorwf	___ftpack@arg+1,f
 15930  0978  0827               	movf	??___ftpack+2,w
 15931  0979  04A2               	iorwf	___ftpack@arg+2,f
 15932  097A  0824               	movf	___ftpack@sign,w
 15933  097B  1903               	btfsc	3,2
 15934  097C  0008               	return
 15935  097D  17A2               	bsf	___ftpack@arg+2,7
 15936  097E  0008               	return
 15937  097F                     __end_of___ftpack:	
 15938                           
 15939                           	psect	text98
 15940  1F14                     __ptext98:	
 15941 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15942 ;; Defined at:
 15943 ;;		line 807 in file "../src/Dimmer_B1.c"
 15944 ;; Parameters:    Size  Location     Type
 15945 ;;  lights          1    wreg     unsigned char 
 15946 ;;  command         1    2[BANK0 ] unsigned char 
 15947 ;; Auto vars:     Size  Location     Type
 15948 ;;  lights          1    4[BANK0 ] unsigned char 
 15949 ;; Return value:  Size  Location     Type
 15950 ;;		None               void
 15951 ;; Registers used:
 15952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15953 ;; Tracked objects:
 15954 ;;		On entry : 0/0
 15955 ;;		On exit  : 0/0
 15956 ;;		Unchanged: 0/0
 15957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15958 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;Total ram usage:        3 bytes
 15963 ;; Hardware stack levels used:    1
 15964 ;; Hardware stack levels required when called:    6
 15965 ;; This function calls:
 15966 ;;		_DimmerLightsPointSelect
 15967 ;; This function is called by:
 15968 ;;		_setDimmerLights_SwOff
 15969 ;;		_setDimmerLights_AdjControl
 15970 ;; This function uses a non-reentrant model
 15971 ;;
 15972                           
 15973                           
 15974                           ;psect for function _setDimmerLights_TriggerAdj
 15975  1F14                     _setDimmerLights_TriggerAdj:	
 15976                           
 15977                           ;incstack = 0
 15978                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15979                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15980  1F14  0020               	movlb	0	; select bank0
 15981  1F15  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15982                           
 15983                           ;Dimmer_B1.c: 808: DimmerLightsPointSelect(lights);
 15984  1F16  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15985  1F17  319C  24FE         	fcall	_DimmerLightsPointSelect
 15986                           
 15987                           ;Dimmer_B1.c: 809: DimmerLights->TriggerAdj = 1;
 15988  1F19  0879               	movf	_DimmerLights,w
 15989  1F1A  3E08               	addlw	8
 15990  1F1B  0086               	movwf	6
 15991  1F1C  3001               	movlw	1	; select bank2/3
 15992  1F1D  0087               	movwf	7
 15993  1F1E  1601               	bsf	1,4
 15994                           
 15995                           ;Dimmer_B1.c: 810: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15996  1F1F  0020               	movlb	0	; select bank0
 15997  1F20  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15998  1F21  3A01               	xorlw	1
 15999  1F22  3000               	movlw	0
 16000  1F23  1903               	skipnz
 16001  1F24  3001               	movlw	1
 16002  1F25  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16003  1F26  0879               	movf	_DimmerLights,w
 16004  1F27  3E08               	addlw	8
 16005  1F28  0086               	movwf	6
 16006  1F29  3001               	movlw	1	; select bank2/3
 16007  1F2A  0087               	movwf	7
 16008  1F2B  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16009  1F2C  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16010  1F2D  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16011  1F2E  0801               	movf	1,w
 16012  1F2F  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16013  1F30  39F7               	andlw	-9
 16014  1F31  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16015  1F32  0081               	movwf	1
 16016  1F33  0008               	return
 16017  1F34                     __end_of_setDimmerLights_TriggerAdj:	
 16018                           
 16019                           	psect	text99
 16020  1EB8                     __ptext99:	
 16021 ;; *************** function _setDimmerLights_Trigger *****************
 16022 ;; Defined at:
 16023 ;;		line 801 in file "../src/Dimmer_B1.c"
 16024 ;; Parameters:    Size  Location     Type
 16025 ;;  lights          1    wreg     unsigned char 
 16026 ;;  command         1    2[BANK0 ] unsigned char 
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  lights          1    4[BANK0 ] unsigned char 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;		None               void
 16031 ;; Registers used:
 16032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16038 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;Total ram usage:        3 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:    6
 16045 ;; This function calls:
 16046 ;;		_DimmerLightsPointSelect
 16047 ;; This function is called by:
 16048 ;;		_setDimmerLights_SwOn
 16049 ;;		_setDimmerLights_SwOff
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           
 16054                           ;psect for function _setDimmerLights_Trigger
 16055  1EB8                     _setDimmerLights_Trigger:	
 16056                           
 16057                           ;incstack = 0
 16058                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16059                           ;setDimmerLights_Trigger@lights stored from wreg
 16060  1EB8  0020               	movlb	0	; select bank0
 16061  1EB9  00A4               	movwf	setDimmerLights_Trigger@lights
 16062                           
 16063                           ;Dimmer_B1.c: 802: DimmerLightsPointSelect(lights);
 16064  1EBA  0824               	movf	setDimmerLights_Trigger@lights,w
 16065  1EBB  319C  24FE         	fcall	_DimmerLightsPointSelect
 16066                           
 16067                           ;Dimmer_B1.c: 803: DimmerLights->Trigger = 1;
 16068  1EBD  0879               	movf	_DimmerLights,w
 16069  1EBE  3E08               	addlw	8
 16070  1EBF  0086               	movwf	6
 16071  1EC0  3001               	movlw	1	; select bank2/3
 16072  1EC1  0087               	movwf	7
 16073  1EC2  1501               	bsf	1,2
 16074                           
 16075                           ;Dimmer_B1.c: 804: DimmerLights->Switch = command == 1 ? 1 : 0;
 16076  1EC3  0020               	movlb	0	; select bank0
 16077  1EC4  0822               	movf	setDimmerLights_Trigger@command,w
 16078  1EC5  3A01               	xorlw	1
 16079  1EC6  3000               	movlw	0
 16080  1EC7  1903               	skipnz
 16081  1EC8  3001               	movlw	1
 16082  1EC9  00A3               	movwf	??_setDimmerLights_Trigger
 16083  1ECA  0879               	movf	_DimmerLights,w
 16084  1ECB  3E08               	addlw	8
 16085  1ECC  0086               	movwf	6
 16086  1ECD  3001               	movlw	1	; select bank2/3
 16087  1ECE  0087               	movwf	7
 16088  1ECF  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16089  1ED0  0801               	movf	1,w
 16090  1ED1  0623               	xorwf	??_setDimmerLights_Trigger,w
 16091  1ED2  39FD               	andlw	-3
 16092  1ED3  0623               	xorwf	??_setDimmerLights_Trigger,w
 16093  1ED4  0081               	movwf	1
 16094  1ED5  0008               	return
 16095  1ED6                     __end_of_setDimmerLights_Trigger:	
 16096                           
 16097                           	psect	text100
 16098  08BD                     __ptext100:	
 16099 ;; *************** function _setDelayOff_GO *****************
 16100 ;; Defined at:
 16101 ;;		line 86 in file "../src/DelayOff_B1.c"
 16102 ;; Parameters:    Size  Location     Type
 16103 ;;  sw              1    wreg     unsigned char 
 16104 ;;  command         1   10[BANK0 ] unsigned char 
 16105 ;;  value           1   11[BANK0 ] unsigned char 
 16106 ;; Auto vars:     Size  Location     Type
 16107 ;;  sw              1   14[BANK0 ] unsigned char 
 16108 ;; Return value:  Size  Location     Type
 16109 ;;		None               void
 16110 ;; Registers used:
 16111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16112 ;; Tracked objects:
 16113 ;;		On entry : 0/0
 16114 ;;		On exit  : 0/0
 16115 ;;		Unchanged: 0/0
 16116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16117 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16119 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16120 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16121 ;;Total ram usage:        5 bytes
 16122 ;; Hardware stack levels used:    1
 16123 ;; Hardware stack levels required when called:    7
 16124 ;; This function calls:
 16125 ;;		_DelayOffPointSelect
 16126 ;;		_DelayTimejudge
 16127 ;; This function is called by:
 16128 ;;		_setDimmerLights_SwOff
 16129 ;;		_setRFSW_Control
 16130 ;; This function uses a non-reentrant model
 16131 ;;
 16132                           
 16133                           
 16134                           ;psect for function _setDelayOff_GO
 16135  08BD                     _setDelayOff_GO:	
 16136                           
 16137                           ;incstack = 0
 16138                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16139                           ;setDelayOff_GO@sw stored from wreg
 16140  08BD  0020               	movlb	0	; select bank0
 16141  08BE  00AE               	movwf	setDelayOff_GO@sw
 16142                           
 16143                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16144  08BF  082E               	movf	setDelayOff_GO@sw,w
 16145  08C0  319D  255E  3188   	fcall	_DelayOffPointSelect
 16146                           
 16147                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16148  08C3  0878               	movf	_DelayOff,w
 16149  08C4  0086               	movwf	6
 16150  08C5  3001               	movlw	1	; select bank2/3
 16151  08C6  0087               	movwf	7
 16152  08C7  1C01               	btfss	1,0
 16153  08C8  0008               	return
 16154                           
 16155                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16156  08C9  0020               	movlb	0	; select bank0
 16157  08CA  082A               	movf	setDelayOff_GO@command,w
 16158  08CB  3A01               	xorlw	1
 16159  08CC  3000               	movlw	0
 16160  08CD  1903               	skipnz
 16161  08CE  3001               	movlw	1
 16162  08CF  00AC               	movwf	??_setDelayOff_GO
 16163  08D0  0878               	movf	_DelayOff,w
 16164  08D1  0086               	movwf	6
 16165  08D2  3001               	movlw	1	; select bank2/3
 16166  08D3  0087               	movwf	7
 16167  08D4  0DAC               	rlf	??_setDelayOff_GO,f
 16168  08D5  0801               	movf	1,w
 16169  08D6  062C               	xorwf	??_setDelayOff_GO,w
 16170  08D7  39FD               	andlw	-3
 16171  08D8  062C               	xorwf	??_setDelayOff_GO,w
 16172  08D9  0081               	movwf	1
 16173                           
 16174                           ;DelayOff_B1.c: 90: if (command == 1) {
 16175  08DA  082A               	movf	setDelayOff_GO@command,w
 16176  08DB  3A01               	xorlw	1
 16177  08DC  1D03               	skipz
 16178  08DD  2908               	goto	l6117
 16179                           
 16180                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16181  08DE  082B               	movf	setDelayOff_GO@value,w
 16182  08DF  3191  2148  3188   	fcall	_DelayTimejudge
 16183  08E2  0020               	movlb	0	; select bank0
 16184  08E3  00AC               	movwf	??_setDelayOff_GO
 16185  08E4  0878               	movf	_DelayOff,w
 16186  08E5  0086               	movwf	6
 16187  08E6  3001               	movlw	1	; select bank2/3
 16188  08E7  0087               	movwf	7
 16189  08E8  082C               	movf	??_setDelayOff_GO,w
 16190  08E9  0081               	movwf	1
 16191                           
 16192                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16193  08EA  300F               	movlw	15
 16194  08EB  052B               	andwf	setDelayOff_GO@value,w
 16195  08EC  00AC               	movwf	??_setDelayOff_GO
 16196  08ED  082C               	movf	??_setDelayOff_GO,w
 16197  08EE  3A05               	xorlw	5
 16198  08EF  1903               	skipnz
 16199  08F0  28F5               	goto	l6111
 16200  08F1  082B               	movf	setDelayOff_GO@value,w
 16201  08F2  390F               	andlw	15
 16202  08F3  1D03               	btfss	3,2
 16203  08F4  28FB               	goto	l6115
 16204  08F5                     l6111:	
 16205  08F5  3026               	movlw	38
 16206  08F6  022B               	subwf	setDelayOff_GO@value,w
 16207  08F7  1803               	skipnc
 16208  08F8  28FB               	goto	l6115
 16209                           
 16210                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16211  08F9  082B               	movf	setDelayOff_GO@value,w
 16212  08FA  28FC               	goto	L8
 16213  08FB                     l6115:	
 16214                           ;DelayOff_B1.c: 94: } else {
 16215                           
 16216                           
 16217                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16218  08FB  3005               	movlw	5
 16219  08FC                     L8:	
 16220  08FC  00AC               	movwf	??_setDelayOff_GO
 16221  08FD  082E               	movf	setDelayOff_GO@sw,w
 16222  08FE  3E1A               	addlw	26
 16223  08FF  076F               	addwf	_product,w
 16224  0900  00AD               	movwf	??_setDelayOff_GO+1
 16225  0901  082D               	movf	??_setDelayOff_GO+1,w
 16226  0902  0086               	movwf	6
 16227  0903  3002               	movlw	2	; select bank4/5
 16228  0904  0087               	movwf	7
 16229  0905  082C               	movf	??_setDelayOff_GO,w
 16230  0906  0081               	movwf	1
 16231                           
 16232                           ;DelayOff_B1.c: 96: }
 16233                           ;DelayOff_B1.c: 97: } else {
 16234  0907  2911               	goto	l6119
 16235  0908                     l6117:	
 16236                           
 16237                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16238  0908  082E               	movf	setDelayOff_GO@sw,w
 16239  0909  3E1A               	addlw	26
 16240  090A  076F               	addwf	_product,w
 16241  090B  00AC               	movwf	??_setDelayOff_GO
 16242  090C  082C               	movf	??_setDelayOff_GO,w
 16243  090D  0086               	movwf	6
 16244  090E  3002               	movlw	2	; select bank4/5
 16245  090F  0087               	movwf	7
 16246  0910  0181               	clrf	1
 16247  0911                     l6119:	
 16248                           
 16249                           ;DelayOff_B1.c: 99: }
 16250                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16251  0911  0878               	movf	_DelayOff,w
 16252  0912  0086               	movwf	6
 16253  0913  3001               	movlw	1	; select bank2/3
 16254  0914  0087               	movwf	7
 16255  0915  3000               	movlw	0
 16256  0916  3FC0               	movwi [0]fsr1
 16257  0917  3FC1               	movwi [1]fsr1
 16258                           
 16259                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16260  0918  0878               	movf	_DelayOff,w
 16261  0919  0086               	movwf	6
 16262  091A  3001               	movlw	1	; select bank2/3
 16263  091B  0087               	movwf	7
 16264  091C  0181               	clrf	1
 16265  091D  0008               	return
 16266  091E                     __end_of_setDelayOff_GO:	
 16267                           
 16268                           	psect	text101
 16269  1148                     __ptext101:	
 16270 ;; *************** function _DelayTimejudge *****************
 16271 ;; Defined at:
 16272 ;;		line 106 in file "../src/DelayOff_B1.c"
 16273 ;; Parameters:    Size  Location     Type
 16274 ;;  value           1    wreg     unsigned char 
 16275 ;; Auto vars:     Size  Location     Type
 16276 ;;  value           1    9[BANK0 ] unsigned char 
 16277 ;;  k               1    8[BANK0 ] unsigned char 
 16278 ;;  j               1    7[BANK0 ] unsigned char 
 16279 ;;  i               1    6[BANK0 ] unsigned char 
 16280 ;; Return value:  Size  Location     Type
 16281 ;;                  1    wreg      unsigned char 
 16282 ;; Registers used:
 16283 ;;		wreg, status,2, status,0, pclath, cstack
 16284 ;; Tracked objects:
 16285 ;;		On entry : 0/0
 16286 ;;		On exit  : 0/0
 16287 ;;		Unchanged: 0/0
 16288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;Total ram usage:        6 bytes
 16294 ;; Hardware stack levels used:    1
 16295 ;; Hardware stack levels required when called:    6
 16296 ;; This function calls:
 16297 ;;		___bmul
 16298 ;; This function is called by:
 16299 ;;		_setDelayOff_GO
 16300 ;; This function uses a non-reentrant model
 16301 ;;
 16302                           
 16303                           
 16304                           ;psect for function _DelayTimejudge
 16305  1148                     _DelayTimejudge:	
 16306                           
 16307                           ;incstack = 0
 16308                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16309                           ;DelayTimejudge@value stored from wreg
 16310  1148  0020               	movlb	0	; select bank0
 16311  1149  00A9               	movwf	DelayTimejudge@value
 16312                           
 16313                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16314  114A  3005               	movlw	5
 16315  114B  00A4               	movwf	??_DelayTimejudge
 16316  114C  0824               	movf	??_DelayTimejudge,w
 16317  114D  00A6               	movwf	DelayTimejudge@i
 16318  114E  01A7               	clrf	DelayTimejudge@j
 16319  114F  01A8               	clrf	DelayTimejudge@k
 16320                           
 16321                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16322  1150  3031               	movlw	49
 16323  1151  0229               	subwf	DelayTimejudge@value,w
 16324  1152  1803               	skipnc
 16325  1153  2970               	goto	l5981
 16326                           
 16327                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16328  1154  0829               	movf	DelayTimejudge@value,w
 16329  1155  390F               	andlw	15
 16330  1156  00A4               	movwf	??_DelayTimejudge
 16331  1157  0824               	movf	??_DelayTimejudge,w
 16332  1158  00A7               	movwf	DelayTimejudge@j
 16333                           
 16334                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16335  1159  0829               	movf	DelayTimejudge@value,w
 16336  115A  00A4               	movwf	??_DelayTimejudge
 16337  115B  3004               	movlw	4
 16338  115C                     u4895:	
 16339  115C  36A4               	lsrf	??_DelayTimejudge,f
 16340  115D  0B89               	decfsz	9,f
 16341  115E  295C               	goto	u4895
 16342  115F  0824               	movf	??_DelayTimejudge,w
 16343  1160  390F               	andlw	15
 16344  1161  00A5               	movwf	??_DelayTimejudge+1
 16345  1162  0825               	movf	??_DelayTimejudge+1,w
 16346  1163  00A8               	movwf	DelayTimejudge@k
 16347                           
 16348                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16349  1164  300A               	movlw	10
 16350  1165  00A4               	movwf	??_DelayTimejudge
 16351  1166  0824               	movf	??_DelayTimejudge,w
 16352  1167  00A0               	movwf	___bmul@multiplicand
 16353  1168  0828               	movf	DelayTimejudge@k,w
 16354  1169  319C  24C8         	fcall	___bmul
 16355  116B  0020               	movlb	0	; select bank0
 16356  116C  0727               	addwf	DelayTimejudge@j,w
 16357  116D  00A5               	movwf	??_DelayTimejudge+1
 16358  116E  0825               	movf	??_DelayTimejudge+1,w
 16359  116F  00A6               	movwf	DelayTimejudge@i
 16360  1170                     l5981:	
 16361                           
 16362                           ;DelayOff_B1.c: 112: }
 16363                           ;DelayOff_B1.c: 133: return i;
 16364  1170  0826               	movf	DelayTimejudge@i,w
 16365  1171  0008               	return
 16366  1172                     __end_of_DelayTimejudge:	
 16367                           
 16368                           	psect	text102
 16369  1CC8                     __ptext102:	
 16370 ;; *************** function ___bmul *****************
 16371 ;; Defined at:
 16372 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16373 ;; Parameters:    Size  Location     Type
 16374 ;;  multiplier      1    wreg     unsigned char 
 16375 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16376 ;; Auto vars:     Size  Location     Type
 16377 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16378 ;;  product         1    2[BANK0 ] unsigned char 
 16379 ;; Return value:  Size  Location     Type
 16380 ;;                  1    wreg      unsigned char 
 16381 ;; Registers used:
 16382 ;;		wreg, status,2, status,0
 16383 ;; Tracked objects:
 16384 ;;		On entry : 0/0
 16385 ;;		On exit  : 0/0
 16386 ;;		Unchanged: 0/0
 16387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16388 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;Total ram usage:        4 bytes
 16393 ;; Hardware stack levels used:    1
 16394 ;; Hardware stack levels required when called:    5
 16395 ;; This function calls:
 16396 ;;		Nothing
 16397 ;; This function is called by:
 16398 ;;		_DelayTimejudge
 16399 ;; This function uses a non-reentrant model
 16400 ;;
 16401                           
 16402                           
 16403                           ;psect for function ___bmul
 16404  1CC8                     ___bmul:	
 16405                           
 16406                           ;incstack = 0
 16407                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16408                           ;___bmul@multiplier stored from wreg
 16409  1CC8  0020               	movlb	0	; select bank0
 16410  1CC9  00A3               	movwf	___bmul@multiplier
 16411  1CCA  01A2               	clrf	___bmul@product
 16412  1CCB                     l5727:	
 16413  1CCB  1C23               	btfss	___bmul@multiplier,0
 16414  1CCC  2CD1               	goto	l5731
 16415  1CCD  0820               	movf	___bmul@multiplicand,w
 16416  1CCE  00A1               	movwf	??___bmul
 16417  1CCF  0821               	movf	??___bmul,w
 16418  1CD0  07A2               	addwf	___bmul@product,f
 16419  1CD1                     l5731:	
 16420  1CD1  1003               	clrc
 16421  1CD2  0DA0               	rlf	___bmul@multiplicand,f
 16422  1CD3  1003               	clrc
 16423  1CD4  0CA3               	rrf	___bmul@multiplier,f
 16424  1CD5  08A3               	movf	___bmul@multiplier,f
 16425  1CD6  1D03               	skipz
 16426  1CD7  2CCB               	goto	l5727
 16427  1CD8  0822               	movf	___bmul@product,w
 16428  1CD9  0008               	return
 16429  1CDA                     __end_of___bmul:	
 16430                           
 16431                           	psect	text103
 16432  1C62                     __ptext103:	
 16433 ;; *************** function _getDimmerLights_Status *****************
 16434 ;; Defined at:
 16435 ;;		line 459 in file "../src/Dimmer_B1.c"
 16436 ;; Parameters:    Size  Location     Type
 16437 ;;  lights          1    wreg     unsigned char 
 16438 ;; Auto vars:     Size  Location     Type
 16439 ;;  lights          1    2[BANK0 ] unsigned char 
 16440 ;;  status          1    3[BANK0 ] unsigned char 
 16441 ;; Return value:  Size  Location     Type
 16442 ;;                  1    wreg      unsigned char 
 16443 ;; Registers used:
 16444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16445 ;; Tracked objects:
 16446 ;;		On entry : 0/0
 16447 ;;		On exit  : 0/0
 16448 ;;		Unchanged: 0/0
 16449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;Total ram usage:        2 bytes
 16455 ;; Hardware stack levels used:    1
 16456 ;; Hardware stack levels required when called:    6
 16457 ;; This function calls:
 16458 ;;		_DimmerLightsPointSelect
 16459 ;; This function is called by:
 16460 ;;		_DlyOff_Main
 16461 ;;		_setDimmerLights_ErrorClose
 16462 ;;		_setRFSW_Control
 16463 ;;		_setRFSW_AdjControl
 16464 ;;		_getMain_LightsStatus
 16465 ;; This function uses a non-reentrant model
 16466 ;;
 16467                           
 16468                           
 16469                           ;psect for function _getDimmerLights_Status
 16470  1C62                     _getDimmerLights_Status:	
 16471                           
 16472                           ;incstack = 0
 16473                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16474                           ;getDimmerLights_Status@lights stored from wreg
 16475  1C62  0020               	movlb	0	; select bank0
 16476  1C63  00A2               	movwf	getDimmerLights_Status@lights
 16477                           
 16478                           ;Dimmer_B1.c: 460: DimmerLightsPointSelect(lights);
 16479  1C64  0822               	movf	getDimmerLights_Status@lights,w
 16480  1C65  319C  24FE         	fcall	_DimmerLightsPointSelect
 16481                           
 16482                           ;Dimmer_B1.c: 461: char status = DimmerLights->Status == 1 ? 1 : 0;
 16483  1C67  0879               	movf	_DimmerLights,w
 16484  1C68  0086               	movwf	6
 16485  1C69  3001               	movlw	1	; select bank2/3
 16486  1C6A  0087               	movwf	7
 16487  1C6B  3000               	movlw	0
 16488  1C6C  1A81               	btfsc	1,5
 16489  1C6D  3001               	movlw	1
 16490  1C6E  0020               	movlb	0	; select bank0
 16491  1C6F  00A3               	movwf	getDimmerLights_Status@status
 16492                           
 16493                           ;Dimmer_B1.c: 462: return status;
 16494  1C70  0823               	movf	getDimmerLights_Status@status,w
 16495  1C71  0008               	return
 16496  1C72                     __end_of_getDimmerLights_Status:	
 16497                           
 16498                           	psect	text104
 16499  1CFE                     __ptext104:	
 16500 ;; *************** function _DimmerLightsPointSelect *****************
 16501 ;; Defined at:
 16502 ;;		line 324 in file "../src/Dimmer_B1.c"
 16503 ;; Parameters:    Size  Location     Type
 16504 ;;  lights          1    wreg     unsigned char 
 16505 ;; Auto vars:     Size  Location     Type
 16506 ;;  lights          1    1[BANK0 ] unsigned char 
 16507 ;; Return value:  Size  Location     Type
 16508 ;;		None               void
 16509 ;; Registers used:
 16510 ;;		wreg
 16511 ;; Tracked objects:
 16512 ;;		On entry : 0/0
 16513 ;;		On exit  : 0/0
 16514 ;;		Unchanged: 0/0
 16515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;Total ram usage:        2 bytes
 16521 ;; Hardware stack levels used:    1
 16522 ;; Hardware stack levels required when called:    5
 16523 ;; This function calls:
 16524 ;;		Nothing
 16525 ;; This function is called by:
 16526 ;;		_setDimmerLights_Initialization
 16527 ;;		_setDimmerLights_Main
 16528 ;;		_getDimmerLights_Status
 16529 ;;		_setDimmerLights_SwOn
 16530 ;;		_setDimmerLights_SwOff
 16531 ;;		_setDimmerLights_AdjControl
 16532 ;;		_setDimmerLights_ErrorClose
 16533 ;;		_setDimmerLights
 16534 ;;		_setDimmerLights_Adj
 16535 ;;		_setDimmerLights_AdjRF
 16536 ;;		_setDimmerLights_Trigger
 16537 ;;		_setDimmerLights_TriggerAdj
 16538 ;;		_setDimmerLights_Status
 16539 ;;		_setDimmerLights_GO
 16540 ;;		_setDimmerLights_MaxmumValue
 16541 ;; This function uses a non-reentrant model
 16542 ;;
 16543                           
 16544                           
 16545                           ;psect for function _DimmerLightsPointSelect
 16546  1CFE                     _DimmerLightsPointSelect:	
 16547                           
 16548                           ;incstack = 0
 16549                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16550                           ;DimmerLightsPointSelect@lights stored from wreg
 16551  1CFE  0020               	movlb	0	; select bank0
 16552  1CFF  00A1               	movwf	DimmerLightsPointSelect@lights
 16553                           
 16554                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16555  1D00  0821               	movf	DimmerLightsPointSelect@lights,w
 16556  1D01  3A01               	xorlw	1
 16557  1D02  1D03               	skipz
 16558  1D03  2D08               	goto	l766
 16559                           
 16560                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16561  1D04  30BE               	movlw	_DimmerLights1& (0+255)
 16562  1D05  00A0               	movwf	??_DimmerLightsPointSelect
 16563  1D06  0820               	movf	??_DimmerLightsPointSelect,w
 16564  1D07  00F9               	movwf	_DimmerLights
 16565  1D08                     l766:	
 16566                           
 16567                           ;Dimmer_B1.c: 328: }
 16568                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16569  1D08  0821               	movf	DimmerLightsPointSelect@lights,w
 16570  1D09  3A02               	xorlw	2
 16571  1D0A  1D03               	skipz
 16572  1D0B  0008               	return
 16573                           
 16574                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16575  1D0C  30CD               	movlw	_DimmerLights2& (0+255)
 16576  1D0D  00A0               	movwf	??_DimmerLightsPointSelect
 16577  1D0E  0820               	movf	??_DimmerLightsPointSelect,w
 16578  1D0F  00F9               	movwf	_DimmerLights
 16579  1D10  0008               	return
 16580  1D11                     __end_of_DimmerLightsPointSelect:	
 16581                           
 16582                           	psect	text105
 16583  1B82                     __ptext105:	
 16584 ;; *************** function _DelayOff_Initialization *****************
 16585 ;; Defined at:
 16586 ;;		line 26 in file "../src/DelayOff_B1.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;		None
 16589 ;; Auto vars:     Size  Location     Type
 16590 ;;		None
 16591 ;; Return value:  Size  Location     Type
 16592 ;;		None               void
 16593 ;; Registers used:
 16594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16595 ;; Tracked objects:
 16596 ;;		On entry : 0/0
 16597 ;;		On exit  : 0/0
 16598 ;;		Unchanged: 0/0
 16599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;Total ram usage:        0 bytes
 16605 ;; Hardware stack levels used:    1
 16606 ;; Hardware stack levels required when called:    7
 16607 ;; This function calls:
 16608 ;;		_DlyOff_Initialization
 16609 ;; This function is called by:
 16610 ;;		_main
 16611 ;; This function uses a non-reentrant model
 16612 ;;
 16613                           
 16614                           
 16615                           ;psect for function _DelayOff_Initialization
 16616  1B82                     _DelayOff_Initialization:	
 16617                           
 16618                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16619                           
 16620                           ;incstack = 0
 16621                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16622  1B82  3001               	movlw	1
 16623  1B83  319B  23B3  319B   	fcall	_DlyOff_Initialization
 16624                           
 16625                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16626  1B86  3002               	movlw	2
 16627  1B87  319B  23B3         	fcall	_DlyOff_Initialization
 16628  1B89  0008               	return
 16629  1B8A                     __end_of_DelayOff_Initialization:	
 16630                           
 16631                           	psect	text106
 16632  1BB3                     __ptext106:	
 16633 ;; *************** function _DlyOff_Initialization *****************
 16634 ;; Defined at:
 16635 ;;		line 56 in file "../src/DelayOff_B1.c"
 16636 ;; Parameters:    Size  Location     Type
 16637 ;;  sw              1    wreg     unsigned char 
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;  sw              1    2[BANK0 ] unsigned char 
 16640 ;; Return value:  Size  Location     Type
 16641 ;;		None               void
 16642 ;; Registers used:
 16643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16644 ;; Tracked objects:
 16645 ;;		On entry : 0/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;Total ram usage:        1 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; Hardware stack levels required when called:    6
 16656 ;; This function calls:
 16657 ;;		_DelayOffPointSelect
 16658 ;; This function is called by:
 16659 ;;		_DelayOff_Initialization
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           
 16664                           ;psect for function _DlyOff_Initialization
 16665  1BB3                     _DlyOff_Initialization:	
 16666                           
 16667                           ;incstack = 0
 16668                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16669                           ;DlyOff_Initialization@sw stored from wreg
 16670  1BB3  0020               	movlb	0	; select bank0
 16671  1BB4  00A2               	movwf	DlyOff_Initialization@sw
 16672                           
 16673                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16674  1BB5  0822               	movf	DlyOff_Initialization@sw,w
 16675  1BB6  319D  255E         	fcall	_DelayOffPointSelect
 16676                           
 16677                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16678  1BB8  0878               	movf	_DelayOff,w
 16679  1BB9  0086               	movwf	6
 16680  1BBA  3001               	movlw	1	; select bank2/3
 16681  1BBB  0087               	movwf	7
 16682  1BBC  1401               	bsf	1,0
 16683  1BBD  0008               	return
 16684  1BBE                     __end_of_DlyOff_Initialization:	
 16685                           
 16686                           	psect	text107
 16687  1D5E                     __ptext107:	
 16688 ;; *************** function _DelayOffPointSelect *****************
 16689 ;; Defined at:
 16690 ;;		line 7 in file "../src/DelayOff_B1.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;  sw              1    wreg     unsigned char 
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;  sw              1    1[BANK0 ] unsigned char 
 16695 ;; Return value:  Size  Location     Type
 16696 ;;		None               void
 16697 ;; Registers used:
 16698 ;;		wreg
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;Total ram usage:        2 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; Hardware stack levels required when called:    5
 16711 ;; This function calls:
 16712 ;;		Nothing
 16713 ;; This function is called by:
 16714 ;;		_DlyOff_Initialization
 16715 ;;		_DlyOff_Main
 16716 ;;		_setDelayOff_GO
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           
 16721                           ;psect for function _DelayOffPointSelect
 16722  1D5E                     _DelayOffPointSelect:	
 16723                           
 16724                           ;incstack = 0
 16725                           ; Regs used in _DelayOffPointSelect: [wreg]
 16726                           ;DelayOffPointSelect@sw stored from wreg
 16727  1D5E  0020               	movlb	0	; select bank0
 16728  1D5F  00A1               	movwf	DelayOffPointSelect@sw
 16729                           
 16730                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16731  1D60  0821               	movf	DelayOffPointSelect@sw,w
 16732  1D61  3A01               	xorlw	1
 16733  1D62  1D03               	skipz
 16734  1D63  2D69               	goto	l5965
 16735                           
 16736                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16737  1D64  306C               	movlw	_DlySw1& (0+255)
 16738  1D65  00A0               	movwf	??_DelayOffPointSelect
 16739  1D66  0820               	movf	??_DelayOffPointSelect,w
 16740  1D67  00F8               	movwf	_DelayOff
 16741                           
 16742                           ;DelayOff_B1.c: 11: }
 16743  1D68  0008               	return
 16744  1D69                     l5965:	
 16745                           
 16746                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16747  1D69  0821               	movf	DelayOffPointSelect@sw,w
 16748  1D6A  3A02               	xorlw	2
 16749  1D6B  1D03               	skipz
 16750  1D6C  0008               	return
 16751                           
 16752                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16753  1D6D  306E               	movlw	_DlySw2& (0+255)
 16754  1D6E  00A0               	movwf	??_DelayOffPointSelect
 16755  1D6F  0820               	movf	??_DelayOffPointSelect,w
 16756  1D70  00F8               	movwf	_DelayOff
 16757  1D71  0008               	return
 16758  1D72                     __end_of_DelayOffPointSelect:	
 16759                           
 16760                           	psect	text108
 16761  1DAF                     __ptext108:	
 16762 ;; *************** function _CC2500_PowerOnInitial *****************
 16763 ;; Defined at:
 16764 ;;		line 122 in file "../src/CC2500_B1.c"
 16765 ;; Parameters:    Size  Location     Type
 16766 ;;		None
 16767 ;; Auto vars:     Size  Location     Type
 16768 ;;		None
 16769 ;; Return value:  Size  Location     Type
 16770 ;;		None               void
 16771 ;; Registers used:
 16772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16773 ;; Tracked objects:
 16774 ;;		On entry : 0/0
 16775 ;;		On exit  : 0/0
 16776 ;;		Unchanged: 0/0
 16777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;Total ram usage:        0 bytes
 16783 ;; Hardware stack levels used:    1
 16784 ;; Hardware stack levels required when called:    8
 16785 ;; This function calls:
 16786 ;;		_CC2500_ClearRXFIFO
 16787 ;;		_CC2500_ClearTXFIFO
 16788 ;;		_CC2500_FrequencyCabr
 16789 ;;		_CC2500_InitPATable
 16790 ;;		_CC2500_InitSetREG
 16791 ;;		_CC2500_PowerRST
 16792 ;;		_CC2500_SIDLEMode
 16793 ;; This function is called by:
 16794 ;;		_main
 16795 ;; This function uses a non-reentrant model
 16796 ;;
 16797                           
 16798                           
 16799                           ;psect for function _CC2500_PowerOnInitial
 16800  1DAF                     _CC2500_PowerOnInitial:	
 16801                           
 16802                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16803                           
 16804                           ;incstack = 0
 16805                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16806  1DAF  3194  242F  319D   	fcall	_CC2500_PowerRST
 16807                           
 16808                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16809  1DB2  3191  211E  319D   	fcall	_CC2500_InitSetREG
 16810                           
 16811                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16812  1DB5  319E  26D6  319D   	fcall	_CC2500_InitPATable
 16813                           
 16814                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16815  1DB8  319B  2351  319D   	fcall	_CC2500_ClearTXFIFO
 16816                           
 16817                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16818  1DBB  319B  234D  319D   	fcall	_CC2500_ClearRXFIFO
 16819                           
 16820                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16821  1DBE  319B  23C9  319D   	fcall	_CC2500_FrequencyCabr
 16822                           
 16823                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16824  1DC1  319B  2355         	fcall	_CC2500_SIDLEMode
 16825  1DC3  0008               	return
 16826  1DC4                     __end_of_CC2500_PowerOnInitial:	
 16827                           
 16828                           	psect	text109
 16829  1B55                     __ptext109:	
 16830 ;; *************** function _CC2500_SIDLEMode *****************
 16831 ;; Defined at:
 16832 ;;		line 212 in file "../src/CC2500_B1.c"
 16833 ;; Parameters:    Size  Location     Type
 16834 ;;		None
 16835 ;; Auto vars:     Size  Location     Type
 16836 ;;		None
 16837 ;; Return value:  Size  Location     Type
 16838 ;;		None               void
 16839 ;; Registers used:
 16840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16841 ;; Tracked objects:
 16842 ;;		On entry : 0/0
 16843 ;;		On exit  : 0/0
 16844 ;;		Unchanged: 0/0
 16845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;Total ram usage:        0 bytes
 16851 ;; Hardware stack levels used:    1
 16852 ;; Hardware stack levels required when called:    7
 16853 ;; This function calls:
 16854 ;;		_CC2500_WriteCommand
 16855 ;; This function is called by:
 16856 ;;		_CC2500_PowerOnInitial
 16857 ;; This function uses a non-reentrant model
 16858 ;;
 16859                           
 16860                           
 16861                           ;psect for function _CC2500_SIDLEMode
 16862  1B55                     _CC2500_SIDLEMode:	
 16863                           
 16864                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16865                           
 16866                           ;incstack = 0
 16867                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16868  1B55  3036               	movlw	54
 16869  1B56  319E  264D         	fcall	_CC2500_WriteCommand
 16870  1B58  0008               	return
 16871  1B59                     __end_of_CC2500_SIDLEMode:	
 16872                           
 16873                           	psect	text110
 16874  142F                     __ptext110:	
 16875 ;; *************** function _CC2500_PowerRST *****************
 16876 ;; Defined at:
 16877 ;;		line 135 in file "../src/CC2500_B1.c"
 16878 ;; Parameters:    Size  Location     Type
 16879 ;;		None
 16880 ;; Auto vars:     Size  Location     Type
 16881 ;;		None
 16882 ;; Return value:  Size  Location     Type
 16883 ;;		None               void
 16884 ;; Registers used:
 16885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16886 ;; Tracked objects:
 16887 ;;		On entry : 0/0
 16888 ;;		On exit  : 0/0
 16889 ;;		Unchanged: 0/0
 16890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16895 ;;Total ram usage:        1 bytes
 16896 ;; Hardware stack levels used:    1
 16897 ;; Hardware stack levels required when called:    6
 16898 ;; This function calls:
 16899 ;;		_CC2500_WriteByte
 16900 ;;		_DelayTime_1us
 16901 ;;		_Timeout_Counter
 16902 ;;		_set_TimeoutCleared
 16903 ;; This function is called by:
 16904 ;;		_CC2500_PowerOnInitial
 16905 ;; This function uses a non-reentrant model
 16906 ;;
 16907                           
 16908                           
 16909                           ;psect for function _CC2500_PowerRST
 16910  142F                     _CC2500_PowerRST:	
 16911                           
 16912                           ;CC2500_B1.c: 136: RC1 = 0;
 16913                           
 16914                           ;incstack = 0
 16915                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16916  142F  0020               	movlb	0	; select bank0
 16917  1430  108E               	bcf	14,1	;volatile
 16918                           
 16919                           ;CC2500_B1.c: 137: RC0 = 0;
 16920  1431  100E               	bcf	14,0	;volatile
 16921                           
 16922                           ;CC2500_B1.c: 138: RC4 = 1;
 16923  1432  160E               	bsf	14,4	;volatile
 16924                           
 16925                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16926  1433  300A               	movlw	10
 16927  1434  00A0               	movwf	DelayTime_1us@count
 16928  1435  3000               	movlw	0
 16929  1436  00A1               	movwf	DelayTime_1us@count+1
 16930  1437  3190  20A8  3194   	fcall	_DelayTime_1us
 16931                           
 16932                           ;CC2500_B1.c: 140: RC4 = 0;
 16933  143A  0020               	movlb	0	; select bank0
 16934  143B  120E               	bcf	14,4	;volatile
 16935                           
 16936                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16937  143C  300A               	movlw	10
 16938  143D  00A0               	movwf	DelayTime_1us@count
 16939  143E  3000               	movlw	0
 16940  143F  00A1               	movwf	DelayTime_1us@count+1
 16941  1440  3190  20A8  3194   	fcall	_DelayTime_1us
 16942                           
 16943                           ;CC2500_B1.c: 142: RC4 = 1;
 16944  1443  0020               	movlb	0	; select bank0
 16945  1444  160E               	bsf	14,4	;volatile
 16946                           
 16947                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16948  1445  3028               	movlw	40
 16949  1446  00A0               	movwf	DelayTime_1us@count
 16950  1447  3000               	movlw	0
 16951  1448  00A1               	movwf	DelayTime_1us@count+1
 16952  1449  3190  20A8  3194   	fcall	_DelayTime_1us
 16953                           
 16954                           ;CC2500_B1.c: 144: RC4 = 0;
 16955  144C  0020               	movlb	0	; select bank0
 16956  144D  120E               	bcf	14,4	;volatile
 16957                           
 16958                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16959  144E  3030               	movlw	48
 16960  144F  00A6               	movwf	??_CC2500_PowerRST
 16961  1450  0826               	movf	??_CC2500_PowerRST,w
 16962  1451  0021               	movlb	1	; select bank1
 16963  1452  00CE               	movwf	_SPI0Buffer^(0+128)
 16964                           
 16965                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16966  1453  2C57               	goto	l7011
 16967  1454                     l7009:	
 16968                           
 16969                           ;CC2500_B1.c: 147: Timeout_Counter();
 16970  1454  319D  259A  3194   	fcall	_Timeout_Counter
 16971  1457                     l7011:	
 16972  1457  0020               	movlb	0	; select bank0
 16973  1458  1D0E               	btfss	14,2	;volatile
 16974  1459  2C5D               	goto	l7015
 16975  145A  0021               	movlb	1	; select bank1
 16976  145B  1D2D               	btfss	(_myMain^(0+128)+13),2
 16977  145C  2C54               	goto	l7009
 16978  145D                     l7015:	
 16979                           
 16980                           ;CC2500_B1.c: 148: };
 16981                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16982  145D  319B  235D  3194   	fcall	_set_TimeoutCleared
 16983                           
 16984                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16985  1460  319E  261B  3194   	fcall	_CC2500_WriteByte
 16986                           
 16987                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16988  1463  2C67               	goto	l7021
 16989  1464                     l7019:	
 16990                           
 16991                           ;CC2500_B1.c: 152: Timeout_Counter();
 16992  1464  319D  259A  3194   	fcall	_Timeout_Counter
 16993  1467                     l7021:	
 16994  1467  0020               	movlb	0	; select bank0
 16995  1468  1D0E               	btfss	14,2	;volatile
 16996  1469  2C6D               	goto	l7025
 16997  146A  0021               	movlb	1	; select bank1
 16998  146B  1D2D               	btfss	(_myMain^(0+128)+13),2
 16999  146C  2C64               	goto	l7019
 17000  146D                     l7025:	
 17001                           
 17002                           ;CC2500_B1.c: 153: };
 17003                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17004  146D  319B  235D         	fcall	_set_TimeoutCleared
 17005                           
 17006                           ;CC2500_B1.c: 155: RC0 = 0;
 17007  146F  0020               	movlb	0	; select bank0
 17008  1470  100E               	bcf	14,0	;volatile
 17009                           
 17010                           ;CC2500_B1.c: 156: RC4 = 1;
 17011  1471  160E               	bsf	14,4	;volatile
 17012  1472  0008               	return
 17013  1473                     __end_of_CC2500_PowerRST:	
 17014                           
 17015                           	psect	text111
 17016  111E                     __ptext111:	
 17017 ;; *************** function _CC2500_InitSetREG *****************
 17018 ;; Defined at:
 17019 ;;		line 162 in file "../src/CC2500_B1.c"
 17020 ;; Parameters:    Size  Location     Type
 17021 ;;		None
 17022 ;; Auto vars:     Size  Location     Type
 17023 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17024 ;;  temp2           1    7[BANK0 ] unsigned char 
 17025 ;;  temp1           1    6[BANK0 ] unsigned char 
 17026 ;; Return value:  Size  Location     Type
 17027 ;;		None               void
 17028 ;; Registers used:
 17029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17030 ;; Tracked objects:
 17031 ;;		On entry : 0/0
 17032 ;;		On exit  : 0/0
 17033 ;;		Unchanged: 0/0
 17034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17039 ;;Total ram usage:        4 bytes
 17040 ;; Hardware stack levels used:    1
 17041 ;; Hardware stack levels required when called:    7
 17042 ;; This function calls:
 17043 ;;		_CC2500_WriteREG
 17044 ;; This function is called by:
 17045 ;;		_CC2500_PowerOnInitial
 17046 ;; This function uses a non-reentrant model
 17047 ;;
 17048                           
 17049                           
 17050                           ;psect for function _CC2500_InitSetREG
 17051  111E                     _CC2500_InitSetREG:	
 17052                           
 17053                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17054                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17055                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17056                           
 17057                           ;incstack = 0
 17058                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17059  111E  0020               	movlb	0	; select bank0
 17060  111F  01A8               	clrf	CC2500_InitSetREG@loop_c
 17061  1120                     L9:	
 17062  1120  302F               	movlw	47
 17063  1121  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17064  1122  1803               	btfsc	3,0
 17065  1123  0008               	return
 17066                           
 17067                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17068  1124  0828               	movf	CC2500_InitSetREG@loop_c,w
 17069  1125  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17070  1126  0084               	movwf	4
 17071  1127  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17072  1128  1803               	skipnc
 17073  1129  3E01               	addlw	1
 17074  112A  0085               	movwf	5
 17075  112B  0800               	movf	0,w	;code access
 17076  112C  00A5               	movwf	??_CC2500_InitSetREG
 17077  112D  0825               	movf	??_CC2500_InitSetREG,w
 17078  112E  00A6               	movwf	CC2500_InitSetREG@temp1
 17079                           
 17080                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17081  112F  0828               	movf	CC2500_InitSetREG@loop_c,w
 17082  1130  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17083  1131  0084               	movwf	4
 17084  1132  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17085  1133  1803               	skipnc
 17086  1134  3E01               	addlw	1
 17087  1135  0085               	movwf	5
 17088  1136  0800               	movf	0,w	;code access
 17089  1137  00A5               	movwf	??_CC2500_InitSetREG
 17090  1138  0825               	movf	??_CC2500_InitSetREG,w
 17091  1139  00A7               	movwf	CC2500_InitSetREG@temp2
 17092                           
 17093                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17094  113A  0827               	movf	CC2500_InitSetREG@temp2,w
 17095  113B  00A5               	movwf	??_CC2500_InitSetREG
 17096  113C  0825               	movf	??_CC2500_InitSetREG,w
 17097  113D  00A2               	movwf	CC2500_WriteREG@value
 17098  113E  0826               	movf	CC2500_InitSetREG@temp1,w
 17099  113F  319F  2796  3191   	fcall	_CC2500_WriteREG
 17100  1142  3001               	movlw	1
 17101  1143  0020               	movlb	0	; select bank0
 17102  1144  00A5               	movwf	??_CC2500_InitSetREG
 17103  1145  0825               	movf	??_CC2500_InitSetREG,w
 17104  1146  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17105  1147  2920               	goto	L9
 17106  1148                     __end_of_CC2500_InitSetREG:	
 17107                           
 17108                           	psect	text112
 17109  1ED6                     __ptext112:	
 17110 ;; *************** function _CC2500_InitPATable *****************
 17111 ;; Defined at:
 17112 ;;		line 177 in file "../src/CC2500_B1.c"
 17113 ;; Parameters:    Size  Location     Type
 17114 ;;		None
 17115 ;; Auto vars:     Size  Location     Type
 17116 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17117 ;;  temp            1    6[BANK0 ] unsigned char 
 17118 ;; Return value:  Size  Location     Type
 17119 ;;		None               void
 17120 ;; Registers used:
 17121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17122 ;; Tracked objects:
 17123 ;;		On entry : 0/0
 17124 ;;		On exit  : 0/0
 17125 ;;		Unchanged: 0/0
 17126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17130 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17131 ;;Total ram usage:        3 bytes
 17132 ;; Hardware stack levels used:    1
 17133 ;; Hardware stack levels required when called:    7
 17134 ;; This function calls:
 17135 ;;		_CC2500_WriteREG
 17136 ;; This function is called by:
 17137 ;;		_CC2500_PowerOnInitial
 17138 ;; This function uses a non-reentrant model
 17139 ;;
 17140                           
 17141                           
 17142                           ;psect for function _CC2500_InitPATable
 17143  1ED6                     _CC2500_InitPATable:	
 17144                           
 17145                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17146                           ;CC2500_B1.c: 179: unsigned char temp;
 17147                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17148                           
 17149                           ;incstack = 0
 17150                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17151  1ED6  0020               	movlb	0	; select bank0
 17152  1ED7  01A7               	clrf	CC2500_InitPATable@loop_d
 17153  1ED8                     L10:	
 17154  1ED8  3008               	movlw	8
 17155  1ED9  0227               	subwf	CC2500_InitPATable@loop_d,w
 17156  1EDA  1803               	btfsc	3,0
 17157  1EDB  0008               	return
 17158                           
 17159                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17160  1EDC  0827               	movf	CC2500_InitPATable@loop_d,w
 17161  1EDD  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17162  1EDE  0084               	movwf	4
 17163  1EDF  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17164  1EE0  1803               	skipnc
 17165  1EE1  3E01               	addlw	1
 17166  1EE2  0085               	movwf	5
 17167  1EE3  0800               	movf	0,w	;code access
 17168  1EE4  00A5               	movwf	??_CC2500_InitPATable
 17169  1EE5  0825               	movf	??_CC2500_InitPATable,w
 17170  1EE6  00A6               	movwf	CC2500_InitPATable@temp
 17171                           
 17172                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17173  1EE7  0826               	movf	CC2500_InitPATable@temp,w
 17174  1EE8  00A5               	movwf	??_CC2500_InitPATable
 17175  1EE9  0825               	movf	??_CC2500_InitPATable,w
 17176  1EEA  00A2               	movwf	CC2500_WriteREG@value
 17177  1EEB  303E               	movlw	62
 17178  1EEC  319F  2796  319E   	fcall	_CC2500_WriteREG
 17179  1EEF  3001               	movlw	1
 17180  1EF0  0020               	movlb	0	; select bank0
 17181  1EF1  00A5               	movwf	??_CC2500_InitPATable
 17182  1EF2  0825               	movf	??_CC2500_InitPATable,w
 17183  1EF3  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17184  1EF4  2ED8               	goto	L10
 17185  1EF5                     __end_of_CC2500_InitPATable:	
 17186                           
 17187                           	psect	text113
 17188  1F96                     __ptext113:	
 17189 ;; *************** function _CC2500_WriteREG *****************
 17190 ;; Defined at:
 17191 ;;		line 254 in file "../src/CC2500_B1.c"
 17192 ;; Parameters:    Size  Location     Type
 17193 ;;  w_addr          1    wreg     unsigned char 
 17194 ;;  value           1    2[BANK0 ] unsigned char 
 17195 ;; Auto vars:     Size  Location     Type
 17196 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17197 ;; Return value:  Size  Location     Type
 17198 ;;		None               void
 17199 ;; Registers used:
 17200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17201 ;; Tracked objects:
 17202 ;;		On entry : 0/0
 17203 ;;		On exit  : 0/0
 17204 ;;		Unchanged: 0/0
 17205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17206 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;Total ram usage:        3 bytes
 17211 ;; Hardware stack levels used:    1
 17212 ;; Hardware stack levels required when called:    6
 17213 ;; This function calls:
 17214 ;;		_CC2500_WriteByte
 17215 ;;		_Timeout_Counter
 17216 ;;		_set_TimeoutCleared
 17217 ;; This function is called by:
 17218 ;;		_CC2500_InitSetREG
 17219 ;;		_CC2500_InitPATable
 17220 ;; This function uses a non-reentrant model
 17221 ;;
 17222                           
 17223                           
 17224                           ;psect for function _CC2500_WriteREG
 17225  1F96                     _CC2500_WriteREG:	
 17226                           
 17227                           ;incstack = 0
 17228                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17229                           ;CC2500_WriteREG@w_addr stored from wreg
 17230  1F96  0020               	movlb	0	; select bank0
 17231  1F97  00A4               	movwf	CC2500_WriteREG@w_addr
 17232                           
 17233                           ;CC2500_B1.c: 255: RC4 = 0;
 17234  1F98  120E               	bcf	14,4	;volatile
 17235                           
 17236                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17237  1F99  0824               	movf	CC2500_WriteREG@w_addr,w
 17238  1F9A  00A3               	movwf	??_CC2500_WriteREG
 17239  1F9B  0823               	movf	??_CC2500_WriteREG,w
 17240  1F9C  0021               	movlb	1	; select bank1
 17241  1F9D  00CE               	movwf	_SPI0Buffer^(0+128)
 17242                           
 17243                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17244  1F9E  2FA2               	goto	l6657
 17245  1F9F                     l6655:	
 17246                           
 17247                           ;CC2500_B1.c: 258: Timeout_Counter();
 17248  1F9F  319D  259A  319F   	fcall	_Timeout_Counter
 17249  1FA2                     l6657:	
 17250  1FA2  0020               	movlb	0	; select bank0
 17251  1FA3  1D0E               	btfss	14,2	;volatile
 17252  1FA4  2FA8               	goto	l6661
 17253  1FA5  0021               	movlb	1	; select bank1
 17254  1FA6  1D2D               	btfss	(_myMain^(0+128)+13),2
 17255  1FA7  2F9F               	goto	l6655
 17256  1FA8                     l6661:	
 17257                           
 17258                           ;CC2500_B1.c: 259: };
 17259                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17260  1FA8  319B  235D  319F   	fcall	_set_TimeoutCleared
 17261                           
 17262                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17263  1FAB  319E  261B  319F   	fcall	_CC2500_WriteByte
 17264                           
 17265                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17266  1FAE  0020               	movlb	0	; select bank0
 17267  1FAF  0822               	movf	CC2500_WriteREG@value,w
 17268  1FB0  00A3               	movwf	??_CC2500_WriteREG
 17269  1FB1  0823               	movf	??_CC2500_WriteREG,w
 17270  1FB2  0021               	movlb	1	; select bank1
 17271  1FB3  00CE               	movwf	_SPI0Buffer^(0+128)
 17272                           
 17273                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17274  1FB4  319E  261B         	fcall	_CC2500_WriteByte
 17275                           
 17276                           ;CC2500_B1.c: 265: RC4 = 1;
 17277  1FB6  0020               	movlb	0	; select bank0
 17278  1FB7  160E               	bsf	14,4	;volatile
 17279  1FB8  0008               	return
 17280  1FB9                     __end_of_CC2500_WriteREG:	
 17281                           
 17282                           	psect	text114
 17283  1BC9                     __ptext114:	
 17284 ;; *************** function _CC2500_FrequencyCabr *****************
 17285 ;; Defined at:
 17286 ;;		line 204 in file "../src/CC2500_B1.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;		None
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;		None
 17291 ;; Return value:  Size  Location     Type
 17292 ;;		None               void
 17293 ;; Registers used:
 17294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17295 ;; Tracked objects:
 17296 ;;		On entry : 0/0
 17297 ;;		On exit  : 0/0
 17298 ;;		Unchanged: 0/0
 17299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17304 ;;Total ram usage:        0 bytes
 17305 ;; Hardware stack levels used:    1
 17306 ;; Hardware stack levels required when called:    7
 17307 ;; This function calls:
 17308 ;;		_CC2500_WriteCommand
 17309 ;;		_DelayTime_1us
 17310 ;; This function is called by:
 17311 ;;		_CC2500_PowerOnInitial
 17312 ;; This function uses a non-reentrant model
 17313 ;;
 17314                           
 17315                           
 17316                           ;psect for function _CC2500_FrequencyCabr
 17317  1BC9                     _CC2500_FrequencyCabr:	
 17318                           
 17319                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17320                           
 17321                           ;incstack = 0
 17322                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17323  1BC9  3033               	movlw	51
 17324  1BCA  319E  264D  319B   	fcall	_CC2500_WriteCommand
 17325                           
 17326                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17327  1BCD  30E8               	movlw	232
 17328  1BCE  0020               	movlb	0	; select bank0
 17329  1BCF  00A0               	movwf	DelayTime_1us@count
 17330  1BD0  3003               	movlw	3
 17331  1BD1  00A1               	movwf	DelayTime_1us@count+1
 17332  1BD2  3190  20A8         	fcall	_DelayTime_1us
 17333  1BD4  0008               	return
 17334  1BD5                     __end_of_CC2500_FrequencyCabr:	
 17335                           
 17336                           	psect	text115
 17337  10A8                     __ptext115:	
 17338 ;; *************** function _DelayTime_1us *****************
 17339 ;; Defined at:
 17340 ;;		line 323 in file "../src/CC2500_B1.c"
 17341 ;; Parameters:    Size  Location     Type
 17342 ;;  count           2    0[BANK0 ] int 
 17343 ;; Auto vars:     Size  Location     Type
 17344 ;;  j               2    4[BANK0 ] unsigned int 
 17345 ;;  i               2    2[BANK0 ] unsigned int 
 17346 ;; Return value:  Size  Location     Type
 17347 ;;		None               void
 17348 ;; Registers used:
 17349 ;;		wreg, status,2
 17350 ;; Tracked objects:
 17351 ;;		On entry : 0/0
 17352 ;;		On exit  : 0/0
 17353 ;;		Unchanged: 0/0
 17354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17355 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17358 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17359 ;;Total ram usage:        6 bytes
 17360 ;; Hardware stack levels used:    1
 17361 ;; Hardware stack levels required when called:    5
 17362 ;; This function calls:
 17363 ;;		Nothing
 17364 ;; This function is called by:
 17365 ;;		_CC2500_PowerRST
 17366 ;;		_CC2500_FrequencyCabr
 17367 ;; This function uses a non-reentrant model
 17368 ;;
 17369                           
 17370                           
 17371                           ;psect for function _DelayTime_1us
 17372  10A8                     _DelayTime_1us:	
 17373                           
 17374                           ;CC2500_B1.c: 324: unsigned int i, j;
 17375                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17376                           
 17377                           ;incstack = 0
 17378                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17379  10A8  3001               	movlw	1
 17380  10A9  0020               	movlb	0	; select bank0
 17381  10AA  00A2               	movwf	DelayTime_1us@i
 17382  10AB  3000               	movlw	0
 17383  10AC  00A3               	movwf	DelayTime_1us@i+1
 17384  10AD                     l374:	
 17385  10AD  0821               	movf	DelayTime_1us@count+1,w
 17386  10AE  0223               	subwf	DelayTime_1us@i+1,w
 17387  10AF  1D03               	skipz
 17388  10B0  28B3               	goto	u5825
 17389  10B1  0820               	movf	DelayTime_1us@count,w
 17390  10B2  0222               	subwf	DelayTime_1us@i,w
 17391  10B3                     u5825:	
 17392  10B3  1803               	btfsc	3,0
 17393  10B4  0008               	return
 17394                           
 17395                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17396  10B5  01A4               	clrf	DelayTime_1us@j
 17397  10B6  01A5               	clrf	DelayTime_1us@j+1
 17398  10B7  3000               	movlw	0
 17399  10B8  0225               	subwf	DelayTime_1us@j+1,w
 17400  10B9  3002               	movlw	2
 17401  10BA  1903               	skipnz
 17402  10BB  0224               	subwf	DelayTime_1us@j,w
 17403  10BC  1803               	btfsc	3,0
 17404  10BD  28C9               	goto	l6649
 17405  10BE                     l6647:	
 17406  10BE  3001               	movlw	1
 17407  10BF  07A4               	addwf	DelayTime_1us@j,f
 17408  10C0  3000               	movlw	0
 17409  10C1  3DA5               	addwfc	DelayTime_1us@j+1,f
 17410  10C2  3000               	movlw	0
 17411  10C3  0225               	subwf	DelayTime_1us@j+1,w
 17412  10C4  3002               	movlw	2
 17413  10C5  1903               	skipnz
 17414  10C6  0224               	subwf	DelayTime_1us@j,w
 17415  10C7  1C03               	skipc
 17416  10C8  28BE               	goto	l6647
 17417  10C9                     l6649:	
 17418  10C9  3001               	movlw	1
 17419  10CA  07A2               	addwf	DelayTime_1us@i,f
 17420  10CB  3000               	movlw	0
 17421  10CC  3DA3               	addwfc	DelayTime_1us@i+1,f
 17422  10CD  28AD               	goto	l374
 17423  10CE                     __end_of_DelayTime_1us:	
 17424                           
 17425                           	psect	text116
 17426  1B51                     __ptext116:	
 17427 ;; *************** function _CC2500_ClearTXFIFO *****************
 17428 ;; Defined at:
 17429 ;;		line 190 in file "../src/CC2500_B1.c"
 17430 ;; Parameters:    Size  Location     Type
 17431 ;;		None
 17432 ;; Auto vars:     Size  Location     Type
 17433 ;;		None
 17434 ;; Return value:  Size  Location     Type
 17435 ;;		None               void
 17436 ;; Registers used:
 17437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17438 ;; Tracked objects:
 17439 ;;		On entry : 0/0
 17440 ;;		On exit  : 0/0
 17441 ;;		Unchanged: 0/0
 17442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;Total ram usage:        0 bytes
 17448 ;; Hardware stack levels used:    1
 17449 ;; Hardware stack levels required when called:    7
 17450 ;; This function calls:
 17451 ;;		_CC2500_WriteCommand
 17452 ;; This function is called by:
 17453 ;;		_CC2500_PowerOnInitial
 17454 ;; This function uses a non-reentrant model
 17455 ;;
 17456                           
 17457                           
 17458                           ;psect for function _CC2500_ClearTXFIFO
 17459  1B51                     _CC2500_ClearTXFIFO:	
 17460                           
 17461                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17462                           
 17463                           ;incstack = 0
 17464                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17465  1B51  303B               	movlw	59
 17466  1B52  319E  264D         	fcall	_CC2500_WriteCommand
 17467  1B54  0008               	return
 17468  1B55                     __end_of_CC2500_ClearTXFIFO:	
 17469                           
 17470                           	psect	text117
 17471  1B4D                     __ptext117:	
 17472 ;; *************** function _CC2500_ClearRXFIFO *****************
 17473 ;; Defined at:
 17474 ;;		line 197 in file "../src/CC2500_B1.c"
 17475 ;; Parameters:    Size  Location     Type
 17476 ;;		None
 17477 ;; Auto vars:     Size  Location     Type
 17478 ;;		None
 17479 ;; Return value:  Size  Location     Type
 17480 ;;		None               void
 17481 ;; Registers used:
 17482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17483 ;; Tracked objects:
 17484 ;;		On entry : 0/0
 17485 ;;		On exit  : 0/0
 17486 ;;		Unchanged: 0/0
 17487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;Total ram usage:        0 bytes
 17493 ;; Hardware stack levels used:    1
 17494 ;; Hardware stack levels required when called:    7
 17495 ;; This function calls:
 17496 ;;		_CC2500_WriteCommand
 17497 ;; This function is called by:
 17498 ;;		_CC2500_PowerOnInitial
 17499 ;; This function uses a non-reentrant model
 17500 ;;
 17501                           
 17502                           
 17503                           ;psect for function _CC2500_ClearRXFIFO
 17504  1B4D                     _CC2500_ClearRXFIFO:	
 17505                           
 17506                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17507                           
 17508                           ;incstack = 0
 17509                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17510  1B4D  303A               	movlw	58
 17511  1B4E  319E  264D         	fcall	_CC2500_WriteCommand
 17512  1B50  0008               	return
 17513  1B51                     __end_of_CC2500_ClearRXFIFO:	
 17514                           
 17515                           	psect	text118
 17516  1E4D                     __ptext118:	
 17517 ;; *************** function _CC2500_WriteCommand *****************
 17518 ;; Defined at:
 17519 ;;		line 288 in file "../src/CC2500_B1.c"
 17520 ;; Parameters:    Size  Location     Type
 17521 ;;  command         1    wreg     unsigned char 
 17522 ;; Auto vars:     Size  Location     Type
 17523 ;;  command         1    3[BANK0 ] unsigned char 
 17524 ;; Return value:  Size  Location     Type
 17525 ;;		None               void
 17526 ;; Registers used:
 17527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17528 ;; Tracked objects:
 17529 ;;		On entry : 0/0
 17530 ;;		On exit  : 0/0
 17531 ;;		Unchanged: 0/0
 17532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;Total ram usage:        2 bytes
 17538 ;; Hardware stack levels used:    1
 17539 ;; Hardware stack levels required when called:    6
 17540 ;; This function calls:
 17541 ;;		_CC2500_WriteByte
 17542 ;;		_Timeout_Counter
 17543 ;;		_set_TimeoutCleared
 17544 ;; This function is called by:
 17545 ;;		_CC2500_TxData
 17546 ;;		_CC2500_ClearTXFIFO
 17547 ;;		_CC2500_ClearRXFIFO
 17548 ;;		_CC2500_FrequencyCabr
 17549 ;;		_CC2500_SIDLEMode
 17550 ;;		_setRF_Main
 17551 ;;		_RF_RxDisable
 17552 ;; This function uses a non-reentrant model
 17553 ;;
 17554                           
 17555                           
 17556                           ;psect for function _CC2500_WriteCommand
 17557  1E4D                     _CC2500_WriteCommand:	
 17558                           
 17559                           ;incstack = 0
 17560                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17561                           ;CC2500_WriteCommand@command stored from wreg
 17562  1E4D  0020               	movlb	0	; select bank0
 17563  1E4E  00A3               	movwf	CC2500_WriteCommand@command
 17564                           
 17565                           ;CC2500_B1.c: 289: RC4 = 0;
 17566  1E4F  120E               	bcf	14,4	;volatile
 17567                           
 17568                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17569  1E50  0823               	movf	CC2500_WriteCommand@command,w
 17570  1E51  00A2               	movwf	??_CC2500_WriteCommand
 17571  1E52  0822               	movf	??_CC2500_WriteCommand,w
 17572  1E53  0021               	movlb	1	; select bank1
 17573  1E54  00CE               	movwf	_SPI0Buffer^(0+128)
 17574                           
 17575                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17576  1E55  2E59               	goto	l6359
 17577  1E56                     l6357:	
 17578                           
 17579                           ;CC2500_B1.c: 293: Timeout_Counter();
 17580  1E56  319D  259A  319E   	fcall	_Timeout_Counter
 17581  1E59                     l6359:	
 17582  1E59  0020               	movlb	0	; select bank0
 17583  1E5A  1D0E               	btfss	14,2	;volatile
 17584  1E5B  2E5F               	goto	l6363
 17585  1E5C  0021               	movlb	1	; select bank1
 17586  1E5D  1D2D               	btfss	(_myMain^(0+128)+13),2
 17587  1E5E  2E56               	goto	l6357
 17588  1E5F                     l6363:	
 17589                           
 17590                           ;CC2500_B1.c: 294: };
 17591                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17592  1E5F  319B  235D  319E   	fcall	_set_TimeoutCleared
 17593                           
 17594                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17595  1E62  319E  261B         	fcall	_CC2500_WriteByte
 17596                           
 17597                           ;CC2500_B1.c: 298: RC4 = 1;
 17598  1E64  0020               	movlb	0	; select bank0
 17599  1E65  160E               	bsf	14,4	;volatile
 17600  1E66  0008               	return
 17601  1E67                     __end_of_CC2500_WriteCommand:	
 17602                           
 17603                           	psect	text119
 17604  1B5D                     __ptext119:	
 17605 ;; *************** function _set_TimeoutCleared *****************
 17606 ;; Defined at:
 17607 ;;		line 270 in file "../src/main_B1.c"
 17608 ;; Parameters:    Size  Location     Type
 17609 ;;		None
 17610 ;; Auto vars:     Size  Location     Type
 17611 ;;		None
 17612 ;; Return value:  Size  Location     Type
 17613 ;;		None               void
 17614 ;; Registers used:
 17615 ;;		status,2
 17616 ;; Tracked objects:
 17617 ;;		On entry : 0/0
 17618 ;;		On exit  : 0/0
 17619 ;;		Unchanged: 0/0
 17620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17625 ;;Total ram usage:        0 bytes
 17626 ;; Hardware stack levels used:    1
 17627 ;; Hardware stack levels required when called:    5
 17628 ;; This function calls:
 17629 ;;		Nothing
 17630 ;; This function is called by:
 17631 ;;		_CC2500_TxData
 17632 ;;		_CC2500_RxData
 17633 ;;		_CC2500_PowerRST
 17634 ;;		_CC2500_WriteREG
 17635 ;;		_CC2500_WriteCommand
 17636 ;;		_CC2500_ReadStatus
 17637 ;;		_getAD
 17638 ;;		_TouchPower
 17639 ;;		_CC2500_ReadREG
 17640 ;; This function uses a non-reentrant model
 17641 ;;
 17642                           
 17643                           
 17644                           ;psect for function _set_TimeoutCleared
 17645  1B5D                     _set_TimeoutCleared:	
 17646                           
 17647                           ;main_B1.c: 271: myMain.Timeout = 0;
 17648                           
 17649                           ;incstack = 0
 17650                           ; Regs used in _set_TimeoutCleared: [status,2]
 17651  1B5D  0021               	movlb	1	; select bank1
 17652  1B5E  112D               	bcf	(_myMain^(0+128)+13),2
 17653                           
 17654                           ;main_B1.c: 272: myMain.Timeout_Counter = 0;
 17655  1B5F  01AE               	clrf	(_myMain^(0+128)+14)
 17656  1B60  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17657  1B61  0008               	return
 17658  1B62                     __end_of_set_TimeoutCleared:	
 17659                           
 17660                           	psect	text120
 17661  1D9A                     __ptext120:	
 17662 ;; *************** function _Timeout_Counter *****************
 17663 ;; Defined at:
 17664 ;;		line 261 in file "../src/main_B1.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;		None
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;		None
 17669 ;; Return value:  Size  Location     Type
 17670 ;;		None               void
 17671 ;; Registers used:
 17672 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17673 ;; Tracked objects:
 17674 ;;		On entry : 0/0
 17675 ;;		On exit  : 0/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;Total ram usage:        0 bytes
 17683 ;; Hardware stack levels used:    1
 17684 ;; Hardware stack levels required when called:    5
 17685 ;; This function calls:
 17686 ;;		Nothing
 17687 ;; This function is called by:
 17688 ;;		_CC2500_TxData
 17689 ;;		_CC2500_RxData
 17690 ;;		_CC2500_PowerRST
 17691 ;;		_CC2500_WriteREG
 17692 ;;		_CC2500_WriteCommand
 17693 ;;		_CC2500_ReadStatus
 17694 ;;		_getAD
 17695 ;;		_TouchPower
 17696 ;;		_CC2500_ReadREG
 17697 ;; This function uses a non-reentrant model
 17698 ;;
 17699                           
 17700                           
 17701                           ;psect for function _Timeout_Counter
 17702  1D9A                     _Timeout_Counter:	
 17703                           
 17704                           ;main_B1.c: 262: myMain.Timeout_Counter++;
 17705                           
 17706                           ;incstack = 0
 17707                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17708  1D9A  3001               	movlw	1
 17709  1D9B  0021               	movlb	1	; select bank1
 17710  1D9C  07AE               	addwf	(_myMain^(0+128)+14),f
 17711  1D9D  3000               	movlw	0
 17712  1D9E  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17713                           
 17714                           ;main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17715  1D9F  300E               	movlw	14
 17716  1DA0  3EA0               	addlw	_myMain& (0+255)
 17717  1DA1  0086               	movwf	6
 17718  1DA2  0187               	clrf	7
 17719  1DA3  3F40               	moviw [0]fsr1
 17720  1DA4  3A10               	xorlw	16
 17721  1DA5  1D03               	skipz
 17722  1DA6  2DA9               	goto	u5225
 17723  1DA7  3F41               	moviw [1]fsr1
 17724  1DA8  3A27               	xorlw	39
 17725  1DA9                     u5225:	
 17726  1DA9  1D03               	skipz
 17727  1DAA  0008               	return
 17728                           
 17729                           ;main_B1.c: 264: myMain.Timeout_Counter = 0;
 17730  1DAB  01AE               	clrf	(_myMain^(0+128)+14)
 17731  1DAC  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17732                           
 17733                           ;main_B1.c: 265: myMain.Timeout = 1;
 17734  1DAD  152D               	bsf	(_myMain^(0+128)+13),2
 17735  1DAE  0008               	return
 17736  1DAF                     __end_of_Timeout_Counter:	
 17737                           
 17738                           	psect	text121
 17739  1E1B                     __ptext121:	
 17740 ;; *************** function _CC2500_WriteByte *****************
 17741 ;; Defined at:
 17742 ;;		line 222 in file "../src/CC2500_B1.c"
 17743 ;; Parameters:    Size  Location     Type
 17744 ;;		None
 17745 ;; Auto vars:     Size  Location     Type
 17746 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17747 ;; Return value:  Size  Location     Type
 17748 ;;		None               void
 17749 ;; Registers used:
 17750 ;;		wreg, status,2, status,0
 17751 ;; Tracked objects:
 17752 ;;		On entry : 0/0
 17753 ;;		On exit  : 0/0
 17754 ;;		Unchanged: 0/0
 17755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17760 ;;Total ram usage:        2 bytes
 17761 ;; Hardware stack levels used:    1
 17762 ;; Hardware stack levels required when called:    5
 17763 ;; This function calls:
 17764 ;;		Nothing
 17765 ;; This function is called by:
 17766 ;;		_CC2500_TxData
 17767 ;;		_CC2500_RxData
 17768 ;;		_CC2500_PowerRST
 17769 ;;		_CC2500_WriteREG
 17770 ;;		_CC2500_WriteCommand
 17771 ;;		_CC2500_ReadStatus
 17772 ;;		_CC2500_ReadREG
 17773 ;; This function uses a non-reentrant model
 17774 ;;
 17775                           
 17776                           
 17777                           ;psect for function _CC2500_WriteByte
 17778  1E1B                     _CC2500_WriteByte:	
 17779                           
 17780                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17781                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17782                           
 17783                           ;incstack = 0
 17784                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17785  1E1B  0020               	movlb	0	; select bank0
 17786  1E1C  01A1               	clrf	CC2500_WriteByte@loop_a
 17787  1E1D                     L11:	
 17788  1E1D  3008               	movlw	8
 17789  1E1E  0221               	subwf	CC2500_WriteByte@loop_a,w
 17790  1E1F  1803               	btfsc	3,0
 17791  1E20  0008               	return
 17792                           
 17793                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17794  1E21  0021               	movlb	1	; select bank1
 17795  1E22  1FCE               	btfss	_SPI0Buffer^(0+128),7
 17796  1E23  2E27               	goto	l330
 17797                           
 17798                           ;CC2500_B1.c: 226: RC0 = 1;
 17799  1E24  0020               	movlb	0	; select bank0
 17800  1E25  140E               	bsf	14,0	;volatile
 17801  1E26  2E29               	goto	l331
 17802  1E27                     l330:	
 17803                           
 17804                           ;CC2500_B1.c: 227: else
 17805                           ;CC2500_B1.c: 228: RC0 = 0;
 17806  1E27  0020               	movlb	0	; select bank0
 17807  1E28  100E               	bcf	14,0	;volatile
 17808  1E29                     l331:	
 17809                           
 17810                           ;CC2500_B1.c: 229: RC1 = 1;
 17811  1E29  148E               	bsf	14,1	;volatile
 17812                           
 17813                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17814  1E2A  1003               	clrc
 17815  1E2B  0021               	movlb	1	; select bank1
 17816  1E2C  0DCE               	rlf	_SPI0Buffer^(0+128),f
 17817                           
 17818                           ;CC2500_B1.c: 231: RC1 = 0;
 17819  1E2D  0020               	movlb	0	; select bank0
 17820  1E2E  108E               	bcf	14,1	;volatile
 17821  1E2F  3001               	movlw	1
 17822  1E30  00A0               	movwf	??_CC2500_WriteByte
 17823  1E31  0820               	movf	??_CC2500_WriteByte,w
 17824  1E32  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17825  1E33  2E1D               	goto	L11
 17826  1E34                     __end_of_CC2500_WriteByte:	
 17827                           
 17828                           	psect	text122
 17829  14B9                     __ptext122:	
 17830 ;; *************** function _Buzzer_Main *****************
 17831 ;; Defined at:
 17832 ;;		line 46 in file "../src/Buzzer_B1.c"
 17833 ;; Parameters:    Size  Location     Type
 17834 ;;		None
 17835 ;; Auto vars:     Size  Location     Type
 17836 ;;		None
 17837 ;; Return value:  Size  Location     Type
 17838 ;;		None               void
 17839 ;; Registers used:
 17840 ;;		wreg, status,2, status,0
 17841 ;; Tracked objects:
 17842 ;;		On entry : 0/0
 17843 ;;		On exit  : 0/0
 17844 ;;		Unchanged: 0/0
 17845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17849 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;Total ram usage:        1 bytes
 17851 ;; Hardware stack levels used:    1
 17852 ;; Hardware stack levels required when called:    5
 17853 ;; This function calls:
 17854 ;;		Nothing
 17855 ;; This function is called by:
 17856 ;;		_main
 17857 ;; This function uses a non-reentrant model
 17858 ;;
 17859                           
 17860                           
 17861                           ;psect for function _Buzzer_Main
 17862  14B9                     _Buzzer_Main:	
 17863                           
 17864                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17865                           
 17866                           ;incstack = 0
 17867                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17868  14B9  0021               	movlb	1	; select bank1
 17869  14BA  1CB0               	btfss	_Buz1^(0+128),1
 17870  14BB  0008               	return
 17871                           
 17872                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17873  14BC  3001               	movlw	1
 17874  14BD  07B1               	addwf	(_Buz1^(0+128)+1),f
 17875  14BE  3000               	movlw	0
 17876  14BF  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17877                           
 17878                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17879  14C0  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17880  14C1  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17881  14C2  1D03               	skipz
 17882  14C3  2CC6               	goto	u7495
 17883  14C4  0836               	movf	(_Buz1^(0+128)+6),w
 17884  14C5  0231               	subwf	(_Buz1^(0+128)+1),w
 17885  14C6                     u7495:	
 17886  14C6  1C03               	skipc
 17887  14C7  0008               	return
 17888                           
 17889                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17890  14C8  01B1               	clrf	(_Buz1^(0+128)+1)
 17891  14C9  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17892                           
 17893                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17894  14CA  12B0               	bcf	_Buz1^(0+128),5
 17895  14CB  0020               	movlb	0	; select bank0
 17896  14CC  1D8D               	btfss	13,3	;volatile
 17897  14CD  2CD0               	goto	l7671
 17898  14CE  0021               	movlb	1	; select bank1
 17899  14CF  16B0               	bsf	_Buz1^(0+128),5
 17900  14D0                     l7671:	
 17901                           
 17902                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17903  14D0  0021               	movlb	1	; select bank1
 17904  14D1  1AB0               	btfsc	_Buz1^(0+128),5
 17905  14D2  2CFC               	goto	l106
 17906                           
 17907                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17908  14D3  08B3               	movf	(_Buz1^(0+128)+3),f
 17909  14D4  1D03               	skipz
 17910  14D5  2CF8               	goto	l107
 17911                           
 17912                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17913  14D6  1DB0               	btfss	_Buz1^(0+128),3
 17914  14D7  2CE6               	goto	l108
 17915                           
 17916                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17917  14D8  11B0               	bcf	_Buz1^(0+128),3
 17918                           
 17919                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17920  14D9  0834               	movf	(_Buz1^(0+128)+4),w
 17921  14DA  0020               	movlb	0	; select bank0
 17922  14DB  00A0               	movwf	??_Buzzer_Main
 17923  14DC  0820               	movf	??_Buzzer_Main,w
 17924  14DD  0021               	movlb	1	; select bank1
 17925  14DE  00B3               	movwf	(_Buz1^(0+128)+3)
 17926                           
 17927                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17928  14DF  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17929  14E0  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17930  14E1  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17931  14E2  0838               	movf	(_Buz1^(0+128)+8),w
 17932  14E3  01B6               	clrf	(_Buz1^(0+128)+6)
 17933  14E4  07B6               	addwf	(_Buz1^(0+128)+6),f
 17934                           
 17935                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17936  14E5  0008               	return
 17937  14E6                     l108:	
 17938  14E6  1E30               	btfss	_Buz1^(0+128),4
 17939  14E7  2CF6               	goto	l110
 17940                           
 17941                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17942  14E8  1230               	bcf	_Buz1^(0+128),4
 17943                           
 17944                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17945  14E9  0835               	movf	(_Buz1^(0+128)+5),w
 17946  14EA  0020               	movlb	0	; select bank0
 17947  14EB  00A0               	movwf	??_Buzzer_Main
 17948  14EC  0820               	movf	??_Buzzer_Main,w
 17949  14ED  0021               	movlb	1	; select bank1
 17950  14EE  00B3               	movwf	(_Buz1^(0+128)+3)
 17951                           
 17952                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17953  14EF  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17954  14F0  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17955  14F1  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17956  14F2  083A               	movf	(_Buz1^(0+128)+10),w
 17957  14F3  01B6               	clrf	(_Buz1^(0+128)+6)
 17958  14F4  07B6               	addwf	(_Buz1^(0+128)+6),f
 17959                           
 17960                           ;Buzzer_B1.c: 62: } else {
 17961  14F5  0008               	return
 17962  14F6                     l110:	
 17963                           
 17964                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17965  14F6  10B0               	bcf	_Buz1^(0+128),1
 17966                           
 17967                           ;Buzzer_B1.c: 64: }
 17968                           ;Buzzer_B1.c: 65: } else {
 17969  14F7  0008               	return
 17970  14F8                     l107:	
 17971                           
 17972                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17973  14F8  16B0               	bsf	_Buz1^(0+128),5
 17974                           
 17975                           ;Buzzer_B1.c: 68: RB3 = 1;
 17976  14F9  0020               	movlb	0	; select bank0
 17977  14FA  158D               	bsf	13,3	;volatile
 17978                           
 17979                           ;Buzzer_B1.c: 69: }
 17980                           ;Buzzer_B1.c: 70: } else {
 17981  14FB  0008               	return
 17982  14FC                     l106:	
 17983                           
 17984                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17985  14FC  12B0               	bcf	_Buz1^(0+128),5
 17986                           
 17987                           ;Buzzer_B1.c: 73: RB3 = 0;
 17988  14FD  0020               	movlb	0	; select bank0
 17989  14FE  118D               	bcf	13,3	;volatile
 17990                           
 17991                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17992  14FF  3001               	movlw	1
 17993  1500  0021               	movlb	1	; select bank1
 17994  1501  02B3               	subwf	(_Buz1^(0+128)+3),f
 17995  1502  0008               	return
 17996  1503                     __end_of_Buzzer_Main:	
 17997                           
 17998                           	psect	text123
 17999  1B41                     __ptext123:	
 18000 ;; *************** function _Buzzer_Initialization *****************
 18001 ;; Defined at:
 18002 ;;		line 11 in file "../src/Buzzer_B1.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;		None
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;		None
 18007 ;; Return value:  Size  Location     Type
 18008 ;;		None               void
 18009 ;; Registers used:
 18010 ;;		None
 18011 ;; Tracked objects:
 18012 ;;		On entry : 0/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;Total ram usage:        0 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:    5
 18023 ;; This function calls:
 18024 ;;		Nothing
 18025 ;; This function is called by:
 18026 ;;		_main
 18027 ;; This function uses a non-reentrant model
 18028 ;;
 18029                           
 18030                           
 18031                           ;psect for function _Buzzer_Initialization
 18032  1B41                     _Buzzer_Initialization:	
 18033                           
 18034                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18035                           
 18036                           ;incstack = 0
 18037                           ; Regs used in _Buzzer_Initialization: []
 18038  1B41  0021               	movlb	1	; select bank1
 18039  1B42  1430               	bsf	_Buz1^(0+128),0
 18040  1B43  0008               	return
 18041  1B44                     __end_of_Buzzer_Initialization:	
 18042                           
 18043                           	psect	intentry
 18044  0004                     __pintentry:	
 18045 ;; *************** function _ISR *****************
 18046 ;; Defined at:
 18047 ;;		line 107 in file "../src/MCU_B1.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;		None
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;		None
 18052 ;; Return value:  Size  Location     Type
 18053 ;;		None               void
 18054 ;; Registers used:
 18055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18056 ;; Tracked objects:
 18057 ;;		On entry : 0/0
 18058 ;;		On exit  : 0/0
 18059 ;;		Unchanged: 0/0
 18060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18065 ;;Total ram usage:        1 bytes
 18066 ;; Hardware stack levels used:    1
 18067 ;; Hardware stack levels required when called:    4
 18068 ;; This function calls:
 18069 ;;		_IOC_ISR
 18070 ;;		_TMR1_ISR
 18071 ;; This function is called by:
 18072 ;;		Interrupt level 1
 18073 ;; This function uses a non-reentrant model
 18074 ;;
 18075                           
 18076  0004                     _ISR:	
 18077                           
 18078                           ;incstack = 0
 18079                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18080  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18081  0005  3180               	pagesel	$
 18082  0006  0020               	movlb	0	; select bank0
 18083  0007  087F               	movf	127,w
 18084  0008  00F7               	movwf	??_ISR
 18085                           
 18086                           ;MCU_B1.c: 109: IOC_ISR();
 18087  0009  319C  2444  3180   	fcall	_IOC_ISR
 18088                           
 18089                           ;MCU_B1.c: 111: ;;
 18090                           ;MCU_B1.c: 113: TMR1_ISR();
 18091  000C  3190  20F5         	fcall	_TMR1_ISR
 18092  000E  0877               	movf	??_ISR,w
 18093  000F  0020               	movlb	0	; select bank0
 18094  0010  00FF               	movwf	127
 18095  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18096  0012  0009               	retfie
 18097  0013                     __end_of_ISR:	
 18098                           
 18099                           	psect	text125
 18100  10F5                     __ptext125:	
 18101 ;; *************** function _TMR1_ISR *****************
 18102 ;; Defined at:
 18103 ;;		line 209 in file "../src/MCU_B1.c"
 18104 ;; Parameters:    Size  Location     Type
 18105 ;;		None
 18106 ;; Auto vars:     Size  Location     Type
 18107 ;;		None
 18108 ;; Return value:  Size  Location     Type
 18109 ;;		None               void
 18110 ;; Registers used:
 18111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18112 ;; Tracked objects:
 18113 ;;		On entry : 0/0
 18114 ;;		On exit  : 0/0
 18115 ;;		Unchanged: 0/0
 18116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18121 ;;Total ram usage:        0 bytes
 18122 ;; Hardware stack levels used:    1
 18123 ;; Hardware stack levels required when called:    2
 18124 ;; This function calls:
 18125 ;;		_setDimmerLights_IntrControl
 18126 ;; This function is called by:
 18127 ;;		_ISR
 18128 ;; This function uses a non-reentrant model
 18129 ;;
 18130                           
 18131                           
 18132                           ;psect for function _TMR1_ISR
 18133  10F5                     _TMR1_ISR:	
 18134                           
 18135                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18136                           
 18137                           ;incstack = 0
 18138                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18139  10F5  0021               	movlb	1	; select bank1
 18140  10F6  1C11               	btfss	17,0	;volatile
 18141  10F7  0008               	return
 18142  10F8  0020               	movlb	0	; select bank0
 18143  10F9  1C11               	btfss	17,0	;volatile
 18144  10FA  0008               	return
 18145                           
 18146                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18147  10FB  30FA               	movlw	250
 18148  10FC  0097               	movwf	23	;volatile
 18149                           
 18150                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18151  10FD  3038               	movlw	56
 18152  10FE  0096               	movwf	22	;volatile
 18153                           
 18154                           ;MCU_B1.c: 214: TMR1IF = 0;
 18155  10FF  1011               	bcf	17,0	;volatile
 18156                           
 18157                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18158  1100  3001               	movlw	1
 18159  1101  3182  22FD  3190   	fcall	_setDimmerLights_IntrControl
 18160                           
 18161                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18162  1104  3002               	movlw	2
 18163  1105  3182  22FD  3190   	fcall	_setDimmerLights_IntrControl
 18164                           
 18165                           ;MCU_B1.c: 234: Timer1.Count++;
 18166  1108  3001               	movlw	1
 18167  1109  0022               	movlb	2	; select bank2
 18168  110A  07A4               	addwf	(_Timer1^(0+256)+1),f
 18169  110B  3000               	movlw	0
 18170  110C  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18171                           
 18172                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18173  110D  3001               	movlw	1
 18174  110E  3E23               	addlw	_Timer1& (0+255)
 18175  110F  0086               	movwf	6
 18176  1110  3001               	movlw	1	; select bank2/3
 18177  1111  0087               	movwf	7
 18178  1112  3F40               	moviw [0]fsr1
 18179  1113  3A64               	xorlw	100
 18180  1114  1D03               	skipz
 18181  1115  2918               	goto	u765_25
 18182  1116  3F41               	moviw [1]fsr1
 18183  1117  3A00               	xorlw	0
 18184  1118                     u765_25:	
 18185  1118  1D03               	skipz
 18186  1119  0008               	return
 18187                           
 18188                           ;MCU_B1.c: 236: {
 18189                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18190  111A  01A4               	clrf	(_Timer1^(0+256)+1)
 18191  111B  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18192                           
 18193                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18194  111C  1423               	bsf	_Timer1^(0+256),0
 18195  111D  0008               	return
 18196  111E                     __end_of_TMR1_ISR:	
 18197                           
 18198                           	psect	text126
 18199  02FD                     __ptext126:	
 18200 ;; *************** function _setDimmerLights_IntrControl *****************
 18201 ;; Defined at:
 18202 ;;		line 92 in file "../src/Dimmer_B1.c"
 18203 ;; Parameters:    Size  Location     Type
 18204 ;;  lights          1    wreg     unsigned char 
 18205 ;; Auto vars:     Size  Location     Type
 18206 ;;  lights          1    6[COMMON] unsigned char 
 18207 ;; Return value:  Size  Location     Type
 18208 ;;		None               void
 18209 ;; Registers used:
 18210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18211 ;; Tracked objects:
 18212 ;;		On entry : 0/0
 18213 ;;		On exit  : 0/0
 18214 ;;		Unchanged: 0/0
 18215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18218 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18219 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18220 ;;Total ram usage:        5 bytes
 18221 ;; Hardware stack levels used:    1
 18222 ;; Hardware stack levels required when called:    1
 18223 ;; This function calls:
 18224 ;;		_DimmerIntrPointSelect
 18225 ;; This function is called by:
 18226 ;;		_TMR1_ISR
 18227 ;; This function uses a non-reentrant model
 18228 ;;
 18229                           
 18230                           
 18231                           ;psect for function _setDimmerLights_IntrControl
 18232  02FD                     _setDimmerLights_IntrControl:	
 18233                           
 18234                           ;incstack = 0
 18235                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18236                           ;setDimmerLights_IntrControl@lights stored from wreg
 18237  02FD  00F6               	movwf	setDimmerLights_IntrControl@lights
 18238                           
 18239                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18240  02FE  0876               	movf	setDimmerLights_IntrControl@lights,w
 18241  02FF  319C  24B6  3182   	fcall	_DimmerIntrPointSelect
 18242                           
 18243                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18244  0302  087A               	movf	_DimmerLightsIntr,w
 18245  0303  0086               	movwf	6
 18246  0304  3001               	movlw	1	; select bank2/3
 18247  0305  0087               	movwf	7
 18248  0306  1C01               	btfss	1,0
 18249  0307  2B5F               	goto	i1l7121
 18250                           
 18251                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18252  0308  3001               	movlw	1
 18253  0309  00F2               	movwf	??_setDimmerLights_IntrControl
 18254  030A  087A               	movf	_DimmerLightsIntr,w
 18255  030B  3E03               	addlw	3
 18256  030C  0086               	movwf	6
 18257  030D  3001               	movlw	1	; select bank2/3
 18258  030E  0087               	movwf	7
 18259  030F  0872               	movf	??_setDimmerLights_IntrControl,w
 18260  0310  0781               	addwf	1,f
 18261                           
 18262                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18263                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18264  0311  0022               	movlb	2	; select bank2
 18265  0312  0822               	movf	(_Dimmer^(0+256)+2),w
 18266  0313  00F2               	movwf	??_setDimmerLights_IntrControl
 18267  0314  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18268  0315  09F2               	comf	??_setDimmerLights_IntrControl,f
 18269  0316  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18270  0317  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18271  0318  1903               	skipnz
 18272  0319  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18273  031A  087A               	movf	_DimmerLightsIntr,w
 18274  031B  3E04               	addlw	4
 18275  031C  0086               	movwf	6
 18276  031D  3001               	movlw	1	; select bank2/3
 18277  031E  0087               	movwf	7
 18278  031F  0801               	movf	1,w
 18279  0320  0772               	addwf	??_setDimmerLights_IntrControl,w
 18280  0321  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18281  0322  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18282  0323  1803               	skipnc
 18283  0324  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18284  0325  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18285  0326  087A               	movf	_DimmerLightsIntr,w
 18286  0327  3E03               	addlw	3
 18287  0328  0086               	movwf	6
 18288  0329  3001               	movlw	1	; select bank2/3
 18289  032A  0087               	movwf	7
 18290  032B  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18291  032C  3A80               	xorlw	128
 18292  032D  3C80               	sublw	128
 18293  032E  1D03               	skipz
 18294  032F  2B32               	goto	u650_25
 18295  0330  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18296  0331  0201               	subwf	1,w
 18297  0332                     u650_25:	
 18298  0332  1C03               	skipc
 18299  0333  0008               	return
 18300                           
 18301                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18302  0334  087A               	movf	_DimmerLightsIntr,w
 18303  0335  3E03               	addlw	3
 18304  0336  0086               	movwf	6
 18305  0337  3001               	movlw	1	; select bank2/3
 18306  0338  0087               	movwf	7
 18307  0339  0181               	clrf	1
 18308                           
 18309                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18310  033A  087A               	movf	_DimmerLightsIntr,w
 18311  033B  0086               	movwf	6
 18312  033C  3001               	movlw	1	; select bank2/3
 18313  033D  0087               	movwf	7
 18314  033E  1001               	bcf	1,0
 18315                           
 18316                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18317  033F  087A               	movf	_DimmerLightsIntr,w
 18318  0340  3E08               	addlw	8
 18319  0341  0086               	movwf	6
 18320  0342  3001               	movlw	1	; select bank2/3
 18321  0343  0087               	movwf	7
 18322  0344  1401               	bsf	1,0
 18323                           
 18324                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18325  0345  087A               	movf	_DimmerLightsIntr,w
 18326  0346  3E09               	addlw	9
 18327  0347  0086               	movwf	6
 18328  0348  3001               	movlw	1	; select bank2/3
 18329  0349  0087               	movwf	7
 18330  034A  1E01               	btfss	1,4
 18331  034B  0008               	return
 18332                           
 18333                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18334  034C  087A               	movf	_DimmerLightsIntr,w
 18335  034D  3E09               	addlw	9
 18336  034E  0086               	movwf	6
 18337  034F  3001               	movlw	1	; select bank2/3
 18338  0350  0087               	movwf	7
 18339  0351  1201               	bcf	1,4
 18340                           
 18341                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18342  0352  0876               	movf	setDimmerLights_IntrControl@lights,w
 18343  0353  3A01               	xorlw	1
 18344  0354  1D03               	skipz
 18345  0355  2B58               	goto	i1l7117
 18346                           
 18347                           ;Dimmer_B1.c: 240: RA7 = 0;
 18348  0356  0020               	movlb	0	; select bank0
 18349  0357  138C               	bcf	12,7	;volatile
 18350  0358                     i1l7117:	
 18351                           ;Dimmer_B1.c: 241: ;;
 18352                           
 18353                           
 18354                           ;Dimmer_B1.c: 242: }
 18355                           ;Dimmer_B1.c: 245: if (lights == 2) {
 18356  0358  0876               	movf	setDimmerLights_IntrControl@lights,w
 18357  0359  3A02               	xorlw	2
 18358  035A  1D03               	skipz
 18359  035B  0008               	return
 18360                           
 18361                           ;Dimmer_B1.c: 246: RB4 = 0;
 18362  035C  0020               	movlb	0	; select bank0
 18363  035D  120D               	bcf	13,4	;volatile
 18364                           
 18365                           ;Dimmer_B1.c: 247: }
 18366                           ;Dimmer_B1.c: 249: }
 18367                           ;Dimmer_B1.c: 250: }
 18368                           ;Dimmer_B1.c: 251: } else {
 18369  035E  0008               	return
 18370  035F                     i1l7121:	
 18371                           
 18372                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18373  035F  087A               	movf	_DimmerLightsIntr,w
 18374  0360  3E08               	addlw	8
 18375  0361  0086               	movwf	6
 18376  0362  3001               	movlw	1	; select bank2/3
 18377  0363  0087               	movwf	7
 18378  0364  1C01               	btfss	1,0
 18379  0365  2C13               	goto	i1l745
 18380                           
 18381                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18382  0366  087A               	movf	_DimmerLightsIntr,w
 18383  0367  3E08               	addlw	8
 18384  0368  0086               	movwf	6
 18385  0369  3001               	movlw	1	; select bank2/3
 18386  036A  0087               	movwf	7
 18387  036B  1001               	bcf	1,0
 18388                           
 18389                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18390  036C  087A               	movf	_DimmerLightsIntr,w
 18391  036D  0086               	movwf	6
 18392  036E  3001               	movlw	1	; select bank2/3
 18393  036F  0087               	movwf	7
 18394  0370  1C81               	btfss	1,1
 18395  0371  2C13               	goto	i1l745
 18396                           
 18397                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18398  0372  3001               	movlw	1
 18399  0373  00F2               	movwf	??_setDimmerLights_IntrControl
 18400  0374  0A7A               	incf	_DimmerLightsIntr,w
 18401  0375  0086               	movwf	6
 18402  0376  3001               	movlw	1	; select bank2/3
 18403  0377  0087               	movwf	7
 18404  0378  0872               	movf	??_setDimmerLights_IntrControl,w
 18405  0379  0781               	addwf	1,f
 18406                           
 18407                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18408  037A  0A7A               	incf	_DimmerLightsIntr,w
 18409  037B  0086               	movwf	6
 18410  037C  3001               	movlw	1	; select bank2/3
 18411  037D  0087               	movwf	7
 18412  037E  087A               	movf	_DimmerLightsIntr,w
 18413  037F  3E02               	addlw	2
 18414  0380  0084               	movwf	4
 18415  0381  3001               	movlw	1	; select bank2/3
 18416  0382  0085               	movwf	5
 18417  0383  0800               	movf	0,w
 18418  0384  0201               	subwf	1,w
 18419  0385  1C03               	skipc
 18420  0386  2C13               	goto	i1l745
 18421                           
 18422                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18423  0387  0A7A               	incf	_DimmerLightsIntr,w
 18424  0388  0086               	movwf	6
 18425  0389  3001               	movlw	1	; select bank2/3
 18426  038A  0087               	movwf	7
 18427  038B  0181               	clrf	1
 18428                           
 18429                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18430  038C  087A               	movf	_DimmerLightsIntr,w
 18431  038D  0086               	movwf	6
 18432  038E  3001               	movlw	1	; select bank2/3
 18433  038F  0087               	movwf	7
 18434  0390  1D81               	btfss	1,3
 18435  0391  2BC8               	goto	i1l7147
 18436                           
 18437                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18438  0392  087A               	movf	_DimmerLightsIntr,w
 18439  0393  0086               	movwf	6
 18440  0394  3001               	movlw	1	; select bank2/3
 18441  0395  0087               	movwf	7
 18442  0396  1A01               	btfsc	1,4
 18443  0397  2BB1               	goto	i1l7141
 18444                           
 18445                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18446  0398  087A               	movf	_DimmerLightsIntr,w
 18447  0399  3E04               	addlw	4
 18448  039A  0086               	movwf	6
 18449  039B  3001               	movlw	1	; select bank2/3
 18450  039C  0087               	movwf	7
 18451  039D  3040               	movlw	64
 18452  039E  0201               	subwf	1,w
 18453  039F  1803               	skipnc
 18454  03A0  2BAB               	goto	i1l7139
 18455                           
 18456                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18457  03A1  3001               	movlw	1
 18458  03A2  00F2               	movwf	??_setDimmerLights_IntrControl
 18459  03A3  087A               	movf	_DimmerLightsIntr,w
 18460  03A4  3E04               	addlw	4
 18461  03A5  0086               	movwf	6
 18462  03A6  3001               	movlw	1	; select bank2/3
 18463  03A7  0087               	movwf	7
 18464  03A8  0872               	movf	??_setDimmerLights_IntrControl,w
 18465  03A9  0781               	addwf	1,f
 18466                           
 18467                           ;Dimmer_B1.c: 262: } else {
 18468  03AA  2C13               	goto	i1l745
 18469  03AB                     i1l7139:	
 18470                           
 18471                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18472  03AB  087A               	movf	_DimmerLightsIntr,w
 18473  03AC  0086               	movwf	6
 18474  03AD  3001               	movlw	1	; select bank2/3
 18475  03AE  0087               	movwf	7
 18476  03AF  1601               	bsf	1,4
 18477                           
 18478                           ;Dimmer_B1.c: 264: }
 18479                           ;Dimmer_B1.c: 265: } else {
 18480  03B0  2C13               	goto	i1l745
 18481  03B1                     i1l7141:	
 18482                           
 18483                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(25*0.8))) {
 18484  03B1  087A               	movf	_DimmerLightsIntr,w
 18485  03B2  3E04               	addlw	4
 18486  03B3  0086               	movwf	6
 18487  03B4  3001               	movlw	1	; select bank2/3
 18488  03B5  0087               	movwf	7
 18489  03B6  3015               	movlw	21
 18490  03B7  0201               	subwf	1,w
 18491  03B8  1C03               	skipc
 18492  03B9  2BC2               	goto	i1l7145
 18493                           
 18494                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18495  03BA  087A               	movf	_DimmerLightsIntr,w
 18496  03BB  3E04               	addlw	4
 18497  03BC  0086               	movwf	6
 18498  03BD  3001               	movlw	1	; select bank2/3
 18499  03BE  0087               	movwf	7
 18500  03BF  3001               	movlw	1
 18501  03C0  0281               	subwf	1,f
 18502                           
 18503                           ;Dimmer_B1.c: 268: } else {
 18504  03C1  2C13               	goto	i1l745
 18505  03C2                     i1l7145:	
 18506                           
 18507                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18508  03C2  087A               	movf	_DimmerLightsIntr,w
 18509  03C3  0086               	movwf	6
 18510  03C4  3001               	movlw	1	; select bank2/3
 18511  03C5  0087               	movwf	7
 18512  03C6  1201               	bcf	1,4
 18513                           
 18514                           ;Dimmer_B1.c: 270: }
 18515                           ;Dimmer_B1.c: 271: }
 18516                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18517  03C7  2C13               	goto	i1l745
 18518  03C8                     i1l7147:	
 18519  03C8  087A               	movf	_DimmerLightsIntr,w
 18520  03C9  0086               	movwf	6
 18521  03CA  3001               	movlw	1	; select bank2/3
 18522  03CB  0087               	movwf	7
 18523  03CC  1D01               	btfss	1,2
 18524  03CD  2C13               	goto	i1l745
 18525                           
 18526                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18527  03CE  087A               	movf	_DimmerLightsIntr,w
 18528  03CF  3E04               	addlw	4
 18529  03D0  0086               	movwf	6
 18530  03D1  3001               	movlw	1	; select bank2/3
 18531  03D2  0087               	movwf	7
 18532  03D3  087A               	movf	_DimmerLightsIntr,w
 18533  03D4  3E05               	addlw	5
 18534  03D5  0084               	movwf	4
 18535  03D6  3001               	movlw	1	; select bank2/3
 18536  03D7  0085               	movwf	5
 18537  03D8  0800               	movf	0,w
 18538  03D9  0201               	subwf	1,w
 18539  03DA  1803               	skipnc
 18540  03DB  2BE6               	goto	i1l7153
 18541                           
 18542                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18543  03DC  3001               	movlw	1
 18544  03DD  00F2               	movwf	??_setDimmerLights_IntrControl
 18545  03DE  087A               	movf	_DimmerLightsIntr,w
 18546  03DF  3E04               	addlw	4
 18547  03E0  0086               	movwf	6
 18548  03E1  3001               	movlw	1	; select bank2/3
 18549  03E2  0087               	movwf	7
 18550  03E3  0872               	movf	??_setDimmerLights_IntrControl,w
 18551  03E4  0781               	addwf	1,f
 18552                           
 18553                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18554  03E5  2BFB               	goto	i1l7157
 18555  03E6                     i1l7153:	
 18556  03E6  087A               	movf	_DimmerLightsIntr,w
 18557  03E7  3E05               	addlw	5
 18558  03E8  0086               	movwf	6
 18559  03E9  3001               	movlw	1	; select bank2/3
 18560  03EA  0087               	movwf	7
 18561  03EB  087A               	movf	_DimmerLightsIntr,w
 18562  03EC  3E04               	addlw	4
 18563  03ED  0084               	movwf	4
 18564  03EE  3001               	movlw	1	; select bank2/3
 18565  03EF  0085               	movwf	5
 18566  03F0  0800               	movf	0,w
 18567  03F1  0201               	subwf	1,w
 18568  03F2  1803               	skipnc
 18569  03F3  2BFB               	goto	i1l7157
 18570                           
 18571                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18572  03F4  087A               	movf	_DimmerLightsIntr,w
 18573  03F5  3E04               	addlw	4
 18574  03F6  0086               	movwf	6
 18575  03F7  3001               	movlw	1	; select bank2/3
 18576  03F8  0087               	movwf	7
 18577  03F9  3001               	movlw	1
 18578  03FA  0281               	subwf	1,f
 18579  03FB                     i1l7157:	
 18580                           
 18581                           ;Dimmer_B1.c: 277: }
 18582                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18583  03FB  087A               	movf	_DimmerLightsIntr,w
 18584  03FC  3E05               	addlw	5
 18585  03FD  0086               	movwf	6
 18586  03FE  3001               	movlw	1	; select bank2/3
 18587  03FF  0087               	movwf	7
 18588  0400  087A               	movf	_DimmerLightsIntr,w
 18589  0401  3E04               	addlw	4
 18590  0402  0084               	movwf	4
 18591  0403  3001               	movlw	1	; select bank2/3
 18592  0404  0085               	movwf	5
 18593  0405  0800               	movf	0,w
 18594  0406  0601               	xorwf	1,w
 18595  0407  1D03               	skipz
 18596  0408  2C13               	goto	i1l745
 18597                           
 18598                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18599  0409  087A               	movf	_DimmerLightsIntr,w
 18600  040A  0086               	movwf	6
 18601  040B  3001               	movlw	1	; select bank2/3
 18602  040C  0087               	movwf	7
 18603  040D  1101               	bcf	1,2
 18604                           
 18605                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18606  040E  087A               	movf	_DimmerLightsIntr,w
 18607  040F  0086               	movwf	6
 18608  0410  3001               	movlw	1	; select bank2/3
 18609  0411  0087               	movwf	7
 18610  0412  1081               	bcf	1,1
 18611  0413                     i1l745:	
 18612                           
 18613                           ;Dimmer_B1.c: 281: }
 18614                           ;Dimmer_B1.c: 282: }
 18615                           ;Dimmer_B1.c: 300: }
 18616                           ;Dimmer_B1.c: 301: }
 18617                           ;Dimmer_B1.c: 302: }
 18618                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18619  0413  087A               	movf	_DimmerLightsIntr,w
 18620  0414  3E09               	addlw	9
 18621  0415  0086               	movwf	6
 18622  0416  3001               	movlw	1	; select bank2/3
 18623  0417  0087               	movwf	7
 18624  0418  1D81               	btfss	1,3
 18625  0419  0008               	return
 18626                           
 18627                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18628  041A  3001               	movlw	1
 18629  041B  00F2               	movwf	??_setDimmerLights_IntrControl
 18630  041C  087A               	movf	_DimmerLightsIntr,w
 18631  041D  3E0C               	addlw	12
 18632  041E  0086               	movwf	6
 18633  041F  3001               	movlw	1	; select bank2/3
 18634  0420  0087               	movwf	7
 18635  0421  0872               	movf	??_setDimmerLights_IntrControl,w
 18636  0422  0781               	addwf	1,f
 18637                           
 18638                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18639  0423  087A               	movf	_DimmerLightsIntr,w
 18640  0424  3E0C               	addlw	12
 18641  0425  0086               	movwf	6
 18642  0426  3001               	movlw	1	; select bank2/3
 18643  0427  0087               	movwf	7
 18644  0428  0801               	movf	1,w
 18645  0429  3A05               	xorlw	5
 18646  042A  1D03               	skipz
 18647  042B  0008               	return
 18648                           
 18649                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18650  042C  087A               	movf	_DimmerLightsIntr,w
 18651  042D  3E0C               	addlw	12
 18652  042E  0086               	movwf	6
 18653  042F  3001               	movlw	1	; select bank2/3
 18654  0430  0087               	movwf	7
 18655  0431  0181               	clrf	1
 18656                           
 18657                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18658  0432  087A               	movf	_DimmerLightsIntr,w
 18659  0433  3E09               	addlw	9
 18660  0434  0086               	movwf	6
 18661  0435  3001               	movlw	1	; select bank2/3
 18662  0436  0087               	movwf	7
 18663  0437  1181               	bcf	1,3
 18664  0438  0008               	return
 18665  0439                     __end_of_setDimmerLights_IntrControl:	
 18666                           
 18667                           	psect	text127
 18668  1CB6                     __ptext127:	
 18669 ;; *************** function _DimmerIntrPointSelect *****************
 18670 ;; Defined at:
 18671 ;;		line 70 in file "../src/Dimmer_B1.c"
 18672 ;; Parameters:    Size  Location     Type
 18673 ;;  lights          1    wreg     unsigned char 
 18674 ;; Auto vars:     Size  Location     Type
 18675 ;;  lights          1    1[COMMON] unsigned char 
 18676 ;; Return value:  Size  Location     Type
 18677 ;;		None               void
 18678 ;; Registers used:
 18679 ;;		wreg
 18680 ;; Tracked objects:
 18681 ;;		On entry : 0/0
 18682 ;;		On exit  : 0/0
 18683 ;;		Unchanged: 0/0
 18684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18689 ;;Total ram usage:        2 bytes
 18690 ;; Hardware stack levels used:    1
 18691 ;; This function calls:
 18692 ;;		Nothing
 18693 ;; This function is called by:
 18694 ;;		_setDimmerLights_IntrControl
 18695 ;; This function uses a non-reentrant model
 18696 ;;
 18697                           
 18698                           
 18699                           ;psect for function _DimmerIntrPointSelect
 18700  1CB6                     _DimmerIntrPointSelect:	
 18701                           
 18702                           ;incstack = 0
 18703                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18704                           ;DimmerIntrPointSelect@lights stored from wreg
 18705  1CB6  00F1               	movwf	DimmerIntrPointSelect@lights
 18706                           
 18707                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18708  1CB7  0871               	movf	DimmerIntrPointSelect@lights,w
 18709  1CB8  3A01               	xorlw	1
 18710  1CB9  1D03               	skipz
 18711  1CBA  2CBF               	goto	i1l734
 18712                           
 18713                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18714  1CBB  30BE               	movlw	_DimmerLights1& (0+255)
 18715  1CBC  00F0               	movwf	??_DimmerIntrPointSelect
 18716  1CBD  0870               	movf	??_DimmerIntrPointSelect,w
 18717  1CBE  00FA               	movwf	_DimmerLightsIntr
 18718  1CBF                     i1l734:	
 18719                           
 18720                           ;Dimmer_B1.c: 74: }
 18721                           ;Dimmer_B1.c: 77: if (lights == 2) {
 18722  1CBF  0871               	movf	DimmerIntrPointSelect@lights,w
 18723  1CC0  3A02               	xorlw	2
 18724  1CC1  1D03               	skipz
 18725  1CC2  0008               	return
 18726                           
 18727                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 18728  1CC3  30CD               	movlw	_DimmerLights2& (0+255)
 18729  1CC4  00F0               	movwf	??_DimmerIntrPointSelect
 18730  1CC5  0870               	movf	??_DimmerIntrPointSelect,w
 18731  1CC6  00FA               	movwf	_DimmerLightsIntr
 18732  1CC7  0008               	return
 18733  1CC8                     __end_of_DimmerIntrPointSelect:	
 18734                           
 18735                           	psect	text128
 18736  1C44                     __ptext128:	
 18737 ;; *************** function _IOC_ISR *****************
 18738 ;; Defined at:
 18739 ;;		line 401 in file "../src/MCU_B1.c"
 18740 ;; Parameters:    Size  Location     Type
 18741 ;;		None
 18742 ;; Auto vars:     Size  Location     Type
 18743 ;;		None
 18744 ;; Return value:  Size  Location     Type
 18745 ;;		None               void
 18746 ;; Registers used:
 18747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18748 ;; Tracked objects:
 18749 ;;		On entry : 0/0
 18750 ;;		On exit  : 0/0
 18751 ;;		Unchanged: 0/0
 18752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;Total ram usage:        0 bytes
 18758 ;; Hardware stack levels used:    1
 18759 ;; Hardware stack levels required when called:    3
 18760 ;; This function calls:
 18761 ;;		_setDimmerReClock
 18762 ;; This function is called by:
 18763 ;;		_ISR
 18764 ;; This function uses a non-reentrant model
 18765 ;;
 18766                           
 18767                           
 18768                           ;psect for function _IOC_ISR
 18769  1C44                     _IOC_ISR:	
 18770                           
 18771                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18772                           
 18773                           ;incstack = 0
 18774                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18775  1C44  1D8B               	btfss	11,3	;volatile
 18776  1C45  0008               	return
 18777  1C46  1C0B               	btfss	11,0	;volatile
 18778  1C47  0008               	return
 18779  1C48  0027               	movlb	7	; select bank7
 18780  1C49  1D16               	btfss	22,2	;volatile
 18781  1C4A  0008               	return
 18782                           
 18783                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18784  1C4B  1116               	bcf	22,2	;volatile
 18785                           
 18786                           ;MCU_B1.c: 404: IOCIF = 0;
 18787  1C4C  100B               	bcf	11,0	;volatile
 18788                           
 18789                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18790  1C4D  0021               	movlb	1	; select bank1
 18791  1C4E  1C20               	btfss	_myMain^(0+128),0
 18792  1C4F  0008               	return
 18793                           
 18794                           ;MCU_B1.c: 408: setDimmerReClock();
 18795  1C50  319B  237A         	fcall	_setDimmerReClock
 18796  1C52  0008               	return
 18797  1C53                     __end_of_IOC_ISR:	
 18798                           
 18799                           	psect	text129
 18800  1B7A                     __ptext129:	
 18801 ;; *************** function _setDimmerReClock *****************
 18802 ;; Defined at:
 18803 ;;		line 244 in file "../src/MCU_B1.c"
 18804 ;; Parameters:    Size  Location     Type
 18805 ;;		None
 18806 ;; Auto vars:     Size  Location     Type
 18807 ;;		None
 18808 ;; Return value:  Size  Location     Type
 18809 ;;		None               void
 18810 ;; Registers used:
 18811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18812 ;; Tracked objects:
 18813 ;;		On entry : 0/0
 18814 ;;		On exit  : 0/0
 18815 ;;		Unchanged: 0/0
 18816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18821 ;;Total ram usage:        0 bytes
 18822 ;; Hardware stack levels used:    1
 18823 ;; Hardware stack levels required when called:    2
 18824 ;; This function calls:
 18825 ;;		_setDimmerLights_IntrIOC_GO
 18826 ;; This function is called by:
 18827 ;;		_IOC_ISR
 18828 ;; This function uses a non-reentrant model
 18829 ;;
 18830                           
 18831                           
 18832                           ;psect for function _setDimmerReClock
 18833  1B7A                     _setDimmerReClock:	
 18834                           
 18835                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18836                           
 18837                           ;incstack = 0
 18838                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18839  1B7A  3001               	movlw	1
 18840  1B7B  3193  230A  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18841                           
 18842                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18843  1B7E  3002               	movlw	2
 18844  1B7F  3193  230A         	fcall	_setDimmerLights_IntrIOC_GO
 18845  1B81  0008               	return
 18846  1B82                     __end_of_setDimmerReClock:	
 18847                           
 18848                           	psect	text130
 18849  130A                     __ptext130:	
 18850 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18851 ;; Defined at:
 18852 ;;		line 28 in file "../src/Dimmer_B1.c"
 18853 ;; Parameters:    Size  Location     Type
 18854 ;;  lights          1    wreg     unsigned char 
 18855 ;; Auto vars:     Size  Location     Type
 18856 ;;  lights          1    2[COMMON] unsigned char 
 18857 ;; Return value:  Size  Location     Type
 18858 ;;		None               void
 18859 ;; Registers used:
 18860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18861 ;; Tracked objects:
 18862 ;;		On entry : 0/0
 18863 ;;		On exit  : 0/0
 18864 ;;		Unchanged: 0/0
 18865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18869 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18870 ;;Total ram usage:        1 bytes
 18871 ;; Hardware stack levels used:    1
 18872 ;; Hardware stack levels required when called:    1
 18873 ;; This function calls:
 18874 ;;		_DimmerIntrIOCPointSelect
 18875 ;; This function is called by:
 18876 ;;		_setDimmerReClock
 18877 ;; This function uses a non-reentrant model
 18878 ;;
 18879                           
 18880                           
 18881                           ;psect for function _setDimmerLights_IntrIOC_GO
 18882  130A                     _setDimmerLights_IntrIOC_GO:	
 18883                           
 18884                           ;incstack = 0
 18885                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18886                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18887  130A  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18888                           
 18889                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18890  130B  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18891  130C  319D  254A  3193   	fcall	_DimmerIntrIOCPointSelect
 18892                           
 18893                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 18894  130F  0021               	movlb	1	; select bank1
 18895  1310  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 18896  1311  0086               	movwf	6
 18897  1312  3001               	movlw	1	; select bank2/3
 18898  1313  0087               	movwf	7
 18899  1314  1801               	btfsc	1,0
 18900  1315  0008               	return
 18901  1316  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 18902  1317  3E09               	addlw	9
 18903  1318  0086               	movwf	6
 18904  1319  3001               	movlw	1	; select bank2/3
 18905  131A  0087               	movwf	7
 18906  131B  1981               	btfsc	1,3
 18907  131C  0008               	return
 18908                           
 18909                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18910  131D  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 18911  131E  0086               	movwf	6
 18912  131F  3001               	movlw	1	; select bank2/3
 18913  1320  0087               	movwf	7
 18914  1321  1401               	bsf	1,0
 18915                           
 18916                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18917  1322  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 18918  1323  3E09               	addlw	9
 18919  1324  0086               	movwf	6
 18920  1325  3001               	movlw	1	; select bank2/3
 18921  1326  0087               	movwf	7
 18922  1327  1581               	bsf	1,3
 18923                           
 18924                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18925  1328  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 18926  1329  0086               	movwf	6
 18927  132A  3001               	movlw	1	; select bank2/3
 18928  132B  0087               	movwf	7
 18929  132C  1F01               	btfss	1,6
 18930  132D  0008               	return
 18931                           
 18932                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 18933  132E  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 18934  132F  3E09               	addlw	9
 18935  1330  0086               	movwf	6
 18936  1331  3001               	movlw	1	; select bank2/3
 18937  1332  0087               	movwf	7
 18938  1333  1601               	bsf	1,4
 18939                           
 18940                           ;Dimmer_B1.c: 51: if (lights == 1) {
 18941  1334  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18942  1335  3A01               	xorlw	1
 18943  1336  1D03               	skipz
 18944  1337  2B3A               	goto	i1l6683
 18945                           
 18946                           ;Dimmer_B1.c: 52: RA7 = 1;
 18947  1338  0020               	movlb	0	; select bank0
 18948  1339  178C               	bsf	12,7	;volatile
 18949  133A                     i1l6683:	
 18950                           ;Dimmer_B1.c: 53: ;;
 18951                           
 18952                           
 18953                           ;Dimmer_B1.c: 54: }
 18954                           ;Dimmer_B1.c: 57: if (lights == 2) {
 18955  133A  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18956  133B  3A02               	xorlw	2
 18957  133C  1D03               	skipz
 18958  133D  0008               	return
 18959                           
 18960                           ;Dimmer_B1.c: 58: RB4 = 1;
 18961  133E  0020               	movlb	0	; select bank0
 18962  133F  160D               	bsf	13,4	;volatile
 18963  1340  0008               	return
 18964  1341                     __end_of_setDimmerLights_IntrIOC_GO:	
 18965                           
 18966                           	psect	text131
 18967  1D4A                     __ptext131:	
 18968 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18969 ;; Defined at:
 18970 ;;		line 8 in file "../src/Dimmer_B1.c"
 18971 ;; Parameters:    Size  Location     Type
 18972 ;;  lights          1    wreg     unsigned char 
 18973 ;; Auto vars:     Size  Location     Type
 18974 ;;  lights          1    1[COMMON] unsigned char 
 18975 ;; Return value:  Size  Location     Type
 18976 ;;		None               void
 18977 ;; Registers used:
 18978 ;;		wreg
 18979 ;; Tracked objects:
 18980 ;;		On entry : 0/0
 18981 ;;		On exit  : 0/0
 18982 ;;		Unchanged: 0/0
 18983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18987 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18988 ;;Total ram usage:        2 bytes
 18989 ;; Hardware stack levels used:    1
 18990 ;; This function calls:
 18991 ;;		Nothing
 18992 ;; This function is called by:
 18993 ;;		_setDimmerLights_IntrIOC_GO
 18994 ;; This function uses a non-reentrant model
 18995 ;;
 18996                           
 18997                           
 18998                           ;psect for function _DimmerIntrIOCPointSelect
 18999  1D4A                     _DimmerIntrIOCPointSelect:	
 19000                           
 19001                           ;incstack = 0
 19002                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19003                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19004  1D4A  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19005                           
 19006                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19007  1D4B  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19008  1D4C  3A01               	xorlw	1
 19009  1D4D  1D03               	skipz
 19010  1D4E  2D54               	goto	i1l722
 19011                           
 19012                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19013  1D4F  30BE               	movlw	_DimmerLights1& (0+255)
 19014  1D50  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19015  1D51  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19016  1D52  0021               	movlb	1	; select bank1
 19017  1D53  00CB               	movwf	_DimmerLightsIntrIOC^(0+128)
 19018  1D54                     i1l722:	
 19019                           
 19020                           ;Dimmer_B1.c: 12: }
 19021                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19022  1D54  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19023  1D55  3A02               	xorlw	2
 19024  1D56  1D03               	skipz
 19025  1D57  0008               	return
 19026                           
 19027                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19028  1D58  30CD               	movlw	_DimmerLights2& (0+255)
 19029  1D59  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19030  1D5A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19031  1D5B  0021               	movlb	1	; select bank1
 19032  1D5C  00CB               	movwf	_DimmerLightsIntrIOC^(0+128)
 19033  1D5D  0008               	return
 19034  1D5E                     __end_of_DimmerIntrIOCPointSelect:	
 19035  007E                     btemp	set	126	;btemp
 19036  007E                     pic14e$flags	set	126
 19037  007E                     wtemp	set	126
 19038  007E                     wtemp0	set	126
 19039  0080                     wtemp1	set	128
 19040  0082                     wtemp2	set	130
 19041  0084                     wtemp3	set	132
 19042  0086                     wtemp4	set	134
 19043  0088                     wtemp5	set	136
 19044  007F                     wtemp6	set	127
 19045  007E                     ttemp	set	126
 19046  007E                     ttemp0	set	126
 19047  0081                     ttemp1	set	129
 19048  0084                     ttemp2	set	132
 19049  0087                     ttemp3	set	135
 19050  007F                     ttemp4	set	127
 19051  007E                     ltemp	set	126
 19052  007E                     ltemp0	set	126
 19053  0082                     ltemp1	set	130
 19054  0086                     ltemp2	set	134
 19055  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     79      80
    BANK1            80      9      79
    BANK2            80      0      80
    BANK3            80      0      69
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  141902
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1345
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     161
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     161
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   35542
                                             77 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   22185
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0   13129
                                             75 BANK0      2     2      0
                                              0 BANK1      5     5      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   10510
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48702
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   48702
                                             75 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47873
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1389
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   46300
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   29853
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15102
                                             68 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   14879
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14813
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14747
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     808
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1368
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    8535
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   11933
                                             70 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   11521
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8577
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1445
                                              7 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     204
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   28468
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   28468
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    9921
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1345
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   10176
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8128
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7327
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1317
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     187      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     187      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Nov 15 16:45:13 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 177E                                       l98 1792  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1FB9  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1D37  
                 __end_of_setDelayOff_GO 091E                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1646  
                   _setDimmerLights_Line 1DC4                             ___ftadd@sign 0048  
                                    l110 14F6                                      l106 14FC  
                                    l107 14F8                                      l108 14E6  
                                    l330 1E27                                      l331 1E29  
                   _setDimmerLights_SwOn 07B9                                      l255 0A7E  
                                    l280 0C22                                      l281 0C69  
                                    l374 10AD                                      l582 09DA  
                                    l826 08B1                                      l766 1D08  
                                    l864 1D40                                      l777 122A  
                                    l865 1D47                                      _GIE 005F  
                                    _CRC 00C8                                      l996 1E8B  
                                    l997 1E93                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 0128  
           getDimmerLights_Status@lights 0022                                      _Sw1 0157  
                                    _Sw2 01DC                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1E34                    _Buzzer_Initialization 1B41  
                        __end_of_ADC_Set 1B7A                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0D77  
                 _setMain_Exception$7061 00E7                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FB9                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0067                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C53                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1031 13E8                                     l2031 1306  
                                   l2015 0BA0                                     l1313 11C6  
                                   l2025 0BF6                                     l1322 1549  
                                   l2045 0B84                                     l2057 141A  
                                   l2049 16C3                 ?_DimmerLightsPointSelect 0070  
                                   l1461 01F0                                     l1613 0E9F  
                                   l1462 02C7                                     l1463 02C5  
                                   l1458 02F7                                     l1299 12CE  
                                   l2363 1DE0                          __end_of_IOC_Set 1C11  
                                   l2391 0089                                     l2721 11FA  
                                   l2379 1FEC                                     l2716 11E3  
                                   l6021 1608                                     l2717 11FE  
                                   l2389 01B0                                     l6111 08F5  
                                   l6031 1610                                     l6015 15FD  
                                   l6033 161C                                     l2673 13AF  
                                   l2922 04D8                                     l7011 1457  
                                   l6115 08FB                                     l6043 1637  
                                   l1964 061C                                     l7021 1467  
                                   l6117 0908                                     l6133 1C7C  
                                   l6221 07F9                                     l1973 059B  
                                   l1974 0597                                     l1966 0559  
                         _Load_Main$3848 002D                                     l7015 145D  
                                   l6119 0911                                     l6047 163F  
                                   l6039 162E                                     l1967 055B  
                                   l1976 05D4                                     l1968 0563  
                                   l7025 146D                                     l7009 1454  
                                   l6305 1076                                     l7019 1464  
                                   l6307 107C                                     l2893 0951  
                                   l6405 11DE                                     l7205 1697  
                                   l6333 16CA                                     l5703 092E  
                                   l6095 0B06                                     l6247 08A5  
                                   l6415 11F5                                     l6407 11E7  
                                   l7311 151F                                     l8103 1399  
                                   l5713 0956                                     l5705 0938  
                                   l6441 1571                                     l7305 150A  
                                   l5801 04CA                                     l6257 1241  
                                   l6337 16E3                                     l6521 0B61  
                                   l6513 0B43                                     l6363 1E5F  
                                   l5731 1CD1                                     l2899 0968  
                                   l5715 095E                                     l5707 093D  
                                   l6427 1560                                     l6435 1568  
                                   l5811 04FC                                     l5803 04D4  
                                   l6523 0B65                                     l8051 1369  
                  _setDimmerLights_SwOff 085E                                     l6357 1E56  
                                   l6461 1593                                     l8029 02E5  
                                   l6373 108D                                     l5821 0517  
                                   l6349 1408                                     l6517 0B59  
                                   l7405 0E83                                     l6359 1E59  
                                   l5727 1CCB                                     l5831 0EBA  
                                   l6703 1196                                     l6375 1090  
                                   l6623 0C34                                     l6607 0C1F  
                                   l6543 0A53                                     l5807 04EA  
                                   l5903 0FD0                                     l6519 0B5D  
                                   l6527 0B69                                     l7407 0E84  
                                   l6705 117A                                     l6457 158F  
                                   l6465 1597                                     l6449 1579  
                                   l7193 166A                                     l6625 0C4D  
                                   l6609 0C19                                     l6561 0A84  
                                   l6537 0A4A                                     l5761 0461  
                                   l6801 17E3                                     l5851 0F11  
                                   l5923 0D09                                     l6707 119B  
                                   l6475 1DD1                                     l7195 1670  
                                   l6379 1096                                     l6571 0A94  
                                   l6563 0A87                                     l6539 0A4D  
                                   l5771 0477                                     l5907 0FD8  
                                   l8243 1724                                     l6661 1FA8  
                                   l5749 1F7F                                     l5837 0ED0  
                                   l5941 0D39                                     l6637 0C6B  
                                   l6557 0A65                                     l5765 0468  
                                   l7509 060A                                     l7445 057A  
                                   l7533 1DEB                                     l7621 0127  
                                   l7365 0E1E                                     l7293 1F47  
                                   l6647 10BE                                     l6655 1F9F  
                                   l5951 0D5D                                     l5943 0D47  
                                   l6751 15B7                                     l6591 0C00  
                                   l6575 0A9A                                     l6567 0A8D  
                                   l5791 04AE                                     l5783 0491  
                                   l7551 0A05                                     l7543 09ED  
                                   l7607 00E9                                     l7631 0159  
                                   l8079 1FF5                                     l7287 1F3F  
                                   l8239 1719                                     l6649 10C9  
                                   l6657 1FA2                                     l5953 0D60  
                                   l6729 0DCB                                     l7721 1224  
                                   l6569 0A91                                     l5793 04B3  
                                   l5873 0F63                                     l7481 05BB  
                                   l7529 1DE5                                     l7561 0A23  
                                   l7545 09FA                                     l7289 1F42  
                                   l5699 0927                                     l5859 0F2A  
                                   l7723 122C                                     l6595 0C06  
                                   l5795 04B7                                     l5891 0FB4  
                                   l6499 0B17                                     l7395 0E6E  
                                   l5965 1D69                                     l5981 1170  
                                   l5957 0D6E                                     l5949 0D54  
                                   l6589 0BFD                                     l6597 0C09  
                                   l6909 1CB0                                     l5789 04A4  
                                   l6941 0BBB                                     l7557 0A13  
                                   l6773 127E                                     l7581 0074  
                                   l7671 14D0                                     l7719 1221  
                                   l5895 0FBC                                     l5879 0F79  
                                   l6951 0BE1                                     l7479 05B9  
                                   l7567 0A33                                     l6865 11AE  
                                   l7913 01DF                                     l6929 0BA3  
                                   l7497 05E9                                     l7569 0A3C  
                                   l7657 01AC                                     l7781 0692  
                                   l7933 020A                                     l6957 0BEC  
                                   l6797 17DD                                     l6981 1F02  
                                   l7597 00B7                                     l7861 0C90  
                  _myMain_Initialization 1C53                                     l6799 17B2  
                                   l6967 1D7D                                     l6991 1F0E  
                                   l6983 1F04                                     l6993 1F12  
                                   l7873 0CBD                                     l7963 0283  
                                   l7971 0296                                     l7939 0234  
                                   l7981 02AB                                     l7869 0CB5  
                                   l7969 0290                                     l7889 0CEA  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4215 0933                                     u4235 094C  
                                   u5060 0AB4                                     u4255 0959  
                                   u5225 1DA9                                     u5065 0AB2  
                                   u4425 0492                                     u4515 04CB  
                                   u6035 17BB                                     _PEIE 005E  
                                   u4285 096F                                     u4605 0F12  
                                   u4615 0F21                                     u4455 04A5  
                                   u4625 0F2B                                     u4705 0FC3  
                                   u4805 0D3A                                     u4485 04B8  
                                   u7045 0574                                     u4735 0FD9  
                                   u4585 0EE2                                     u4745 0FDF  
                                   u4665 0F85                                     u4595 0EF2  
                                   u4835 0D55                                     u4675 0F95  
                                   u4775 0D10                                     u8055 029C  
                                   u4695 0FBD                                     u7175 05FA  
                                   u5825 10B3                                     u8225 1389  
                                   u4955 1613                                     u8235 13A7  
                                   u8165 1360                                     u4895 115C  
                                   u4975 161D                                     u5935 1183  
                                   u8175 136F                                     u4985 1627  
                                   u4995 162F                                     u7725 12C5  
                                   u6925 0E5F                                     u7495 14C6  
                                   u6945 0E74                                     u7835 0CD7  
                                   u7785 0CA3                                     u7975 0236  
                                   u7985 023B                                     u7995 0249  
                                   _LWLO 0CAD                                     _RSSI 00CC  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 012A                                     _Temp 00D4  
                                   _main 16F5                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 09E0                          __end_of_RF_Main 1B4A  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1C29  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B7A                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 142F  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                 _getDimmerLights_Status 1C62                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1C05  
       setDimmerLights_ErrorClose@lights 0068            __end_of_DimmerIntrPointSelect 1CC8  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EB  
                        __end_of___awdiv 1646                          __end_of___ftadd 052F  
                        __end_of___ftdiv 0F4C                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0D77                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l722 1D54                                    i1l734 1CBF  
                                  i1l745 0413                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 00E6  
                __end_of_Timeout_Counter 1DAF                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1341               _setDimmerLights_IntrIOC_GO 130A  
                       __end_of_TMR1_ISR 111E             __size_of_CC2500_WriteCommand 001A  
     __end_of_setDimmerLights_ErrorClose 1800               _setDimmerLights_ErrorClose 17A6  
                       __end_of_TMR1_Set 1C1D                                    _getAD 1F34  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1CFE  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1E04                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 119E            __end_of_setLED_Initialization 1C94  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0AAA              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0803  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                      ??_setPercentValue 0059                             __end_of_main 174D  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1B5D  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E0A  
                   _setSw_Initialization 1BA2                                   ??_main 006F  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B16                           _setMemory_Data 1BD5  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1D11  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 0058  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 097F                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006F                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1F96  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 097F  
               _getMain_All_Error_Status 11CD                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EB8                                   i1l7121 035F  
                                 i1l7141 03B1                                   i1l7117 0358  
                                 i1l7153 03E6                                   i1l7145 03C2  
                                 i1l7139 03AB                                   i1l7147 03C8  
                                 i1l7157 03FB                                   i1l6683 133A  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u650_25 0332  
                     __size_of_Load_Main 0144                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   u765_25 1118  
                                 _IO_Set 1E34                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B40  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1DC4  
                                 _Dimmer 0120                                   _DlySw1 016C  
                                 _DlySw2 016E               __end_of_Mcu_Initialization 1CEC  
                    __end_of_Buzzer_Main 1503                                   _Memory 0220  
                                 _Timer1 0123       __end_of_setDimmerLights_TriggerAdj 1F34  
             _setDimmerLights_TriggerAdj 1F14                                   ___bmul 1CC8  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0029                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D2                                   _s_data 00D3  
                 ??_setDimmerLights_SwOn 0062                                   _setLED 1551  
                                 _myMain 00A0                   __end_of_setMemory_Data 1BE1  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0027                         ___awdiv@quotient 0027  
                                 _setBuz 174D                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1B67         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 0439  
            _setDimmerLights_IntrControl 02FD                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1D37  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1D86  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 001B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1DD9  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 085E  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0046  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$5253 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F54                            __end_of_getAD 1F54  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0051                       _LED_Initialization 1BED  
                        _getSw_KeyStatus 1EF5                ??_setControl_Lights_Table 0069  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0027                     _getMain_Lights_Count 1DEE  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02FD  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1172  
             __end_of_set_TimeoutCleared 1B62                 __end_of_setDimmerReClock 1B82  
                     __size_of_getRxData 0074                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00C9                           _DimmerLights22 00CA  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B4A  
                     ??_CC2500_WriteByte 0020                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 14B9                        ??_setRFSW_Control 0066  
                      __end_of_Temp_Main 0803                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1B82                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 006D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 16F5                      _CC2500_WriteCommand 1E4D  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0C6F  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1B92  
                     __size_of_setTxData 00BD                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1B73                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1341                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1BC9  
                     _setRFSW_AdjControl 13EF                                  _IOC_ISR 1C44  
                                _IOC_Set 1C05                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 129E  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E67  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0068              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1B47                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1C1D  
        __end_of_setControl_Lights_Table 0B85                          setRF_Main@error 006E  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 1473                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1BD5  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1CA5  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0164                                  _VarLED2 0168  
         __end_of_getDimmerLights_Status 1C72                        __end_of_getRxData 0BF9  
                __end_of_getSw_KeyStatus 1F14                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1D5E                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1ED6                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0027                          __size_of___bmul 0012  
                                ___awdiv 15F2                                  ___ftadd 0439  
                                ___ftdiv 0EA3                                  ___ftmul 0F4C  
                                ___fttol 0CF0                      __end_of_Switch_Main 2000  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1CA5  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 0067  
                        __size_of_setBuz 0059                                  __ptext1 1378  
                                __ptext2 1C53                                  __ptext3 1341  
                                __ptext4 0C6F                                  __ptext5 1F34  
                                __ptext6 1CEC                                  __ptext7 0002  
                                __ptext8 0800                                  __ptext9 0E0A  
                ??_setDimmerLights_AdjRF 005F                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1CB6                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12D4  
              __end_of_Flash_Memory_Read 1E81                  ??_setDimmerLights_SwOff 0062  
                             _setRF_Main 052F                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B8A                        _DimmerLights_Main 1200  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1BBE  
             __end_of_CC2500_ClearRXFIFO 1B51                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B55            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006F                           _LedPointSelect 1E81  
                    _DelayOffPointSelect 1D5E                           _getMain_LoadOK 1C36  
                                clrloop0 1B6E           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1C36                     end_of_initialization 0046  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 111E  
                          _DelayTime_1us 10A8                        __end_of_setTxData 07B9  
             __end_of_Flash_Memory_Write 11CD                                  init_ram 1B67  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0066  
                   Flash_Memory_Read@ret 0023                                  initloop 1B68  
                             _setSw_Main 004A                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 0064                        _CC2500_ReadStatus 1083  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C83  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0BF9  
                          _CC2500_TxData 0A42                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1503  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1BAA                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1234                       _Mcu_Initialization 1CDA  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 13B1  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1E9C                  __end_of_setPercentValue 14B9  
                 __end_of_getMain_LoadOK 1C44                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 1148                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 15A1  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 10A8  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1E4D  
                   _setRF_Initialization 1BBE                       _setMemory_LoopSave 1D24  
                            _Switch_Main 1FDC                        __size_of_LED_Main 000C  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1CFE  
                __end_of_getRF_KeyStatus 1CB6                        _setMain_Exception 09E0  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1DAF                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1CDA  
               setMain_Exception@command 00EA                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1D4A          _setDimmerLights_AdjControl$2577 0027  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0029  
          __size_of_getDimmerLights_Line 0013                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0057  
                         __end_of_setLED 15A1            __size_of_setDimmerLights_Line 0015  
          __size_of_setDimmerLights_SwOn 0046                           __end_of_setBuz 17A6  
                    ??_setMain_Exception 006B                     _CC2500_FrequencyCabr 1BC9  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 169D  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1234  
                        ?_LedPointSelect 0070                                _Load_Main 01B9  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1B9A                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1EF5  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1B5D                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0160  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0A42                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 0800                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00CD  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D0                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1C72                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0069                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1200                         _CC2500_SIDLEMode 1B55  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 1269  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2557 0022                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1D11                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E6  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0093                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1EB8  
               setRFSW_AdjControl@status 0066                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                           getRxData@error 006A  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F1  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 07FF  
                              _getBuz_GO 1C94      __end_of_Flash_Memory_Initialization 06FC  
            _Flash_Memory_Initialization 0620                                 ?___awdiv 0020  
                              __ptext100 08BD                                __ptext101 1148  
                              __ptext110 142F                                __ptext102 1CC8  
                              __ptext111 111E                                __ptext103 1C62  
                              __ptext120 1D9A                                __ptext112 1ED6  
                              __ptext104 1CFE                                __ptext121 1E1B  
                              __ptext113 1F96                                __ptext105 1B82  
                              __ptext130 130A                                __ptext122 14B9  
                              __ptext114 1BC9                                __ptext106 1BB3  
                              __ptext131 1D4A                                __ptext123 1B41  
                              __ptext115 10A8                                __ptext107 1D5E  
                              __ptext116 1B51                                __ptext108 1DAF  
                              __ptext125 10F5                                __ptext117 1B4D  
                              __ptext109 1B55                                 ?___ftadd 003E  
                              __ptext126 02FD                                __ptext118 1E4D  
                              __ptext127 1CB6                                __ptext119 1B5D  
                              __ptext128 1C44                                __ptext129 1B7A  
                              _getRxData 0B85                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 0039                  __end_of_setRFSW_Control 16F5  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B44  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DEE                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1FDC                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2494 0068                                _r_address 00D1  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 08BD             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C62                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D72  
                    __end_of_setLED_Main 13EF                      _DimmerLightsIntrIOC 00CB  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1B4D  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1BF9                          SwPointSelect@sw 0021  
                              clear_ram0 1B6D                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0062                             _my_MainTimer 1378  
                              _setTxData 06FC      __end_of_DimmerLights_Initialization 1E1B  
            _DimmerLights_Initialization 1E04                       _CC2500_ClearRXFIFO 1B4D  
                     _CC2500_ClearTXFIFO 1B51           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1D9A                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 119E                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 10F5  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1C11  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0126  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E67  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1CEC  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 006C  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1BED  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 130A  
                  _DlyOff_Initialization 1BB3                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1B59  
                       __size_of_WDT_Set 000C                    setRFSW_Control@status 0067  
                setMain_Exception@status 00E9                       __end_of_getLoad_AD 0CF0  
                     __end_of_getLoad_OK 1B9A                    _Switch_Initialization 1C29  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0028                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1378  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1E1B  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                               _SwDetect 00CF                              ??_Temp_Main 0029  
                      setRFSW_Control@sw 0068            _getMain_All_Error_Status$7072 0021  
          _getMain_All_Error_Status$7073 0023                 __end_of_getDimmer_LoadOK 1BA2  
                    _Load_Initialization 1B62                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0E0A                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 0063  
                               ___awtoft 1F74                         ??_LedPointSelect 0020  
                               ___ftpack 091E            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002C  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006B  
                   CC2500_WriteREG@value 0022                              _setLED_Main 13B1  
             __end_of_setRF_DimmerLights 0B16                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                                 __ptext10 1B4A  
                               __ptext11 07FF                                 __ptext20 1D37  
                               __ptext12 1FDC                                 __ptext21 1C29  
                               __ptext13 004A                                 __ptext30 169D  
                               __ptext22 1BA2                                 __ptext14 1D86  
                               __ptext31 13EF                                 __ptext23 1DD9  
                               __ptext15 1269                                 __ptext40 0A42  
                               __ptext32 1234                                 __ptext24 1B47  
                               __ptext16 1EF5                                 __ptext41 0BF9  
                               __ptext33 1FB9                                 __ptext25 052F  
                               __ptext17 1D72                                 __ptext50 1C05  
                               __ptext42 1083                                 __ptext34 0803  
                               __ptext26 0B85                                 __ptext18 09E0  
                               __ptext51 1B59                                 __ptext43 1066  
                               __ptext35 0F4C                                 __ptext27 12D4  
                               __ptext19 17A6                                 __ptext60 13B1  
                               __ptext52 1B73                                 __ptext44 1B44  
                               __ptext36 0439                                 __ptext28 1D24  
                               __ptext61 1BED                                 __ptext53 01B9  
                               __ptext45 1BBE                                 __ptext37 1D11  
                               __ptext29 0B16                                 __ptext70 1E67  
                               __ptext62 1C83                                 __ptext54 1C36  
                               __ptext46 1CDA                                 __ptext38 1CA5  
                               __ptext71 1200                                 __ptext63 129E  
                               __ptext55 1B9A                                 __ptext47 1C1D  
                               __ptext39 1C94                                 __ptext80 1B92  
                               __ptext72 1646                                 __ptext64 1503  
                               __ptext56 1DEE                                 __ptext48 1C11  
                               __ptext81 1E04                                 __ptext73 15A1  
                               __ptext65 1BE1                                 __ptext57 1B62  
                               __ptext49 1E34                                 __ptext90 085E  
                               __ptext82 10CE                                 __ptext74 0D77  
                               __ptext66 0620                                 __ptext58 1E9C  
                               __ptext91 06FC                                 __ptext83 1B40  
                               __ptext75 1551                                 __ptext67 1BD5  
                               __ptext59 1BF9                                 __ptext92 0AAA  
                               __ptext84 1B8A                                 __ptext76 1E81  
                               __ptext68 119E                                 __ptext93 1473  
                               __ptext85 097F                                 __ptext77 1DC4  
                               __ptext69 1BAA                                 __ptext94 0CF0  
                               __ptext86 07B9                                 __ptext78 11CD  
                               __ptext95 0EA3                                 __ptext87 174D  
                               __ptext79 1172                                 __ptext96 1F74  
                               __ptext88 15F2                                 __ptext97 091E  
                               __ptext89 1C72                                 __ptext98 1F14  
                               __ptext99 1EB8                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1D4A            __end_of_Dimmer_Initialization 1B41  
           __end_of_setDimmerLights_Main 169D             __end_of_setDimmerLights_Line 1DD9  
                       Switch_Main@error 006E             __end_of_setDimmerLights_SwOn 07FF  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0066  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D86                 __end_of_CC2500_SIDLEMode 1B59  
             setDimmerLights_Main@lights 0065              __end_of_DelayOffPointSelect 1D72  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 006D  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1066                       _CC2500_InitPATable 1ED6  
               __end_of_setMemory_Modify 1D24            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0620                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0069  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0069  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EB                                 main@argv 00ED  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6326 0021  
                   _getSw_KeyStatus$6327 0022                          _CC2500_PowerRST 142F  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 1551  
                      ??_getPercentValue 0059                              _setLog_Code 12D4  
            __end_of_Flash_Memory_Unlock 1BB3                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1F96                       __end_of_setSw_Main 01B9  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1148  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0066  
                setDimmerLights_SwOff@sw 0065        __end_of_getAll_DimmerLights_AdjGO 1C83  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10F5  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 10CE  
            __end_of_setDimmerLights_Adj 15F2                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1B44     __size_of_setDimmerLights_IntrControl 013C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1BE1  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00CE  
        __end_of_DelayOff_Initialization 1B8A      __size_of_setDimmerLights_IntrIOC_GO 0037  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B92       __end_of_setDimmerLights_AdjControl 129E  
             _setDimmerLights_AdjControl 1269                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 08BD  
       __size_of_setControl_Lights_Table 006F                   __end_of_DelayTimejudge 1172  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0066                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10CE                  __end_of_CC2500_ReadByte 1083  
           __end_of_setSw_Initialization 1BAA                          _Timeout_Counter 1D9A  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1BF9         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 0800                 __size_of_setPercentValue 0046  
                setMemory_Modify@command 0021                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1B47                    __end_of_CC2500_RxData 0C6F  
                  __end_of_CC2500_TxData 0AAA                    _setLoad_AH_AL_Restore 1E9C  
                __end_of_CC2500_PowerRST 1473           getAll_DimmerLights_AdjGO@adjgo 0021  
