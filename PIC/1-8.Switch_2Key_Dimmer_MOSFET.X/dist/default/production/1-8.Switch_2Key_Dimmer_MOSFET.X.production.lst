

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 05 15:43:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	intentry,global,class=CODE,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	dabs	1,0x7E,2
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  011D                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019C                     	;# 
   227  019D                     	;# 
   228  019E                     	;# 
   229  019F                     	;# 
   230  020D                     	;# 
   231  0210                     	;# 
   232  0211                     	;# 
   233  0211                     	;# 
   234  0212                     	;# 
   235  0212                     	;# 
   236  0213                     	;# 
   237  0213                     	;# 
   238  0214                     	;# 
   239  0214                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020D                     	;# 
   342  0210                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0010                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0099                     	;# 
   417  009A                     	;# 
   418  009B                     	;# 
   419  009B                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  010C                     	;# 
   424  010D                     	;# 
   425  010E                     	;# 
   426  0116                     	;# 
   427  0117                     	;# 
   428  011D                     	;# 
   429  018C                     	;# 
   430  018D                     	;# 
   431  018E                     	;# 
   432  0191                     	;# 
   433  0191                     	;# 
   434  0192                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0194                     	;# 
   438  0195                     	;# 
   439  0196                     	;# 
   440  0197                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020D                     	;# 
   453  0210                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0291                     	;# 
   470  0291                     	;# 
   471  0292                     	;# 
   472  0293                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  0394                     	;# 
   478  0395                     	;# 
   479  0396                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0015                     	;# 
   510  0016                     	;# 
   511  0016                     	;# 
   512  0017                     	;# 
   513  0018                     	;# 
   514  0019                     	;# 
   515  001A                     	;# 
   516  001B                     	;# 
   517  001C                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0095                     	;# 
   525  0096                     	;# 
   526  0097                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  011D                     	;# 
   540  018C                     	;# 
   541  018D                     	;# 
   542  018E                     	;# 
   543  0191                     	;# 
   544  0191                     	;# 
   545  0192                     	;# 
   546  0193                     	;# 
   547  0193                     	;# 
   548  0194                     	;# 
   549  0195                     	;# 
   550  0196                     	;# 
   551  0197                     	;# 
   552  0199                     	;# 
   553  019A                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019C                     	;# 
   559  019C                     	;# 
   560  019D                     	;# 
   561  019E                     	;# 
   562  019F                     	;# 
   563  020D                     	;# 
   564  0210                     	;# 
   565  0211                     	;# 
   566  0211                     	;# 
   567  0212                     	;# 
   568  0212                     	;# 
   569  0213                     	;# 
   570  0213                     	;# 
   571  0214                     	;# 
   572  0214                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0217                     	;# 
   580  0291                     	;# 
   581  0291                     	;# 
   582  0292                     	;# 
   583  0293                     	;# 
   584  0298                     	;# 
   585  0298                     	;# 
   586  0299                     	;# 
   587  029A                     	;# 
   588  0394                     	;# 
   589  0395                     	;# 
   590  0396                     	;# 
   591  0FE4                     	;# 
   592  0FE5                     	;# 
   593  0FE6                     	;# 
   594  0FE7                     	;# 
   595  0FE8                     	;# 
   596  0FE9                     	;# 
   597  0FEA                     	;# 
   598  0FEB                     	;# 
   599  0FED                     	;# 
   600  0FEE                     	;# 
   601  0FEF                     	;# 
   602  0000                     	;# 
   603  0001                     	;# 
   604  0002                     	;# 
   605  0003                     	;# 
   606  0004                     	;# 
   607  0005                     	;# 
   608  0006                     	;# 
   609  0007                     	;# 
   610  0008                     	;# 
   611  0009                     	;# 
   612  000A                     	;# 
   613  000B                     	;# 
   614  000C                     	;# 
   615  000D                     	;# 
   616  000E                     	;# 
   617  0010                     	;# 
   618  0011                     	;# 
   619  0012                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008D                     	;# 
   631  008E                     	;# 
   632  0090                     	;# 
   633  0091                     	;# 
   634  0092                     	;# 
   635  0095                     	;# 
   636  0096                     	;# 
   637  0097                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  011D                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0197                     	;# 
   663  0199                     	;# 
   664  019A                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019C                     	;# 
   670  019C                     	;# 
   671  019D                     	;# 
   672  019E                     	;# 
   673  019F                     	;# 
   674  020D                     	;# 
   675  0210                     	;# 
   676  0211                     	;# 
   677  0211                     	;# 
   678  0212                     	;# 
   679  0212                     	;# 
   680  0213                     	;# 
   681  0213                     	;# 
   682  0214                     	;# 
   683  0214                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  0291                     	;# 
   692  0291                     	;# 
   693  0292                     	;# 
   694  0293                     	;# 
   695  0298                     	;# 
   696  0298                     	;# 
   697  0299                     	;# 
   698  029A                     	;# 
   699  0394                     	;# 
   700  0395                     	;# 
   701  0396                     	;# 
   702  0FE4                     	;# 
   703  0FE5                     	;# 
   704  0FE6                     	;# 
   705  0FE7                     	;# 
   706  0FE8                     	;# 
   707  0FE9                     	;# 
   708  0FEA                     	;# 
   709  0FEB                     	;# 
   710  0FED                     	;# 
   711  0FEE                     	;# 
   712  0FEF                     	;# 
   713  0000                     	;# 
   714  0001                     	;# 
   715  0002                     	;# 
   716  0003                     	;# 
   717  0004                     	;# 
   718  0005                     	;# 
   719  0006                     	;# 
   720  0007                     	;# 
   721  0008                     	;# 
   722  0009                     	;# 
   723  000A                     	;# 
   724  000B                     	;# 
   725  000C                     	;# 
   726  000D                     	;# 
   727  000E                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0015                     	;# 
   732  0016                     	;# 
   733  0016                     	;# 
   734  0017                     	;# 
   735  0018                     	;# 
   736  0019                     	;# 
   737  001A                     	;# 
   738  001B                     	;# 
   739  001C                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0095                     	;# 
   747  0096                     	;# 
   748  0097                     	;# 
   749  0099                     	;# 
   750  009A                     	;# 
   751  009B                     	;# 
   752  009B                     	;# 
   753  009C                     	;# 
   754  009D                     	;# 
   755  009E                     	;# 
   756  010C                     	;# 
   757  010D                     	;# 
   758  010E                     	;# 
   759  0116                     	;# 
   760  0117                     	;# 
   761  011D                     	;# 
   762  018C                     	;# 
   763  018D                     	;# 
   764  018E                     	;# 
   765  0191                     	;# 
   766  0191                     	;# 
   767  0192                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0194                     	;# 
   771  0195                     	;# 
   772  0196                     	;# 
   773  0197                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019C                     	;# 
   781  019C                     	;# 
   782  019D                     	;# 
   783  019E                     	;# 
   784  019F                     	;# 
   785  020D                     	;# 
   786  0210                     	;# 
   787  0211                     	;# 
   788  0211                     	;# 
   789  0212                     	;# 
   790  0212                     	;# 
   791  0213                     	;# 
   792  0213                     	;# 
   793  0214                     	;# 
   794  0214                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0216                     	;# 
   799  0216                     	;# 
   800  0217                     	;# 
   801  0217                     	;# 
   802  0291                     	;# 
   803  0291                     	;# 
   804  0292                     	;# 
   805  0293                     	;# 
   806  0298                     	;# 
   807  0298                     	;# 
   808  0299                     	;# 
   809  029A                     	;# 
   810  0394                     	;# 
   811  0395                     	;# 
   812  0396                     	;# 
   813  0FE4                     	;# 
   814  0FE5                     	;# 
   815  0FE6                     	;# 
   816  0FE7                     	;# 
   817  0FE8                     	;# 
   818  0FE9                     	;# 
   819  0FEA                     	;# 
   820  0FEB                     	;# 
   821  0FED                     	;# 
   822  0FEE                     	;# 
   823  0FEF                     	;# 
   824  0000                     	;# 
   825  0001                     	;# 
   826  0002                     	;# 
   827  0003                     	;# 
   828  0004                     	;# 
   829  0005                     	;# 
   830  0006                     	;# 
   831  0007                     	;# 
   832  0008                     	;# 
   833  0009                     	;# 
   834  000A                     	;# 
   835  000B                     	;# 
   836  000C                     	;# 
   837  000D                     	;# 
   838  000E                     	;# 
   839  0010                     	;# 
   840  0011                     	;# 
   841  0012                     	;# 
   842  0015                     	;# 
   843  0016                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001C                     	;# 
   851  008C                     	;# 
   852  008D                     	;# 
   853  008E                     	;# 
   854  0090                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0095                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0099                     	;# 
   861  009A                     	;# 
   862  009B                     	;# 
   863  009B                     	;# 
   864  009C                     	;# 
   865  009D                     	;# 
   866  009E                     	;# 
   867  010C                     	;# 
   868  010D                     	;# 
   869  010E                     	;# 
   870  0116                     	;# 
   871  0117                     	;# 
   872  011D                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0194                     	;# 
   882  0195                     	;# 
   883  0196                     	;# 
   884  0197                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019C                     	;# 
   892  019C                     	;# 
   893  019D                     	;# 
   894  019E                     	;# 
   895  019F                     	;# 
   896  020D                     	;# 
   897  0210                     	;# 
   898  0211                     	;# 
   899  0211                     	;# 
   900  0212                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0213                     	;# 
   904  0214                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  0291                     	;# 
   914  0291                     	;# 
   915  0292                     	;# 
   916  0293                     	;# 
   917  0298                     	;# 
   918  0298                     	;# 
   919  0299                     	;# 
   920  029A                     	;# 
   921  0394                     	;# 
   922  0395                     	;# 
   923  0396                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  0010                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0015                     	;# 
   954  0016                     	;# 
   955  0016                     	;# 
   956  0017                     	;# 
   957  0018                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  008C                     	;# 
   963  008D                     	;# 
   964  008E                     	;# 
   965  0090                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  011D                     	;# 
   984  018C                     	;# 
   985  018D                     	;# 
   986  018E                     	;# 
   987  0191                     	;# 
   988  0191                     	;# 
   989  0192                     	;# 
   990  0193                     	;# 
   991  0193                     	;# 
   992  0194                     	;# 
   993  0195                     	;# 
   994  0196                     	;# 
   995  0197                     	;# 
   996  0199                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019C                     	;# 
  1003  019C                     	;# 
  1004  019D                     	;# 
  1005  019E                     	;# 
  1006  019F                     	;# 
  1007  020D                     	;# 
  1008  0210                     	;# 
  1009  0211                     	;# 
  1010  0211                     	;# 
  1011  0212                     	;# 
  1012  0212                     	;# 
  1013  0213                     	;# 
  1014  0213                     	;# 
  1015  0214                     	;# 
  1016  0214                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0216                     	;# 
  1021  0216                     	;# 
  1022  0217                     	;# 
  1023  0217                     	;# 
  1024  0291                     	;# 
  1025  0291                     	;# 
  1026  0292                     	;# 
  1027  0293                     	;# 
  1028  0298                     	;# 
  1029  0298                     	;# 
  1030  0299                     	;# 
  1031  029A                     	;# 
  1032  0394                     	;# 
  1033  0395                     	;# 
  1034  0396                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0015                     	;# 
  1065  0016                     	;# 
  1066  0016                     	;# 
  1067  0017                     	;# 
  1068  0018                     	;# 
  1069  0019                     	;# 
  1070  001A                     	;# 
  1071  001B                     	;# 
  1072  001C                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  008E                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0095                     	;# 
  1080  0096                     	;# 
  1081  0097                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  0116                     	;# 
  1093  0117                     	;# 
  1094  011D                     	;# 
  1095  018C                     	;# 
  1096  018D                     	;# 
  1097  018E                     	;# 
  1098  0191                     	;# 
  1099  0191                     	;# 
  1100  0192                     	;# 
  1101  0193                     	;# 
  1102  0193                     	;# 
  1103  0194                     	;# 
  1104  0195                     	;# 
  1105  0196                     	;# 
  1106  0197                     	;# 
  1107  0199                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019C                     	;# 
  1114  019C                     	;# 
  1115  019D                     	;# 
  1116  019E                     	;# 
  1117  019F                     	;# 
  1118  020D                     	;# 
  1119  0210                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0216                     	;# 
  1132  0216                     	;# 
  1133  0217                     	;# 
  1134  0217                     	;# 
  1135  0291                     	;# 
  1136  0291                     	;# 
  1137  0292                     	;# 
  1138  0293                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  0394                     	;# 
  1144  0395                     	;# 
  1145  0396                     	;# 
  1146  0FE4                     	;# 
  1147  0FE5                     	;# 
  1148  0FE6                     	;# 
  1149  0FE7                     	;# 
  1150  0FE8                     	;# 
  1151  0FE9                     	;# 
  1152  0FEA                     	;# 
  1153  0FEB                     	;# 
  1154  0FED                     	;# 
  1155  0FEE                     	;# 
  1156  0FEF                     	;# 
  1157  0000                     	;# 
  1158  0001                     	;# 
  1159  0002                     	;# 
  1160  0003                     	;# 
  1161  0004                     	;# 
  1162  0005                     	;# 
  1163  0006                     	;# 
  1164  0007                     	;# 
  1165  0008                     	;# 
  1166  0009                     	;# 
  1167  000A                     	;# 
  1168  000B                     	;# 
  1169  000C                     	;# 
  1170  000D                     	;# 
  1171  000E                     	;# 
  1172  0010                     	;# 
  1173  0011                     	;# 
  1174  0012                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  001A                     	;# 
  1182  001B                     	;# 
  1183  001C                     	;# 
  1184  008C                     	;# 
  1185  008D                     	;# 
  1186  008E                     	;# 
  1187  0090                     	;# 
  1188  0091                     	;# 
  1189  0092                     	;# 
  1190  0095                     	;# 
  1191  0096                     	;# 
  1192  0097                     	;# 
  1193  0099                     	;# 
  1194  009A                     	;# 
  1195  009B                     	;# 
  1196  009B                     	;# 
  1197  009C                     	;# 
  1198  009D                     	;# 
  1199  009E                     	;# 
  1200  010C                     	;# 
  1201  010D                     	;# 
  1202  010E                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  011D                     	;# 
  1206  018C                     	;# 
  1207  018D                     	;# 
  1208  018E                     	;# 
  1209  0191                     	;# 
  1210  0191                     	;# 
  1211  0192                     	;# 
  1212  0193                     	;# 
  1213  0193                     	;# 
  1214  0194                     	;# 
  1215  0195                     	;# 
  1216  0196                     	;# 
  1217  0197                     	;# 
  1218  0199                     	;# 
  1219  019A                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019C                     	;# 
  1225  019C                     	;# 
  1226  019D                     	;# 
  1227  019E                     	;# 
  1228  019F                     	;# 
  1229  020D                     	;# 
  1230  0210                     	;# 
  1231  0211                     	;# 
  1232  0211                     	;# 
  1233  0212                     	;# 
  1234  0212                     	;# 
  1235  0213                     	;# 
  1236  0213                     	;# 
  1237  0214                     	;# 
  1238  0214                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0216                     	;# 
  1243  0216                     	;# 
  1244  0217                     	;# 
  1245  0217                     	;# 
  1246  0291                     	;# 
  1247  0291                     	;# 
  1248  0292                     	;# 
  1249  0293                     	;# 
  1250  0298                     	;# 
  1251  0298                     	;# 
  1252  0299                     	;# 
  1253  029A                     	;# 
  1254  0394                     	;# 
  1255  0395                     	;# 
  1256  0396                     	;# 
  1257  0FE4                     	;# 
  1258  0FE5                     	;# 
  1259  0FE6                     	;# 
  1260  0FE7                     	;# 
  1261  0FE8                     	;# 
  1262  0FE9                     	;# 
  1263  0FEA                     	;# 
  1264  0FEB                     	;# 
  1265  0FED                     	;# 
  1266  0FEE                     	;# 
  1267  0FEF                     	;# 
  1268  0000                     	;# 
  1269  0001                     	;# 
  1270  0002                     	;# 
  1271  0003                     	;# 
  1272  0004                     	;# 
  1273  0005                     	;# 
  1274  0006                     	;# 
  1275  0007                     	;# 
  1276  0008                     	;# 
  1277  0009                     	;# 
  1278  000A                     	;# 
  1279  000B                     	;# 
  1280  000C                     	;# 
  1281  000D                     	;# 
  1282  000E                     	;# 
  1283  0010                     	;# 
  1284  0011                     	;# 
  1285  0012                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0016                     	;# 
  1289  0017                     	;# 
  1290  0018                     	;# 
  1291  0019                     	;# 
  1292  001A                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0090                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0095                     	;# 
  1302  0096                     	;# 
  1303  0097                     	;# 
  1304  0099                     	;# 
  1305  009A                     	;# 
  1306  009B                     	;# 
  1307  009B                     	;# 
  1308  009C                     	;# 
  1309  009D                     	;# 
  1310  009E                     	;# 
  1311  010C                     	;# 
  1312  010D                     	;# 
  1313  010E                     	;# 
  1314  0116                     	;# 
  1315  0117                     	;# 
  1316  011D                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0194                     	;# 
  1326  0195                     	;# 
  1327  0196                     	;# 
  1328  0197                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019C                     	;# 
  1336  019C                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019F                     	;# 
  1340  020D                     	;# 
  1341  0210                     	;# 
  1342  0211                     	;# 
  1343  0211                     	;# 
  1344  0212                     	;# 
  1345  0212                     	;# 
  1346  0213                     	;# 
  1347  0213                     	;# 
  1348  0214                     	;# 
  1349  0214                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0216                     	;# 
  1354  0216                     	;# 
  1355  0217                     	;# 
  1356  0217                     	;# 
  1357  0291                     	;# 
  1358  0291                     	;# 
  1359  0292                     	;# 
  1360  0293                     	;# 
  1361  0298                     	;# 
  1362  0298                     	;# 
  1363  0299                     	;# 
  1364  029A                     	;# 
  1365  0394                     	;# 
  1366  0395                     	;# 
  1367  0396                     	;# 
  1368  0FE4                     	;# 
  1369  0FE5                     	;# 
  1370  0FE6                     	;# 
  1371  0FE7                     	;# 
  1372  0FE8                     	;# 
  1373  0FE9                     	;# 
  1374  0FEA                     	;# 
  1375  0FEB                     	;# 
  1376  0FED                     	;# 
  1377  0FEE                     	;# 
  1378  0FEF                     	;# 
  1379  0000                     	;# 
  1380  0001                     	;# 
  1381  0002                     	;# 
  1382  0003                     	;# 
  1383  0004                     	;# 
  1384  0005                     	;# 
  1385  0006                     	;# 
  1386  0007                     	;# 
  1387  0008                     	;# 
  1388  0009                     	;# 
  1389  000A                     	;# 
  1390  000B                     	;# 
  1391  000C                     	;# 
  1392  000D                     	;# 
  1393  000E                     	;# 
  1394  0010                     	;# 
  1395  0011                     	;# 
  1396  0012                     	;# 
  1397  0015                     	;# 
  1398  0016                     	;# 
  1399  0016                     	;# 
  1400  0017                     	;# 
  1401  0018                     	;# 
  1402  0019                     	;# 
  1403  001A                     	;# 
  1404  001B                     	;# 
  1405  001C                     	;# 
  1406  008C                     	;# 
  1407  008D                     	;# 
  1408  008E                     	;# 
  1409  0090                     	;# 
  1410  0091                     	;# 
  1411  0092                     	;# 
  1412  0095                     	;# 
  1413  0096                     	;# 
  1414  0097                     	;# 
  1415  0099                     	;# 
  1416  009A                     	;# 
  1417  009B                     	;# 
  1418  009B                     	;# 
  1419  009C                     	;# 
  1420  009D                     	;# 
  1421  009E                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0116                     	;# 
  1426  0117                     	;# 
  1427  011D                     	;# 
  1428  018C                     	;# 
  1429  018D                     	;# 
  1430  018E                     	;# 
  1431  0191                     	;# 
  1432  0191                     	;# 
  1433  0192                     	;# 
  1434  0193                     	;# 
  1435  0193                     	;# 
  1436  0194                     	;# 
  1437  0195                     	;# 
  1438  0196                     	;# 
  1439  0197                     	;# 
  1440  0199                     	;# 
  1441  019A                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  020D                     	;# 
  1452  0210                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0216                     	;# 
  1465  0216                     	;# 
  1466  0217                     	;# 
  1467  0217                     	;# 
  1468  0291                     	;# 
  1469  0291                     	;# 
  1470  0292                     	;# 
  1471  0293                     	;# 
  1472  0298                     	;# 
  1473  0298                     	;# 
  1474  0299                     	;# 
  1475  029A                     	;# 
  1476  0394                     	;# 
  1477  0395                     	;# 
  1478  0396                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0010                     	;# 
  1506  0011                     	;# 
  1507  0012                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  001A                     	;# 
  1515  001B                     	;# 
  1516  001C                     	;# 
  1517  008C                     	;# 
  1518  008D                     	;# 
  1519  008E                     	;# 
  1520  0090                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0095                     	;# 
  1524  0096                     	;# 
  1525  0097                     	;# 
  1526  0099                     	;# 
  1527  009A                     	;# 
  1528  009B                     	;# 
  1529  009B                     	;# 
  1530  009C                     	;# 
  1531  009D                     	;# 
  1532  009E                     	;# 
  1533  010C                     	;# 
  1534  010D                     	;# 
  1535  010E                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  011D                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020D                     	;# 
  1563  0210                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0291                     	;# 
  1580  0291                     	;# 
  1581  0292                     	;# 
  1582  0293                     	;# 
  1583  0298                     	;# 
  1584  0298                     	;# 
  1585  0299                     	;# 
  1586  029A                     	;# 
  1587  0394                     	;# 
  1588  0395                     	;# 
  1589  0396                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0090                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0095                     	;# 
  1635  0096                     	;# 
  1636  0097                     	;# 
  1637  0099                     	;# 
  1638  009A                     	;# 
  1639  009B                     	;# 
  1640  009B                     	;# 
  1641  009C                     	;# 
  1642  009D                     	;# 
  1643  009E                     	;# 
  1644  010C                     	;# 
  1645  010D                     	;# 
  1646  010E                     	;# 
  1647  0116                     	;# 
  1648  0117                     	;# 
  1649  011D                     	;# 
  1650  018C                     	;# 
  1651  018D                     	;# 
  1652  018E                     	;# 
  1653  0191                     	;# 
  1654  0191                     	;# 
  1655  0192                     	;# 
  1656  0193                     	;# 
  1657  0193                     	;# 
  1658  0194                     	;# 
  1659  0195                     	;# 
  1660  0196                     	;# 
  1661  0197                     	;# 
  1662  0199                     	;# 
  1663  019A                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019C                     	;# 
  1669  019C                     	;# 
  1670  019D                     	;# 
  1671  019E                     	;# 
  1672  019F                     	;# 
  1673  020D                     	;# 
  1674  0210                     	;# 
  1675  0211                     	;# 
  1676  0211                     	;# 
  1677  0212                     	;# 
  1678  0212                     	;# 
  1679  0213                     	;# 
  1680  0213                     	;# 
  1681  0214                     	;# 
  1682  0214                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0216                     	;# 
  1687  0216                     	;# 
  1688  0217                     	;# 
  1689  0217                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0298                     	;# 
  1695  0298                     	;# 
  1696  0299                     	;# 
  1697  029A                     	;# 
  1698  0394                     	;# 
  1699  0395                     	;# 
  1700  0396                     	;# 
  1701  0FE4                     	;# 
  1702  0FE5                     	;# 
  1703  0FE6                     	;# 
  1704  0FE7                     	;# 
  1705  0FE8                     	;# 
  1706  0FE9                     	;# 
  1707  0FEA                     	;# 
  1708  0FEB                     	;# 
  1709  0FED                     	;# 
  1710  0FEE                     	;# 
  1711  0FEF                     	;# 
  1712  0000                     	;# 
  1713  0001                     	;# 
  1714  0002                     	;# 
  1715  0003                     	;# 
  1716  0004                     	;# 
  1717  0005                     	;# 
  1718  0006                     	;# 
  1719  0007                     	;# 
  1720  0008                     	;# 
  1721  0009                     	;# 
  1722  000A                     	;# 
  1723  000B                     	;# 
  1724  000C                     	;# 
  1725  000D                     	;# 
  1726  000E                     	;# 
  1727  0010                     	;# 
  1728  0011                     	;# 
  1729  0012                     	;# 
  1730  0015                     	;# 
  1731  0016                     	;# 
  1732  0016                     	;# 
  1733  0017                     	;# 
  1734  0018                     	;# 
  1735  0019                     	;# 
  1736  001A                     	;# 
  1737  001B                     	;# 
  1738  001C                     	;# 
  1739  008C                     	;# 
  1740  008D                     	;# 
  1741  008E                     	;# 
  1742  0090                     	;# 
  1743  0091                     	;# 
  1744  0092                     	;# 
  1745  0095                     	;# 
  1746  0096                     	;# 
  1747  0097                     	;# 
  1748  0099                     	;# 
  1749  009A                     	;# 
  1750  009B                     	;# 
  1751  009B                     	;# 
  1752  009C                     	;# 
  1753  009D                     	;# 
  1754  009E                     	;# 
  1755  010C                     	;# 
  1756  010D                     	;# 
  1757  010E                     	;# 
  1758  0116                     	;# 
  1759  0117                     	;# 
  1760  011D                     	;# 
  1761  018C                     	;# 
  1762  018D                     	;# 
  1763  018E                     	;# 
  1764  0191                     	;# 
  1765  0191                     	;# 
  1766  0192                     	;# 
  1767  0193                     	;# 
  1768  0193                     	;# 
  1769  0194                     	;# 
  1770  0195                     	;# 
  1771  0196                     	;# 
  1772  0197                     	;# 
  1773  0199                     	;# 
  1774  019A                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019C                     	;# 
  1780  019C                     	;# 
  1781  019D                     	;# 
  1782  019E                     	;# 
  1783  019F                     	;# 
  1784  020D                     	;# 
  1785  0210                     	;# 
  1786  0211                     	;# 
  1787  0211                     	;# 
  1788  0212                     	;# 
  1789  0212                     	;# 
  1790  0213                     	;# 
  1791  0213                     	;# 
  1792  0214                     	;# 
  1793  0214                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0216                     	;# 
  1798  0216                     	;# 
  1799  0217                     	;# 
  1800  0217                     	;# 
  1801  0291                     	;# 
  1802  0291                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0298                     	;# 
  1806  0298                     	;# 
  1807  0299                     	;# 
  1808  029A                     	;# 
  1809  0394                     	;# 
  1810  0395                     	;# 
  1811  0396                     	;# 
  1812  0FE4                     	;# 
  1813  0FE5                     	;# 
  1814  0FE6                     	;# 
  1815  0FE7                     	;# 
  1816  0FE8                     	;# 
  1817  0FE9                     	;# 
  1818  0FEA                     	;# 
  1819  0FEB                     	;# 
  1820  0FED                     	;# 
  1821  0FEE                     	;# 
  1822  0FEF                     	;# 
  1823  0000                     	;# 
  1824  0001                     	;# 
  1825  0002                     	;# 
  1826  0003                     	;# 
  1827  0004                     	;# 
  1828  0005                     	;# 
  1829  0006                     	;# 
  1830  0007                     	;# 
  1831  0008                     	;# 
  1832  0009                     	;# 
  1833  000A                     	;# 
  1834  000B                     	;# 
  1835  000C                     	;# 
  1836  000D                     	;# 
  1837  000E                     	;# 
  1838  0010                     	;# 
  1839  0011                     	;# 
  1840  0012                     	;# 
  1841  0015                     	;# 
  1842  0016                     	;# 
  1843  0016                     	;# 
  1844  0017                     	;# 
  1845  0018                     	;# 
  1846  0019                     	;# 
  1847  001A                     	;# 
  1848  001B                     	;# 
  1849  001C                     	;# 
  1850  008C                     	;# 
  1851  008D                     	;# 
  1852  008E                     	;# 
  1853  0090                     	;# 
  1854  0091                     	;# 
  1855  0092                     	;# 
  1856  0095                     	;# 
  1857  0096                     	;# 
  1858  0097                     	;# 
  1859  0099                     	;# 
  1860  009A                     	;# 
  1861  009B                     	;# 
  1862  009B                     	;# 
  1863  009C                     	;# 
  1864  009D                     	;# 
  1865  009E                     	;# 
  1866  010C                     	;# 
  1867  010D                     	;# 
  1868  010E                     	;# 
  1869  0116                     	;# 
  1870  0117                     	;# 
  1871  011D                     	;# 
  1872  018C                     	;# 
  1873  018D                     	;# 
  1874  018E                     	;# 
  1875  0191                     	;# 
  1876  0191                     	;# 
  1877  0192                     	;# 
  1878  0193                     	;# 
  1879  0193                     	;# 
  1880  0194                     	;# 
  1881  0195                     	;# 
  1882  0196                     	;# 
  1883  0197                     	;# 
  1884  0199                     	;# 
  1885  019A                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019C                     	;# 
  1891  019C                     	;# 
  1892  019D                     	;# 
  1893  019E                     	;# 
  1894  019F                     	;# 
  1895  020D                     	;# 
  1896  0210                     	;# 
  1897  0211                     	;# 
  1898  0211                     	;# 
  1899  0212                     	;# 
  1900  0212                     	;# 
  1901  0213                     	;# 
  1902  0213                     	;# 
  1903  0214                     	;# 
  1904  0214                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0216                     	;# 
  1909  0216                     	;# 
  1910  0217                     	;# 
  1911  0217                     	;# 
  1912  0291                     	;# 
  1913  0291                     	;# 
  1914  0292                     	;# 
  1915  0293                     	;# 
  1916  0298                     	;# 
  1917  0298                     	;# 
  1918  0299                     	;# 
  1919  029A                     	;# 
  1920  0394                     	;# 
  1921  0395                     	;# 
  1922  0396                     	;# 
  1923  0FE4                     	;# 
  1924  0FE5                     	;# 
  1925  0FE6                     	;# 
  1926  0FE7                     	;# 
  1927  0FE8                     	;# 
  1928  0FE9                     	;# 
  1929  0FEA                     	;# 
  1930  0FEB                     	;# 
  1931  0FED                     	;# 
  1932  0FEE                     	;# 
  1933  0FEF                     	;# 
  1934  0000                     	;# 
  1935  0001                     	;# 
  1936  0002                     	;# 
  1937  0003                     	;# 
  1938  0004                     	;# 
  1939  0005                     	;# 
  1940  0006                     	;# 
  1941  0007                     	;# 
  1942  0008                     	;# 
  1943  0009                     	;# 
  1944  000A                     	;# 
  1945  000B                     	;# 
  1946  000C                     	;# 
  1947  000D                     	;# 
  1948  000E                     	;# 
  1949  0010                     	;# 
  1950  0011                     	;# 
  1951  0012                     	;# 
  1952  0015                     	;# 
  1953  0016                     	;# 
  1954  0016                     	;# 
  1955  0017                     	;# 
  1956  0018                     	;# 
  1957  0019                     	;# 
  1958  001A                     	;# 
  1959  001B                     	;# 
  1960  001C                     	;# 
  1961  008C                     	;# 
  1962  008D                     	;# 
  1963  008E                     	;# 
  1964  0090                     	;# 
  1965  0091                     	;# 
  1966  0092                     	;# 
  1967  0095                     	;# 
  1968  0096                     	;# 
  1969  0097                     	;# 
  1970  0099                     	;# 
  1971  009A                     	;# 
  1972  009B                     	;# 
  1973  009B                     	;# 
  1974  009C                     	;# 
  1975  009D                     	;# 
  1976  009E                     	;# 
  1977  010C                     	;# 
  1978  010D                     	;# 
  1979  010E                     	;# 
  1980  0116                     	;# 
  1981  0117                     	;# 
  1982  011D                     	;# 
  1983  018C                     	;# 
  1984  018D                     	;# 
  1985  018E                     	;# 
  1986  0191                     	;# 
  1987  0191                     	;# 
  1988  0192                     	;# 
  1989  0193                     	;# 
  1990  0193                     	;# 
  1991  0194                     	;# 
  1992  0195                     	;# 
  1993  0196                     	;# 
  1994  0197                     	;# 
  1995  0199                     	;# 
  1996  019A                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019C                     	;# 
  2002  019C                     	;# 
  2003  019D                     	;# 
  2004  019E                     	;# 
  2005  019F                     	;# 
  2006  020D                     	;# 
  2007  0210                     	;# 
  2008  0211                     	;# 
  2009  0211                     	;# 
  2010  0212                     	;# 
  2011  0212                     	;# 
  2012  0213                     	;# 
  2013  0213                     	;# 
  2014  0214                     	;# 
  2015  0214                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0216                     	;# 
  2020  0216                     	;# 
  2021  0217                     	;# 
  2022  0217                     	;# 
  2023  0291                     	;# 
  2024  0291                     	;# 
  2025  0292                     	;# 
  2026  0293                     	;# 
  2027  0298                     	;# 
  2028  0298                     	;# 
  2029  0299                     	;# 
  2030  029A                     	;# 
  2031  0394                     	;# 
  2032  0395                     	;# 
  2033  0396                     	;# 
  2034  0FE4                     	;# 
  2035  0FE5                     	;# 
  2036  0FE6                     	;# 
  2037  0FE7                     	;# 
  2038  0FE8                     	;# 
  2039  0FE9                     	;# 
  2040  0FEA                     	;# 
  2041  0FEB                     	;# 
  2042  0FED                     	;# 
  2043  0FEE                     	;# 
  2044  0FEF                     	;# 
  2045  0000                     	;# 
  2046  0001                     	;# 
  2047  0002                     	;# 
  2048  0003                     	;# 
  2049  0004                     	;# 
  2050  0005                     	;# 
  2051  0006                     	;# 
  2052  0007                     	;# 
  2053  0008                     	;# 
  2054  0009                     	;# 
  2055  000A                     	;# 
  2056  000B                     	;# 
  2057  000C                     	;# 
  2058  000D                     	;# 
  2059  000E                     	;# 
  2060  0010                     	;# 
  2061  0011                     	;# 
  2062  0012                     	;# 
  2063  0015                     	;# 
  2064  0016                     	;# 
  2065  0016                     	;# 
  2066  0017                     	;# 
  2067  0018                     	;# 
  2068  0019                     	;# 
  2069  001A                     	;# 
  2070  001B                     	;# 
  2071  001C                     	;# 
  2072  008C                     	;# 
  2073  008D                     	;# 
  2074  008E                     	;# 
  2075  0090                     	;# 
  2076  0091                     	;# 
  2077  0092                     	;# 
  2078  0095                     	;# 
  2079  0096                     	;# 
  2080  0097                     	;# 
  2081  0099                     	;# 
  2082  009A                     	;# 
  2083  009B                     	;# 
  2084  009B                     	;# 
  2085  009C                     	;# 
  2086  009D                     	;# 
  2087  009E                     	;# 
  2088  010C                     	;# 
  2089  010D                     	;# 
  2090  010E                     	;# 
  2091  0116                     	;# 
  2092  0117                     	;# 
  2093  011D                     	;# 
  2094  018C                     	;# 
  2095  018D                     	;# 
  2096  018E                     	;# 
  2097  0191                     	;# 
  2098  0191                     	;# 
  2099  0192                     	;# 
  2100  0193                     	;# 
  2101  0193                     	;# 
  2102  0194                     	;# 
  2103  0195                     	;# 
  2104  0196                     	;# 
  2105  0197                     	;# 
  2106  0199                     	;# 
  2107  019A                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019C                     	;# 
  2113  019C                     	;# 
  2114  019D                     	;# 
  2115  019E                     	;# 
  2116  019F                     	;# 
  2117  020D                     	;# 
  2118  0210                     	;# 
  2119  0211                     	;# 
  2120  0211                     	;# 
  2121  0212                     	;# 
  2122  0212                     	;# 
  2123  0213                     	;# 
  2124  0213                     	;# 
  2125  0214                     	;# 
  2126  0214                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0216                     	;# 
  2131  0216                     	;# 
  2132  0217                     	;# 
  2133  0217                     	;# 
  2134  0291                     	;# 
  2135  0291                     	;# 
  2136  0292                     	;# 
  2137  0293                     	;# 
  2138  0298                     	;# 
  2139  0298                     	;# 
  2140  0299                     	;# 
  2141  029A                     	;# 
  2142  0394                     	;# 
  2143  0395                     	;# 
  2144  0396                     	;# 
  2145  0FE4                     	;# 
  2146  0FE5                     	;# 
  2147  0FE6                     	;# 
  2148  0FE7                     	;# 
  2149  0FE8                     	;# 
  2150  0FE9                     	;# 
  2151  0FEA                     	;# 
  2152  0FEB                     	;# 
  2153  0FED                     	;# 
  2154  0FEE                     	;# 
  2155  0FEF                     	;# 
  2156                           
  2157                           	psect	idataBANK4
  2158  1EBA                     __pidataBANK4:	
  2159                           
  2160                           ;initializer for __product
  2161  1EBA  3463               	retlw	99
  2162  1EBB  3402               	retlw	2
  2163  1EBC  3400               	retlw	0
  2164  1EBD  3400               	retlw	0
  2165  1EBE  3400               	retlw	0
  2166  1EBF  3400               	retlw	0
  2167  1EC0  3400               	retlw	0
  2168  1EC1  3400               	retlw	0
  2169  1EC2  3400               	retlw	0
  2170  1EC3  3400               	retlw	0
  2171  1EC4  3400               	retlw	0
  2172  1EC5  3400               	retlw	0
  2173  1EC6  34FF               	retlw	255
  2174  1EC7  34FF               	retlw	255
  2175  1EC8  34FF               	retlw	255
  2176  1EC9  3400               	retlw	0
  2177  1ECA  3400               	retlw	0
  2178  1ECB  3400               	retlw	0
  2179  1ECC  3400               	retlw	0
  2180  1ECD  3400               	retlw	0
  2181  1ECE  3400               	retlw	0
  2182  1ECF  3400               	retlw	0
  2183  1ED0  3400               	retlw	0
  2184  1ED1  3400               	retlw	0
  2185  1ED2  3400               	retlw	0
  2186  1ED3  3400               	retlw	0
  2187  1ED4  3400               	retlw	0
  2188  1ED5  3400               	retlw	0
  2189  1ED6  3400               	retlw	0
  2190  1ED7  3400               	retlw	0
  2191  1ED8  3400               	retlw	0
  2192  1ED9  3400               	retlw	0
  2193                           
  2194                           	psect	stringtext
  2195  1000                     __pstringtext:	
  2196  1000                     _CC2500_registers_address:	
  2197  1000  3403               	retlw	3
  2198  1001  3416               	retlw	22
  2199  1002  3417               	retlw	23
  2200  1003  341E               	retlw	30
  2201  1004  341F               	retlw	31
  2202  1005  3420               	retlw	32
  2203  1006  342A               	retlw	42
  2204  1007  342B               	retlw	43
  2205  1008  340B               	retlw	11
  2206  1009  340C               	retlw	12
  2207  100A  340D               	retlw	13
  2208  100B  340E               	retlw	14
  2209  100C  340F               	retlw	15
  2210  100D  3410               	retlw	16
  2211  100E  3411               	retlw	17
  2212  100F  3412               	retlw	18
  2213  1010  3413               	retlw	19
  2214  1011  3414               	retlw	20
  2215  1012  340A               	retlw	10
  2216  1013  3415               	retlw	21
  2217  1014  3421               	retlw	33
  2218  1015  3422               	retlw	34
  2219  1016  3418               	retlw	24
  2220  1017  3419               	retlw	25
  2221  1018  341A               	retlw	26
  2222  1019  341B               	retlw	27
  2223  101A  341C               	retlw	28
  2224  101B  341D               	retlw	29
  2225  101C  3423               	retlw	35
  2226  101D  3424               	retlw	36
  2227  101E  3425               	retlw	37
  2228  101F  3426               	retlw	38
  2229  1020  3429               	retlw	41
  2230  1021  342C               	retlw	44
  2231  1022  342D               	retlw	45
  2232  1023  342E               	retlw	46
  2233  1024  3400               	retlw	0
  2234  1025  3401               	retlw	1
  2235  1026  3402               	retlw	2
  2236  1027  3407               	retlw	7
  2237  1028  3408               	retlw	8
  2238  1029  3409               	retlw	9
  2239  102A  3406               	retlw	6
  2240  102B  3404               	retlw	4
  2241  102C  3405               	retlw	5
  2242  102D  3427               	retlw	39
  2243  102E  3428               	retlw	40
  2244  102F                     __end_of_CC2500_registers_address:	
  2245  102F                     _CC2500_rfSettings:	
  2246  102F  3407               	retlw	7
  2247  1030  3407               	retlw	7
  2248  1031  3430               	retlw	48
  2249  1032  3487               	retlw	135
  2250  1033  346B               	retlw	107
  2251  1034  34F8               	retlw	248
  2252  1035  347F               	retlw	127
  2253  1036  343F               	retlw	63
  2254  1037  3409               	retlw	9
  2255  1038  3400               	retlw	0
  2256  1039  345C               	retlw	92
  2257  103A  34A7               	retlw	167
  2258  103B  3462               	retlw	98
  2259  103C  3486               	retlw	134
  2260  103D  3483               	retlw	131
  2261  103E  3403               	retlw	3
  2262  103F  3422               	retlw	34
  2263  1040  34F8               	retlw	248
  2264  1041  3400               	retlw	0
  2265  1042  3444               	retlw	68
  2266  1043  34B6               	retlw	182
  2267  1044  3410               	retlw	16
  2268  1045  3418               	retlw	24
  2269  1046  341D               	retlw	29
  2270  1047  341C               	retlw	28
  2271  1048  34C7               	retlw	199
  2272  1049  3400               	retlw	0
  2273  104A  34B2               	retlw	178
  2274  104B  34EA               	retlw	234
  2275  104C  340A               	retlw	10
  2276  104D  3400               	retlw	0
  2277  104E  3411               	retlw	17
  2278  104F  3459               	retlw	89
  2279  1050  3488               	retlw	136
  2280  1051  3431               	retlw	49
  2281  1052  340B               	retlw	11
  2282  1053  342F               	retlw	47
  2283  1054  342E               	retlw	46
  2284  1055  3406               	retlw	6
  2285  1056  3404               	retlw	4
  2286  1057  3405               	retlw	5
  2287  1058  3400               	retlw	0
  2288  1059  3430               	retlw	48
  2289  105A  34D3               	retlw	211
  2290  105B  3491               	retlw	145
  2291  105C  3441               	retlw	65
  2292  105D  3400               	retlw	0
  2293  105E                     __end_of_CC2500_rfSettings:	
  2294  105E                     _CC2500_patable_vaule:	
  2295  105E  34FE               	retlw	254
  2296  105F  34FE               	retlw	254
  2297  1060  34FE               	retlw	254
  2298  1061  34FE               	retlw	254
  2299  1062  34FE               	retlw	254
  2300  1063  34FE               	retlw	254
  2301  1064  34FE               	retlw	254
  2302  1065  34FE               	retlw	254
  2303  1066                     __end_of_CC2500_patable_vaule:	
  2304                           
  2305                           	psect	nvBANK0
  2306  006E                     __pnvBANK0:	
  2307  006E                     _product:	
  2308  006E                     	ds	1
  2309  000C                     _PORTA	set	12
  2310  000D                     _PORTB	set	13
  2311  000E                     _PORTC	set	14
  2312  0018                     _T1CON	set	24
  2313  0017                     _TMR1H	set	23
  2314  0016                     _TMR1L	set	22
  2315  005F                     _GIE	set	95
  2316  005B                     _IOCIE	set	91
  2317  0058                     _IOCIF	set	88
  2318  005E                     _PEIE	set	94
  2319  0060                     _RA0	set	96
  2320  0063                     _RA3	set	99
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006C                     _RB4	set	108
  2329  006D                     _RB5	set	109
  2330  0070                     _RC0	set	112
  2331  0071                     _RC1	set	113
  2332  0072                     _RC2	set	114
  2333  0074                     _RC4	set	116
  2334  0075                     _RC5	set	117
  2335  0077                     _RC7	set	119
  2336  0088                     _TMR1IF	set	136
  2337  009D                     _ADCON0	set	157
  2338  009E                     _ADCON1	set	158
  2339  009C                     _ADRESH	set	156
  2340  009B                     _ADRESL	set	155
  2341  0099                     _OSCCON	set	153
  2342  008C                     _TRISA	set	140
  2343  008D                     _TRISB	set	141
  2344  008E                     _TRISC	set	142
  2345  0097                     _WDTCON	set	151
  2346  04E9                     _GO_nDONE	set	1257
  2347  0488                     _TMR1IE	set	1160
  2348  0117                     _FVRCON	set	279
  2349  010C                     _LATA	set	268
  2350  010D                     _LATB	set	269
  2351  010E                     _LATC	set	270
  2352  018C                     _ANSELA	set	396
  2353  018D                     _ANSELB	set	397
  2354  018E                     _ANSELC	set	398
  2355  0192                     _PMADRH	set	402
  2356  0191                     _PMADRL	set	401
  2357  0196                     _PMCON2	set	406
  2358  0194                     _PMDATH	set	404
  2359  0193                     _PMDATL	set	403
  2360  0CAE                     _CFGS	set	3246
  2361  0CAC                     _FREE	set	3244
  2362  0CAD                     _LWLO	set	3245
  2363  0CA8                     _RD	set	3240
  2364  0CA9                     _WR	set	3241
  2365  0CAA                     _WREN	set	3242
  2366  1069                     _WPUB1	set	4201
  2367  106A                     _WPUB2	set	4202
  2368  0396                     _IOCBF	set	918
  2369  0395                     _IOCBN	set	917
  2370  0394                     _IOCBP	set	916
  2371  1CB2                     _IOCBF2	set	7346
  2372                           
  2373                           ; #config settings
  2374  0000                     
  2375                           	psect	cinit
  2376  0015                     start_initialization:	
  2377  0015                     __initialization:	
  2378                           
  2379                           ; Clear objects allocated to BITCOMMON
  2380  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2381                           
  2382                           ; Clear objects allocated to COMMON
  2383  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2384  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2385  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2386  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2387  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK0
  2390  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  001C  30A0               	movlw	low __pbssBANK1
  2394  001D  0084               	movwf	4
  2395  001E  3000               	movlw	high __pbssBANK1
  2396  001F  0085               	movwf	5
  2397  0020  3049               	movlw	73
  2398  0021  319A  22D0  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  0024  3020               	movlw	low __pbssBANK2
  2402  0025  0084               	movwf	4
  2403  0026  3001               	movlw	high __pbssBANK2
  2404  0027  0085               	movwf	5
  2405  0028  3049               	movlw	73
  2406  0029  319A  22D0  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  002C  30A0               	movlw	low __pbssBANK3
  2410  002D  0084               	movwf	4
  2411  002E  3001               	movlw	high __pbssBANK3
  2412  002F  0085               	movwf	5
  2413  0030  304E               	movlw	78
  2414  0031  319A  22D0  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK4
  2417  0034  3020               	movlw	low __pbssBANK4
  2418  0035  0084               	movwf	4
  2419  0036  3002               	movlw	high __pbssBANK4
  2420  0037  0085               	movwf	5
  2421  0038  3025               	movlw	37
  2422  0039  319A  22D0  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Initialize objects allocated to BANK4
  2425  003C  30BA               	movlw	low __pidataBANK4
  2426  003D  0084               	movwf	4
  2427  003E  309E               	movlw	(high __pidataBANK4)| (0+128)
  2428  003F  0085               	movwf	5
  2429  0040  3045               	movlw	low __pdataBANK4
  2430  0041  0086               	movwf	6
  2431  0042  3002               	movlw	high __pdataBANK4
  2432  0043  0087               	movwf	7
  2433  0044  3020               	movlw	32
  2434  0045  319A  22CA         	fcall	init_ram
  2435  0047                     end_of_initialization:	
  2436                           ;End of C runtime variable initialization code
  2437                           
  2438  0047                     __end_of__initialization:	
  2439  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2440  0048  0020               	movlb	0
  2441  0049  3195  2DE4         	ljmp	_main	;jump to C main() function
  2442                           
  2443                           	psect	bitbssCOMMON
  2444  03E8                     __pbitbssCOMMON:	
  2445  03E8                     _Receive_OK:	
  2446  03E8                     	ds	1
  2447  03E9                     _Transceive_OK:	
  2448  03E9                     	ds	1
  2449                           
  2450                           	psect	bssCOMMON
  2451  0078                     __pbssCOMMON:	
  2452  0078                     _DelayOff:	
  2453  0078                     	ds	1
  2454  0079                     _DimmerLightsIntr:	
  2455  0079                     	ds	1
  2456  007A                     _DimmerLightsIntrIOC:	
  2457  007A                     	ds	1
  2458  007B                     _LED:	
  2459  007B                     	ds	1
  2460  007C                     _Sw:	
  2461  007C                     	ds	1
  2462                           
  2463                           	psect	bssBANK0
  2464  006F                     __pbssBANK0:	
  2465  006F                     _DimmerLights:	
  2466  006F                     	ds	1
  2467                           
  2468                           	psect	bssBANK1
  2469  00A0                     __pbssBANK1:	
  2470  00A0                     _myMain:	
  2471  00A0                     	ds	15
  2472  00AF                     _Buz1:	
  2473  00AF                     	ds	12
  2474  00BB                     _RF1:	
  2475  00BB                     	ds	12
  2476  00C7                     _Timer1:	
  2477  00C7                     	ds	3
  2478  00CA                     _WDT:	
  2479  00CA                     	ds	2
  2480  00CC                     _CRC:	
  2481  00CC                     	ds	1
  2482  00CD                     _DimmerLights11:	
  2483  00CD                     	ds	1
  2484  00CE                     _DimmerLights22:	
  2485  00CE                     	ds	1
  2486  00CF                     _RSSI:	
  2487  00CF                     	ds	1
  2488  00D0                     _Rx_Length:	
  2489  00D0                     	ds	1
  2490  00D1                     _SPI0Buffer:	
  2491  00D1                     	ds	1
  2492  00D2                     _SwDetect:	
  2493  00D2                     	ds	1
  2494  00D3                     _Tx_Length:	
  2495  00D3                     	ds	1
  2496  00D4                     _r_address:	
  2497  00D4                     	ds	1
  2498  00D5                     _r_data:	
  2499  00D5                     	ds	1
  2500  00D6                     _s_data:	
  2501  00D6                     	ds	1
  2502  00D7                     _Temp:	
  2503  00D7                     	ds	18
  2504                           
  2505                           	psect	bssBANK2
  2506  0120                     __pbssBANK2:	
  2507  0120                     _Dimmer:	
  2508  0120                     	ds	3
  2509  0123                     _RF_Count:	
  2510  0123                     	ds	2
  2511  0125                     _Load:	
  2512  0125                     	ds	46
  2513  0153                     _DlySw1:	
  2514  0153                     	ds	5
  2515  0158                     _DlySw2:	
  2516  0158                     	ds	5
  2517  015D                     _VarErrLED:	
  2518  015D                     	ds	4
  2519  0161                     _VarLED1:	
  2520  0161                     	ds	4
  2521  0165                     _VarLED2:	
  2522  0165                     	ds	4
  2523                           
  2524                           	psect	bssBANK3
  2525  01A0                     __pbssBANK3:	
  2526  01A0                     _RF_Data:	
  2527  01A0                     	ds	30
  2528  01BE                     _DimmerLights1:	
  2529  01BE                     	ds	15
  2530  01CD                     _DimmerLights2:	
  2531  01CD                     	ds	15
  2532  01DC                     _Sw1:	
  2533  01DC                     	ds	9
  2534  01E5                     _Sw2:	
  2535  01E5                     	ds	9
  2536                           
  2537                           	psect	bssBANK4
  2538  0220                     __pbssBANK4:	
  2539  0220                     _Memory:	
  2540  0220                     	ds	37
  2541                           
  2542                           	psect	dataBANK4
  2543  0245                     __pdataBANK4:	
  2544  0245                     __product:	
  2545  0245                     	ds	32
  2546                           
  2547                           	psect	clrtext
  2548  1AD0                     clear_ram0:	
  2549                           ;	Called with FSR0 containing the base address, and
  2550                           ;	WREG with the size to clear
  2551                           
  2552  1AD0  0064               	clrwdt	;clear the watchdog before getting into this loop
  2553  1AD1                     clrloop0:	
  2554  1AD1  0180               	clrf	0	;clear RAM location pointed to by FSR
  2555  1AD2  3101               	addfsr 0,1
  2556  1AD3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2557  1AD4  2AD1               	goto	clrloop0	;have we reached the end yet?
  2558  1AD5  3400               	retlw	0	;all done for this memory range, return
  2559                           
  2560                           	psect	inittext
  2561  1ACA                     init_ram:	
  2562  1ACA  00FE               	movwf	126
  2563  1ACB                     initloop:	
  2564  1ACB  0012               	moviw fsr0++
  2565  1ACC  001E               	movwi fsr1++
  2566  1ACD  0BFE               	decfsz	126,f
  2567  1ACE  2ACB               	goto	initloop
  2568  1ACF  3400               	retlw	0
  2569                           
  2570                           	psect	cstackBANK1
  2571  00E9                     __pcstackBANK1:	
  2572  00E9                     setRF_Main@loop_f:	
  2573                           
  2574                           ; 1 bytes @ 0x0
  2575  00E9                     	ds	1
  2576  00EA                     setRF_Main@Receive_OK:	
  2577                           
  2578                           ; 1 bytes @ 0x1
  2579  00EA                     	ds	1
  2580  00EB                     setRF_Main@error:	
  2581                           
  2582                           ; 1 bytes @ 0x2
  2583  00EB                     	ds	1
  2584  00EC                     ?_main:	
  2585  00EC                     main@argc:	
  2586                           ; 2 bytes @ 0x3
  2587                           
  2588                           
  2589                           ; 2 bytes @ 0x3
  2590  00EC                     	ds	2
  2591  00EE                     main@argv:	
  2592                           
  2593                           ; 2 bytes @ 0x5
  2594  00EE                     	ds	2
  2595                           
  2596                           	psect	cstackCOMMON
  2597  0070                     __pcstackCOMMON:	
  2598  0070                     ?_Timeout_Counter:	
  2599  0070                     ?_set_TimeoutCleared:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_WriteByte:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteCommand:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadStatus:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadByte:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_PowerRST:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitSetREG:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitPATable:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearTXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearRXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_FrequencyCabr:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_SIDLEMode:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Initialization:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_ErrorClose:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_Dimmer_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Line:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setTxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setLED_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Fosc_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_IO_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_TMR1_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_ADC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IOC_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_WDT_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR1_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Write:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Flash_Memory_Modify:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_WDT_Clearing:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setLoad_AH_AL_Restore:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setTemp_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setTemp_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setRF_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setRF_Main:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_RF_RxDisable:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_getRxData:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setLog_Code:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setControl_Lights_Table:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setRFSW_Control:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setRFSW_AdjControl:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setRF_DimmerValue:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setSw_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setMain_Exception:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setSw_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_myMain_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_my_MainTimer:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Buzzer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Buzzer_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_TxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_CC2500_RxData:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_CC2500_PowerOnInitial:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOffPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayOff_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayOff_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DimmerIntrIOCPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ??_DimmerIntrIOCPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DimmerIntrPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ??_DimmerIntrPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setDimmerLights_IntrControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLightsPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_Main:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_SwOn:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_SwOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_AdjControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_AdjRF:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LedPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_LED_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Mcu_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_ISR:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerReClock:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Unlock:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Flash_Memory_Erasing:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setMemory_Modify:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setMemory_LoopSave:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_WDT_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Load_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_getLoad_AD:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Load_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Temp_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_getTemp_AD:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Temp_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_RF_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_RF_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_setRF_Learn:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_TouchPower:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_SwPointSelect:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_Switch_Initialization:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_Switch_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_DelayTimejudge:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_getMain_All_Error_Status:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getLoad_OK:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_LightsStatus:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_setPercentValue:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getPercentValue:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_Flash_Memory_Read:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_LoadOK:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getMain_Lights_Count:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getRF_KeyStatus:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getSw_KeyStatus:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDelayOff_GO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerLights_Status:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getAll_DimmerLights_AdjGO:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_LoadOK:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerLights_Line:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x0
  2940  0070                     	ds	1
  2941  0071                     DimmerIntrIOCPointSelect@lights:	
  2942  0071                     DimmerIntrPointSelect@lights:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x1
  2947  0071                     	ds	1
  2948  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2949  0072                     ??_setDimmerLights_IntrControl:	
  2950                           ; 0 bytes @ 0x2
  2951                           
  2952  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x2
  2957  0072                     	ds	1
  2958  0073                     ??_IOC_ISR:	
  2959  0073                     ??_setDimmerReClock:	
  2960                           ; 0 bytes @ 0x3
  2961                           
  2962                           
  2963                           ; 0 bytes @ 0x3
  2964  0073                     	ds	3
  2965  0076                     setDimmerLights_IntrControl@lights:	
  2966                           
  2967                           ; 1 bytes @ 0x6
  2968  0076                     	ds	1
  2969  0077                     ??_TMR1_ISR:	
  2970  0077                     ??_ISR:	
  2971                           ; 0 bytes @ 0x7
  2972                           
  2973                           
  2974                           ; 0 bytes @ 0x7
  2975  0077                     	ds	1
  2976                           
  2977                           	psect	cstackBANK0
  2978  0020                     __pcstackBANK0:	
  2979  0020                     ??_Timeout_Counter:	
  2980  0020                     ??_set_TimeoutCleared:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_CC2500_WriteByte:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_CC2500_ReadByte:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ?_DelayTime_1us:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_Dimmer_Initialization:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_getMain_All_Error_Status:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_getLoad_OK:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_setDimmerLights_Line:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ?_setRF_DimmerLights:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_setTxData:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_Fosc_Set:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_IO_Set:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_TMR1_Set:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_ADC_Set:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_IOC_Set:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_WDT_Set:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_Flash_Memory_Read:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ?_setMemory_Data:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_Flash_Memory_Write:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_WDT_Clearing:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_setLoad_AH_AL_Restore:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_getMain_Lights_Count:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_setTemp_Initialization:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_setRF_Initialization:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_getRF_KeyStatus:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_getSw_KeyStatus:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_myMain_Initialization:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Buzzer_Initialization:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Buzzer_Main:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_DelayOffPointSelect:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_DimmerLightsPointSelect:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_getAll_DimmerLights_AdjGO:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getDimmer_LoadOK:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_getDimmerLights_Line:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_LedPointSelect:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_Flash_Memory_Unlock:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_Flash_Memory_Erasing:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_setMemory_Modify:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_setMemory_LoopSave:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_WDT_Main:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_Temp_Initialization:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_setRF_Learn:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_TouchPower:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_SwPointSelect:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?___bmul:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ?_getBuz_GO:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     ?_getAD:	
  3119                           ; 2 bytes @ 0x0
  3120                           
  3121  0020                     ?___awdiv:	
  3122                           ; 2 bytes @ 0x0
  3123                           
  3124  0020                     ?___lwdiv:	
  3125                           ; 2 bytes @ 0x0
  3126                           
  3127  0020                     ?___ftpack:	
  3128                           ; 2 bytes @ 0x0
  3129                           
  3130  0020                     getDimmer_LoadOK@status:	
  3131                           ; 3 bytes @ 0x0
  3132                           
  3133  0020                     setDimmerLights_Line@lights:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0020                     getAD@adcon1:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0020                     setMemory_Data@data:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0020                     getLoad_OK@ok:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0020                     setRF_DimmerLights@on:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0020                     getMain_Lights_Count@count:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0020                     ___bmul@multiplicand:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0020                     DelayTime_1us@count:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0020                     ___awdiv@divisor:	
  3158                           ; 2 bytes @ 0x0
  3159                           
  3160  0020                     ___lwdiv@divisor:	
  3161                           ; 2 bytes @ 0x0
  3162                           
  3163  0020                     ___ftpack@arg:	
  3164                           ; 2 bytes @ 0x0
  3165                           
  3166                           
  3167                           ; 3 bytes @ 0x0
  3168  0020                     	ds	1
  3169  0021                     ??_setRF_DimmerLights:	
  3170  0021                     ??_setMemory_Data:	
  3171                           ; 0 bytes @ 0x1
  3172                           
  3173  0021                     ??_getMain_LoadOK:	
  3174                           ; 0 bytes @ 0x1
  3175                           
  3176  0021                     ??_Mcu_Initialization:	
  3177                           ; 0 bytes @ 0x1
  3178                           
  3179  0021                     ??_RF_Initialization:	
  3180                           ; 0 bytes @ 0x1
  3181                           
  3182  0021                     ??___bmul:	
  3183                           ; 0 bytes @ 0x1
  3184                           
  3185  0021                     CC2500_WriteByte@loop_a:	
  3186                           ; 0 bytes @ 0x1
  3187                           
  3188  0021                     CC2500_ReadByte@loop_b:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     DelayOffPointSelect@sw:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     DimmerLightsPointSelect@lights:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     getDimmerLights_Line@line:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     LedPointSelect@led:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     Flash_Memory_Read@i:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0021                     Flash_Memory_Write@i:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     setMemory_Modify@command:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215  0021                     setMemory_LoopSave@command:	
  3216                           ; 1 bytes @ 0x1
  3217                           
  3218  0021                     setLoad_AH_AL_Restore@i:	
  3219                           ; 1 bytes @ 0x1
  3220                           
  3221  0021                     setRF_Learn@command:	
  3222                           ; 1 bytes @ 0x1
  3223                           
  3224  0021                     getRF_KeyStatus@key:	
  3225                           ; 1 bytes @ 0x1
  3226                           
  3227  0021                     SwPointSelect@sw:	
  3228                           ; 1 bytes @ 0x1
  3229                           
  3230  0021                     _getSw_KeyStatus$6366:	
  3231                           ; 1 bytes @ 0x1
  3232                           
  3233  0021                     getMain_Lights_Count@status3:	
  3234                           ; 1 bytes @ 0x1
  3235                           
  3236  0021                     _getMain_All_Error_Status$7115:	
  3237                           ; 1 bytes @ 0x1
  3238                           
  3239                           
  3240                           ; 2 bytes @ 0x1
  3241  0021                     	ds	1
  3242  0022                     ??_CC2500_WriteCommand:	
  3243  0022                     ??_CC2500_ReadStatus:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ??_DelayTime_1us:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     ?_CC2500_WriteREG:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     ??_DlyOff_Initialization:	
  3253                           ; 0 bytes @ 0x2
  3254                           
  3255  0022                     ??_setDimmerLights_Initialization:	
  3256                           ; 0 bytes @ 0x2
  3257                           
  3258  0022                     ?_setDimmerLights_Trigger:	
  3259                           ; 0 bytes @ 0x2
  3260                           
  3261  0022                     ?_setDimmerLights_TriggerAdj:	
  3262                           ; 0 bytes @ 0x2
  3263                           
  3264  0022                     ?_setLED:	
  3265                           ; 0 bytes @ 0x2
  3266                           
  3267  0022                     ??_setLED_Main:	
  3268                           ; 0 bytes @ 0x2
  3269                           
  3270  0022                     ??_getBuz_GO:	
  3271                           ; 0 bytes @ 0x2
  3272                           
  3273  0022                     ??_getDelayOff_GO:	
  3274                           ; 0 bytes @ 0x2
  3275                           
  3276  0022                     ??_getDimmerLights_Status:	
  3277                           ; 0 bytes @ 0x2
  3278                           
  3279  0022                     ??_Load_Initialization:	
  3280                           ; 0 bytes @ 0x2
  3281                           
  3282  0022                     CC2500_WriteREG@value:	
  3283                           ; 0 bytes @ 0x2
  3284                           
  3285  0022                     DlyOff_Initialization@sw:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     getDelayOff_GO@sw:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     getDimmerLights_Status@lights:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  0022                     _getAll_DimmerLights_AdjGO$2569:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297  0022                     setDimmerLights_Trigger@command:	
  3298                           ; 1 bytes @ 0x2
  3299                           
  3300  0022                     setDimmerLights_TriggerAdj@command:	
  3301                           ; 1 bytes @ 0x2
  3302                           
  3303  0022                     setLED@command:	
  3304                           ; 1 bytes @ 0x2
  3305                           
  3306  0022                     Flash_Memory_Read@address:	
  3307                           ; 1 bytes @ 0x2
  3308                           
  3309  0022                     setMemory_Data@address:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312  0022                     _getRF_KeyStatus$5286:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315  0022                     _getSw_KeyStatus$6367:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0022                     getMain_Lights_Count@status1:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321  0022                     getMain_LoadOK@ok:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324  0022                     ___bmul@product:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0022                     DelayTime_1us@i:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0022                     ___awdiv@dividend:	
  3331                           ; 2 bytes @ 0x2
  3332                           
  3333  0022                     ___lwdiv@dividend:	
  3334                           ; 2 bytes @ 0x2
  3335                           
  3336                           
  3337                           ; 2 bytes @ 0x2
  3338  0022                     	ds	1
  3339  0023                     ??_CC2500_WriteREG:	
  3340  0023                     ??_setDimmerLights_Trigger:	
  3341                           ; 0 bytes @ 0x3
  3342                           
  3343  0023                     ??_setDimmerLights_TriggerAdj:	
  3344                           ; 0 bytes @ 0x3
  3345                           
  3346  0023                     ??_setLED:	
  3347                           ; 0 bytes @ 0x3
  3348                           
  3349  0023                     ??_DelayOff_Initialization:	
  3350                           ; 0 bytes @ 0x3
  3351                           
  3352  0023                     ??_getAD:	
  3353                           ; 0 bytes @ 0x3
  3354                           
  3355  0023                     CC2500_WriteCommand@command:	
  3356                           ; 0 bytes @ 0x3
  3357                           
  3358  0023                     CC2500_ReadStatus@status_addr:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     getDelayOff_GO@go:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     setDimmerLights_Initialization@lights:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367  0023                     getDimmerLights_Status@status:	
  3368                           ; 1 bytes @ 0x3
  3369                           
  3370  0023                     setLED@led:	
  3371                           ; 1 bytes @ 0x3
  3372                           
  3373  0023                     getAD@adcon0:	
  3374                           ; 1 bytes @ 0x3
  3375                           
  3376  0023                     Flash_Memory_Read@ret:	
  3377                           ; 1 bytes @ 0x3
  3378                           
  3379  0023                     setRF_DimmerLights@status:	
  3380                           ; 1 bytes @ 0x3
  3381                           
  3382  0023                     getSw_KeyStatus@status:	
  3383                           ; 1 bytes @ 0x3
  3384                           
  3385  0023                     getMain_Lights_Count@status2:	
  3386                           ; 1 bytes @ 0x3
  3387                           
  3388  0023                     ___bmul@multiplier:	
  3389                           ; 1 bytes @ 0x3
  3390                           
  3391  0023                     ___ftpack@exp:	
  3392                           ; 1 bytes @ 0x3
  3393                           
  3394  0023                     _getMain_All_Error_Status$7116:	
  3395                           ; 1 bytes @ 0x3
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x3
  3399  0023                     	ds	1
  3400  0024                     ??_CC2500_ClearTXFIFO:	
  3401  0024                     ??_CC2500_ClearRXFIFO:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_CC2500_SIDLEMode:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_DelayTimejudge:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??_getMain_LightsStatus:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??_setLED_Initialization:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     ??_Flash_Memory_Modify:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     ??_RF_RxDisable:	
  3420                           ; 0 bytes @ 0x4
  3421                           
  3422  0024                     ??_setSw_Initialization:	
  3423                           ; 0 bytes @ 0x4
  3424                           
  3425  0024                     ??_CC2500_TxData:	
  3426                           ; 0 bytes @ 0x4
  3427                           
  3428  0024                     ??_CC2500_RxData:	
  3429                           ; 0 bytes @ 0x4
  3430                           
  3431  0024                     ??_DimmerLights_Initialization:	
  3432                           ; 0 bytes @ 0x4
  3433                           
  3434  0024                     ??_getLoad_AD:	
  3435                           ; 0 bytes @ 0x4
  3436                           
  3437  0024                     ??_getTemp_AD:	
  3438                           ; 0 bytes @ 0x4
  3439                           
  3440  0024                     ??___awdiv:	
  3441                           ; 0 bytes @ 0x4
  3442                           
  3443  0024                     ??___lwdiv:	
  3444                           ; 0 bytes @ 0x4
  3445                           
  3446  0024                     CC2500_WriteREG@w_addr:	
  3447                           ; 0 bytes @ 0x4
  3448                           
  3449  0024                     setDimmerLights_Trigger@lights:	
  3450                           ; 1 bytes @ 0x4
  3451                           
  3452  0024                     setDimmerLights_TriggerAdj@lights:	
  3453                           ; 1 bytes @ 0x4
  3454                           
  3455  0024                     setLED_Initialization@led:	
  3456                           ; 1 bytes @ 0x4
  3457                           
  3458  0024                     setLED_Main@led:	
  3459                           ; 1 bytes @ 0x4
  3460                           
  3461  0024                     setRF_DimmerLights@lights:	
  3462                           ; 1 bytes @ 0x4
  3463                           
  3464  0024                     setSw_Initialization@sw:	
  3465                           ; 1 bytes @ 0x4
  3466                           
  3467  0024                     getSw_KeyStatus@sw:	
  3468                           ; 1 bytes @ 0x4
  3469                           
  3470  0024                     ___ftpack@sign:	
  3471                           ; 1 bytes @ 0x4
  3472                           
  3473  0024                     getBuz_GO@i:	
  3474                           ; 1 bytes @ 0x4
  3475                           
  3476  0024                     DelayTime_1us@j:	
  3477                           ; 2 bytes @ 0x4
  3478                           
  3479                           
  3480                           ; 2 bytes @ 0x4
  3481  0024                     	ds	1
  3482  0025                     ??_CC2500_InitSetREG:	
  3483  0025                     ??_CC2500_InitPATable:	
  3484                           ; 0 bytes @ 0x5
  3485                           
  3486  0025                     ??___ftpack:	
  3487                           ; 0 bytes @ 0x5
  3488                           
  3489  0025                     ??_setDimmerLights_AdjControl:	
  3490                           ; 0 bytes @ 0x5
  3491                           
  3492  0025                     ??_LED_Initialization:	
  3493                           ; 0 bytes @ 0x5
  3494                           
  3495  0025                     ??_LED_Main:	
  3496                           ; 0 bytes @ 0x5
  3497                           
  3498  0025                     ??_Switch_Initialization:	
  3499                           ; 0 bytes @ 0x5
  3500                           
  3501  0025                     CC2500_TxData@loop_e:	
  3502                           ; 0 bytes @ 0x5
  3503                           
  3504  0025                     CC2500_RxData@loop_f:	
  3505                           ; 1 bytes @ 0x5
  3506                           
  3507  0025                     Flash_Memory_Modify@i:	
  3508                           ; 1 bytes @ 0x5
  3509                           
  3510  0025                     getTemp_AD@channel:	
  3511                           ; 1 bytes @ 0x5
  3512                           
  3513  0025                     getMain_LightsStatus@count:	
  3514                           ; 1 bytes @ 0x5
  3515                           
  3516  0025                     getMain_All_Error_Status@command:	
  3517                           ; 1 bytes @ 0x5
  3518                           
  3519  0025                     ___awdiv@counter:	
  3520                           ; 1 bytes @ 0x5
  3521                           
  3522  0025                     ___lwdiv@quotient:	
  3523                           ; 1 bytes @ 0x5
  3524                           
  3525                           
  3526                           ; 2 bytes @ 0x5
  3527  0025                     	ds	1
  3528  0026                     ??_CC2500_PowerRST:	
  3529  0026                     ??_CC2500_FrequencyCabr:	
  3530                           ; 0 bytes @ 0x6
  3531                           
  3532  0026                     CC2500_InitSetREG@temp1:	
  3533                           ; 0 bytes @ 0x6
  3534                           
  3535  0026                     CC2500_InitPATable@temp:	
  3536                           ; 1 bytes @ 0x6
  3537                           
  3538  0026                     DelayTimejudge@i:	
  3539                           ; 1 bytes @ 0x6
  3540                           
  3541  0026                     setDimmerLights_AdjControl@idle:	
  3542                           ; 1 bytes @ 0x6
  3543                           
  3544  0026                     getLoad_AD@channel:	
  3545                           ; 1 bytes @ 0x6
  3546                           
  3547  0026                     getMain_All_Error_Status@status:	
  3548                           ; 1 bytes @ 0x6
  3549                           
  3550  0026                     ___awdiv@sign:	
  3551                           ; 1 bytes @ 0x6
  3552                           
  3553  0026                     getMain_LightsStatus@i:	
  3554                           ; 1 bytes @ 0x6
  3555                           
  3556                           
  3557                           ; 2 bytes @ 0x6
  3558  0026                     	ds	1
  3559  0027                     CC2500_InitSetREG@temp2:	
  3560  0027                     CC2500_InitPATable@loop_d:	
  3561                           ; 1 bytes @ 0x7
  3562                           
  3563  0027                     DelayTimejudge@j:	
  3564                           ; 1 bytes @ 0x7
  3565                           
  3566  0027                     _setDimmerLights_AdjControl$2590:	
  3567                           ; 1 bytes @ 0x7
  3568                           
  3569  0027                     getLoad_AD@k:	
  3570                           ; 1 bytes @ 0x7
  3571                           
  3572  0027                     ___lwdiv@counter:	
  3573                           ; 1 bytes @ 0x7
  3574                           
  3575  0027                     ___awdiv@quotient:	
  3576                           ; 1 bytes @ 0x7
  3577                           
  3578                           
  3579                           ; 2 bytes @ 0x7
  3580  0027                     	ds	1
  3581  0028                     ?___awtoft:	
  3582  0028                     CC2500_InitSetREG@loop_c:	
  3583                           ; 3 bytes @ 0x8
  3584                           
  3585  0028                     DelayTimejudge@k:	
  3586                           ; 1 bytes @ 0x8
  3587                           
  3588  0028                     setDimmerLights_AdjControl@sw:	
  3589                           ; 1 bytes @ 0x8
  3590                           
  3591  0028                     getLoad_AD@j:	
  3592                           ; 1 bytes @ 0x8
  3593                           
  3594  0028                     getMain_LightsStatus@status:	
  3595                           ; 1 bytes @ 0x8
  3596                           
  3597  0028                     ___awtoft@c:	
  3598                           ; 1 bytes @ 0x8
  3599                           
  3600                           
  3601                           ; 2 bytes @ 0x8
  3602  0028                     	ds	1
  3603  0029                     ?_setBuz:	
  3604  0029                     ??_CC2500_PowerOnInitial:	
  3605                           ; 0 bytes @ 0x9
  3606                           
  3607  0029                     ??_Flash_Memory_Main:	
  3608                           ; 0 bytes @ 0x9
  3609                           
  3610  0029                     ??_Load_Main:	
  3611                           ; 0 bytes @ 0x9
  3612                           
  3613  0029                     DelayTimejudge@value:	
  3614                           ; 0 bytes @ 0x9
  3615                           
  3616  0029                     getLoad_AD@i:	
  3617                           ; 1 bytes @ 0x9
  3618                           
  3619  0029                     setBuz@time:	
  3620                           ; 1 bytes @ 0x9
  3621                           
  3622                           
  3623                           ; 2 bytes @ 0x9
  3624  0029                     	ds	1
  3625  002A                     ?_setDelayOff_GO:	
  3626  002A                     setDelayOff_GO@command:	
  3627                           ; 0 bytes @ 0xA
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0xA
  3631  002A                     	ds	1
  3632  002B                     ??_setBuz:	
  3633  002B                     ??___awtoft:	
  3634                           ; 0 bytes @ 0xB
  3635                           
  3636  002B                     setDelayOff_GO@value:	
  3637                           ; 0 bytes @ 0xB
  3638                           
  3639  002B                     Load_Main@j:	
  3640                           ; 1 bytes @ 0xB
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0xB
  3644  002B                     	ds	1
  3645  002C                     ??_setDelayOff_GO:	
  3646  002C                     setBuz@count:	
  3647                           ; 0 bytes @ 0xC
  3648                           
  3649  002C                     Load_Main@adjgo:	
  3650                           ; 1 bytes @ 0xC
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0xC
  3654  002C                     	ds	1
  3655  002D                     ??_setTemp_Main:	
  3656  002D                     ??_setLog_Code:	
  3657                           ; 0 bytes @ 0xD
  3658                           
  3659  002D                     ??_my_MainTimer:	
  3660                           ; 0 bytes @ 0xD
  3661                           
  3662  002D                     ??_setDimmerLights_SwOn:	
  3663                           ; 0 bytes @ 0xD
  3664                           
  3665  002D                     _Load_Main$3869:	
  3666                           ; 0 bytes @ 0xD
  3667                           
  3668  002D                     ___awtoft@sign:	
  3669                           ; 1 bytes @ 0xD
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0xD
  3673  002D                     	ds	1
  3674  002E                     ?___ftdiv:	
  3675  002E                     ?___ftmul:	
  3676                           ; 3 bytes @ 0xE
  3677                           
  3678  002E                     setDelayOff_GO@sw:	
  3679                           ; 3 bytes @ 0xE
  3680                           
  3681  002E                     setDimmerLights_SwOn@idle:	
  3682                           ; 1 bytes @ 0xE
  3683                           
  3684  002E                     Load_Main@error:	
  3685                           ; 1 bytes @ 0xE
  3686                           
  3687  002E                     ___ftdiv@f2:	
  3688                           ; 1 bytes @ 0xE
  3689                           
  3690  002E                     ___ftmul@f1:	
  3691                           ; 3 bytes @ 0xE
  3692                           
  3693                           
  3694                           ; 3 bytes @ 0xE
  3695  002E                     	ds	1
  3696  002F                     ??_setDimmerLights_SwOff:	
  3697  002F                     ??_Temp_Main:	
  3698                           ; 0 bytes @ 0xF
  3699                           
  3700  002F                     setDimmerLights_SwOn@sw:	
  3701                           ; 0 bytes @ 0xF
  3702                           
  3703  002F                     setDimmerLights_SwOff@command:	
  3704                           ; 1 bytes @ 0xF
  3705                           
  3706  002F                     Load_Main@i:	
  3707                           ; 1 bytes @ 0xF
  3708                           
  3709                           
  3710                           ; 1 bytes @ 0xF
  3711  002F                     	ds	1
  3712  0030                     setDimmerLights_SwOff@sw:	
  3713                           
  3714                           ; 1 bytes @ 0x10
  3715  0030                     	ds	1
  3716  0031                     ??_setDimmerLights_ErrorClose:	
  3717  0031                     ??_setRFSW_Control:	
  3718                           ; 0 bytes @ 0x11
  3719                           
  3720  0031                     ??_setSw_Main:	
  3721                           ; 0 bytes @ 0x11
  3722                           
  3723  0031                     ___ftdiv@f1:	
  3724                           ; 0 bytes @ 0x11
  3725                           
  3726  0031                     ___ftmul@f2:	
  3727                           ; 3 bytes @ 0x11
  3728                           
  3729                           
  3730                           ; 3 bytes @ 0x11
  3731  0031                     	ds	1
  3732  0032                     setDimmerLights_ErrorClose@count:	
  3733  0032                     setRFSW_Control@status:	
  3734                           ; 1 bytes @ 0x12
  3735                           
  3736                           
  3737                           ; 1 bytes @ 0x12
  3738  0032                     	ds	1
  3739  0033                     setDimmerLights_ErrorClose@lights:	
  3740  0033                     setRFSW_Control@sw:	
  3741                           ; 1 bytes @ 0x13
  3742                           
  3743  0033                     setSw_Main@sw:	
  3744                           ; 1 bytes @ 0x13
  3745                           
  3746                           
  3747                           ; 1 bytes @ 0x13
  3748  0033                     	ds	1
  3749  0034                     ??___ftdiv:	
  3750  0034                     ??___ftmul:	
  3751                           ; 0 bytes @ 0x14
  3752                           
  3753  0034                     setDimmerLights_ErrorClose@i:	
  3754                           ; 0 bytes @ 0x14
  3755                           
  3756                           
  3757                           ; 2 bytes @ 0x14
  3758  0034                     	ds	2
  3759  0036                     ??_DlyOff_Main:	
  3760  0036                     ??_setMain_Exception:	
  3761                           ; 0 bytes @ 0x16
  3762                           
  3763                           
  3764                           ; 0 bytes @ 0x16
  3765  0036                     	ds	2
  3766  0038                     DlyOff_Main@sw:	
  3767  0038                     setMain_Exception@buz:	
  3768                           ; 1 bytes @ 0x18
  3769                           
  3770  0038                     ___ftdiv@cntr:	
  3771                           ; 1 bytes @ 0x18
  3772                           
  3773  0038                     ___ftmul@exp:	
  3774                           ; 1 bytes @ 0x18
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0x18
  3778  0038                     	ds	1
  3779  0039                     ??_DelayOff_Main:	
  3780  0039                     _setMain_Exception$7105:	
  3781                           ; 0 bytes @ 0x19
  3782                           
  3783  0039                     ___ftdiv@f3:	
  3784                           ; 2 bytes @ 0x19
  3785                           
  3786  0039                     ___ftmul@f3_as_product:	
  3787                           ; 3 bytes @ 0x19
  3788                           
  3789                           
  3790                           ; 3 bytes @ 0x19
  3791  0039                     	ds	2
  3792  003B                     setMain_Exception@status:	
  3793                           
  3794                           ; 1 bytes @ 0x1B
  3795  003B                     	ds	1
  3796  003C                     setMain_Exception@command:	
  3797  003C                     ___ftdiv@exp:	
  3798                           ; 1 bytes @ 0x1C
  3799                           
  3800  003C                     ___ftmul@cntr:	
  3801                           ; 1 bytes @ 0x1C
  3802                           
  3803                           
  3804                           ; 1 bytes @ 0x1C
  3805  003C                     	ds	1
  3806  003D                     ??_Switch_Main:	
  3807  003D                     ___ftdiv@sign:	
  3808                           ; 0 bytes @ 0x1D
  3809                           
  3810  003D                     ___ftmul@sign:	
  3811                           ; 1 bytes @ 0x1D
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x1D
  3815  003D                     	ds	1
  3816  003E                     ?___ftneg:	
  3817  003E                     Switch_Main@error:	
  3818                           ; 3 bytes @ 0x1E
  3819                           
  3820  003E                     ___ftneg@f1:	
  3821                           ; 1 bytes @ 0x1E
  3822                           
  3823                           
  3824                           ; 3 bytes @ 0x1E
  3825  003E                     	ds	3
  3826  0041                     ??___ftneg:	
  3827  0041                     ?___ftadd:	
  3828                           ; 0 bytes @ 0x21
  3829                           
  3830  0041                     ___ftadd@f1:	
  3831                           ; 3 bytes @ 0x21
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x21
  3835  0041                     	ds	3
  3836  0044                     ___ftadd@f2:	
  3837                           
  3838                           ; 3 bytes @ 0x24
  3839  0044                     	ds	3
  3840  0047                     ??___ftadd:	
  3841                           
  3842                           ; 0 bytes @ 0x27
  3843  0047                     	ds	4
  3844  004B                     ___ftadd@sign:	
  3845                           
  3846                           ; 1 bytes @ 0x2B
  3847  004B                     	ds	1
  3848  004C                     ___ftadd@exp2:	
  3849                           
  3850                           ; 1 bytes @ 0x2C
  3851  004C                     	ds	1
  3852  004D                     ___ftadd@exp1:	
  3853                           
  3854                           ; 1 bytes @ 0x2D
  3855  004D                     	ds	1
  3856  004E                     ?___fttol:	
  3857  004E                     ___fttol@f1:	
  3858                           ; 4 bytes @ 0x2E
  3859                           
  3860                           
  3861                           ; 3 bytes @ 0x2E
  3862  004E                     	ds	4
  3863  0052                     ??___fttol:	
  3864                           
  3865                           ; 0 bytes @ 0x32
  3866  0052                     	ds	4
  3867  0056                     ___fttol@sign1:	
  3868                           
  3869                           ; 1 bytes @ 0x36
  3870  0056                     	ds	1
  3871  0057                     ___fttol@lval:	
  3872                           
  3873                           ; 4 bytes @ 0x37
  3874  0057                     	ds	4
  3875  005B                     ___fttol@exp1:	
  3876                           
  3877                           ; 1 bytes @ 0x3B
  3878  005B                     	ds	1
  3879  005C                     ??_setPercentValue:	
  3880  005C                     ??_getPercentValue:	
  3881                           ; 0 bytes @ 0x3C
  3882                           
  3883                           
  3884                           ; 0 bytes @ 0x3C
  3885  005C                     	ds	2
  3886  005E                     getPercentValue@value:	
  3887  005E                     setPercentValue@value:	
  3888                           ; 1 bytes @ 0x3E
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x3E
  3892  005E                     	ds	1
  3893  005F                     getPercentValue@i:	
  3894  005F                     setPercentValue@i:	
  3895                           ; 3 bytes @ 0x3F
  3896                           
  3897                           
  3898                           ; 3 bytes @ 0x3F
  3899  005F                     	ds	3
  3900  0062                     ?_setDimmerLights:	
  3901  0062                     ?_setDimmerLights_Adj:	
  3902                           ; 0 bytes @ 0x42
  3903                           
  3904  0062                     ??_setDimmerLights_AdjRF:	
  3905                           ; 0 bytes @ 0x42
  3906                           
  3907  0062                     ??_Flash_Memory_Initialization:	
  3908                           ; 0 bytes @ 0x42
  3909                           
  3910  0062                     setDimmerLights@status:	
  3911                           ; 0 bytes @ 0x42
  3912                           
  3913  0062                     setDimmerLights_Adj@status:	
  3914                           ; 1 bytes @ 0x42
  3915                           
  3916                           
  3917                           ; 1 bytes @ 0x42
  3918  0062                     	ds	1
  3919  0063                     ??_setDimmerLights:	
  3920  0063                     ??_setDimmerLights_Adj:	
  3921                           ; 0 bytes @ 0x43
  3922                           
  3923  0063                     setDimmerLights_AdjRF@lights:	
  3924                           ; 0 bytes @ 0x43
  3925                           
  3926  0063                     Flash_Memory_Initialization@i:	
  3927                           ; 1 bytes @ 0x43
  3928                           
  3929                           
  3930                           ; 1 bytes @ 0x43
  3931  0063                     	ds	1
  3932  0064                     ??_setRF_DimmerValue:	
  3933                           
  3934                           ; 0 bytes @ 0x44
  3935  0064                     	ds	1
  3936  0065                     setDimmerLights@lights:	
  3937  0065                     setDimmerLights_Adj@lights:	
  3938                           ; 1 bytes @ 0x45
  3939                           
  3940                           
  3941                           ; 1 bytes @ 0x45
  3942  0065                     	ds	1
  3943  0066                     ??_setDimmerLights_Main:	
  3944  0066                     setDimmerLights_Main@lights:	
  3945                           ; 0 bytes @ 0x46
  3946                           
  3947  0066                     setRF_DimmerValue@lights:	
  3948                           ; 1 bytes @ 0x46
  3949                           
  3950                           
  3951                           ; 1 bytes @ 0x46
  3952  0066                     	ds	1
  3953  0067                     ??_setRFSW_AdjControl:	
  3954  0067                     ??_DimmerLights_Main:	
  3955                           ; 0 bytes @ 0x47
  3956                           
  3957                           
  3958                           ; 0 bytes @ 0x47
  3959  0067                     	ds	2
  3960  0069                     setRFSW_AdjControl@status:	
  3961  0069                     _DimmerLights_Main$2507:	
  3962                           ; 1 bytes @ 0x49
  3963                           
  3964                           
  3965                           ; 2 bytes @ 0x49
  3966  0069                     	ds	1
  3967  006A                     setRFSW_AdjControl@sw:	
  3968                           
  3969                           ; 1 bytes @ 0x4A
  3970  006A                     	ds	1
  3971  006B                     ??_getRxData:	
  3972  006B                     ??_setControl_Lights_Table:	
  3973                           ; 0 bytes @ 0x4B
  3974                           
  3975                           
  3976                           ; 0 bytes @ 0x4B
  3977  006B                     	ds	1
  3978  006C                     getRxData@error:	
  3979                           
  3980                           ; 1 bytes @ 0x4C
  3981  006C                     	ds	1
  3982  006D                     ??_setRF_Main:	
  3983                           
  3984                           ; 0 bytes @ 0x4D
  3985  006D                     	ds	1
  3986  006E                     ??_RF_Main:	
  3987  006E                     ??_main:	
  3988                           ; 0 bytes @ 0x4E
  3989                           
  3990                           
  3991                           	psect	maintext
  3992  15E4                     __pmaintext:	
  3993                           ; 0 bytes @ 0x4E
  3994 ;;
  3995 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3996 ;;
  3997 ;; *************** function _main *****************
  3998 ;; Defined at:
  3999 ;;		line 7 in file "../src/main_B1.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  argc            2    3[BANK1 ] int 
  4002 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  2    3[BANK1 ] int 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 17F/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4014 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels required when called:   15
  4020 ;; This function calls:
  4021 ;;		_Buzzer_Initialization
  4022 ;;		_Buzzer_Main
  4023 ;;		_CC2500_PowerOnInitial
  4024 ;;		_DelayOff_Initialization
  4025 ;;		_DelayOff_Main
  4026 ;;		_DimmerLights_Initialization
  4027 ;;		_DimmerLights_Main
  4028 ;;		_Flash_Memory_Initialization
  4029 ;;		_Flash_Memory_Main
  4030 ;;		_LED_Initialization
  4031 ;;		_LED_Main
  4032 ;;		_Load_Initialization
  4033 ;;		_Load_Main
  4034 ;;		_Mcu_Initialization
  4035 ;;		_RF_Initialization
  4036 ;;		_RF_Main
  4037 ;;		_Switch_Initialization
  4038 ;;		_Switch_Main
  4039 ;;		_Temp_Initialization
  4040 ;;		_Temp_Main
  4041 ;;		_WDT_Main
  4042 ;;		_getLoad_AD
  4043 ;;		_getTemp_AD
  4044 ;;		_myMain_Initialization
  4045 ;;		_my_MainTimer
  4046 ;; This function is called by:
  4047 ;;		Startup code after reset
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _main
  4053  15E4                     _main:	
  4054                           
  4055                           ;main_B1.c: 8: myMain_Initialization();
  4056                           
  4057                           ;incstack = 0
  4058                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4059  15E4  319B  23C2  3195   	fcall	_myMain_Initialization
  4060                           
  4061                           ;main_B1.c: 9: Mcu_Initialization();
  4062  15E7  319C  246B  3195   	fcall	_Mcu_Initialization
  4063                           
  4064                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4065  15EA  3185  2579  3195   	fcall	_Flash_Memory_Initialization
  4066                           
  4067                           ;main_B1.c: 11: LED_Initialization();
  4068  15ED  319B  2359  3195   	fcall	_LED_Initialization
  4069                           
  4070                           ;main_B1.c: 12: Buzzer_Initialization();
  4071  15F0  319A  229E  3195   	fcall	_Buzzer_Initialization
  4072                           
  4073                           ;main_B1.c: 14: ;;
  4074                           ;main_B1.c: 15: Temp_Initialization();
  4075  15F3  319A  22A7  3195   	fcall	_Temp_Initialization
  4076                           
  4077                           ;main_B1.c: 16: Load_Initialization();
  4078  15F6  319A  22BF  3195   	fcall	_Load_Initialization
  4079                           
  4080                           ;main_B1.c: 17: ;;
  4081                           ;main_B1.c: 18: DelayOff_Initialization();
  4082  15F9  319A  22E5  3195   	fcall	_DelayOff_Initialization
  4083                           
  4084                           ;main_B1.c: 20: DimmerLights_Initialization();
  4085  15FC  319D  256B  3195   	fcall	_DimmerLights_Initialization
  4086                           
  4087                           ;main_B1.c: 21: ;;
  4088                           ;main_B1.c: 22: ;;
  4089                           ;main_B1.c: 23: ;;
  4090                           ;main_B1.c: 24: Switch_Initialization();
  4091  15FF  319B  2389  3195   	fcall	_Switch_Initialization
  4092                           
  4093                           ;main_B1.c: 25: RF_Initialization();
  4094  1602  319A  22A1  3195   	fcall	_RF_Initialization
  4095                           
  4096                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4097  1605  319D  252C  3195   	fcall	_CC2500_PowerOnInitial
  4098  1608                     l8443:	
  4099                           ;main_B1.c: 27: ;;
  4100                           ;main_B1.c: 28: ;;
  4101                           ;main_B1.c: 30: while (1) {
  4102                           
  4103                           
  4104                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4105  1608  0021               	movlb	1	; select bank1
  4106  1609  1C20               	btfss	_myMain^(0+128),0
  4107  160A  2E13               	goto	l8447
  4108                           
  4109                           ;main_B1.c: 38: getLoad_AD(0x05);
  4110  160B  3005               	movlw	5
  4111  160C  318B  23DD  3195   	fcall	_getLoad_AD
  4112                           
  4113                           ;main_B1.c: 42: getTemp_AD(0x09);
  4114  160F  3009               	movlw	9
  4115  1610  3192  229D  3195   	fcall	_getTemp_AD
  4116  1613                     l8447:	
  4117                           
  4118                           ;main_B1.c: 57: }
  4119                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4120  1613  0021               	movlb	1	; select bank1
  4121  1614  1C47               	btfss	_Timer1^(0+128),0
  4122  1615  2E08               	goto	l8443
  4123                           
  4124                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4125  1616  1047               	bcf	_Timer1^(0+128),0
  4126                           
  4127                           ;main_B1.c: 95: my_MainTimer();
  4128  1617  3194  24AC  3195   	fcall	_my_MainTimer
  4129                           
  4130                           ;main_B1.c: 96: WDT_Main();
  4131  161A  319C  247D  3195   	fcall	_WDT_Main
  4132                           
  4133                           ;main_B1.c: 97: ;;
  4134                           ;main_B1.c: 98: ;;
  4135                           ;main_B1.c: 99: if (myMain.PowerON == 1) {
  4136  161D  0021               	movlb	1	; select bank1
  4137  161E  1C20               	btfss	_myMain^(0+128),0
  4138  161F  2E08               	goto	l8443
  4139                           
  4140                           ;main_B1.c: 100: Flash_Memory_Main();
  4141  1620  3191  21FA  3195   	fcall	_Flash_Memory_Main
  4142                           
  4143                           ;main_B1.c: 102: LED_Main();
  4144  1623  319B  2365  3195   	fcall	_LED_Main
  4145                           
  4146                           ;main_B1.c: 103: Buzzer_Main();
  4147  1626  3194  2462  3195   	fcall	_Buzzer_Main
  4148                           
  4149                           ;main_B1.c: 105: ;;
  4150                           ;main_B1.c: 106: Temp_Main();
  4151  1629  3188  2000  3195   	fcall	_Temp_Main
  4152                           
  4153                           ;main_B1.c: 107: Load_Main();
  4154  162C  3180  204B  3195   	fcall	_Load_Main
  4155                           
  4156                           ;main_B1.c: 108: ;;
  4157                           ;main_B1.c: 110: ;;
  4158                           ;main_B1.c: 111: DimmerLights_Main();
  4159  162F  3191  2191  3195   	fcall	_DimmerLights_Main
  4160                           
  4161                           ;main_B1.c: 112: Switch_Main();
  4162  1632  319F  2742  3195   	fcall	_Switch_Main
  4163                           
  4164                           ;main_B1.c: 113: ;;
  4165                           ;main_B1.c: 114: ;;
  4166                           ;main_B1.c: 116: RF_Main();
  4167  1635  319A  22A4  3195   	fcall	_RF_Main
  4168                           
  4169                           ;main_B1.c: 117: DelayOff_Main();
  4170  1638  319A  22ED  3195   	fcall	_DelayOff_Main
  4171                           
  4172                           ;main_B1.c: 118: ;;
  4173                           ;main_B1.c: 119: ;;
  4174  163B  2E08               	goto	l8443
  4175  163C                     __end_of_main:	
  4176                           ;main_B1.c: 126: }
  4177                           ;main_B1.c: 127: }
  4178                           ;main_B1.c: 161: }
  4179                           ;main_B1.c: 162: return (0);
  4180                           ;	Return value of _main is never used
  4181                           
  4182                           
  4183                           	psect	text1
  4184  14AC                     __ptext1:	
  4185 ;; *************** function _my_MainTimer *****************
  4186 ;; Defined at:
  4187 ;;		line 181 in file "../src/main_B1.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    7
  4208 ;; This function calls:
  4209 ;;		_setBuz
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _my_MainTimer
  4217  14AC                     _my_MainTimer:	
  4218                           
  4219                           ;main_B1.c: 183: if (myMain.PowerON == 0) {
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4223  14AC  0021               	movlb	1	; select bank1
  4224  14AD  1820               	btfsc	_myMain^(0+128),0
  4225  14AE  2CCD               	goto	l8311
  4226                           
  4227                           ;main_B1.c: 184: myMain.PowerCount++;
  4228  14AF  3001               	movlw	1
  4229  14B0  07A1               	addwf	(_myMain^(0+128)+1),f
  4230  14B1  3000               	movlw	0
  4231  14B2  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4232                           
  4233                           ;main_B1.c: 185: if (myMain.PowerCount == 150)
  4234  14B3  3001               	movlw	1
  4235  14B4  3EA0               	addlw	_myMain& (0+255)
  4236  14B5  0086               	movwf	6
  4237  14B6  0187               	clrf	7
  4238  14B7  3F40               	moviw [0]fsr1
  4239  14B8  3A96               	xorlw	150
  4240  14B9  1D03               	skipz
  4241  14BA  2CBD               	goto	u8435
  4242  14BB  3F41               	moviw [1]fsr1
  4243  14BC  3A00               	xorlw	0
  4244  14BD                     u8435:	
  4245  14BD  1D03               	skipz
  4246  14BE  0008               	return
  4247                           
  4248                           ;main_B1.c: 186: {
  4249                           ;main_B1.c: 187: myMain.PowerCount = 0;
  4250  14BF  01A1               	clrf	(_myMain^(0+128)+1)
  4251  14C0  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4252                           
  4253                           ;main_B1.c: 188: myMain.PowerON = 1;
  4254  14C1  1420               	bsf	_myMain^(0+128),0
  4255                           
  4256                           ;main_B1.c: 193: setBuz(3, 50);
  4257  14C2  3032               	movlw	50
  4258  14C3  0020               	movlb	0	; select bank0
  4259  14C4  00A9               	movwf	setBuz@time
  4260  14C5  3000               	movlw	0
  4261  14C6  00AA               	movwf	setBuz@time+1
  4262  14C7  3003               	movlw	3
  4263  14C8  3196  263C         	fcall	_setBuz
  4264                           
  4265                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4266  14CA  0021               	movlb	1	; select bank1
  4267  14CB  1620               	bsf	_myMain^(0+128),4
  4268                           
  4269                           ;main_B1.c: 203: }
  4270                           ;main_B1.c: 204: } else {
  4271  14CC  0008               	return
  4272  14CD                     l8311:	
  4273                           
  4274                           ;main_B1.c: 205: myMain.PowerCount++;
  4275  14CD  3001               	movlw	1
  4276  14CE  07A1               	addwf	(_myMain^(0+128)+1),f
  4277  14CF  3000               	movlw	0
  4278  14D0  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4279                           
  4280                           ;main_B1.c: 206: if (myMain.PowerCount == 100) {
  4281  14D1  3001               	movlw	1
  4282  14D2  3EA0               	addlw	_myMain& (0+255)
  4283  14D3  0086               	movwf	6
  4284  14D4  0187               	clrf	7
  4285  14D5  3F40               	moviw [0]fsr1
  4286  14D6  3A64               	xorlw	100
  4287  14D7  1D03               	skipz
  4288  14D8  2CDB               	goto	u8445
  4289  14D9  3F41               	moviw [1]fsr1
  4290  14DA  3A00               	xorlw	0
  4291  14DB                     u8445:	
  4292  14DB  1D03               	skipz
  4293  14DC  2CDF               	goto	l8317
  4294                           
  4295                           ;main_B1.c: 207: myMain.PowerCount = 0;
  4296  14DD  01A1               	clrf	(_myMain^(0+128)+1)
  4297  14DE  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4298  14DF                     l8317:	
  4299                           
  4300                           ;main_B1.c: 219: }
  4301                           ;main_B1.c: 221: myMain.Count1++;
  4302  14DF  3001               	movlw	1
  4303  14E0  07A5               	addwf	(_myMain^(0+128)+5),f
  4304  14E1  3000               	movlw	0
  4305  14E2  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4306                           
  4307                           ;main_B1.c: 222: if (myMain.Count1 == 100)
  4308  14E3  3005               	movlw	5
  4309  14E4  3EA0               	addlw	_myMain& (0+255)
  4310  14E5  0086               	movwf	6
  4311  14E6  0187               	clrf	7
  4312  14E7  3F40               	moviw [0]fsr1
  4313  14E8  3A64               	xorlw	100
  4314  14E9  1D03               	skipz
  4315  14EA  2CED               	goto	u8455
  4316  14EB  3F41               	moviw [1]fsr1
  4317  14EC  3A00               	xorlw	0
  4318  14ED                     u8455:	
  4319  14ED  1D03               	skipz
  4320  14EE  0008               	return
  4321                           
  4322                           ;main_B1.c: 223: {
  4323                           ;main_B1.c: 224: myMain.Count1 = 0;
  4324  14EF  01A5               	clrf	(_myMain^(0+128)+5)
  4325  14F0  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4326                           
  4327                           ;main_B1.c: 236: if (myMain.Flag) {
  4328  14F1  1CA0               	btfss	_myMain^(0+128),1
  4329  14F2  2CF5               	goto	l2681
  4330                           
  4331                           ;main_B1.c: 237: myMain.Flag = 0;
  4332  14F3  10A0               	bcf	_myMain^(0+128),1
  4333                           
  4334                           ;main_B1.c: 246: } else {
  4335  14F4  0008               	return
  4336  14F5                     l2681:	
  4337                           
  4338                           ;main_B1.c: 247: myMain.Flag = 1;
  4339  14F5  14A0               	bsf	_myMain^(0+128),1
  4340  14F6  0008               	return
  4341  14F7                     __end_of_my_MainTimer:	
  4342                           
  4343                           	psect	text2
  4344  1BC2                     __ptext2:	
  4345 ;; *************** function _myMain_Initialization *****************
  4346 ;; Defined at:
  4347 ;;		line 168 in file "../src/main_B1.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;		None
  4352 ;; Return value:  Size  Location     Type
  4353 ;;		None               void
  4354 ;; Registers used:
  4355 ;;		wreg, fsr1l, fsr1h
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;Total ram usage:        1 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    5
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_main
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           
  4376                           ;psect for function _myMain_Initialization
  4377  1BC2                     _myMain_Initialization:	
  4378                           
  4379                           ;main_B1.c: 170: product = &_product;
  4380                           
  4381                           ;incstack = 0
  4382                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4383  1BC2  3045               	movlw	__product& (0+255)
  4384  1BC3  0020               	movlb	0	; select bank0
  4385  1BC4  00A0               	movwf	??_myMain_Initialization
  4386  1BC5  0820               	movf	??_myMain_Initialization,w
  4387  1BC6  00EE               	movwf	_product
  4388                           
  4389                           ;main_B1.c: 171: product->Data[20] = 210;
  4390  1BC7  30D2               	movlw	210
  4391  1BC8  00A0               	movwf	??_myMain_Initialization
  4392  1BC9  086E               	movf	_product,w
  4393  1BCA  3E14               	addlw	20
  4394  1BCB  0086               	movwf	6
  4395  1BCC  3002               	movlw	2	; select bank4/5
  4396  1BCD  0087               	movwf	7
  4397  1BCE  0820               	movf	??_myMain_Initialization,w
  4398  1BCF  0081               	movwf	1
  4399  1BD0  0008               	return
  4400  1BD1                     __end_of_myMain_Initialization:	
  4401                           
  4402                           	psect	text3
  4403  129D                     __ptext3:	
  4404 ;; *************** function _getTemp_AD *****************
  4405 ;; Defined at:
  4406 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  channel         1    wreg     unsigned char 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  channel         1    5[BANK0 ] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;		None               void
  4413 ;; Registers used:
  4414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;Total ram usage:        2 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    7
  4427 ;; This function calls:
  4428 ;;		_getAD
  4429 ;; This function is called by:
  4430 ;;		_main
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _getTemp_AD
  4436  129D                     _getTemp_AD:	
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4440                           ;getTemp_AD@channel stored from wreg
  4441  129D  0020               	movlb	0	; select bank0
  4442  129E  00A5               	movwf	getTemp_AD@channel
  4443                           
  4444                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4445  129F  0021               	movlb	1	; select bank1
  4446  12A0  1D57               	btfss	_Temp^(0+128),2
  4447  12A1  0008               	return
  4448                           
  4449                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4450  12A2  1657               	bsf	_Temp^(0+128),4
  4451                           
  4452                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4453  12A3  30F0               	movlw	240
  4454  12A4  0020               	movlb	0	; select bank0
  4455  12A5  00A4               	movwf	??_getTemp_AD
  4456  12A6  0824               	movf	??_getTemp_AD,w
  4457  12A7  00A0               	movwf	getAD@adcon1
  4458  12A8  0825               	movf	getTemp_AD@channel,w
  4459  12A9  319E  269A  3192   	fcall	_getAD
  4460  12AC  0020               	movlb	0	; select bank0
  4461  12AD  0821               	movf	?_getAD+1,w
  4462  12AE  0021               	movlb	1	; select bank1
  4463  12AF  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4464  12B0  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4465  12B1  0020               	movlb	0	; select bank0
  4466  12B2  0820               	movf	?_getAD,w
  4467  12B3  0021               	movlb	1	; select bank1
  4468  12B4  01E3               	clrf	(_Temp^(0+128)+12)
  4469  12B5  07E3               	addwf	(_Temp^(0+128)+12),f
  4470                           
  4471                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4472  12B6  0864               	movf	((_Temp+1)^(0+128)+12),w
  4473  12B7  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4474  12B8  1D03               	skipz
  4475  12B9  2ABC               	goto	u8375
  4476  12BA  0863               	movf	(_Temp^(0+128)+12),w
  4477  12BB  025F               	subwf	(_Temp^(0+128)+8),w
  4478  12BC                     u8375:	
  4479  12BC  1803               	skipnc
  4480  12BD  2AC5               	goto	l8259
  4481                           
  4482                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4483  12BE  0864               	movf	((_Temp+1)^(0+128)+12),w
  4484  12BF  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4485  12C0  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4486  12C1  0863               	movf	(_Temp^(0+128)+12),w
  4487  12C2  01DF               	clrf	(_Temp^(0+128)+8)
  4488  12C3  07DF               	addwf	(_Temp^(0+128)+8),f
  4489                           
  4490                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4491  12C4  0008               	return
  4492  12C5                     l8259:	
  4493  12C5  0864               	movf	((_Temp+1)^(0+128)+12),w
  4494  12C6  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4495  12C7  1D03               	skipz
  4496  12C8  2ACB               	goto	u8385
  4497  12C9  0863               	movf	(_Temp^(0+128)+12),w
  4498  12CA  0261               	subwf	(_Temp^(0+128)+10),w
  4499  12CB                     u8385:	
  4500  12CB  1803               	skipnc
  4501  12CC  0008               	return
  4502                           
  4503                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4504  12CD  0864               	movf	((_Temp+1)^(0+128)+12),w
  4505  12CE  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4506  12CF  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4507  12D0  0863               	movf	(_Temp^(0+128)+12),w
  4508  12D1  01E1               	clrf	(_Temp^(0+128)+10)
  4509  12D2  07E1               	addwf	(_Temp^(0+128)+10),f
  4510  12D3  0008               	return
  4511  12D4                     __end_of_getTemp_AD:	
  4512                           
  4513                           	psect	text4
  4514  0BDD                     __ptext4:	
  4515 ;; *************** function _getLoad_AD *****************
  4516 ;; Defined at:
  4517 ;;		line 15 in file "../src/OverLoad_B1.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  channel         1    wreg     unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  channel         1    6[BANK0 ] unsigned char 
  4522 ;;  i               1    9[BANK0 ] unsigned char 
  4523 ;;  j               1    8[BANK0 ] unsigned char 
  4524 ;;  k               1    7[BANK0 ] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;		None               void
  4527 ;; Registers used:
  4528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;Total ram usage:        6 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    7
  4541 ;; This function calls:
  4542 ;;		_getAD
  4543 ;; This function is called by:
  4544 ;;		_main
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           
  4549                           ;psect for function _getLoad_AD
  4550  0BDD                     _getLoad_AD:	
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4554                           ;getLoad_AD@channel stored from wreg
  4555  0BDD  0020               	movlb	0	; select bank0
  4556  0BDE  00A6               	movwf	getLoad_AD@channel
  4557                           
  4558                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4559  0BDF  01A9               	clrf	getLoad_AD@i
  4560  0BE0  01A8               	clrf	getLoad_AD@j
  4561  0BE1  01A7               	clrf	getLoad_AD@k
  4562                           
  4563                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4564  0BE2  0022               	movlb	2	; select bank2
  4565  0BE3  1E25               	btfss	_Load^(0+256),4
  4566  0BE4  0008               	return
  4567                           
  4568                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4569  0BE5  30F3               	movlw	243
  4570  0BE6  0020               	movlb	0	; select bank0
  4571  0BE7  00A4               	movwf	??_getLoad_AD
  4572  0BE8  0824               	movf	??_getLoad_AD,w
  4573  0BE9  00A0               	movwf	getAD@adcon1
  4574  0BEA  0826               	movf	getLoad_AD@channel,w
  4575  0BEB  319E  269A  318B   	fcall	_getAD
  4576  0BEE  0020               	movlb	0	; select bank0
  4577  0BEF  0821               	movf	?_getAD+1,w
  4578  0BF0  0022               	movlb	2	; select bank2
  4579  0BF1  01C7               	clrf	((_Load+1)^(0+256)+33)
  4580  0BF2  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4581  0BF3  0020               	movlb	0	; select bank0
  4582  0BF4  0820               	movf	?_getAD,w
  4583  0BF5  0022               	movlb	2	; select bank2
  4584  0BF6  01C6               	clrf	(_Load^(0+256)+33)
  4585  0BF7  07C6               	addwf	(_Load^(0+256)+33),f
  4586                           
  4587                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4588  0BF8  0020               	movlb	0	; select bank0
  4589  0BF9  01A9               	clrf	getLoad_AD@i
  4590  0BFA  3004               	movlw	4
  4591  0BFB  0229               	subwf	getLoad_AD@i,w
  4592  0BFC  1803               	btfsc	3,0
  4593  0BFD  2C2B               	goto	l8077
  4594  0BFE                     l8065:	
  4595                           
  4596                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4597  0BFE  3529               	lslf	getLoad_AD@i,w
  4598  0BFF  3E30               	addlw	(_Load+11)& (0+255)
  4599  0C00  0086               	movwf	6
  4600  0C01  3001               	movlw	1	; select bank2/3
  4601  0C02  0087               	movwf	7
  4602  0C03  3F40               	moviw [0]fsr1
  4603  0C04  00A4               	movwf	??_getLoad_AD
  4604  0C05  3F41               	moviw [1]fsr1
  4605  0C06  00A5               	movwf	??_getLoad_AD+1
  4606  0C07  0022               	movlb	2	; select bank2
  4607  0C08  0847               	movf	((_Load+1)^(0+256)+33),w
  4608  0C09  0020               	movlb	0	; select bank0
  4609  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4610  0C0B  1D03               	skipz
  4611  0C0C  2C11               	goto	u8015
  4612  0C0D  0022               	movlb	2	; select bank2
  4613  0C0E  0846               	movf	(_Load^(0+256)+33),w
  4614  0C0F  0020               	movlb	0	; select bank0
  4615  0C10  0224               	subwf	??_getLoad_AD,w
  4616  0C11                     u8015:	
  4617  0C11  1803               	skipnc
  4618  0C12  2C23               	goto	l8073
  4619  0C13  08A8               	movf	getLoad_AD@j,f
  4620  0C14  1D03               	skipz
  4621  0C15  2C23               	goto	l8073
  4622                           
  4623                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4624  0C16  3529               	lslf	getLoad_AD@i,w
  4625  0C17  3E30               	addlw	(_Load+11)& (0+255)
  4626  0C18  0086               	movwf	6
  4627  0C19  3001               	movlw	1	; select bank2/3
  4628  0C1A  0087               	movwf	7
  4629  0C1B  0022               	movlb	2	; select bank2
  4630  0C1C  0846               	movf	(_Load^(0+256)+33),w
  4631  0C1D  3FC0               	movwi [0]fsr1
  4632  0C1E  0847               	movf	((_Load+1)^(0+256)+33),w
  4633  0C1F  3FC1               	movwi [1]fsr1
  4634                           
  4635                           ;OverLoad_B1.c: 24: j = 1;
  4636  0C20  0020               	movlb	0	; select bank0
  4637  0C21  01A8               	clrf	getLoad_AD@j
  4638  0C22  0AA8               	incf	getLoad_AD@j,f
  4639  0C23                     l8073:	
  4640  0C23  3001               	movlw	1
  4641  0C24  00A4               	movwf	??_getLoad_AD
  4642  0C25  0824               	movf	??_getLoad_AD,w
  4643  0C26  07A9               	addwf	getLoad_AD@i,f
  4644  0C27  3004               	movlw	4
  4645  0C28  0229               	subwf	getLoad_AD@i,w
  4646  0C29  1C03               	skipc
  4647  0C2A  2BFE               	goto	l8065
  4648  0C2B                     l8077:	
  4649                           
  4650                           ;OverLoad_B1.c: 25: }
  4651                           ;OverLoad_B1.c: 26: }
  4652                           ;OverLoad_B1.c: 27: if (j == 0) {
  4653  0C2B  08A8               	movf	getLoad_AD@j,f
  4654  0C2C  1D03               	skipz
  4655  0C2D  0008               	return
  4656                           
  4657                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4658  0C2E  01A9               	clrf	getLoad_AD@i
  4659  0C2F                     L1:	
  4660  0C2F  3004               	movlw	4
  4661  0C30  0229               	subwf	getLoad_AD@i,w
  4662  0C31  1803               	btfsc	3,0
  4663  0C32  0008               	return
  4664                           
  4665                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4666  0C33  3529               	lslf	getLoad_AD@i,w
  4667  0C34  3E3A               	addlw	(_Load+21)& (0+255)
  4668  0C35  0086               	movwf	6
  4669  0C36  3001               	movlw	1	; select bank2/3
  4670  0C37  0087               	movwf	7
  4671  0C38  3F40               	moviw [0]fsr1
  4672  0C39  00A4               	movwf	??_getLoad_AD
  4673  0C3A  3F41               	moviw [1]fsr1
  4674  0C3B  00A5               	movwf	??_getLoad_AD+1
  4675  0C3C  0825               	movf	??_getLoad_AD+1,w
  4676  0C3D  0022               	movlb	2	; select bank2
  4677  0C3E  0247               	subwf	((_Load+1)^(0+256)+33),w
  4678  0C3F  1D03               	skipz
  4679  0C40  2C45               	goto	u8065
  4680  0C41  0020               	movlb	0	; select bank0
  4681  0C42  0824               	movf	??_getLoad_AD,w
  4682  0C43  0022               	movlb	2	; select bank2
  4683  0C44  0246               	subwf	(_Load^(0+256)+33),w
  4684  0C45                     u8065:	
  4685  0C45  1803               	skipnc
  4686  0C46  2C58               	goto	l8093
  4687  0C47  0020               	movlb	0	; select bank0
  4688  0C48  08A7               	movf	getLoad_AD@k,f
  4689  0C49  1D03               	skipz
  4690  0C4A  2C58               	goto	l8093
  4691                           
  4692                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4693  0C4B  3529               	lslf	getLoad_AD@i,w
  4694  0C4C  3E3A               	addlw	(_Load+21)& (0+255)
  4695  0C4D  0086               	movwf	6
  4696  0C4E  3001               	movlw	1	; select bank2/3
  4697  0C4F  0087               	movwf	7
  4698  0C50  0022               	movlb	2	; select bank2
  4699  0C51  0846               	movf	(_Load^(0+256)+33),w
  4700  0C52  3FC0               	movwi [0]fsr1
  4701  0C53  0847               	movf	((_Load+1)^(0+256)+33),w
  4702  0C54  3FC1               	movwi [1]fsr1
  4703                           
  4704                           ;OverLoad_B1.c: 31: k = 1;
  4705  0C55  0020               	movlb	0	; select bank0
  4706  0C56  01A7               	clrf	getLoad_AD@k
  4707  0C57  0AA7               	incf	getLoad_AD@k,f
  4708  0C58                     l8093:	
  4709  0C58  3001               	movlw	1
  4710  0C59  0020               	movlb	0	; select bank0
  4711  0C5A  00A4               	movwf	??_getLoad_AD
  4712  0C5B  0824               	movf	??_getLoad_AD,w
  4713  0C5C  07A9               	addwf	getLoad_AD@i,f
  4714  0C5D  2C2F               	goto	L1
  4715  0C5E                     __end_of_getLoad_AD:	
  4716                           
  4717                           	psect	text5
  4718  1E9A                     __ptext5:	
  4719 ;; *************** function _getAD *****************
  4720 ;; Defined at:
  4721 ;;		line 455 in file "../src/MCU_B1.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  adcon0          1    wreg     unsigned char 
  4724 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  2    0[BANK0 ] int 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4736 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;Total ram usage:        4 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    6
  4743 ;; This function calls:
  4744 ;;		_Timeout_Counter
  4745 ;;		_set_TimeoutCleared
  4746 ;; This function is called by:
  4747 ;;		_getLoad_AD
  4748 ;;		_getTemp_AD
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _getAD
  4754  1E9A                     _getAD:	
  4755                           
  4756                           ;incstack = 0
  4757                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4758                           ;getAD@adcon0 stored from wreg
  4759  1E9A  0020               	movlb	0	; select bank0
  4760  1E9B  00A3               	movwf	getAD@adcon0
  4761                           
  4762                           ;MCU_B1.c: 456: ADCON0 = adcon0;
  4763  1E9C  0823               	movf	getAD@adcon0,w
  4764  1E9D  0021               	movlb	1	; select bank1
  4765  1E9E  009D               	movwf	29	;volatile
  4766                           
  4767                           ;MCU_B1.c: 457: ADCON1 = adcon1;
  4768  1E9F  0020               	movlb	0	; select bank0
  4769  1EA0  0820               	movf	getAD@adcon1,w
  4770  1EA1  0021               	movlb	1	; select bank1
  4771  1EA2  009E               	movwf	30	;volatile
  4772                           
  4773                           ;MCU_B1.c: 458: GO_nDONE = 1;
  4774  1EA3  149D               	bsf	29,1	;volatile
  4775                           
  4776                           ;MCU_B1.c: 459: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4777  1EA4  2EA8               	goto	l7475
  4778  1EA5                     l7473:	
  4779                           
  4780                           ;MCU_B1.c: 460: Timeout_Counter();
  4781  1EA5  319D  2517  319E   	fcall	_Timeout_Counter
  4782  1EA8                     l7475:	
  4783  1EA8  0021               	movlb	1	; select bank1
  4784  1EA9  1C9D               	btfss	29,1	;volatile
  4785  1EAA  2EAD               	goto	l7479
  4786  1EAB  1D2C               	btfss	(_myMain^(0+128)+12),2
  4787  1EAC  2EA5               	goto	l7473
  4788  1EAD                     l7479:	
  4789                           
  4790                           ;MCU_B1.c: 461: };
  4791                           ;MCU_B1.c: 462: set_TimeoutCleared();
  4792  1EAD  319A  22BA         	fcall	_set_TimeoutCleared
  4793                           
  4794                           ;MCU_B1.c: 463: return ((ADRESH*256)+ADRESL);
  4795  1EAF  0021               	movlb	1	; select bank1
  4796  1EB0  081C               	movf	28,w	;volatile
  4797  1EB1  0020               	movlb	0	; select bank0
  4798  1EB2  01A1               	clrf	?_getAD+1
  4799  1EB3  07A1               	addwf	?_getAD+1,f
  4800  1EB4  0021               	movlb	1	; select bank1
  4801  1EB5  081B               	movf	27,w	;volatile
  4802  1EB6  0020               	movlb	0	; select bank0
  4803  1EB7  01A0               	clrf	?_getAD
  4804  1EB8  07A0               	addwf	?_getAD,f
  4805  1EB9  0008               	return
  4806  1EBA                     __end_of_getAD:	
  4807                           
  4808                           	psect	text6
  4809  1C7D                     __ptext6:	
  4810 ;; *************** function _WDT_Main *****************
  4811 ;; Defined at:
  4812 ;;		line 1058 in file "../src/MCU_B1.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;		None               void
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, pclath, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;Total ram usage:        1 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    6
  4833 ;; This function calls:
  4834 ;;		_WDT_Clearing
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _WDT_Main
  4842  1C7D                     _WDT_Main:	
  4843                           
  4844                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4848  1C7D  0021               	movlb	1	; select bank1
  4849  1C7E  1C4A               	btfss	_WDT^(0+128),0
  4850  1C7F  0008               	return
  4851                           
  4852                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  4853  1C80  3001               	movlw	1
  4854  1C81  02CB               	subwf	(_WDT^(0+128)+1),f
  4855  1C82  084B               	movf	(_WDT^(0+128)+1),w
  4856  1C83  3AFF               	xorlw	255
  4857  1C84  1903               	skipnz
  4858  1C85  0008               	return
  4859                           
  4860                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  4861  1C86  3064               	movlw	100
  4862  1C87  0020               	movlb	0	; select bank0
  4863  1C88  00A0               	movwf	??_WDT_Main
  4864  1C89  0820               	movf	??_WDT_Main,w
  4865  1C8A  0021               	movlb	1	; select bank1
  4866  1C8B  00CB               	movwf	(_WDT^(0+128)+1)
  4867                           
  4868                           ;MCU_B1.c: 1062: WDT_Clearing();
  4869  1C8C  3180  2002         	fcall	_WDT_Clearing
  4870  1C8E  0008               	return
  4871  1C8F                     __end_of_WDT_Main:	
  4872                           
  4873                           	psect	text7
  4874  0002                     __ptext7:	
  4875 ;; *************** function _WDT_Clearing *****************
  4876 ;; Defined at:
  4877 ;;		line 1068 in file "../src/MCU_B1.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;		None
  4882 ;; Return value:  Size  Location     Type
  4883 ;;		None               void
  4884 ;; Registers used:
  4885 ;;		None
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4895 ;;Total ram usage:        0 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:    5
  4898 ;; This function calls:
  4899 ;;		Nothing
  4900 ;; This function is called by:
  4901 ;;		_WDT_Main
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           
  4906                           ;psect for function _WDT_Clearing
  4907  0002                     _WDT_Clearing:	
  4908                           
  4909                           ;incstack = 0
  4910                           ; Regs used in _WDT_Clearing: []
  4911  0002  0064               	clrwdt	;# 
  4912  0003  0008               	return
  4913  0004                     __end_of_WDT_Clearing:	
  4914                           
  4915                           	psect	text8
  4916  0800                     __ptext8:	
  4917 ;; *************** function _Temp_Main *****************
  4918 ;; Defined at:
  4919 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;		None
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;		None               void
  4926 ;; Registers used:
  4927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;Total ram usage:        0 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    8
  4940 ;; This function calls:
  4941 ;;		_setTemp_Main
  4942 ;; This function is called by:
  4943 ;;		_main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _Temp_Main
  4949  0800                     _Temp_Main:	
  4950                           
  4951                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4955  0800  318D  25FE         	fcall	_setTemp_Main
  4956  0802  0008               	return
  4957  0803                     __end_of_Temp_Main:	
  4958                           
  4959                           	psect	text9
  4960  0DFE                     __ptext9:	
  4961 ;; *************** function _setTemp_Main *****************
  4962 ;; Defined at:
  4963 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;Total ram usage:        2 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    7
  4984 ;; This function calls:
  4985 ;;		_getMain_All_Error_Status
  4986 ;;		_setBuz
  4987 ;; This function is called by:
  4988 ;;		_Temp_Main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _setTemp_Main
  4994  0DFE                     _setTemp_Main:	
  4995                           
  4996                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5000  0DFE  0021               	movlb	1	; select bank1
  5001  0DFF  1C57               	btfss	_Temp^(0+128),0
  5002  0E00  2E9F               	goto	l1618
  5003                           
  5004                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  5005  0E01  1957               	btfsc	_Temp^(0+128),2
  5006  0E02  2E12               	goto	l7551
  5007                           
  5008                           ;OverTemperature_B1.c: 60: Temp.Time++;
  5009  0E03  3001               	movlw	1
  5010  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  5011  0E05  3000               	movlw	0
  5012  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5013                           
  5014                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  5015  0E07  3001               	movlw	1
  5016  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5017  0E09  30F4               	movlw	244
  5018  0E0A  1903               	skipnz
  5019  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  5020  0E0C  1C03               	skipc
  5021  0E0D  0008               	return
  5022                           
  5023                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  5024  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  5025  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5026                           
  5027                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  5028  0E10  1557               	bsf	_Temp^(0+128),2
  5029                           
  5030                           ;OverTemperature_B1.c: 64: }
  5031                           ;OverTemperature_B1.c: 65: } else {
  5032  0E11  0008               	return
  5033  0E12                     l7551:	
  5034                           
  5035                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5036  0E12  3002               	movlw	2
  5037  0E13  3191  215E  318D   	fcall	_getMain_All_Error_Status
  5038  0E16  3800               	iorlw	0
  5039  0E17  1D03               	skipz
  5040  0E18  0008               	return
  5041                           
  5042                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5043  0E19  3001               	movlw	1
  5044  0E1A  0021               	movlb	1	; select bank1
  5045  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  5046  0E1C  3000               	movlw	0
  5047  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5048                           
  5049                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5050  0E1E  3000               	movlw	0
  5051  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5052  0E20  3005               	movlw	5
  5053  0E21  1903               	skipnz
  5054  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  5055  0E23  1C03               	skipc
  5056  0E24  0008               	return
  5057                           
  5058                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5059  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  5060  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5061                           
  5062                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5063  0E27  1E57               	btfss	_Temp^(0+128),4
  5064  0E28  0008               	return
  5065                           
  5066                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5067  0E29  1157               	bcf	_Temp^(0+128),2
  5068                           
  5069                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5070  0E2A  300A               	movlw	10
  5071  0E2B  3ED7               	addlw	_Temp& (0+255)
  5072  0E2C  0086               	movwf	6
  5073  0E2D  0187               	clrf	7
  5074  0E2E  3008               	movlw	8
  5075  0E2F  3ED7               	addlw	_Temp& (0+255)
  5076  0E30  0084               	movwf	4
  5077  0E31  0185               	clrf	5
  5078  0E32  3F40               	moviw [0]fsr1
  5079  0E33  0700               	addwf	0,w
  5080  0E34  0020               	movlb	0	; select bank0
  5081  0E35  00AD               	movwf	??_setTemp_Main
  5082  0E36  3101               	addfsr 0,1
  5083  0E37  3F41               	moviw [1]fsr1
  5084  0E38  3D00               	addwfc	0,w
  5085  0E39  00AE               	movwf	??_setTemp_Main+1
  5086  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5087  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5088  0E3C  082D               	movf	??_setTemp_Main,w
  5089  0E3D  0021               	movlb	1	; select bank1
  5090  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  5091  0E3F  0020               	movlb	0	; select bank0
  5092  0E40  082E               	movf	??_setTemp_Main+1,w
  5093  0E41  0021               	movlb	1	; select bank1
  5094  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5095                           
  5096                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5097  0E43  30C7               	movlw	199
  5098  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  5099  0E45  3001               	movlw	1
  5100  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  5101                           
  5102                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5103  0E47  309F               	movlw	159
  5104  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  5105  0E49  3001               	movlw	1
  5106  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  5107                           
  5108                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5109  0E4B  1CD7               	btfss	_Temp^(0+128),1
  5110  0E4C  2E6D               	goto	l7583
  5111                           
  5112                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5113  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  5114  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5115  0E4F  1D03               	skipz
  5116  0E50  2E53               	goto	u7115
  5117  0E51  0865               	movf	(_Temp^(0+128)+14),w
  5118  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  5119  0E53                     u7115:	
  5120  0E53  1C03               	skipc
  5121  0E54  2E6B               	goto	l7581
  5122                           
  5123                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5124  0E55  3001               	movlw	1
  5125  0E56  0020               	movlb	0	; select bank0
  5126  0E57  00AD               	movwf	??_setTemp_Main
  5127  0E58  082D               	movf	??_setTemp_Main,w
  5128  0E59  0021               	movlb	1	; select bank1
  5129  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  5130                           
  5131                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5132  0E5B  3003               	movlw	3
  5133  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  5134  0E5D  1C03               	skipc
  5135  0E5E  2E83               	goto	l7595
  5136                           
  5137                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5138  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  5139                           
  5140                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5141  0E60  10D7               	bcf	_Temp^(0+128),1
  5142                           
  5143                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5144  0E61  3064               	movlw	100
  5145  0E62  0020               	movlb	0	; select bank0
  5146  0E63  00A9               	movwf	setBuz@time
  5147  0E64  3000               	movlw	0
  5148  0E65  00AA               	movwf	setBuz@time+1
  5149  0E66  3002               	movlw	2
  5150  0E67  3196  263C  318D   	fcall	_setBuz
  5151                           
  5152                           ;OverTemperature_B1.c: 96: }
  5153                           ;OverTemperature_B1.c: 97: } else {
  5154  0E6A  2E83               	goto	l7595
  5155  0E6B                     l7581:	
  5156                           
  5157                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5158  0E6B  0021               	movlb	1	; select bank1
  5159  0E6C  2E82               	goto	l7593
  5160  0E6D                     l7583:	
  5161                           ;OverTemperature_B1.c: 99: }
  5162                           ;OverTemperature_B1.c: 100: } else {
  5163                           
  5164                           
  5165                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5166  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5167  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5168  0E6F  1D03               	skipz
  5169  0E70  2E73               	goto	u7135
  5170  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5171  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5172  0E73                     u7135:	
  5173  0E73  1C03               	skipc
  5174  0E74  2E82               	goto	l7593
  5175                           
  5176                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5177  0E75  3001               	movlw	1
  5178  0E76  0020               	movlb	0	; select bank0
  5179  0E77  00AD               	movwf	??_setTemp_Main
  5180  0E78  082D               	movf	??_setTemp_Main,w
  5181  0E79  0021               	movlb	1	; select bank1
  5182  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5183                           
  5184                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5185  0E7B  3003               	movlw	3
  5186  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5187  0E7D  1C03               	skipc
  5188  0E7E  2E83               	goto	l7595
  5189                           
  5190                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5191  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5192                           
  5193                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5194  0E80  14D7               	bsf	_Temp^(0+128),1
  5195                           
  5196                           ;OverTemperature_B1.c: 106: }
  5197                           ;OverTemperature_B1.c: 107: } else {
  5198  0E81  2E83               	goto	l7595
  5199  0E82                     l7593:	
  5200                           
  5201                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5202  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5203  0E83                     l7595:	
  5204                           
  5205                           ;OverTemperature_B1.c: 109: }
  5206                           ;OverTemperature_B1.c: 110: }
  5207                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5208  0E83  0021               	movlb	1	; select bank1
  5209  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5210  0E85  0020               	movlb	0	; select bank0
  5211  0E86  00AD               	movwf	??_setTemp_Main
  5212  0E87  086E               	movf	_product,w
  5213  0E88  3E18               	addlw	24
  5214  0E89  0086               	movwf	6
  5215  0E8A  3002               	movlw	2	; select bank4/5
  5216  0E8B  0087               	movwf	7
  5217  0E8C  082D               	movf	??_setTemp_Main,w
  5218  0E8D  0081               	movwf	1
  5219                           
  5220                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5221  0E8E  0021               	movlb	1	; select bank1
  5222  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5223  0E90  0020               	movlb	0	; select bank0
  5224  0E91  00AD               	movwf	??_setTemp_Main
  5225  0E92  086E               	movf	_product,w
  5226  0E93  3E19               	addlw	25
  5227  0E94  0086               	movwf	6
  5228  0E95  3002               	movlw	2	; select bank4/5
  5229  0E96  0087               	movwf	7
  5230  0E97  082D               	movf	??_setTemp_Main,w
  5231  0E98  0081               	movwf	1
  5232                           
  5233                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5234  0E99  0021               	movlb	1	; select bank1
  5235  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5236  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5237                           
  5238                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5239  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5240  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5241                           
  5242                           ;OverTemperature_B1.c: 120: }
  5243                           ;OverTemperature_B1.c: 121: }
  5244                           ;OverTemperature_B1.c: 122: }
  5245                           ;OverTemperature_B1.c: 123: }
  5246                           ;OverTemperature_B1.c: 124: } else {
  5247  0E9E  0008               	return
  5248  0E9F                     l1618:	
  5249                           
  5250                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5251  0E9F  1C20               	btfss	_myMain^(0+128),0
  5252  0EA0  0008               	return
  5253                           
  5254                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5255  0EA1  1457               	bsf	_Temp^(0+128),0
  5256  0EA2  0008               	return
  5257  0EA3                     __end_of_setTemp_Main:	
  5258                           
  5259                           	psect	text10
  5260  1AA7                     __ptext10:	
  5261 ;; *************** function _Temp_Initialization *****************
  5262 ;; Defined at:
  5263 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;		None
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;		None               void
  5270 ;; Registers used:
  5271 ;;		status,2, status,0, pclath, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;Total ram usage:        0 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    6
  5284 ;; This function calls:
  5285 ;;		_setTemp_Initialization
  5286 ;; This function is called by:
  5287 ;;		_main
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _Temp_Initialization
  5293  1AA7                     _Temp_Initialization:	
  5294                           
  5295                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5296                           
  5297                           ;incstack = 0
  5298                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5299  1AA7  319A  229D         	fcall	_setTemp_Initialization
  5300  1AA9  0008               	return
  5301  1AAA                     __end_of_Temp_Initialization:	
  5302                           
  5303                           	psect	text11
  5304  1A9D                     __ptext11:	
  5305 ;; *************** function _setTemp_Initialization *****************
  5306 ;; Defined at:
  5307 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;		None
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;		None
  5312 ;; Return value:  Size  Location     Type
  5313 ;;		None               void
  5314 ;; Registers used:
  5315 ;;		None
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;Total ram usage:        0 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    5
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_Temp_Initialization
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function _setTemp_Initialization
  5337  1A9D                     _setTemp_Initialization:	
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _setTemp_Initialization: []
  5341  1A9D  0008               	return
  5342  1A9E                     __end_of_setTemp_Initialization:	
  5343                           
  5344                           	psect	text12
  5345  1F42                     __ptext12:	
  5346 ;; *************** function _Switch_Main *****************
  5347 ;; Defined at:
  5348 ;;		line 72 in file "../src/Switch_B1.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  error           1   30[BANK0 ] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;		None               void
  5355 ;; Registers used:
  5356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;Total ram usage:        2 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:   11
  5369 ;; This function calls:
  5370 ;;		_TouchPower
  5371 ;;		_getMain_All_Error_Status
  5372 ;;		_setMain_Exception
  5373 ;;		_setSw_Main
  5374 ;; This function is called by:
  5375 ;;		_main
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _Switch_Main
  5381  1F42                     _Switch_Main:	
  5382                           
  5383                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5387  1F42  3000               	movlw	0
  5388  1F43  3191  215E  319F   	fcall	_getMain_All_Error_Status
  5389  1F46  0020               	movlb	0	; select bank0
  5390  1F47  00BD               	movwf	??_Switch_Main
  5391  1F48  083D               	movf	??_Switch_Main,w
  5392  1F49  00BE               	movwf	Switch_Main@error
  5393                           
  5394                           ;Switch_B1.c: 74: if (error != 0) {
  5395  1F4A  083E               	movf	Switch_Main@error,w
  5396  1F4B  1903               	btfsc	3,2
  5397  1F4C  2F52               	goto	l2386
  5398                           
  5399                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5400  1F4D  0021               	movlb	1	; select bank1
  5401  1F4E  1852               	btfsc	_SwDetect^(0+128),0
  5402  1F4F  2F5B               	goto	l8287
  5403                           
  5404                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5405  1F50  1452               	bsf	_SwDetect^(0+128),0
  5406  1F51  2F56               	goto	L2
  5407  1F52                     l2386:	
  5408                           ;Switch_B1.c: 80: }
  5409                           ;Switch_B1.c: 81: } else {
  5410                           
  5411                           ;Switch_B1.c: 78: setMain_Exception(error);
  5412                           
  5413                           
  5414                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5415  1F52  0021               	movlb	1	; select bank1
  5416  1F53  1C52               	btfss	_SwDetect^(0+128),0
  5417  1F54  2F5B               	goto	l8287
  5418                           
  5419                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5420  1F55  1052               	bcf	_SwDetect^(0+128),0
  5421  1F56                     L2:	
  5422                           
  5423                           ;Switch_B1.c: 85: setMain_Exception(error);
  5424  1F56  0020               	movlb	0	; select bank0
  5425  1F57  083E               	movf	Switch_Main@error,w
  5426  1F58  3197  27A4  319F   	fcall	_setMain_Exception
  5427  1F5B                     l8287:	
  5428                           
  5429                           ;Switch_B1.c: 87: }
  5430                           ;Switch_B1.c: 88: }
  5431                           ;Switch_B1.c: 91: setSw_Main(1);
  5432  1F5B  3001               	movlw	1
  5433  1F5C  3181  21C8  319F   	fcall	_setSw_Main
  5434                           
  5435                           ;Switch_B1.c: 95: setSw_Main(2);
  5436  1F5F  3002               	movlw	2
  5437  1F60  3181  21C8  319F   	fcall	_setSw_Main
  5438                           
  5439                           ;Switch_B1.c: 103: TouchPower();
  5440  1F63  319D  2556         	fcall	_TouchPower
  5441  1F65  0008               	return
  5442  1F66                     __end_of_Switch_Main:	
  5443                           
  5444                           	psect	text13
  5445  01C8                     __ptext13:	
  5446 ;; *************** function _setSw_Main *****************
  5447 ;; Defined at:
  5448 ;;		line 137 in file "../src/Switch_B1.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  sw              1    wreg     unsigned char 
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  sw              1   19[BANK0 ] unsigned char 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;		None               void
  5455 ;; Registers used:
  5456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;Total ram usage:        3 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    9
  5469 ;; This function calls:
  5470 ;;		_SwPointSelect
  5471 ;;		_getSw_KeyStatus
  5472 ;;		_setBuz
  5473 ;;		_setDimmerLights_AdjControl
  5474 ;;		_setDimmerLights_SwOff
  5475 ;;		_setDimmerLights_SwOn
  5476 ;;		_setRF_Learn
  5477 ;; This function is called by:
  5478 ;;		_Switch_Main
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           
  5483                           ;psect for function _setSw_Main
  5484  01C8                     _setSw_Main:	
  5485                           
  5486                           ;incstack = 0
  5487                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5488                           ;setSw_Main@sw stored from wreg
  5489  01C8  0020               	movlb	0	; select bank0
  5490  01C9  00B3               	movwf	setSw_Main@sw
  5491                           
  5492                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5493  01CA  0833               	movf	setSw_Main@sw,w
  5494  01CB  319C  24EF  3181   	fcall	_SwPointSelect
  5495                           
  5496                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5497  01CE  087C               	movf	_Sw,w
  5498  01CF  0086               	movwf	6
  5499  01D0  3001               	movlw	1	; select bank2/3
  5500  01D1  0087               	movwf	7
  5501  01D2  1C01               	btfss	1,0
  5502  01D3  2B2E               	goto	l2396
  5503                           
  5504                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5505  01D4  0021               	movlb	1	; select bank1
  5506  01D5  1852               	btfsc	_SwDetect^(0+128),0
  5507  01D6  29F2               	goto	l7759
  5508                           
  5509                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5510  01D7  0A7C               	incf	_Sw,w
  5511  01D8  0086               	movwf	6
  5512  01D9  3001               	movlw	1	; select bank2/3
  5513  01DA  0087               	movwf	7
  5514  01DB  1081               	bcf	1,1
  5515                           
  5516                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5517  01DC  0020               	movlb	0	; select bank0
  5518  01DD  0833               	movf	setSw_Main@sw,w
  5519  01DE  319E  265B  3181   	fcall	_getSw_KeyStatus
  5520  01E1  3A01               	xorlw	1
  5521  01E2  3000               	movlw	0
  5522  01E3  1903               	skipnz
  5523  01E4  3001               	movlw	1
  5524  01E5  0020               	movlb	0	; select bank0
  5525  01E6  00B1               	movwf	??_setSw_Main
  5526  01E7  087C               	movf	_Sw,w
  5527  01E8  0086               	movwf	6
  5528  01E9  3001               	movlw	1	; select bank2/3
  5529  01EA  0087               	movwf	7
  5530  01EB  0DB1               	rlf	??_setSw_Main,f
  5531  01EC  0801               	movf	1,w
  5532  01ED  0631               	xorwf	??_setSw_Main,w
  5533  01EE  39FD               	andlw	-3
  5534  01EF  0631               	xorwf	??_setSw_Main,w
  5535  01F0  0081               	movwf	1
  5536                           
  5537                           ;Switch_B1.c: 143: } else {
  5538  01F1  2A07               	goto	l2398
  5539  01F2                     l7759:	
  5540                           
  5541                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5542  01F2  0A7C               	incf	_Sw,w
  5543  01F3  0086               	movwf	6
  5544  01F4  3001               	movlw	1	; select bank2/3
  5545  01F5  0087               	movwf	7
  5546  01F6  1881               	btfsc	1,1
  5547  01F7  2A07               	goto	l2398
  5548                           
  5549                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5550  01F8  0A7C               	incf	_Sw,w
  5551  01F9  0086               	movwf	6
  5552  01FA  3001               	movlw	1	; select bank2/3
  5553  01FB  0087               	movwf	7
  5554  01FC  1481               	bsf	1,1
  5555                           
  5556                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5557  01FD  087C               	movf	_Sw,w
  5558  01FE  0086               	movwf	6
  5559  01FF  3001               	movlw	1	; select bank2/3
  5560  0200  0087               	movwf	7
  5561  0201  1081               	bcf	1,1
  5562                           
  5563                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5564  0202  087C               	movf	_Sw,w
  5565  0203  0086               	movwf	6
  5566  0204  3001               	movlw	1	; select bank2/3
  5567  0205  0087               	movwf	7
  5568  0206  1501               	bsf	1,2
  5569  0207                     l2398:	
  5570                           
  5571                           ;Switch_B1.c: 148: }
  5572                           ;Switch_B1.c: 149: }
  5573                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5574  0207  087C               	movf	_Sw,w
  5575  0208  0086               	movwf	6
  5576  0209  3001               	movlw	1	; select bank2/3
  5577  020A  0087               	movwf	7
  5578  020B  1C81               	btfss	1,1
  5579  020C  2AD7               	goto	l7809
  5580                           
  5581                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5582  020D  087C               	movf	_Sw,w
  5583  020E  0086               	movwf	6
  5584  020F  3001               	movlw	1	; select bank2/3
  5585  0210  0087               	movwf	7
  5586  0211  1901               	btfsc	1,2
  5587  0212  2A35               	goto	l7775
  5588                           
  5589                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5590  0213  3001               	movlw	1
  5591  0214  0020               	movlb	0	; select bank0
  5592  0215  00B1               	movwf	??_setSw_Main
  5593  0216  087C               	movf	_Sw,w
  5594  0217  3E02               	addlw	2
  5595  0218  0086               	movwf	6
  5596  0219  3001               	movlw	1	; select bank2/3
  5597  021A  0087               	movwf	7
  5598  021B  0831               	movf	??_setSw_Main,w
  5599  021C  0781               	addwf	1,f
  5600                           
  5601                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5602  021D  087C               	movf	_Sw,w
  5603  021E  3E02               	addlw	2
  5604  021F  0086               	movwf	6
  5605  0220  3001               	movlw	1	; select bank2/3
  5606  0221  0087               	movwf	7
  5607  0222  3005               	movlw	5
  5608  0223  0201               	subwf	1,w
  5609  0224  1C03               	skipc
  5610  0225  0008               	return
  5611                           
  5612                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5613  0226  087C               	movf	_Sw,w
  5614  0227  3E02               	addlw	2
  5615  0228  0086               	movwf	6
  5616  0229  3001               	movlw	1	; select bank2/3
  5617  022A  0087               	movwf	7
  5618  022B  0181               	clrf	1
  5619                           
  5620                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5621  022C  087C               	movf	_Sw,w
  5622  022D  0086               	movwf	6
  5623  022E  3001               	movlw	1	; select bank2/3
  5624  022F  0087               	movwf	7
  5625  0230  1501               	bsf	1,2
  5626                           
  5627                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5628  0231  0833               	movf	setSw_Main@sw,w
  5629  0232  3192  22D4         	fcall	_setDimmerLights_SwOn
  5630                           
  5631                           ;Switch_B1.c: 162: }
  5632                           ;Switch_B1.c: 163: } else {
  5633  0234  0008               	return
  5634  0235                     l7775:	
  5635                           
  5636                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5637  0235  087C               	movf	_Sw,w
  5638  0236  0086               	movwf	6
  5639  0237  3001               	movlw	1	; select bank2/3
  5640  0238  0087               	movwf	7
  5641  0239  1981               	btfsc	1,3
  5642  023A  2A67               	goto	l7785
  5643                           
  5644                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5645  023B  087C               	movf	_Sw,w
  5646  023C  3E03               	addlw	3
  5647  023D  0086               	movwf	6
  5648  023E  3001               	movlw	1	; select bank2/3
  5649  023F  0087               	movwf	7
  5650  0240  3001               	movlw	1
  5651  0241  0781               	addwf	1,f
  5652  0242  3141               	addfsr 1,1
  5653  0243  1803               	skipnc
  5654  0244  0A81               	incf	1,f
  5655                           
  5656                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5657  0245  087C               	movf	_Sw,w
  5658  0246  3E03               	addlw	3
  5659  0247  0086               	movwf	6
  5660  0248  3001               	movlw	1	; select bank2/3
  5661  0249  0087               	movwf	7
  5662  024A  3F40               	moviw [0]fsr1
  5663  024B  0020               	movlb	0	; select bank0
  5664  024C  00B1               	movwf	??_setSw_Main
  5665  024D  3F41               	moviw [1]fsr1
  5666  024E  00B2               	movwf	??_setSw_Main+1
  5667  024F  3000               	movlw	0
  5668  0250  0232               	subwf	??_setSw_Main+1,w
  5669  0251  3096               	movlw	150
  5670  0252  1903               	skipnz
  5671  0253  0231               	subwf	??_setSw_Main,w
  5672  0254  1C03               	skipc
  5673  0255  0008               	return
  5674                           
  5675                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5676  0256  087C               	movf	_Sw,w
  5677  0257  3E03               	addlw	3
  5678  0258  0086               	movwf	6
  5679  0259  3001               	movlw	1	; select bank2/3
  5680  025A  0087               	movwf	7
  5681  025B  3000               	movlw	0
  5682  025C  3FC0               	movwi [0]fsr1
  5683  025D  3FC1               	movwi [1]fsr1
  5684                           
  5685                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5686  025E  087C               	movf	_Sw,w
  5687  025F  0086               	movwf	6
  5688  0260  3001               	movlw	1	; select bank2/3
  5689  0261  0087               	movwf	7
  5690  0262  1581               	bsf	1,3
  5691                           
  5692                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5693  0263  0833               	movf	setSw_Main@sw,w
  5694  0264  3191  21C5         	fcall	_setDimmerLights_AdjControl
  5695                           
  5696                           ;Switch_B1.c: 174: }
  5697                           ;Switch_B1.c: 175: } else {
  5698  0266  0008               	return
  5699  0267                     l7785:	
  5700                           
  5701                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5702  0267  087C               	movf	_Sw,w
  5703  0268  0086               	movwf	6
  5704  0269  3001               	movlw	1	; select bank2/3
  5705  026A  0087               	movwf	7
  5706  026B  1A01               	btfsc	1,4
  5707  026C  2AA5               	goto	l7799
  5708                           
  5709                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5710  026D  087C               	movf	_Sw,w
  5711  026E  3E05               	addlw	5
  5712  026F  0086               	movwf	6
  5713  0270  3001               	movlw	1	; select bank2/3
  5714  0271  0087               	movwf	7
  5715  0272  3001               	movlw	1
  5716  0273  0781               	addwf	1,f
  5717  0274  3141               	addfsr 1,1
  5718  0275  1803               	skipnc
  5719  0276  0A81               	incf	1,f
  5720                           
  5721                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5722  0277  087C               	movf	_Sw,w
  5723  0278  3E05               	addlw	5
  5724  0279  0086               	movwf	6
  5725  027A  3001               	movlw	1	; select bank2/3
  5726  027B  0087               	movwf	7
  5727  027C  3F40               	moviw [0]fsr1
  5728  027D  0020               	movlb	0	; select bank0
  5729  027E  00B1               	movwf	??_setSw_Main
  5730  027F  3F41               	moviw [1]fsr1
  5731  0280  00B2               	movwf	??_setSw_Main+1
  5732  0281  3000               	movlw	0
  5733  0282  0232               	subwf	??_setSw_Main+1,w
  5734  0283  3096               	movlw	150
  5735  0284  1903               	skipnz
  5736  0285  0231               	subwf	??_setSw_Main,w
  5737  0286  1C03               	skipc
  5738  0287  0008               	return
  5739                           
  5740                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5741  0288  087C               	movf	_Sw,w
  5742  0289  3E05               	addlw	5
  5743  028A  0086               	movwf	6
  5744  028B  3001               	movlw	1	; select bank2/3
  5745  028C  0087               	movwf	7
  5746  028D  3000               	movlw	0
  5747  028E  3FC0               	movwi [0]fsr1
  5748  028F  3FC1               	movwi [1]fsr1
  5749                           
  5750                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5751  0290  087C               	movf	_Sw,w
  5752  0291  0086               	movwf	6
  5753  0292  3001               	movlw	1	; select bank2/3
  5754  0293  0087               	movwf	7
  5755  0294  1601               	bsf	1,4
  5756                           
  5757                           ;Switch_B1.c: 183: setRF_Learn(1);
  5758  0295  3001               	movlw	1
  5759  0296  319D  2503  3181   	fcall	_setRF_Learn
  5760                           
  5761                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5762  0299  0021               	movlb	1	; select bank1
  5763  029A  1EA0               	btfss	_myMain^(0+128),5
  5764  029B  0008               	return
  5765                           
  5766                           ;Switch_B1.c: 186: setBuz(2, 100);
  5767  029C  3064               	movlw	100
  5768  029D  0020               	movlb	0	; select bank0
  5769  029E  00A9               	movwf	setBuz@time
  5770  029F  3000               	movlw	0
  5771  02A0  00AA               	movwf	setBuz@time+1
  5772  02A1  3002               	movlw	2
  5773  02A2  3196  263C         	fcall	_setBuz
  5774                           
  5775                           ;Switch_B1.c: 187: }
  5776                           ;Switch_B1.c: 189: }
  5777                           ;Switch_B1.c: 190: } else {
  5778  02A4  0008               	return
  5779  02A5                     l7799:	
  5780                           
  5781                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5782  02A5  087C               	movf	_Sw,w
  5783  02A6  0086               	movwf	6
  5784  02A7  3001               	movlw	1	; select bank2/3
  5785  02A8  0087               	movwf	7
  5786  02A9  1A81               	btfsc	1,5
  5787  02AA  0008               	return
  5788                           
  5789                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5790  02AB  087C               	movf	_Sw,w
  5791  02AC  3E07               	addlw	7
  5792  02AD  0086               	movwf	6
  5793  02AE  3001               	movlw	1	; select bank2/3
  5794  02AF  0087               	movwf	7
  5795  02B0  3001               	movlw	1
  5796  02B1  0781               	addwf	1,f
  5797  02B2  3141               	addfsr 1,1
  5798  02B3  1803               	skipnc
  5799  02B4  0A81               	incf	1,f
  5800                           
  5801                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5802  02B5  087C               	movf	_Sw,w
  5803  02B6  3E07               	addlw	7
  5804  02B7  0086               	movwf	6
  5805  02B8  3001               	movlw	1	; select bank2/3
  5806  02B9  0087               	movwf	7
  5807  02BA  3F40               	moviw [0]fsr1
  5808  02BB  0020               	movlb	0	; select bank0
  5809  02BC  00B1               	movwf	??_setSw_Main
  5810  02BD  3F41               	moviw [1]fsr1
  5811  02BE  00B2               	movwf	??_setSw_Main+1
  5812  02BF  3001               	movlw	1
  5813  02C0  0232               	subwf	??_setSw_Main+1,w
  5814  02C1  302C               	movlw	44
  5815  02C2  1903               	skipnz
  5816  02C3  0231               	subwf	??_setSw_Main,w
  5817  02C4  1C03               	skipc
  5818  02C5  0008               	return
  5819                           
  5820                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5821  02C6  087C               	movf	_Sw,w
  5822  02C7  3E07               	addlw	7
  5823  02C8  0086               	movwf	6
  5824  02C9  3001               	movlw	1	; select bank2/3
  5825  02CA  0087               	movwf	7
  5826  02CB  3000               	movlw	0
  5827  02CC  3FC0               	movwi [0]fsr1
  5828  02CD  3FC1               	movwi [1]fsr1
  5829                           
  5830                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5831  02CE  087C               	movf	_Sw,w
  5832  02CF  0086               	movwf	6
  5833  02D0  3001               	movlw	1	; select bank2/3
  5834  02D1  0087               	movwf	7
  5835  02D2  1681               	bsf	1,5
  5836                           
  5837                           ;Switch_B1.c: 198: setRF_Learn(0);
  5838  02D3  3000               	movlw	0
  5839  02D4  319D  2503         	fcall	_setRF_Learn
  5840                           
  5841                           ;Switch_B1.c: 201: }
  5842                           ;Switch_B1.c: 202: }
  5843                           ;Switch_B1.c: 203: }
  5844                           ;Switch_B1.c: 204: }
  5845                           ;Switch_B1.c: 205: }
  5846                           ;Switch_B1.c: 206: } else {
  5847  02D6  0008               	return
  5848  02D7                     l7809:	
  5849                           
  5850                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5851  02D7  087C               	movf	_Sw,w
  5852  02D8  0086               	movwf	6
  5853  02D9  3001               	movlw	1	; select bank2/3
  5854  02DA  0087               	movwf	7
  5855  02DB  1D01               	btfss	1,2
  5856  02DC  0008               	return
  5857                           
  5858                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5859  02DD  3001               	movlw	1
  5860  02DE  0020               	movlb	0	; select bank0
  5861  02DF  00B1               	movwf	??_setSw_Main
  5862  02E0  087C               	movf	_Sw,w
  5863  02E1  3E02               	addlw	2
  5864  02E2  0086               	movwf	6
  5865  02E3  3001               	movlw	1	; select bank2/3
  5866  02E4  0087               	movwf	7
  5867  02E5  0831               	movf	??_setSw_Main,w
  5868  02E6  0781               	addwf	1,f
  5869                           
  5870                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5871  02E7  087C               	movf	_Sw,w
  5872  02E8  3E02               	addlw	2
  5873  02E9  0086               	movwf	6
  5874  02EA  3001               	movlw	1	; select bank2/3
  5875  02EB  0087               	movwf	7
  5876  02EC  3005               	movlw	5
  5877  02ED  0201               	subwf	1,w
  5878  02EE  1C03               	skipc
  5879  02EF  0008               	return
  5880                           
  5881                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5882  02F0  087C               	movf	_Sw,w
  5883  02F1  3E02               	addlw	2
  5884  02F2  0086               	movwf	6
  5885  02F3  3001               	movlw	1	; select bank2/3
  5886  02F4  0087               	movwf	7
  5887  02F5  0181               	clrf	1
  5888                           
  5889                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5890  02F6  087C               	movf	_Sw,w
  5891  02F7  0086               	movwf	6
  5892  02F8  3001               	movlw	1	; select bank2/3
  5893  02F9  0087               	movwf	7
  5894  02FA  1101               	bcf	1,2
  5895                           
  5896                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5897  02FB  087C               	movf	_Sw,w
  5898  02FC  3E03               	addlw	3
  5899  02FD  0086               	movwf	6
  5900  02FE  3001               	movlw	1	; select bank2/3
  5901  02FF  0087               	movwf	7
  5902  0300  3000               	movlw	0
  5903  0301  3FC0               	movwi [0]fsr1
  5904  0302  3FC1               	movwi [1]fsr1
  5905                           
  5906                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5907  0303  087C               	movf	_Sw,w
  5908  0304  0086               	movwf	6
  5909  0305  3001               	movlw	1	; select bank2/3
  5910  0306  0087               	movwf	7
  5911  0307  1181               	bcf	1,3
  5912                           
  5913                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5914  0308  087C               	movf	_Sw,w
  5915  0309  3E05               	addlw	5
  5916  030A  0086               	movwf	6
  5917  030B  3001               	movlw	1	; select bank2/3
  5918  030C  0087               	movwf	7
  5919  030D  3000               	movlw	0
  5920  030E  3FC0               	movwi [0]fsr1
  5921  030F  3FC1               	movwi [1]fsr1
  5922                           
  5923                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5924  0310  087C               	movf	_Sw,w
  5925  0311  0086               	movwf	6
  5926  0312  3001               	movlw	1	; select bank2/3
  5927  0313  0087               	movwf	7
  5928  0314  1201               	bcf	1,4
  5929                           
  5930                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5931  0315  087C               	movf	_Sw,w
  5932  0316  3E07               	addlw	7
  5933  0317  0086               	movwf	6
  5934  0318  3001               	movlw	1	; select bank2/3
  5935  0319  0087               	movwf	7
  5936  031A  3000               	movlw	0
  5937  031B  3FC0               	movwi [0]fsr1
  5938  031C  3FC1               	movwi [1]fsr1
  5939                           
  5940                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5941  031D  087C               	movf	_Sw,w
  5942  031E  0086               	movwf	6
  5943  031F  3001               	movlw	1	; select bank2/3
  5944  0320  0087               	movwf	7
  5945  0321  1281               	bcf	1,5
  5946                           
  5947                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5948  0322  0021               	movlb	1	; select bank1
  5949  0323  1852               	btfsc	_SwDetect^(0+128),0
  5950  0324  2B2A               	goto	l7835
  5951                           
  5952                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5953  0325  0020               	movlb	0	; select bank0
  5954  0326  0833               	movf	setSw_Main@sw,w
  5955  0327  3194  2419  3181   	fcall	_setDimmerLights_SwOff
  5956  032A                     l7835:	
  5957                           
  5958                           ;Switch_B1.c: 221: }
  5959                           ;Switch_B1.c: 224: setRF_Learn(0);
  5960  032A  3000               	movlw	0
  5961  032B  319D  2503         	fcall	_setRF_Learn
  5962                           
  5963                           ;Switch_B1.c: 226: }
  5964                           ;Switch_B1.c: 227: }
  5965                           ;Switch_B1.c: 228: }
  5966                           ;Switch_B1.c: 229: } else {
  5967  032D  0008               	return
  5968  032E                     l2396:	
  5969                           
  5970                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5971  032E  0021               	movlb	1	; select bank1
  5972  032F  1C20               	btfss	_myMain^(0+128),0
  5973  0330  0008               	return
  5974                           
  5975                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5976  0331  087C               	movf	_Sw,w
  5977  0332  0086               	movwf	6
  5978  0333  3001               	movlw	1	; select bank2/3
  5979  0334  0087               	movwf	7
  5980  0335  1401               	bsf	1,0
  5981  0336  0008               	return
  5982  0337                     __end_of_setSw_Main:	
  5983                           
  5984                           	psect	text14
  5985  1D03                     __ptext14:	
  5986 ;; *************** function _setRF_Learn *****************
  5987 ;; Defined at:
  5988 ;;		line 23 in file "../src/RF_Control_B1.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  command         1    wreg     unsigned char 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  command         1    1[BANK0 ] unsigned char 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;		None               void
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6006 ;;Total ram usage:        2 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    5
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		_setSw_Main
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           
  6017                           ;psect for function _setRF_Learn
  6018  1D03                     _setRF_Learn:	
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6022                           ;setRF_Learn@command stored from wreg
  6023  1D03  0020               	movlb	0	; select bank0
  6024  1D04  00A1               	movwf	setRF_Learn@command
  6025                           
  6026                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6027  1D05  0821               	movf	setRF_Learn@command,w
  6028  1D06  3A01               	xorlw	1
  6029  1D07  3000               	movlw	0
  6030  1D08  1903               	skipnz
  6031  1D09  3001               	movlw	1
  6032  1D0A  00A0               	movwf	??_setRF_Learn
  6033  1D0B  0EA0               	swapf	??_setRF_Learn,f
  6034  1D0C  0DA0               	rlf	??_setRF_Learn,f
  6035  1D0D  0DA0               	rlf	??_setRF_Learn,f
  6036  1D0E  0021               	movlb	1	; select bank1
  6037  1D0F  083B               	movf	_RF1^(0+128),w
  6038  1D10  0020               	movlb	0	; select bank0
  6039  1D11  0620               	xorwf	??_setRF_Learn,w
  6040  1D12  39BF               	andlw	-65
  6041  1D13  0620               	xorwf	??_setRF_Learn,w
  6042  1D14  0021               	movlb	1	; select bank1
  6043  1D15  00BB               	movwf	_RF1^(0+128)
  6044  1D16  0008               	return
  6045  1D17                     __end_of_setRF_Learn:	
  6046                           
  6047                           	psect	text15
  6048  11C5                     __ptext15:	
  6049 ;; *************** function _setDimmerLights_AdjControl *****************
  6050 ;; Defined at:
  6051 ;;		line 549 in file "../src/Dimmer_B1.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  sw              1    wreg     unsigned char 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  sw              1    8[BANK0 ] unsigned char 
  6056 ;;  idle            1    6[BANK0 ] unsigned char 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;		None               void
  6059 ;; Registers used:
  6060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;Total ram usage:        4 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    7
  6073 ;; This function calls:
  6074 ;;		_DimmerLightsPointSelect
  6075 ;;		_getAll_DimmerLights_AdjGO
  6076 ;;		_setDimmerLights_TriggerAdj
  6077 ;; This function is called by:
  6078 ;;		_setSw_Main
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           
  6083                           ;psect for function _setDimmerLights_AdjControl
  6084  11C5                     _setDimmerLights_AdjControl:	
  6085                           
  6086                           ;incstack = 0
  6087                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6088                           ;setDimmerLights_AdjControl@sw stored from wreg
  6089  11C5  0020               	movlb	0	; select bank0
  6090  11C6  00A8               	movwf	setDimmerLights_AdjControl@sw
  6091                           
  6092                           ;Dimmer_B1.c: 550: DimmerLightsPointSelect(sw);
  6093  11C7  0828               	movf	setDimmerLights_AdjControl@sw,w
  6094  11C8  319C  248F  3191   	fcall	_DimmerLightsPointSelect
  6095                           
  6096                           ;Dimmer_B1.c: 551: char idle = 0;
  6097  11CB  0020               	movlb	0	; select bank0
  6098  11CC  01A6               	clrf	setDimmerLights_AdjControl@idle
  6099                           
  6100                           ;Dimmer_B1.c: 553: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6101  11CD  01A7               	clrf	_setDimmerLights_AdjControl$2590
  6102  11CE  319C  2402  3191   	fcall	_getAll_DimmerLights_AdjGO
  6103  11D1  3A01               	xorlw	1
  6104  11D2  1D03               	skipz
  6105  11D3  29DA               	goto	l6969
  6106  11D4  0022               	movlb	2	; select bank2
  6107  11D5  1CA0               	btfss	_Dimmer^(0+256),1
  6108  11D6  29DA               	goto	l6969
  6109  11D7  0020               	movlb	0	; select bank0
  6110  11D8  01A7               	clrf	_setDimmerLights_AdjControl$2590
  6111  11D9  0AA7               	incf	_setDimmerLights_AdjControl$2590,f
  6112  11DA                     l6969:	
  6113  11DA  0020               	movlb	0	; select bank0
  6114  11DB  0827               	movf	_setDimmerLights_AdjControl$2590,w
  6115  11DC  00A5               	movwf	??_setDimmerLights_AdjControl
  6116  11DD  0825               	movf	??_setDimmerLights_AdjControl,w
  6117  11DE  00A6               	movwf	setDimmerLights_AdjControl@idle
  6118                           
  6119                           ;Dimmer_B1.c: 555: if (idle == 0) {
  6120  11DF  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6121  11E0  1D03               	skipz
  6122  11E1  0008               	return
  6123                           
  6124                           ;Dimmer_B1.c: 556: if (DimmerLights->SwFlag == 1) {
  6125  11E2  086F               	movf	_DimmerLights,w
  6126  11E3  3E09               	addlw	9
  6127  11E4  0086               	movwf	6
  6128  11E5  3001               	movlw	1	; select bank2/3
  6129  11E6  0087               	movwf	7
  6130  11E7  1F01               	btfss	1,6
  6131  11E8  0008               	return
  6132                           
  6133                           ;Dimmer_B1.c: 557: DimmerLights->SwAdj = 1;
  6134  11E9  086F               	movf	_DimmerLights,w
  6135  11EA  3E09               	addlw	9
  6136  11EB  0086               	movwf	6
  6137  11EC  3001               	movlw	1	; select bank2/3
  6138  11ED  0087               	movwf	7
  6139  11EE  1781               	bsf	1,7
  6140                           
  6141                           ;Dimmer_B1.c: 558: DimmerLights->Status = 1;
  6142  11EF  086F               	movf	_DimmerLights,w
  6143  11F0  0086               	movwf	6
  6144  11F1  3001               	movlw	1	; select bank2/3
  6145  11F2  0087               	movwf	7
  6146  11F3  1681               	bsf	1,5
  6147                           
  6148                           ;Dimmer_B1.c: 559: setDimmerLights_TriggerAdj(sw, 1);
  6149  11F4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6150  11F5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6151  11F6  0828               	movf	setDimmerLights_AdjControl@sw,w
  6152  11F7  319E  267A         	fcall	_setDimmerLights_TriggerAdj
  6153  11F9  0008               	return
  6154  11FA                     __end_of_setDimmerLights_AdjControl:	
  6155                           
  6156                           	psect	text16
  6157  1E5B                     __ptext16:	
  6158 ;; *************** function _getSw_KeyStatus *****************
  6159 ;; Defined at:
  6160 ;;		line 237 in file "../src/Switch_B1.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  sw              1    wreg     unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  sw              1    4[BANK0 ] unsigned char 
  6165 ;;  status          1    3[BANK0 ] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      unsigned char 
  6168 ;; Registers used:
  6169 ;;		wreg, status,2
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;Total ram usage:        5 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    5
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_setSw_Main
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function _getSw_KeyStatus
  6191  1E5B                     _getSw_KeyStatus:	
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6195                           ;getSw_KeyStatus@sw stored from wreg
  6196  1E5B  0020               	movlb	0	; select bank0
  6197  1E5C  00A4               	movwf	getSw_KeyStatus@sw
  6198                           
  6199                           ;Switch_B1.c: 238: char status = 0;
  6200  1E5D  01A3               	clrf	getSw_KeyStatus@status
  6201                           
  6202                           ;Switch_B1.c: 250: if (sw == 1) {
  6203  1E5E  0824               	movf	getSw_KeyStatus@sw,w
  6204  1E5F  3A01               	xorlw	1
  6205  1E60  1D03               	skipz
  6206  1E61  2E6A               	goto	l7169
  6207                           
  6208                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6209  1E62  01A1               	clrf	_getSw_KeyStatus$6366
  6210  1E63  0AA1               	incf	_getSw_KeyStatus$6366,f
  6211  1E64  1F0C               	btfss	12,6	;volatile
  6212  1E65  1A0C               	btfsc	12,4	;volatile
  6213  1E66  2E68               	goto	l7167
  6214  1E67  01A1               	clrf	_getSw_KeyStatus$6366
  6215  1E68                     l7167:	
  6216  1E68  0821               	movf	_getSw_KeyStatus$6366,w
  6217  1E69  2E75               	goto	L3
  6218  1E6A                     l7169:	
  6219                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6220                           
  6221  1E6A  0824               	movf	getSw_KeyStatus@sw,w
  6222  1E6B  3A02               	xorlw	2
  6223  1E6C  1D03               	skipz
  6224  1E6D  2E78               	goto	l7179
  6225                           
  6226                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6227  1E6E  01A2               	clrf	_getSw_KeyStatus$6367
  6228  1E6F  0AA2               	incf	_getSw_KeyStatus$6367,f
  6229  1E70  1C0C               	btfss	12,0	;volatile
  6230  1E71  188D               	btfsc	13,1	;volatile
  6231  1E72  2E74               	goto	l7177
  6232  1E73  01A2               	clrf	_getSw_KeyStatus$6367
  6233  1E74                     l7177:	
  6234  1E74  0822               	movf	_getSw_KeyStatus$6367,w
  6235  1E75                     L3:	
  6236  1E75  00A0               	movwf	??_getSw_KeyStatus
  6237  1E76  0820               	movf	??_getSw_KeyStatus,w
  6238  1E77  00A3               	movwf	getSw_KeyStatus@status
  6239  1E78                     l7179:	
  6240                           
  6241                           ;Switch_B1.c: 254: }
  6242                           ;Switch_B1.c: 261: return status;
  6243  1E78  0823               	movf	getSw_KeyStatus@status,w
  6244  1E79  0008               	return
  6245  1E7A                     __end_of_getSw_KeyStatus:	
  6246                           
  6247                           	psect	text17
  6248  1CEF                     __ptext17:	
  6249 ;; *************** function _SwPointSelect *****************
  6250 ;; Defined at:
  6251 ;;		line 25 in file "../src/Switch_B1.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;  sw              1    wreg     unsigned char 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  sw              1    1[BANK0 ] unsigned char 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;		None               void
  6258 ;; Registers used:
  6259 ;;		wreg
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;Total ram usage:        2 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    5
  6272 ;; This function calls:
  6273 ;;		Nothing
  6274 ;; This function is called by:
  6275 ;;		_setSw_Main
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           
  6280                           ;psect for function _SwPointSelect
  6281  1CEF                     _SwPointSelect:	
  6282                           
  6283                           ;incstack = 0
  6284                           ; Regs used in _SwPointSelect: [wreg]
  6285                           ;SwPointSelect@sw stored from wreg
  6286  1CEF  0020               	movlb	0	; select bank0
  6287  1CF0  00A1               	movwf	SwPointSelect@sw
  6288                           
  6289                           ;Switch_B1.c: 28: if (sw == 1) {
  6290  1CF1  0821               	movf	SwPointSelect@sw,w
  6291  1CF2  3A01               	xorlw	1
  6292  1CF3  1D03               	skipz
  6293  1CF4  2CFA               	goto	l7153
  6294                           
  6295                           ;Switch_B1.c: 29: Sw = &Sw1;
  6296  1CF5  30DC               	movlw	_Sw1& (0+255)
  6297  1CF6  00A0               	movwf	??_SwPointSelect
  6298  1CF7  0820               	movf	??_SwPointSelect,w
  6299  1CF8  00FC               	movwf	_Sw
  6300                           
  6301                           ;Switch_B1.c: 30: }
  6302  1CF9  0008               	return
  6303  1CFA                     l7153:	
  6304                           
  6305                           ;Switch_B1.c: 33: else if (sw == 2) {
  6306  1CFA  0821               	movf	SwPointSelect@sw,w
  6307  1CFB  3A02               	xorlw	2
  6308  1CFC  1D03               	skipz
  6309  1CFD  0008               	return
  6310                           
  6311                           ;Switch_B1.c: 34: Sw = &Sw2;
  6312  1CFE  30E5               	movlw	_Sw2& (0+255)
  6313  1CFF  00A0               	movwf	??_SwPointSelect
  6314  1D00  0820               	movf	??_SwPointSelect,w
  6315  1D01  00FC               	movwf	_Sw
  6316  1D02  0008               	return
  6317  1D03                     __end_of_SwPointSelect:	
  6318                           
  6319                           	psect	text18
  6320  17A4                     __ptext18:	
  6321 ;; *************** function _setMain_Exception *****************
  6322 ;; Defined at:
  6323 ;;		line 282 in file "../src/main_B1.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  command         1    wreg     unsigned char 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  command         1   28[BANK0 ] unsigned char 
  6328 ;;  status          1   27[BANK0 ] unsigned char 
  6329 ;;  buz             1   24[BANK0 ] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;		None               void
  6332 ;; Registers used:
  6333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;Total ram usage:        7 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:   10
  6346 ;; This function calls:
  6347 ;;		_getDimmerLights_Line
  6348 ;;		_getMain_LightsStatus
  6349 ;;		_setBuz
  6350 ;;		_setDimmerLights_ErrorClose
  6351 ;;		_setLED
  6352 ;; This function is called by:
  6353 ;;		_Switch_Main
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           
  6358                           ;psect for function _setMain_Exception
  6359  17A4                     _setMain_Exception:	
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6363                           ;setMain_Exception@command stored from wreg
  6364  17A4  0020               	movlb	0	; select bank0
  6365  17A5  00BC               	movwf	setMain_Exception@command
  6366                           
  6367                           ;main_B1.c: 283: char status = 0, buz = 0;
  6368  17A6  01BB               	clrf	setMain_Exception@status
  6369  17A7  01B8               	clrf	setMain_Exception@buz
  6370                           
  6371                           ;main_B1.c: 300: status = command == 3 ? getDimmerLights_Line() : 255;
  6372  17A8  083C               	movf	setMain_Exception@command,w
  6373  17A9  3A03               	xorlw	3
  6374  17AA  1903               	skipnz
  6375  17AB  2FB0               	goto	l7721
  6376  17AC  30FF               	movlw	255
  6377  17AD  00B9               	movwf	_setMain_Exception$7105
  6378  17AE  3000               	movlw	0
  6379  17AF  2FB9               	goto	L4
  6380  17B0                     l7721:	
  6381  17B0  319C  24C8  3197   	fcall	_getDimmerLights_Line
  6382  17B3  0020               	movlb	0	; select bank0
  6383  17B4  00B6               	movwf	??_setMain_Exception
  6384  17B5  01B7               	clrf	??_setMain_Exception+1
  6385  17B6  0836               	movf	??_setMain_Exception,w
  6386  17B7  00B9               	movwf	_setMain_Exception$7105
  6387  17B8  0837               	movf	??_setMain_Exception+1,w
  6388  17B9                     L4:	
  6389  17B9  00BA               	movwf	_setMain_Exception$7105+1
  6390  17BA  0839               	movf	_setMain_Exception$7105,w
  6391  17BB  00B6               	movwf	??_setMain_Exception
  6392  17BC  0836               	movf	??_setMain_Exception,w
  6393  17BD  00BB               	movwf	setMain_Exception@status
  6394                           
  6395                           ;main_B1.c: 302: if (command == 0) {
  6396  17BE  08BC               	movf	setMain_Exception@command,f
  6397  17BF  1D03               	skipz
  6398  17C0  2FC3               	goto	l7729
  6399                           
  6400                           ;main_B1.c: 303: setLED(99, 10);
  6401  17C1  300A               	movlw	10
  6402  17C2  2FC5               	goto	L5
  6403  17C3                     l7729:	
  6404                           ;main_B1.c: 304: } else {
  6405                           
  6406                           
  6407                           ;main_B1.c: 305: setLED(99, 11);
  6408  17C3  300B               	movlw	11
  6409  17C4  0020               	movlb	0	; select bank0
  6410  17C5                     L5:	
  6411  17C5  00B6               	movwf	??_setMain_Exception
  6412  17C6  0836               	movf	??_setMain_Exception,w
  6413  17C7  00A2               	movwf	setLED@command
  6414  17C8  3063               	movlw	99
  6415  17C9  3195  2594  3197   	fcall	_setLED
  6416                           
  6417                           ;main_B1.c: 306: }
  6418                           ;main_B1.c: 308: if (command != 0) {
  6419  17CC  0020               	movlb	0	; select bank0
  6420  17CD  083C               	movf	setMain_Exception@command,w
  6421  17CE  1903               	btfsc	3,2
  6422  17CF  0008               	return
  6423                           
  6424                           ;main_B1.c: 309: switch (command) {
  6425  17D0  2FF1               	goto	l7745
  6426  17D1                     l7735:	
  6427                           ;main_B1.c: 310: case 2:
  6428                           
  6429                           
  6430                           ;main_B1.c: 311: if (getMain_LightsStatus() == 1) {
  6431  17D1  3190  20D0  3197   	fcall	_getMain_LightsStatus
  6432  17D4  3A01               	xorlw	1
  6433  17D5  1D03               	skipz
  6434  17D6  2FFA               	goto	l7747
  6435                           
  6436                           ;main_B1.c: 312: setBuz(10, 300);
  6437  17D7  302C               	movlw	44
  6438  17D8  0020               	movlb	0	; select bank0
  6439  17D9  00A9               	movwf	setBuz@time
  6440  17DA  3001               	movlw	1
  6441  17DB  00AA               	movwf	setBuz@time+1
  6442  17DC  300A               	movlw	10
  6443  17DD  3196  263C  3197   	fcall	_setBuz
  6444                           
  6445                           ;main_B1.c: 313: }
  6446                           ;main_B1.c: 314: break;
  6447  17E0  2FFA               	goto	l7747
  6448  17E1                     l7739:	
  6449                           ;main_B1.c: 315: case 3:
  6450                           
  6451                           
  6452                           ;main_B1.c: 316: if (getMain_LightsStatus() == 1) {
  6453  17E1  3190  20D0  3197   	fcall	_getMain_LightsStatus
  6454  17E4  3A01               	xorlw	1
  6455  17E5  1D03               	skipz
  6456  17E6  2FFA               	goto	l7747
  6457                           
  6458                           ;main_B1.c: 317: setBuz(5, 300);
  6459  17E7  302C               	movlw	44
  6460  17E8  0020               	movlb	0	; select bank0
  6461  17E9  00A9               	movwf	setBuz@time
  6462  17EA  3001               	movlw	1
  6463  17EB  00AA               	movwf	setBuz@time+1
  6464  17EC  3005               	movlw	5
  6465  17ED  3196  263C  3197   	fcall	_setBuz
  6466                           
  6467                           ;main_B1.c: 320: }
  6468                           
  6469                           ;main_B1.c: 318: }
  6470                           ;main_B1.c: 319: break;
  6471  17F0  2FFA               	goto	l7747
  6472  17F1                     l7745:	
  6473  17F1  0020               	movlb	0	; select bank0
  6474  17F2  083C               	movf	setMain_Exception@command,w
  6475                           
  6476                           ; Switch size 1, requested type "space"
  6477                           ; Number of cases is 2, Range of values is 2 to 3
  6478                           ; switch strategies available:
  6479                           ; Name         Instructions Cycles
  6480                           ; simple_byte            7     4 (average)
  6481                           ; direct_byte           13     9 (fixed)
  6482                           ; jumptable            263     9 (fixed)
  6483                           ;	Chosen strategy is simple_byte
  6484  17F3  3A02               	xorlw	2	; case 2
  6485  17F4  1903               	skipnz
  6486  17F5  2FD1               	goto	l7735
  6487  17F6  3A01               	xorlw	1	; case 3
  6488  17F7  1903               	skipnz
  6489  17F8  2FE1               	goto	l7739
  6490  17F9  2FFA               	goto	l7747
  6491  17FA                     l7747:	
  6492                           
  6493                           ;main_B1.c: 321: setDimmerLights_ErrorClose(status);
  6494  17FA  0020               	movlb	0	; select bank0
  6495  17FB  083B               	movf	setMain_Exception@status,w
  6496  17FC  3196  26EE         	fcall	_setDimmerLights_ErrorClose
  6497  17FE  0020               	movlb	0	; select bank0
  6498  17FF  0008               	return
  6499  1800                     __end_of_setMain_Exception:	
  6500                           
  6501                           	psect	text19
  6502  1CC8                     __ptext19:	
  6503 ;; *************** function _getDimmerLights_Line *****************
  6504 ;; Defined at:
  6505 ;;		line 698 in file "../src/Dimmer_B1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  line            1    1[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      unsigned char 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        2 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    5
  6526 ;; This function calls:
  6527 ;;		Nothing
  6528 ;; This function is called by:
  6529 ;;		_setMain_Exception
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           
  6534                           ;psect for function _getDimmerLights_Line
  6535  1CC8                     _getDimmerLights_Line:	
  6536                           
  6537                           ;Dimmer_B1.c: 699: char line = 0;
  6538                           
  6539                           ;incstack = 0
  6540                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6541  1CC8  0020               	movlb	0	; select bank0
  6542  1CC9  01A1               	clrf	getDimmerLights_Line@line
  6543                           
  6544                           ;Dimmer_B1.c: 701: if (DimmerLights1.Line == 1) {
  6545  1CCA  0023               	movlb	3	; select bank3
  6546  1CCB  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6547  1CCC  2CD1               	goto	l867
  6548                           
  6549                           ;Dimmer_B1.c: 702: line = 1;
  6550  1CCD  0020               	movlb	0	; select bank0
  6551  1CCE  01A1               	clrf	getDimmerLights_Line@line
  6552  1CCF  0AA1               	incf	getDimmerLights_Line@line,f
  6553                           
  6554                           ;Dimmer_B1.c: 703: }
  6555  1CD0  2CD8               	goto	l868
  6556  1CD1                     l867:	
  6557                           
  6558                           ;Dimmer_B1.c: 706: else if (DimmerLights2.Line == 1) {
  6559  1CD1  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6560  1CD2  2CD8               	goto	l868
  6561                           
  6562                           ;Dimmer_B1.c: 707: line = 2;
  6563  1CD3  3002               	movlw	2
  6564  1CD4  0020               	movlb	0	; select bank0
  6565  1CD5  00A0               	movwf	??_getDimmerLights_Line
  6566  1CD6  0820               	movf	??_getDimmerLights_Line,w
  6567  1CD7  00A1               	movwf	getDimmerLights_Line@line
  6568  1CD8                     l868:	
  6569                           
  6570                           ;Dimmer_B1.c: 708: }
  6571                           ;Dimmer_B1.c: 715: return line;
  6572  1CD8  0020               	movlb	0	; select bank0
  6573  1CD9  0821               	movf	getDimmerLights_Line@line,w
  6574  1CDA  0008               	return
  6575  1CDB                     __end_of_getDimmerLights_Line:	
  6576                           
  6577                           	psect	text20
  6578  1B89                     __ptext20:	
  6579 ;; *************** function _Switch_Initialization *****************
  6580 ;; Defined at:
  6581 ;;		line 46 in file "../src/Switch_B1.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    8
  6602 ;; This function calls:
  6603 ;;		_TouchPower
  6604 ;;		_setSw_Initialization
  6605 ;; This function is called by:
  6606 ;;		_main
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _Switch_Initialization
  6612  1B89                     _Switch_Initialization:	
  6613                           
  6614                           ;Switch_B1.c: 47: TouchPower();
  6615                           
  6616                           ;incstack = 0
  6617                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6618  1B89  319D  2556  319B   	fcall	_TouchPower
  6619                           
  6620                           ;Switch_B1.c: 49: WPUB1 = 0;
  6621  1B8C  0024               	movlb	4	; select bank4
  6622  1B8D  108D               	bcf	13,1	;volatile
  6623                           
  6624                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6625  1B8E  3001               	movlw	1
  6626  1B8F  319B  2305  319B   	fcall	_setSw_Initialization
  6627                           
  6628                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6629  1B92  3002               	movlw	2
  6630  1B93  319B  2305         	fcall	_setSw_Initialization
  6631  1B95  0008               	return
  6632  1B96                     __end_of_Switch_Initialization:	
  6633                           
  6634                           	psect	text21
  6635  1B05                     __ptext21:	
  6636 ;; *************** function _setSw_Initialization *****************
  6637 ;; Defined at:
  6638 ;;		line 109 in file "../src/Switch_B1.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  sw              1    wreg     unsigned char 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  sw              1    4[BANK0 ] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;		None               void
  6645 ;; Registers used:
  6646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;Total ram usage:        1 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    7
  6659 ;; This function calls:
  6660 ;;		_setLED
  6661 ;; This function is called by:
  6662 ;;		_Switch_Initialization
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           
  6667                           ;psect for function _setSw_Initialization
  6668  1B05                     _setSw_Initialization:	
  6669                           
  6670                           ;incstack = 0
  6671                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6672                           ;setSw_Initialization@sw stored from wreg
  6673  1B05  0020               	movlb	0	; select bank0
  6674  1B06  00A4               	movwf	setSw_Initialization@sw
  6675                           
  6676                           ;Switch_B1.c: 110: setLED(sw, 1);
  6677  1B07  01A2               	clrf	setLED@command
  6678  1B08  0AA2               	incf	setLED@command,f
  6679  1B09  0824               	movf	setSw_Initialization@sw,w
  6680  1B0A  3195  2594         	fcall	_setLED
  6681  1B0C  0008               	return
  6682  1B0D                     __end_of_setSw_Initialization:	
  6683                           
  6684                           	psect	text22
  6685  1D56                     __ptext22:	
  6686 ;; *************** function _TouchPower *****************
  6687 ;; Defined at:
  6688 ;;		line 10 in file "../src/Switch_B1.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    6
  6709 ;; This function calls:
  6710 ;;		_Timeout_Counter
  6711 ;;		_set_TimeoutCleared
  6712 ;; This function is called by:
  6713 ;;		_Switch_Initialization
  6714 ;;		_Switch_Main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _TouchPower
  6720  1D56                     _TouchPower:	
  6721                           
  6722                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6726  1D56  0020               	movlb	0	; select bank0
  6727  1D57  1A8E               	btfsc	14,5	;volatile
  6728  1D58  0008               	return
  6729                           
  6730                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6731  1D59  0021               	movlb	1	; select bank1
  6732  1D5A  1C20               	btfss	_myMain^(0+128),0
  6733  1D5B  0008               	return
  6734  1D5C  2D62               	goto	l7707
  6735  1D5D                     l2370:	
  6736                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6737                           
  6738                           
  6739                           ;Switch_B1.c: 14: RC5 = 1;
  6740  1D5D  0020               	movlb	0	; select bank0
  6741  1D5E  168E               	bsf	14,5	;volatile
  6742                           
  6743                           ;Switch_B1.c: 15: Timeout_Counter();
  6744  1D5F  319D  2517  319D   	fcall	_Timeout_Counter
  6745  1D62                     l7707:	
  6746  1D62  0020               	movlb	0	; select bank0
  6747  1D63  1A8E               	btfsc	14,5	;volatile
  6748  1D64  2D68               	goto	l7711
  6749  1D65  0021               	movlb	1	; select bank1
  6750  1D66  1D2C               	btfss	(_myMain^(0+128)+12),2
  6751  1D67  2D5D               	goto	l2370
  6752  1D68                     l7711:	
  6753                           
  6754                           ;Switch_B1.c: 16: }
  6755                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6756  1D68  319A  22BA         	fcall	_set_TimeoutCleared
  6757  1D6A  0008               	return
  6758  1D6B                     __end_of_TouchPower:	
  6759                           
  6760                           	psect	text23
  6761  1AA4                     __ptext23:	
  6762 ;; *************** function _RF_Main *****************
  6763 ;; Defined at:
  6764 ;;		line 16 in file "../src/RF_Control_B1.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;		None
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;		None
  6769 ;; Return value:  Size  Location     Type
  6770 ;;		None               void
  6771 ;; Registers used:
  6772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        0 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:   14
  6785 ;; This function calls:
  6786 ;;		_setRF_Main
  6787 ;; This function is called by:
  6788 ;;		_main
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function _RF_Main
  6794  1AA4                     _RF_Main:	
  6795                           
  6796                           ;RF_Control_B1.c: 18: setRF_Main();
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6800  1AA4  3186  2655         	fcall	_setRF_Main
  6801  1AA6  0008               	return
  6802  1AA7                     __end_of_RF_Main:	
  6803                           
  6804                           	psect	text24
  6805  0655                     __ptext24:	
  6806 ;; *************** function _setRF_Main *****************
  6807 ;; Defined at:
  6808 ;;		line 52 in file "../src/RF_Control_B1.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;		None
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  error           1    2[BANK1 ] unsigned char 
  6813 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6814 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;		None               void
  6817 ;; Registers used:
  6818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;Total ram usage:        4 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:   13
  6831 ;; This function calls:
  6832 ;;		_CC2500_RxData
  6833 ;;		_CC2500_TxData
  6834 ;;		_CC2500_WriteCommand
  6835 ;;		_RF_RxDisable
  6836 ;;		_getBuz_GO
  6837 ;;		_getMain_All_Error_Status
  6838 ;;		_getRF_KeyStatus
  6839 ;;		_getRxData
  6840 ;; This function is called by:
  6841 ;;		_RF_Main
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           
  6846                           ;psect for function _setRF_Main
  6847  0655                     _setRF_Main:	
  6848                           
  6849                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6850                           
  6851                           ;incstack = 0
  6852                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6853  0655  0021               	movlb	1	; select bank1
  6854  0656  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6855  0657  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6856  0658  01EB               	clrf	setRF_Main@error^(0+128)
  6857                           
  6858                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6859  0659  1C3B               	btfss	_RF1^(0+128),0
  6860  065A  2F1F               	goto	l1971
  6861                           
  6862                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6863  065B  319C  2413  3186   	fcall	_getBuz_GO
  6864  065E  0020               	movlb	0	; select bank0
  6865  065F  0821               	movf	?_getBuz_GO+1,w
  6866  0660  0420               	iorwf	?_getBuz_GO,w
  6867  0661  1D03               	skipz
  6868  0662  0008               	return
  6869                           
  6870                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6871  0663  3000               	movlw	0
  6872  0664  3191  215E  3186   	fcall	_getMain_All_Error_Status
  6873  0667  3800               	iorlw	0
  6874  0668  1D03               	skipz
  6875  0669  2E7E               	goto	l1973
  6876                           
  6877                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6878  066A  319C  2424  3186   	fcall	_getRF_KeyStatus
  6879  066D  3A01               	xorlw	1
  6880  066E  3000               	movlw	0
  6881  066F  1903               	skipnz
  6882  0670  3001               	movlw	1
  6883  0671  0020               	movlb	0	; select bank0
  6884  0672  00ED               	movwf	??_setRF_Main
  6885  0673  0CED               	rrf	??_setRF_Main,f
  6886  0674  0CED               	rrf	??_setRF_Main,f
  6887  0675  0021               	movlb	1	; select bank1
  6888  0676  083B               	movf	_RF1^(0+128),w
  6889  0677  0020               	movlb	0	; select bank0
  6890  0678  066D               	xorwf	??_setRF_Main,w
  6891  0679  397F               	andlw	-129
  6892  067A  066D               	xorwf	??_setRF_Main,w
  6893  067B  0021               	movlb	1	; select bank1
  6894  067C  00BB               	movwf	_RF1^(0+128)
  6895                           
  6896                           ;RF_Control_B1.c: 65: } else {
  6897  067D  2E80               	goto	l1974
  6898  067E                     l1973:	
  6899                           
  6900                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6901  067E  0021               	movlb	1	; select bank1
  6902  067F  13BB               	bcf	_RF1^(0+128),7
  6903  0680                     l1974:	
  6904                           
  6905                           ;RF_Control_B1.c: 70: }
  6906                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6907  0680  1BBB               	btfsc	_RF1^(0+128),7
  6908  0681  1B3B               	btfsc	_RF1^(0+128),6
  6909  0682  2E88               	goto	l1975
  6910                           
  6911                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6912  0683  01BD               	clrf	(_RF1^(0+128)+2)
  6913  0684  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6914                           
  6915                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6916  0685  14BC               	bsf	(_RF1^(0+128)+1),1
  6917                           
  6918                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6919  0686  11BB               	bcf	_RF1^(0+128),3
  6920                           
  6921                           ;RF_Control_B1.c: 76: } else {
  6922  0687  0008               	return
  6923  0688                     l1975:	
  6924                           
  6925                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6926  0688  18BC               	btfsc	(_RF1^(0+128)+1),1
  6927  0689  1B3B               	btfsc	_RF1^(0+128),6
  6928  068A  2E9F               	goto	l7633
  6929                           
  6930                           ;RF_Control_B1.c: 78: RF1.Count++;
  6931  068B  3001               	movlw	1
  6932  068C  07BD               	addwf	(_RF1^(0+128)+2),f
  6933  068D  3000               	movlw	0
  6934  068E  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6935                           
  6936                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6937  068F  3002               	movlw	2
  6938  0690  3EBB               	addlw	_RF1& (0+255)
  6939  0691  0086               	movwf	6
  6940  0692  0187               	clrf	7
  6941  0693  3F40               	moviw [0]fsr1
  6942  0694  0642               	xorwf	(_RF1^(0+128)+7),w
  6943  0695  1D03               	skipz
  6944  0696  2E99               	goto	u7235
  6945  0697  3F41               	moviw [1]fsr1
  6946  0698  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6947  0699                     u7235:	
  6948  0699  1D03               	skipz
  6949  069A  2EFD               	goto	l7685
  6950                           
  6951                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6952  069B  01BD               	clrf	(_RF1^(0+128)+2)
  6953  069C  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6954                           
  6955                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6956  069D  10BC               	bcf	(_RF1^(0+128)+1),1
  6957                           
  6958                           ;RF_Control_B1.c: 82: }
  6959                           ;RF_Control_B1.c: 83: } else {
  6960  069E  2EFD               	goto	l7685
  6961  069F                     l7633:	
  6962                           
  6963                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6964  069F  01BD               	clrf	(_RF1^(0+128)+2)
  6965  06A0  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6966                           
  6967                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6968  06A1  10BC               	bcf	(_RF1^(0+128)+1),1
  6969                           
  6970                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6971  06A2  193B               	btfsc	_RF1^(0+128),2
  6972  06A3  1B3B               	btfsc	_RF1^(0+128),6
  6973  06A4  2EB3               	goto	l1980
  6974                           
  6975                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6976  06A5  113B               	bcf	_RF1^(0+128),2
  6977                           
  6978                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6979  06A6  11BB               	bcf	_RF1^(0+128),3
  6980                           
  6981                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6982  06A7  10BB               	bcf	_RF1^(0+128),1
  6983                           
  6984                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6985  06A8  300A               	movlw	10
  6986  06A9  00C2               	movwf	(_RF1^(0+128)+7)
  6987  06AA  3000               	movlw	0
  6988  06AB  00C3               	movwf	(_RF1^(0+128)+8)
  6989                           
  6990                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6991  06AC  319B  23B3  3186   	fcall	_RF_RxDisable
  6992                           
  6993                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6994  06AF  3189  2172  3186   	fcall	_CC2500_TxData
  6995                           
  6996                           ;RF_Control_B1.c: 106: } else {
  6997  06B2  2EFD               	goto	l7685
  6998  06B3                     l1980:	
  6999                           
  7000                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  7001  06B3  1DBB               	btfss	_RF1^(0+128),3
  7002  06B4  2EEC               	goto	l1982
  7003                           
  7004                           ;RF_Control_B1.c: 110: CC2500_RxData();
  7005  06B5  318B  236E  3186   	fcall	_CC2500_RxData
  7006                           
  7007                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  7008  06B8  0021               	movlb	1	; select bank1
  7009  06B9  1CBB               	btfss	_RF1^(0+128),1
  7010  06BA  2EFD               	goto	l7685
  7011                           
  7012                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  7013  06BB  10BB               	bcf	_RF1^(0+128),1
  7014                           
  7015                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  7016  06BC  12BC               	bcf	(_RF1^(0+128)+1),5
  7017                           
  7018                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  7019  06BD  01C5               	clrf	(_RF1^(0+128)+10)
  7020  06BE  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7021                           
  7022                           ;RF_Control_B1.c: 126: getRxData();
  7023  06BF  318D  256E  3186   	fcall	_getRxData
  7024                           
  7025                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  7026  06C2  0021               	movlb	1	; select bank1
  7027  06C3  14BC               	bsf	(_RF1^(0+128)+1),1
  7028                           
  7029                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  7030  06C4  1DBC               	btfss	(_RF1^(0+128)+1),3
  7031  06C5  2ED3               	goto	l7669
  7032                           
  7033                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  7034  06C6  3000               	movlw	0
  7035  06C7  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7036  06C8  300B               	movlw	11
  7037  06C9  1903               	skipnz
  7038  06CA  0242               	subwf	(_RF1^(0+128)+7),w
  7039  06CB  1C03               	skipc
  7040  06CC  2ED1               	goto	l7667
  7041                           
  7042                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  7043  06CD  300A               	movlw	10
  7044  06CE  00C2               	movwf	(_RF1^(0+128)+7)
  7045  06CF  3000               	movlw	0
  7046  06D0  00C3               	movwf	(_RF1^(0+128)+8)
  7047  06D1                     l7667:	
  7048                           
  7049                           ;RF_Control_B1.c: 132: }
  7050                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  7051  06D1  01BF               	clrf	(_RF1^(0+128)+4)
  7052                           
  7053                           ;RF_Control_B1.c: 134: } else {
  7054  06D2  2EFD               	goto	l7685
  7055  06D3                     l7669:	
  7056                           
  7057                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  7058  06D3  3001               	movlw	1
  7059  06D4  0020               	movlb	0	; select bank0
  7060  06D5  00ED               	movwf	??_setRF_Main
  7061  06D6  086D               	movf	??_setRF_Main,w
  7062  06D7  0021               	movlb	1	; select bank1
  7063  06D8  07BF               	addwf	(_RF1^(0+128)+4),f
  7064                           
  7065                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  7066  06D9  083F               	movf	(_RF1^(0+128)+4),w
  7067  06DA  3A02               	xorlw	2
  7068  06DB  1D03               	skipz
  7069  06DC  2EFD               	goto	l7685
  7070                           
  7071                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  7072  06DD  01BF               	clrf	(_RF1^(0+128)+4)
  7073                           
  7074                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  7075  06DE  01C0               	clrf	(_RF1^(0+128)+5)
  7076  06DF  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7077                           
  7078                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  7079  06E0  3000               	movlw	0
  7080  06E1  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7081  06E2  30C8               	movlw	200
  7082  06E3  1903               	skipnz
  7083  06E4  0242               	subwf	(_RF1^(0+128)+7),w
  7084  06E5  1803               	skipnc
  7085  06E6  2EFD               	goto	l7685
  7086                           
  7087                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  7088  06E7  300A               	movlw	10
  7089  06E8  07C2               	addwf	(_RF1^(0+128)+7),f
  7090  06E9  3000               	movlw	0
  7091  06EA  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7092                           
  7093                           ;RF_Control_B1.c: 141: }
  7094                           ;RF_Control_B1.c: 142: }
  7095                           ;RF_Control_B1.c: 143: }
  7096                           ;RF_Control_B1.c: 144: }
  7097                           ;RF_Control_B1.c: 145: } else {
  7098  06EB  2EFD               	goto	l7685
  7099  06EC                     l1982:	
  7100                           
  7101                           ;RF_Control_B1.c: 147: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7102  06EC  1DBB               	btfss	_RF1^(0+128),3
  7103  06ED  18BB               	btfsc	_RF1^(0+128),1
  7104  06EE  2EFD               	goto	l7685
  7105                           
  7106                           ;RF_Control_B1.c: 148: RF1.RxStatus = 1;
  7107  06EF  15BB               	bsf	_RF1^(0+128),3
  7108                           
  7109                           ;RF_Control_B1.c: 149: RF1.Correction = 1;
  7110  06F0  16BC               	bsf	(_RF1^(0+128)+1),5
  7111                           
  7112                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x36);
  7113  06F1  3036               	movlw	54
  7114  06F2  319D  25B4  3186   	fcall	_CC2500_WriteCommand
  7115                           
  7116                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x3A);
  7117  06F5  303A               	movlw	58
  7118  06F6  319D  25B4  3186   	fcall	_CC2500_WriteCommand
  7119                           
  7120                           ;RF_Control_B1.c: 154: CC2500_WriteCommand(0x34);
  7121  06F9  3034               	movlw	52
  7122  06FA  319D  25B4  3186   	fcall	_CC2500_WriteCommand
  7123  06FD                     l7685:	
  7124                           
  7125                           ;RF_Control_B1.c: 155: }
  7126                           ;RF_Control_B1.c: 157: }
  7127                           ;RF_Control_B1.c: 158: }
  7128                           ;RF_Control_B1.c: 159: }
  7129                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  7130  06FD  0021               	movlb	1	; select bank1
  7131  06FE  1DBB               	btfss	_RF1^(0+128),3
  7132  06FF  0008               	return
  7133                           
  7134                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7135  0700  3001               	movlw	1
  7136  0701  07C0               	addwf	(_RF1^(0+128)+5),f
  7137  0702  3000               	movlw	0
  7138  0703  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7139                           
  7140                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  7141  0704  3005               	movlw	5
  7142  0705  3EBB               	addlw	_RF1& (0+255)
  7143  0706  0086               	movwf	6
  7144  0707  0187               	clrf	7
  7145  0708  3F40               	moviw [0]fsr1
  7146  0709  3A64               	xorlw	100
  7147  070A  1D03               	skipz
  7148  070B  2F0E               	goto	u7355
  7149  070C  3F41               	moviw [1]fsr1
  7150  070D  3A00               	xorlw	0
  7151  070E                     u7355:	
  7152  070E  1D03               	skipz
  7153  070F  0008               	return
  7154                           
  7155                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7156  0710  01C0               	clrf	(_RF1^(0+128)+5)
  7157  0711  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7158                           
  7159                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  7160  0712  01BF               	clrf	(_RF1^(0+128)+4)
  7161                           
  7162                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  7163  0713  3000               	movlw	0
  7164  0714  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7165  0715  300B               	movlw	11
  7166  0716  1903               	skipnz
  7167  0717  0242               	subwf	(_RF1^(0+128)+7),w
  7168  0718  1C03               	skipc
  7169  0719  0008               	return
  7170                           
  7171                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7172  071A  300A               	movlw	10
  7173  071B  02C2               	subwf	(_RF1^(0+128)+7),f
  7174  071C  3000               	movlw	0
  7175  071D  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7176                           
  7177                           ;RF_Control_B1.c: 167: }
  7178                           ;RF_Control_B1.c: 168: }
  7179                           ;RF_Control_B1.c: 169: }
  7180                           ;RF_Control_B1.c: 177: }
  7181                           ;RF_Control_B1.c: 178: }
  7182                           ;RF_Control_B1.c: 185: } else {
  7183  071E  0008               	return
  7184  071F                     l1971:	
  7185                           
  7186                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7187  071F  1C20               	btfss	_myMain^(0+128),0
  7188  0720  0008               	return
  7189                           
  7190                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7191  0721  143B               	bsf	_RF1^(0+128),0
  7192  0722  0008               	return
  7193  0723                     __end_of_setRF_Main:	
  7194                           
  7195                           	psect	text25
  7196  0D6E                     __ptext25:	
  7197 ;; *************** function _getRxData *****************
  7198 ;; Defined at:
  7199 ;;		line 281 in file "../src/RF_Control_B1.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;  error           1   76[BANK0 ] unsigned char 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;		None               void
  7206 ;; Registers used:
  7207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;Total ram usage:        2 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:   12
  7220 ;; This function calls:
  7221 ;;		_getMain_All_Error_Status
  7222 ;;		_setControl_Lights_Table
  7223 ;;		_setLog_Code
  7224 ;;		_setTxData
  7225 ;; This function is called by:
  7226 ;;		_setRF_Main
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function _getRxData
  7232  0D6E                     _getRxData:	
  7233                           
  7234                           ;RF_Control_B1.c: 282: char error = getMain_All_Error_Status(0);
  7235                           
  7236                           ;incstack = 0
  7237                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7238  0D6E  3000               	movlw	0
  7239  0D6F  3191  215E  318D   	fcall	_getMain_All_Error_Status
  7240  0D72  0020               	movlb	0	; select bank0
  7241  0D73  00EB               	movwf	??_getRxData
  7242  0D74  086B               	movf	??_getRxData,w
  7243  0D75  00EC               	movwf	getRxData@error
  7244                           
  7245                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7246  0D76  0023               	movlb	3	; select bank3
  7247  0D77  0820               	movf	_RF_Data^(0+384),w
  7248  0D78  3AAA               	xorlw	170
  7249  0D79  1D03               	skipz
  7250  0D7A  2D91               	goto	l7103
  7251  0D7B  0821               	movf	(_RF_Data^(0+384)+1),w
  7252  0D7C  3A01               	xorlw	1
  7253  0D7D  1D03               	skipz
  7254  0D7E  2D91               	goto	l7103
  7255                           
  7256                           ;RF_Control_B1.c: 285: product->Data[2] = 0x55;
  7257  0D7F  3055               	movlw	85
  7258  0D80  0020               	movlb	0	; select bank0
  7259  0D81  00EB               	movwf	??_getRxData
  7260  0D82  086E               	movf	_product,w
  7261  0D83  3E02               	addlw	2
  7262  0D84  0086               	movwf	6
  7263  0D85  3002               	movlw	2	; select bank4/5
  7264  0D86  0087               	movwf	7
  7265  0D87  086B               	movf	??_getRxData,w
  7266  0D88  0081               	movwf	1
  7267                           
  7268                           ;RF_Control_B1.c: 286: setTxData();
  7269  0D89  3187  2723         	fcall	_setTxData
  7270                           
  7271                           ;RF_Control_B1.c: 287: RF1.RunTime = 10;
  7272  0D8B  300A               	movlw	10
  7273  0D8C  0021               	movlb	1	; select bank1
  7274  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7275  0D8E  3000               	movlw	0
  7276  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7277                           
  7278                           ;RF_Control_B1.c: 293: } else {
  7279  0D90  0008               	return
  7280  0D91                     l7103:	
  7281                           
  7282                           ;RF_Control_B1.c: 295: if (error == 0) {
  7283  0D91  0020               	movlb	0	; select bank0
  7284  0D92  08EC               	movf	getRxData@error,f
  7285  0D93  1D03               	skipz
  7286  0D94  0008               	return
  7287                           
  7288                           ;RF_Control_B1.c: 296: if (RF1.Learn == 1) {
  7289  0D95  0021               	movlb	1	; select bank1
  7290  0D96  1F3B               	btfss	_RF1^(0+128),6
  7291  0D97  2DA8               	goto	l7115
  7292                           
  7293                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7294  0D98  0023               	movlb	3	; select bank3
  7295  0D99  08A0               	movf	_RF_Data^(0+384),f
  7296  0D9A  1D03               	skipz
  7297  0D9B  2DA5               	goto	l2022
  7298  0D9C  0821               	movf	(_RF_Data^(0+384)+1),w
  7299  0D9D  3A64               	xorlw	100
  7300  0D9E  1D03               	skipz
  7301  0D9F  2DA5               	goto	l2022
  7302                           
  7303                           ;RF_Control_B1.c: 298: setLog_Code();
  7304  0DA0  3192  2230         	fcall	_setLog_Code
  7305                           
  7306                           ;RF_Control_B1.c: 299: RF1.Checked = 1;
  7307  0DA2  0021               	movlb	1	; select bank1
  7308  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7309                           
  7310                           ;RF_Control_B1.c: 300: } else {
  7311  0DA4  0008               	return
  7312  0DA5                     l2022:	
  7313                           
  7314                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7315  0DA5  0021               	movlb	1	; select bank1
  7316  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7317                           
  7318                           ;RF_Control_B1.c: 302: }
  7319                           ;RF_Control_B1.c: 303: } else {
  7320  0DA7  0008               	return
  7321  0DA8                     l7115:	
  7322                           
  7323                           ;RF_Control_B1.c: 304: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7324  0DA8  0023               	movlb	3	; select bank3
  7325  0DA9  08A0               	movf	_RF_Data^(0+384),f
  7326  0DAA  1D03               	skipz
  7327  0DAB  2DE6               	goto	l7137
  7328  0DAC  0821               	movf	(_RF_Data^(0+384)+1),w
  7329  0DAD  3A02               	xorlw	2
  7330  0DAE  1D03               	skipz
  7331  0DAF  2DE6               	goto	l7137
  7332                           
  7333                           ;RF_Control_B1.c: 306: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7334  0DB0  082C               	movf	(_RF_Data^(0+384)+12),w
  7335  0DB1  3AFF               	xorlw	255
  7336  0DB2  1D03               	skipz
  7337  0DB3  2DC0               	goto	l7127
  7338  0DB4  082D               	movf	(_RF_Data^(0+384)+13),w
  7339  0DB5  3AFF               	xorlw	255
  7340  0DB6  1D03               	skipz
  7341  0DB7  2DC0               	goto	l7127
  7342  0DB8  082E               	movf	(_RF_Data^(0+384)+14),w
  7343  0DB9  3AFF               	xorlw	255
  7344  0DBA  1D03               	skipz
  7345  0DBB  2DC0               	goto	l7127
  7346                           
  7347                           ;RF_Control_B1.c: 307: __nop();
  7348  0DBC  0000               	nop
  7349                           
  7350                           ;RF_Control_B1.c: 308: RF1.Checked = 0;
  7351  0DBD  0021               	movlb	1	; select bank1
  7352  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7353                           
  7354                           ;RF_Control_B1.c: 309: } else {
  7355  0DBF  0008               	return
  7356  0DC0                     l7127:	
  7357                           
  7358                           ;RF_Control_B1.c: 310: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7359  0DC0  0020               	movlb	0	; select bank0
  7360  0DC1  086E               	movf	_product,w
  7361  0DC2  3E0C               	addlw	12
  7362  0DC3  0086               	movwf	6
  7363  0DC4  3002               	movlw	2	; select bank4/5
  7364  0DC5  0087               	movwf	7
  7365  0DC6  0023               	movlb	3	; select bank3
  7366  0DC7  082C               	movf	(_RF_Data^(0+384)+12),w
  7367  0DC8  0601               	xorwf	1,w
  7368  0DC9  1D03               	skipz
  7369  0DCA  0008               	return
  7370  0DCB  0020               	movlb	0	; select bank0
  7371  0DCC  086E               	movf	_product,w
  7372  0DCD  3E0D               	addlw	13
  7373  0DCE  0086               	movwf	6
  7374  0DCF  3002               	movlw	2	; select bank4/5
  7375  0DD0  0087               	movwf	7
  7376  0DD1  0023               	movlb	3	; select bank3
  7377  0DD2  082D               	movf	(_RF_Data^(0+384)+13),w
  7378  0DD3  0601               	xorwf	1,w
  7379  0DD4  1D03               	skipz
  7380  0DD5  0008               	return
  7381  0DD6  0020               	movlb	0	; select bank0
  7382  0DD7  086E               	movf	_product,w
  7383  0DD8  3E0E               	addlw	14
  7384  0DD9  0086               	movwf	6
  7385  0DDA  3002               	movlw	2	; select bank4/5
  7386  0DDB  0087               	movwf	7
  7387  0DDC  0023               	movlb	3	; select bank3
  7388  0DDD  082E               	movf	(_RF_Data^(0+384)+14),w
  7389  0DDE  0601               	xorwf	1,w
  7390  0DDF  1D03               	skipz
  7391  0DE0  0008               	return
  7392                           
  7393                           ;RF_Control_B1.c: 311: setControl_Lights_Table();
  7394  0DE1  318B  2306         	fcall	_setControl_Lights_Table
  7395                           
  7396                           ;RF_Control_B1.c: 312: RF1.Checked = 1;
  7397  0DE3  0021               	movlb	1	; select bank1
  7398  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7399                           
  7400                           ;RF_Control_B1.c: 313: }
  7401                           ;RF_Control_B1.c: 314: }
  7402                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7403  0DE5  0008               	return
  7404  0DE6                     l7137:	
  7405  0DE6  0023               	movlb	3	; select bank3
  7406  0DE7  0820               	movf	_RF_Data^(0+384),w
  7407  0DE8  3AFF               	xorlw	255
  7408  0DE9  1D03               	skipz
  7409  0DEA  2DF1               	goto	l7143
  7410  0DEB  0821               	movf	(_RF_Data^(0+384)+1),w
  7411  0DEC  3A02               	xorlw	2
  7412  0DED  1D03               	skipz
  7413  0DEE  2DF1               	goto	l7143
  7414                           
  7415                           ;RF_Control_B1.c: 316: __nop();
  7416  0DEF  0000               	nop
  7417                           
  7418                           ;RF_Control_B1.c: 317: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7419  0DF0  0008               	return
  7420  0DF1                     l7143:	
  7421  0DF1  0023               	movlb	3	; select bank3
  7422  0DF2  08A0               	movf	_RF_Data^(0+384),f
  7423  0DF3  1D03               	skipz
  7424  0DF4  2DFB               	goto	l2032
  7425  0DF5  0821               	movf	(_RF_Data^(0+384)+1),w
  7426  0DF6  3A65               	xorlw	101
  7427  0DF7  1D03               	skipz
  7428  0DF8  2DFB               	goto	l2032
  7429                           
  7430                           ;RF_Control_B1.c: 318: __nop();
  7431  0DF9  0000               	nop
  7432                           
  7433                           ;RF_Control_B1.c: 319: } else {
  7434  0DFA  0008               	return
  7435  0DFB                     l2032:	
  7436                           
  7437                           ;RF_Control_B1.c: 320: RF1.Checked = 0;
  7438  0DFB  0021               	movlb	1	; select bank1
  7439  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7440                           
  7441                           ;RF_Control_B1.c: 328: ;
  7442                           
  7443                           ;RF_Control_B1.c: 321: }
  7444                           ;RF_Control_B1.c: 326: }
  7445                           ;RF_Control_B1.c: 327: } else {
  7446  0DFD  0008               	return
  7447  0DFE                     __end_of_getRxData:	
  7448                           
  7449                           	psect	text26
  7450  1230                     __ptext26:	
  7451 ;; *************** function _setLog_Code *****************
  7452 ;; Defined at:
  7453 ;;		line 334 in file "../src/RF_Control_B1.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;		None               void
  7460 ;; Registers used:
  7461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;Total ram usage:        1 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    7
  7474 ;; This function calls:
  7475 ;;		_setBuz
  7476 ;;		_setMemory_LoopSave
  7477 ;;		_setMemory_Modify
  7478 ;; This function is called by:
  7479 ;;		_getRxData
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function _setLog_Code
  7485  1230                     _setLog_Code:	
  7486                           
  7487                           ;RF_Control_B1.c: 335: RF1.Learn = 0;
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7491  1230  0021               	movlb	1	; select bank1
  7492  1231  133B               	bcf	_RF1^(0+128),6
  7493                           
  7494                           ;RF_Control_B1.c: 336: product->Data[12]=RF_Data[12];
  7495  1232  0023               	movlb	3	; select bank3
  7496  1233  082C               	movf	(_RF_Data^(0+384)+12),w
  7497  1234  0020               	movlb	0	; select bank0
  7498  1235  00AD               	movwf	??_setLog_Code
  7499  1236  086E               	movf	_product,w
  7500  1237  3E0C               	addlw	12
  7501  1238  0086               	movwf	6
  7502  1239  3002               	movlw	2	; select bank4/5
  7503  123A  0087               	movwf	7
  7504  123B  082D               	movf	??_setLog_Code,w
  7505  123C  0081               	movwf	1
  7506                           
  7507                           ;RF_Control_B1.c: 337: product->Data[13]=RF_Data[13];
  7508  123D  0023               	movlb	3	; select bank3
  7509  123E  082D               	movf	(_RF_Data^(0+384)+13),w
  7510  123F  0020               	movlb	0	; select bank0
  7511  1240  00AD               	movwf	??_setLog_Code
  7512  1241  086E               	movf	_product,w
  7513  1242  3E0D               	addlw	13
  7514  1243  0086               	movwf	6
  7515  1244  3002               	movlw	2	; select bank4/5
  7516  1245  0087               	movwf	7
  7517  1246  082D               	movf	??_setLog_Code,w
  7518  1247  0081               	movwf	1
  7519                           
  7520                           ;RF_Control_B1.c: 338: product->Data[14]=RF_Data[14];
  7521  1248  0023               	movlb	3	; select bank3
  7522  1249  082E               	movf	(_RF_Data^(0+384)+14),w
  7523  124A  0020               	movlb	0	; select bank0
  7524  124B  00AD               	movwf	??_setLog_Code
  7525  124C  086E               	movf	_product,w
  7526  124D  3E0E               	addlw	14
  7527  124E  0086               	movwf	6
  7528  124F  3002               	movlw	2	; select bank4/5
  7529  1250  0087               	movwf	7
  7530  1251  082D               	movf	??_setLog_Code,w
  7531  1252  0081               	movwf	1
  7532                           
  7533                           ;RF_Control_B1.c: 339: setBuz(1, 100);
  7534  1253  3064               	movlw	100
  7535  1254  00A9               	movwf	setBuz@time
  7536  1255  3000               	movlw	0
  7537  1256  00AA               	movwf	setBuz@time+1
  7538  1257  3001               	movlw	1
  7539  1258  3196  263C  3192   	fcall	_setBuz
  7540                           
  7541                           ;RF_Control_B1.c: 340: if (myMain.First == 1) {
  7542  125B  0021               	movlb	1	; select bank1
  7543  125C  1EA0               	btfss	_myMain^(0+128),5
  7544  125D  2A62               	goto	l2038
  7545                           
  7546                           ;RF_Control_B1.c: 341: setMemory_LoopSave(1);
  7547  125E  3001               	movlw	1
  7548  125F  319C  24B5  3192   	fcall	_setMemory_LoopSave
  7549  1262                     l2038:	
  7550                           
  7551                           ;RF_Control_B1.c: 342: }
  7552                           ;RF_Control_B1.c: 343: setMemory_Modify(1);
  7553  1262  3001               	movlw	1
  7554  1263  319C  24A2         	fcall	_setMemory_Modify
  7555  1265  0008               	return
  7556  1266                     __end_of_setLog_Code:	
  7557                           
  7558                           	psect	text27
  7559  1CB5                     __ptext27:	
  7560 ;; *************** function _setMemory_LoopSave *****************
  7561 ;; Defined at:
  7562 ;;		line 1031 in file "../src/MCU_B1.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  command         1    wreg     unsigned char 
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;  command         1    1[BANK0 ] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;Total ram usage:        2 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    5
  7583 ;; This function calls:
  7584 ;;		Nothing
  7585 ;; This function is called by:
  7586 ;;		_setLog_Code
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           
  7591                           ;psect for function _setMemory_LoopSave
  7592  1CB5                     _setMemory_LoopSave:	
  7593                           
  7594                           ;incstack = 0
  7595                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7596                           ;setMemory_LoopSave@command stored from wreg
  7597  1CB5  0020               	movlb	0	; select bank0
  7598  1CB6  00A1               	movwf	setMemory_LoopSave@command
  7599                           
  7600                           ;MCU_B1.c: 1032: Memory.LoopSave = command == 1 ? 1 : 0;
  7601  1CB7  0821               	movf	setMemory_LoopSave@command,w
  7602  1CB8  3A01               	xorlw	1
  7603  1CB9  3000               	movlw	0
  7604  1CBA  1903               	skipnz
  7605  1CBB  3001               	movlw	1
  7606  1CBC  00A0               	movwf	??_setMemory_LoopSave
  7607  1CBD  0DA0               	rlf	??_setMemory_LoopSave,f
  7608  1CBE  0DA0               	rlf	??_setMemory_LoopSave,f
  7609  1CBF  0024               	movlb	4	; select bank4
  7610  1CC0  0844               	movf	(_Memory^(0+512)+36),w
  7611  1CC1  0020               	movlb	0	; select bank0
  7612  1CC2  0620               	xorwf	??_setMemory_LoopSave,w
  7613  1CC3  39FB               	andlw	-5
  7614  1CC4  0620               	xorwf	??_setMemory_LoopSave,w
  7615  1CC5  0024               	movlb	4	; select bank4
  7616  1CC6  00C4               	movwf	(_Memory^(0+512)+36)
  7617  1CC7  0008               	return
  7618  1CC8                     __end_of_setMemory_LoopSave:	
  7619                           
  7620                           	psect	text28
  7621  0B06                     __ptext28:	
  7622 ;; *************** function _setControl_Lights_Table *****************
  7623 ;; Defined at:
  7624 ;;		line 347 in file "../src/RF_Control_B1.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;		None
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;		None               void
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        0 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:   11
  7645 ;; This function calls:
  7646 ;;		_setBuz
  7647 ;;		_setDimmerLights_ErrorClose
  7648 ;;		_setRFSW_AdjControl
  7649 ;;		_setRFSW_Control
  7650 ;;		_setTxData
  7651 ;; This function is called by:
  7652 ;;		_getRxData
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           
  7657                           ;psect for function _setControl_Lights_Table
  7658  0B06                     _setControl_Lights_Table:	
  7659                           
  7660                           ;RF_Control_B1.c: 348: switch (RF_Data[15]) {
  7661                           
  7662                           ;incstack = 0
  7663                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7664  0B06  2B52               	goto	l6713
  7665  0B07                     l6687:	
  7666                           ;RF_Control_B1.c: 349: case 0x00:
  7667                           
  7668                           
  7669                           ;RF_Control_B1.c: 351: setDimmerLights_ErrorClose(255);
  7670  0B07  30FF               	movlw	255
  7671  0B08  3196  26EE  318B   	fcall	_setDimmerLights_ErrorClose
  7672                           
  7673                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7674  0B0B  0020               	movlb	0	; select bank0
  7675  0B0C  086E               	movf	_product,w
  7676  0B0D  3E09               	addlw	9
  7677  0B0E  0086               	movwf	6
  7678  0B0F  3002               	movlw	2	; select bank4/5
  7679  0B10  0087               	movwf	7
  7680  0B11  0181               	clrf	1
  7681                           
  7682                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7683  0B12  086E               	movf	_product,w
  7684  0B13  3E0B               	addlw	11
  7685  0B14  0086               	movwf	6
  7686  0B15  3002               	movlw	2	; select bank4/5
  7687  0B16  0087               	movwf	7
  7688  0B17  0181               	clrf	1
  7689                           
  7690                           ;RF_Control_B1.c: 355: product->Data[15]=0;
  7691  0B18  086E               	movf	_product,w
  7692  0B19  3E0F               	addlw	15
  7693  0B1A  0086               	movwf	6
  7694  0B1B  3002               	movlw	2	; select bank4/5
  7695  0B1C  0087               	movwf	7
  7696  0B1D  0181               	clrf	1
  7697                           
  7698                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7699  0B1E  086E               	movf	_product,w
  7700  0B1F  3E11               	addlw	17
  7701  0B20  0086               	movwf	6
  7702  0B21  3002               	movlw	2	; select bank4/5
  7703  0B22  0087               	movwf	7
  7704  0B23  0181               	clrf	1
  7705                           
  7706                           ;RF_Control_B1.c: 357: setBuz(1, 100);
  7707  0B24  3064               	movlw	100
  7708  0B25  00A9               	movwf	setBuz@time
  7709  0B26  3000               	movlw	0
  7710  0B27  00AA               	movwf	setBuz@time+1
  7711  0B28  3001               	movlw	1
  7712  0B29  3196  263C         	fcall	_setBuz
  7713                           
  7714                           ;RF_Control_B1.c: 359: break;
  7715  0B2B  0008               	return
  7716  0B2C                     l6699:	
  7717                           ;RF_Control_B1.c: 360: case 0x20:
  7718                           
  7719                           
  7720                           ;RF_Control_B1.c: 361: product->Data[9]=0;
  7721  0B2C  0020               	movlb	0	; select bank0
  7722  0B2D  086E               	movf	_product,w
  7723  0B2E  3E09               	addlw	9
  7724  0B2F  0086               	movwf	6
  7725  0B30  3002               	movlw	2	; select bank4/5
  7726  0B31  0087               	movwf	7
  7727  0B32  0181               	clrf	1
  7728                           
  7729                           ;RF_Control_B1.c: 362: product->Data[11]=0;
  7730  0B33  086E               	movf	_product,w
  7731  0B34  3E0B               	addlw	11
  7732  0B35  0086               	movwf	6
  7733  0B36  3002               	movlw	2	; select bank4/5
  7734  0B37  0087               	movwf	7
  7735  0B38  0181               	clrf	1
  7736                           
  7737                           ;RF_Control_B1.c: 363: product->Data[17]=0;
  7738  0B39  086E               	movf	_product,w
  7739  0B3A  3E11               	addlw	17
  7740  0B3B  0086               	movwf	6
  7741  0B3C  3002               	movlw	2	; select bank4/5
  7742  0B3D  0087               	movwf	7
  7743  0B3E  0181               	clrf	1
  7744                           
  7745                           ;RF_Control_B1.c: 364: setTxData();
  7746  0B3F  3187  2723         	fcall	_setTxData
  7747                           
  7748                           ;RF_Control_B1.c: 365: break;
  7749  0B41  0008               	return
  7750  0B42                     l6703:	
  7751                           ;RF_Control_B1.c: 366: case 0x01:
  7752                           
  7753                           
  7754                           ;RF_Control_B1.c: 368: setRFSW_Control(1);
  7755  0B42  3001               	movlw	1
  7756  0B43  3195  2545         	fcall	_setRFSW_Control
  7757                           
  7758                           ;RF_Control_B1.c: 370: break;
  7759  0B45  0008               	return
  7760  0B46                     l6705:	
  7761                           ;RF_Control_B1.c: 371: case 0x02:
  7762                           
  7763                           
  7764                           ;RF_Control_B1.c: 373: setRFSW_Control(2);
  7765  0B46  3002               	movlw	2
  7766  0B47  3195  2545         	fcall	_setRFSW_Control
  7767                           
  7768                           ;RF_Control_B1.c: 380: break;
  7769                           
  7770                           ;RF_Control_B1.c: 376: case 0x03:
  7771                           
  7772                           ;RF_Control_B1.c: 375: break;
  7773  0B49  0008               	return
  7774  0B4A                     l6707:	
  7775                           ;RF_Control_B1.c: 381: case 0x11:
  7776                           
  7777                           
  7778                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7779  0B4A  3001               	movlw	1
  7780  0B4B  3193  234F         	fcall	_setRFSW_AdjControl
  7781                           
  7782                           ;RF_Control_B1.c: 387: break;
  7783  0B4D  0008               	return
  7784  0B4E                     l6709:	
  7785                           ;RF_Control_B1.c: 388: case 0x21:
  7786                           
  7787                           
  7788                           ;RF_Control_B1.c: 391: setRFSW_AdjControl(2);
  7789  0B4E  3002               	movlw	2
  7790  0B4F  3193  234F         	fcall	_setRFSW_AdjControl
  7791                           
  7792                           ;RF_Control_B1.c: 402: }
  7793                           
  7794                           ;RF_Control_B1.c: 401: break;
  7795                           
  7796                           ;RF_Control_B1.c: 395: case 0x31:
  7797                           
  7798                           ;RF_Control_B1.c: 394: break;
  7799  0B51  0008               	return
  7800  0B52                     l6713:	
  7801  0B52  0023               	movlb	3	; select bank3
  7802  0B53  082F               	movf	(_RF_Data^(0+384)+15),w
  7803                           
  7804                           ; Switch size 1, requested type "space"
  7805                           ; Number of cases is 8, Range of values is 0 to 49
  7806                           ; switch strategies available:
  7807                           ; Name         Instructions Cycles
  7808                           ; simple_byte           25    13 (average)
  7809                           ; direct_byte          106     6 (fixed)
  7810                           ; jumptable            260     6 (fixed)
  7811                           ;	Chosen strategy is simple_byte
  7812  0B54  3A00               	xorlw	0	; case 0
  7813  0B55  1903               	skipnz
  7814  0B56  2B07               	goto	l6687
  7815  0B57  3A01               	xorlw	1	; case 1
  7816  0B58  1903               	skipnz
  7817  0B59  2B42               	goto	l6703
  7818  0B5A  3A03               	xorlw	3	; case 2
  7819  0B5B  1903               	skipnz
  7820  0B5C  2B46               	goto	l6705
  7821  0B5D  3A01               	xorlw	1	; case 3
  7822  0B5E  1903               	skipnz
  7823  0B5F  2B6D               	goto	l2052
  7824  0B60  3A12               	xorlw	18	; case 17
  7825  0B61  1903               	skipnz
  7826  0B62  2B4A               	goto	l6707
  7827  0B63  3A31               	xorlw	49	; case 32
  7828  0B64  1903               	skipnz
  7829  0B65  2B2C               	goto	l6699
  7830  0B66  3A01               	xorlw	1	; case 33
  7831  0B67  1903               	skipnz
  7832  0B68  2B4E               	goto	l6709
  7833  0B69  3A10               	xorlw	16	; case 49
  7834  0B6A  1903               	skipnz
  7835  0B6B  2B6D               	goto	l2052
  7836  0B6C  2B6D               	goto	l2052
  7837  0B6D                     l2052:	
  7838  0B6D  0008               	return
  7839  0B6E                     __end_of_setControl_Lights_Table:	
  7840                           
  7841                           	psect	text29
  7842  1545                     __ptext29:	
  7843 ;; *************** function _setRFSW_Control *****************
  7844 ;; Defined at:
  7845 ;;		line 429 in file "../src/RF_Control_B1.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  sw              1    wreg     unsigned char 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  sw              1   19[BANK0 ] unsigned char 
  7850 ;;  status          1   18[BANK0 ] unsigned char 
  7851 ;; Return value:  Size  Location     Type
  7852 ;;		None               void
  7853 ;; Registers used:
  7854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;Total ram usage:        3 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    9
  7867 ;; This function calls:
  7868 ;;		_getDelayOff_GO
  7869 ;;		_getDimmerLights_Status
  7870 ;;		_setBuz
  7871 ;;		_setDelayOff_GO
  7872 ;;		_setDimmerLights_SwOff
  7873 ;;		_setDimmerLights_SwOn
  7874 ;;		_setRF_DimmerLights
  7875 ;;		_setTxData
  7876 ;; This function is called by:
  7877 ;;		_setControl_Lights_Table
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           
  7882                           ;psect for function _setRFSW_Control
  7883  1545                     _setRFSW_Control:	
  7884                           
  7885                           ;incstack = 0
  7886                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7887                           ;setRFSW_Control@sw stored from wreg
  7888  1545  0020               	movlb	0	; select bank0
  7889  1546  00B3               	movwf	setRFSW_Control@sw
  7890                           
  7891                           ;RF_Control_B1.c: 430: char status = 0;
  7892  1547  01B2               	clrf	setRFSW_Control@status
  7893                           
  7894                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  7895  1548  0023               	movlb	3	; select bank3
  7896  1549  0830               	movf	(_RF_Data^(0+384)+16),w
  7897  154A  3A80               	xorlw	128
  7898  154B  1D03               	skipz
  7899  154C  2D78               	goto	l6511
  7900                           
  7901                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  7902  154D  0020               	movlb	0	; select bank0
  7903  154E  01AA               	clrf	setDelayOff_GO@command
  7904  154F  0AAA               	incf	setDelayOff_GO@command,f
  7905  1550  0023               	movlb	3	; select bank3
  7906  1551  0831               	movf	(_RF_Data^(0+384)+17),w
  7907  1552  0020               	movlb	0	; select bank0
  7908  1553  00B1               	movwf	??_setRFSW_Control
  7909  1554  0831               	movf	??_setRFSW_Control,w
  7910  1555  00AB               	movwf	setDelayOff_GO@value
  7911  1556  0833               	movf	setRFSW_Control@sw,w
  7912  1557  3188  2057  3195   	fcall	_setDelayOff_GO
  7913                           
  7914                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  7915  155A  0020               	movlb	0	; select bank0
  7916  155B  0833               	movf	setRFSW_Control@sw,w
  7917  155C  319B  23D1  3195   	fcall	_getDimmerLights_Status
  7918  155F  3A01               	xorlw	1
  7919  1560  1D03               	skipz
  7920  1561  2D87               	goto	l6515
  7921                           
  7922                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  7923  1562  3064               	movlw	100
  7924  1563  0020               	movlb	0	; select bank0
  7925  1564  00A9               	movwf	setBuz@time
  7926  1565  3000               	movlw	0
  7927  1566  00AA               	movwf	setBuz@time+1
  7928  1567  3001               	movlw	1
  7929  1568  3196  263C  3195   	fcall	_setBuz
  7930                           
  7931                           ;RF_Control_B1.c: 437: status = 1;
  7932  156B  0020               	movlb	0	; select bank0
  7933  156C  01B2               	clrf	setRFSW_Control@status
  7934  156D  0AB2               	incf	setRFSW_Control@status,f
  7935                           
  7936                           ;RF_Control_B1.c: 438: setRF_DimmerLights(sw, 1);
  7937  156E  01A0               	clrf	setRF_DimmerLights@on
  7938  156F  0AA0               	incf	setRF_DimmerLights@on,f
  7939  1570  0833               	movf	setRFSW_Control@sw,w
  7940  1571  3197  2748  3195   	fcall	_setRF_DimmerLights
  7941                           
  7942                           ;RF_Control_B1.c: 439: setTxData();
  7943  1574  3187  2723  3195   	fcall	_setTxData
  7944                           
  7945                           ;RF_Control_B1.c: 441: }
  7946                           ;RF_Control_B1.c: 442: } else {
  7947  1577  2D87               	goto	l6515
  7948  1578                     l6511:	
  7949                           
  7950                           ;RF_Control_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
  7951  1578  0020               	movlb	0	; select bank0
  7952  1579  0833               	movf	setRFSW_Control@sw,w
  7953  157A  319B  23E1  3195   	fcall	_getDelayOff_GO
  7954  157D  3A01               	xorlw	1
  7955  157E  1D03               	skipz
  7956  157F  2D87               	goto	l6515
  7957                           
  7958                           ;RF_Control_B1.c: 445: setDelayOff_GO(sw, 0, 0);
  7959  1580  0020               	movlb	0	; select bank0
  7960  1581  01AA               	clrf	setDelayOff_GO@command
  7961  1582  01AB               	clrf	setDelayOff_GO@value
  7962  1583  0833               	movf	setRFSW_Control@sw,w
  7963  1584  3188  2057  3195   	fcall	_setDelayOff_GO
  7964  1587                     l6515:	
  7965                           
  7966                           ;RF_Control_B1.c: 446: }
  7967                           ;RF_Control_B1.c: 448: }
  7968                           ;RF_Control_B1.c: 449: if (status == 0) {
  7969  1587  0020               	movlb	0	; select bank0
  7970  1588  08B2               	movf	setRFSW_Control@status,f
  7971  1589  1D03               	skipz
  7972  158A  0008               	return
  7973                           
  7974                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  7975  158B  0833               	movf	setRFSW_Control@sw,w
  7976  158C  3192  22D4  3195   	fcall	_setDimmerLights_SwOn
  7977                           
  7978                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  7979  158F  0020               	movlb	0	; select bank0
  7980  1590  0833               	movf	setRFSW_Control@sw,w
  7981  1591  3194  2419         	fcall	_setDimmerLights_SwOff
  7982  1593  0008               	return
  7983  1594                     __end_of_setRFSW_Control:	
  7984                           
  7985                           	psect	text30
  7986  12D4                     __ptext30:	
  7987 ;; *************** function _setDimmerLights_SwOn *****************
  7988 ;; Defined at:
  7989 ;;		line 508 in file "../src/Dimmer_B1.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  sw              1    wreg     unsigned char 
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;  sw              1   15[BANK0 ] unsigned char 
  7994 ;;  idle            1   14[BANK0 ] unsigned char 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;		None               void
  7997 ;; Registers used:
  7998 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;Total ram usage:        3 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    7
  8011 ;; This function calls:
  8012 ;;		_DimmerLightsPointSelect
  8013 ;;		_getAll_DimmerLights_AdjGO
  8014 ;;		_setBuz
  8015 ;;		_setDimmerLights_Trigger
  8016 ;; This function is called by:
  8017 ;;		_setRFSW_Control
  8018 ;;		_setSw_Main
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           
  8023                           ;psect for function _setDimmerLights_SwOn
  8024  12D4                     _setDimmerLights_SwOn:	
  8025                           
  8026                           ;incstack = 0
  8027                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8028                           ;setDimmerLights_SwOn@sw stored from wreg
  8029  12D4  0020               	movlb	0	; select bank0
  8030  12D5  00AF               	movwf	setDimmerLights_SwOn@sw
  8031                           
  8032                           ;Dimmer_B1.c: 509: DimmerLightsPointSelect(sw);
  8033  12D6  082F               	movf	setDimmerLights_SwOn@sw,w
  8034  12D7  319C  248F  3192   	fcall	_DimmerLightsPointSelect
  8035                           
  8036                           ;Dimmer_B1.c: 510: char idle = 0;
  8037  12DA  0020               	movlb	0	; select bank0
  8038  12DB  01AE               	clrf	setDimmerLights_SwOn@idle
  8039                           
  8040                           ;Dimmer_B1.c: 512: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  8041  12DC  319C  2402  3192   	fcall	_getAll_DimmerLights_AdjGO
  8042  12DF  3A01               	xorlw	1
  8043  12E0  3000               	movlw	0
  8044  12E1  1903               	skipnz
  8045  12E2  3001               	movlw	1
  8046  12E3  0020               	movlb	0	; select bank0
  8047  12E4  00AD               	movwf	??_setDimmerLights_SwOn
  8048  12E5  082D               	movf	??_setDimmerLights_SwOn,w
  8049  12E6  00AE               	movwf	setDimmerLights_SwOn@idle
  8050                           
  8051                           ;Dimmer_B1.c: 514: if (idle == 0) {
  8052  12E7  08AE               	movf	setDimmerLights_SwOn@idle,f
  8053  12E8  1D03               	skipz
  8054  12E9  0008               	return
  8055                           
  8056                           ;Dimmer_B1.c: 515: DimmerLights->SwFlag = 1;
  8057  12EA  086F               	movf	_DimmerLights,w
  8058  12EB  3E09               	addlw	9
  8059  12EC  0086               	movwf	6
  8060  12ED  3001               	movlw	1	; select bank2/3
  8061  12EE  0087               	movwf	7
  8062  12EF  1701               	bsf	1,6
  8063                           
  8064                           ;Dimmer_B1.c: 516: setBuz(1, 100);
  8065  12F0  3064               	movlw	100
  8066  12F1  00A9               	movwf	setBuz@time
  8067  12F2  3000               	movlw	0
  8068  12F3  00AA               	movwf	setBuz@time+1
  8069  12F4  3001               	movlw	1
  8070  12F5  3196  263C  3192   	fcall	_setBuz
  8071                           
  8072                           ;Dimmer_B1.c: 517: if (DimmerLights->Status == 0) {
  8073  12F8  0020               	movlb	0	; select bank0
  8074  12F9  086F               	movf	_DimmerLights,w
  8075  12FA  0086               	movwf	6
  8076  12FB  3001               	movlw	1	; select bank2/3
  8077  12FC  0087               	movwf	7
  8078  12FD  1A81               	btfsc	1,5
  8079  12FE  2B0A               	goto	l6319
  8080                           
  8081                           ;Dimmer_B1.c: 518: DimmerLights->Status = 1;
  8082  12FF  086F               	movf	_DimmerLights,w
  8083  1300  0086               	movwf	6
  8084  1301  3001               	movlw	1	; select bank2/3
  8085  1302  0087               	movwf	7
  8086  1303  1681               	bsf	1,5
  8087                           
  8088                           ;Dimmer_B1.c: 519: setDimmerLights_Trigger(sw, 1);
  8089  1304  01A2               	clrf	setDimmerLights_Trigger@command
  8090  1305  0AA2               	incf	setDimmerLights_Trigger@command,f
  8091  1306  082F               	movf	setDimmerLights_SwOn@sw,w
  8092  1307  3187  27E2         	fcall	_setDimmerLights_Trigger
  8093                           
  8094                           ;Dimmer_B1.c: 520: } else {
  8095  1309  0008               	return
  8096  130A                     l6319:	
  8097                           
  8098                           ;Dimmer_B1.c: 521: DimmerLights->Status = 0;
  8099  130A  0020               	movlb	0	; select bank0
  8100  130B  086F               	movf	_DimmerLights,w
  8101  130C  0086               	movwf	6
  8102  130D  3001               	movlw	1	; select bank2/3
  8103  130E  0087               	movwf	7
  8104  130F  1281               	bcf	1,5
  8105  1310  0008               	return
  8106  1311                     __end_of_setDimmerLights_SwOn:	
  8107                           
  8108                           	psect	text31
  8109  134F                     __ptext31:	
  8110 ;; *************** function _setRFSW_AdjControl *****************
  8111 ;; Defined at:
  8112 ;;		line 458 in file "../src/RF_Control_B1.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  sw              1    wreg     unsigned char 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  sw              1   74[BANK0 ] unsigned char 
  8117 ;;  status          1   73[BANK0 ] unsigned char 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;		None               void
  8120 ;; Registers used:
  8121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;Total ram usage:        4 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:   10
  8134 ;; This function calls:
  8135 ;;		_getDimmerLights_Status
  8136 ;;		_setMemory_Modify
  8137 ;;		_setRF_DimmerValue
  8138 ;;		_setTxData
  8139 ;; This function is called by:
  8140 ;;		_setControl_Lights_Table
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           
  8145                           ;psect for function _setRFSW_AdjControl
  8146  134F                     _setRFSW_AdjControl:	
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8150                           ;setRFSW_AdjControl@sw stored from wreg
  8151  134F  0020               	movlb	0	; select bank0
  8152  1350  00EA               	movwf	setRFSW_AdjControl@sw
  8153                           
  8154                           ;RF_Control_B1.c: 459: char status = 0;
  8155  1351  01E9               	clrf	setRFSW_AdjControl@status
  8156                           
  8157                           ;RF_Control_B1.c: 461: status = getDimmerLights_Status(sw);
  8158  1352  086A               	movf	setRFSW_AdjControl@sw,w
  8159  1353  319B  23D1  3193   	fcall	_getDimmerLights_Status
  8160  1356  0020               	movlb	0	; select bank0
  8161  1357  00E7               	movwf	??_setRFSW_AdjControl
  8162  1358  0867               	movf	??_setRFSW_AdjControl,w
  8163  1359  00E9               	movwf	setRFSW_AdjControl@status
  8164                           
  8165                           ;RF_Control_B1.c: 464: if (status == 1) {
  8166  135A  0869               	movf	setRFSW_AdjControl@status,w
  8167  135B  3A01               	xorlw	1
  8168  135C  1D03               	skipz
  8169  135D  2B68               	goto	l6529
  8170                           
  8171                           ;RF_Control_B1.c: 465: setMemory_Modify(1);
  8172  135E  3001               	movlw	1
  8173  135F  319C  24A2  3193   	fcall	_setMemory_Modify
  8174                           
  8175                           ;RF_Control_B1.c: 466: setRF_DimmerValue(sw);
  8176  1362  0020               	movlb	0	; select bank0
  8177  1363  086A               	movf	setRFSW_AdjControl@sw,w
  8178  1364  3191  212C  3193   	fcall	_setRF_DimmerValue
  8179                           
  8180                           ;RF_Control_B1.c: 467: } else {
  8181  1367  2B7A               	goto	l2064
  8182  1368                     l6529:	
  8183                           
  8184                           ;RF_Control_B1.c: 468: product->Data[9]=product->Data[20 + sw];
  8185  1368  0020               	movlb	0	; select bank0
  8186  1369  086A               	movf	setRFSW_AdjControl@sw,w
  8187  136A  3E14               	addlw	20
  8188  136B  076E               	addwf	_product,w
  8189  136C  00E7               	movwf	??_setRFSW_AdjControl
  8190  136D  0867               	movf	??_setRFSW_AdjControl,w
  8191  136E  0086               	movwf	6
  8192  136F  3002               	movlw	2	; select bank4/5
  8193  1370  0087               	movwf	7
  8194  1371  0801               	movf	1,w
  8195  1372  00E8               	movwf	??_setRFSW_AdjControl+1
  8196  1373  086E               	movf	_product,w
  8197  1374  3E09               	addlw	9
  8198  1375  0086               	movwf	6
  8199  1376  3002               	movlw	2	; select bank4/5
  8200  1377  0087               	movwf	7
  8201  1378  0868               	movf	??_setRFSW_AdjControl+1,w
  8202  1379  0081               	movwf	1
  8203  137A                     l2064:	
  8204                           
  8205                           ;RF_Control_B1.c: 469: }
  8206                           ;RF_Control_B1.c: 470: product->Data[17]=product->Data[26 + sw];
  8207  137A  0020               	movlb	0	; select bank0
  8208  137B  086A               	movf	setRFSW_AdjControl@sw,w
  8209  137C  3E1A               	addlw	26
  8210  137D  076E               	addwf	_product,w
  8211  137E  00E7               	movwf	??_setRFSW_AdjControl
  8212  137F  0867               	movf	??_setRFSW_AdjControl,w
  8213  1380  0086               	movwf	6
  8214  1381  3002               	movlw	2	; select bank4/5
  8215  1382  0087               	movwf	7
  8216  1383  0801               	movf	1,w
  8217  1384  00E8               	movwf	??_setRFSW_AdjControl+1
  8218  1385  086E               	movf	_product,w
  8219  1386  3E11               	addlw	17
  8220  1387  0086               	movwf	6
  8221  1388  3002               	movlw	2	; select bank4/5
  8222  1389  0087               	movwf	7
  8223  138A  0868               	movf	??_setRFSW_AdjControl+1,w
  8224  138B  0081               	movwf	1
  8225                           
  8226                           ;RF_Control_B1.c: 471: setTxData();
  8227  138C  3187  2723         	fcall	_setTxData
  8228  138E  0008               	return
  8229  138F                     __end_of_setRFSW_AdjControl:	
  8230                           
  8231                           	psect	text32
  8232  112C                     __ptext32:	
  8233 ;; *************** function _setRF_DimmerValue *****************
  8234 ;; Defined at:
  8235 ;;		line 476 in file "../src/RF_Control_B1.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;  lights          1    wreg     unsigned char 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  lights          1   70[BANK0 ] unsigned char 
  8240 ;; Return value:  Size  Location     Type
  8241 ;;		None               void
  8242 ;; Registers used:
  8243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;Total ram usage:        3 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    9
  8256 ;; This function calls:
  8257 ;;		_setDimmerLights_AdjRF
  8258 ;; This function is called by:
  8259 ;;		_setRFSW_AdjControl
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           
  8264                           ;psect for function _setRF_DimmerValue
  8265  112C                     _setRF_DimmerValue:	
  8266                           
  8267                           ;incstack = 0
  8268                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8269                           ;setRF_DimmerValue@lights stored from wreg
  8270  112C  0020               	movlb	0	; select bank0
  8271  112D  00E6               	movwf	setRF_DimmerValue@lights
  8272                           
  8273                           ;RF_Control_B1.c: 477: if (RF_Data[9] > 0x64) {
  8274  112E  3065               	movlw	101
  8275  112F  0023               	movlb	3	; select bank3
  8276  1130  0229               	subwf	(_RF_Data^(0+384)+9),w
  8277  1131  1C03               	skipc
  8278  1132  2939               	goto	l6407
  8279                           
  8280                           ;RF_Control_B1.c: 478: RF_Data[9] = 0x64;
  8281  1133  3064               	movlw	100
  8282  1134  0020               	movlb	0	; select bank0
  8283  1135  00E4               	movwf	??_setRF_DimmerValue
  8284  1136  0864               	movf	??_setRF_DimmerValue,w
  8285  1137  0023               	movlb	3	; select bank3
  8286  1138  00A9               	movwf	(_RF_Data^(0+384)+9)
  8287  1139                     l6407:	
  8288                           
  8289                           ;RF_Control_B1.c: 479: }
  8290                           ;RF_Control_B1.c: 480: product->Data[9]=RF_Data[9];
  8291  1139  0829               	movf	(_RF_Data^(0+384)+9),w
  8292  113A  0020               	movlb	0	; select bank0
  8293  113B  00E4               	movwf	??_setRF_DimmerValue
  8294  113C  086E               	movf	_product,w
  8295  113D  3E09               	addlw	9
  8296  113E  0086               	movwf	6
  8297  113F  3002               	movlw	2	; select bank4/5
  8298  1140  0087               	movwf	7
  8299  1141  0864               	movf	??_setRF_DimmerValue,w
  8300  1142  0081               	movwf	1
  8301                           
  8302                           ;RF_Control_B1.c: 481: product->Data[11]=lights;
  8303  1143  0866               	movf	setRF_DimmerValue@lights,w
  8304  1144  00E4               	movwf	??_setRF_DimmerValue
  8305  1145  086E               	movf	_product,w
  8306  1146  3E0B               	addlw	11
  8307  1147  0086               	movwf	6
  8308  1148  3002               	movlw	2	; select bank4/5
  8309  1149  0087               	movwf	7
  8310  114A  0864               	movf	??_setRF_DimmerValue,w
  8311  114B  0081               	movwf	1
  8312                           
  8313                           ;RF_Control_B1.c: 482: product->Data[(20 + lights)]=RF_Data[9];
  8314  114C  0023               	movlb	3	; select bank3
  8315  114D  0829               	movf	(_RF_Data^(0+384)+9),w
  8316  114E  0020               	movlb	0	; select bank0
  8317  114F  00E4               	movwf	??_setRF_DimmerValue
  8318  1150  0866               	movf	setRF_DimmerValue@lights,w
  8319  1151  3E14               	addlw	20
  8320  1152  076E               	addwf	_product,w
  8321  1153  00E5               	movwf	??_setRF_DimmerValue+1
  8322  1154  0865               	movf	??_setRF_DimmerValue+1,w
  8323  1155  0086               	movwf	6
  8324  1156  3002               	movlw	2	; select bank4/5
  8325  1157  0087               	movwf	7
  8326  1158  0864               	movf	??_setRF_DimmerValue,w
  8327  1159  0081               	movwf	1
  8328                           
  8329                           ;RF_Control_B1.c: 483: setDimmerLights_AdjRF(lights);
  8330  115A  0866               	movf	setRF_DimmerValue@lights,w
  8331  115B  319F  271F         	fcall	_setDimmerLights_AdjRF
  8332  115D  0008               	return
  8333  115E                     __end_of_setRF_DimmerValue:	
  8334                           
  8335                           	psect	text33
  8336  1F1F                     __ptext33:	
  8337 ;; *************** function _setDimmerLights_AdjRF *****************
  8338 ;; Defined at:
  8339 ;;		line 749 in file "../src/Dimmer_B1.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;  lights          1    wreg     unsigned char 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  lights          1   67[BANK0 ] unsigned char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;		None               void
  8346 ;; Registers used:
  8347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;Total ram usage:        2 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    8
  8360 ;; This function calls:
  8361 ;;		_DimmerLightsPointSelect
  8362 ;;		_getPercentValue
  8363 ;; This function is called by:
  8364 ;;		_setRF_DimmerValue
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function _setDimmerLights_AdjRF
  8370  1F1F                     _setDimmerLights_AdjRF:	
  8371                           
  8372                           ;incstack = 0
  8373                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8374                           ;setDimmerLights_AdjRF@lights stored from wreg
  8375  1F1F  0020               	movlb	0	; select bank0
  8376  1F20  00E3               	movwf	setDimmerLights_AdjRF@lights
  8377                           
  8378                           ;Dimmer_B1.c: 750: DimmerLightsPointSelect(lights);
  8379  1F21  0863               	movf	setDimmerLights_AdjRF@lights,w
  8380  1F22  319C  248F  319F   	fcall	_DimmerLightsPointSelect
  8381                           
  8382                           ;Dimmer_B1.c: 751: DimmerLights->AdjRF = 1;
  8383  1F25  0020               	movlb	0	; select bank0
  8384  1F26  086F               	movf	_DimmerLights,w
  8385  1F27  0086               	movwf	6
  8386  1F28  3001               	movlw	1	; select bank2/3
  8387  1F29  0087               	movwf	7
  8388  1F2A  1501               	bsf	1,2
  8389                           
  8390                           ;Dimmer_B1.c: 752: DimmerLights->Signal = 1;
  8391  1F2B  086F               	movf	_DimmerLights,w
  8392  1F2C  0086               	movwf	6
  8393  1F2D  3001               	movlw	1	; select bank2/3
  8394  1F2E  0087               	movwf	7
  8395  1F2F  1481               	bsf	1,1
  8396                           
  8397                           ;Dimmer_B1.c: 753: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8398  1F30  086E               	movf	_product,w
  8399  1F31  3E09               	addlw	9
  8400  1F32  0086               	movwf	6
  8401  1F33  3002               	movlw	2	; select bank4/5
  8402  1F34  0087               	movwf	7
  8403  1F35  0801               	movf	1,w
  8404  1F36  318A  223B         	fcall	_getPercentValue
  8405  1F38  0020               	movlb	0	; select bank0
  8406  1F39  00E2               	movwf	??_setDimmerLights_AdjRF
  8407  1F3A  086F               	movf	_DimmerLights,w
  8408  1F3B  3E05               	addlw	5
  8409  1F3C  0086               	movwf	6
  8410  1F3D  3001               	movlw	1	; select bank2/3
  8411  1F3E  0087               	movwf	7
  8412  1F3F  0862               	movf	??_setDimmerLights_AdjRF,w
  8413  1F40  0081               	movwf	1
  8414  1F41  0008               	return
  8415  1F42                     __end_of_setDimmerLights_AdjRF:	
  8416                           
  8417                           	psect	text34
  8418  0A3B                     __ptext34:	
  8419 ;; *************** function _getPercentValue *****************
  8420 ;; Defined at:
  8421 ;;		line 861 in file "../src/Dimmer_B1.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  value           1    wreg     unsigned char 
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  value           1   62[BANK0 ] unsigned char 
  8426 ;;  i               3   63[BANK0 ] float 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      unsigned char 
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0, pclath, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;Total ram usage:        6 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    7
  8443 ;; This function calls:
  8444 ;;		___awtoft
  8445 ;;		___ftadd
  8446 ;;		___ftdiv
  8447 ;;		___ftmul
  8448 ;;		___ftneg
  8449 ;;		___fttol
  8450 ;; This function is called by:
  8451 ;;		_setDimmerLights_AdjRF
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           
  8456                           ;psect for function _getPercentValue
  8457  0A3B                     _getPercentValue:	
  8458                           
  8459                           ;incstack = 0
  8460                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8461                           ;getPercentValue@value stored from wreg
  8462  0A3B  0020               	movlb	0	; select bank0
  8463  0A3C  00DE               	movwf	getPercentValue@value
  8464                           
  8465                           ;Dimmer_B1.c: 869: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8466  0A3D  3000               	movlw	0
  8467  0A3E  00DF               	movwf	getPercentValue@i
  8468  0A3F  3050               	movlw	80
  8469  0A40  00E0               	movwf	getPercentValue@i+1
  8470  0A41  3042               	movlw	66
  8471  0A42  00E1               	movwf	getPercentValue@i+2
  8472                           
  8473                           ;Dimmer_B1.c: 870: i /= 100;
  8474  0A43  3000               	movlw	0
  8475  0A44  00AE               	movwf	___ftdiv@f2
  8476  0A45  30C8               	movlw	200
  8477  0A46  00AF               	movwf	___ftdiv@f2+1
  8478  0A47  3042               	movlw	66
  8479  0A48  00B0               	movwf	___ftdiv@f2+2
  8480  0A49  085F               	movf	getPercentValue@i,w
  8481  0A4A  00B1               	movwf	___ftdiv@f1
  8482  0A4B  0860               	movf	getPercentValue@i+1,w
  8483  0A4C  00B2               	movwf	___ftdiv@f1+1
  8484  0A4D  0861               	movf	getPercentValue@i+2,w
  8485  0A4E  00B3               	movwf	___ftdiv@f1+2
  8486  0A4F  318E  26A3  318A   	fcall	___ftdiv
  8487  0A52  0020               	movlb	0	; select bank0
  8488  0A53  082E               	movf	?___ftdiv,w
  8489  0A54  00DF               	movwf	getPercentValue@i
  8490  0A55  082F               	movf	?___ftdiv+1,w
  8491  0A56  00E0               	movwf	getPercentValue@i+1
  8492  0A57  0830               	movf	?___ftdiv+2,w
  8493  0A58  00E1               	movwf	getPercentValue@i+2
  8494                           
  8495                           ;Dimmer_B1.c: 872: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8496  0A59  085E               	movf	getPercentValue@value,w
  8497  0A5A  00DC               	movwf	??_getPercentValue
  8498  0A5B  01DD               	clrf	??_getPercentValue+1
  8499  0A5C  09DC               	comf	??_getPercentValue,f
  8500  0A5D  09DD               	comf	??_getPercentValue+1,f
  8501  0A5E  0ADC               	incf	??_getPercentValue,f
  8502  0A5F  1903               	skipnz
  8503  0A60  0ADD               	incf	??_getPercentValue+1,f
  8504  0A61  085C               	movf	??_getPercentValue,w
  8505  0A62  3E64               	addlw	100
  8506  0A63  00A8               	movwf	___awtoft@c
  8507  0A64  3000               	movlw	0
  8508  0A65  3D5D               	addwfc	??_getPercentValue+1,w
  8509  0A66  00A9               	movwf	___awtoft@c+1
  8510  0A67  319E  26DA  318A   	fcall	___awtoft
  8511  0A6A  0020               	movlb	0	; select bank0
  8512  0A6B  0828               	movf	?___awtoft,w
  8513  0A6C  00B1               	movwf	___ftmul@f2
  8514  0A6D  0829               	movf	?___awtoft+1,w
  8515  0A6E  00B2               	movwf	___ftmul@f2+1
  8516  0A6F  082A               	movf	?___awtoft+2,w
  8517  0A70  00B3               	movwf	___ftmul@f2+2
  8518  0A71  085F               	movf	getPercentValue@i,w
  8519  0A72  00AE               	movwf	___ftmul@f1
  8520  0A73  0860               	movf	getPercentValue@i+1,w
  8521  0A74  00AF               	movwf	___ftmul@f1+1
  8522  0A75  0861               	movf	getPercentValue@i+2,w
  8523  0A76  00B0               	movwf	___ftmul@f1+2
  8524  0A77  318F  274C  318A   	fcall	___ftmul
  8525  0A7A  0020               	movlb	0	; select bank0
  8526  0A7B  082E               	movf	?___ftmul,w
  8527  0A7C  00BE               	movwf	___ftneg@f1
  8528  0A7D  082F               	movf	?___ftmul+1,w
  8529  0A7E  00BF               	movwf	___ftneg@f1+1
  8530  0A7F  0830               	movf	?___ftmul+2,w
  8531  0A80  00C0               	movwf	___ftneg@f1+2
  8532  0A81  319B  230D  318A   	fcall	___ftneg
  8533  0A84  0020               	movlb	0	; select bank0
  8534  0A85  083E               	movf	?___ftneg,w
  8535  0A86  00C4               	movwf	___ftadd@f2
  8536  0A87  083F               	movf	?___ftneg+1,w
  8537  0A88  00C5               	movwf	___ftadd@f2+1
  8538  0A89  0840               	movf	?___ftneg+2,w
  8539  0A8A  00C6               	movwf	___ftadd@f2+2
  8540  0A8B  3000               	movlw	0
  8541  0A8C  00C1               	movwf	___ftadd@f1
  8542  0A8D  3080               	movlw	128
  8543  0A8E  00C2               	movwf	___ftadd@f1+1
  8544  0A8F  3042               	movlw	66
  8545  0A90  00C3               	movwf	___ftadd@f1+2
  8546  0A91  3184  2483  318A   	fcall	___ftadd
  8547  0A94  0020               	movlb	0	; select bank0
  8548  0A95  0841               	movf	?___ftadd,w
  8549  0A96  00CE               	movwf	___fttol@f1
  8550  0A97  0842               	movf	?___ftadd+1,w
  8551  0A98  00CF               	movwf	___fttol@f1+1
  8552  0A99  0843               	movf	?___ftadd+2,w
  8553  0A9A  00D0               	movwf	___fttol@f1+2
  8554  0A9B  318C  245E         	fcall	___fttol
  8555  0A9D  0020               	movlb	0	; select bank0
  8556  0A9E  084E               	movf	?___fttol,w
  8557  0A9F  0008               	return
  8558  0AA0                     __end_of_getPercentValue:	
  8559                           
  8560                           	psect	text35
  8561  0F4C                     __ptext35:	
  8562 ;; *************** function ___ftmul *****************
  8563 ;; Defined at:
  8564 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  f1              3   14[BANK0 ] float 
  8567 ;;  f2              3   17[BANK0 ] float 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8570 ;;  sign            1   29[BANK0 ] unsigned char 
  8571 ;;  cntr            1   28[BANK0 ] unsigned char 
  8572 ;;  exp             1   24[BANK0 ] unsigned char 
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  3   14[BANK0 ] float 
  8575 ;; Registers used:
  8576 ;;		wreg, status,2, status,0, pclath, cstack
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8582 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;Total ram usage:       16 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:    6
  8589 ;; This function calls:
  8590 ;;		___ftpack
  8591 ;; This function is called by:
  8592 ;;		_getPercentValue
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function ___ftmul
  8598  0F4C                     ___ftmul:	
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8602  0F4C  0020               	movlb	0	; select bank0
  8603  0F4D  082E               	movf	___ftmul@f1,w
  8604  0F4E  00B4               	movwf	??___ftmul
  8605  0F4F  082F               	movf	___ftmul@f1+1,w
  8606  0F50  00B5               	movwf	??___ftmul+1
  8607  0F51  0830               	movf	___ftmul@f1+2,w
  8608  0F52  00B6               	movwf	??___ftmul+2
  8609  0F53  1003               	clrc
  8610  0F54  0D35               	rlf	??___ftmul+1,w
  8611  0F55  0D36               	rlf	??___ftmul+2,w
  8612  0F56  00B7               	movwf	??___ftmul+3
  8613  0F57  0837               	movf	??___ftmul+3,w
  8614  0F58  00B8               	movwf	___ftmul@exp
  8615  0F59  08B8               	movf	___ftmul@exp,f
  8616  0F5A  1D03               	skipz
  8617  0F5B  2F63               	goto	l6021
  8618  0F5C  3000               	movlw	0
  8619  0F5D  00AE               	movwf	?___ftmul
  8620  0F5E  3000               	movlw	0
  8621  0F5F  00AF               	movwf	?___ftmul+1
  8622  0F60  3000               	movlw	0
  8623  0F61  00B0               	movwf	?___ftmul+2
  8624  0F62  0008               	return
  8625  0F63                     l6021:	
  8626  0F63  0831               	movf	___ftmul@f2,w
  8627  0F64  00B4               	movwf	??___ftmul
  8628  0F65  0832               	movf	___ftmul@f2+1,w
  8629  0F66  00B5               	movwf	??___ftmul+1
  8630  0F67  0833               	movf	___ftmul@f2+2,w
  8631  0F68  00B6               	movwf	??___ftmul+2
  8632  0F69  1003               	clrc
  8633  0F6A  0D35               	rlf	??___ftmul+1,w
  8634  0F6B  0D36               	rlf	??___ftmul+2,w
  8635  0F6C  00B7               	movwf	??___ftmul+3
  8636  0F6D  0837               	movf	??___ftmul+3,w
  8637  0F6E  00BD               	movwf	___ftmul@sign
  8638  0F6F  08BD               	movf	___ftmul@sign,f
  8639  0F70  1D03               	skipz
  8640  0F71  2F79               	goto	l6027
  8641  0F72  3000               	movlw	0
  8642  0F73  00AE               	movwf	?___ftmul
  8643  0F74  3000               	movlw	0
  8644  0F75  00AF               	movwf	?___ftmul+1
  8645  0F76  3000               	movlw	0
  8646  0F77  00B0               	movwf	?___ftmul+2
  8647  0F78  0008               	return
  8648  0F79                     l6027:	
  8649  0F79  083D               	movf	___ftmul@sign,w
  8650  0F7A  3E7B               	addlw	123
  8651  0F7B  00B4               	movwf	??___ftmul
  8652  0F7C  0834               	movf	??___ftmul,w
  8653  0F7D  07B8               	addwf	___ftmul@exp,f
  8654  0F7E  082E               	movf	___ftmul@f1,w
  8655  0F7F  00B4               	movwf	??___ftmul
  8656  0F80  082F               	movf	___ftmul@f1+1,w
  8657  0F81  00B5               	movwf	??___ftmul+1
  8658  0F82  0830               	movf	___ftmul@f1+2,w
  8659  0F83  00B6               	movwf	??___ftmul+2
  8660  0F84  3010               	movlw	16
  8661  0F85                     u4765:	
  8662  0F85  36B6               	lsrf	??___ftmul+2,f
  8663  0F86  0CB5               	rrf	??___ftmul+1,f
  8664  0F87  0CB4               	rrf	??___ftmul,f
  8665  0F88  0B89               	decfsz	9,f
  8666  0F89  2F85               	goto	u4765
  8667  0F8A  0834               	movf	??___ftmul,w
  8668  0F8B  00B7               	movwf	??___ftmul+3
  8669  0F8C  0837               	movf	??___ftmul+3,w
  8670  0F8D  00BD               	movwf	___ftmul@sign
  8671  0F8E  0831               	movf	___ftmul@f2,w
  8672  0F8F  00B4               	movwf	??___ftmul
  8673  0F90  0832               	movf	___ftmul@f2+1,w
  8674  0F91  00B5               	movwf	??___ftmul+1
  8675  0F92  0833               	movf	___ftmul@f2+2,w
  8676  0F93  00B6               	movwf	??___ftmul+2
  8677  0F94  3010               	movlw	16
  8678  0F95                     u4775:	
  8679  0F95  36B6               	lsrf	??___ftmul+2,f
  8680  0F96  0CB5               	rrf	??___ftmul+1,f
  8681  0F97  0CB4               	rrf	??___ftmul,f
  8682  0F98  0B89               	decfsz	9,f
  8683  0F99  2F95               	goto	u4775
  8684  0F9A  0834               	movf	??___ftmul,w
  8685  0F9B  00B7               	movwf	??___ftmul+3
  8686  0F9C  0837               	movf	??___ftmul+3,w
  8687  0F9D  06BD               	xorwf	___ftmul@sign,f
  8688  0F9E  3080               	movlw	128
  8689  0F9F  00B4               	movwf	??___ftmul
  8690  0FA0  0834               	movf	??___ftmul,w
  8691  0FA1  05BD               	andwf	___ftmul@sign,f
  8692  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8693  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8694  0FA4  30FF               	movlw	255
  8695  0FA5  05B1               	andwf	___ftmul@f2,f
  8696  0FA6  30FF               	movlw	255
  8697  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8698  0FA8  3000               	movlw	0
  8699  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8700  0FAA  3000               	movlw	0
  8701  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8702  0FAC  3000               	movlw	0
  8703  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8704  0FAE  3000               	movlw	0
  8705  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8706  0FB0  3007               	movlw	7
  8707  0FB1  00B4               	movwf	??___ftmul
  8708  0FB2  0834               	movf	??___ftmul,w
  8709  0FB3  00BC               	movwf	___ftmul@cntr
  8710  0FB4                     l6039:	
  8711  0FB4  1C2E               	btfss	___ftmul@f1,0
  8712  0FB5  2FBC               	goto	l6043
  8713  0FB6  0831               	movf	___ftmul@f2,w
  8714  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8715  0FB8  0832               	movf	___ftmul@f2+1,w
  8716  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8717  0FBA  0833               	movf	___ftmul@f2+2,w
  8718  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8719  0FBC                     l6043:	
  8720  0FBC  3001               	movlw	1
  8721  0FBD                     u4795:	
  8722  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8723  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8724  0FBF  0CAE               	rrf	___ftmul@f1,f
  8725  0FC0  0B89               	decfsz	9,f
  8726  0FC1  2FBD               	goto	u4795
  8727  0FC2  3001               	movlw	1
  8728  0FC3                     u4805:	
  8729  0FC3  35B1               	lslf	___ftmul@f2,f
  8730  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8731  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8732  0FC6  0B89               	decfsz	9,f
  8733  0FC7  2FC3               	goto	u4805
  8734  0FC8  3001               	movlw	1
  8735  0FC9  02BC               	subwf	___ftmul@cntr,f
  8736  0FCA  1D03               	btfss	3,2
  8737  0FCB  2FB4               	goto	l6039
  8738  0FCC  3009               	movlw	9
  8739  0FCD  00B4               	movwf	??___ftmul
  8740  0FCE  0834               	movf	??___ftmul,w
  8741  0FCF  00BC               	movwf	___ftmul@cntr
  8742  0FD0                     l6051:	
  8743  0FD0  1C2E               	btfss	___ftmul@f1,0
  8744  0FD1  2FD8               	goto	l6055
  8745  0FD2  0831               	movf	___ftmul@f2,w
  8746  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8747  0FD4  0832               	movf	___ftmul@f2+1,w
  8748  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8749  0FD6  0833               	movf	___ftmul@f2+2,w
  8750  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8751  0FD8                     l6055:	
  8752  0FD8  3001               	movlw	1
  8753  0FD9                     u4835:	
  8754  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8755  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8756  0FDB  0CAE               	rrf	___ftmul@f1,f
  8757  0FDC  0B89               	decfsz	9,f
  8758  0FDD  2FD9               	goto	u4835
  8759  0FDE  3001               	movlw	1
  8760  0FDF                     u4845:	
  8761  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8762  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8763  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8764  0FE2  0B89               	decfsz	9,f
  8765  0FE3  2FDF               	goto	u4845
  8766  0FE4  3001               	movlw	1
  8767  0FE5  02BC               	subwf	___ftmul@cntr,f
  8768  0FE6  1D03               	btfss	3,2
  8769  0FE7  2FD0               	goto	l6051
  8770  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8771  0FE9  00A0               	movwf	___ftpack@arg
  8772  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8773  0FEB  00A1               	movwf	___ftpack@arg+1
  8774  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8775  0FED  00A2               	movwf	___ftpack@arg+2
  8776  0FEE  0838               	movf	___ftmul@exp,w
  8777  0FEF  00B4               	movwf	??___ftmul
  8778  0FF0  0834               	movf	??___ftmul,w
  8779  0FF1  00A3               	movwf	___ftpack@exp
  8780  0FF2  083D               	movf	___ftmul@sign,w
  8781  0FF3  00B5               	movwf	??___ftmul+1
  8782  0FF4  0835               	movf	??___ftmul+1,w
  8783  0FF5  00A4               	movwf	___ftpack@sign
  8784  0FF6  3189  2111         	fcall	___ftpack
  8785  0FF8  0020               	movlb	0	; select bank0
  8786  0FF9  0820               	movf	?___ftpack,w
  8787  0FFA  00AE               	movwf	?___ftmul
  8788  0FFB  0821               	movf	?___ftpack+1,w
  8789  0FFC  00AF               	movwf	?___ftmul+1
  8790  0FFD  0822               	movf	?___ftpack+2,w
  8791  0FFE  00B0               	movwf	?___ftmul+2
  8792  0FFF  0008               	return
  8793  1000                     __end_of___ftmul:	
  8794                           
  8795                           	psect	text36
  8796  1CA2                     __ptext36:	
  8797 ;; *************** function _setMemory_Modify *****************
  8798 ;; Defined at:
  8799 ;;		line 1025 in file "../src/MCU_B1.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  command         1    wreg     unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  command         1    1[BANK0 ] unsigned char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;		None               void
  8806 ;; Registers used:
  8807 ;;		wreg, status,2, status,0
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;Total ram usage:        2 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    5
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_setLog_Code
  8824 ;;		_setRFSW_AdjControl
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           
  8829                           ;psect for function _setMemory_Modify
  8830  1CA2                     _setMemory_Modify:	
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8834                           ;setMemory_Modify@command stored from wreg
  8835  1CA2  0020               	movlb	0	; select bank0
  8836  1CA3  00A1               	movwf	setMemory_Modify@command
  8837                           
  8838                           ;MCU_B1.c: 1026: Memory.Modify = command == 1 ? 1 : 0;
  8839  1CA4  0821               	movf	setMemory_Modify@command,w
  8840  1CA5  3A01               	xorlw	1
  8841  1CA6  3000               	movlw	0
  8842  1CA7  1903               	skipnz
  8843  1CA8  3001               	movlw	1
  8844  1CA9  00A0               	movwf	??_setMemory_Modify
  8845  1CAA  0024               	movlb	4	; select bank4
  8846  1CAB  0844               	movf	(_Memory^(0+512)+36),w
  8847  1CAC  0020               	movlb	0	; select bank0
  8848  1CAD  0620               	xorwf	??_setMemory_Modify,w
  8849  1CAE  39FE               	andlw	-2
  8850  1CAF  0620               	xorwf	??_setMemory_Modify,w
  8851  1CB0  0024               	movlb	4	; select bank4
  8852  1CB1  00C4               	movwf	(_Memory^(0+512)+36)
  8853                           
  8854                           ;MCU_B1.c: 1027: Memory.Time = 0;
  8855  1CB2  01C2               	clrf	(_Memory^(0+512)+34)
  8856  1CB3  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8857  1CB4  0008               	return
  8858  1CB5                     __end_of_setMemory_Modify:	
  8859                           
  8860                           	psect	text37
  8861  1C24                     __ptext37:	
  8862 ;; *************** function _getRF_KeyStatus *****************
  8863 ;; Defined at:
  8864 ;;		line 193 in file "../src/RF_Control_B1.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;		None
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  key             1    1[BANK0 ] unsigned char 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  1    wreg      unsigned char 
  8871 ;; Registers used:
  8872 ;;		wreg, status,2
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;Total ram usage:        3 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    5
  8885 ;; This function calls:
  8886 ;;		Nothing
  8887 ;; This function is called by:
  8888 ;;		_setRF_Main
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           
  8893                           ;psect for function _getRF_KeyStatus
  8894  1C24                     _getRF_KeyStatus:	
  8895                           
  8896                           ;RF_Control_B1.c: 194: char key = 0;
  8897                           
  8898                           ;incstack = 0
  8899                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8900  1C24  0020               	movlb	0	; select bank0
  8901  1C25  01A1               	clrf	getRF_KeyStatus@key
  8902                           
  8903                           ;RF_Control_B1.c: 200: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8904  1C26  01A2               	clrf	_getRF_KeyStatus$5286
  8905  1C27  0AA2               	incf	_getRF_KeyStatus$5286,f
  8906  1C28  1F0C               	btfss	12,6	;volatile
  8907  1C29  1A0C               	btfsc	12,4	;volatile
  8908  1C2A  2C2F               	goto	l7079
  8909  1C2B  1C0C               	btfss	12,0	;volatile
  8910  1C2C  188D               	btfsc	13,1	;volatile
  8911  1C2D  2C2F               	goto	l7079
  8912  1C2E  01A2               	clrf	_getRF_KeyStatus$5286
  8913  1C2F                     l7079:	
  8914  1C2F  0822               	movf	_getRF_KeyStatus$5286,w
  8915  1C30  00A0               	movwf	??_getRF_KeyStatus
  8916  1C31  0820               	movf	??_getRF_KeyStatus,w
  8917  1C32  00A1               	movwf	getRF_KeyStatus@key
  8918                           
  8919                           ;RF_Control_B1.c: 206: return key;
  8920  1C33  0821               	movf	getRF_KeyStatus@key,w
  8921  1C34  0008               	return
  8922  1C35                     __end_of_getRF_KeyStatus:	
  8923                           
  8924                           	psect	text38
  8925  1C13                     __ptext38:	
  8926 ;; *************** function _getBuz_GO *****************
  8927 ;; Defined at:
  8928 ;;		line 82 in file "../src/Buzzer_B1.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;		None
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  i               2    4[BANK0 ] int 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  2    0[BANK0 ] int 
  8935 ;; Registers used:
  8936 ;;		wreg, status,2, status,0
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;Total ram usage:        6 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    5
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_setRF_Main
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _getBuz_GO
  8958  1C13                     _getBuz_GO:	
  8959                           
  8960                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8964  1C13  0021               	movlb	1	; select bank1
  8965  1C14  0C2F               	rrf	_Buz1^(0+128),w
  8966  1C15  3901               	andlw	1
  8967  1C16  0020               	movlb	0	; select bank0
  8968  1C17  00A2               	movwf	??_getBuz_GO
  8969  1C18  01A3               	clrf	??_getBuz_GO+1
  8970  1C19  0822               	movf	??_getBuz_GO,w
  8971  1C1A  00A4               	movwf	getBuz_GO@i
  8972  1C1B  0823               	movf	??_getBuz_GO+1,w
  8973  1C1C  00A5               	movwf	getBuz_GO@i+1
  8974                           
  8975                           ;Buzzer_B1.c: 84: return i;
  8976  1C1D  0825               	movf	getBuz_GO@i+1,w
  8977  1C1E  01A1               	clrf	?_getBuz_GO+1
  8978  1C1F  07A1               	addwf	?_getBuz_GO+1,f
  8979  1C20  0824               	movf	getBuz_GO@i,w
  8980  1C21  01A0               	clrf	?_getBuz_GO
  8981  1C22  07A0               	addwf	?_getBuz_GO,f
  8982  1C23  0008               	return
  8983  1C24                     __end_of_getBuz_GO:	
  8984                           
  8985                           	psect	text39
  8986  1BB3                     __ptext39:	
  8987 ;; *************** function _RF_RxDisable *****************
  8988 ;; Defined at:
  8989 ;;		line 268 in file "../src/RF_Control_B1.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;		None
  8994 ;; Return value:  Size  Location     Type
  8995 ;;		None               void
  8996 ;; Registers used:
  8997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;Total ram usage:        0 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:    7
  9010 ;; This function calls:
  9011 ;;		_CC2500_WriteCommand
  9012 ;; This function is called by:
  9013 ;;		_setRF_Main
  9014 ;; This function uses a non-reentrant model
  9015 ;;
  9016                           
  9017                           
  9018                           ;psect for function _RF_RxDisable
  9019  1BB3                     _RF_RxDisable:	
  9020                           
  9021                           ;RF_Control_B1.c: 269: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9022                           
  9023                           ;incstack = 0
  9024                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9025  1BB3  0021               	movlb	1	; select bank1
  9026  1BB4  18BB               	btfsc	_RF1^(0+128),1
  9027  1BB5  2BB8               	goto	l2014
  9028  1BB6  1DBB               	btfss	_RF1^(0+128),3
  9029  1BB7  0008               	return
  9030  1BB8                     l2014:	
  9031                           
  9032                           ;RF_Control_B1.c: 270: RF1.RxStatus = 0;
  9033  1BB8  11BB               	bcf	_RF1^(0+128),3
  9034                           
  9035                           ;RF_Control_B1.c: 271: RF1.ReceiveGO = 0;
  9036  1BB9  10BB               	bcf	_RF1^(0+128),1
  9037                           
  9038                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x36);
  9039  1BBA  3036               	movlw	54
  9040  1BBB  319D  25B4  319B   	fcall	_CC2500_WriteCommand
  9041                           
  9042                           ;RF_Control_B1.c: 274: CC2500_WriteCommand(0x3A);
  9043  1BBE  303A               	movlw	58
  9044  1BBF  319D  25B4         	fcall	_CC2500_WriteCommand
  9045  1BC1  0008               	return
  9046  1BC2                     __end_of_RF_RxDisable:	
  9047                           
  9048                           	psect	text40
  9049  0972                     __ptext40:	
  9050 ;; *************** function _CC2500_TxData *****************
  9051 ;; Defined at:
  9052 ;;		line 32 in file "../src/CC2500_B1.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;		None
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9057 ;; Return value:  Size  Location     Type
  9058 ;;		None               void
  9059 ;; Registers used:
  9060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;Total ram usage:        2 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    7
  9073 ;; This function calls:
  9074 ;;		_CC2500_WriteByte
  9075 ;;		_CC2500_WriteCommand
  9076 ;;		_Timeout_Counter
  9077 ;;		_set_TimeoutCleared
  9078 ;; This function is called by:
  9079 ;;		_setRF_Main
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           
  9084                           ;psect for function _CC2500_TxData
  9085  0972                     _CC2500_TxData:	
  9086                           
  9087                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9088                           ;CC2500_B1.c: 35: RC4 = 0;
  9089                           
  9090                           ;incstack = 0
  9091                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9092  0972  0020               	movlb	0	; select bank0
  9093  0973  120E               	bcf	14,4	;volatile
  9094                           
  9095                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9096  0974  307F               	movlw	127
  9097  0975  00A4               	movwf	??_CC2500_TxData
  9098  0976  0824               	movf	??_CC2500_TxData,w
  9099  0977  0021               	movlb	1	; select bank1
  9100  0978  00D1               	movwf	_SPI0Buffer^(0+128)
  9101                           
  9102                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9103  0979  297D               	goto	l6725
  9104  097A                     l6723:	
  9105                           
  9106                           ;CC2500_B1.c: 38: Timeout_Counter();
  9107  097A  319D  2517  3189   	fcall	_Timeout_Counter
  9108  097D                     l6725:	
  9109  097D  0020               	movlb	0	; select bank0
  9110  097E  1D0E               	btfss	14,2	;volatile
  9111  097F  2983               	goto	l6729
  9112  0980  0021               	movlb	1	; select bank1
  9113  0981  1D2C               	btfss	(_myMain^(0+128)+12),2
  9114  0982  297A               	goto	l6723
  9115  0983                     l6729:	
  9116                           
  9117                           ;CC2500_B1.c: 39: };
  9118                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9119  0983  319A  22BA  3189   	fcall	_set_TimeoutCleared
  9120                           
  9121                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9122  0986  319D  2582  3189   	fcall	_CC2500_WriteByte
  9123                           
  9124                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9125  0989  0021               	movlb	1	; select bank1
  9126  098A  0853               	movf	_Tx_Length^(0+128),w
  9127  098B  0020               	movlb	0	; select bank0
  9128  098C  00A4               	movwf	??_CC2500_TxData
  9129  098D  0824               	movf	??_CC2500_TxData,w
  9130  098E  0021               	movlb	1	; select bank1
  9131  098F  00D1               	movwf	_SPI0Buffer^(0+128)
  9132                           
  9133                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9134  0990  319D  2582  3189   	fcall	_CC2500_WriteByte
  9135                           
  9136                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9137  0993  0020               	movlb	0	; select bank0
  9138  0994  01A5               	clrf	CC2500_TxData@loop_e
  9139  0995                     l6743:	
  9140  0995  0021               	movlb	1	; select bank1
  9141  0996  0853               	movf	_Tx_Length^(0+128),w
  9142  0997  0020               	movlb	0	; select bank0
  9143  0998  0225               	subwf	CC2500_TxData@loop_e,w
  9144  0999  1803               	btfsc	3,0
  9145  099A  29AE               	goto	l255
  9146                           
  9147                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9148  099B  0825               	movf	CC2500_TxData@loop_e,w
  9149  099C  3EA0               	addlw	_RF_Data& (0+255)
  9150  099D  0086               	movwf	6
  9151  099E  3001               	movlw	1	; select bank3/4
  9152  099F  0087               	movwf	7
  9153  09A0  0801               	movf	1,w
  9154  09A1  00A4               	movwf	??_CC2500_TxData
  9155  09A2  0824               	movf	??_CC2500_TxData,w
  9156  09A3  0021               	movlb	1	; select bank1
  9157  09A4  00D1               	movwf	_SPI0Buffer^(0+128)
  9158                           
  9159                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9160  09A5  319D  2582  3189   	fcall	_CC2500_WriteByte
  9161  09A8  3001               	movlw	1
  9162  09A9  0020               	movlb	0	; select bank0
  9163  09AA  00A4               	movwf	??_CC2500_TxData
  9164  09AB  0824               	movf	??_CC2500_TxData,w
  9165  09AC  07A5               	addwf	CC2500_TxData@loop_e,f
  9166  09AD  2995               	goto	l6743
  9167  09AE                     l255:	
  9168                           
  9169                           ;CC2500_B1.c: 48: }
  9170                           ;CC2500_B1.c: 49: RC4 = 1;
  9171  09AE  160E               	bsf	14,4	;volatile
  9172                           
  9173                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9174  09AF  3035               	movlw	53
  9175  09B0  319D  25B4  3189   	fcall	_CC2500_WriteCommand
  9176                           
  9177                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9178  09B3  29B7               	goto	l6749
  9179  09B4                     l6747:	
  9180                           
  9181                           ;CC2500_B1.c: 52: Timeout_Counter();
  9182  09B4  319D  2517  3189   	fcall	_Timeout_Counter
  9183  09B7                     l6749:	
  9184  09B7  0020               	movlb	0	; select bank0
  9185  09B8  180D               	btfsc	13,0	;volatile
  9186  09B9  29BD               	goto	l6753
  9187  09BA  0021               	movlb	1	; select bank1
  9188  09BB  1D2C               	btfss	(_myMain^(0+128)+12),2
  9189  09BC  29B4               	goto	l6747
  9190  09BD                     l6753:	
  9191                           
  9192                           ;CC2500_B1.c: 53: };
  9193                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9194  09BD  319A  22BA  3189   	fcall	_set_TimeoutCleared
  9195                           
  9196                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9197  09C0  29C4               	goto	l6757
  9198  09C1                     l6755:	
  9199                           
  9200                           ;CC2500_B1.c: 57: Timeout_Counter();
  9201  09C1  319D  2517  3189   	fcall	_Timeout_Counter
  9202  09C4                     l6757:	
  9203  09C4  0020               	movlb	0	; select bank0
  9204  09C5  1C0D               	btfss	13,0	;volatile
  9205  09C6  29CA               	goto	l6761
  9206  09C7  0021               	movlb	1	; select bank1
  9207  09C8  1D2C               	btfss	(_myMain^(0+128)+12),2
  9208  09C9  29C1               	goto	l6755
  9209  09CA                     l6761:	
  9210                           
  9211                           ;CC2500_B1.c: 58: };
  9212                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9213  09CA  319A  22BA  3189   	fcall	_set_TimeoutCleared
  9214                           
  9215                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9216  09CD  3036               	movlw	54
  9217  09CE  319D  25B4  3189   	fcall	_CC2500_WriteCommand
  9218                           
  9219                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9220  09D1  303B               	movlw	59
  9221  09D2  319D  25B4         	fcall	_CC2500_WriteCommand
  9222                           
  9223                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9224  09D4  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9225  09D5  0008               	return
  9226  09D6                     __end_of_CC2500_TxData:	
  9227                           
  9228                           	psect	text41
  9229  0B6E                     __ptext41:	
  9230 ;; *************** function _CC2500_RxData *****************
  9231 ;; Defined at:
  9232 ;;		line 70 in file "../src/CC2500_B1.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;		None
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:        2 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    7
  9253 ;; This function calls:
  9254 ;;		_CC2500_ReadByte
  9255 ;;		_CC2500_ReadStatus
  9256 ;;		_CC2500_WriteByte
  9257 ;;		_Timeout_Counter
  9258 ;;		_set_TimeoutCleared
  9259 ;; This function is called by:
  9260 ;;		_setRF_Main
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           
  9265                           ;psect for function _CC2500_RxData
  9266  0B6E                     _CC2500_RxData:	
  9267                           
  9268                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9269                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9273  0B6E  0020               	movlb	0	; select bank0
  9274  0B6F  180D               	btfsc	13,0	;volatile
  9275  0B70  2B75               	goto	l6775
  9276  0B71  2B7E               	goto	l6781
  9277  0B72                     l6773:	
  9278                           ;CC2500_B1.c: 76: {
  9279                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9280                           
  9281                           
  9282                           ;CC2500_B1.c: 78: Timeout_Counter();
  9283  0B72  319D  2517  318B   	fcall	_Timeout_Counter
  9284  0B75                     l6775:	
  9285  0B75  0020               	movlb	0	; select bank0
  9286  0B76  1C0D               	btfss	13,0	;volatile
  9287  0B77  2B7B               	goto	l6779
  9288  0B78  0021               	movlb	1	; select bank1
  9289  0B79  1D2C               	btfss	(_myMain^(0+128)+12),2
  9290  0B7A  2B72               	goto	l6773
  9291  0B7B                     l6779:	
  9292                           
  9293                           ;CC2500_B1.c: 79: };
  9294                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9295  0B7B  319A  22BA  318B   	fcall	_set_TimeoutCleared
  9296  0B7E                     l6781:	
  9297                           
  9298                           ;CC2500_B1.c: 81: }
  9299                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9300  0B7E  303B               	movlw	59
  9301  0B7F  319F  2766  318B   	fcall	_CC2500_ReadStatus
  9302                           
  9303                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9304  0B82  0021               	movlb	1	; select bank1
  9305  0B83  0856               	movf	_s_data^(0+128),w
  9306  0B84  1903               	btfsc	3,2
  9307  0B85  0008               	return
  9308                           
  9309                           ;CC2500_B1.c: 86: RC4 = 0;
  9310  0B86  0020               	movlb	0	; select bank0
  9311  0B87  120E               	bcf	14,4	;volatile
  9312                           
  9313                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9314  0B88  30FF               	movlw	255
  9315  0B89  00A4               	movwf	??_CC2500_RxData
  9316  0B8A  0824               	movf	??_CC2500_RxData,w
  9317  0B8B  0021               	movlb	1	; select bank1
  9318  0B8C  00D1               	movwf	_SPI0Buffer^(0+128)
  9319                           
  9320                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9321  0B8D  2B91               	goto	l6791
  9322  0B8E                     l6789:	
  9323                           
  9324                           ;CC2500_B1.c: 89: Timeout_Counter();
  9325  0B8E  319D  2517  318B   	fcall	_Timeout_Counter
  9326  0B91                     l6791:	
  9327  0B91  0020               	movlb	0	; select bank0
  9328  0B92  1D0E               	btfss	14,2	;volatile
  9329  0B93  2B97               	goto	l6795
  9330  0B94  0021               	movlb	1	; select bank1
  9331  0B95  1D2C               	btfss	(_myMain^(0+128)+12),2
  9332  0B96  2B8E               	goto	l6789
  9333  0B97                     l6795:	
  9334                           
  9335                           ;CC2500_B1.c: 90: };
  9336                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9337  0B97  319A  22BA  318B   	fcall	_set_TimeoutCleared
  9338                           
  9339                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9340  0B9A  319D  2582  318B   	fcall	_CC2500_WriteByte
  9341                           
  9342                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9343  0B9D  319E  261F  318B   	fcall	_CC2500_ReadByte
  9344                           
  9345                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9346  0BA0  0021               	movlb	1	; select bank1
  9347  0BA1  0851               	movf	_SPI0Buffer^(0+128),w
  9348  0BA2  0020               	movlb	0	; select bank0
  9349  0BA3  00A4               	movwf	??_CC2500_RxData
  9350  0BA4  0824               	movf	??_CC2500_RxData,w
  9351  0BA5  0021               	movlb	1	; select bank1
  9352  0BA6  00D0               	movwf	_Rx_Length^(0+128)
  9353                           
  9354                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9355  0BA7  0020               	movlb	0	; select bank0
  9356  0BA8  01A5               	clrf	CC2500_RxData@loop_f
  9357  0BA9                     l6811:	
  9358  0BA9  0021               	movlb	1	; select bank1
  9359  0BAA  0850               	movf	_Rx_Length^(0+128),w
  9360  0BAB  0020               	movlb	0	; select bank0
  9361  0BAC  0225               	subwf	CC2500_RxData@loop_f,w
  9362  0BAD  1803               	btfsc	3,0
  9363  0BAE  2BC2               	goto	l6813
  9364                           
  9365                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9366  0BAF  319E  261F  318B   	fcall	_CC2500_ReadByte
  9367                           
  9368                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9369  0BB2  0021               	movlb	1	; select bank1
  9370  0BB3  0851               	movf	_SPI0Buffer^(0+128),w
  9371  0BB4  0020               	movlb	0	; select bank0
  9372  0BB5  00A4               	movwf	??_CC2500_RxData
  9373  0BB6  0825               	movf	CC2500_RxData@loop_f,w
  9374  0BB7  3EA0               	addlw	_RF_Data& (0+255)
  9375  0BB8  0086               	movwf	6
  9376  0BB9  3001               	movlw	1	; select bank3/4
  9377  0BBA  0087               	movwf	7
  9378  0BBB  0824               	movf	??_CC2500_RxData,w
  9379  0BBC  0081               	movwf	1
  9380  0BBD  3001               	movlw	1
  9381  0BBE  00A4               	movwf	??_CC2500_RxData
  9382  0BBF  0824               	movf	??_CC2500_RxData,w
  9383  0BC0  07A5               	addwf	CC2500_RxData@loop_f,f
  9384  0BC1  2BA9               	goto	l6811
  9385  0BC2                     l6813:	
  9386                           
  9387                           ;CC2500_B1.c: 99: }
  9388                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9389  0BC2  319E  261F  318B   	fcall	_CC2500_ReadByte
  9390                           
  9391                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9392  0BC5  0021               	movlb	1	; select bank1
  9393  0BC6  0851               	movf	_SPI0Buffer^(0+128),w
  9394  0BC7  0020               	movlb	0	; select bank0
  9395  0BC8  00A4               	movwf	??_CC2500_RxData
  9396  0BC9  0824               	movf	??_CC2500_RxData,w
  9397  0BCA  0021               	movlb	1	; select bank1
  9398  0BCB  00CF               	movwf	_RSSI^(0+128)
  9399                           
  9400                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9401  0BCC  319E  261F         	fcall	_CC2500_ReadByte
  9402                           
  9403                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9404  0BCE  0021               	movlb	1	; select bank1
  9405  0BCF  0851               	movf	_SPI0Buffer^(0+128),w
  9406  0BD0  0020               	movlb	0	; select bank0
  9407  0BD1  00A4               	movwf	??_CC2500_RxData
  9408  0BD2  0824               	movf	??_CC2500_RxData,w
  9409  0BD3  0021               	movlb	1	; select bank1
  9410  0BD4  00CC               	movwf	_CRC^(0+128)
  9411                           
  9412                           ;CC2500_B1.c: 104: RC4 = 1;
  9413  0BD5  0020               	movlb	0	; select bank0
  9414  0BD6  160E               	bsf	14,4	;volatile
  9415                           
  9416                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9417  0BD7  0021               	movlb	1	; select bank1
  9418  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9419                           
  9420                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9421  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9422                           
  9423                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9424  0BDA  11BB               	bcf	_RF1^(0+128),3
  9425                           
  9426                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9427  0BDB  14BB               	bsf	_RF1^(0+128),1
  9428  0BDC  0008               	return
  9429  0BDD                     __end_of_CC2500_RxData:	
  9430                           
  9431                           	psect	text42
  9432  1F66                     __ptext42:	
  9433 ;; *************** function _CC2500_ReadStatus *****************
  9434 ;; Defined at:
  9435 ;;		line 301 in file "../src/CC2500_B1.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  status_addr     1    wreg     unsigned char 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        2 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    6
  9456 ;; This function calls:
  9457 ;;		_CC2500_ReadByte
  9458 ;;		_CC2500_WriteByte
  9459 ;;		_Timeout_Counter
  9460 ;;		_set_TimeoutCleared
  9461 ;; This function is called by:
  9462 ;;		_CC2500_RxData
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function _CC2500_ReadStatus
  9468  1F66                     _CC2500_ReadStatus:	
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9472                           ;CC2500_ReadStatus@status_addr stored from wreg
  9473  1F66  0020               	movlb	0	; select bank0
  9474  1F67  00A3               	movwf	CC2500_ReadStatus@status_addr
  9475                           
  9476                           ;CC2500_B1.c: 302: RC4 = 0;
  9477  1F68  120E               	bcf	14,4	;volatile
  9478                           
  9479                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9480  1F69  0823               	movf	CC2500_ReadStatus@status_addr,w
  9481  1F6A  3EC0               	addlw	192
  9482  1F6B  00A2               	movwf	??_CC2500_ReadStatus
  9483  1F6C  0822               	movf	??_CC2500_ReadStatus,w
  9484  1F6D  0021               	movlb	1	; select bank1
  9485  1F6E  00D1               	movwf	_SPI0Buffer^(0+128)
  9486                           
  9487                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9488  1F6F  2F73               	goto	l6555
  9489  1F70                     l6553:	
  9490                           
  9491                           ;CC2500_B1.c: 306: Timeout_Counter();
  9492  1F70  319D  2517  319F   	fcall	_Timeout_Counter
  9493  1F73                     l6555:	
  9494  1F73  0020               	movlb	0	; select bank0
  9495  1F74  1D0E               	btfss	14,2	;volatile
  9496  1F75  2F79               	goto	l6559
  9497  1F76  0021               	movlb	1	; select bank1
  9498  1F77  1D2C               	btfss	(_myMain^(0+128)+12),2
  9499  1F78  2F70               	goto	l6553
  9500  1F79                     l6559:	
  9501                           
  9502                           ;CC2500_B1.c: 307: };
  9503                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9504  1F79  319A  22BA  319F   	fcall	_set_TimeoutCleared
  9505                           
  9506                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9507  1F7C  319D  2582  319F   	fcall	_CC2500_WriteByte
  9508                           
  9509                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9510  1F7F  319E  261F         	fcall	_CC2500_ReadByte
  9511                           
  9512                           ;CC2500_B1.c: 312: RC4 = 1;
  9513  1F81  0020               	movlb	0	; select bank0
  9514  1F82  160E               	bsf	14,4	;volatile
  9515                           
  9516                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9517  1F83  0021               	movlb	1	; select bank1
  9518  1F84  0851               	movf	_SPI0Buffer^(0+128),w
  9519  1F85  0020               	movlb	0	; select bank0
  9520  1F86  00A2               	movwf	??_CC2500_ReadStatus
  9521  1F87  0822               	movf	??_CC2500_ReadStatus,w
  9522  1F88  0021               	movlb	1	; select bank1
  9523  1F89  00D6               	movwf	_s_data^(0+128)
  9524  1F8A  0008               	return
  9525  1F8B                     __end_of_CC2500_ReadStatus:	
  9526                           
  9527                           	psect	text43
  9528  1E1F                     __ptext43:	
  9529 ;; *************** function _CC2500_ReadByte *****************
  9530 ;; Defined at:
  9531 ;;		line 235 in file "../src/CC2500_B1.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;		None               void
  9538 ;; Registers used:
  9539 ;;		wreg, status,2, status,0
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;Total ram usage:        2 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    5
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_CC2500_RxData
  9556 ;;		_CC2500_ReadStatus
  9557 ;;		_CC2500_ReadREG
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _CC2500_ReadByte
  9563  1E1F                     _CC2500_ReadByte:	
  9564                           
  9565                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9566                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9570  1E1F  0020               	movlb	0	; select bank0
  9571  1E20  01A1               	clrf	CC2500_ReadByte@loop_b
  9572  1E21                     L6:	
  9573  1E21  3008               	movlw	8
  9574  1E22  0221               	subwf	CC2500_ReadByte@loop_b,w
  9575  1E23  1803               	btfsc	3,0
  9576  1E24  0008               	return
  9577                           
  9578                           ;CC2500_B1.c: 238: RC1 = 1;
  9579  1E25  148E               	bsf	14,1	;volatile
  9580                           
  9581                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9582  1E26  1003               	clrc
  9583  1E27  0021               	movlb	1	; select bank1
  9584  1E28  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9585                           
  9586                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9587  1E29  0020               	movlb	0	; select bank0
  9588  1E2A  1D0E               	btfss	14,2	;volatile
  9589  1E2B  2E2F               	goto	l6455
  9590                           
  9591                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9592  1E2C  0021               	movlb	1	; select bank1
  9593  1E2D  1451               	bsf	_SPI0Buffer^(0+128),0
  9594  1E2E  2E35               	goto	l6457
  9595  1E2F                     l6455:	
  9596                           
  9597                           ;CC2500_B1.c: 242: else
  9598                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9599  1E2F  30FE               	movlw	254
  9600  1E30  0020               	movlb	0	; select bank0
  9601  1E31  00A0               	movwf	??_CC2500_ReadByte
  9602  1E32  0820               	movf	??_CC2500_ReadByte,w
  9603  1E33  0021               	movlb	1	; select bank1
  9604  1E34  05D1               	andwf	_SPI0Buffer^(0+128),f
  9605  1E35                     l6457:	
  9606                           
  9607                           ;CC2500_B1.c: 244: RC1 = 0;
  9608  1E35  0020               	movlb	0	; select bank0
  9609  1E36  108E               	bcf	14,1	;volatile
  9610  1E37  3001               	movlw	1
  9611  1E38  00A0               	movwf	??_CC2500_ReadByte
  9612  1E39  0820               	movf	??_CC2500_ReadByte,w
  9613  1E3A  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9614  1E3B  2E21               	goto	L6
  9615  1E3C                     __end_of_CC2500_ReadByte:	
  9616                           
  9617                           	psect	text44
  9618  1AA1                     __ptext44:	
  9619 ;; *************** function _RF_Initialization *****************
  9620 ;; Defined at:
  9621 ;;		line 9 in file "../src/RF_Control_B1.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;		None               void
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0, pclath, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        0 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    6
  9642 ;; This function calls:
  9643 ;;		_setRF_Initialization
  9644 ;; This function is called by:
  9645 ;;		_main
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function _RF_Initialization
  9651  1AA1                     _RF_Initialization:	
  9652                           
  9653                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9654                           
  9655                           ;incstack = 0
  9656                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9657  1AA1  319B  232A         	fcall	_setRF_Initialization
  9658  1AA3  0008               	return
  9659  1AA4                     __end_of_RF_Initialization:	
  9660                           
  9661                           	psect	text45
  9662  1B2A                     __ptext45:	
  9663 ;; *************** function _setRF_Initialization *****************
  9664 ;; Defined at:
  9665 ;;		line 43 in file "../src/RF_Control_B1.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;		None
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;		None
  9670 ;; Return value:  Size  Location     Type
  9671 ;;		None               void
  9672 ;; Registers used:
  9673 ;;		wreg
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;Total ram usage:        1 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    5
  9686 ;; This function calls:
  9687 ;;		Nothing
  9688 ;; This function is called by:
  9689 ;;		_RF_Initialization
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _setRF_Initialization
  9695  1B2A                     _setRF_Initialization:	
  9696                           
  9697                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9698                           
  9699                           ;incstack = 0
  9700                           ; Regs used in _setRF_Initialization: [wreg]
  9701  1B2A  3015               	movlw	21
  9702  1B2B  0020               	movlb	0	; select bank0
  9703  1B2C  00A0               	movwf	??_setRF_Initialization
  9704  1B2D  0820               	movf	??_setRF_Initialization,w
  9705  1B2E  0021               	movlb	1	; select bank1
  9706  1B2F  00D3               	movwf	_Tx_Length^(0+128)
  9707                           
  9708                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9709  1B30  300A               	movlw	10
  9710  1B31  00C2               	movwf	(_RF1^(0+128)+7)
  9711  1B32  3000               	movlw	0
  9712  1B33  00C3               	movwf	(_RF1^(0+128)+8)
  9713  1B34  0008               	return
  9714  1B35                     __end_of_setRF_Initialization:	
  9715                           
  9716                           	psect	text46
  9717  1C6B                     __ptext46:	
  9718 ;; *************** function _Mcu_Initialization *****************
  9719 ;; Defined at:
  9720 ;;		line 30 in file "../src/MCU_B1.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;		None
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;		None
  9725 ;; Return value:  Size  Location     Type
  9726 ;;		None               void
  9727 ;; Registers used:
  9728 ;;		wreg, status,2, status,0, pclath, cstack
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;Total ram usage:        0 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    6
  9741 ;; This function calls:
  9742 ;;		_ADC_Set
  9743 ;;		_Fosc_Set
  9744 ;;		_IOC_Set
  9745 ;;		_IO_Set
  9746 ;;		_TMR1_Set
  9747 ;;		_WDT_Set
  9748 ;; This function is called by:
  9749 ;;		_main
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           
  9754                           ;psect for function _Mcu_Initialization
  9755  1C6B                     _Mcu_Initialization:	
  9756                           
  9757                           ;MCU_B1.c: 32: Fosc_Set();
  9758                           
  9759                           ;incstack = 0
  9760                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9761  1C6B  319A  22B6  319C   	fcall	_Fosc_Set
  9762                           
  9763                           ;MCU_B1.c: 34: IO_Set();
  9764  1C6E  319D  259B  319C   	fcall	_IO_Set
  9765                           
  9766                           ;MCU_B1.c: 36: ;;
  9767                           ;MCU_B1.c: 38: TMR1_Set();
  9768  1C71  319B  237D  319C   	fcall	_TMR1_Set
  9769                           
  9770                           ;MCU_B1.c: 40: ADC_Set();
  9771  1C74  319A  22D6  319C   	fcall	_ADC_Set
  9772                           
  9773                           ;MCU_B1.c: 42: ;;
  9774                           ;MCU_B1.c: 44: ;;
  9775                           ;MCU_B1.c: 46: IOC_Set();
  9776  1C77  319B  2371  319C   	fcall	_IOC_Set
  9777                           
  9778                           ;MCU_B1.c: 48: ;;
  9779                           ;MCU_B1.c: 50: ;;
  9780                           ;MCU_B1.c: 52: WDT_Set();
  9781  1C7A  319B  231F         	fcall	_WDT_Set
  9782  1C7C  0008               	return
  9783  1C7D                     __end_of_Mcu_Initialization:	
  9784                           
  9785                           	psect	text47
  9786  1B1F                     __ptext47:	
  9787 ;; *************** function _WDT_Set *****************
  9788 ;; Defined at:
  9789 ;;		line 1044 in file "../src/MCU_B1.c"
  9790 ;; Parameters:    Size  Location     Type
  9791 ;;		None
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;		None
  9794 ;; Return value:  Size  Location     Type
  9795 ;;		None               void
  9796 ;; Registers used:
  9797 ;;		wreg
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;Total ram usage:        1 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; Hardware stack levels required when called:    5
  9810 ;; This function calls:
  9811 ;;		Nothing
  9812 ;; This function is called by:
  9813 ;;		_Mcu_Initialization
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _WDT_Set
  9819  1B1F                     _WDT_Set:	
  9820                           
  9821                           ;MCU_B1.c: 1051: WDTCON = 0b00010111;;
  9822                           
  9823                           ;incstack = 0
  9824                           ; Regs used in _WDT_Set: [wreg]
  9825  1B1F  3017               	movlw	23
  9826  1B20  0021               	movlb	1	; select bank1
  9827  1B21  0097               	movwf	23	;volatile
  9828                           
  9829                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  9830  1B22  144A               	bsf	_WDT^(0+128),0
  9831                           
  9832                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  9833  1B23  300A               	movlw	10
  9834  1B24  0020               	movlb	0	; select bank0
  9835  1B25  00A0               	movwf	??_WDT_Set
  9836  1B26  0820               	movf	??_WDT_Set,w
  9837  1B27  0021               	movlb	1	; select bank1
  9838  1B28  00CB               	movwf	(_WDT^(0+128)+1)
  9839  1B29  0008               	return
  9840  1B2A                     __end_of_WDT_Set:	
  9841                           
  9842                           	psect	text48
  9843  1B7D                     __ptext48:	
  9844 ;; *************** function _TMR1_Set *****************
  9845 ;; Defined at:
  9846 ;;		line 199 in file "../src/MCU_B1.c"
  9847 ;; Parameters:    Size  Location     Type
  9848 ;;		None
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;		None
  9851 ;; Return value:  Size  Location     Type
  9852 ;;		None               void
  9853 ;; Registers used:
  9854 ;;		wreg
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;Total ram usage:        0 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    5
  9867 ;; This function calls:
  9868 ;;		Nothing
  9869 ;; This function is called by:
  9870 ;;		_Mcu_Initialization
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           
  9875                           ;psect for function _TMR1_Set
  9876  1B7D                     _TMR1_Set:	
  9877                           
  9878                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9879                           
  9880                           ;incstack = 0
  9881                           ; Regs used in _TMR1_Set: [wreg]
  9882  1B7D  3041               	movlw	65
  9883  1B7E  0020               	movlb	0	; select bank0
  9884  1B7F  0098               	movwf	24	;volatile
  9885                           
  9886                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9887  1B80  30FA               	movlw	250
  9888  1B81  0097               	movwf	23	;volatile
  9889                           
  9890                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9891  1B82  3038               	movlw	56
  9892  1B83  0096               	movwf	22	;volatile
  9893                           
  9894                           ;MCU_B1.c: 203: TMR1IE = 1;
  9895  1B84  0021               	movlb	1	; select bank1
  9896  1B85  1411               	bsf	17,0	;volatile
  9897                           
  9898                           ;MCU_B1.c: 204: PEIE = 1;
  9899  1B86  170B               	bsf	11,6	;volatile
  9900                           
  9901                           ;MCU_B1.c: 205: GIE = 1;
  9902  1B87  178B               	bsf	11,7	;volatile
  9903  1B88  0008               	return
  9904  1B89                     __end_of_TMR1_Set:	
  9905                           
  9906                           	psect	text49
  9907  1D9B                     __ptext49:	
  9908 ;; *************** function _IO_Set *****************
  9909 ;; Defined at:
  9910 ;;		line 60 in file "../src/MCU_B1.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;		None
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;		None
  9915 ;; Return value:  Size  Location     Type
  9916 ;;		None               void
  9917 ;; Registers used:
  9918 ;;		wreg, status,2
  9919 ;; Tracked objects:
  9920 ;;		On entry : 0/0
  9921 ;;		On exit  : 0/0
  9922 ;;		Unchanged: 0/0
  9923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;Total ram usage:        0 bytes
  9929 ;; Hardware stack levels used:    1
  9930 ;; Hardware stack levels required when called:    5
  9931 ;; This function calls:
  9932 ;;		Nothing
  9933 ;; This function is called by:
  9934 ;;		_Mcu_Initialization
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           
  9939                           ;psect for function _IO_Set
  9940  1D9B                     _IO_Set:	
  9941                           
  9942                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9943                           
  9944                           ;incstack = 0
  9945                           ; Regs used in _IO_Set: [wreg+status,2]
  9946  1D9B  3077               	movlw	119
  9947  1D9C  0021               	movlb	1	; select bank1
  9948  1D9D  008C               	movwf	12	;volatile
  9949                           
  9950                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9951  1D9E  3007               	movlw	7
  9952  1D9F  008D               	movwf	13	;volatile
  9953                           
  9954                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9955  1DA0  300C               	movlw	12
  9956  1DA1  008E               	movwf	14	;volatile
  9957                           
  9958                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9959  1DA2  0022               	movlb	2	; select bank2
  9960  1DA3  018C               	clrf	12	;volatile
  9961                           
  9962                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9963  1DA4  3002               	movlw	2
  9964  1DA5  008D               	movwf	13	;volatile
  9965                           
  9966                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9967  1DA6  018E               	clrf	14	;volatile
  9968                           
  9969                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9970  1DA7  3022               	movlw	34
  9971  1DA8  0023               	movlb	3	; select bank3
  9972  1DA9  008C               	movwf	12	;volatile
  9973                           
  9974                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9975  1DAA  018D               	clrf	13	;volatile
  9976                           
  9977                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9978  1DAB  018E               	clrf	14	;volatile
  9979                           
  9980                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9981  1DAC  3077               	movlw	119
  9982  1DAD  0020               	movlb	0	; select bank0
  9983  1DAE  008C               	movwf	12	;volatile
  9984                           
  9985                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9986  1DAF  3007               	movlw	7
  9987  1DB0  008D               	movwf	13	;volatile
  9988                           
  9989                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9990  1DB1  300C               	movlw	12
  9991  1DB2  008E               	movwf	14	;volatile
  9992  1DB3  0008               	return
  9993  1DB4                     __end_of_IO_Set:	
  9994                           
  9995                           	psect	text50
  9996  1B71                     __ptext50:	
  9997 ;; *************** function _IOC_Set *****************
  9998 ;; Defined at:
  9999 ;;		line 366 in file "../src/MCU_B1.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;		None               void
 10006 ;; Registers used:
 10007 ;;		wreg, status,2
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;Total ram usage:        0 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    5
 10020 ;; This function calls:
 10021 ;;		Nothing
 10022 ;; This function is called by:
 10023 ;;		_Mcu_Initialization
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           
 10028                           ;psect for function _IOC_Set
 10029  1B71                     _IOC_Set:	
 10030                           
 10031                           ;MCU_B1.c: 367: WPUB2 = 0;
 10032                           
 10033                           ;incstack = 0
 10034                           ; Regs used in _IOC_Set: [wreg+status,2]
 10035  1B71  0024               	movlb	4	; select bank4
 10036  1B72  110D               	bcf	13,2	;volatile
 10037                           
 10038                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
 10039  1B73  0027               	movlb	7	; select bank7
 10040  1B74  0194               	clrf	20	;volatile
 10041                           
 10042                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
 10043  1B75  3004               	movlw	4
 10044  1B76  0095               	movwf	21	;volatile
 10045                           
 10046                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10047  1B77  0196               	clrf	22	;volatile
 10048                           
 10049                           ;MCU_B1.c: 394: IOCIE = 1;
 10050  1B78  158B               	bsf	11,3	;volatile
 10051                           
 10052                           ;MCU_B1.c: 395: IOCIF = 0;
 10053  1B79  100B               	bcf	11,0	;volatile
 10054                           
 10055                           ;MCU_B1.c: 396: PEIE = 1;
 10056  1B7A  170B               	bsf	11,6	;volatile
 10057                           
 10058                           ;MCU_B1.c: 397: GIE = 1;
 10059  1B7B  178B               	bsf	11,7	;volatile
 10060  1B7C  0008               	return
 10061  1B7D                     __end_of_IOC_Set:	
 10062                           
 10063                           	psect	text51
 10064  1AB6                     __ptext51:	
 10065 ;; *************** function _Fosc_Set *****************
 10066 ;; Defined at:
 10067 ;;		line 56 in file "../src/MCU_B1.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;		None
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;		None
 10072 ;; Return value:  Size  Location     Type
 10073 ;;		None               void
 10074 ;; Registers used:
 10075 ;;		wreg
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;Total ram usage:        0 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:    5
 10088 ;; This function calls:
 10089 ;;		Nothing
 10090 ;; This function is called by:
 10091 ;;		_Mcu_Initialization
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function _Fosc_Set
 10097  1AB6                     _Fosc_Set:	
 10098                           
 10099                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _Fosc_Set: [wreg]
 10103  1AB6  3078               	movlw	120
 10104  1AB7  0021               	movlb	1	; select bank1
 10105  1AB8  0099               	movwf	25	;volatile
 10106  1AB9  0008               	return
 10107  1ABA                     __end_of_Fosc_Set:	
 10108                           
 10109                           	psect	text52
 10110  1AD6                     __ptext52:	
 10111 ;; *************** function _ADC_Set *****************
 10112 ;; Defined at:
 10113 ;;		line 421 in file "../src/MCU_B1.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;		None
 10118 ;; Return value:  Size  Location     Type
 10119 ;;		None               void
 10120 ;; Registers used:
 10121 ;;		wreg
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;Total ram usage:        0 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:    5
 10134 ;; This function calls:
 10135 ;;		Nothing
 10136 ;; This function is called by:
 10137 ;;		_Mcu_Initialization
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           
 10142                           ;psect for function _ADC_Set
 10143  1AD6                     _ADC_Set:	
 10144                           
 10145                           ;MCU_B1.c: 422: ADCON1 = 0xf3;
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in _ADC_Set: [wreg]
 10149  1AD6  30F3               	movlw	243
 10150  1AD7  0021               	movlb	1	; select bank1
 10151  1AD8  009E               	movwf	30	;volatile
 10152                           
 10153                           ;MCU_B1.c: 423: FVRCON = 0xc1;
 10154  1AD9  30C1               	movlw	193
 10155  1ADA  0022               	movlb	2	; select bank2
 10156  1ADB  0097               	movwf	23	;volatile
 10157  1ADC  0008               	return
 10158  1ADD                     __end_of_ADC_Set:	
 10159                           
 10160                           	psect	text53
 10161  004B                     __ptext53:	
 10162 ;; *************** function _Load_Main *****************
 10163 ;; Defined at:
 10164 ;;		line 39 in file "../src/OverLoad_B1.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;		None
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;  i               1   15[BANK0 ] unsigned char 
 10169 ;;  error           1   14[BANK0 ] unsigned char 
 10170 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10171 ;;  j               1   11[BANK0 ] unsigned char 
 10172 ;; Return value:  Size  Location     Type
 10173 ;;		None               void
 10174 ;; Registers used:
 10175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10176 ;; Tracked objects:
 10177 ;;		On entry : 0/0
 10178 ;;		On exit  : 0/0
 10179 ;;		Unchanged: 0/0
 10180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;Total ram usage:        7 bytes
 10186 ;; Hardware stack levels used:    1
 10187 ;; Hardware stack levels required when called:    8
 10188 ;; This function calls:
 10189 ;;		___lwdiv
 10190 ;;		_getAll_DimmerLights_AdjGO
 10191 ;;		_getMain_All_Error_Status
 10192 ;;		_getMain_LightsStatus
 10193 ;;		_getMain_Lights_Count
 10194 ;;		_getMain_LoadOK
 10195 ;;		_setLoad_AH_AL_Restore
 10196 ;; This function is called by:
 10197 ;;		_main
 10198 ;; This function uses a non-reentrant model
 10199 ;;
 10200                           
 10201                           
 10202                           ;psect for function _Load_Main
 10203  004B                     _Load_Main:	
 10204                           
 10205                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10206                           
 10207                           ;incstack = 0
 10208                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10209  004B  0020               	movlb	0	; select bank0
 10210  004C  01AF               	clrf	Load_Main@i
 10211  004D  01AB               	clrf	Load_Main@j
 10212  004E  3000               	movlw	0
 10213  004F  3191  215E  3180   	fcall	_getMain_All_Error_Status
 10214  0052  0020               	movlb	0	; select bank0
 10215  0053  00A9               	movwf	??_Load_Main
 10216  0054  0829               	movf	??_Load_Main,w
 10217  0055  00AE               	movwf	Load_Main@error
 10218  0056  01AC               	clrf	Load_Main@adjgo
 10219                           
 10220                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10221  0057  0022               	movlb	2	; select bank2
 10222  0058  1C25               	btfss	_Load^(0+256),0
 10223  0059  29C2               	goto	l1461
 10224                           
 10225                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10226  005A  319C  2402  3180   	fcall	_getAll_DimmerLights_AdjGO
 10227  005D  0020               	movlb	0	; select bank0
 10228  005E  00A9               	movwf	??_Load_Main
 10229  005F  0829               	movf	??_Load_Main,w
 10230  0060  00AC               	movwf	Load_Main@adjgo
 10231                           
 10232                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10233  0061  01AD               	clrf	_Load_Main$3869
 10234  0062  3190  20D0  3180   	fcall	_getMain_LightsStatus
 10235  0065  3A01               	xorlw	1
 10236  0066  1D03               	skipz
 10237  0067  2871               	goto	l8117
 10238  0068  0020               	movlb	0	; select bank0
 10239  0069  08AE               	movf	Load_Main@error,f
 10240  006A  1D03               	skipz
 10241  006B  2871               	goto	l8117
 10242  006C  08AC               	movf	Load_Main@adjgo,f
 10243  006D  1D03               	skipz
 10244  006E  2871               	goto	l8117
 10245  006F  01AD               	clrf	_Load_Main$3869
 10246  0070  0AAD               	incf	_Load_Main$3869,f
 10247  0071                     l8117:	
 10248  0071  0020               	movlb	0	; select bank0
 10249  0072  082D               	movf	_Load_Main$3869,w
 10250  0073  0022               	movlb	2	; select bank2
 10251  0074  10A5               	bcf	_Load^(0+256),1
 10252  0075  1D03               	skipz
 10253  0076  14A5               	bsf	_Load^(0+256),1
 10254                           
 10255                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10256  0077  319B  2396  3180   	fcall	_getMain_LoadOK
 10257  007A  3A01               	xorlw	1
 10258  007B  1D03               	skipz
 10259  007C  2882               	goto	l1464
 10260  007D  0022               	movlb	2	; select bank2
 10261  007E  19A5               	btfsc	_Load^(0+256),3
 10262  007F  2882               	goto	l1464
 10263                           
 10264                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10265  0080  15A5               	bsf	_Load^(0+256),3
 10266                           
 10267                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10268  0081  13A5               	bcf	_Load^(0+256),7
 10269  0082                     l1464:	
 10270                           
 10271                           ;OverLoad_B1.c: 51: }
 10272                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10273  0082  0022               	movlb	2	; select bank2
 10274  0083  1CA5               	btfss	_Load^(0+256),1
 10275  0084  2992               	goto	l1465
 10276                           
 10277                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10278  0085  1525               	bsf	_Load^(0+256),2
 10279                           
 10280                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10281  0086  1E25               	btfss	_Load^(0+256),4
 10282  0087  2990               	goto	l1466
 10283                           
 10284                           ;OverLoad_B1.c: 58: Load.Time++;
 10285  0088  3001               	movlw	1
 10286  0089  07A6               	addwf	(_Load^(0+256)+1),f
 10287  008A  3000               	movlw	0
 10288  008B  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
 10289                           
 10290                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10291  008C  3000               	movlw	0
 10292  008D  0227               	subwf	((_Load+1)^(0+256)+1),w
 10293  008E  3005               	movlw	5
 10294  008F  1903               	skipnz
 10295  0090  0226               	subwf	(_Load^(0+256)+1),w
 10296  0091  1C03               	skipc
 10297  0092  0008               	return
 10298                           
 10299                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10300  0093  01A6               	clrf	(_Load^(0+256)+1)
 10301  0094  01A7               	clrf	((_Load+1)^(0+256)+1)
 10302                           
 10303                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10304  0095  1225               	bcf	_Load^(0+256),4
 10305                           
 10306                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10307  0096  0020               	movlb	0	; select bank0
 10308  0097  01AF               	clrf	Load_Main@i
 10309  0098  0AAF               	incf	Load_Main@i,f
 10310  0099  3004               	movlw	4
 10311  009A  022F               	subwf	Load_Main@i,w
 10312  009B  1803               	btfsc	3,0
 10313  009C  28C7               	goto	l8145
 10314  009D                     l8139:	
 10315                           
 10316                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10317  009D  352F               	lslf	Load_Main@i,w
 10318  009E  3E30               	addlw	(_Load+11)& (0+255)
 10319  009F  0086               	movwf	6
 10320  00A0  3001               	movlw	1	; select bank2/3
 10321  00A1  0087               	movwf	7
 10322  00A2  3F40               	moviw [0]fsr1
 10323  00A3  00A9               	movwf	??_Load_Main
 10324  00A4  3F41               	moviw [1]fsr1
 10325  00A5  00AA               	movwf	??_Load_Main+1
 10326  00A6  0829               	movf	??_Load_Main,w
 10327  00A7  0022               	movlb	2	; select bank2
 10328  00A8  07AA               	addwf	(_Load^(0+256)+5),f
 10329  00A9  0020               	movlb	0	; select bank0
 10330  00AA  082A               	movf	??_Load_Main+1,w
 10331  00AB  0022               	movlb	2	; select bank2
 10332  00AC  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
 10333                           
 10334                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10335  00AD  0020               	movlb	0	; select bank0
 10336  00AE  352F               	lslf	Load_Main@i,w
 10337  00AF  3E3A               	addlw	(_Load+21)& (0+255)
 10338  00B0  0086               	movwf	6
 10339  00B1  3001               	movlw	1	; select bank2/3
 10340  00B2  0087               	movwf	7
 10341  00B3  3F40               	moviw [0]fsr1
 10342  00B4  00A9               	movwf	??_Load_Main
 10343  00B5  3F41               	moviw [1]fsr1
 10344  00B6  00AA               	movwf	??_Load_Main+1
 10345  00B7  0829               	movf	??_Load_Main,w
 10346  00B8  0022               	movlb	2	; select bank2
 10347  00B9  07AC               	addwf	(_Load^(0+256)+7),f
 10348  00BA  0020               	movlb	0	; select bank0
 10349  00BB  082A               	movf	??_Load_Main+1,w
 10350  00BC  0022               	movlb	2	; select bank2
 10351  00BD  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
 10352  00BE  3001               	movlw	1
 10353  00BF  0020               	movlb	0	; select bank0
 10354  00C0  00A9               	movwf	??_Load_Main
 10355  00C1  0829               	movf	??_Load_Main,w
 10356  00C2  07AF               	addwf	Load_Main@i,f
 10357  00C3  3004               	movlw	4
 10358  00C4  022F               	subwf	Load_Main@i,w
 10359  00C5  1C03               	skipc
 10360  00C6  289D               	goto	l8139
 10361  00C7                     l8145:	
 10362                           
 10363                           ;OverLoad_B1.c: 66: }
 10364                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10365  00C7  3003               	movlw	3
 10366  00C8  00A0               	movwf	___lwdiv@divisor
 10367  00C9  3000               	movlw	0
 10368  00CA  00A1               	movwf	___lwdiv@divisor+1
 10369  00CB  0022               	movlb	2	; select bank2
 10370  00CC  082B               	movf	((_Load+1)^(0+256)+5),w
 10371  00CD  0020               	movlb	0	; select bank0
 10372  00CE  01A3               	clrf	___lwdiv@dividend+1
 10373  00CF  07A3               	addwf	___lwdiv@dividend+1,f
 10374  00D0  0022               	movlb	2	; select bank2
 10375  00D1  082A               	movf	(_Load^(0+256)+5),w
 10376  00D2  0020               	movlb	0	; select bank0
 10377  00D3  01A2               	clrf	___lwdiv@dividend
 10378  00D4  07A2               	addwf	___lwdiv@dividend,f
 10379  00D5  3192  2266  3180   	fcall	___lwdiv
 10380  00D8  0020               	movlb	0	; select bank0
 10381  00D9  0821               	movf	?___lwdiv+1,w
 10382  00DA  0022               	movlb	2	; select bank2
 10383  00DB  01AB               	clrf	((_Load+1)^(0+256)+5)
 10384  00DC  07AB               	addwf	((_Load+1)^(0+256)+5),f
 10385  00DD  0020               	movlb	0	; select bank0
 10386  00DE  0820               	movf	?___lwdiv,w
 10387  00DF  0022               	movlb	2	; select bank2
 10388  00E0  01AA               	clrf	(_Load^(0+256)+5)
 10389  00E1  07AA               	addwf	(_Load^(0+256)+5),f
 10390                           
 10391                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10392  00E2  3003               	movlw	3
 10393  00E3  0020               	movlb	0	; select bank0
 10394  00E4  00A0               	movwf	___lwdiv@divisor
 10395  00E5  3000               	movlw	0
 10396  00E6  00A1               	movwf	___lwdiv@divisor+1
 10397  00E7  0022               	movlb	2	; select bank2
 10398  00E8  082D               	movf	((_Load+1)^(0+256)+7),w
 10399  00E9  0020               	movlb	0	; select bank0
 10400  00EA  01A3               	clrf	___lwdiv@dividend+1
 10401  00EB  07A3               	addwf	___lwdiv@dividend+1,f
 10402  00EC  0022               	movlb	2	; select bank2
 10403  00ED  082C               	movf	(_Load^(0+256)+7),w
 10404  00EE  0020               	movlb	0	; select bank0
 10405  00EF  01A2               	clrf	___lwdiv@dividend
 10406  00F0  07A2               	addwf	___lwdiv@dividend,f
 10407  00F1  3192  2266  3180   	fcall	___lwdiv
 10408  00F4  0020               	movlb	0	; select bank0
 10409  00F5  0821               	movf	?___lwdiv+1,w
 10410  00F6  0022               	movlb	2	; select bank2
 10411  00F7  01AD               	clrf	((_Load+1)^(0+256)+7)
 10412  00F8  07AD               	addwf	((_Load+1)^(0+256)+7),f
 10413  00F9  0020               	movlb	0	; select bank0
 10414  00FA  0820               	movf	?___lwdiv,w
 10415  00FB  0022               	movlb	2	; select bank2
 10416  00FC  01AC               	clrf	(_Load^(0+256)+7)
 10417  00FD  07AC               	addwf	(_Load^(0+256)+7),f
 10418                           
 10419                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10420  00FE  319E  2603  3180   	fcall	_setLoad_AH_AL_Restore
 10421                           
 10422                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10423  0101  0022               	movlb	2	; select bank2
 10424  0102  082B               	movf	((_Load+1)^(0+256)+5),w
 10425  0103  022D               	subwf	((_Load+1)^(0+256)+7),w
 10426  0104  1D03               	skipz
 10427  0105  2908               	goto	u8205
 10428  0106  082A               	movf	(_Load^(0+256)+5),w
 10429  0107  022C               	subwf	(_Load^(0+256)+7),w
 10430  0108                     u8205:	
 10431  0108  1803               	skipnc
 10432  0109  0008               	return
 10433                           
 10434                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10435  010A  3005               	movlw	5
 10436  010B  3E25               	addlw	_Load& (0+255)
 10437  010C  0086               	movwf	6
 10438  010D  3001               	movlw	1	; select bank2/3
 10439  010E  0087               	movwf	7
 10440  010F  092C               	comf	(_Load^(0+256)+7),w
 10441  0110  0020               	movlb	0	; select bank0
 10442  0111  00A9               	movwf	??_Load_Main
 10443  0112  0022               	movlb	2	; select bank2
 10444  0113  092D               	comf	((_Load+1)^(0+256)+7),w
 10445  0114  0020               	movlb	0	; select bank0
 10446  0115  00AA               	movwf	??_Load_Main+1
 10447  0116  0AA9               	incf	??_Load_Main,f
 10448  0117  1903               	skipnz
 10449  0118  0AAA               	incf	??_Load_Main+1,f
 10450  0119  3F40               	moviw [0]fsr1
 10451  011A  0729               	addwf	??_Load_Main,w
 10452  011B  0022               	movlb	2	; select bank2
 10453  011C  00C4               	movwf	(_Load^(0+256)+31)
 10454  011D  3F41               	moviw [1]fsr1
 10455  011E  0020               	movlb	0	; select bank0
 10456  011F  3D2A               	addwfc	??_Load_Main+1,w
 10457  0120  0022               	movlb	2	; select bank2
 10458  0121  00C5               	movwf	(_Load^(0+256)+32)
 10459                           
 10460                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10461  0122  01AA               	clrf	(_Load^(0+256)+5)
 10462  0123  01AB               	clrf	((_Load+1)^(0+256)+5)
 10463                           
 10464                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10465  0124  01AC               	clrf	(_Load^(0+256)+7)
 10466  0125  01AD               	clrf	((_Load+1)^(0+256)+7)
 10467                           
 10468                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10469  0126  3190  2066  3180   	fcall	_getMain_Lights_Count
 10470  0129  0020               	movlb	0	; select bank0
 10471  012A  00A9               	movwf	??_Load_Main
 10472  012B  0829               	movf	??_Load_Main,w
 10473  012C  0022               	movlb	2	; select bank2
 10474  012D  00D1               	movwf	(_Load^(0+256)+44)
 10475                           
 10476                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10477  012E  1DA5               	btfss	_Load^(0+256),3
 10478  012F  295B               	goto	l8177
 10479                           
 10480                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10481  0130  3002               	movlw	2
 10482  0131  024E               	subwf	(_Load^(0+256)+41),w
 10483  0132  1803               	skipnc
 10484  0133  295B               	goto	l8177
 10485                           
 10486                           ;OverLoad_B1.c: 79: Load.Count++;
 10487  0134  3001               	movlw	1
 10488  0135  0020               	movlb	0	; select bank0
 10489  0136  00A9               	movwf	??_Load_Main
 10490  0137  0829               	movf	??_Load_Main,w
 10491  0138  0022               	movlb	2	; select bank2
 10492  0139  07CE               	addwf	(_Load^(0+256)+41),f
 10493                           
 10494                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10495  013A  084E               	movf	(_Load^(0+256)+41),w
 10496  013B  3A01               	xorlw	1
 10497  013C  1D03               	skipz
 10498  013D  2948               	goto	l8169
 10499                           
 10500                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10501  013E  3002               	movlw	2
 10502  013F  0020               	movlb	0	; select bank0
 10503  0140  00A9               	movwf	??_Load_Main
 10504  0141  0829               	movf	??_Load_Main,w
 10505  0142  0022               	movlb	2	; select bank2
 10506  0143  00D0               	movwf	(_Load^(0+256)+43)
 10507                           
 10508                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*50);
 10509  0144  30E8               	movlw	232
 10510  0145  00CA               	movwf	(_Load^(0+256)+37)
 10511  0146  3003               	movlw	3
 10512  0147  2953               	goto	L7
 10513  0148                     l8169:	
 10514                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10515                           
 10516  0148  084E               	movf	(_Load^(0+256)+41),w
 10517  0149  3A02               	xorlw	2
 10518  014A  1D03               	skipz
 10519  014B  295B               	goto	l8177
 10520                           
 10521                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10522  014C  0851               	movf	(_Load^(0+256)+44),w
 10523  014D  3A01               	xorlw	1
 10524  014E  1D03               	skipz
 10525  014F  2955               	goto	l8175
 10526                           
 10527                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(1.1*50);
 10528  0150  3037               	movlw	55
 10529  0151  00CA               	movwf	(_Load^(0+256)+37)
 10530  0152  3000               	movlw	0
 10531  0153                     L7:	
 10532  0153  00CB               	movwf	(_Load^(0+256)+38)
 10533                           
 10534                           ;OverLoad_B1.c: 86: } else {
 10535  0154  295B               	goto	l8177
 10536  0155                     l8175:	
 10537                           
 10538                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10539  0155  082E               	movf	(_Load^(0+256)+9),w
 10540  0156  3E37               	addlw	55
 10541  0157  00CA               	movwf	(_Load^(0+256)+37)
 10542  0158  3000               	movlw	0
 10543  0159  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10544  015A  00CB               	movwf	((_Load+1)^(0+256)+37)
 10545  015B                     l8177:	
 10546                           
 10547                           ;OverLoad_B1.c: 88: }
 10548                           ;OverLoad_B1.c: 89: }
 10549                           ;OverLoad_B1.c: 90: }
 10550                           ;OverLoad_B1.c: 91: }
 10551                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10552  015B  084B               	movf	((_Load+1)^(0+256)+37),w
 10553  015C  0245               	subwf	((_Load+1)^(0+256)+31),w
 10554  015D  1D03               	skipz
 10555  015E  2961               	goto	u8265
 10556  015F  084A               	movf	(_Load^(0+256)+37),w
 10557  0160  0244               	subwf	(_Load^(0+256)+31),w
 10558  0161                     u8265:	
 10559  0161  1C03               	skipc
 10560  0162  2970               	goto	l8187
 10561                           
 10562                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10563  0163  3001               	movlw	1
 10564  0164  0020               	movlb	0	; select bank0
 10565  0165  00A9               	movwf	??_Load_Main
 10566  0166  0829               	movf	??_Load_Main,w
 10567  0167  0022               	movlb	2	; select bank2
 10568  0168  07CF               	addwf	(_Load^(0+256)+42),f
 10569                           
 10570                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10571  0169  084F               	movf	(_Load^(0+256)+42),w
 10572  016A  0250               	subwf	(_Load^(0+256)+43),w
 10573  016B  1803               	skipnc
 10574  016C  0008               	return
 10575                           
 10576                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10577  016D  01CF               	clrf	(_Load^(0+256)+42)
 10578                           
 10579                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10580  016E  16A5               	bsf	_Load^(0+256),5
 10581                           
 10582                           ;OverLoad_B1.c: 118: }
 10583                           ;OverLoad_B1.c: 119: } else {
 10584  016F  0008               	return
 10585  0170                     l8187:	
 10586                           
 10587                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10588  0170  01CF               	clrf	(_Load^(0+256)+42)
 10589                           
 10590                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10591  0171  1DA5               	btfss	_Load^(0+256),3
 10592  0172  0008               	return
 10593                           
 10594                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10595  0173  1BA5               	btfsc	_Load^(0+256),7
 10596  0174  0008               	return
 10597                           
 10598                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10599  0175  3001               	movlw	1
 10600  0176  0020               	movlb	0	; select bank0
 10601  0177  00A9               	movwf	??_Load_Main
 10602  0178  0829               	movf	??_Load_Main,w
 10603  0179  0022               	movlb	2	; select bank2
 10604  017A  07D2               	addwf	(_Load^(0+256)+45),f
 10605                           
 10606                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10607  017B  3003               	movlw	3
 10608  017C  0252               	subwf	(_Load^(0+256)+45),w
 10609  017D  1C03               	skipc
 10610  017E  0008               	return
 10611                           
 10612                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10613  017F  01D2               	clrf	(_Load^(0+256)+45)
 10614                           
 10615                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10616  0180  17A5               	bsf	_Load^(0+256),7
 10617                           
 10618                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10619  0181  11A5               	bcf	_Load^(0+256),3
 10620                           
 10621                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10622  0182  01CE               	clrf	(_Load^(0+256)+41)
 10623                           
 10624                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10625  0183  0845               	movf	((_Load+1)^(0+256)+31),w
 10626  0184  01AF               	clrf	((_Load+1)^(0+256)+9)
 10627  0185  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10628  0186  0844               	movf	(_Load^(0+256)+31),w
 10629  0187  01AE               	clrf	(_Load^(0+256)+9)
 10630  0188  07AE               	addwf	(_Load^(0+256)+9),f
 10631                           
 10632                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10633  0189  3003               	movlw	3
 10634  018A  0020               	movlb	0	; select bank0
 10635  018B  00A9               	movwf	??_Load_Main
 10636  018C  0829               	movf	??_Load_Main,w
 10637  018D  0022               	movlb	2	; select bank2
 10638  018E  00D0               	movwf	(_Load^(0+256)+43)
 10639                           
 10640                           ;OverLoad_B1.c: 154: }
 10641                           ;OverLoad_B1.c: 155: }
 10642                           ;OverLoad_B1.c: 156: }
 10643                           ;OverLoad_B1.c: 157: }
 10644                           ;OverLoad_B1.c: 158: }
 10645                           ;OverLoad_B1.c: 159: }
 10646                           ;OverLoad_B1.c: 160: } else {
 10647  018F  0008               	return
 10648  0190                     l1466:	
 10649                           
 10650                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10651  0190  1625               	bsf	_Load^(0+256),4
 10652                           
 10653                           ;OverLoad_B1.c: 162: }
 10654                           ;OverLoad_B1.c: 163: } else {
 10655  0191  0008               	return
 10656  0192                     l1465:	
 10657                           
 10658                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10659  0192  1D25               	btfss	_Load^(0+256),2
 10660  0193  29B0               	goto	l8237
 10661  0194  0020               	movlb	0	; select bank0
 10662  0195  082E               	movf	Load_Main@error,w
 10663  0196  3A03               	xorlw	3
 10664  0197  1903               	skipnz
 10665  0198  29B0               	goto	l8237
 10666                           
 10667                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10668  0199  0022               	movlb	2	; select bank2
 10669  019A  1125               	bcf	_Load^(0+256),2
 10670                           
 10671                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10672  019B  01A6               	clrf	(_Load^(0+256)+1)
 10673  019C  01A7               	clrf	((_Load+1)^(0+256)+1)
 10674                           
 10675                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10676  019D  1225               	bcf	_Load^(0+256),4
 10677                           
 10678                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10679  019E  319E  2603  3180   	fcall	_setLoad_AH_AL_Restore
 10680                           
 10681                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10682  01A1  0022               	movlb	2	; select bank2
 10683  01A2  01CE               	clrf	(_Load^(0+256)+41)
 10684                           
 10685                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10686  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10687                           
 10688                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10689  01A4  01D2               	clrf	(_Load^(0+256)+45)
 10690                           
 10691                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10692  01A5  01AA               	clrf	(_Load^(0+256)+5)
 10693  01A6  01AB               	clrf	((_Load+1)^(0+256)+5)
 10694                           
 10695                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10696  01A7  01AC               	clrf	(_Load^(0+256)+7)
 10697  01A8  01AD               	clrf	((_Load+1)^(0+256)+7)
 10698                           
 10699                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10700  01A9  01C4               	clrf	(_Load^(0+256)+31)
 10701  01AA  01C5               	clrf	((_Load+1)^(0+256)+31)
 10702                           
 10703                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10704  01AB  01CA               	clrf	(_Load^(0+256)+37)
 10705  01AC  01CB               	clrf	((_Load+1)^(0+256)+37)
 10706                           
 10707                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10708  01AD  01D1               	clrf	(_Load^(0+256)+44)
 10709                           
 10710                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10711  01AE  11A5               	bcf	_Load^(0+256),3
 10712                           
 10713                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10714  01AF  17A5               	bsf	_Load^(0+256),7
 10715  01B0                     l8237:	
 10716                           
 10717                           ;OverLoad_B1.c: 201: }
 10718                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10719  01B0  0022               	movlb	2	; select bank2
 10720  01B1  1EA5               	btfss	_Load^(0+256),5
 10721  01B2  0008               	return
 10722                           
 10723                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10724  01B3  3001               	movlw	1
 10725  01B4  07A8               	addwf	(_Load^(0+256)+3),f
 10726  01B5  3000               	movlw	0
 10727  01B6  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10728                           
 10729                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10730  01B7  3003               	movlw	3
 10731  01B8  0229               	subwf	((_Load+1)^(0+256)+3),w
 10732  01B9  30E8               	movlw	232
 10733  01BA  1903               	skipnz
 10734  01BB  0228               	subwf	(_Load^(0+256)+3),w
 10735  01BC  1C03               	skipc
 10736  01BD  0008               	return
 10737                           
 10738                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10739  01BE  01A8               	clrf	(_Load^(0+256)+3)
 10740  01BF  01A9               	clrf	((_Load+1)^(0+256)+3)
 10741                           
 10742                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10743  01C0  12A5               	bcf	_Load^(0+256),5
 10744                           
 10745                           ;OverLoad_B1.c: 207: }
 10746                           ;OverLoad_B1.c: 208: }
 10747                           ;OverLoad_B1.c: 209: }
 10748                           ;OverLoad_B1.c: 210: } else {
 10749  01C1  0008               	return
 10750  01C2                     l1461:	
 10751                           
 10752                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10753  01C2  0021               	movlb	1	; select bank1
 10754  01C3  1C20               	btfss	_myMain^(0+128),0
 10755  01C4  0008               	return
 10756                           
 10757                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10758  01C5  0022               	movlb	2	; select bank2
 10759  01C6  1425               	bsf	_Load^(0+256),0
 10760  01C7  0008               	return
 10761  01C8                     __end_of_Load_Main:	
 10762                           
 10763                           	psect	text54
 10764  1B96                     __ptext54:	
 10765 ;; *************** function _getMain_LoadOK *****************
 10766 ;; Defined at:
 10767 ;;		line 440 in file "../src/main_B1.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;		None
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;  ok              1    2[BANK0 ] unsigned char 
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      unsigned char 
 10774 ;; Registers used:
 10775 ;;		wreg, status,2, pclath, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;Total ram usage:        2 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    6
 10788 ;; This function calls:
 10789 ;;		_getDimmer_LoadOK
 10790 ;; This function is called by:
 10791 ;;		_Load_Main
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function _getMain_LoadOK
 10797  1B96                     _getMain_LoadOK:	
 10798                           
 10799                           ;main_B1.c: 441: char ok = 0;
 10800                           
 10801                           ;incstack = 0
 10802                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10803  1B96  0020               	movlb	0	; select bank0
 10804  1B97  01A2               	clrf	getMain_LoadOK@ok
 10805                           
 10806                           ;main_B1.c: 447: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10807  1B98  319A  22FD         	fcall	_getDimmer_LoadOK
 10808  1B9A  3A01               	xorlw	1
 10809  1B9B  3000               	movlw	0
 10810  1B9C  1903               	skipnz
 10811  1B9D  3001               	movlw	1
 10812  1B9E  0020               	movlb	0	; select bank0
 10813  1B9F  00A1               	movwf	??_getMain_LoadOK
 10814  1BA0  0821               	movf	??_getMain_LoadOK,w
 10815  1BA1  00A2               	movwf	getMain_LoadOK@ok
 10816                           
 10817                           ;main_B1.c: 449: return ok;
 10818  1BA2  0822               	movf	getMain_LoadOK@ok,w
 10819  1BA3  0008               	return
 10820  1BA4                     __end_of_getMain_LoadOK:	
 10821                           
 10822                           	psect	text55
 10823  1AFD                     __ptext55:	
 10824 ;; *************** function _getDimmer_LoadOK *****************
 10825 ;; Defined at:
 10826 ;;		line 602 in file "../src/Dimmer_B1.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;  status          1    0[BANK0 ] unsigned char 
 10831 ;; Return value:  Size  Location     Type
 10832 ;;                  1    wreg      unsigned char 
 10833 ;; Registers used:
 10834 ;;		wreg, status,2
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;Total ram usage:        1 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    5
 10847 ;; This function calls:
 10848 ;;		Nothing
 10849 ;; This function is called by:
 10850 ;;		_getMain_LoadOK
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _getDimmer_LoadOK
 10856  1AFD                     _getDimmer_LoadOK:	
 10857                           
 10858                           ;Dimmer_B1.c: 603: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10862  1AFD  3000               	movlw	0
 10863  1AFE  0022               	movlb	2	; select bank2
 10864  1AFF  18A0               	btfsc	_Dimmer^(0+256),1
 10865  1B00  3001               	movlw	1
 10866  1B01  0020               	movlb	0	; select bank0
 10867  1B02  00A0               	movwf	getDimmer_LoadOK@status
 10868                           
 10869                           ;Dimmer_B1.c: 604: return status;
 10870  1B03  0820               	movf	getDimmer_LoadOK@status,w
 10871  1B04  0008               	return
 10872  1B05                     __end_of_getDimmer_LoadOK:	
 10873                           
 10874                           	psect	text56
 10875  1066                     __ptext56:	
 10876 ;; *************** function _getMain_Lights_Count *****************
 10877 ;; Defined at:
 10878 ;;		line 410 in file "../src/main_B1.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;		None
 10881 ;; Auto vars:     Size  Location     Type
 10882 ;;  status2         1    3[BANK0 ] unsigned char 
 10883 ;;  status1         1    2[BANK0 ] unsigned char 
 10884 ;;  status3         1    1[BANK0 ] unsigned char 
 10885 ;;  count           1    0[BANK0 ] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;                  1    wreg      unsigned char 
 10888 ;; Registers used:
 10889 ;;		wreg, status,2, status,0
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;Total ram usage:        4 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    5
 10902 ;; This function calls:
 10903 ;;		Nothing
 10904 ;; This function is called by:
 10905 ;;		_Load_Main
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           
 10910                           ;psect for function _getMain_Lights_Count
 10911  1066                     _getMain_Lights_Count:	
 10912                           
 10913                           ;main_B1.c: 411: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10917  1066  0020               	movlb	0	; select bank0
 10918  1067  01A2               	clrf	getMain_Lights_Count@status1
 10919  1068  01A3               	clrf	getMain_Lights_Count@status2
 10920  1069  01A1               	clrf	getMain_Lights_Count@status3
 10921  106A  01A0               	clrf	getMain_Lights_Count@count
 10922                           
 10923                           ;main_B1.c: 415: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10924  106B  3000               	movlw	0
 10925  106C  0023               	movlb	3	; select bank3
 10926  106D  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10927  106E  3001               	movlw	1
 10928  106F  0020               	movlb	0	; select bank0
 10929  1070  00A2               	movwf	getMain_Lights_Count@status1
 10930                           
 10931                           ;main_B1.c: 418: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10932  1071  3000               	movlw	0
 10933  1072  0023               	movlb	3	; select bank3
 10934  1073  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10935  1074  3001               	movlw	1
 10936  1075  0020               	movlb	0	; select bank0
 10937  1076  00A3               	movwf	getMain_Lights_Count@status2
 10938                           
 10939                           ;main_B1.c: 436: return count = (status1 + status2 + status3);
 10940  1077  0822               	movf	getMain_Lights_Count@status1,w
 10941  1078  0723               	addwf	getMain_Lights_Count@status2,w
 10942  1079  0721               	addwf	getMain_Lights_Count@status3,w
 10943  107A  00A0               	movwf	getMain_Lights_Count@count
 10944  107B  0008               	return
 10945  107C                     __end_of_getMain_Lights_Count:	
 10946                           
 10947                           	psect	text57
 10948  1C02                     __ptext57:	
 10949 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10950 ;; Defined at:
 10951 ;;		line 493 in file "../src/Dimmer_B1.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;		None
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  1    wreg      unsigned char 
 10958 ;; Registers used:
 10959 ;;		wreg, status,2
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;Total ram usage:        3 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    5
 10972 ;; This function calls:
 10973 ;;		Nothing
 10974 ;; This function is called by:
 10975 ;;		_setDimmerLights_SwOn
 10976 ;;		_setDimmerLights_AdjControl
 10977 ;;		_Load_Main
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           
 10982                           ;psect for function _getAll_DimmerLights_AdjGO
 10983  1C02                     _getAll_DimmerLights_AdjGO:	
 10984                           
 10985                           ;Dimmer_B1.c: 494: char adjgo = 0;
 10986                           
 10987                           ;incstack = 0
 10988                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10989  1C02  0020               	movlb	0	; select bank0
 10990  1C03  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10991                           
 10992                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10993  1C04  01A2               	clrf	_getAll_DimmerLights_AdjGO$2569
 10994  1C05  0AA2               	incf	_getAll_DimmerLights_AdjGO$2569,f
 10995  1C06  0023               	movlb	3	; select bank3
 10996  1C07  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 10997  1C08  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 10998  1C09  2C0C               	goto	l6269
 10999  1C0A  0020               	movlb	0	; select bank0
 11000  1C0B  01A2               	clrf	_getAll_DimmerLights_AdjGO$2569
 11001  1C0C                     l6269:	
 11002  1C0C  0020               	movlb	0	; select bank0
 11003  1C0D  0822               	movf	_getAll_DimmerLights_AdjGO$2569,w
 11004  1C0E  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 11005  1C0F  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 11006  1C10  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 11007                           
 11008                           ;Dimmer_B1.c: 504: return adjgo;
 11009  1C11  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 11010  1C12  0008               	return
 11011  1C13                     __end_of_getAll_DimmerLights_AdjGO:	
 11012                           
 11013                           	psect	text58
 11014  1266                     __ptext58:	
 11015 ;; *************** function ___lwdiv *****************
 11016 ;; Defined at:
 11017 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  divisor         2    0[BANK0 ] unsigned int 
 11020 ;;  dividend        2    2[BANK0 ] unsigned int 
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;  quotient        2    5[BANK0 ] unsigned int 
 11023 ;;  counter         1    7[BANK0 ] unsigned char 
 11024 ;; Return value:  Size  Location     Type
 11025 ;;                  2    0[BANK0 ] unsigned int 
 11026 ;; Registers used:
 11027 ;;		wreg, status,2, status,0
 11028 ;; Tracked objects:
 11029 ;;		On entry : 0/0
 11030 ;;		On exit  : 0/0
 11031 ;;		Unchanged: 0/0
 11032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11033 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;Total ram usage:        8 bytes
 11038 ;; Hardware stack levels used:    1
 11039 ;; Hardware stack levels required when called:    5
 11040 ;; This function calls:
 11041 ;;		Nothing
 11042 ;; This function is called by:
 11043 ;;		_Load_Main
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           
 11048                           ;psect for function ___lwdiv
 11049  1266                     ___lwdiv:	
 11050                           
 11051                           ;incstack = 0
 11052                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11053  1266  0020               	movlb	0	; select bank0
 11054  1267  01A5               	clrf	___lwdiv@quotient
 11055  1268  01A6               	clrf	___lwdiv@quotient+1
 11056  1269  0821               	movf	___lwdiv@divisor+1,w
 11057  126A  0420               	iorwf	___lwdiv@divisor,w
 11058  126B  1903               	skipnz
 11059  126C  2A96               	goto	l7861
 11060  126D  01A7               	clrf	___lwdiv@counter
 11061  126E  0AA7               	incf	___lwdiv@counter,f
 11062  126F                     l7849:	
 11063  126F  1BA1               	btfsc	___lwdiv@divisor+1,7
 11064  1270  2A7B               	goto	l7851
 11065  1271  3001               	movlw	1
 11066  1272                     u7655:	
 11067  1272  35A0               	lslf	___lwdiv@divisor,f
 11068  1273  0DA1               	rlf	___lwdiv@divisor+1,f
 11069  1274  0B89               	decfsz	9,f
 11070  1275  2A72               	goto	u7655
 11071  1276  3001               	movlw	1
 11072  1277  00A4               	movwf	??___lwdiv
 11073  1278  0824               	movf	??___lwdiv,w
 11074  1279  07A7               	addwf	___lwdiv@counter,f
 11075  127A  2A6F               	goto	l7849
 11076  127B                     l7851:	
 11077  127B  3001               	movlw	1
 11078  127C                     u7675:	
 11079  127C  35A5               	lslf	___lwdiv@quotient,f
 11080  127D  0DA6               	rlf	___lwdiv@quotient+1,f
 11081  127E  0B89               	decfsz	9,f
 11082  127F  2A7C               	goto	u7675
 11083  1280  0821               	movf	___lwdiv@divisor+1,w
 11084  1281  0223               	subwf	___lwdiv@dividend+1,w
 11085  1282  1D03               	skipz
 11086  1283  2A86               	goto	u7685
 11087  1284  0820               	movf	___lwdiv@divisor,w
 11088  1285  0222               	subwf	___lwdiv@dividend,w
 11089  1286                     u7685:	
 11090  1286  1C03               	skipc
 11091  1287  2A8D               	goto	l7857
 11092  1288  0820               	movf	___lwdiv@divisor,w
 11093  1289  02A2               	subwf	___lwdiv@dividend,f
 11094  128A  0821               	movf	___lwdiv@divisor+1,w
 11095  128B  3BA3               	subwfb	___lwdiv@dividend+1,f
 11096  128C  1425               	bsf	___lwdiv@quotient,0
 11097  128D                     l7857:	
 11098  128D  3001               	movlw	1
 11099  128E                     u7695:	
 11100  128E  36A1               	lsrf	___lwdiv@divisor+1,f
 11101  128F  0CA0               	rrf	___lwdiv@divisor,f
 11102  1290  0B89               	decfsz	9,f
 11103  1291  2A8E               	goto	u7695
 11104  1292  3001               	movlw	1
 11105  1293  02A7               	subwf	___lwdiv@counter,f
 11106  1294  1D03               	btfss	3,2
 11107  1295  2A7B               	goto	l7851
 11108  1296                     l7861:	
 11109  1296  0826               	movf	___lwdiv@quotient+1,w
 11110  1297  01A1               	clrf	?___lwdiv+1
 11111  1298  07A1               	addwf	?___lwdiv+1,f
 11112  1299  0825               	movf	___lwdiv@quotient,w
 11113  129A  01A0               	clrf	?___lwdiv
 11114  129B  07A0               	addwf	?___lwdiv,f
 11115  129C  0008               	return
 11116  129D                     __end_of___lwdiv:	
 11117                           
 11118                           	psect	text59
 11119  1ABF                     __ptext59:	
 11120 ;; *************** function _Load_Initialization *****************
 11121 ;; Defined at:
 11122 ;;		line 9 in file "../src/OverLoad_B1.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;		None
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;		None               void
 11129 ;; Registers used:
 11130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;Total ram usage:        0 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:    6
 11143 ;; This function calls:
 11144 ;;		_setLoad_AH_AL_Restore
 11145 ;; This function is called by:
 11146 ;;		_main
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           
 11151                           ;psect for function _Load_Initialization
 11152  1ABF                     _Load_Initialization:	
 11153                           
 11154                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11155                           
 11156                           ;incstack = 0
 11157                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11158  1ABF  0022               	movlb	2	; select bank2
 11159  1AC0  17A5               	bsf	_Load^(0+256),7
 11160                           
 11161                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11162  1AC1  319E  2603         	fcall	_setLoad_AH_AL_Restore
 11163  1AC3  0008               	return
 11164  1AC4                     __end_of_Load_Initialization:	
 11165                           
 11166                           	psect	text60
 11167  1E03                     __ptext60:	
 11168 ;; *************** function _setLoad_AH_AL_Restore *****************
 11169 ;; Defined at:
 11170 ;;		line 239 in file "../src/OverLoad_B1.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;		None
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  i               1    1[BANK0 ] unsigned char 
 11175 ;; Return value:  Size  Location     Type
 11176 ;;		None               void
 11177 ;; Registers used:
 11178 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;Total ram usage:        2 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; Hardware stack levels required when called:    5
 11191 ;; This function calls:
 11192 ;;		Nothing
 11193 ;; This function is called by:
 11194 ;;		_Load_Initialization
 11195 ;;		_Load_Main
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           
 11200                           ;psect for function _setLoad_AH_AL_Restore
 11201  1E03                     _setLoad_AH_AL_Restore:	
 11202                           
 11203                           ;OverLoad_B1.c: 240: char i;
 11204                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11205                           
 11206                           ;incstack = 0
 11207                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11208  1E03  0020               	movlb	0	; select bank0
 11209  1E04  01A1               	clrf	setLoad_AH_AL_Restore@i
 11210  1E05                     L8:	
 11211  1E05  3005               	movlw	5
 11212  1E06  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11213  1E07  1803               	btfsc	3,0
 11214  1E08  0008               	return
 11215                           
 11216                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11217  1E09  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11218  1E0A  3E30               	addlw	(_Load+11)& (0+255)
 11219  1E0B  0086               	movwf	6
 11220  1E0C  3001               	movlw	1	; select bank2/3
 11221  1E0D  0087               	movwf	7
 11222  1E0E  3000               	movlw	0
 11223  1E0F  3FC0               	movwi [0]fsr1
 11224  1E10  3FC1               	movwi [1]fsr1
 11225                           
 11226                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11227  1E11  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11228  1E12  3E3A               	addlw	(_Load+21)& (0+255)
 11229  1E13  0086               	movwf	6
 11230  1E14  3001               	movlw	1	; select bank2/3
 11231  1E15  0087               	movwf	7
 11232  1E16  30FF               	movlw	255
 11233  1E17  3FC0               	movwi [0]fsr1
 11234  1E18  30FF               	movlw	255
 11235  1E19  3FC1               	movwi [1]fsr1
 11236  1E1A  3001               	movlw	1
 11237  1E1B  00A0               	movwf	??_setLoad_AH_AL_Restore
 11238  1E1C  0820               	movf	??_setLoad_AH_AL_Restore,w
 11239  1E1D  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11240  1E1E  2E05               	goto	L8
 11241  1E1F                     __end_of_setLoad_AH_AL_Restore:	
 11242                           
 11243                           	psect	text61
 11244  1B65                     __ptext61:	
 11245 ;; *************** function _LED_Main *****************
 11246 ;; Defined at:
 11247 ;;		line 47 in file "../src/LED_B1.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;		None
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;		None
 11252 ;; Return value:  Size  Location     Type
 11253 ;;		None               void
 11254 ;; Registers used:
 11255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;Total ram usage:        0 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    7
 11268 ;; This function calls:
 11269 ;;		_setLED_Main
 11270 ;; This function is called by:
 11271 ;;		_main
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           
 11276                           ;psect for function _LED_Main
 11277  1B65                     _LED_Main:	
 11278                           
 11279                           ;LED_B1.c: 53: setLED_Main(1);
 11280                           
 11281                           ;incstack = 0
 11282                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11283  1B65  3001               	movlw	1
 11284  1B66  3193  2311  319B   	fcall	_setLED_Main
 11285                           
 11286                           ;LED_B1.c: 56: setLED_Main(2);
 11287  1B69  3002               	movlw	2
 11288  1B6A  3193  2311  319B   	fcall	_setLED_Main
 11289                           
 11290                           ;LED_B1.c: 62: setLED_Main(99);
 11291  1B6D  3063               	movlw	99
 11292  1B6E  3193  2311         	fcall	_setLED_Main
 11293  1B70  0008               	return
 11294  1B71                     __end_of_LED_Main:	
 11295                           
 11296                           	psect	text62
 11297  1311                     __ptext62:	
 11298 ;; *************** function _setLED_Main *****************
 11299 ;; Defined at:
 11300 ;;		line 221 in file "../src/LED_B1.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  led             1    wreg     unsigned char 
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;  led             1    4[BANK0 ] unsigned char 
 11305 ;; Return value:  Size  Location     Type
 11306 ;;		None               void
 11307 ;; Registers used:
 11308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;Total ram usage:        3 bytes
 11319 ;; Hardware stack levels used:    1
 11320 ;; Hardware stack levels required when called:    6
 11321 ;; This function calls:
 11322 ;;		_LedPointSelect
 11323 ;; This function is called by:
 11324 ;;		_LED_Main
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           
 11329                           ;psect for function _setLED_Main
 11330  1311                     _setLED_Main:	
 11331                           
 11332                           ;incstack = 0
 11333                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11334                           ;setLED_Main@led stored from wreg
 11335  1311  0020               	movlb	0	; select bank0
 11336  1312  00A4               	movwf	setLED_Main@led
 11337                           
 11338                           ;LED_B1.c: 222: LedPointSelect(led);
 11339  1313  0824               	movf	setLED_Main@led,w
 11340  1314  319D  25E8  3193   	fcall	_LedPointSelect
 11341                           
 11342                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11343  1317  087B               	movf	_LED,w
 11344  1318  0086               	movwf	6
 11345  1319  3001               	movlw	1	; select bank2/3
 11346  131A  0087               	movwf	7
 11347  131B  1C81               	btfss	1,1
 11348  131C  0008               	return
 11349                           
 11350                           ;LED_B1.c: 224: LED->Time++;
 11351  131D  0A7B               	incf	_LED,w
 11352  131E  0086               	movwf	6
 11353  131F  3001               	movlw	1	; select bank2/3
 11354  1320  0087               	movwf	7
 11355  1321  3001               	movlw	1
 11356  1322  0781               	addwf	1,f
 11357  1323  3141               	addfsr 1,1
 11358  1324  1803               	skipnc
 11359  1325  0A81               	incf	1,f
 11360                           
 11361                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11362  1326  0A7B               	incf	_LED,w
 11363  1327  0086               	movwf	6
 11364  1328  3001               	movlw	1	; select bank2/3
 11365  1329  0087               	movwf	7
 11366  132A  3F40               	moviw [0]fsr1
 11367  132B  0020               	movlb	0	; select bank0
 11368  132C  00A2               	movwf	??_setLED_Main
 11369  132D  3F41               	moviw [1]fsr1
 11370  132E  00A3               	movwf	??_setLED_Main+1
 11371  132F  3000               	movlw	0
 11372  1330  0223               	subwf	??_setLED_Main+1,w
 11373  1331  3032               	movlw	50
 11374  1332  1903               	skipnz
 11375  1333  0222               	subwf	??_setLED_Main,w
 11376  1334  1C03               	skipc
 11377  1335  0008               	return
 11378                           
 11379                           ;LED_B1.c: 226: LED->Time = 0;
 11380  1336  0A7B               	incf	_LED,w
 11381  1337  0086               	movwf	6
 11382  1338  3001               	movlw	1	; select bank2/3
 11383  1339  0087               	movwf	7
 11384  133A  3000               	movlw	0
 11385  133B  3FC0               	movwi [0]fsr1
 11386  133C  3FC1               	movwi [1]fsr1
 11387                           
 11388                           ;LED_B1.c: 228: if (led == 1) {
 11389  133D  0824               	movf	setLED_Main@led,w
 11390  133E  3A01               	xorlw	1
 11391                           
 11392                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11393  133F  3008               	movlw	8
 11394  1340  1903               	btfsc	3,2
 11395  1341  068C               	xorwf	12,f
 11396                           
 11397                           ;LED_B1.c: 230: }
 11398                           ;LED_B1.c: 233: if (led == 2) {
 11399  1342  0824               	movf	setLED_Main@led,w
 11400  1343  3A02               	xorlw	2
 11401  1344  1D03               	skipz
 11402  1345  2B48               	goto	l1034
 11403                           
 11404                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11405  1346  3080               	movlw	128
 11406  1347  068E               	xorwf	14,f
 11407  1348                     l1034:	
 11408                           
 11409                           ;LED_B1.c: 235: }
 11410                           ;LED_B1.c: 243: if (led == 99) {
 11411  1348  0824               	movf	setLED_Main@led,w
 11412  1349  3A63               	xorlw	99
 11413  134A  1D03               	skipz
 11414  134B  0008               	return
 11415                           
 11416                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11417  134C  3020               	movlw	32
 11418  134D  068D               	xorwf	13,f
 11419  134E  0008               	return
 11420  134F                     __end_of_setLED_Main:	
 11421                           
 11422                           	psect	text63
 11423  1B59                     __ptext63:	
 11424 ;; *************** function _LED_Initialization *****************
 11425 ;; Defined at:
 11426 ;;		line 31 in file "../src/LED_B1.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;		None
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;		None
 11431 ;; Return value:  Size  Location     Type
 11432 ;;		None               void
 11433 ;; Registers used:
 11434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11435 ;; Tracked objects:
 11436 ;;		On entry : 0/0
 11437 ;;		On exit  : 0/0
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;Total ram usage:        0 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    8
 11447 ;; This function calls:
 11448 ;;		_setLED_Initialization
 11449 ;; This function is called by:
 11450 ;;		_main
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           
 11455                           ;psect for function _LED_Initialization
 11456  1B59                     _LED_Initialization:	
 11457                           
 11458                           ;LED_B1.c: 33: setLED_Initialization(1);
 11459                           
 11460                           ;incstack = 0
 11461                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11462  1B59  3001               	movlw	1
 11463  1B5A  319B  23F1  319B   	fcall	_setLED_Initialization
 11464                           
 11465                           ;LED_B1.c: 36: setLED_Initialization(2);
 11466  1B5D  3002               	movlw	2
 11467  1B5E  319B  23F1  319B   	fcall	_setLED_Initialization
 11468                           
 11469                           ;LED_B1.c: 42: setLED_Initialization(99);
 11470  1B61  3063               	movlw	99
 11471  1B62  319B  23F1         	fcall	_setLED_Initialization
 11472  1B64  0008               	return
 11473  1B65                     __end_of_LED_Initialization:	
 11474                           
 11475                           	psect	text64
 11476  1BF1                     __ptext64:	
 11477 ;; *************** function _setLED_Initialization *****************
 11478 ;; Defined at:
 11479 ;;		line 69 in file "../src/LED_B1.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  led             1    wreg     unsigned char 
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;  led             1    4[BANK0 ] unsigned char 
 11484 ;; Return value:  Size  Location     Type
 11485 ;;		None               void
 11486 ;; Registers used:
 11487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;Total ram usage:        1 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:    7
 11500 ;; This function calls:
 11501 ;;		_LedPointSelect
 11502 ;;		_setLED
 11503 ;; This function is called by:
 11504 ;;		_LED_Initialization
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           
 11509                           ;psect for function _setLED_Initialization
 11510  1BF1                     _setLED_Initialization:	
 11511                           
 11512                           ;incstack = 0
 11513                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11514                           ;setLED_Initialization@led stored from wreg
 11515  1BF1  0020               	movlb	0	; select bank0
 11516  1BF2  00A4               	movwf	setLED_Initialization@led
 11517                           
 11518                           ;LED_B1.c: 70: LedPointSelect(led);
 11519  1BF3  0824               	movf	setLED_Initialization@led,w
 11520  1BF4  319D  25E8  319B   	fcall	_LedPointSelect
 11521                           
 11522                           ;LED_B1.c: 71: LED->Enable = 1;
 11523  1BF7  087B               	movf	_LED,w
 11524  1BF8  0086               	movwf	6
 11525  1BF9  3001               	movlw	1	; select bank2/3
 11526  1BFA  0087               	movwf	7
 11527  1BFB  1401               	bsf	1,0
 11528                           
 11529                           ;LED_B1.c: 72: setLED(led, 0);
 11530  1BFC  0020               	movlb	0	; select bank0
 11531  1BFD  01A2               	clrf	setLED@command
 11532  1BFE  0824               	movf	setLED_Initialization@led,w
 11533  1BFF  3195  2594         	fcall	_setLED
 11534  1C01  0008               	return
 11535  1C02                     __end_of_setLED_Initialization:	
 11536                           
 11537                           	psect	text65
 11538  11FA                     __ptext65:	
 11539 ;; *************** function _Flash_Memory_Main *****************
 11540 ;; Defined at:
 11541 ;;		line 926 in file "../src/MCU_B1.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;		None
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;		None
 11546 ;; Return value:  Size  Location     Type
 11547 ;;		None               void
 11548 ;; Registers used:
 11549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;Total ram usage:        1 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    8
 11562 ;; This function calls:
 11563 ;;		_Flash_Memory_Modify
 11564 ;;		_getMain_LightsStatus
 11565 ;; This function is called by:
 11566 ;;		_main
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           
 11571                           ;psect for function _Flash_Memory_Main
 11572  11FA                     _Flash_Memory_Main:	
 11573                           
 11574                           ;MCU_B1.c: 927: if (Memory.Modify == 1) {
 11575                           
 11576                           ;incstack = 0
 11577                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11578  11FA  0024               	movlb	4	; select bank4
 11579  11FB  1C44               	btfss	(_Memory^(0+512)+36),0
 11580  11FC  0008               	return
 11581                           
 11582                           ;MCU_B1.c: 928: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11583  11FD  3190  20D0  3191   	fcall	_getMain_LightsStatus
 11584  1200  3A00               	xorlw	0
 11585  1201  3000               	movlw	0
 11586  1202  1903               	skipnz
 11587  1203  3001               	movlw	1
 11588  1204  0020               	movlb	0	; select bank0
 11589  1205  00A9               	movwf	??_Flash_Memory_Main
 11590  1206  0DA9               	rlf	??_Flash_Memory_Main,f
 11591  1207  0024               	movlb	4	; select bank4
 11592  1208  0844               	movf	(_Memory^(0+512)+36),w
 11593  1209  0020               	movlb	0	; select bank0
 11594  120A  0629               	xorwf	??_Flash_Memory_Main,w
 11595  120B  39FD               	andlw	-3
 11596  120C  0629               	xorwf	??_Flash_Memory_Main,w
 11597  120D  0024               	movlb	4	; select bank4
 11598  120E  00C4               	movwf	(_Memory^(0+512)+36)
 11599                           
 11600                           ;MCU_B1.c: 929: if (Memory.GO == 1) {
 11601  120F  1CC4               	btfss	(_Memory^(0+512)+36),1
 11602  1210  2A2A               	goto	l1302
 11603                           
 11604                           ;MCU_B1.c: 930: Memory.Runtime = 1;
 11605  1211  15C4               	bsf	(_Memory^(0+512)+36),3
 11606                           
 11607                           ;MCU_B1.c: 931: Memory.Time++;
 11608  1212  3001               	movlw	1
 11609  1213  07C2               	addwf	(_Memory^(0+512)+34),f
 11610  1214  3000               	movlw	0
 11611  1215  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11612                           
 11613                           ;MCU_B1.c: 932: if (Memory.Time == 25) {
 11614  1216  3022               	movlw	34
 11615  1217  3E20               	addlw	_Memory& (0+255)
 11616  1218  0086               	movwf	6
 11617  1219  3002               	movlw	2	; select bank4/5
 11618  121A  0087               	movwf	7
 11619  121B  3F40               	moviw [0]fsr1
 11620  121C  3A19               	xorlw	25
 11621  121D  1D03               	skipz
 11622  121E  2A21               	goto	u7955
 11623  121F  3F41               	moviw [1]fsr1
 11624  1220  3A00               	xorlw	0
 11625  1221                     u7955:	
 11626  1221  1D03               	skipz
 11627  1222  0008               	return
 11628                           
 11629                           ;MCU_B1.c: 933: Memory.Time = 0;
 11630  1223  01C2               	clrf	(_Memory^(0+512)+34)
 11631  1224  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11632                           
 11633                           ;MCU_B1.c: 934: Memory.Modify = 0;
 11634  1225  1044               	bcf	(_Memory^(0+512)+36),0
 11635                           
 11636                           ;MCU_B1.c: 935: Memory.GO = 0;
 11637  1226  10C4               	bcf	(_Memory^(0+512)+36),1
 11638                           
 11639                           ;MCU_B1.c: 936: Flash_Memory_Modify();
 11640  1227  3194  24F7         	fcall	_Flash_Memory_Modify
 11641                           
 11642                           ;MCU_B1.c: 937: }
 11643                           ;MCU_B1.c: 938: } else {
 11644  1229  0008               	return
 11645  122A                     l1302:	
 11646                           
 11647                           ;MCU_B1.c: 939: if (Memory.Runtime == 1) {
 11648  122A  1DC4               	btfss	(_Memory^(0+512)+36),3
 11649  122B  0008               	return
 11650                           
 11651                           ;MCU_B1.c: 940: Memory.Runtime = 0;
 11652  122C  11C4               	bcf	(_Memory^(0+512)+36),3
 11653                           
 11654                           ;MCU_B1.c: 941: Memory.Time = 0;
 11655  122D  01C2               	clrf	(_Memory^(0+512)+34)
 11656  122E  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11657  122F  0008               	return
 11658  1230                     __end_of_Flash_Memory_Main:	
 11659                           
 11660                           	psect	text66
 11661  14F7                     __ptext66:	
 11662 ;; *************** function _Flash_Memory_Modify *****************
 11663 ;; Defined at:
 11664 ;;		line 999 in file "../src/MCU_B1.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;		None
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;  i               1    5[BANK0 ] unsigned char 
 11669 ;; Return value:  Size  Location     Type
 11670 ;;		None               void
 11671 ;; Registers used:
 11672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;Total ram usage:        2 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    7
 11685 ;; This function calls:
 11686 ;;		_Flash_Memory_Erasing
 11687 ;;		_Flash_Memory_Read
 11688 ;;		_Flash_Memory_Write
 11689 ;;		_setMemory_Data
 11690 ;; This function is called by:
 11691 ;;		_Flash_Memory_Main
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           
 11696                           ;psect for function _Flash_Memory_Modify
 11697  14F7                     _Flash_Memory_Modify:	
 11698                           
 11699                           ;MCU_B1.c: 1000: char i = 0;
 11700                           
 11701                           ;incstack = 0
 11702                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11703  14F7  0020               	movlb	0	; select bank0
 11704  14F8  01A5               	clrf	Flash_Memory_Modify@i
 11705                           
 11706                           ;MCU_B1.c: 1001: for (i = 0; i < 32; i++) {
 11707  14F9  01A5               	clrf	Flash_Memory_Modify@i
 11708  14FA  3020               	movlw	32
 11709  14FB  0225               	subwf	Flash_Memory_Modify@i,w
 11710  14FC  1803               	btfsc	3,0
 11711  14FD  2D13               	goto	l7497
 11712  14FE                     l7491:	
 11713                           
 11714                           ;MCU_B1.c: 1002: Memory.Data[i] = Flash_Memory_Read(i);
 11715  14FE  0825               	movf	Flash_Memory_Modify@i,w
 11716  14FF  319D  25CE  3194   	fcall	_Flash_Memory_Read
 11717  1502  0020               	movlb	0	; select bank0
 11718  1503  00A4               	movwf	??_Flash_Memory_Modify
 11719  1504  0825               	movf	Flash_Memory_Modify@i,w
 11720  1505  3E20               	addlw	_Memory& (0+255)
 11721  1506  0086               	movwf	6
 11722  1507  3002               	movlw	2	; select bank4/5
 11723  1508  0087               	movwf	7
 11724  1509  0824               	movf	??_Flash_Memory_Modify,w
 11725  150A  0081               	movwf	1
 11726  150B  3001               	movlw	1
 11727  150C  00A4               	movwf	??_Flash_Memory_Modify
 11728  150D  0824               	movf	??_Flash_Memory_Modify,w
 11729  150E  07A5               	addwf	Flash_Memory_Modify@i,f
 11730  150F  3020               	movlw	32
 11731  1510  0225               	subwf	Flash_Memory_Modify@i,w
 11732  1511  1C03               	skipc
 11733  1512  2CFE               	goto	l7491
 11734  1513                     l7497:	
 11735                           
 11736                           ;MCU_B1.c: 1003: }
 11737                           ;MCU_B1.c: 1004: setMemory_Data(0, product->Data[12]);
 11738  1513  086E               	movf	_product,w
 11739  1514  0086               	movwf	6
 11740  1515  3002               	movlw	2	; select bank4/5
 11741  1516  0087               	movwf	7
 11742  1517  3002               	movlw	2	; select bank4/5
 11743  1518  3F4C               	moviw [12]fsr1
 11744  1519  00A0               	movwf	setMemory_Data@data
 11745  151A  3000               	movlw	0
 11746  151B  319B  2341  3194   	fcall	_setMemory_Data
 11747                           
 11748                           ;MCU_B1.c: 1005: setMemory_Data(1, product->Data[13]);
 11749  151E  0020               	movlb	0	; select bank0
 11750  151F  086E               	movf	_product,w
 11751  1520  0086               	movwf	6
 11752  1521  3002               	movlw	2	; select bank4/5
 11753  1522  0087               	movwf	7
 11754  1523  3002               	movlw	2	; select bank4/5
 11755  1524  3F4D               	moviw [13]fsr1
 11756  1525  00A0               	movwf	setMemory_Data@data
 11757  1526  3001               	movlw	1
 11758  1527  319B  2341  3194   	fcall	_setMemory_Data
 11759                           
 11760                           ;MCU_B1.c: 1006: setMemory_Data(2, product->Data[14]);
 11761  152A  0020               	movlb	0	; select bank0
 11762  152B  086E               	movf	_product,w
 11763  152C  0086               	movwf	6
 11764  152D  3002               	movlw	2	; select bank4/5
 11765  152E  0087               	movwf	7
 11766  152F  3002               	movlw	2	; select bank4/5
 11767  1530  3F4E               	moviw [14]fsr1
 11768  1531  00A0               	movwf	setMemory_Data@data
 11769  1532  3002               	movlw	2
 11770  1533  319B  2341  3194   	fcall	_setMemory_Data
 11771                           
 11772                           ;MCU_B1.c: 1012: if (Memory.LoopSave == 1) {
 11773  1536  0024               	movlb	4	; select bank4
 11774  1537  1D44               	btfss	(_Memory^(0+512)+36),2
 11775  1538  2D3D               	goto	l1325
 11776                           
 11777                           ;MCU_B1.c: 1013: Memory.LoopSave = 0;
 11778  1539  1144               	bcf	(_Memory^(0+512)+36),2
 11779                           
 11780                           ;MCU_B1.c: 1014: myMain.FirstOpen = 0;
 11781  153A  0021               	movlb	1	; select bank1
 11782  153B  11A0               	bcf	_myMain^(0+128),3
 11783                           
 11784                           ;MCU_B1.c: 1015: myMain.First = 0;
 11785  153C  12A0               	bcf	_myMain^(0+128),5
 11786  153D                     l1325:	
 11787                           
 11788                           ;MCU_B1.c: 1017: }
 11789                           ;MCU_B1.c: 1018: GIE = 0;
 11790  153D  138B               	bcf	11,7	;volatile
 11791                           
 11792                           ;MCU_B1.c: 1019: Flash_Memory_Erasing();
 11793  153E  319B  234D  3194   	fcall	_Flash_Memory_Erasing
 11794                           
 11795                           ;MCU_B1.c: 1020: Flash_Memory_Write();
 11796  1541  3190  20FD         	fcall	_Flash_Memory_Write
 11797                           
 11798                           ;MCU_B1.c: 1021: GIE = 1;
 11799  1543  178B               	bsf	11,7	;volatile
 11800  1544  0008               	return
 11801  1545                     __end_of_Flash_Memory_Modify:	
 11802                           
 11803                           	psect	text67
 11804  1B4D                     __ptext67:	
 11805 ;; *************** function _Flash_Memory_Erasing *****************
 11806 ;; Defined at:
 11807 ;;		line 988 in file "../src/MCU_B1.c"
 11808 ;; Parameters:    Size  Location     Type
 11809 ;;		None
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;		None
 11812 ;; Return value:  Size  Location     Type
 11813 ;;		None               void
 11814 ;; Registers used:
 11815 ;;		wreg, status,2, status,0, pclath, cstack
 11816 ;; Tracked objects:
 11817 ;;		On entry : 0/0
 11818 ;;		On exit  : 0/0
 11819 ;;		Unchanged: 0/0
 11820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;Total ram usage:        0 bytes
 11826 ;; Hardware stack levels used:    1
 11827 ;; Hardware stack levels required when called:    6
 11828 ;; This function calls:
 11829 ;;		_Flash_Memory_Unlock
 11830 ;; This function is called by:
 11831 ;;		_Flash_Memory_Modify
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function _Flash_Memory_Erasing
 11837  1B4D                     _Flash_Memory_Erasing:	
 11838                           
 11839                           ;MCU_B1.c: 989: CFGS = 0;
 11840                           
 11841                           ;incstack = 0
 11842                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11843  1B4D  0023               	movlb	3	; select bank3
 11844  1B4E  1315               	bcf	21,6	;volatile
 11845                           
 11846                           ;MCU_B1.c: 990: PMADRH = 0x30;
 11847  1B4F  3030               	movlw	48
 11848  1B50  0092               	movwf	18	;volatile
 11849                           
 11850                           ;MCU_B1.c: 991: PMADRL = 0x00;
 11851  1B51  0191               	clrf	17	;volatile
 11852                           
 11853                           ;MCU_B1.c: 992: FREE = 1;
 11854  1B52  1615               	bsf	21,4	;volatile
 11855                           
 11856                           ;MCU_B1.c: 993: WREN = 1;
 11857  1B53  1515               	bsf	21,2	;volatile
 11858                           
 11859                           ;MCU_B1.c: 994: Flash_Memory_Unlock();
 11860  1B54  319B  2316         	fcall	_Flash_Memory_Unlock
 11861                           
 11862                           ;MCU_B1.c: 995: WREN = 0;
 11863  1B56  0023               	movlb	3	; select bank3
 11864  1B57  1115               	bcf	21,2	;volatile
 11865  1B58  0008               	return
 11866  1B59                     __end_of_Flash_Memory_Erasing:	
 11867                           
 11868                           	psect	text68
 11869  0579                     __ptext68:	
 11870 ;; *************** function _Flash_Memory_Initialization *****************
 11871 ;; Defined at:
 11872 ;;		line 885 in file "../src/MCU_B1.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;		None
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;  i               1   67[BANK0 ] unsigned char 
 11877 ;; Return value:  Size  Location     Type
 11878 ;;		None               void
 11879 ;; Registers used:
 11880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11881 ;; Tracked objects:
 11882 ;;		On entry : 0/0
 11883 ;;		On exit  : 0/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;Total ram usage:        2 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    8
 11893 ;; This function calls:
 11894 ;;		_Flash_Memory_Read
 11895 ;;		_Flash_Memory_Write
 11896 ;;		_setMemory_Data
 11897 ;;		_setPercentValue
 11898 ;; This function is called by:
 11899 ;;		_main
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           
 11904                           ;psect for function _Flash_Memory_Initialization
 11905  0579                     _Flash_Memory_Initialization:	
 11906                           
 11907                           ;MCU_B1.c: 886: char i = 0;
 11908                           
 11909                           ;incstack = 0
 11910                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11911  0579  0020               	movlb	0	; select bank0
 11912  057A  01E3               	clrf	Flash_Memory_Initialization@i
 11913                           
 11914                           ;MCU_B1.c: 887: if (Flash_Memory_Read(31) == 0xaa) {
 11915  057B  301F               	movlw	31
 11916  057C  319D  25CE  3185   	fcall	_Flash_Memory_Read
 11917  057F  3AAA               	xorlw	170
 11918  0580  1D03               	skipz
 11919  0581  2DEB               	goto	l7985
 11920                           
 11921                           ;MCU_B1.c: 888: product->Data[12] = Flash_Memory_Read(0);
 11922  0582  3000               	movlw	0
 11923  0583  319D  25CE  3185   	fcall	_Flash_Memory_Read
 11924  0586  0020               	movlb	0	; select bank0
 11925  0587  00E2               	movwf	??_Flash_Memory_Initialization
 11926  0588  086E               	movf	_product,w
 11927  0589  3E0C               	addlw	12
 11928  058A  0086               	movwf	6
 11929  058B  3002               	movlw	2	; select bank4/5
 11930  058C  0087               	movwf	7
 11931  058D  0862               	movf	??_Flash_Memory_Initialization,w
 11932  058E  0081               	movwf	1
 11933                           
 11934                           ;MCU_B1.c: 889: product->Data[13] = Flash_Memory_Read(1);
 11935  058F  3001               	movlw	1
 11936  0590  319D  25CE  3185   	fcall	_Flash_Memory_Read
 11937  0593  0020               	movlb	0	; select bank0
 11938  0594  00E2               	movwf	??_Flash_Memory_Initialization
 11939  0595  086E               	movf	_product,w
 11940  0596  3E0D               	addlw	13
 11941  0597  0086               	movwf	6
 11942  0598  3002               	movlw	2	; select bank4/5
 11943  0599  0087               	movwf	7
 11944  059A  0862               	movf	??_Flash_Memory_Initialization,w
 11945  059B  0081               	movwf	1
 11946                           
 11947                           ;MCU_B1.c: 890: product->Data[14] = Flash_Memory_Read(2);
 11948  059C  3002               	movlw	2
 11949  059D  319D  25CE  3185   	fcall	_Flash_Memory_Read
 11950  05A0  0020               	movlb	0	; select bank0
 11951  05A1  00E2               	movwf	??_Flash_Memory_Initialization
 11952  05A2  086E               	movf	_product,w
 11953  05A3  3E0E               	addlw	14
 11954  05A4  0086               	movwf	6
 11955  05A5  3002               	movlw	2	; select bank4/5
 11956  05A6  0087               	movwf	7
 11957  05A7  0862               	movf	??_Flash_Memory_Initialization,w
 11958  05A8  0081               	movwf	1
 11959                           
 11960                           ;MCU_B1.c: 896: i = setPercentValue(((char)(80*0.8)));
 11961  05A9  3040               	movlw	64
 11962  05AA  3189  21D6  3185   	fcall	_setPercentValue
 11963  05AD  0020               	movlb	0	; select bank0
 11964  05AE  00E2               	movwf	??_Flash_Memory_Initialization
 11965  05AF  0862               	movf	??_Flash_Memory_Initialization,w
 11966  05B0  00E3               	movwf	Flash_Memory_Initialization@i
 11967                           
 11968                           ;MCU_B1.c: 897: product->Data[21] = i;
 11969  05B1  0863               	movf	Flash_Memory_Initialization@i,w
 11970  05B2  00E2               	movwf	??_Flash_Memory_Initialization
 11971  05B3  086E               	movf	_product,w
 11972  05B4  3E15               	addlw	21
 11973  05B5  0086               	movwf	6
 11974  05B6  3002               	movlw	2	; select bank4/5
 11975  05B7  0087               	movwf	7
 11976  05B8  0862               	movf	??_Flash_Memory_Initialization,w
 11977  05B9  0081               	movwf	1
 11978                           
 11979                           ;MCU_B1.c: 898: product->Data[22] = i;
 11980  05BA  0863               	movf	Flash_Memory_Initialization@i,w
 11981  05BB  00E2               	movwf	??_Flash_Memory_Initialization
 11982  05BC  086E               	movf	_product,w
 11983  05BD  3E16               	addlw	22
 11984  05BE  0086               	movwf	6
 11985  05BF  3002               	movlw	2	; select bank4/5
 11986  05C0  0087               	movwf	7
 11987  05C1  0862               	movf	??_Flash_Memory_Initialization,w
 11988  05C2  0081               	movwf	1
 11989                           
 11990                           ;MCU_B1.c: 899: product->Data[23] = i;
 11991  05C3  0863               	movf	Flash_Memory_Initialization@i,w
 11992  05C4  00E2               	movwf	??_Flash_Memory_Initialization
 11993  05C5  086E               	movf	_product,w
 11994  05C6  3E17               	addlw	23
 11995  05C7  0086               	movwf	6
 11996  05C8  3002               	movlw	2	; select bank4/5
 11997  05C9  0087               	movwf	7
 11998  05CA  0862               	movf	??_Flash_Memory_Initialization,w
 11999  05CB  0081               	movwf	1
 12000                           
 12001                           ;MCU_B1.c: 901: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12002  05CC  086E               	movf	_product,w
 12003  05CD  3E0C               	addlw	12
 12004  05CE  0086               	movwf	6
 12005  05CF  3002               	movlw	2	; select bank4/5
 12006  05D0  0087               	movwf	7
 12007  05D1  0801               	movf	1,w
 12008  05D2  3AFF               	xorlw	255
 12009  05D3  1D03               	skipz
 12010  05D4  0008               	return
 12011  05D5  086E               	movf	_product,w
 12012  05D6  3E0D               	addlw	13
 12013  05D7  0086               	movwf	6
 12014  05D8  3002               	movlw	2	; select bank4/5
 12015  05D9  0087               	movwf	7
 12016  05DA  0801               	movf	1,w
 12017  05DB  3AFF               	xorlw	255
 12018  05DC  1D03               	skipz
 12019  05DD  0008               	return
 12020  05DE  086E               	movf	_product,w
 12021  05DF  3E0E               	addlw	14
 12022  05E0  0086               	movwf	6
 12023  05E1  3002               	movlw	2	; select bank4/5
 12024  05E2  0087               	movwf	7
 12025  05E3  0801               	movf	1,w
 12026  05E4  3AFF               	xorlw	255
 12027  05E5  1D03               	skipz
 12028  05E6  0008               	return
 12029                           
 12030                           ;MCU_B1.c: 902: myMain.FirstOpen = 1;
 12031  05E7  0021               	movlb	1	; select bank1
 12032  05E8  15A0               	bsf	_myMain^(0+128),3
 12033                           
 12034                           ;MCU_B1.c: 903: myMain.First = 1;
 12035  05E9  16A0               	bsf	_myMain^(0+128),5
 12036                           
 12037                           ;MCU_B1.c: 904: }
 12038                           ;MCU_B1.c: 905: } else {
 12039  05EA  0008               	return
 12040  05EB                     l7985:	
 12041                           
 12042                           ;MCU_B1.c: 906: i = setPercentValue(((char)(80*0.8)));
 12043  05EB  3040               	movlw	64
 12044  05EC  3189  21D6  3185   	fcall	_setPercentValue
 12045  05EF  0020               	movlb	0	; select bank0
 12046  05F0  00E2               	movwf	??_Flash_Memory_Initialization
 12047  05F1  0862               	movf	??_Flash_Memory_Initialization,w
 12048  05F2  00E3               	movwf	Flash_Memory_Initialization@i
 12049                           
 12050                           ;MCU_B1.c: 907: setMemory_Data(0, 0xff);
 12051  05F3  30FF               	movlw	255
 12052  05F4  00E2               	movwf	??_Flash_Memory_Initialization
 12053  05F5  0862               	movf	??_Flash_Memory_Initialization,w
 12054  05F6  00A0               	movwf	setMemory_Data@data
 12055  05F7  3000               	movlw	0
 12056  05F8  319B  2341  3185   	fcall	_setMemory_Data
 12057                           
 12058                           ;MCU_B1.c: 908: setMemory_Data(1, 0xff);
 12059  05FB  30FF               	movlw	255
 12060  05FC  0020               	movlb	0	; select bank0
 12061  05FD  00E2               	movwf	??_Flash_Memory_Initialization
 12062  05FE  0862               	movf	??_Flash_Memory_Initialization,w
 12063  05FF  00A0               	movwf	setMemory_Data@data
 12064  0600  3001               	movlw	1
 12065  0601  319B  2341  3185   	fcall	_setMemory_Data
 12066                           
 12067                           ;MCU_B1.c: 909: setMemory_Data(2, 0xff);
 12068  0604  30FF               	movlw	255
 12069  0605  0020               	movlb	0	; select bank0
 12070  0606  00E2               	movwf	??_Flash_Memory_Initialization
 12071  0607  0862               	movf	??_Flash_Memory_Initialization,w
 12072  0608  00A0               	movwf	setMemory_Data@data
 12073  0609  3002               	movlw	2
 12074  060A  319B  2341  3185   	fcall	_setMemory_Data
 12075                           
 12076                           ;MCU_B1.c: 910: setMemory_Data(3, 0xff);
 12077  060D  30FF               	movlw	255
 12078  060E  0020               	movlb	0	; select bank0
 12079  060F  00E2               	movwf	??_Flash_Memory_Initialization
 12080  0610  0862               	movf	??_Flash_Memory_Initialization,w
 12081  0611  00A0               	movwf	setMemory_Data@data
 12082  0612  3003               	movlw	3
 12083  0613  319B  2341  3185   	fcall	_setMemory_Data
 12084                           
 12085                           ;MCU_B1.c: 911: setMemory_Data(4, 0xff);
 12086  0616  30FF               	movlw	255
 12087  0617  0020               	movlb	0	; select bank0
 12088  0618  00E2               	movwf	??_Flash_Memory_Initialization
 12089  0619  0862               	movf	??_Flash_Memory_Initialization,w
 12090  061A  00A0               	movwf	setMemory_Data@data
 12091  061B  3004               	movlw	4
 12092  061C  319B  2341  3185   	fcall	_setMemory_Data
 12093                           
 12094                           ;MCU_B1.c: 912: setMemory_Data(5, 0xff);
 12095  061F  30FF               	movlw	255
 12096  0620  0020               	movlb	0	; select bank0
 12097  0621  00E2               	movwf	??_Flash_Memory_Initialization
 12098  0622  0862               	movf	??_Flash_Memory_Initialization,w
 12099  0623  00A0               	movwf	setMemory_Data@data
 12100  0624  3005               	movlw	5
 12101  0625  319B  2341  3185   	fcall	_setMemory_Data
 12102                           
 12103                           ;MCU_B1.c: 913: setMemory_Data(31, 0xaa);
 12104  0628  30AA               	movlw	170
 12105  0629  0020               	movlb	0	; select bank0
 12106  062A  00E2               	movwf	??_Flash_Memory_Initialization
 12107  062B  0862               	movf	??_Flash_Memory_Initialization,w
 12108  062C  00A0               	movwf	setMemory_Data@data
 12109  062D  301F               	movlw	31
 12110  062E  319B  2341  3185   	fcall	_setMemory_Data
 12111                           
 12112                           ;MCU_B1.c: 914: product->Data[21] = i;
 12113  0631  0020               	movlb	0	; select bank0
 12114  0632  0863               	movf	Flash_Memory_Initialization@i,w
 12115  0633  00E2               	movwf	??_Flash_Memory_Initialization
 12116  0634  086E               	movf	_product,w
 12117  0635  3E15               	addlw	21
 12118  0636  0086               	movwf	6
 12119  0637  3002               	movlw	2	; select bank4/5
 12120  0638  0087               	movwf	7
 12121  0639  0862               	movf	??_Flash_Memory_Initialization,w
 12122  063A  0081               	movwf	1
 12123                           
 12124                           ;MCU_B1.c: 915: product->Data[22] = i;
 12125  063B  0863               	movf	Flash_Memory_Initialization@i,w
 12126  063C  00E2               	movwf	??_Flash_Memory_Initialization
 12127  063D  086E               	movf	_product,w
 12128  063E  3E16               	addlw	22
 12129  063F  0086               	movwf	6
 12130  0640  3002               	movlw	2	; select bank4/5
 12131  0641  0087               	movwf	7
 12132  0642  0862               	movf	??_Flash_Memory_Initialization,w
 12133  0643  0081               	movwf	1
 12134                           
 12135                           ;MCU_B1.c: 916: product->Data[23] = i;
 12136  0644  0863               	movf	Flash_Memory_Initialization@i,w
 12137  0645  00E2               	movwf	??_Flash_Memory_Initialization
 12138  0646  086E               	movf	_product,w
 12139  0647  3E17               	addlw	23
 12140  0648  0086               	movwf	6
 12141  0649  3002               	movlw	2	; select bank4/5
 12142  064A  0087               	movwf	7
 12143  064B  0862               	movf	??_Flash_Memory_Initialization,w
 12144  064C  0081               	movwf	1
 12145                           
 12146                           ;MCU_B1.c: 917: GIE = 0;
 12147  064D  138B               	bcf	11,7	;volatile
 12148                           
 12149                           ;MCU_B1.c: 918: Flash_Memory_Write();
 12150  064E  3190  20FD         	fcall	_Flash_Memory_Write
 12151                           
 12152                           ;MCU_B1.c: 919: GIE = 1;
 12153  0650  178B               	bsf	11,7	;volatile
 12154                           
 12155                           ;MCU_B1.c: 920: myMain.FirstOpen = 1;
 12156  0651  0021               	movlb	1	; select bank1
 12157  0652  15A0               	bsf	_myMain^(0+128),3
 12158                           
 12159                           ;MCU_B1.c: 921: myMain.First = 1;
 12160  0653  16A0               	bsf	_myMain^(0+128),5
 12161  0654  0008               	return
 12162  0655                     __end_of_Flash_Memory_Initialization:	
 12163                           
 12164                           	psect	text69
 12165  1B41                     __ptext69:	
 12166 ;; *************** function _setMemory_Data *****************
 12167 ;; Defined at:
 12168 ;;		line 1036 in file "../src/MCU_B1.c"
 12169 ;; Parameters:    Size  Location     Type
 12170 ;;  address         1    wreg     unsigned char 
 12171 ;;  data            1    0[BANK0 ] unsigned char 
 12172 ;; Auto vars:     Size  Location     Type
 12173 ;;  address         1    2[BANK0 ] unsigned char 
 12174 ;; Return value:  Size  Location     Type
 12175 ;;		None               void
 12176 ;; Registers used:
 12177 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12183 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;Total ram usage:        3 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    5
 12190 ;; This function calls:
 12191 ;;		Nothing
 12192 ;; This function is called by:
 12193 ;;		_Flash_Memory_Initialization
 12194 ;;		_Flash_Memory_Modify
 12195 ;; This function uses a non-reentrant model
 12196 ;;
 12197                           
 12198                           
 12199                           ;psect for function _setMemory_Data
 12200  1B41                     _setMemory_Data:	
 12201                           
 12202                           ;incstack = 0
 12203                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12204                           ;setMemory_Data@address stored from wreg
 12205  1B41  0020               	movlb	0	; select bank0
 12206  1B42  00A2               	movwf	setMemory_Data@address
 12207                           
 12208                           ;MCU_B1.c: 1037: Memory.Data[address] = data;
 12209  1B43  0820               	movf	setMemory_Data@data,w
 12210  1B44  00A1               	movwf	??_setMemory_Data
 12211  1B45  0822               	movf	setMemory_Data@address,w
 12212  1B46  3E20               	addlw	_Memory& (0+255)
 12213  1B47  0086               	movwf	6
 12214  1B48  3002               	movlw	2	; select bank4/5
 12215  1B49  0087               	movwf	7
 12216  1B4A  0821               	movf	??_setMemory_Data,w
 12217  1B4B  0081               	movwf	1
 12218  1B4C  0008               	return
 12219  1B4D                     __end_of_setMemory_Data:	
 12220                           
 12221                           	psect	text70
 12222  10FD                     __ptext70:	
 12223 ;; *************** function _Flash_Memory_Write *****************
 12224 ;; Defined at:
 12225 ;;		line 969 in file "../src/MCU_B1.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;  i               1    1[BANK0 ] unsigned char 
 12230 ;; Return value:  Size  Location     Type
 12231 ;;		None               void
 12232 ;; Registers used:
 12233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;Total ram usage:        2 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:    6
 12246 ;; This function calls:
 12247 ;;		_Flash_Memory_Unlock
 12248 ;; This function is called by:
 12249 ;;		_Flash_Memory_Initialization
 12250 ;;		_Flash_Memory_Modify
 12251 ;; This function uses a non-reentrant model
 12252 ;;
 12253                           
 12254                           
 12255                           ;psect for function _Flash_Memory_Write
 12256  10FD                     _Flash_Memory_Write:	
 12257                           
 12258                           ;MCU_B1.c: 970: char i = 0;
 12259                           
 12260                           ;incstack = 0
 12261                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12262  10FD  0020               	movlb	0	; select bank0
 12263  10FE  01A1               	clrf	Flash_Memory_Write@i
 12264                           
 12265                           ;MCU_B1.c: 971: CFGS = 0;
 12266  10FF  0023               	movlb	3	; select bank3
 12267  1100  1315               	bcf	21,6	;volatile
 12268                           
 12269                           ;MCU_B1.c: 972: PMADRH = 0x30;
 12270  1101  3030               	movlw	48
 12271  1102  0092               	movwf	18	;volatile
 12272                           
 12273                           ;MCU_B1.c: 973: PMDATH = 0;
 12274  1103  0194               	clrf	20	;volatile
 12275                           
 12276                           ;MCU_B1.c: 974: FREE = 0;
 12277  1104  1215               	bcf	21,4	;volatile
 12278                           
 12279                           ;MCU_B1.c: 975: LWLO = 1;
 12280  1105  1695               	bsf	21,5	;volatile
 12281                           
 12282                           ;MCU_B1.c: 976: WREN = 1;
 12283  1106  1515               	bsf	21,2	;volatile
 12284                           
 12285                           ;MCU_B1.c: 977: for (i = 0; i < 32; i++) {
 12286  1107  0020               	movlb	0	; select bank0
 12287  1108  01A1               	clrf	Flash_Memory_Write@i
 12288  1109  3020               	movlw	32
 12289  110A  0221               	subwf	Flash_Memory_Write@i,w
 12290  110B  1803               	btfsc	3,0
 12291  110C  2925               	goto	l1316
 12292  110D                     l7035:	
 12293                           
 12294                           ;MCU_B1.c: 978: PMADRL = i;
 12295  110D  0821               	movf	Flash_Memory_Write@i,w
 12296  110E  0023               	movlb	3	; select bank3
 12297  110F  0091               	movwf	17	;volatile
 12298                           
 12299                           ;MCU_B1.c: 979: PMDATL = Memory.Data[i];
 12300  1110  0020               	movlb	0	; select bank0
 12301  1111  0821               	movf	Flash_Memory_Write@i,w
 12302  1112  3E20               	addlw	_Memory& (0+255)
 12303  1113  0086               	movwf	6
 12304  1114  3002               	movlw	2	; select bank4/5
 12305  1115  0087               	movwf	7
 12306  1116  0801               	movf	1,w
 12307  1117  0023               	movlb	3	; select bank3
 12308  1118  0093               	movwf	19	;volatile
 12309                           
 12310                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 12311  1119  319B  2316  3190   	fcall	_Flash_Memory_Unlock
 12312  111C  3001               	movlw	1
 12313  111D  0020               	movlb	0	; select bank0
 12314  111E  00A0               	movwf	??_Flash_Memory_Write
 12315  111F  0820               	movf	??_Flash_Memory_Write,w
 12316  1120  07A1               	addwf	Flash_Memory_Write@i,f
 12317  1121  3020               	movlw	32
 12318  1122  0221               	subwf	Flash_Memory_Write@i,w
 12319  1123  1C03               	skipc
 12320  1124  290D               	goto	l7035
 12321  1125                     l1316:	
 12322                           
 12323                           ;MCU_B1.c: 981: }
 12324                           ;MCU_B1.c: 982: LWLO = 0;
 12325  1125  0023               	movlb	3	; select bank3
 12326  1126  1295               	bcf	21,5	;volatile
 12327                           
 12328                           ;MCU_B1.c: 983: Flash_Memory_Unlock();
 12329  1127  319B  2316         	fcall	_Flash_Memory_Unlock
 12330                           
 12331                           ;MCU_B1.c: 984: WREN = 0;
 12332  1129  0023               	movlb	3	; select bank3
 12333  112A  1115               	bcf	21,2	;volatile
 12334  112B  0008               	return
 12335  112C                     __end_of_Flash_Memory_Write:	
 12336                           
 12337                           	psect	text71
 12338  1B16                     __ptext71:	
 12339 ;; *************** function _Flash_Memory_Unlock *****************
 12340 ;; Defined at:
 12341 ;;		line 948 in file "../src/MCU_B1.c"
 12342 ;; Parameters:    Size  Location     Type
 12343 ;;		None
 12344 ;; Auto vars:     Size  Location     Type
 12345 ;;		None
 12346 ;; Return value:  Size  Location     Type
 12347 ;;		None               void
 12348 ;; Registers used:
 12349 ;;		wreg
 12350 ;; Tracked objects:
 12351 ;;		On entry : 0/0
 12352 ;;		On exit  : 0/0
 12353 ;;		Unchanged: 0/0
 12354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;Total ram usage:        0 bytes
 12360 ;; Hardware stack levels used:    1
 12361 ;; Hardware stack levels required when called:    5
 12362 ;; This function calls:
 12363 ;;		Nothing
 12364 ;; This function is called by:
 12365 ;;		_Flash_Memory_Write
 12366 ;;		_Flash_Memory_Erasing
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           
 12371                           ;psect for function _Flash_Memory_Unlock
 12372  1B16                     _Flash_Memory_Unlock:	
 12373                           
 12374                           ;MCU_B1.c: 949: PMCON2 = 0x55;
 12375                           
 12376                           ;incstack = 0
 12377                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12378  1B16  3055               	movlw	85
 12379  1B17  0023               	movlb	3	; select bank3
 12380  1B18  0096               	movwf	22	;volatile
 12381                           
 12382                           ;MCU_B1.c: 950: PMCON2 = 0xaa;
 12383  1B19  30AA               	movlw	170
 12384  1B1A  0096               	movwf	22	;volatile
 12385                           
 12386                           ;MCU_B1.c: 951: WR = 1;
 12387  1B1B  1495               	bsf	21,1	;volatile
 12388                           
 12389                           ;MCU_B1.c: 952: __nop();
 12390  1B1C  0000               	nop
 12391                           
 12392                           ;MCU_B1.c: 953: __nop();
 12393  1B1D  0000               	nop
 12394  1B1E  0008               	return
 12395  1B1F                     __end_of_Flash_Memory_Unlock:	
 12396                           
 12397                           	psect	text72
 12398  1DCE                     __ptext72:	
 12399 ;; *************** function _Flash_Memory_Read *****************
 12400 ;; Defined at:
 12401 ;;		line 957 in file "../src/MCU_B1.c"
 12402 ;; Parameters:    Size  Location     Type
 12403 ;;  address         1    wreg     unsigned char 
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;  address         1    2[BANK0 ] unsigned char 
 12406 ;;  ret             1    3[BANK0 ] unsigned char 
 12407 ;;  i               1    1[BANK0 ] unsigned char 
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      unsigned char 
 12410 ;; Registers used:
 12411 ;;		wreg, status,2
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/0
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;Total ram usage:        4 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; Hardware stack levels required when called:    5
 12424 ;; This function calls:
 12425 ;;		Nothing
 12426 ;; This function is called by:
 12427 ;;		_Flash_Memory_Initialization
 12428 ;;		_Flash_Memory_Modify
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           
 12433                           ;psect for function _Flash_Memory_Read
 12434  1DCE                     _Flash_Memory_Read:	
 12435                           
 12436                           ;incstack = 0
 12437                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12438                           ;Flash_Memory_Read@address stored from wreg
 12439  1DCE  0020               	movlb	0	; select bank0
 12440  1DCF  00A2               	movwf	Flash_Memory_Read@address
 12441                           
 12442                           ;MCU_B1.c: 958: char i = 0, ret = 0;
 12443  1DD0  01A1               	clrf	Flash_Memory_Read@i
 12444  1DD1  01A3               	clrf	Flash_Memory_Read@ret
 12445                           
 12446                           ;MCU_B1.c: 959: PMADRH = 0x30;
 12447  1DD2  3030               	movlw	48
 12448  1DD3  0023               	movlb	3	; select bank3
 12449  1DD4  0092               	movwf	18	;volatile
 12450                           
 12451                           ;MCU_B1.c: 960: PMADRL = address;
 12452  1DD5  0020               	movlb	0	; select bank0
 12453  1DD6  0822               	movf	Flash_Memory_Read@address,w
 12454  1DD7  0023               	movlb	3	; select bank3
 12455  1DD8  0091               	movwf	17	;volatile
 12456                           
 12457                           ;MCU_B1.c: 961: CFGS = 0;
 12458  1DD9  1315               	bcf	21,6	;volatile
 12459                           
 12460                           ;MCU_B1.c: 962: RD = 1;
 12461  1DDA  1415               	bsf	21,0	;volatile
 12462                           
 12463                           ;MCU_B1.c: 963: i = PMDATH;
 12464  1DDB  0814               	movf	20,w	;volatile
 12465  1DDC  0020               	movlb	0	; select bank0
 12466  1DDD  00A0               	movwf	??_Flash_Memory_Read
 12467  1DDE  0820               	movf	??_Flash_Memory_Read,w
 12468  1DDF  00A1               	movwf	Flash_Memory_Read@i
 12469                           
 12470                           ;MCU_B1.c: 964: ret = PMDATL;
 12471  1DE0  0023               	movlb	3	; select bank3
 12472  1DE1  0813               	movf	19,w	;volatile
 12473  1DE2  0020               	movlb	0	; select bank0
 12474  1DE3  00A0               	movwf	??_Flash_Memory_Read
 12475  1DE4  0820               	movf	??_Flash_Memory_Read,w
 12476  1DE5  00A3               	movwf	Flash_Memory_Read@ret
 12477                           
 12478                           ;MCU_B1.c: 965: return ret;
 12479  1DE6  0823               	movf	Flash_Memory_Read@ret,w
 12480  1DE7  0008               	return
 12481  1DE8                     __end_of_Flash_Memory_Read:	
 12482                           
 12483                           	psect	text73
 12484  1191                     __ptext73:	
 12485 ;; *************** function _DimmerLights_Main *****************
 12486 ;; Defined at:
 12487 ;;		line 393 in file "../src/Dimmer_B1.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;		None
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;		None
 12492 ;; Return value:  Size  Location     Type
 12493 ;;		None               void
 12494 ;; Registers used:
 12495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12496 ;; Tracked objects:
 12497 ;;		On entry : 0/0
 12498 ;;		On exit  : 0/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;Total ram usage:        4 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; Hardware stack levels required when called:   10
 12508 ;; This function calls:
 12509 ;;		_getLoad_OK
 12510 ;;		_getMain_All_Error_Status
 12511 ;;		_getMain_LightsStatus
 12512 ;;		_setDimmerLights_Main
 12513 ;; This function is called by:
 12514 ;;		_main
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function _DimmerLights_Main
 12520  1191                     _DimmerLights_Main:	
 12521                           
 12522                           ;Dimmer_B1.c: 395: if (getMain_All_Error_Status(0) == 0) {
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12526  1191  3000               	movlw	0
 12527  1192  3191  215E  3191   	fcall	_getMain_All_Error_Status
 12528  1195  3800               	iorlw	0
 12529  1196  1D03               	skipz
 12530  1197  29BB               	goto	l779
 12531                           
 12532                           ;Dimmer_B1.c: 396: if (Dimmer.LoadOK == 1) {
 12533  1198  0022               	movlb	2	; select bank2
 12534  1199  1CA0               	btfss	_Dimmer^(0+256),1
 12535  119A  29BD               	goto	l7927
 12536                           
 12537                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12538  119B  319A  22F5  3191   	fcall	_getLoad_OK
 12539  119E  3A01               	xorlw	1
 12540  119F  1903               	skipnz
 12541  11A0  29B2               	goto	l7923
 12542  11A1  3190  20D0  3191   	fcall	_getMain_LightsStatus
 12543  11A4  3A00               	xorlw	0
 12544  11A5  1903               	skipnz
 12545  11A6  29B2               	goto	l7923
 12546  11A7  0022               	movlb	2	; select bank2
 12547  11A8  0C20               	rrf	_Dimmer^(0+256),w
 12548  11A9  3901               	andlw	1
 12549  11AA  0020               	movlb	0	; select bank0
 12550  11AB  00E7               	movwf	??_DimmerLights_Main
 12551  11AC  01E8               	clrf	??_DimmerLights_Main+1
 12552  11AD  0867               	movf	??_DimmerLights_Main,w
 12553  11AE  00E9               	movwf	_DimmerLights_Main$2507
 12554  11AF  0868               	movf	??_DimmerLights_Main+1,w
 12555  11B0  00EA               	movwf	_DimmerLights_Main$2507+1
 12556  11B1  29B5               	goto	l7925
 12557  11B2                     l7923:	
 12558  11B2  0020               	movlb	0	; select bank0
 12559  11B3  01E9               	clrf	_DimmerLights_Main$2507
 12560  11B4  01EA               	clrf	_DimmerLights_Main$2507+1
 12561  11B5                     l7925:	
 12562  11B5  0869               	movf	_DimmerLights_Main$2507,w
 12563  11B6  0022               	movlb	2	; select bank2
 12564  11B7  10A0               	bcf	_Dimmer^(0+256),1
 12565  11B8  1D03               	skipz
 12566  11B9  14A0               	bsf	_Dimmer^(0+256),1
 12567                           
 12568                           ;Dimmer_B1.c: 398: }
 12569                           ;Dimmer_B1.c: 399: } else {
 12570  11BA  29BD               	goto	l7927
 12571  11BB                     l779:	
 12572                           
 12573                           ;Dimmer_B1.c: 400: Dimmer.LoadOK = 0;
 12574  11BB  0022               	movlb	2	; select bank2
 12575  11BC  10A0               	bcf	_Dimmer^(0+256),1
 12576  11BD                     l7927:	
 12577                           
 12578                           ;Dimmer_B1.c: 401: }
 12579                           ;Dimmer_B1.c: 405: setDimmerLights_Main(1);
 12580  11BD  3001               	movlw	1
 12581  11BE  3196  2695  3191   	fcall	_setDimmerLights_Main
 12582                           
 12583                           ;Dimmer_B1.c: 409: setDimmerLights_Main(2);
 12584  11C1  3002               	movlw	2
 12585  11C2  3196  2695         	fcall	_setDimmerLights_Main
 12586  11C4  0008               	return
 12587  11C5                     __end_of_DimmerLights_Main:	
 12588                           
 12589                           	psect	text74
 12590  1695                     __ptext74:	
 12591 ;; *************** function _setDimmerLights_Main *****************
 12592 ;; Defined at:
 12593 ;;		line 419 in file "../src/Dimmer_B1.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;  lights          1    wreg     unsigned char 
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;  lights          1   70[BANK0 ] unsigned char 
 12598 ;; Return value:  Size  Location     Type
 12599 ;;		None               void
 12600 ;; Registers used:
 12601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12602 ;; Tracked objects:
 12603 ;;		On entry : 0/0
 12604 ;;		On exit  : 0/0
 12605 ;;		Unchanged: 0/0
 12606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;Total ram usage:        1 bytes
 12612 ;; Hardware stack levels used:    1
 12613 ;; Hardware stack levels required when called:    9
 12614 ;; This function calls:
 12615 ;;		_DimmerLightsPointSelect
 12616 ;;		_setBuz
 12617 ;;		_setDimmerLights
 12618 ;;		_setDimmerLights_Adj
 12619 ;; This function is called by:
 12620 ;;		_DimmerLights_Main
 12621 ;; This function uses a non-reentrant model
 12622 ;;
 12623                           
 12624                           
 12625                           ;psect for function _setDimmerLights_Main
 12626  1695                     _setDimmerLights_Main:	
 12627                           
 12628                           ;incstack = 0
 12629                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12630                           ;setDimmerLights_Main@lights stored from wreg
 12631  1695  0020               	movlb	0	; select bank0
 12632  1696  00E6               	movwf	setDimmerLights_Main@lights
 12633                           
 12634                           ;Dimmer_B1.c: 420: DimmerLightsPointSelect(lights);
 12635  1697  0866               	movf	setDimmerLights_Main@lights,w
 12636  1698  319C  248F  3196   	fcall	_DimmerLightsPointSelect
 12637                           
 12638                           ;Dimmer_B1.c: 421: if (DimmerLights->Trigger == 1) {
 12639  169B  0020               	movlb	0	; select bank0
 12640  169C  086F               	movf	_DimmerLights,w
 12641  169D  3E08               	addlw	8
 12642  169E  0086               	movwf	6
 12643  169F  3001               	movlw	1	; select bank2/3
 12644  16A0  0087               	movwf	7
 12645  16A1  1D01               	btfss	1,2
 12646  16A2  2EC0               	goto	l7381
 12647                           
 12648                           ;Dimmer_B1.c: 423: if (Dimmer.LoadOK == 0) {
 12649  16A3  0022               	movlb	2	; select bank2
 12650  16A4  18A0               	btfsc	_Dimmer^(0+256),1
 12651  16A5  0008               	return
 12652                           
 12653                           ;Dimmer_B1.c: 424: DimmerLights->Trigger = 0;
 12654  16A6  0020               	movlb	0	; select bank0
 12655  16A7  086F               	movf	_DimmerLights,w
 12656  16A8  3E08               	addlw	8
 12657  16A9  0086               	movwf	6
 12658  16AA  3001               	movlw	1	; select bank2/3
 12659  16AB  0087               	movwf	7
 12660  16AC  1101               	bcf	1,2
 12661                           
 12662                           ;Dimmer_B1.c: 426: if (DimmerLights->Switch == 1) {
 12663  16AD  086F               	movf	_DimmerLights,w
 12664  16AE  3E08               	addlw	8
 12665  16AF  0086               	movwf	6
 12666  16B0  3001               	movlw	1	; select bank2/3
 12667  16B1  0087               	movwf	7
 12668  16B2  1C81               	btfss	1,1
 12669  16B3  2EBA               	goto	l7379
 12670                           
 12671                           ;Dimmer_B1.c: 427: setDimmerLights(lights, 1);
 12672  16B4  01E2               	clrf	setDimmerLights@status
 12673  16B5  0AE2               	incf	setDimmerLights@status,f
 12674  16B6  0866               	movf	setDimmerLights_Main@lights,w
 12675  16B7  318C  24E5         	fcall	_setDimmerLights
 12676                           
 12677                           ;Dimmer_B1.c: 428: } else {
 12678  16B9  0008               	return
 12679  16BA                     l7379:	
 12680                           
 12681                           ;Dimmer_B1.c: 429: setDimmerLights(lights, 0);
 12682  16BA  0020               	movlb	0	; select bank0
 12683  16BB  01E2               	clrf	setDimmerLights@status
 12684  16BC  0866               	movf	setDimmerLights_Main@lights,w
 12685  16BD  318C  24E5         	fcall	_setDimmerLights
 12686                           
 12687                           ;Dimmer_B1.c: 430: }
 12688                           ;Dimmer_B1.c: 431: }
 12689                           ;Dimmer_B1.c: 432: } else {
 12690  16BF  0008               	return
 12691  16C0                     l7381:	
 12692                           
 12693                           ;Dimmer_B1.c: 433: if (DimmerLights->TriggerAdj == 1) {
 12694  16C0  0020               	movlb	0	; select bank0
 12695  16C1  086F               	movf	_DimmerLights,w
 12696  16C2  3E08               	addlw	8
 12697  16C3  0086               	movwf	6
 12698  16C4  3001               	movlw	1	; select bank2/3
 12699  16C5  0087               	movwf	7
 12700  16C6  1E01               	btfss	1,4
 12701  16C7  0008               	return
 12702                           
 12703                           ;Dimmer_B1.c: 434: if (Dimmer.LoadOK == 0) {
 12704  16C8  0022               	movlb	2	; select bank2
 12705  16C9  18A0               	btfsc	_Dimmer^(0+256),1
 12706  16CA  0008               	return
 12707                           
 12708                           ;Dimmer_B1.c: 435: DimmerLights->TriggerAdj = 0;
 12709  16CB  0020               	movlb	0	; select bank0
 12710  16CC  086F               	movf	_DimmerLights,w
 12711  16CD  3E08               	addlw	8
 12712  16CE  0086               	movwf	6
 12713  16CF  3001               	movlw	1	; select bank2/3
 12714  16D0  0087               	movwf	7
 12715  16D1  1201               	bcf	1,4
 12716                           
 12717                           ;Dimmer_B1.c: 436: if (DimmerLights->AdjGo == 1) {
 12718  16D2  086F               	movf	_DimmerLights,w
 12719  16D3  3E08               	addlw	8
 12720  16D4  0086               	movwf	6
 12721  16D5  3001               	movlw	1	; select bank2/3
 12722  16D6  0087               	movwf	7
 12723  16D7  1D81               	btfss	1,3
 12724  16D8  2EE8               	goto	l7391
 12725                           
 12726                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 1);
 12727  16D9  01E2               	clrf	setDimmerLights_Adj@status
 12728  16DA  0AE2               	incf	setDimmerLights_Adj@status,f
 12729  16DB  0866               	movf	setDimmerLights_Main@lights,w
 12730  16DC  318A  22A0  3196   	fcall	_setDimmerLights_Adj
 12731                           
 12732                           ;Dimmer_B1.c: 438: setBuz(1, 100);
 12733  16DF  3064               	movlw	100
 12734  16E0  0020               	movlb	0	; select bank0
 12735  16E1  00A9               	movwf	setBuz@time
 12736  16E2  3000               	movlw	0
 12737  16E3  00AA               	movwf	setBuz@time+1
 12738  16E4  3001               	movlw	1
 12739  16E5  3196  263C         	fcall	_setBuz
 12740                           
 12741                           ;Dimmer_B1.c: 439: } else {
 12742  16E7  0008               	return
 12743  16E8                     l7391:	
 12744                           
 12745                           ;Dimmer_B1.c: 440: setDimmerLights_Adj(lights, 0);
 12746  16E8  0020               	movlb	0	; select bank0
 12747  16E9  01E2               	clrf	setDimmerLights_Adj@status
 12748  16EA  0866               	movf	setDimmerLights_Main@lights,w
 12749  16EB  318A  22A0         	fcall	_setDimmerLights_Adj
 12750  16ED  0008               	return
 12751  16EE                     __end_of_setDimmerLights_Main:	
 12752                           
 12753                           	psect	text75
 12754  0AA0                     __ptext75:	
 12755 ;; *************** function _setDimmerLights_Adj *****************
 12756 ;; Defined at:
 12757 ;;		line 719 in file "../src/Dimmer_B1.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;  lights          1    wreg     unsigned char 
 12760 ;;  status          1   66[BANK0 ] unsigned char 
 12761 ;; Auto vars:     Size  Location     Type
 12762 ;;  lights          1   69[BANK0 ] unsigned char 
 12763 ;; Return value:  Size  Location     Type
 12764 ;;		None               void
 12765 ;; Registers used:
 12766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : 0/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12772 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12776 ;;Total ram usage:        4 bytes
 12777 ;; Hardware stack levels used:    1
 12778 ;; Hardware stack levels required when called:    8
 12779 ;; This function calls:
 12780 ;;		_DimmerLightsPointSelect
 12781 ;;		_getMain_All_Error_Status
 12782 ;;		_setPercentValue
 12783 ;;		_setRF_DimmerLights
 12784 ;;		_setTxData
 12785 ;; This function is called by:
 12786 ;;		_setDimmerLights_Main
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           
 12791                           ;psect for function _setDimmerLights_Adj
 12792  0AA0                     _setDimmerLights_Adj:	
 12793                           
 12794                           ;incstack = 0
 12795                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12796                           ;setDimmerLights_Adj@lights stored from wreg
 12797  0AA0  0020               	movlb	0	; select bank0
 12798  0AA1  00E5               	movwf	setDimmerLights_Adj@lights
 12799                           
 12800                           ;Dimmer_B1.c: 720: DimmerLightsPointSelect(lights);
 12801  0AA2  0865               	movf	setDimmerLights_Adj@lights,w
 12802  0AA3  319C  248F  318A   	fcall	_DimmerLightsPointSelect
 12803                           
 12804                           ;Dimmer_B1.c: 721: if (status == 1) {
 12805  0AA6  0020               	movlb	0	; select bank0
 12806  0AA7  0862               	movf	setDimmerLights_Adj@status,w
 12807  0AA8  3A01               	xorlw	1
 12808  0AA9  1D03               	skipz
 12809  0AAA  2AB6               	goto	l6945
 12810                           
 12811                           ;Dimmer_B1.c: 722: DimmerLights->AdjFlag = 1;
 12812  0AAB  086F               	movf	_DimmerLights,w
 12813  0AAC  0086               	movwf	6
 12814  0AAD  3001               	movlw	1	; select bank2/3
 12815  0AAE  0087               	movwf	7
 12816  0AAF  1581               	bsf	1,3
 12817                           
 12818                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 1;
 12819  0AB0  086F               	movf	_DimmerLights,w
 12820  0AB1  0086               	movwf	6
 12821  0AB2  3001               	movlw	1	; select bank2/3
 12822  0AB3  0087               	movwf	7
 12823  0AB4  1481               	bsf	1,1
 12824                           
 12825                           ;Dimmer_B1.c: 724: } else {
 12826  0AB5  0008               	return
 12827  0AB6                     l6945:	
 12828                           
 12829                           ;Dimmer_B1.c: 725: if (DimmerLights->AdjFlag == 1) {
 12830  0AB6  086F               	movf	_DimmerLights,w
 12831  0AB7  0086               	movwf	6
 12832  0AB8  3001               	movlw	1	; select bank2/3
 12833  0AB9  0087               	movwf	7
 12834  0ABA  1D81               	btfss	1,3
 12835  0ABB  0008               	return
 12836                           
 12837                           ;Dimmer_B1.c: 726: DimmerLights->Signal = 0;
 12838  0ABC  086F               	movf	_DimmerLights,w
 12839  0ABD  0086               	movwf	6
 12840  0ABE  3001               	movlw	1	; select bank2/3
 12841  0ABF  0087               	movwf	7
 12842  0AC0  1081               	bcf	1,1
 12843                           
 12844                           ;Dimmer_B1.c: 727: DimmerLights->AdjFlag = 0;
 12845  0AC1  086F               	movf	_DimmerLights,w
 12846  0AC2  0086               	movwf	6
 12847  0AC3  3001               	movlw	1	; select bank2/3
 12848  0AC4  0087               	movwf	7
 12849  0AC5  1181               	bcf	1,3
 12850                           
 12851                           ;Dimmer_B1.c: 728: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12852  0AC6  086F               	movf	_DimmerLights,w
 12853  0AC7  3E04               	addlw	4
 12854  0AC8  0086               	movwf	6
 12855  0AC9  3001               	movlw	1	; select bank2/3
 12856  0ACA  0087               	movwf	7
 12857  0ACB  0801               	movf	1,w
 12858  0ACC  00E3               	movwf	??_setDimmerLights_Adj
 12859  0ACD  086F               	movf	_DimmerLights,w
 12860  0ACE  3E05               	addlw	5
 12861  0ACF  0086               	movwf	6
 12862  0AD0  3001               	movlw	1	; select bank2/3
 12863  0AD1  0087               	movwf	7
 12864  0AD2  0863               	movf	??_setDimmerLights_Adj,w
 12865  0AD3  0081               	movwf	1
 12866                           
 12867                           ;Dimmer_B1.c: 729: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12868  0AD4  086F               	movf	_DimmerLights,w
 12869  0AD5  3E04               	addlw	4
 12870  0AD6  0086               	movwf	6
 12871  0AD7  3001               	movlw	1	; select bank2/3
 12872  0AD8  0087               	movwf	7
 12873  0AD9  0801               	movf	1,w
 12874  0ADA  3189  21D6  318A   	fcall	_setPercentValue
 12875  0ADD  0020               	movlb	0	; select bank0
 12876  0ADE  00E3               	movwf	??_setDimmerLights_Adj
 12877  0ADF  0865               	movf	setDimmerLights_Adj@lights,w
 12878  0AE0  3E14               	addlw	20
 12879  0AE1  076E               	addwf	_product,w
 12880  0AE2  00E4               	movwf	??_setDimmerLights_Adj+1
 12881  0AE3  0864               	movf	??_setDimmerLights_Adj+1,w
 12882  0AE4  0086               	movwf	6
 12883  0AE5  3002               	movlw	2	; select bank4/5
 12884  0AE6  0087               	movwf	7
 12885  0AE7  0863               	movf	??_setDimmerLights_Adj,w
 12886  0AE8  0081               	movwf	1
 12887                           
 12888                           ;Dimmer_B1.c: 739: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12889  0AE9  3000               	movlw	0
 12890  0AEA  3191  215E  318A   	fcall	_getMain_All_Error_Status
 12891  0AED  3A00               	xorlw	0
 12892  0AEE  3000               	movlw	0
 12893  0AEF  1903               	skipnz
 12894  0AF0  3001               	movlw	1
 12895  0AF1  0020               	movlb	0	; select bank0
 12896  0AF2  00E3               	movwf	??_setDimmerLights_Adj
 12897  0AF3  0DE3               	rlf	??_setDimmerLights_Adj,f
 12898  0AF4  0022               	movlb	2	; select bank2
 12899  0AF5  0820               	movf	_Dimmer^(0+256),w
 12900  0AF6  0020               	movlb	0	; select bank0
 12901  0AF7  0663               	xorwf	??_setDimmerLights_Adj,w
 12902  0AF8  39FD               	andlw	-3
 12903  0AF9  0663               	xorwf	??_setDimmerLights_Adj,w
 12904  0AFA  0022               	movlb	2	; select bank2
 12905  0AFB  00A0               	movwf	_Dimmer^(0+256)
 12906                           
 12907                           ;Dimmer_B1.c: 742: setRF_DimmerLights(lights, 1);
 12908  0AFC  0020               	movlb	0	; select bank0
 12909  0AFD  01A0               	clrf	setRF_DimmerLights@on
 12910  0AFE  0AA0               	incf	setRF_DimmerLights@on,f
 12911  0AFF  0865               	movf	setDimmerLights_Adj@lights,w
 12912  0B00  3197  2748  318A   	fcall	_setRF_DimmerLights
 12913                           
 12914                           ;Dimmer_B1.c: 743: setTxData();
 12915  0B03  3187  2723         	fcall	_setTxData
 12916  0B05  0008               	return
 12917  0B06                     __end_of_setDimmerLights_Adj:	
 12918                           
 12919                           	psect	text76
 12920  0CE5                     __ptext76:	
 12921 ;; *************** function _setDimmerLights *****************
 12922 ;; Defined at:
 12923 ;;		line 614 in file "../src/Dimmer_B1.c"
 12924 ;; Parameters:    Size  Location     Type
 12925 ;;  lights          1    wreg     unsigned char 
 12926 ;;  status          1   66[BANK0 ] unsigned char 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  lights          1   69[BANK0 ] unsigned char 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;		None               void
 12931 ;; Registers used:
 12932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12938 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;Total ram usage:        4 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    8
 12945 ;; This function calls:
 12946 ;;		_DimmerLightsPointSelect
 12947 ;;		_getMain_All_Error_Status
 12948 ;;		_setDimmerLights_Line
 12949 ;;		_setLED
 12950 ;;		_setPercentValue
 12951 ;;		_setRF_DimmerLights
 12952 ;;		_setTxData
 12953 ;; This function is called by:
 12954 ;;		_setDimmerLights_Main
 12955 ;; This function uses a non-reentrant model
 12956 ;;
 12957                           
 12958                           
 12959                           ;psect for function _setDimmerLights
 12960  0CE5                     _setDimmerLights:	
 12961                           
 12962                           ;incstack = 0
 12963                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12964                           ;setDimmerLights@lights stored from wreg
 12965  0CE5  0020               	movlb	0	; select bank0
 12966  0CE6  00E5               	movwf	setDimmerLights@lights
 12967                           
 12968                           ;Dimmer_B1.c: 615: DimmerLightsPointSelect(lights);
 12969  0CE7  0865               	movf	setDimmerLights@lights,w
 12970  0CE8  319C  248F  318C   	fcall	_DimmerLightsPointSelect
 12971                           
 12972                           ;Dimmer_B1.c: 618: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12973  0CEB  3000               	movlw	0
 12974  0CEC  3191  215E  318C   	fcall	_getMain_All_Error_Status
 12975  0CEF  3A00               	xorlw	0
 12976  0CF0  3000               	movlw	0
 12977  0CF1  1903               	skipnz
 12978  0CF2  3001               	movlw	1
 12979  0CF3  0020               	movlb	0	; select bank0
 12980  0CF4  00E3               	movwf	??_setDimmerLights
 12981  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12982  0CF6  0022               	movlb	2	; select bank2
 12983  0CF7  0820               	movf	_Dimmer^(0+256),w
 12984  0CF8  0020               	movlb	0	; select bank0
 12985  0CF9  0663               	xorwf	??_setDimmerLights,w
 12986  0CFA  39FD               	andlw	-3
 12987  0CFB  0663               	xorwf	??_setDimmerLights,w
 12988  0CFC  0022               	movlb	2	; select bank2
 12989  0CFD  00A0               	movwf	_Dimmer^(0+256)
 12990                           
 12991                           ;Dimmer_B1.c: 622: if (status == 1) {
 12992  0CFE  0020               	movlb	0	; select bank0
 12993  0CFF  0862               	movf	setDimmerLights@status,w
 12994  0D00  3A01               	xorlw	1
 12995  0D01  1D03               	skipz
 12996  0D02  2D33               	goto	l6925
 12997                           
 12998                           ;Dimmer_B1.c: 623: DimmerLights->Loop = 1;
 12999  0D03  086F               	movf	_DimmerLights,w
 13000  0D04  3E09               	addlw	9
 13001  0D05  0086               	movwf	6
 13002  0D06  3001               	movlw	1	; select bank2/3
 13003  0D07  0087               	movwf	7
 13004  0D08  1481               	bsf	1,1
 13005                           
 13006                           ;Dimmer_B1.c: 624: setLED(lights, 0);
 13007  0D09  01A2               	clrf	setLED@command
 13008  0D0A  0865               	movf	setDimmerLights@lights,w
 13009  0D0B  3195  2594  318C   	fcall	_setLED
 13010                           
 13011                           ;Dimmer_B1.c: 626: setDimmerLights_Line(lights);
 13012  0D0E  0020               	movlb	0	; select bank0
 13013  0D0F  0865               	movf	setDimmerLights@lights,w
 13014  0D10  319D  2541  318C   	fcall	_setDimmerLights_Line
 13015                           
 13016                           ;Dimmer_B1.c: 627: DimmerLights->StatusFlag = 1;
 13017  0D13  0020               	movlb	0	; select bank0
 13018  0D14  086F               	movf	_DimmerLights,w
 13019  0D15  0086               	movwf	6
 13020  0D16  3001               	movlw	1	; select bank2/3
 13021  0D17  0087               	movwf	7
 13022  0D18  1701               	bsf	1,6
 13023                           
 13024                           ;Dimmer_B1.c: 634: DimmerLights->DimmingValue = ((char)(80*0.8));
 13025  0D19  3040               	movlw	64
 13026  0D1A  00E3               	movwf	??_setDimmerLights
 13027  0D1B  086F               	movf	_DimmerLights,w
 13028  0D1C  3E04               	addlw	4
 13029  0D1D  0086               	movwf	6
 13030  0D1E  3001               	movlw	1	; select bank2/3
 13031  0D1F  0087               	movwf	7
 13032  0D20  0863               	movf	??_setDimmerLights,w
 13033  0D21  0081               	movwf	1
 13034                           
 13035                           ;Dimmer_B1.c: 635: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 13036  0D22  3040               	movlw	64
 13037  0D23  3189  21D6  318C   	fcall	_setPercentValue
 13038  0D26  0020               	movlb	0	; select bank0
 13039  0D27  00E3               	movwf	??_setDimmerLights
 13040  0D28  0865               	movf	setDimmerLights@lights,w
 13041  0D29  3E14               	addlw	20
 13042  0D2A  076E               	addwf	_product,w
 13043  0D2B  00E4               	movwf	??_setDimmerLights+1
 13044  0D2C  0864               	movf	??_setDimmerLights+1,w
 13045  0D2D  0086               	movwf	6
 13046  0D2E  3002               	movlw	2	; select bank4/5
 13047  0D2F  0087               	movwf	7
 13048  0D30  0863               	movf	??_setDimmerLights,w
 13049  0D31  0081               	movwf	1
 13050  0D32  2D5A               	goto	l6937
 13051  0D33                     l6925:	
 13052                           ;Dimmer_B1.c: 645: } else {
 13053                           
 13054                           ;Dimmer_B1.c: 643: DimmerLights->DimmingTimeValue = 7;
 13055                           
 13056                           
 13057                           ;Dimmer_B1.c: 646: DimmerLights->StatusFlag = 0;
 13058  0D33  086F               	movf	_DimmerLights,w
 13059  0D34  0086               	movwf	6
 13060  0D35  3001               	movlw	1	; select bank2/3
 13061  0D36  0087               	movwf	7
 13062  0D37  1301               	bcf	1,6
 13063                           
 13064                           ;Dimmer_B1.c: 647: DimmerLights->Loop = 0;
 13065  0D38  086F               	movf	_DimmerLights,w
 13066  0D39  3E09               	addlw	9
 13067  0D3A  0086               	movwf	6
 13068  0D3B  3001               	movlw	1	; select bank2/3
 13069  0D3C  0087               	movwf	7
 13070  0D3D  1081               	bcf	1,1
 13071                           
 13072                           ;Dimmer_B1.c: 648: setLED(lights, 1);
 13073  0D3E  01A2               	clrf	setLED@command
 13074  0D3F  0AA2               	incf	setLED@command,f
 13075  0D40  0865               	movf	setDimmerLights@lights,w
 13076  0D41  3195  2594  318C   	fcall	_setLED
 13077                           
 13078                           ;Dimmer_B1.c: 656: DimmerLights->MosfetClose = 1;
 13079  0D44  0020               	movlb	0	; select bank0
 13080  0D45  086F               	movf	_DimmerLights,w
 13081  0D46  3E08               	addlw	8
 13082  0D47  0086               	movwf	6
 13083  0D48  3001               	movlw	1	; select bank2/3
 13084  0D49  0087               	movwf	7
 13085  0D4A  1781               	bsf	1,7
 13086                           
 13087                           ;Dimmer_B1.c: 659: DimmerLights->AdjFlag = 0;
 13088  0D4B  086F               	movf	_DimmerLights,w
 13089  0D4C  0086               	movwf	6
 13090  0D4D  3001               	movlw	1	; select bank2/3
 13091  0D4E  0087               	movwf	7
 13092  0D4F  1181               	bcf	1,3
 13093                           
 13094                           ;Dimmer_B1.c: 660: DimmerLights->AdjStatus = 0;
 13095  0D50  086F               	movf	_DimmerLights,w
 13096  0D51  0086               	movwf	6
 13097  0D52  3001               	movlw	1	; select bank2/3
 13098  0D53  0087               	movwf	7
 13099  0D54  1201               	bcf	1,4
 13100                           
 13101                           ;Dimmer_B1.c: 661: DimmerLights->AdjRF = 0;
 13102  0D55  086F               	movf	_DimmerLights,w
 13103  0D56  0086               	movwf	6
 13104  0D57  3001               	movlw	1	; select bank2/3
 13105  0D58  0087               	movwf	7
 13106  0D59  1101               	bcf	1,2
 13107  0D5A                     l6937:	
 13108                           
 13109                           ;Dimmer_B1.c: 662: DimmerLights->DimmingTimeValue = 7;
 13110  0D5A  3007               	movlw	7
 13111  0D5B  00E3               	movwf	??_setDimmerLights
 13112  0D5C  086F               	movf	_DimmerLights,w
 13113  0D5D  3E02               	addlw	2
 13114  0D5E  0086               	movwf	6
 13115  0D5F  3001               	movlw	1	; select bank2/3
 13116  0D60  0087               	movwf	7
 13117  0D61  0863               	movf	??_setDimmerLights,w
 13118  0D62  0081               	movwf	1
 13119                           
 13120                           ;Dimmer_B1.c: 664: }
 13121                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, status);
 13122  0D63  0862               	movf	setDimmerLights@status,w
 13123  0D64  00E3               	movwf	??_setDimmerLights
 13124  0D65  0863               	movf	??_setDimmerLights,w
 13125  0D66  00A0               	movwf	setRF_DimmerLights@on
 13126  0D67  0865               	movf	setDimmerLights@lights,w
 13127  0D68  3197  2748  318C   	fcall	_setRF_DimmerLights
 13128                           
 13129                           ;Dimmer_B1.c: 666: setTxData();
 13130  0D6B  3187  2723         	fcall	_setTxData
 13131  0D6D  0008               	return
 13132  0D6E                     __end_of_setDimmerLights:	
 13133                           
 13134                           	psect	text77
 13135  0723                     __ptext77:	
 13136 ;; *************** function _setTxData *****************
 13137 ;; Defined at:
 13138 ;;		line 210 in file "../src/RF_Control_B1.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;		None
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;  i               1    0        unsigned char 
 13143 ;; Return value:  Size  Location     Type
 13144 ;;		None               void
 13145 ;; Registers used:
 13146 ;;		wreg, fsr1l, fsr1h
 13147 ;; Tracked objects:
 13148 ;;		On entry : 0/0
 13149 ;;		On exit  : 0/0
 13150 ;;		Unchanged: 0/0
 13151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;Total ram usage:        1 bytes
 13157 ;; Hardware stack levels used:    1
 13158 ;; Hardware stack levels required when called:    5
 13159 ;; This function calls:
 13160 ;;		Nothing
 13161 ;; This function is called by:
 13162 ;;		_setDimmerLights
 13163 ;;		_setDimmerLights_Adj
 13164 ;;		_getRxData
 13165 ;;		_setControl_Lights_Table
 13166 ;;		_setRFSW_Control
 13167 ;;		_setRFSW_AdjControl
 13168 ;; This function uses a non-reentrant model
 13169 ;;
 13170                           
 13171                           
 13172                           ;psect for function _setTxData
 13173  0723                     _setTxData:	
 13174                           
 13175                           ;RF_Control_B1.c: 211: char i;
 13176                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 13177                           
 13178                           ;incstack = 0
 13179                           ; Regs used in _setTxData: [wregfsr1]
 13180  0723  0021               	movlb	1	; select bank1
 13181  0724  1C3B               	btfss	_RF1^(0+128),0
 13182  0725  0008               	return
 13183                           
 13184                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 13185  0726  193B               	btfsc	_RF1^(0+128),2
 13186  0727  0008               	return
 13187                           
 13188                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 13189  0728  153B               	bsf	_RF1^(0+128),2
 13190                           
 13191                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 13192  0729  3014               	movlw	20
 13193  072A  00C2               	movwf	(_RF1^(0+128)+7)
 13194  072B  3000               	movlw	0
 13195  072C  00C3               	movwf	(_RF1^(0+128)+8)
 13196                           
 13197                           ;RF_Control_B1.c: 228: RF_Data[0] = 0x63;
 13198  072D  3063               	movlw	99
 13199  072E  0020               	movlb	0	; select bank0
 13200  072F  00A0               	movwf	??_setTxData
 13201  0730  0820               	movf	??_setTxData,w
 13202  0731  0023               	movlb	3	; select bank3
 13203  0732  00A0               	movwf	_RF_Data^(0+384)
 13204                           
 13205                           ;RF_Control_B1.c: 229: RF_Data[1] = 0x02;
 13206  0733  3002               	movlw	2
 13207  0734  0020               	movlb	0	; select bank0
 13208  0735  00A0               	movwf	??_setTxData
 13209  0736  0820               	movf	??_setTxData,w
 13210  0737  0023               	movlb	3	; select bank3
 13211  0738  00A1               	movwf	(_RF_Data^(0+384)+1)
 13212                           
 13213                           ;RF_Control_B1.c: 231: RF_Data[2] = product->Data[2];
 13214  0739  0020               	movlb	0	; select bank0
 13215  073A  086E               	movf	_product,w
 13216  073B  0086               	movwf	6
 13217  073C  3002               	movlw	2	; select bank4/5
 13218  073D  0087               	movwf	7
 13219  073E  3002               	movlw	2	; select bank4/5
 13220  073F  3F42               	moviw [2]fsr1
 13221  0740  0023               	movlb	3	; select bank3
 13222  0741  00A2               	movwf	(_RF_Data^(0+384)+2)
 13223                           
 13224                           ;RF_Control_B1.c: 232: RF_Data[3] = product->Data[3];
 13225  0742  0020               	movlb	0	; select bank0
 13226  0743  086E               	movf	_product,w
 13227  0744  0086               	movwf	6
 13228  0745  3002               	movlw	2	; select bank4/5
 13229  0746  0087               	movwf	7
 13230  0747  3002               	movlw	2	; select bank4/5
 13231  0748  3F43               	moviw [3]fsr1
 13232  0749  0023               	movlb	3	; select bank3
 13233  074A  00A3               	movwf	(_RF_Data^(0+384)+3)
 13234                           
 13235                           ;RF_Control_B1.c: 233: RF_Data[4] = product->Data[4];
 13236  074B  0020               	movlb	0	; select bank0
 13237  074C  086E               	movf	_product,w
 13238  074D  0086               	movwf	6
 13239  074E  3002               	movlw	2	; select bank4/5
 13240  074F  0087               	movwf	7
 13241  0750  3002               	movlw	2	; select bank4/5
 13242  0751  3F44               	moviw [4]fsr1
 13243  0752  0023               	movlb	3	; select bank3
 13244  0753  00A4               	movwf	(_RF_Data^(0+384)+4)
 13245                           
 13246                           ;RF_Control_B1.c: 234: RF_Data[5] = product->Data[5];
 13247  0754  0020               	movlb	0	; select bank0
 13248  0755  086E               	movf	_product,w
 13249  0756  0086               	movwf	6
 13250  0757  3002               	movlw	2	; select bank4/5
 13251  0758  0087               	movwf	7
 13252  0759  3002               	movlw	2	; select bank4/5
 13253  075A  3F45               	moviw [5]fsr1
 13254  075B  0023               	movlb	3	; select bank3
 13255  075C  00A5               	movwf	(_RF_Data^(0+384)+5)
 13256                           
 13257                           ;RF_Control_B1.c: 235: RF_Data[6] = product->Data[6];
 13258  075D  0020               	movlb	0	; select bank0
 13259  075E  086E               	movf	_product,w
 13260  075F  0086               	movwf	6
 13261  0760  3002               	movlw	2	; select bank4/5
 13262  0761  0087               	movwf	7
 13263  0762  3002               	movlw	2	; select bank4/5
 13264  0763  3F46               	moviw [6]fsr1
 13265  0764  0023               	movlb	3	; select bank3
 13266  0765  00A6               	movwf	(_RF_Data^(0+384)+6)
 13267                           
 13268                           ;RF_Control_B1.c: 236: RF_Data[7] = product->Data[7];
 13269  0766  0020               	movlb	0	; select bank0
 13270  0767  086E               	movf	_product,w
 13271  0768  0086               	movwf	6
 13272  0769  3002               	movlw	2	; select bank4/5
 13273  076A  0087               	movwf	7
 13274  076B  3002               	movlw	2	; select bank4/5
 13275  076C  3F47               	moviw [7]fsr1
 13276  076D  0023               	movlb	3	; select bank3
 13277  076E  00A7               	movwf	(_RF_Data^(0+384)+7)
 13278                           
 13279                           ;RF_Control_B1.c: 237: RF_Data[8] = product->Data[8];
 13280  076F  0020               	movlb	0	; select bank0
 13281  0770  086E               	movf	_product,w
 13282  0771  0086               	movwf	6
 13283  0772  3002               	movlw	2	; select bank4/5
 13284  0773  0087               	movwf	7
 13285  0774  3002               	movlw	2	; select bank4/5
 13286  0775  3F48               	moviw [8]fsr1
 13287  0776  0023               	movlb	3	; select bank3
 13288  0777  00A8               	movwf	(_RF_Data^(0+384)+8)
 13289                           
 13290                           ;RF_Control_B1.c: 238: RF_Data[9] = product->Data[9];
 13291  0778  0020               	movlb	0	; select bank0
 13292  0779  086E               	movf	_product,w
 13293  077A  0086               	movwf	6
 13294  077B  3002               	movlw	2	; select bank4/5
 13295  077C  0087               	movwf	7
 13296  077D  3002               	movlw	2	; select bank4/5
 13297  077E  3F49               	moviw [9]fsr1
 13298  077F  0023               	movlb	3	; select bank3
 13299  0780  00A9               	movwf	(_RF_Data^(0+384)+9)
 13300                           
 13301                           ;RF_Control_B1.c: 239: RF_Data[10] = product->Data[10];
 13302  0781  0020               	movlb	0	; select bank0
 13303  0782  086E               	movf	_product,w
 13304  0783  0086               	movwf	6
 13305  0784  3002               	movlw	2	; select bank4/5
 13306  0785  0087               	movwf	7
 13307  0786  3002               	movlw	2	; select bank4/5
 13308  0787  3F4A               	moviw [10]fsr1
 13309  0788  0023               	movlb	3	; select bank3
 13310  0789  00AA               	movwf	(_RF_Data^(0+384)+10)
 13311                           
 13312                           ;RF_Control_B1.c: 240: RF_Data[11] = product->Data[11];
 13313  078A  0020               	movlb	0	; select bank0
 13314  078B  086E               	movf	_product,w
 13315  078C  0086               	movwf	6
 13316  078D  3002               	movlw	2	; select bank4/5
 13317  078E  0087               	movwf	7
 13318  078F  3002               	movlw	2	; select bank4/5
 13319  0790  3F4B               	moviw [11]fsr1
 13320  0791  0023               	movlb	3	; select bank3
 13321  0792  00AB               	movwf	(_RF_Data^(0+384)+11)
 13322                           
 13323                           ;RF_Control_B1.c: 241: RF_Data[12] = product->Data[12];
 13324  0793  0020               	movlb	0	; select bank0
 13325  0794  086E               	movf	_product,w
 13326  0795  0086               	movwf	6
 13327  0796  3002               	movlw	2	; select bank4/5
 13328  0797  0087               	movwf	7
 13329  0798  3002               	movlw	2	; select bank4/5
 13330  0799  3F4C               	moviw [12]fsr1
 13331  079A  0023               	movlb	3	; select bank3
 13332  079B  00AC               	movwf	(_RF_Data^(0+384)+12)
 13333                           
 13334                           ;RF_Control_B1.c: 242: RF_Data[13] = product->Data[13];
 13335  079C  0020               	movlb	0	; select bank0
 13336  079D  086E               	movf	_product,w
 13337  079E  0086               	movwf	6
 13338  079F  3002               	movlw	2	; select bank4/5
 13339  07A0  0087               	movwf	7
 13340  07A1  3002               	movlw	2	; select bank4/5
 13341  07A2  3F4D               	moviw [13]fsr1
 13342  07A3  0023               	movlb	3	; select bank3
 13343  07A4  00AD               	movwf	(_RF_Data^(0+384)+13)
 13344                           
 13345                           ;RF_Control_B1.c: 243: RF_Data[14] = product->Data[14];
 13346  07A5  0020               	movlb	0	; select bank0
 13347  07A6  086E               	movf	_product,w
 13348  07A7  0086               	movwf	6
 13349  07A8  3002               	movlw	2	; select bank4/5
 13350  07A9  0087               	movwf	7
 13351  07AA  3002               	movlw	2	; select bank4/5
 13352  07AB  3F4E               	moviw [14]fsr1
 13353  07AC  0023               	movlb	3	; select bank3
 13354  07AD  00AE               	movwf	(_RF_Data^(0+384)+14)
 13355                           
 13356                           ;RF_Control_B1.c: 244: RF_Data[15] = product->Data[15];
 13357  07AE  0020               	movlb	0	; select bank0
 13358  07AF  086E               	movf	_product,w
 13359  07B0  0086               	movwf	6
 13360  07B1  3002               	movlw	2	; select bank4/5
 13361  07B2  0087               	movwf	7
 13362  07B3  3002               	movlw	2	; select bank4/5
 13363  07B4  3F4F               	moviw [15]fsr1
 13364  07B5  0023               	movlb	3	; select bank3
 13365  07B6  00AF               	movwf	(_RF_Data^(0+384)+15)
 13366                           
 13367                           ;RF_Control_B1.c: 245: RF_Data[16] = product->Data[16];
 13368  07B7  0020               	movlb	0	; select bank0
 13369  07B8  086E               	movf	_product,w
 13370  07B9  0086               	movwf	6
 13371  07BA  3002               	movlw	2	; select bank4/5
 13372  07BB  0087               	movwf	7
 13373  07BC  3002               	movlw	2	; select bank4/5
 13374  07BD  3F50               	moviw [16]fsr1
 13375  07BE  0023               	movlb	3	; select bank3
 13376  07BF  00B0               	movwf	(_RF_Data^(0+384)+16)
 13377                           
 13378                           ;RF_Control_B1.c: 246: RF_Data[17] = product->Data[17];
 13379  07C0  0020               	movlb	0	; select bank0
 13380  07C1  086E               	movf	_product,w
 13381  07C2  0086               	movwf	6
 13382  07C3  3002               	movlw	2	; select bank4/5
 13383  07C4  0087               	movwf	7
 13384  07C5  3002               	movlw	2	; select bank4/5
 13385  07C6  3F51               	moviw [17]fsr1
 13386  07C7  0023               	movlb	3	; select bank3
 13387  07C8  00B1               	movwf	(_RF_Data^(0+384)+17)
 13388                           
 13389                           ;RF_Control_B1.c: 247: RF_Data[18] = product->Data[18];
 13390  07C9  0020               	movlb	0	; select bank0
 13391  07CA  086E               	movf	_product,w
 13392  07CB  0086               	movwf	6
 13393  07CC  3002               	movlw	2	; select bank4/5
 13394  07CD  0087               	movwf	7
 13395  07CE  3002               	movlw	2	; select bank4/5
 13396  07CF  3F52               	moviw [18]fsr1
 13397  07D0  0023               	movlb	3	; select bank3
 13398  07D1  00B2               	movwf	(_RF_Data^(0+384)+18)
 13399                           
 13400                           ;RF_Control_B1.c: 248: RF_Data[19] = product->Data[19];
 13401  07D2  0020               	movlb	0	; select bank0
 13402  07D3  086E               	movf	_product,w
 13403  07D4  0086               	movwf	6
 13404  07D5  3002               	movlw	2	; select bank4/5
 13405  07D6  0087               	movwf	7
 13406  07D7  3002               	movlw	2	; select bank4/5
 13407  07D8  3F53               	moviw [19]fsr1
 13408  07D9  0023               	movlb	3	; select bank3
 13409  07DA  00B3               	movwf	(_RF_Data^(0+384)+19)
 13410                           
 13411                           ;RF_Control_B1.c: 249: RF_Data[20] = 210;
 13412  07DB  30D2               	movlw	210
 13413  07DC  0020               	movlb	0	; select bank0
 13414  07DD  00A0               	movwf	??_setTxData
 13415  07DE  0820               	movf	??_setTxData,w
 13416  07DF  0023               	movlb	3	; select bank3
 13417  07E0  00B4               	movwf	(_RF_Data^(0+384)+20)
 13418  07E1  0008               	return
 13419  07E2                     __end_of_setTxData:	
 13420                           
 13421                           	psect	text78
 13422  1748                     __ptext78:	
 13423 ;; *************** function _setRF_DimmerLights *****************
 13424 ;; Defined at:
 13425 ;;		line 487 in file "../src/RF_Control_B1.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;  lights          1    wreg     unsigned char 
 13428 ;;  on              1    0[BANK0 ] unsigned char 
 13429 ;; Auto vars:     Size  Location     Type
 13430 ;;  lights          1    4[BANK0 ] unsigned char 
 13431 ;;  status          1    3[BANK0 ] unsigned char 
 13432 ;; Return value:  Size  Location     Type
 13433 ;;		None               void
 13434 ;; Registers used:
 13435 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13436 ;; Tracked objects:
 13437 ;;		On entry : 0/0
 13438 ;;		On exit  : 0/0
 13439 ;;		Unchanged: 0/0
 13440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13441 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;Total ram usage:        5 bytes
 13446 ;; Hardware stack levels used:    1
 13447 ;; Hardware stack levels required when called:    5
 13448 ;; This function calls:
 13449 ;;		Nothing
 13450 ;; This function is called by:
 13451 ;;		_setDimmerLights
 13452 ;;		_setDimmerLights_Adj
 13453 ;;		_setRFSW_Control
 13454 ;; This function uses a non-reentrant model
 13455 ;;
 13456                           
 13457                           
 13458                           ;psect for function _setRF_DimmerLights
 13459  1748                     _setRF_DimmerLights:	
 13460                           
 13461                           ;incstack = 0
 13462                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13463                           ;setRF_DimmerLights@lights stored from wreg
 13464  1748  0020               	movlb	0	; select bank0
 13465  1749  00A4               	movwf	setRF_DimmerLights@lights
 13466                           
 13467                           ;RF_Control_B1.c: 488: char status = 1;
 13468  174A  01A3               	clrf	setRF_DimmerLights@status
 13469  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13470                           
 13471                           ;RF_Control_B1.c: 489: status <<= (lights - 1);
 13472  174C  0824               	movf	setRF_DimmerLights@lights,w
 13473  174D  3EFF               	addlw	-1
 13474  174E  0A89               	incf	9,f
 13475  174F  2F52               	goto	u5290
 13476  1750                     u5295:	
 13477  1750  1003               	clrc
 13478  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13479  1752                     u5290:	
 13480  1752  3EFF               	addlw	-1
 13481  1753  1D03               	skipz
 13482  1754  2F50               	goto	u5295
 13483                           
 13484                           ;RF_Control_B1.c: 490: product->Data[11]=lights;
 13485  1755  0824               	movf	setRF_DimmerLights@lights,w
 13486  1756  00A1               	movwf	??_setRF_DimmerLights
 13487  1757  086E               	movf	_product,w
 13488  1758  3E0B               	addlw	11
 13489  1759  0086               	movwf	6
 13490  175A  3002               	movlw	2	; select bank4/5
 13491  175B  0087               	movwf	7
 13492  175C  0821               	movf	??_setRF_DimmerLights,w
 13493  175D  0081               	movwf	1
 13494                           
 13495                           ;RF_Control_B1.c: 498: product->Data[9]=product->Data[20 + lights];
 13496  175E  0824               	movf	setRF_DimmerLights@lights,w
 13497  175F  3E14               	addlw	20
 13498  1760  076E               	addwf	_product,w
 13499  1761  00A1               	movwf	??_setRF_DimmerLights
 13500  1762  0821               	movf	??_setRF_DimmerLights,w
 13501  1763  0086               	movwf	6
 13502  1764  3002               	movlw	2	; select bank4/5
 13503  1765  0087               	movwf	7
 13504  1766  0801               	movf	1,w
 13505  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13506  1768  086E               	movf	_product,w
 13507  1769  3E09               	addlw	9
 13508  176A  0086               	movwf	6
 13509  176B  3002               	movlw	2	; select bank4/5
 13510  176C  0087               	movwf	7
 13511  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13512  176E  0081               	movwf	1
 13513                           
 13514                           ;RF_Control_B1.c: 499: product->Data[17]=product->Data[26 + lights];
 13515  176F  0824               	movf	setRF_DimmerLights@lights,w
 13516  1770  3E1A               	addlw	26
 13517  1771  076E               	addwf	_product,w
 13518  1772  00A1               	movwf	??_setRF_DimmerLights
 13519  1773  0821               	movf	??_setRF_DimmerLights,w
 13520  1774  0086               	movwf	6
 13521  1775  3002               	movlw	2	; select bank4/5
 13522  1776  0087               	movwf	7
 13523  1777  0801               	movf	1,w
 13524  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13525  1779  086E               	movf	_product,w
 13526  177A  3E11               	addlw	17
 13527  177B  0086               	movwf	6
 13528  177C  3002               	movlw	2	; select bank4/5
 13529  177D  0087               	movwf	7
 13530  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13531  177F  0081               	movwf	1
 13532                           
 13533                           ;RF_Control_B1.c: 500: if (on == 1) {
 13534  1780  0820               	movf	setRF_DimmerLights@on,w
 13535  1781  3A01               	xorlw	1
 13536  1782  1D03               	skipz
 13537  1783  2F94               	goto	l6353
 13538                           
 13539                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15] | status);
 13540  1784  086E               	movf	_product,w
 13541  1785  3E0F               	addlw	15
 13542  1786  0086               	movwf	6
 13543  1787  3002               	movlw	2	; select bank4/5
 13544  1788  0087               	movwf	7
 13545  1789  0801               	movf	1,w
 13546  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13547  178B  00A1               	movwf	??_setRF_DimmerLights
 13548  178C  086E               	movf	_product,w
 13549  178D  3E0F               	addlw	15
 13550  178E  0086               	movwf	6
 13551  178F  3002               	movlw	2	; select bank4/5
 13552  1790  0087               	movwf	7
 13553  1791  0821               	movf	??_setRF_DimmerLights,w
 13554  1792  0081               	movwf	1
 13555                           
 13556                           ;RF_Control_B1.c: 502: } else {
 13557  1793  0008               	return
 13558  1794                     l6353:	
 13559                           
 13560                           ;RF_Control_B1.c: 503: product->Data[15]=(product->Data[15]&(~status));
 13561  1794  086E               	movf	_product,w
 13562  1795  3E0F               	addlw	15
 13563  1796  0086               	movwf	6
 13564  1797  3002               	movlw	2	; select bank4/5
 13565  1798  0087               	movwf	7
 13566  1799  0923               	comf	setRF_DimmerLights@status,w
 13567  179A  0501               	andwf	1,w
 13568  179B  00A1               	movwf	??_setRF_DimmerLights
 13569  179C  086E               	movf	_product,w
 13570  179D  3E0F               	addlw	15
 13571  179E  0086               	movwf	6
 13572  179F  3002               	movlw	2	; select bank4/5
 13573  17A0  0087               	movwf	7
 13574  17A1  0821               	movf	??_setRF_DimmerLights,w
 13575  17A2  0081               	movwf	1
 13576  17A3  0008               	return
 13577  17A4                     __end_of_setRF_DimmerLights:	
 13578                           
 13579                           	psect	text79
 13580  09D6                     __ptext79:	
 13581 ;; *************** function _setPercentValue *****************
 13582 ;; Defined at:
 13583 ;;		line 877 in file "../src/Dimmer_B1.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;  value           1    wreg     unsigned char 
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;  value           1   62[BANK0 ] unsigned char 
 13588 ;;  i               3   63[BANK0 ] float 
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      unsigned char 
 13591 ;; Registers used:
 13592 ;;		wreg, status,2, status,0, pclath, cstack
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;Total ram usage:        6 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:    7
 13605 ;; This function calls:
 13606 ;;		___awtoft
 13607 ;;		___ftadd
 13608 ;;		___ftdiv
 13609 ;;		___ftneg
 13610 ;;		___fttol
 13611 ;; This function is called by:
 13612 ;;		_setDimmerLights
 13613 ;;		_setDimmerLights_Adj
 13614 ;;		_Flash_Memory_Initialization
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           
 13619                           ;psect for function _setPercentValue
 13620  09D6                     _setPercentValue:	
 13621                           
 13622                           ;incstack = 0
 13623                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13624                           ;setPercentValue@value stored from wreg
 13625  09D6  0020               	movlb	0	; select bank0
 13626  09D7  00DE               	movwf	setPercentValue@value
 13627                           
 13628                           ;Dimmer_B1.c: 885: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13629  09D8  3000               	movlw	0
 13630  09D9  00DF               	movwf	setPercentValue@i
 13631  09DA  3050               	movlw	80
 13632  09DB  00E0               	movwf	setPercentValue@i+1
 13633  09DC  3042               	movlw	66
 13634  09DD  00E1               	movwf	setPercentValue@i+2
 13635                           
 13636                           ;Dimmer_B1.c: 886: i /= 100;
 13637  09DE  3000               	movlw	0
 13638  09DF  00AE               	movwf	___ftdiv@f2
 13639  09E0  30C8               	movlw	200
 13640  09E1  00AF               	movwf	___ftdiv@f2+1
 13641  09E2  3042               	movlw	66
 13642  09E3  00B0               	movwf	___ftdiv@f2+2
 13643  09E4  085F               	movf	setPercentValue@i,w
 13644  09E5  00B1               	movwf	___ftdiv@f1
 13645  09E6  0860               	movf	setPercentValue@i+1,w
 13646  09E7  00B2               	movwf	___ftdiv@f1+1
 13647  09E8  0861               	movf	setPercentValue@i+2,w
 13648  09E9  00B3               	movwf	___ftdiv@f1+2
 13649  09EA  318E  26A3  3189   	fcall	___ftdiv
 13650  09ED  0020               	movlb	0	; select bank0
 13651  09EE  082E               	movf	?___ftdiv,w
 13652  09EF  00DF               	movwf	setPercentValue@i
 13653  09F0  082F               	movf	?___ftdiv+1,w
 13654  09F1  00E0               	movwf	setPercentValue@i+1
 13655  09F2  0830               	movf	?___ftdiv+2,w
 13656  09F3  00E1               	movwf	setPercentValue@i+2
 13657                           
 13658                           ;Dimmer_B1.c: 888: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13659  09F4  085E               	movf	setPercentValue@value,w
 13660  09F5  00DC               	movwf	??_setPercentValue
 13661  09F6  01DD               	clrf	??_setPercentValue+1
 13662  09F7  09DC               	comf	??_setPercentValue,f
 13663  09F8  09DD               	comf	??_setPercentValue+1,f
 13664  09F9  0ADC               	incf	??_setPercentValue,f
 13665  09FA  1903               	skipnz
 13666  09FB  0ADD               	incf	??_setPercentValue+1,f
 13667  09FC  085C               	movf	??_setPercentValue,w
 13668  09FD  3E40               	addlw	64
 13669  09FE  00A8               	movwf	___awtoft@c
 13670  09FF  3000               	movlw	0
 13671  0A00  3D5D               	addwfc	??_setPercentValue+1,w
 13672  0A01  00A9               	movwf	___awtoft@c+1
 13673  0A02  319E  26DA  3189   	fcall	___awtoft
 13674  0A05  0020               	movlb	0	; select bank0
 13675  0A06  0828               	movf	?___awtoft,w
 13676  0A07  00B1               	movwf	___ftdiv@f1
 13677  0A08  0829               	movf	?___awtoft+1,w
 13678  0A09  00B2               	movwf	___ftdiv@f1+1
 13679  0A0A  082A               	movf	?___awtoft+2,w
 13680  0A0B  00B3               	movwf	___ftdiv@f1+2
 13681  0A0C  085F               	movf	setPercentValue@i,w
 13682  0A0D  00AE               	movwf	___ftdiv@f2
 13683  0A0E  0860               	movf	setPercentValue@i+1,w
 13684  0A0F  00AF               	movwf	___ftdiv@f2+1
 13685  0A10  0861               	movf	setPercentValue@i+2,w
 13686  0A11  00B0               	movwf	___ftdiv@f2+2
 13687  0A12  318E  26A3  3189   	fcall	___ftdiv
 13688  0A15  0020               	movlb	0	; select bank0
 13689  0A16  082E               	movf	?___ftdiv,w
 13690  0A17  00BE               	movwf	___ftneg@f1
 13691  0A18  082F               	movf	?___ftdiv+1,w
 13692  0A19  00BF               	movwf	___ftneg@f1+1
 13693  0A1A  0830               	movf	?___ftdiv+2,w
 13694  0A1B  00C0               	movwf	___ftneg@f1+2
 13695  0A1C  319B  230D  3189   	fcall	___ftneg
 13696  0A1F  0020               	movlb	0	; select bank0
 13697  0A20  083E               	movf	?___ftneg,w
 13698  0A21  00C4               	movwf	___ftadd@f2
 13699  0A22  083F               	movf	?___ftneg+1,w
 13700  0A23  00C5               	movwf	___ftadd@f2+1
 13701  0A24  0840               	movf	?___ftneg+2,w
 13702  0A25  00C6               	movwf	___ftadd@f2+2
 13703  0A26  3000               	movlw	0
 13704  0A27  00C1               	movwf	___ftadd@f1
 13705  0A28  30C8               	movlw	200
 13706  0A29  00C2               	movwf	___ftadd@f1+1
 13707  0A2A  3042               	movlw	66
 13708  0A2B  00C3               	movwf	___ftadd@f1+2
 13709  0A2C  3184  2483  3189   	fcall	___ftadd
 13710  0A2F  0020               	movlb	0	; select bank0
 13711  0A30  0841               	movf	?___ftadd,w
 13712  0A31  00CE               	movwf	___fttol@f1
 13713  0A32  0842               	movf	?___ftadd+1,w
 13714  0A33  00CF               	movwf	___fttol@f1+1
 13715  0A34  0843               	movf	?___ftadd+2,w
 13716  0A35  00D0               	movwf	___fttol@f1+2
 13717  0A36  318C  245E         	fcall	___fttol
 13718  0A38  0020               	movlb	0	; select bank0
 13719  0A39  084E               	movf	?___fttol,w
 13720  0A3A  0008               	return
 13721  0A3B                     __end_of_setPercentValue:	
 13722                           
 13723                           	psect	text80
 13724  0C5E                     __ptext80:	
 13725 ;; *************** function ___fttol *****************
 13726 ;; Defined at:
 13727 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13728 ;; Parameters:    Size  Location     Type
 13729 ;;  f1              3   46[BANK0 ] float 
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;  lval            4   55[BANK0 ] unsigned long 
 13732 ;;  exp1            1   59[BANK0 ] unsigned char 
 13733 ;;  sign1           1   54[BANK0 ] unsigned char 
 13734 ;; Return value:  Size  Location     Type
 13735 ;;                  4   46[BANK0 ] long 
 13736 ;; Registers used:
 13737 ;;		wreg, status,2, status,0
 13738 ;; Tracked objects:
 13739 ;;		On entry : 0/0
 13740 ;;		On exit  : 0/0
 13741 ;;		Unchanged: 0/0
 13742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13743 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13744 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13745 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13746 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13747 ;;Total ram usage:       14 bytes
 13748 ;; Hardware stack levels used:    1
 13749 ;; Hardware stack levels required when called:    5
 13750 ;; This function calls:
 13751 ;;		Nothing
 13752 ;; This function is called by:
 13753 ;;		_getPercentValue
 13754 ;;		_setPercentValue
 13755 ;; This function uses a non-reentrant model
 13756 ;;
 13757                           
 13758                           
 13759                           ;psect for function ___fttol
 13760  0C5E                     ___fttol:	
 13761                           
 13762                           ;incstack = 0
 13763                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13764  0C5E  0020               	movlb	0	; select bank0
 13765  0C5F  084E               	movf	___fttol@f1,w
 13766  0C60  00D2               	movwf	??___fttol
 13767  0C61  084F               	movf	___fttol@f1+1,w
 13768  0C62  00D3               	movwf	??___fttol+1
 13769  0C63  0850               	movf	___fttol@f1+2,w
 13770  0C64  00D4               	movwf	??___fttol+2
 13771  0C65  1003               	clrc
 13772  0C66  0D53               	rlf	??___fttol+1,w
 13773  0C67  0D54               	rlf	??___fttol+2,w
 13774  0C68  00D5               	movwf	??___fttol+3
 13775  0C69  0855               	movf	??___fttol+3,w
 13776  0C6A  00DB               	movwf	___fttol@exp1
 13777  0C6B  08DB               	movf	___fttol@exp1,f
 13778  0C6C  1D03               	skipz
 13779  0C6D  2C77               	goto	l6079
 13780  0C6E  3000               	movlw	0
 13781  0C6F  00D1               	movwf	?___fttol+3
 13782  0C70  3000               	movlw	0
 13783  0C71  00D0               	movwf	?___fttol+2
 13784  0C72  3000               	movlw	0
 13785  0C73  00CF               	movwf	?___fttol+1
 13786  0C74  3000               	movlw	0
 13787  0C75  00CE               	movwf	?___fttol
 13788  0C76  0008               	return
 13789  0C77                     l6079:	
 13790  0C77  084E               	movf	___fttol@f1,w
 13791  0C78  00D2               	movwf	??___fttol
 13792  0C79  084F               	movf	___fttol@f1+1,w
 13793  0C7A  00D3               	movwf	??___fttol+1
 13794  0C7B  0850               	movf	___fttol@f1+2,w
 13795  0C7C  00D4               	movwf	??___fttol+2
 13796  0C7D  3017               	movlw	23
 13797  0C7E                     u4885:	
 13798  0C7E  36D4               	lsrf	??___fttol+2,f
 13799  0C7F  0CD3               	rrf	??___fttol+1,f
 13800  0C80  0CD2               	rrf	??___fttol,f
 13801  0C81  0B89               	decfsz	9,f
 13802  0C82  2C7E               	goto	u4885
 13803  0C83  0852               	movf	??___fttol,w
 13804  0C84  00D5               	movwf	??___fttol+3
 13805  0C85  0855               	movf	??___fttol+3,w
 13806  0C86  00D6               	movwf	___fttol@sign1
 13807  0C87  17CF               	bsf	___fttol@f1+1,7
 13808  0C88  30FF               	movlw	255
 13809  0C89  05CE               	andwf	___fttol@f1,f
 13810  0C8A  30FF               	movlw	255
 13811  0C8B  05CF               	andwf	___fttol@f1+1,f
 13812  0C8C  3000               	movlw	0
 13813  0C8D  05D0               	andwf	___fttol@f1+2,f
 13814  0C8E  084E               	movf	___fttol@f1,w
 13815  0C8F  00D7               	movwf	___fttol@lval
 13816  0C90  084F               	movf	___fttol@f1+1,w
 13817  0C91  00D8               	movwf	___fttol@lval+1
 13818  0C92  0850               	movf	___fttol@f1+2,w
 13819  0C93  00D9               	movwf	___fttol@lval+2
 13820  0C94  01DA               	clrf	___fttol@lval+3
 13821  0C95  308E               	movlw	142
 13822  0C96  02DB               	subwf	___fttol@exp1,f
 13823  0C97  1FDB               	btfss	___fttol@exp1,7
 13824  0C98  2CB5               	goto	l6099
 13825  0C99  085B               	movf	___fttol@exp1,w
 13826  0C9A  3A80               	xorlw	128
 13827  0C9B  3E8F               	addlw	143
 13828  0C9C  1803               	skipnc
 13829  0C9D  2CA7               	goto	l6097
 13830  0C9E  3000               	movlw	0
 13831  0C9F  00D1               	movwf	?___fttol+3
 13832  0CA0  3000               	movlw	0
 13833  0CA1  00D0               	movwf	?___fttol+2
 13834  0CA2  3000               	movlw	0
 13835  0CA3  00CF               	movwf	?___fttol+1
 13836  0CA4  3000               	movlw	0
 13837  0CA5  00CE               	movwf	?___fttol
 13838  0CA6  0008               	return
 13839  0CA7                     l6097:	
 13840  0CA7  3001               	movlw	1
 13841  0CA8                     u4915:	
 13842  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13843  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13844  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13845  0CAB  0CD7               	rrf	___fttol@lval,f
 13846  0CAC  0B89               	decfsz	9,f
 13847  0CAD  2CA8               	goto	u4915
 13848  0CAE  3001               	movlw	1
 13849  0CAF  00D2               	movwf	??___fttol
 13850  0CB0  0852               	movf	??___fttol,w
 13851  0CB1  07DB               	addwf	___fttol@exp1,f
 13852  0CB2  1903               	btfsc	3,2
 13853  0CB3  2CCE               	goto	l6109
 13854  0CB4  2CA7               	goto	l6097
 13855  0CB5                     l6099:	
 13856  0CB5  3018               	movlw	24
 13857  0CB6  025B               	subwf	___fttol@exp1,w
 13858  0CB7  1C03               	skipc
 13859  0CB8  2CCB               	goto	l6107
 13860  0CB9  3000               	movlw	0
 13861  0CBA  00D1               	movwf	?___fttol+3
 13862  0CBB  3000               	movlw	0
 13863  0CBC  00D0               	movwf	?___fttol+2
 13864  0CBD  3000               	movlw	0
 13865  0CBE  00CF               	movwf	?___fttol+1
 13866  0CBF  3000               	movlw	0
 13867  0CC0  00CE               	movwf	?___fttol
 13868  0CC1  0008               	return
 13869  0CC2                     l6105:	
 13870  0CC2  3001               	movlw	1
 13871  0CC3                     u4945:	
 13872  0CC3  35D7               	lslf	___fttol@lval,f
 13873  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13874  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13875  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13876  0CC7  0B89               	decfsz	9,f
 13877  0CC8  2CC3               	goto	u4945
 13878  0CC9  3001               	movlw	1
 13879  0CCA  02DB               	subwf	___fttol@exp1,f
 13880  0CCB                     l6107:	
 13881  0CCB  08DB               	movf	___fttol@exp1,f
 13882  0CCC  1D03               	skipz
 13883  0CCD  2CC2               	goto	l6105
 13884  0CCE                     l6109:	
 13885  0CCE  0856               	movf	___fttol@sign1,w
 13886  0CCF  1903               	btfsc	3,2
 13887  0CD0  2CDC               	goto	l6113
 13888  0CD1  09D7               	comf	___fttol@lval,f
 13889  0CD2  09D8               	comf	___fttol@lval+1,f
 13890  0CD3  09D9               	comf	___fttol@lval+2,f
 13891  0CD4  09DA               	comf	___fttol@lval+3,f
 13892  0CD5  0AD7               	incf	___fttol@lval,f
 13893  0CD6  1903               	skipnz
 13894  0CD7  0AD8               	incf	___fttol@lval+1,f
 13895  0CD8  1903               	skipnz
 13896  0CD9  0AD9               	incf	___fttol@lval+2,f
 13897  0CDA  1903               	skipnz
 13898  0CDB  0ADA               	incf	___fttol@lval+3,f
 13899  0CDC                     l6113:	
 13900  0CDC  085A               	movf	___fttol@lval+3,w
 13901  0CDD  00D1               	movwf	?___fttol+3
 13902  0CDE  0859               	movf	___fttol@lval+2,w
 13903  0CDF  00D0               	movwf	?___fttol+2
 13904  0CE0  0858               	movf	___fttol@lval+1,w
 13905  0CE1  00CF               	movwf	?___fttol+1
 13906  0CE2  0857               	movf	___fttol@lval,w
 13907  0CE3  00CE               	movwf	?___fttol
 13908  0CE4  0008               	return
 13909  0CE5                     __end_of___fttol:	
 13910                           
 13911                           	psect	text81
 13912  1B0D                     __ptext81:	
 13913 ;; *************** function ___ftneg *****************
 13914 ;; Defined at:
 13915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;  f1              3   30[BANK0 ] float 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;		None
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  3   30[BANK0 ] float 
 13922 ;; Registers used:
 13923 ;;		wreg
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13929 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;Total ram usage:        3 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    5
 13936 ;; This function calls:
 13937 ;;		Nothing
 13938 ;; This function is called by:
 13939 ;;		_getPercentValue
 13940 ;;		_setPercentValue
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           
 13945                           ;psect for function ___ftneg
 13946  1B0D                     ___ftneg:	
 13947                           
 13948                           ;incstack = 0
 13949                           ; Regs used in ___ftneg: [wreg]
 13950  1B0D  0020               	movlb	0	; select bank0
 13951  1B0E  0840               	movf	___ftneg@f1+2,w
 13952  1B0F  043F               	iorwf	___ftneg@f1+1,w
 13953  1B10  043E               	iorwf	___ftneg@f1,w
 13954  1B11  1903               	skipnz
 13955  1B12  0008               	return
 13956  1B13  3080               	movlw	128
 13957  1B14  06C0               	xorwf	___ftneg@f1+2,f
 13958  1B15  0008               	return
 13959  1B16                     __end_of___ftneg:	
 13960                           
 13961                           	psect	text82
 13962  0EA3                     __ptext82:	
 13963 ;; *************** function ___ftdiv *****************
 13964 ;; Defined at:
 13965 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13966 ;; Parameters:    Size  Location     Type
 13967 ;;  f2              3   14[BANK0 ] float 
 13968 ;;  f1              3   17[BANK0 ] float 
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;  f3              3   25[BANK0 ] float 
 13971 ;;  sign            1   29[BANK0 ] unsigned char 
 13972 ;;  exp             1   28[BANK0 ] unsigned char 
 13973 ;;  cntr            1   24[BANK0 ] unsigned char 
 13974 ;; Return value:  Size  Location     Type
 13975 ;;                  3   14[BANK0 ] float 
 13976 ;; Registers used:
 13977 ;;		wreg, status,2, status,0, pclath, cstack
 13978 ;; Tracked objects:
 13979 ;;		On entry : 0/0
 13980 ;;		On exit  : 0/0
 13981 ;;		Unchanged: 0/0
 13982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13983 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;Total ram usage:       16 bytes
 13988 ;; Hardware stack levels used:    1
 13989 ;; Hardware stack levels required when called:    6
 13990 ;; This function calls:
 13991 ;;		___ftpack
 13992 ;; This function is called by:
 13993 ;;		_getPercentValue
 13994 ;;		_setPercentValue
 13995 ;; This function uses a non-reentrant model
 13996 ;;
 13997                           
 13998                           
 13999                           ;psect for function ___ftdiv
 14000  0EA3                     ___ftdiv:	
 14001                           
 14002                           ;incstack = 0
 14003                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14004  0EA3  0020               	movlb	0	; select bank0
 14005  0EA4  0831               	movf	___ftdiv@f1,w
 14006  0EA5  00B4               	movwf	??___ftdiv
 14007  0EA6  0832               	movf	___ftdiv@f1+1,w
 14008  0EA7  00B5               	movwf	??___ftdiv+1
 14009  0EA8  0833               	movf	___ftdiv@f1+2,w
 14010  0EA9  00B6               	movwf	??___ftdiv+2
 14011  0EAA  1003               	clrc
 14012  0EAB  0D35               	rlf	??___ftdiv+1,w
 14013  0EAC  0D36               	rlf	??___ftdiv+2,w
 14014  0EAD  00B7               	movwf	??___ftdiv+3
 14015  0EAE  0837               	movf	??___ftdiv+3,w
 14016  0EAF  00BC               	movwf	___ftdiv@exp
 14017  0EB0  08BC               	movf	___ftdiv@exp,f
 14018  0EB1  1D03               	skipz
 14019  0EB2  2EBA               	goto	l5979
 14020  0EB3  3000               	movlw	0
 14021  0EB4  00AE               	movwf	?___ftdiv
 14022  0EB5  3000               	movlw	0
 14023  0EB6  00AF               	movwf	?___ftdiv+1
 14024  0EB7  3000               	movlw	0
 14025  0EB8  00B0               	movwf	?___ftdiv+2
 14026  0EB9  0008               	return
 14027  0EBA                     l5979:	
 14028  0EBA  082E               	movf	___ftdiv@f2,w
 14029  0EBB  00B4               	movwf	??___ftdiv
 14030  0EBC  082F               	movf	___ftdiv@f2+1,w
 14031  0EBD  00B5               	movwf	??___ftdiv+1
 14032  0EBE  0830               	movf	___ftdiv@f2+2,w
 14033  0EBF  00B6               	movwf	??___ftdiv+2
 14034  0EC0  1003               	clrc
 14035  0EC1  0D35               	rlf	??___ftdiv+1,w
 14036  0EC2  0D36               	rlf	??___ftdiv+2,w
 14037  0EC3  00B7               	movwf	??___ftdiv+3
 14038  0EC4  0837               	movf	??___ftdiv+3,w
 14039  0EC5  00BD               	movwf	___ftdiv@sign
 14040  0EC6  08BD               	movf	___ftdiv@sign,f
 14041  0EC7  1D03               	skipz
 14042  0EC8  2ED0               	goto	l5985
 14043  0EC9  3000               	movlw	0
 14044  0ECA  00AE               	movwf	?___ftdiv
 14045  0ECB  3000               	movlw	0
 14046  0ECC  00AF               	movwf	?___ftdiv+1
 14047  0ECD  3000               	movlw	0
 14048  0ECE  00B0               	movwf	?___ftdiv+2
 14049  0ECF  0008               	return
 14050  0ED0                     l5985:	
 14051  0ED0  3000               	movlw	0
 14052  0ED1  00B9               	movwf	___ftdiv@f3
 14053  0ED2  3000               	movlw	0
 14054  0ED3  00BA               	movwf	___ftdiv@f3+1
 14055  0ED4  3000               	movlw	0
 14056  0ED5  00BB               	movwf	___ftdiv@f3+2
 14057  0ED6  3089               	movlw	137
 14058  0ED7  073D               	addwf	___ftdiv@sign,w
 14059  0ED8  00B4               	movwf	??___ftdiv
 14060  0ED9  0834               	movf	??___ftdiv,w
 14061  0EDA  02BC               	subwf	___ftdiv@exp,f
 14062  0EDB  0831               	movf	___ftdiv@f1,w
 14063  0EDC  00B4               	movwf	??___ftdiv
 14064  0EDD  0832               	movf	___ftdiv@f1+1,w
 14065  0EDE  00B5               	movwf	??___ftdiv+1
 14066  0EDF  0833               	movf	___ftdiv@f1+2,w
 14067  0EE0  00B6               	movwf	??___ftdiv+2
 14068  0EE1  3010               	movlw	16
 14069  0EE2                     u4685:	
 14070  0EE2  36B6               	lsrf	??___ftdiv+2,f
 14071  0EE3  0CB5               	rrf	??___ftdiv+1,f
 14072  0EE4  0CB4               	rrf	??___ftdiv,f
 14073  0EE5  0B89               	decfsz	9,f
 14074  0EE6  2EE2               	goto	u4685
 14075  0EE7  0834               	movf	??___ftdiv,w
 14076  0EE8  00B7               	movwf	??___ftdiv+3
 14077  0EE9  0837               	movf	??___ftdiv+3,w
 14078  0EEA  00BD               	movwf	___ftdiv@sign
 14079  0EEB  082E               	movf	___ftdiv@f2,w
 14080  0EEC  00B4               	movwf	??___ftdiv
 14081  0EED  082F               	movf	___ftdiv@f2+1,w
 14082  0EEE  00B5               	movwf	??___ftdiv+1
 14083  0EEF  0830               	movf	___ftdiv@f2+2,w
 14084  0EF0  00B6               	movwf	??___ftdiv+2
 14085  0EF1  3010               	movlw	16
 14086  0EF2                     u4695:	
 14087  0EF2  36B6               	lsrf	??___ftdiv+2,f
 14088  0EF3  0CB5               	rrf	??___ftdiv+1,f
 14089  0EF4  0CB4               	rrf	??___ftdiv,f
 14090  0EF5  0B89               	decfsz	9,f
 14091  0EF6  2EF2               	goto	u4695
 14092  0EF7  0834               	movf	??___ftdiv,w
 14093  0EF8  00B7               	movwf	??___ftdiv+3
 14094  0EF9  0837               	movf	??___ftdiv+3,w
 14095  0EFA  06BD               	xorwf	___ftdiv@sign,f
 14096  0EFB  3080               	movlw	128
 14097  0EFC  00B4               	movwf	??___ftdiv
 14098  0EFD  0834               	movf	??___ftdiv,w
 14099  0EFE  05BD               	andwf	___ftdiv@sign,f
 14100  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 14101  0F00  30FF               	movlw	255
 14102  0F01  05B1               	andwf	___ftdiv@f1,f
 14103  0F02  30FF               	movlw	255
 14104  0F03  05B2               	andwf	___ftdiv@f1+1,f
 14105  0F04  3000               	movlw	0
 14106  0F05  05B3               	andwf	___ftdiv@f1+2,f
 14107  0F06  17AF               	bsf	___ftdiv@f2+1,7
 14108  0F07  30FF               	movlw	255
 14109  0F08  05AE               	andwf	___ftdiv@f2,f
 14110  0F09  30FF               	movlw	255
 14111  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 14112  0F0B  3000               	movlw	0
 14113  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 14114  0F0D  3018               	movlw	24
 14115  0F0E  00B4               	movwf	??___ftdiv
 14116  0F0F  0834               	movf	??___ftdiv,w
 14117  0F10  00B8               	movwf	___ftdiv@cntr
 14118  0F11                     l5999:	
 14119  0F11  3001               	movlw	1
 14120  0F12                     u4705:	
 14121  0F12  35B9               	lslf	___ftdiv@f3,f
 14122  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 14123  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 14124  0F15  0B89               	decfsz	9,f
 14125  0F16  2F12               	goto	u4705
 14126  0F17  0830               	movf	___ftdiv@f2+2,w
 14127  0F18  0233               	subwf	___ftdiv@f1+2,w
 14128  0F19  1D03               	skipz
 14129  0F1A  2F21               	goto	u4715
 14130  0F1B  082F               	movf	___ftdiv@f2+1,w
 14131  0F1C  0232               	subwf	___ftdiv@f1+1,w
 14132  0F1D  1D03               	skipz
 14133  0F1E  2F21               	goto	u4715
 14134  0F1F  082E               	movf	___ftdiv@f2,w
 14135  0F20  0231               	subwf	___ftdiv@f1,w
 14136  0F21                     u4715:	
 14137  0F21  1C03               	skipc
 14138  0F22  2F2A               	goto	l6007
 14139  0F23  082E               	movf	___ftdiv@f2,w
 14140  0F24  02B1               	subwf	___ftdiv@f1,f
 14141  0F25  082F               	movf	___ftdiv@f2+1,w
 14142  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 14143  0F27  0830               	movf	___ftdiv@f2+2,w
 14144  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 14145  0F29  1439               	bsf	___ftdiv@f3,0
 14146  0F2A                     l6007:	
 14147  0F2A  3001               	movlw	1
 14148  0F2B                     u4725:	
 14149  0F2B  35B1               	lslf	___ftdiv@f1,f
 14150  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 14151  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 14152  0F2E  0B89               	decfsz	9,f
 14153  0F2F  2F2B               	goto	u4725
 14154  0F30  3001               	movlw	1
 14155  0F31  02B8               	subwf	___ftdiv@cntr,f
 14156  0F32  1D03               	btfss	3,2
 14157  0F33  2F11               	goto	l5999
 14158  0F34  0839               	movf	___ftdiv@f3,w
 14159  0F35  00A0               	movwf	___ftpack@arg
 14160  0F36  083A               	movf	___ftdiv@f3+1,w
 14161  0F37  00A1               	movwf	___ftpack@arg+1
 14162  0F38  083B               	movf	___ftdiv@f3+2,w
 14163  0F39  00A2               	movwf	___ftpack@arg+2
 14164  0F3A  083C               	movf	___ftdiv@exp,w
 14165  0F3B  00B4               	movwf	??___ftdiv
 14166  0F3C  0834               	movf	??___ftdiv,w
 14167  0F3D  00A3               	movwf	___ftpack@exp
 14168  0F3E  083D               	movf	___ftdiv@sign,w
 14169  0F3F  00B5               	movwf	??___ftdiv+1
 14170  0F40  0835               	movf	??___ftdiv+1,w
 14171  0F41  00A4               	movwf	___ftpack@sign
 14172  0F42  3189  2111         	fcall	___ftpack
 14173  0F44  0020               	movlb	0	; select bank0
 14174  0F45  0820               	movf	?___ftpack,w
 14175  0F46  00AE               	movwf	?___ftdiv
 14176  0F47  0821               	movf	?___ftpack+1,w
 14177  0F48  00AF               	movwf	?___ftdiv+1
 14178  0F49  0822               	movf	?___ftpack+2,w
 14179  0F4A  00B0               	movwf	?___ftdiv+2
 14180  0F4B  0008               	return
 14181  0F4C                     __end_of___ftdiv:	
 14182                           
 14183                           	psect	text83
 14184  0483                     __ptext83:	
 14185 ;; *************** function ___ftadd *****************
 14186 ;; Defined at:
 14187 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14188 ;; Parameters:    Size  Location     Type
 14189 ;;  f1              3   33[BANK0 ] float 
 14190 ;;  f2              3   36[BANK0 ] float 
 14191 ;; Auto vars:     Size  Location     Type
 14192 ;;  exp1            1   45[BANK0 ] unsigned char 
 14193 ;;  exp2            1   44[BANK0 ] unsigned char 
 14194 ;;  sign            1   43[BANK0 ] unsigned char 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  3   33[BANK0 ] float 
 14197 ;; Registers used:
 14198 ;;		wreg, status,2, status,0, pclath, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:       13 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    6
 14211 ;; This function calls:
 14212 ;;		___ftpack
 14213 ;; This function is called by:
 14214 ;;		_getPercentValue
 14215 ;;		_setPercentValue
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           
 14220                           ;psect for function ___ftadd
 14221  0483                     ___ftadd:	
 14222                           
 14223                           ;incstack = 0
 14224                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14225  0483  0020               	movlb	0	; select bank0
 14226  0484  0841               	movf	___ftadd@f1,w
 14227  0485  00C7               	movwf	??___ftadd
 14228  0486  0842               	movf	___ftadd@f1+1,w
 14229  0487  00C8               	movwf	??___ftadd+1
 14230  0488  0843               	movf	___ftadd@f1+2,w
 14231  0489  00C9               	movwf	??___ftadd+2
 14232  048A  1003               	clrc
 14233  048B  0D48               	rlf	??___ftadd+1,w
 14234  048C  0D49               	rlf	??___ftadd+2,w
 14235  048D  00CA               	movwf	??___ftadd+3
 14236  048E  084A               	movf	??___ftadd+3,w
 14237  048F  00CD               	movwf	___ftadd@exp1
 14238  0490  0844               	movf	___ftadd@f2,w
 14239  0491  00C7               	movwf	??___ftadd
 14240  0492  0845               	movf	___ftadd@f2+1,w
 14241  0493  00C8               	movwf	??___ftadd+1
 14242  0494  0846               	movf	___ftadd@f2+2,w
 14243  0495  00C9               	movwf	??___ftadd+2
 14244  0496  1003               	clrc
 14245  0497  0D48               	rlf	??___ftadd+1,w
 14246  0498  0D49               	rlf	??___ftadd+2,w
 14247  0499  00CA               	movwf	??___ftadd+3
 14248  049A  084A               	movf	??___ftadd+3,w
 14249  049B  00CC               	movwf	___ftadd@exp2
 14250  049C  084D               	movf	___ftadd@exp1,w
 14251  049D  1903               	btfsc	3,2
 14252  049E  2CAB               	goto	l5909
 14253  049F  084C               	movf	___ftadd@exp2,w
 14254  04A0  024D               	subwf	___ftadd@exp1,w
 14255  04A1  1803               	skipnc
 14256  04A2  2CB2               	goto	l5913
 14257  04A3  034D               	decf	___ftadd@exp1,w
 14258  04A4  3AFF               	xorlw	255
 14259  04A5  074C               	addwf	___ftadd@exp2,w
 14260  04A6  00C7               	movwf	??___ftadd
 14261  04A7  3019               	movlw	25
 14262  04A8  0247               	subwf	??___ftadd,w
 14263  04A9  1C03               	skipc
 14264  04AA  2CB2               	goto	l5913
 14265  04AB                     l5909:	
 14266  04AB  0844               	movf	___ftadd@f2,w
 14267  04AC  00C1               	movwf	?___ftadd
 14268  04AD  0845               	movf	___ftadd@f2+1,w
 14269  04AE  00C2               	movwf	?___ftadd+1
 14270  04AF  0846               	movf	___ftadd@f2+2,w
 14271  04B0  00C3               	movwf	?___ftadd+2
 14272  04B1  0008               	return
 14273  04B2                     l5913:	
 14274  04B2  084C               	movf	___ftadd@exp2,w
 14275  04B3  1903               	btfsc	3,2
 14276  04B4  0008               	return
 14277  04B5  084D               	movf	___ftadd@exp1,w
 14278  04B6  024C               	subwf	___ftadd@exp2,w
 14279  04B7  1803               	skipnc
 14280  04B8  2CC1               	goto	l5919
 14281  04B9  034C               	decf	___ftadd@exp2,w
 14282  04BA  3AFF               	xorlw	255
 14283  04BB  074D               	addwf	___ftadd@exp1,w
 14284  04BC  00C7               	movwf	??___ftadd
 14285  04BD  3019               	movlw	25
 14286  04BE  0247               	subwf	??___ftadd,w
 14287  04BF  1803               	btfsc	3,0
 14288  04C0  0008               	return
 14289  04C1                     l5919:	
 14290  04C1  3006               	movlw	6
 14291  04C2  00C7               	movwf	??___ftadd
 14292  04C3  0847               	movf	??___ftadd,w
 14293  04C4  00CB               	movwf	___ftadd@sign
 14294  04C5  1BC3               	btfsc	___ftadd@f1+2,7
 14295  04C6  17CB               	bsf	___ftadd@sign,7
 14296  04C7  1BC6               	btfsc	___ftadd@f2+2,7
 14297  04C8  174B               	bsf	___ftadd@sign,6
 14298  04C9  17C2               	bsf	___ftadd@f1+1,7
 14299  04CA  30FF               	movlw	255
 14300  04CB  05C1               	andwf	___ftadd@f1,f
 14301  04CC  30FF               	movlw	255
 14302  04CD  05C2               	andwf	___ftadd@f1+1,f
 14303  04CE  3000               	movlw	0
 14304  04CF  05C3               	andwf	___ftadd@f1+2,f
 14305  04D0  17C5               	bsf	___ftadd@f2+1,7
 14306  04D1  30FF               	movlw	255
 14307  04D2  05C4               	andwf	___ftadd@f2,f
 14308  04D3  30FF               	movlw	255
 14309  04D4  05C5               	andwf	___ftadd@f2+1,f
 14310  04D5  3000               	movlw	0
 14311  04D6  05C6               	andwf	___ftadd@f2+2,f
 14312  04D7  084C               	movf	___ftadd@exp2,w
 14313  04D8  024D               	subwf	___ftadd@exp1,w
 14314  04D9  1803               	skipnc
 14315  04DA  2CFD               	goto	l5941
 14316  04DB                     l5931:	
 14317  04DB  3001               	movlw	1
 14318  04DC                     u4525:	
 14319  04DC  35C4               	lslf	___ftadd@f2,f
 14320  04DD  0DC5               	rlf	___ftadd@f2+1,f
 14321  04DE  0DC6               	rlf	___ftadd@f2+2,f
 14322  04DF  0B89               	decfsz	9,f
 14323  04E0  2CDC               	goto	u4525
 14324  04E1  3001               	movlw	1
 14325  04E2  02CC               	subwf	___ftadd@exp2,f
 14326  04E3  084C               	movf	___ftadd@exp2,w
 14327  04E4  064D               	xorwf	___ftadd@exp1,w
 14328  04E5  1903               	skipnz
 14329  04E6  2CF8               	goto	l5939
 14330  04E7  3001               	movlw	1
 14331  04E8  02CB               	subwf	___ftadd@sign,f
 14332  04E9  084B               	movf	___ftadd@sign,w
 14333  04EA  3907               	andlw	7
 14334  04EB  1903               	btfsc	3,2
 14335  04EC  2CF8               	goto	l5939
 14336  04ED  2CDB               	goto	l5931
 14337  04EE                     l5937:	
 14338  04EE  3001               	movlw	1
 14339  04EF                     u4555:	
 14340  04EF  36C3               	lsrf	___ftadd@f1+2,f
 14341  04F0  0CC2               	rrf	___ftadd@f1+1,f
 14342  04F1  0CC1               	rrf	___ftadd@f1,f
 14343  04F2  0B89               	decfsz	9,f
 14344  04F3  2CEF               	goto	u4555
 14345  04F4  3001               	movlw	1
 14346  04F5  00C7               	movwf	??___ftadd
 14347  04F6  0847               	movf	??___ftadd,w
 14348  04F7  07CD               	addwf	___ftadd@exp1,f
 14349  04F8                     l5939:	
 14350  04F8  084D               	movf	___ftadd@exp1,w
 14351  04F9  064C               	xorwf	___ftadd@exp2,w
 14352  04FA  1903               	btfsc	3,2
 14353  04FB  2D22               	goto	l3014
 14354  04FC  2CEE               	goto	l5937
 14355  04FD                     l5941:	
 14356  04FD  084D               	movf	___ftadd@exp1,w
 14357  04FE  024C               	subwf	___ftadd@exp2,w
 14358  04FF  1803               	skipnc
 14359  0500  2D22               	goto	l3014
 14360  0501                     l5943:	
 14361  0501  3001               	movlw	1
 14362  0502                     u4585:	
 14363  0502  35C1               	lslf	___ftadd@f1,f
 14364  0503  0DC2               	rlf	___ftadd@f1+1,f
 14365  0504  0DC3               	rlf	___ftadd@f1+2,f
 14366  0505  0B89               	decfsz	9,f
 14367  0506  2D02               	goto	u4585
 14368  0507  3001               	movlw	1
 14369  0508  02CD               	subwf	___ftadd@exp1,f
 14370  0509  084C               	movf	___ftadd@exp2,w
 14371  050A  064D               	xorwf	___ftadd@exp1,w
 14372  050B  1903               	skipnz
 14373  050C  2D1E               	goto	l5951
 14374  050D  3001               	movlw	1
 14375  050E  02CB               	subwf	___ftadd@sign,f
 14376  050F  084B               	movf	___ftadd@sign,w
 14377  0510  3907               	andlw	7
 14378  0511  1903               	btfsc	3,2
 14379  0512  2D1E               	goto	l5951
 14380  0513  2D01               	goto	l5943
 14381  0514                     l5949:	
 14382  0514  3001               	movlw	1
 14383  0515                     u4615:	
 14384  0515  36C6               	lsrf	___ftadd@f2+2,f
 14385  0516  0CC5               	rrf	___ftadd@f2+1,f
 14386  0517  0CC4               	rrf	___ftadd@f2,f
 14387  0518  0B89               	decfsz	9,f
 14388  0519  2D15               	goto	u4615
 14389  051A  3001               	movlw	1
 14390  051B  00C7               	movwf	??___ftadd
 14391  051C  0847               	movf	??___ftadd,w
 14392  051D  07CC               	addwf	___ftadd@exp2,f
 14393  051E                     l5951:	
 14394  051E  084D               	movf	___ftadd@exp1,w
 14395  051F  064C               	xorwf	___ftadd@exp2,w
 14396  0520  1D03               	skipz
 14397  0521  2D14               	goto	l5949
 14398  0522                     l3014:	
 14399  0522  1FCB               	btfss	___ftadd@sign,7
 14400  0523  2D34               	goto	l5955
 14401  0524  30FF               	movlw	255
 14402  0525  06C1               	xorwf	___ftadd@f1,f
 14403  0526  30FF               	movlw	255
 14404  0527  06C2               	xorwf	___ftadd@f1+1,f
 14405  0528  30FF               	movlw	255
 14406  0529  06C3               	xorwf	___ftadd@f1+2,f
 14407  052A  3001               	movlw	1
 14408  052B  07C1               	addwf	___ftadd@f1,f
 14409  052C  3000               	movlw	0
 14410  052D  1803               	skipnc
 14411  052E  3001               	movlw	1
 14412  052F  07C2               	addwf	___ftadd@f1+1,f
 14413  0530  3000               	movlw	0
 14414  0531  1803               	skipnc
 14415  0532  3001               	movlw	1
 14416  0533  07C3               	addwf	___ftadd@f1+2,f
 14417  0534                     l5955:	
 14418  0534  1F4B               	btfss	___ftadd@sign,6
 14419  0535  2D46               	goto	l5959
 14420  0536  30FF               	movlw	255
 14421  0537  06C4               	xorwf	___ftadd@f2,f
 14422  0538  30FF               	movlw	255
 14423  0539  06C5               	xorwf	___ftadd@f2+1,f
 14424  053A  30FF               	movlw	255
 14425  053B  06C6               	xorwf	___ftadd@f2+2,f
 14426  053C  3001               	movlw	1
 14427  053D  07C4               	addwf	___ftadd@f2,f
 14428  053E  3000               	movlw	0
 14429  053F  1803               	skipnc
 14430  0540  3001               	movlw	1
 14431  0541  07C5               	addwf	___ftadd@f2+1,f
 14432  0542  3000               	movlw	0
 14433  0543  1803               	skipnc
 14434  0544  3001               	movlw	1
 14435  0545  07C6               	addwf	___ftadd@f2+2,f
 14436  0546                     l5959:	
 14437  0546  01CB               	clrf	___ftadd@sign
 14438  0547  0841               	movf	___ftadd@f1,w
 14439  0548  07C4               	addwf	___ftadd@f2,f
 14440  0549  0842               	movf	___ftadd@f1+1,w
 14441  054A  3DC5               	addwfc	___ftadd@f2+1,f
 14442  054B  0843               	movf	___ftadd@f1+2,w
 14443  054C  3DC6               	addwfc	___ftadd@f2+2,f
 14444  054D  1FC6               	btfss	___ftadd@f2+2,7
 14445  054E  2D61               	goto	l5969
 14446  054F  30FF               	movlw	255
 14447  0550  06C4               	xorwf	___ftadd@f2,f
 14448  0551  30FF               	movlw	255
 14449  0552  06C5               	xorwf	___ftadd@f2+1,f
 14450  0553  30FF               	movlw	255
 14451  0554  06C6               	xorwf	___ftadd@f2+2,f
 14452  0555  3001               	movlw	1
 14453  0556  07C4               	addwf	___ftadd@f2,f
 14454  0557  3000               	movlw	0
 14455  0558  1803               	skipnc
 14456  0559  3001               	movlw	1
 14457  055A  07C5               	addwf	___ftadd@f2+1,f
 14458  055B  3000               	movlw	0
 14459  055C  1803               	skipnc
 14460  055D  3001               	movlw	1
 14461  055E  07C6               	addwf	___ftadd@f2+2,f
 14462  055F  01CB               	clrf	___ftadd@sign
 14463  0560  0ACB               	incf	___ftadd@sign,f
 14464  0561                     l5969:	
 14465  0561  0844               	movf	___ftadd@f2,w
 14466  0562  00A0               	movwf	___ftpack@arg
 14467  0563  0845               	movf	___ftadd@f2+1,w
 14468  0564  00A1               	movwf	___ftpack@arg+1
 14469  0565  0846               	movf	___ftadd@f2+2,w
 14470  0566  00A2               	movwf	___ftpack@arg+2
 14471  0567  084D               	movf	___ftadd@exp1,w
 14472  0568  00C7               	movwf	??___ftadd
 14473  0569  0847               	movf	??___ftadd,w
 14474  056A  00A3               	movwf	___ftpack@exp
 14475  056B  084B               	movf	___ftadd@sign,w
 14476  056C  00C8               	movwf	??___ftadd+1
 14477  056D  0848               	movf	??___ftadd+1,w
 14478  056E  00A4               	movwf	___ftpack@sign
 14479  056F  3189  2111         	fcall	___ftpack
 14480  0571  0020               	movlb	0	; select bank0
 14481  0572  0820               	movf	?___ftpack,w
 14482  0573  00C1               	movwf	?___ftadd
 14483  0574  0821               	movf	?___ftpack+1,w
 14484  0575  00C2               	movwf	?___ftadd+1
 14485  0576  0822               	movf	?___ftpack+2,w
 14486  0577  00C3               	movwf	?___ftadd+2
 14487  0578  0008               	return
 14488  0579                     __end_of___ftadd:	
 14489                           
 14490                           	psect	text84
 14491  1EDA                     __ptext84:	
 14492 ;; *************** function ___awtoft *****************
 14493 ;; Defined at:
 14494 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14495 ;; Parameters:    Size  Location     Type
 14496 ;;  c               2    8[BANK0 ] int 
 14497 ;; Auto vars:     Size  Location     Type
 14498 ;;  sign            1   13[BANK0 ] unsigned char 
 14499 ;; Return value:  Size  Location     Type
 14500 ;;                  3    8[BANK0 ] float 
 14501 ;; Registers used:
 14502 ;;		wreg, status,2, status,0, pclath, cstack
 14503 ;; Tracked objects:
 14504 ;;		On entry : 0/0
 14505 ;;		On exit  : 0/0
 14506 ;;		Unchanged: 0/0
 14507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14508 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;Total ram usage:        6 bytes
 14513 ;; Hardware stack levels used:    1
 14514 ;; Hardware stack levels required when called:    6
 14515 ;; This function calls:
 14516 ;;		___ftpack
 14517 ;; This function is called by:
 14518 ;;		_getPercentValue
 14519 ;;		_setPercentValue
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           
 14524                           ;psect for function ___awtoft
 14525  1EDA                     ___awtoft:	
 14526                           
 14527                           ;incstack = 0
 14528                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14529  1EDA  0020               	movlb	0	; select bank0
 14530  1EDB  01AD               	clrf	___awtoft@sign
 14531  1EDC  1FA9               	btfss	___awtoft@c+1,7
 14532  1EDD  2EE5               	goto	l5897
 14533  1EDE  09A8               	comf	___awtoft@c,f
 14534  1EDF  09A9               	comf	___awtoft@c+1,f
 14535  1EE0  0AA8               	incf	___awtoft@c,f
 14536  1EE1  1903               	skipnz
 14537  1EE2  0AA9               	incf	___awtoft@c+1,f
 14538  1EE3  01AD               	clrf	___awtoft@sign
 14539  1EE4  0AAD               	incf	___awtoft@sign,f
 14540  1EE5                     l5897:	
 14541  1EE5  0828               	movf	___awtoft@c,w
 14542  1EE6  00A0               	movwf	___ftpack@arg
 14543  1EE7  0829               	movf	___awtoft@c+1,w
 14544  1EE8  00A1               	movwf	___ftpack@arg+1
 14545  1EE9  01A2               	clrf	___ftpack@arg+2
 14546  1EEA  308E               	movlw	142
 14547  1EEB  00AB               	movwf	??___awtoft
 14548  1EEC  082B               	movf	??___awtoft,w
 14549  1EED  00A3               	movwf	___ftpack@exp
 14550  1EEE  082D               	movf	___awtoft@sign,w
 14551  1EEF  00AC               	movwf	??___awtoft+1
 14552  1EF0  082C               	movf	??___awtoft+1,w
 14553  1EF1  00A4               	movwf	___ftpack@sign
 14554  1EF2  3189  2111         	fcall	___ftpack
 14555  1EF4  0020               	movlb	0	; select bank0
 14556  1EF5  0820               	movf	?___ftpack,w
 14557  1EF6  00A8               	movwf	?___awtoft
 14558  1EF7  0821               	movf	?___ftpack+1,w
 14559  1EF8  00A9               	movwf	?___awtoft+1
 14560  1EF9  0822               	movf	?___ftpack+2,w
 14561  1EFA  00AA               	movwf	?___awtoft+2
 14562  1EFB  0008               	return
 14563  1EFC                     __end_of___awtoft:	
 14564                           
 14565                           	psect	text85
 14566  0911                     __ptext85:	
 14567 ;; *************** function ___ftpack *****************
 14568 ;; Defined at:
 14569 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14570 ;; Parameters:    Size  Location     Type
 14571 ;;  arg             3    0[BANK0 ] unsigned um
 14572 ;;  exp             1    3[BANK0 ] unsigned char 
 14573 ;;  sign            1    4[BANK0 ] unsigned char 
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;		None
 14576 ;; Return value:  Size  Location     Type
 14577 ;;                  3    0[BANK0 ] float 
 14578 ;; Registers used:
 14579 ;;		wreg, status,2, status,0
 14580 ;; Tracked objects:
 14581 ;;		On entry : 0/0
 14582 ;;		On exit  : 0/0
 14583 ;;		Unchanged: 0/0
 14584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14585 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;Total ram usage:        8 bytes
 14590 ;; Hardware stack levels used:    1
 14591 ;; Hardware stack levels required when called:    5
 14592 ;; This function calls:
 14593 ;;		Nothing
 14594 ;; This function is called by:
 14595 ;;		___awtoft
 14596 ;;		___ftadd
 14597 ;;		___ftdiv
 14598 ;;		___ftmul
 14599 ;; This function uses a non-reentrant model
 14600 ;;
 14601                           
 14602                           
 14603                           ;psect for function ___ftpack
 14604  0911                     ___ftpack:	
 14605                           
 14606                           ;incstack = 0
 14607                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14608  0911  0020               	movlb	0	; select bank0
 14609  0912  0823               	movf	___ftpack@exp,w
 14610  0913  1903               	btfsc	3,2
 14611  0914  291A               	goto	l5847
 14612  0915  0822               	movf	___ftpack@arg+2,w
 14613  0916  0421               	iorwf	___ftpack@arg+1,w
 14614  0917  0420               	iorwf	___ftpack@arg,w
 14615  0918  1D03               	skipz
 14616  0919  292B               	goto	l5853
 14617  091A                     l5847:	
 14618  091A  3000               	movlw	0
 14619  091B  00A0               	movwf	?___ftpack
 14620  091C  3000               	movlw	0
 14621  091D  00A1               	movwf	?___ftpack+1
 14622  091E  3000               	movlw	0
 14623  091F  00A2               	movwf	?___ftpack+2
 14624  0920  0008               	return
 14625  0921                     l5851:	
 14626  0921  3001               	movlw	1
 14627  0922  00A5               	movwf	??___ftpack
 14628  0923  0825               	movf	??___ftpack,w
 14629  0924  07A3               	addwf	___ftpack@exp,f
 14630  0925  3001               	movlw	1
 14631  0926                     u4315:	
 14632  0926  36A2               	lsrf	___ftpack@arg+2,f
 14633  0927  0CA1               	rrf	___ftpack@arg+1,f
 14634  0928  0CA0               	rrf	___ftpack@arg,f
 14635  0929  0B89               	decfsz	9,f
 14636  092A  2926               	goto	u4315
 14637  092B                     l5853:	
 14638  092B  30FE               	movlw	254
 14639  092C  0522               	andwf	___ftpack@arg+2,w
 14640  092D  1903               	btfsc	3,2
 14641  092E  2944               	goto	l2985
 14642  092F  2921               	goto	l5851
 14643  0930                     l5855:	
 14644  0930  3001               	movlw	1
 14645  0931  00A5               	movwf	??___ftpack
 14646  0932  0825               	movf	??___ftpack,w
 14647  0933  07A3               	addwf	___ftpack@exp,f
 14648  0934  3001               	movlw	1
 14649  0935  07A0               	addwf	___ftpack@arg,f
 14650  0936  3000               	movlw	0
 14651  0937  1803               	skipnc
 14652  0938  3001               	movlw	1
 14653  0939  07A1               	addwf	___ftpack@arg+1,f
 14654  093A  3000               	movlw	0
 14655  093B  1803               	skipnc
 14656  093C  3001               	movlw	1
 14657  093D  07A2               	addwf	___ftpack@arg+2,f
 14658  093E  3001               	movlw	1
 14659  093F                     u4335:	
 14660  093F  36A2               	lsrf	___ftpack@arg+2,f
 14661  0940  0CA1               	rrf	___ftpack@arg+1,f
 14662  0941  0CA0               	rrf	___ftpack@arg,f
 14663  0942  0B89               	decfsz	9,f
 14664  0943  293F               	goto	u4335
 14665  0944                     l2985:	
 14666  0944  30FF               	movlw	255
 14667  0945  0522               	andwf	___ftpack@arg+2,w
 14668  0946  1903               	btfsc	3,2
 14669  0947  2951               	goto	l5863
 14670  0948  2930               	goto	l5855
 14671  0949                     l5861:	
 14672  0949  3001               	movlw	1
 14673  094A  02A3               	subwf	___ftpack@exp,f
 14674  094B  3001               	movlw	1
 14675  094C                     u4355:	
 14676  094C  35A0               	lslf	___ftpack@arg,f
 14677  094D  0DA1               	rlf	___ftpack@arg+1,f
 14678  094E  0DA2               	rlf	___ftpack@arg+2,f
 14679  094F  0B89               	decfsz	9,f
 14680  0950  294C               	goto	u4355
 14681  0951                     l5863:	
 14682  0951  1FA1               	btfss	___ftpack@arg+1,7
 14683  0952  2949               	goto	l5861
 14684  0953  1823               	btfsc	___ftpack@exp,0
 14685  0954  295B               	goto	l2991
 14686  0955  30FF               	movlw	255
 14687  0956  05A0               	andwf	___ftpack@arg,f
 14688  0957  307F               	movlw	127
 14689  0958  05A1               	andwf	___ftpack@arg+1,f
 14690  0959  30FF               	movlw	255
 14691  095A  05A2               	andwf	___ftpack@arg+2,f
 14692  095B                     l2991:	
 14693  095B  1003               	clrc
 14694  095C  0CA3               	rrf	___ftpack@exp,f
 14695  095D  0823               	movf	___ftpack@exp,w
 14696  095E  00A5               	movwf	??___ftpack
 14697  095F  01A6               	clrf	??___ftpack+1
 14698  0960  01A7               	clrf	??___ftpack+2
 14699  0961  3010               	movlw	16
 14700  0962                     u4385:	
 14701  0962  35A5               	lslf	??___ftpack,f
 14702  0963  0DA6               	rlf	??___ftpack+1,f
 14703  0964  0DA7               	rlf	??___ftpack+2,f
 14704  0965  0B89               	decfsz	9,f
 14705  0966  2962               	goto	u4385
 14706  0967  0825               	movf	??___ftpack,w
 14707  0968  04A0               	iorwf	___ftpack@arg,f
 14708  0969  0826               	movf	??___ftpack+1,w
 14709  096A  04A1               	iorwf	___ftpack@arg+1,f
 14710  096B  0827               	movf	??___ftpack+2,w
 14711  096C  04A2               	iorwf	___ftpack@arg+2,f
 14712  096D  0824               	movf	___ftpack@sign,w
 14713  096E  1903               	btfsc	3,2
 14714  096F  0008               	return
 14715  0970  17A2               	bsf	___ftpack@arg+2,7
 14716  0971  0008               	return
 14717  0972                     __end_of___ftpack:	
 14718                           
 14719                           	psect	text86
 14720  1594                     __ptext86:	
 14721 ;; *************** function _setLED *****************
 14722 ;; Defined at:
 14723 ;;		line 76 in file "../src/LED_B1.c"
 14724 ;; Parameters:    Size  Location     Type
 14725 ;;  led             1    wreg     unsigned char 
 14726 ;;  command         1    2[BANK0 ] unsigned char 
 14727 ;; Auto vars:     Size  Location     Type
 14728 ;;  led             1    3[BANK0 ] unsigned char 
 14729 ;; Return value:  Size  Location     Type
 14730 ;;		None               void
 14731 ;; Registers used:
 14732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14733 ;; Tracked objects:
 14734 ;;		On entry : 0/0
 14735 ;;		On exit  : 0/0
 14736 ;;		Unchanged: 0/0
 14737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14738 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;Total ram usage:        2 bytes
 14743 ;; Hardware stack levels used:    1
 14744 ;; Hardware stack levels required when called:    6
 14745 ;; This function calls:
 14746 ;;		_LedPointSelect
 14747 ;; This function is called by:
 14748 ;;		_setDimmerLights
 14749 ;;		_setLED_Initialization
 14750 ;;		_setSw_Initialization
 14751 ;;		_setMain_Exception
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           
 14756                           ;psect for function _setLED
 14757  1594                     _setLED:	
 14758                           
 14759                           ;incstack = 0
 14760                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14761                           ;setLED@led stored from wreg
 14762  1594  0020               	movlb	0	; select bank0
 14763  1595  00A3               	movwf	setLED@led
 14764                           
 14765                           ;LED_B1.c: 77: LedPointSelect(led);
 14766  1596  0823               	movf	setLED@led,w
 14767  1597  319D  25E8  3195   	fcall	_LedPointSelect
 14768                           
 14769                           ;LED_B1.c: 78: if (command == 0) {
 14770  159A  0020               	movlb	0	; select bank0
 14771  159B  08A2               	movf	setLED@command,f
 14772  159C  1D03               	skipz
 14773  159D  2DAB               	goto	l6615
 14774                           
 14775                           ;LED_B1.c: 80: if (led == 1) {
 14776  159E  0823               	movf	setLED@led,w
 14777  159F  3A01               	xorlw	1
 14778  15A0  1D03               	skipz
 14779  15A1  2DA3               	goto	l6607
 14780                           
 14781                           ;LED_B1.c: 84: RA3 = 1;
 14782  15A2  158C               	bsf	12,3	;volatile
 14783  15A3                     l6607:	
 14784                           
 14785                           ;LED_B1.c: 86: }
 14786                           ;LED_B1.c: 89: if (led == 2) {
 14787  15A3  0823               	movf	setLED@led,w
 14788  15A4  3A02               	xorlw	2
 14789  15A5  1903               	btfsc	3,2
 14790                           
 14791                           ;LED_B1.c: 93: RC7 = 1;
 14792  15A6  178E               	bsf	14,7	;volatile
 14793                           
 14794                           ;LED_B1.c: 95: }
 14795                           ;LED_B1.c: 107: if (led == 99) {
 14796  15A7  0823               	movf	setLED@led,w
 14797  15A8  3A63               	xorlw	99
 14798  15A9  1903               	btfsc	3,2
 14799                           
 14800                           ;LED_B1.c: 111: RB5 = 1;
 14801  15AA  168D               	bsf	13,5	;volatile
 14802  15AB                     l6615:	
 14803                           
 14804                           ;LED_B1.c: 113: }
 14805                           ;LED_B1.c: 115: }
 14806                           ;LED_B1.c: 116: if (command == 1) {
 14807  15AB  0822               	movf	setLED@command,w
 14808  15AC  3A01               	xorlw	1
 14809  15AD  1D03               	skipz
 14810  15AE  2DBC               	goto	l6629
 14811                           
 14812                           ;LED_B1.c: 118: if (led == 1) {
 14813  15AF  0823               	movf	setLED@led,w
 14814  15B0  3A01               	xorlw	1
 14815  15B1  1D03               	skipz
 14816  15B2  2DB4               	goto	l6621
 14817                           
 14818                           ;LED_B1.c: 122: RA3 = 0;
 14819  15B3  118C               	bcf	12,3	;volatile
 14820  15B4                     l6621:	
 14821                           
 14822                           ;LED_B1.c: 124: }
 14823                           ;LED_B1.c: 127: if (led == 2) {
 14824  15B4  0823               	movf	setLED@led,w
 14825  15B5  3A02               	xorlw	2
 14826  15B6  1903               	btfsc	3,2
 14827                           
 14828                           ;LED_B1.c: 131: RC7 = 0;
 14829  15B7  138E               	bcf	14,7	;volatile
 14830                           
 14831                           ;LED_B1.c: 133: }
 14832                           ;LED_B1.c: 145: if (led == 99) {
 14833  15B8  0823               	movf	setLED@led,w
 14834  15B9  3A63               	xorlw	99
 14835  15BA  1903               	btfsc	3,2
 14836                           
 14837                           ;LED_B1.c: 149: RB5 = 0;
 14838  15BB  128D               	bcf	13,5	;volatile
 14839  15BC                     l6629:	
 14840                           
 14841                           ;LED_B1.c: 151: }
 14842                           ;LED_B1.c: 153: }
 14843                           ;LED_B1.c: 154: if (command == 10) {
 14844  15BC  0822               	movf	setLED@command,w
 14845  15BD  3A0A               	xorlw	10
 14846  15BE  1D03               	skipz
 14847  15BF  2DDA               	goto	l6645
 14848                           
 14849                           ;LED_B1.c: 155: LED->GO = 0;
 14850  15C0  087B               	movf	_LED,w
 14851  15C1  0086               	movwf	6
 14852  15C2  3001               	movlw	1	; select bank2/3
 14853  15C3  0087               	movwf	7
 14854  15C4  1081               	bcf	1,1
 14855                           
 14856                           ;LED_B1.c: 156: LED->Time = 0;
 14857  15C5  0A7B               	incf	_LED,w
 14858  15C6  0086               	movwf	6
 14859  15C7  3001               	movlw	1	; select bank2/3
 14860  15C8  0087               	movwf	7
 14861  15C9  3000               	movlw	0
 14862  15CA  3FC0               	movwi [0]fsr1
 14863  15CB  3FC1               	movwi [1]fsr1
 14864                           
 14865                           ;LED_B1.c: 158: if (led == 1) {
 14866  15CC  0823               	movf	setLED@led,w
 14867  15CD  3A01               	xorlw	1
 14868  15CE  1D03               	skipz
 14869  15CF  2DD2               	goto	l6637
 14870                           
 14871                           ;LED_B1.c: 162: RA3 = 1;
 14872  15D0  158C               	bsf	12,3	;volatile
 14873                           
 14874                           ;LED_B1.c: 164: }
 14875  15D1  2DD6               	goto	l6641
 14876  15D2                     l6637:	
 14877                           
 14878                           ;LED_B1.c: 167: else if (led == 2) {
 14879  15D2  0823               	movf	setLED@led,w
 14880  15D3  3A02               	xorlw	2
 14881  15D4  1903               	btfsc	3,2
 14882                           
 14883                           ;LED_B1.c: 171: RC7 = 1;
 14884  15D5  178E               	bsf	14,7	;volatile
 14885  15D6                     l6641:	
 14886                           
 14887                           ;LED_B1.c: 173: }
 14888                           ;LED_B1.c: 185: if (led == 99) {
 14889  15D6  0823               	movf	setLED@led,w
 14890  15D7  3A63               	xorlw	99
 14891  15D8  1903               	btfsc	3,2
 14892                           
 14893                           ;LED_B1.c: 189: RB5 = 1;
 14894  15D9  168D               	bsf	13,5	;volatile
 14895  15DA                     l6645:	
 14896                           
 14897                           ;LED_B1.c: 191: }
 14898                           ;LED_B1.c: 193: }
 14899                           ;LED_B1.c: 194: if (command == 11) {
 14900  15DA  0822               	movf	setLED@command,w
 14901  15DB  3A0B               	xorlw	11
 14902  15DC  1D03               	skipz
 14903  15DD  0008               	return
 14904                           
 14905                           ;LED_B1.c: 195: LED->GO = 1;
 14906  15DE  087B               	movf	_LED,w
 14907  15DF  0086               	movwf	6
 14908  15E0  3001               	movlw	1	; select bank2/3
 14909  15E1  0087               	movwf	7
 14910  15E2  1481               	bsf	1,1
 14911  15E3  0008               	return
 14912  15E4                     __end_of_setLED:	
 14913                           
 14914                           	psect	text87
 14915  1DE8                     __ptext87:	
 14916 ;; *************** function _LedPointSelect *****************
 14917 ;; Defined at:
 14918 ;;		line 7 in file "../src/LED_B1.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;  led             1    wreg     unsigned char 
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  led             1    1[BANK0 ] unsigned char 
 14923 ;; Return value:  Size  Location     Type
 14924 ;;		None               void
 14925 ;; Registers used:
 14926 ;;		wreg
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;Total ram usage:        2 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    5
 14939 ;; This function calls:
 14940 ;;		Nothing
 14941 ;; This function is called by:
 14942 ;;		_setLED_Initialization
 14943 ;;		_setLED
 14944 ;;		_setLED_Main
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           
 14949                           ;psect for function _LedPointSelect
 14950  1DE8                     _LedPointSelect:	
 14951                           
 14952                           ;incstack = 0
 14953                           ; Regs used in _LedPointSelect: [wreg]
 14954                           ;LedPointSelect@led stored from wreg
 14955  1DE8  0020               	movlb	0	; select bank0
 14956  1DE9  00A1               	movwf	LedPointSelect@led
 14957                           
 14958                           ;LED_B1.c: 9: if (led == 1) {
 14959  1DEA  0821               	movf	LedPointSelect@led,w
 14960  1DEB  3A01               	xorlw	1
 14961  1DEC  1D03               	skipz
 14962  1DED  2DF2               	goto	l999
 14963                           
 14964                           ;LED_B1.c: 10: LED = &VarLED1;
 14965  1DEE  3061               	movlw	_VarLED1& (0+255)
 14966  1DEF  00A0               	movwf	??_LedPointSelect
 14967  1DF0  0820               	movf	??_LedPointSelect,w
 14968  1DF1  00FB               	movwf	_LED
 14969  1DF2                     l999:	
 14970                           
 14971                           ;LED_B1.c: 11: }
 14972                           ;LED_B1.c: 14: if (led == 2) {
 14973  1DF2  0821               	movf	LedPointSelect@led,w
 14974  1DF3  3A02               	xorlw	2
 14975  1DF4  1D03               	skipz
 14976  1DF5  2DFA               	goto	l1000
 14977                           
 14978                           ;LED_B1.c: 15: LED = &VarLED2;
 14979  1DF6  3065               	movlw	_VarLED2& (0+255)
 14980  1DF7  00A0               	movwf	??_LedPointSelect
 14981  1DF8  0820               	movf	??_LedPointSelect,w
 14982  1DF9  00FB               	movwf	_LED
 14983  1DFA                     l1000:	
 14984                           
 14985                           ;LED_B1.c: 16: }
 14986                           ;LED_B1.c: 24: if (led == 99) {
 14987  1DFA  0821               	movf	LedPointSelect@led,w
 14988  1DFB  3A63               	xorlw	99
 14989  1DFC  1D03               	skipz
 14990  1DFD  0008               	return
 14991                           
 14992                           ;LED_B1.c: 25: LED = &VarErrLED;
 14993  1DFE  305D               	movlw	_VarErrLED& (0+255)
 14994  1DFF  00A0               	movwf	??_LedPointSelect
 14995  1E00  0820               	movf	??_LedPointSelect,w
 14996  1E01  00FB               	movwf	_LED
 14997  1E02  0008               	return
 14998  1E03                     __end_of_LedPointSelect:	
 14999                           
 15000                           	psect	text88
 15001  1D41                     __ptext88:	
 15002 ;; *************** function _setDimmerLights_Line *****************
 15003 ;; Defined at:
 15004 ;;		line 670 in file "../src/Dimmer_B1.c"
 15005 ;; Parameters:    Size  Location     Type
 15006 ;;  lights          1    wreg     unsigned char 
 15007 ;; Auto vars:     Size  Location     Type
 15008 ;;  lights          1    0[BANK0 ] unsigned char 
 15009 ;; Return value:  Size  Location     Type
 15010 ;;		None               void
 15011 ;; Registers used:
 15012 ;;		wreg
 15013 ;; Tracked objects:
 15014 ;;		On entry : 0/0
 15015 ;;		On exit  : 0/0
 15016 ;;		Unchanged: 0/0
 15017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;Total ram usage:        1 bytes
 15023 ;; Hardware stack levels used:    1
 15024 ;; Hardware stack levels required when called:    5
 15025 ;; This function calls:
 15026 ;;		Nothing
 15027 ;; This function is called by:
 15028 ;;		_setDimmerLights
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           
 15033                           ;psect for function _setDimmerLights_Line
 15034  1D41                     _setDimmerLights_Line:	
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _setDimmerLights_Line: [wreg]
 15038                           ;setDimmerLights_Line@lights stored from wreg
 15039  1D41  0020               	movlb	0	; select bank0
 15040  1D42  00A0               	movwf	setDimmerLights_Line@lights
 15041                           
 15042                           ;Dimmer_B1.c: 672: DimmerLights1.Line = 0;
 15043  1D43  0023               	movlb	3	; select bank3
 15044  1D44  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 15045                           
 15046                           ;Dimmer_B1.c: 675: DimmerLights2.Line = 0;
 15047  1D45  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 15048                           
 15049                           ;Dimmer_B1.c: 681: if (lights == 1) {
 15050  1D46  0020               	movlb	0	; select bank0
 15051  1D47  0820               	movf	setDimmerLights_Line@lights,w
 15052  1D48  3A01               	xorlw	1
 15053  1D49  1D03               	skipz
 15054  1D4A  2D4E               	goto	l6655
 15055                           
 15056                           ;Dimmer_B1.c: 682: DimmerLights1.Line = 1;
 15057  1D4B  0023               	movlb	3	; select bank3
 15058  1D4C  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 15059                           
 15060                           ;Dimmer_B1.c: 683: }
 15061  1D4D  0008               	return
 15062  1D4E                     l6655:	
 15063                           
 15064                           ;Dimmer_B1.c: 686: else if (lights == 2) {
 15065  1D4E  0020               	movlb	0	; select bank0
 15066  1D4F  0820               	movf	setDimmerLights_Line@lights,w
 15067  1D50  3A02               	xorlw	2
 15068  1D51  1D03               	skipz
 15069  1D52  0008               	return
 15070                           
 15071                           ;Dimmer_B1.c: 687: DimmerLights2.Line = 1;
 15072  1D53  0023               	movlb	3	; select bank3
 15073  1D54  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 15074  1D55  0008               	return
 15075  1D56                     __end_of_setDimmerLights_Line:	
 15076                           
 15077                           	psect	text89
 15078  115E                     __ptext89:	
 15079 ;; *************** function _getMain_All_Error_Status *****************
 15080 ;; Defined at:
 15081 ;;		line 369 in file "../src/main_B1.c"
 15082 ;; Parameters:    Size  Location     Type
 15083 ;;  command         1    wreg     unsigned char 
 15084 ;; Auto vars:     Size  Location     Type
 15085 ;;  command         1    5[BANK0 ] unsigned char 
 15086 ;;  status          1    6[BANK0 ] unsigned char 
 15087 ;; Return value:  Size  Location     Type
 15088 ;;                  1    wreg      unsigned char 
 15089 ;; Registers used:
 15090 ;;		wreg, status,2, status,0
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;Total ram usage:        7 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    5
 15103 ;; This function calls:
 15104 ;;		Nothing
 15105 ;; This function is called by:
 15106 ;;		_DimmerLights_Main
 15107 ;;		_setDimmerLights
 15108 ;;		_setDimmerLights_Adj
 15109 ;;		_Load_Main
 15110 ;;		_setTemp_Main
 15111 ;;		_setRF_Main
 15112 ;;		_getRxData
 15113 ;;		_Switch_Main
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           
 15118                           ;psect for function _getMain_All_Error_Status
 15119  115E                     _getMain_All_Error_Status:	
 15120                           
 15121                           ;incstack = 0
 15122                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15123                           ;getMain_All_Error_Status@command stored from wreg
 15124  115E  0020               	movlb	0	; select bank0
 15125  115F  00A5               	movwf	getMain_All_Error_Status@command
 15126                           
 15127                           ;main_B1.c: 370: char status = 0;
 15128  1160  01A6               	clrf	getMain_All_Error_Status@status
 15129                           
 15130                           ;main_B1.c: 381: if (status == 0 && command != 2) {
 15131  1161  08A6               	movf	getMain_All_Error_Status@status,f
 15132  1162  1D03               	skipz
 15133  1163  2978               	goto	l6587
 15134  1164  0825               	movf	getMain_All_Error_Status@command,w
 15135  1165  3A02               	xorlw	2
 15136  1166  1903               	skipnz
 15137  1167  2978               	goto	l6587
 15138                           
 15139                           ;main_B1.c: 382: status = Temp.ERROR == 1 ? 2 : 0;
 15140  1168  0021               	movlb	1	; select bank1
 15141  1169  18D7               	btfsc	_Temp^(0+128),1
 15142  116A  296F               	goto	l6585
 15143  116B  0020               	movlb	0	; select bank0
 15144  116C  01A1               	clrf	_getMain_All_Error_Status$7115
 15145  116D  01A2               	clrf	_getMain_All_Error_Status$7115+1
 15146  116E  2974               	goto	l2724
 15147  116F                     l6585:	
 15148  116F  3002               	movlw	2
 15149  1170  0020               	movlb	0	; select bank0
 15150  1171  00A1               	movwf	_getMain_All_Error_Status$7115
 15151  1172  3000               	movlw	0
 15152  1173  00A2               	movwf	_getMain_All_Error_Status$7115+1
 15153  1174                     l2724:	
 15154  1174  0821               	movf	_getMain_All_Error_Status$7115,w
 15155  1175  00A0               	movwf	??_getMain_All_Error_Status
 15156  1176  0820               	movf	??_getMain_All_Error_Status,w
 15157  1177  00A6               	movwf	getMain_All_Error_Status@status
 15158  1178                     l6587:	
 15159                           
 15160                           ;main_B1.c: 383: }
 15161                           ;main_B1.c: 388: if (status == 0 && command != 3) {
 15162  1178  08A6               	movf	getMain_All_Error_Status@status,f
 15163  1179  1D03               	skipz
 15164  117A  298F               	goto	l2725
 15165  117B  0825               	movf	getMain_All_Error_Status@command,w
 15166  117C  3A03               	xorlw	3
 15167  117D  1903               	skipnz
 15168  117E  298F               	goto	l2725
 15169                           
 15170                           ;main_B1.c: 389: status = Load.ERROR == 1 ? 3 : 0;
 15171  117F  0022               	movlb	2	; select bank2
 15172  1180  1AA5               	btfsc	_Load^(0+256),5
 15173  1181  2986               	goto	l6595
 15174  1182  0020               	movlb	0	; select bank0
 15175  1183  01A3               	clrf	_getMain_All_Error_Status$7116
 15176  1184  01A4               	clrf	_getMain_All_Error_Status$7116+1
 15177  1185  298B               	goto	l2729
 15178  1186                     l6595:	
 15179  1186  3003               	movlw	3
 15180  1187  0020               	movlb	0	; select bank0
 15181  1188  00A3               	movwf	_getMain_All_Error_Status$7116
 15182  1189  3000               	movlw	0
 15183  118A  00A4               	movwf	_getMain_All_Error_Status$7116+1
 15184  118B                     l2729:	
 15185  118B  0823               	movf	_getMain_All_Error_Status$7116,w
 15186  118C  00A0               	movwf	??_getMain_All_Error_Status
 15187  118D  0820               	movf	??_getMain_All_Error_Status,w
 15188  118E  00A6               	movwf	getMain_All_Error_Status@status
 15189  118F                     l2725:	
 15190                           
 15191                           ;main_B1.c: 390: }
 15192                           ;main_B1.c: 406: return status;
 15193  118F  0826               	movf	getMain_All_Error_Status@status,w
 15194  1190  0008               	return
 15195  1191                     __end_of_getMain_All_Error_Status:	
 15196                           
 15197                           	psect	text90
 15198  10D0                     __ptext90:	
 15199 ;; *************** function _getMain_LightsStatus *****************
 15200 ;; Defined at:
 15201 ;;		line 342 in file "../src/main_B1.c"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;		None
 15204 ;; Auto vars:     Size  Location     Type
 15205 ;;  i               2    6[BANK0 ] int 
 15206 ;;  status          1    8[BANK0 ] unsigned char 
 15207 ;;  count           1    5[BANK0 ] unsigned char 
 15208 ;; Return value:  Size  Location     Type
 15209 ;;                  1    wreg      unsigned char 
 15210 ;; Registers used:
 15211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15212 ;; Tracked objects:
 15213 ;;		On entry : 0/0
 15214 ;;		On exit  : 0/0
 15215 ;;		Unchanged: 0/0
 15216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;Total ram usage:        5 bytes
 15222 ;; Hardware stack levels used:    1
 15223 ;; Hardware stack levels required when called:    7
 15224 ;; This function calls:
 15225 ;;		_getDimmerLights_Status
 15226 ;; This function is called by:
 15227 ;;		_DimmerLights_Main
 15228 ;;		_Flash_Memory_Main
 15229 ;;		_Load_Main
 15230 ;;		_setMain_Exception
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234                           
 15235                           ;psect for function _getMain_LightsStatus
 15236  10D0                     _getMain_LightsStatus:	
 15237                           
 15238                           ;main_B1.c: 343: char status = 0, count = 0;
 15239                           
 15240                           ;incstack = 0
 15241                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15242  10D0  0020               	movlb	0	; select bank0
 15243  10D1  01A8               	clrf	getMain_LightsStatus@status
 15244  10D2  01A5               	clrf	getMain_LightsStatus@count
 15245                           
 15246                           ;main_B1.c: 349: count = 2;
 15247  10D3  3002               	movlw	2
 15248  10D4  00A4               	movwf	??_getMain_LightsStatus
 15249  10D5  0824               	movf	??_getMain_LightsStatus,w
 15250  10D6  00A5               	movwf	getMain_LightsStatus@count
 15251                           
 15252                           ;main_B1.c: 355: for (int i = 0; i < count; i++) {
 15253  10D7  01A6               	clrf	getMain_LightsStatus@i
 15254  10D8  01A7               	clrf	getMain_LightsStatus@i+1
 15255  10D9                     l6901:	
 15256  10D9  0827               	movf	getMain_LightsStatus@i+1,w
 15257  10DA  3A80               	xorlw	128
 15258  10DB  00A4               	movwf	??_getMain_LightsStatus
 15259  10DC  3080               	movlw	128
 15260  10DD  0224               	subwf	??_getMain_LightsStatus,w
 15261  10DE  1D03               	skipz
 15262  10DF  28E2               	goto	u6115
 15263  10E0  0825               	movf	getMain_LightsStatus@count,w
 15264  10E1  0226               	subwf	getMain_LightsStatus@i,w
 15265  10E2                     u6115:	
 15266  10E2  1803               	btfsc	3,0
 15267  10E3  28FA               	goto	l6903
 15268                           
 15269                           ;main_B1.c: 356: if (status == 0) {
 15270  10E4  0020               	movlb	0	; select bank0
 15271  10E5  08A8               	movf	getMain_LightsStatus@status,f
 15272  10E6  1D03               	skipz
 15273  10E7  28F5               	goto	l6899
 15274                           
 15275                           ;main_B1.c: 361: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15276  10E8  0826               	movf	getMain_LightsStatus@i,w
 15277  10E9  3E01               	addlw	1
 15278  10EA  319B  23D1  3190   	fcall	_getDimmerLights_Status
 15279  10ED  3A01               	xorlw	1
 15280  10EE  3000               	movlw	0
 15281  10EF  1903               	skipnz
 15282  10F0  3001               	movlw	1
 15283  10F1  0020               	movlb	0	; select bank0
 15284  10F2  00A4               	movwf	??_getMain_LightsStatus
 15285  10F3  0824               	movf	??_getMain_LightsStatus,w
 15286  10F4  00A8               	movwf	getMain_LightsStatus@status
 15287  10F5                     l6899:	
 15288  10F5  3001               	movlw	1
 15289  10F6  07A6               	addwf	getMain_LightsStatus@i,f
 15290  10F7  3000               	movlw	0
 15291  10F8  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15292  10F9  28D9               	goto	l6901
 15293  10FA                     l6903:	
 15294                           
 15295                           ;main_B1.c: 363: }
 15296                           ;main_B1.c: 364: }
 15297                           ;main_B1.c: 365: return status;
 15298  10FA  0020               	movlb	0	; select bank0
 15299  10FB  0828               	movf	getMain_LightsStatus@status,w
 15300  10FC  0008               	return
 15301  10FD                     __end_of_getMain_LightsStatus:	
 15302                           
 15303                           	psect	text91
 15304  1AF5                     __ptext91:	
 15305 ;; *************** function _getLoad_OK *****************
 15306 ;; Defined at:
 15307 ;;		line 219 in file "../src/OverLoad_B1.c"
 15308 ;; Parameters:    Size  Location     Type
 15309 ;;		None
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;  ok              1    0[BANK0 ] unsigned char 
 15312 ;; Return value:  Size  Location     Type
 15313 ;;                  1    wreg      unsigned char 
 15314 ;; Registers used:
 15315 ;;		wreg, status,2
 15316 ;; Tracked objects:
 15317 ;;		On entry : 0/0
 15318 ;;		On exit  : 0/0
 15319 ;;		Unchanged: 0/0
 15320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;Total ram usage:        1 bytes
 15326 ;; Hardware stack levels used:    1
 15327 ;; Hardware stack levels required when called:    5
 15328 ;; This function calls:
 15329 ;;		Nothing
 15330 ;; This function is called by:
 15331 ;;		_DimmerLights_Main
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           
 15336                           ;psect for function _getLoad_OK
 15337  1AF5                     _getLoad_OK:	
 15338                           
 15339                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15340                           
 15341                           ;incstack = 0
 15342                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15343  1AF5  3000               	movlw	0
 15344  1AF6  0022               	movlb	2	; select bank2
 15345  1AF7  1BA5               	btfsc	_Load^(0+256),7
 15346  1AF8  3001               	movlw	1
 15347  1AF9  0020               	movlb	0	; select bank0
 15348  1AFA  00A0               	movwf	getLoad_OK@ok
 15349                           
 15350                           ;OverLoad_B1.c: 221: return ok;
 15351  1AFB  0820               	movf	getLoad_OK@ok,w
 15352  1AFC  0008               	return
 15353  1AFD                     __end_of_getLoad_OK:	
 15354                           
 15355                           	psect	text92
 15356  1D6B                     __ptext92:	
 15357 ;; *************** function _DimmerLights_Initialization *****************
 15358 ;; Defined at:
 15359 ;;		line 332 in file "../src/Dimmer_B1.c"
 15360 ;; Parameters:    Size  Location     Type
 15361 ;;		None
 15362 ;; Auto vars:     Size  Location     Type
 15363 ;;		None
 15364 ;; Return value:  Size  Location     Type
 15365 ;;		None               void
 15366 ;; Registers used:
 15367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15368 ;; Tracked objects:
 15369 ;;		On entry : 0/0
 15370 ;;		On exit  : 0/0
 15371 ;;		Unchanged: 0/0
 15372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15377 ;;Total ram usage:        1 bytes
 15378 ;; Hardware stack levels used:    1
 15379 ;; Hardware stack levels required when called:    7
 15380 ;; This function calls:
 15381 ;;		_Dimmer_Initialization
 15382 ;;		_setDimmerLights_Initialization
 15383 ;; This function is called by:
 15384 ;;		_main
 15385 ;; This function uses a non-reentrant model
 15386 ;;
 15387                           
 15388                           
 15389                           ;psect for function _DimmerLights_Initialization
 15390  1D6B                     _DimmerLights_Initialization:	
 15391                           
 15392                           ;Dimmer_B1.c: 334: DimmerLights11 = &DimmerLights1;
 15393                           
 15394                           ;incstack = 0
 15395                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15396  1D6B  30BE               	movlw	_DimmerLights1& (0+255)
 15397  1D6C  0020               	movlb	0	; select bank0
 15398  1D6D  00A4               	movwf	??_DimmerLights_Initialization
 15399  1D6E  0824               	movf	??_DimmerLights_Initialization,w
 15400  1D6F  0021               	movlb	1	; select bank1
 15401  1D70  00CD               	movwf	_DimmerLights11^(0+128)
 15402                           
 15403                           ;Dimmer_B1.c: 335: setDimmerLights_Initialization(1);
 15404  1D71  3001               	movlw	1
 15405  1D72  319F  27B1  319D   	fcall	_setDimmerLights_Initialization
 15406                           
 15407                           ;Dimmer_B1.c: 339: DimmerLights22 = &DimmerLights2;
 15408  1D75  30CD               	movlw	_DimmerLights2& (0+255)
 15409  1D76  0020               	movlb	0	; select bank0
 15410  1D77  00A4               	movwf	??_DimmerLights_Initialization
 15411  1D78  0824               	movf	??_DimmerLights_Initialization,w
 15412  1D79  0021               	movlb	1	; select bank1
 15413  1D7A  00CE               	movwf	_DimmerLights22^(0+128)
 15414                           
 15415                           ;Dimmer_B1.c: 340: setDimmerLights_Initialization(2);
 15416  1D7B  3002               	movlw	2
 15417  1D7C  319F  27B1  319D   	fcall	_setDimmerLights_Initialization
 15418                           
 15419                           ;Dimmer_B1.c: 349: Dimmer_Initialization();
 15420  1D7F  319A  229C         	fcall	_Dimmer_Initialization
 15421  1D81  0008               	return
 15422  1D82                     __end_of_DimmerLights_Initialization:	
 15423                           
 15424                           	psect	text93
 15425  1FB1                     __ptext93:	
 15426 ;; *************** function _setDimmerLights_Initialization *****************
 15427 ;; Defined at:
 15428 ;;		line 355 in file "../src/Dimmer_B1.c"
 15429 ;; Parameters:    Size  Location     Type
 15430 ;;  lights          1    wreg     unsigned char 
 15431 ;; Auto vars:     Size  Location     Type
 15432 ;;  lights          1    3[BANK0 ] unsigned char 
 15433 ;; Return value:  Size  Location     Type
 15434 ;;		None               void
 15435 ;; Registers used:
 15436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15437 ;; Tracked objects:
 15438 ;;		On entry : 0/0
 15439 ;;		On exit  : 0/0
 15440 ;;		Unchanged: 0/0
 15441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;Total ram usage:        2 bytes
 15447 ;; Hardware stack levels used:    1
 15448 ;; Hardware stack levels required when called:    6
 15449 ;; This function calls:
 15450 ;;		_DimmerLightsPointSelect
 15451 ;; This function is called by:
 15452 ;;		_DimmerLights_Initialization
 15453 ;; This function uses a non-reentrant model
 15454 ;;
 15455                           
 15456                           
 15457                           ;psect for function _setDimmerLights_Initialization
 15458  1FB1                     _setDimmerLights_Initialization:	
 15459                           
 15460                           ;incstack = 0
 15461                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15462                           ;setDimmerLights_Initialization@lights stored from wreg
 15463  1FB1  0020               	movlb	0	; select bank0
 15464  1FB2  00A3               	movwf	setDimmerLights_Initialization@lights
 15465                           
 15466                           ;Dimmer_B1.c: 357: DimmerLightsPointSelect(lights);
 15467  1FB3  0823               	movf	setDimmerLights_Initialization@lights,w
 15468  1FB4  319C  248F         	fcall	_DimmerLightsPointSelect
 15469                           
 15470                           ;Dimmer_B1.c: 363: DimmerLights->MaxmumValue = ((char)(80*0.8));
 15471  1FB6  3040               	movlw	64
 15472  1FB7  0020               	movlb	0	; select bank0
 15473  1FB8  00A2               	movwf	??_setDimmerLights_Initialization
 15474  1FB9  086F               	movf	_DimmerLights,w
 15475  1FBA  3E05               	addlw	5
 15476  1FBB  0086               	movwf	6
 15477  1FBC  3001               	movlw	1	; select bank2/3
 15478  1FBD  0087               	movwf	7
 15479  1FBE  0822               	movf	??_setDimmerLights_Initialization,w
 15480  1FBF  0081               	movwf	1
 15481                           
 15482                           ;Dimmer_B1.c: 364: DimmerLights->MinimumValue = ((char)(15*0.8));
 15483  1FC0  300C               	movlw	12
 15484  1FC1  00A2               	movwf	??_setDimmerLights_Initialization
 15485  1FC2  086F               	movf	_DimmerLights,w
 15486  1FC3  3E06               	addlw	6
 15487  1FC4  0086               	movwf	6
 15488  1FC5  3001               	movlw	1	; select bank2/3
 15489  1FC6  0087               	movwf	7
 15490  1FC7  0822               	movf	??_setDimmerLights_Initialization,w
 15491  1FC8  0081               	movwf	1
 15492                           
 15493                           ;Dimmer_B1.c: 378: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15494  1FC9  086F               	movf	_DimmerLights,w
 15495  1FCA  3E05               	addlw	5
 15496  1FCB  0086               	movwf	6
 15497  1FCC  3001               	movlw	1	; select bank2/3
 15498  1FCD  0087               	movwf	7
 15499  1FCE  0801               	movf	1,w
 15500  1FCF  00A2               	movwf	??_setDimmerLights_Initialization
 15501  1FD0  086F               	movf	_DimmerLights,w
 15502  1FD1  3E04               	addlw	4
 15503  1FD2  0086               	movwf	6
 15504  1FD3  3001               	movlw	1	; select bank2/3
 15505  1FD4  0087               	movwf	7
 15506  1FD5  0822               	movf	??_setDimmerLights_Initialization,w
 15507  1FD6  0081               	movwf	1
 15508  1FD7  0008               	return
 15509  1FD8                     __end_of_setDimmerLights_Initialization:	
 15510                           
 15511                           	psect	text94
 15512  1A9C                     __ptext94:	
 15513 ;; *************** function _Dimmer_Initialization *****************
 15514 ;; Defined at:
 15515 ;;		line 895 in file "../src/Dimmer_B1.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;		None
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;		None
 15520 ;; Return value:  Size  Location     Type
 15521 ;;		None               void
 15522 ;; Registers used:
 15523 ;;		None
 15524 ;; Tracked objects:
 15525 ;;		On entry : 0/0
 15526 ;;		On exit  : 0/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;Total ram usage:        0 bytes
 15534 ;; Hardware stack levels used:    1
 15535 ;; Hardware stack levels required when called:    5
 15536 ;; This function calls:
 15537 ;;		Nothing
 15538 ;; This function is called by:
 15539 ;;		_DimmerLights_Initialization
 15540 ;; This function uses a non-reentrant model
 15541 ;;
 15542                           
 15543                           
 15544                           ;psect for function _Dimmer_Initialization
 15545  1A9C                     _Dimmer_Initialization:	
 15546                           
 15547                           ;incstack = 0
 15548                           ; Regs used in _Dimmer_Initialization: []
 15549  1A9C  0008               	return
 15550  1A9D                     __end_of_Dimmer_Initialization:	
 15551                           
 15552                           	psect	text95
 15553  1AED                     __ptext95:	
 15554 ;; *************** function _DelayOff_Main *****************
 15555 ;; Defined at:
 15556 ;;		line 41 in file "../src/DelayOff_B1.c"
 15557 ;; Parameters:    Size  Location     Type
 15558 ;;		None
 15559 ;; Auto vars:     Size  Location     Type
 15560 ;;		None
 15561 ;; Return value:  Size  Location     Type
 15562 ;;		None               void
 15563 ;; Registers used:
 15564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15565 ;; Tracked objects:
 15566 ;;		On entry : 0/0
 15567 ;;		On exit  : 0/0
 15568 ;;		Unchanged: 0/0
 15569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;Total ram usage:        0 bytes
 15575 ;; Hardware stack levels used:    1
 15576 ;; Hardware stack levels required when called:   11
 15577 ;; This function calls:
 15578 ;;		_DlyOff_Main
 15579 ;; This function is called by:
 15580 ;;		_main
 15581 ;; This function uses a non-reentrant model
 15582 ;;
 15583                           
 15584                           
 15585                           ;psect for function _DelayOff_Main
 15586  1AED                     _DelayOff_Main:	
 15587                           
 15588                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15589                           
 15590                           ;incstack = 0
 15591                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15592  1AED  3001               	movlw	1
 15593  1AEE  3188  20B4  319A   	fcall	_DlyOff_Main
 15594                           
 15595                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15596  1AF1  3002               	movlw	2
 15597  1AF2  3188  20B4         	fcall	_DlyOff_Main
 15598  1AF4  0008               	return
 15599  1AF5                     __end_of_DelayOff_Main:	
 15600                           
 15601                           	psect	text96
 15602  08B4                     __ptext96:	
 15603 ;; *************** function _DlyOff_Main *****************
 15604 ;; Defined at:
 15605 ;;		line 61 in file "../src/DelayOff_B1.c"
 15606 ;; Parameters:    Size  Location     Type
 15607 ;;  sw              1    wreg     unsigned char 
 15608 ;; Auto vars:     Size  Location     Type
 15609 ;;  sw              1   24[BANK0 ] unsigned char 
 15610 ;; Return value:  Size  Location     Type
 15611 ;;		None               void
 15612 ;; Registers used:
 15613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15614 ;; Tracked objects:
 15615 ;;		On entry : 0/0
 15616 ;;		On exit  : 0/0
 15617 ;;		Unchanged: 0/0
 15618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15622 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15623 ;;Total ram usage:        3 bytes
 15624 ;; Hardware stack levels used:    1
 15625 ;; Hardware stack levels required when called:   10
 15626 ;; This function calls:
 15627 ;;		_DelayOffPointSelect
 15628 ;;		_setBuz
 15629 ;;		_setDimmerLights_ErrorClose
 15630 ;; This function is called by:
 15631 ;;		_DelayOff_Main
 15632 ;; This function uses a non-reentrant model
 15633 ;;
 15634                           
 15635                           
 15636                           ;psect for function _DlyOff_Main
 15637  08B4                     _DlyOff_Main:	
 15638                           
 15639                           ;incstack = 0
 15640                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15641                           ;DlyOff_Main@sw stored from wreg
 15642  08B4  0020               	movlb	0	; select bank0
 15643  08B5  00B8               	movwf	DlyOff_Main@sw
 15644                           
 15645                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15646  08B6  0838               	movf	DlyOff_Main@sw,w
 15647  08B7  319C  24DB  3188   	fcall	_DelayOffPointSelect
 15648                           
 15649                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15650  08BA  0878               	movf	_DelayOff,w
 15651  08BB  0086               	movwf	6
 15652  08BC  3001               	movlw	1	; select bank2/3
 15653  08BD  0087               	movwf	7
 15654  08BE  1C81               	btfss	1,1
 15655  08BF  0008               	return
 15656                           
 15657                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15658  08C0  0878               	movf	_DelayOff,w
 15659  08C1  3E02               	addlw	2
 15660  08C2  0086               	movwf	6
 15661  08C3  3001               	movlw	1	; select bank2/3
 15662  08C4  0087               	movwf	7
 15663  08C5  3001               	movlw	1
 15664  08C6  0781               	addwf	1,f
 15665  08C7  3141               	addfsr 1,1
 15666  08C8  1803               	skipnc
 15667  08C9  0A81               	incf	1,f
 15668                           
 15669                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15670  08CA  0878               	movf	_DelayOff,w
 15671  08CB  3E02               	addlw	2
 15672  08CC  0086               	movwf	6
 15673  08CD  3001               	movlw	1	; select bank2/3
 15674  08CE  0087               	movwf	7
 15675  08CF  3F40               	moviw [0]fsr1
 15676  08D0  0020               	movlb	0	; select bank0
 15677  08D1  00B6               	movwf	??_DlyOff_Main
 15678  08D2  3F41               	moviw [1]fsr1
 15679  08D3  00B7               	movwf	??_DlyOff_Main+1
 15680  08D4  3017               	movlw	23
 15681  08D5  0237               	subwf	??_DlyOff_Main+1,w
 15682  08D6  3070               	movlw	112
 15683  08D7  1903               	skipnz
 15684  08D8  0236               	subwf	??_DlyOff_Main,w
 15685  08D9  1C03               	skipc
 15686  08DA  0008               	return
 15687                           
 15688                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15689  08DB  0878               	movf	_DelayOff,w
 15690  08DC  3E02               	addlw	2
 15691  08DD  0086               	movwf	6
 15692  08DE  3001               	movlw	1	; select bank2/3
 15693  08DF  0087               	movwf	7
 15694  08E0  3000               	movlw	0
 15695  08E1  3FC0               	movwi [0]fsr1
 15696  08E2  3FC1               	movwi [1]fsr1
 15697                           
 15698                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15699  08E3  3001               	movlw	1
 15700  08E4  00B6               	movwf	??_DlyOff_Main
 15701  08E5  0878               	movf	_DelayOff,w
 15702  08E6  3E04               	addlw	4
 15703  08E7  0086               	movwf	6
 15704  08E8  3001               	movlw	1	; select bank2/3
 15705  08E9  0087               	movwf	7
 15706  08EA  0836               	movf	??_DlyOff_Main,w
 15707  08EB  0781               	addwf	1,f
 15708                           
 15709                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15710  08EC  0878               	movf	_DelayOff,w
 15711  08ED  3E04               	addlw	4
 15712  08EE  0086               	movwf	6
 15713  08EF  3001               	movlw	1	; select bank2/3
 15714  08F0  0087               	movwf	7
 15715  08F1  0A78               	incf	_DelayOff,w
 15716  08F2  0084               	movwf	4
 15717  08F3  3001               	movlw	1	; select bank2/3
 15718  08F4  0085               	movwf	5
 15719  08F5  0800               	movf	0,w
 15720  08F6  0201               	subwf	1,w
 15721  08F7  1C03               	skipc
 15722  08F8  0008               	return
 15723                           
 15724                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15725  08F9  0878               	movf	_DelayOff,w
 15726  08FA  3E04               	addlw	4
 15727  08FB  0086               	movwf	6
 15728  08FC  3001               	movlw	1	; select bank2/3
 15729  08FD  0087               	movwf	7
 15730  08FE  0181               	clrf	1
 15731                           
 15732                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15733  08FF  0878               	movf	_DelayOff,w
 15734  0900  0086               	movwf	6
 15735  0901  3001               	movlw	1	; select bank2/3
 15736  0902  0087               	movwf	7
 15737  0903  1081               	bcf	1,1
 15738                           
 15739                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15740  0904  3064               	movlw	100
 15741  0905  00A9               	movwf	setBuz@time
 15742  0906  3000               	movlw	0
 15743  0907  00AA               	movwf	setBuz@time+1
 15744  0908  3001               	movlw	1
 15745  0909  3196  263C  3188   	fcall	_setBuz
 15746                           
 15747                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15748  090C  0020               	movlb	0	; select bank0
 15749  090D  0838               	movf	DlyOff_Main@sw,w
 15750  090E  3196  26EE         	fcall	_setDimmerLights_ErrorClose
 15751  0910  0008               	return
 15752  0911                     __end_of_DlyOff_Main:	
 15753                           
 15754                           	psect	text97
 15755  16EE                     __ptext97:	
 15756 ;; *************** function _setDimmerLights_ErrorClose *****************
 15757 ;; Defined at:
 15758 ;;		line 565 in file "../src/Dimmer_B1.c"
 15759 ;; Parameters:    Size  Location     Type
 15760 ;;  lights          1    wreg     unsigned char 
 15761 ;; Auto vars:     Size  Location     Type
 15762 ;;  lights          1   19[BANK0 ] unsigned char 
 15763 ;;  i               2   20[BANK0 ] int 
 15764 ;;  count           1   18[BANK0 ] unsigned char 
 15765 ;; Return value:  Size  Location     Type
 15766 ;;		None               void
 15767 ;; Registers used:
 15768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15769 ;; Tracked objects:
 15770 ;;		On entry : 0/0
 15771 ;;		On exit  : 0/0
 15772 ;;		Unchanged: 0/0
 15773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15775 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;Total ram usage:        5 bytes
 15779 ;; Hardware stack levels used:    1
 15780 ;; Hardware stack levels required when called:    9
 15781 ;; This function calls:
 15782 ;;		_DimmerLightsPointSelect
 15783 ;;		_getDimmerLights_Status
 15784 ;;		_setDimmerLights_SwOff
 15785 ;; This function is called by:
 15786 ;;		_DlyOff_Main
 15787 ;;		_setControl_Lights_Table
 15788 ;;		_setMain_Exception
 15789 ;; This function uses a non-reentrant model
 15790 ;;
 15791                           
 15792                           
 15793                           ;psect for function _setDimmerLights_ErrorClose
 15794  16EE                     _setDimmerLights_ErrorClose:	
 15795                           
 15796                           ;incstack = 0
 15797                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15798                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15799  16EE  0020               	movlb	0	; select bank0
 15800  16EF  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15801                           
 15802                           ;Dimmer_B1.c: 566: if (lights == 255) {
 15803  16F0  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15804  16F1  3AFF               	xorlw	255
 15805  16F2  1D03               	skipz
 15806  16F3  2F2B               	goto	l6479
 15807                           
 15808                           ;Dimmer_B1.c: 571: char count = 2;
 15809  16F4  3002               	movlw	2
 15810  16F5  00B1               	movwf	??_setDimmerLights_ErrorClose
 15811  16F6  0831               	movf	??_setDimmerLights_ErrorClose,w
 15812  16F7  00B2               	movwf	setDimmerLights_ErrorClose@count
 15813                           
 15814                           ;Dimmer_B1.c: 576: for (int i = 0; i < count; i++) {
 15815  16F8  01B4               	clrf	setDimmerLights_ErrorClose@i
 15816  16F9  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15817  16FA                     l6477:	
 15818  16FA  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15819  16FB  3A80               	xorlw	128
 15820  16FC  00B1               	movwf	??_setDimmerLights_ErrorClose
 15821  16FD  3080               	movlw	128
 15822  16FE  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15823  16FF  1D03               	skipz
 15824  1700  2F03               	goto	u5435
 15825  1701  0832               	movf	setDimmerLights_ErrorClose@count,w
 15826  1702  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15827  1703                     u5435:	
 15828  1703  1803               	btfsc	3,0
 15829  1704  0008               	return
 15830                           
 15831                           ;Dimmer_B1.c: 577: DimmerLightsPointSelect(i + 1);
 15832  1705  0020               	movlb	0	; select bank0
 15833  1706  0834               	movf	setDimmerLights_ErrorClose@i,w
 15834  1707  3E01               	addlw	1
 15835  1708  319C  248F  3196   	fcall	_DimmerLightsPointSelect
 15836                           
 15837                           ;Dimmer_B1.c: 578: if (getDimmerLights_Status(i + 1) == 1) {
 15838  170B  0020               	movlb	0	; select bank0
 15839  170C  0834               	movf	setDimmerLights_ErrorClose@i,w
 15840  170D  3E01               	addlw	1
 15841  170E  319B  23D1  3196   	fcall	_getDimmerLights_Status
 15842  1711  3A01               	xorlw	1
 15843  1712  1D03               	skipz
 15844  1713  2F25               	goto	l6475
 15845                           
 15846                           ;Dimmer_B1.c: 579: DimmerLights->SwFlag = 1;
 15847  1714  0020               	movlb	0	; select bank0
 15848  1715  086F               	movf	_DimmerLights,w
 15849  1716  3E09               	addlw	9
 15850  1717  0086               	movwf	6
 15851  1718  3001               	movlw	1	; select bank2/3
 15852  1719  0087               	movwf	7
 15853  171A  1701               	bsf	1,6
 15854                           
 15855                           ;Dimmer_B1.c: 580: DimmerLights->Status = 0;
 15856  171B  086F               	movf	_DimmerLights,w
 15857  171C  0086               	movwf	6
 15858  171D  3001               	movlw	1	; select bank2/3
 15859  171E  0087               	movwf	7
 15860  171F  1281               	bcf	1,5
 15861                           
 15862                           ;Dimmer_B1.c: 581: setDimmerLights_SwOff(i + 1);
 15863  1720  0834               	movf	setDimmerLights_ErrorClose@i,w
 15864  1721  3E01               	addlw	1
 15865  1722  3194  2419  3196   	fcall	_setDimmerLights_SwOff
 15866  1725                     l6475:	
 15867  1725  3001               	movlw	1
 15868  1726  0020               	movlb	0	; select bank0
 15869  1727  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15870  1728  3000               	movlw	0
 15871  1729  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15872  172A  2EFA               	goto	l6477
 15873  172B                     l6479:	
 15874                           ;Dimmer_B1.c: 582: }
 15875                           ;Dimmer_B1.c: 583: }
 15876                           ;Dimmer_B1.c: 584: } else {
 15877                           
 15878                           
 15879                           ;Dimmer_B1.c: 585: DimmerLightsPointSelect(lights);
 15880  172B  0020               	movlb	0	; select bank0
 15881  172C  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15882  172D  319C  248F  3196   	fcall	_DimmerLightsPointSelect
 15883                           
 15884                           ;Dimmer_B1.c: 586: if (getDimmerLights_Status(lights) == 1) {
 15885  1730  0020               	movlb	0	; select bank0
 15886  1731  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15887  1732  319B  23D1  3196   	fcall	_getDimmerLights_Status
 15888  1735  3A01               	xorlw	1
 15889  1736  1D03               	skipz
 15890  1737  0008               	return
 15891                           
 15892                           ;Dimmer_B1.c: 587: DimmerLights->SwFlag = 1;
 15893  1738  0020               	movlb	0	; select bank0
 15894  1739  086F               	movf	_DimmerLights,w
 15895  173A  3E09               	addlw	9
 15896  173B  0086               	movwf	6
 15897  173C  3001               	movlw	1	; select bank2/3
 15898  173D  0087               	movwf	7
 15899  173E  1701               	bsf	1,6
 15900                           
 15901                           ;Dimmer_B1.c: 588: DimmerLights->Status = 0;
 15902  173F  086F               	movf	_DimmerLights,w
 15903  1740  0086               	movwf	6
 15904  1741  3001               	movlw	1	; select bank2/3
 15905  1742  0087               	movwf	7
 15906  1743  1281               	bcf	1,5
 15907                           
 15908                           ;Dimmer_B1.c: 589: setDimmerLights_SwOff(lights);
 15909  1744  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15910  1745  3194  2419         	fcall	_setDimmerLights_SwOff
 15911  1747  0008               	return
 15912  1748                     __end_of_setDimmerLights_ErrorClose:	
 15913                           
 15914                           	psect	text98
 15915  1419                     __ptext98:	
 15916 ;; *************** function _setDimmerLights_SwOff *****************
 15917 ;; Defined at:
 15918 ;;		line 527 in file "../src/Dimmer_B1.c"
 15919 ;; Parameters:    Size  Location     Type
 15920 ;;  sw              1    wreg     unsigned char 
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;  sw              1   16[BANK0 ] unsigned char 
 15923 ;;  command         1   15[BANK0 ] unsigned char 
 15924 ;; Return value:  Size  Location     Type
 15925 ;;		None               void
 15926 ;; Registers used:
 15927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15928 ;; Tracked objects:
 15929 ;;		On entry : 0/0
 15930 ;;		On exit  : 0/0
 15931 ;;		Unchanged: 0/0
 15932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;Total ram usage:        2 bytes
 15938 ;; Hardware stack levels used:    1
 15939 ;; Hardware stack levels required when called:    8
 15940 ;; This function calls:
 15941 ;;		_DimmerLightsPointSelect
 15942 ;;		_getDelayOff_GO
 15943 ;;		_setDelayOff_GO
 15944 ;;		_setDimmerLights_Trigger
 15945 ;;		_setDimmerLights_TriggerAdj
 15946 ;; This function is called by:
 15947 ;;		_setDimmerLights_ErrorClose
 15948 ;;		_setRFSW_Control
 15949 ;;		_setSw_Main
 15950 ;; This function uses a non-reentrant model
 15951 ;;
 15952                           
 15953                           
 15954                           ;psect for function _setDimmerLights_SwOff
 15955  1419                     _setDimmerLights_SwOff:	
 15956                           
 15957                           ;incstack = 0
 15958                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15959                           ;setDimmerLights_SwOff@sw stored from wreg
 15960  1419  0020               	movlb	0	; select bank0
 15961  141A  00B0               	movwf	setDimmerLights_SwOff@sw
 15962                           
 15963                           ;Dimmer_B1.c: 528: DimmerLightsPointSelect(sw);
 15964  141B  0830               	movf	setDimmerLights_SwOff@sw,w
 15965  141C  319C  248F  3194   	fcall	_DimmerLightsPointSelect
 15966                           
 15967                           ;Dimmer_B1.c: 529: char command = DimmerLights->Status == 1 ? 1 : 0;
 15968  141F  0020               	movlb	0	; select bank0
 15969  1420  086F               	movf	_DimmerLights,w
 15970  1421  0086               	movwf	6
 15971  1422  3001               	movlw	1	; select bank2/3
 15972  1423  0087               	movwf	7
 15973  1424  3000               	movlw	0
 15974  1425  1A81               	btfsc	1,5
 15975  1426  3001               	movlw	1
 15976  1427  00AF               	movwf	setDimmerLights_SwOff@command
 15977                           
 15978                           ;Dimmer_B1.c: 530: if (DimmerLights->SwFlag == 1) {
 15979  1428  086F               	movf	_DimmerLights,w
 15980  1429  3E09               	addlw	9
 15981  142A  0086               	movwf	6
 15982  142B  3001               	movlw	1	; select bank2/3
 15983  142C  0087               	movwf	7
 15984  142D  1F01               	btfss	1,6
 15985  142E  0008               	return
 15986                           
 15987                           ;Dimmer_B1.c: 531: DimmerLights->SwFlag = 0;
 15988  142F  086F               	movf	_DimmerLights,w
 15989  1430  3E09               	addlw	9
 15990  1431  0086               	movwf	6
 15991  1432  3001               	movlw	1	; select bank2/3
 15992  1433  0087               	movwf	7
 15993  1434  1301               	bcf	1,6
 15994                           
 15995                           ;Dimmer_B1.c: 532: if (DimmerLights->Status == 1) {
 15996  1435  086F               	movf	_DimmerLights,w
 15997  1436  0086               	movwf	6
 15998  1437  3001               	movlw	1	; select bank2/3
 15999  1438  0087               	movwf	7
 16000  1439  1E81               	btfss	1,5
 16001  143A  2C4D               	goto	l6335
 16002                           
 16003                           ;Dimmer_B1.c: 533: if (DimmerLights->SwAdj == 1) {
 16004  143B  086F               	movf	_DimmerLights,w
 16005  143C  3E09               	addlw	9
 16006  143D  0086               	movwf	6
 16007  143E  3001               	movlw	1	; select bank2/3
 16008  143F  0087               	movwf	7
 16009  1440  1F81               	btfss	1,7
 16010  1441  0008               	return
 16011                           
 16012                           ;Dimmer_B1.c: 534: DimmerLights->SwAdj = 0;
 16013  1442  086F               	movf	_DimmerLights,w
 16014  1443  3E09               	addlw	9
 16015  1444  0086               	movwf	6
 16016  1445  3001               	movlw	1	; select bank2/3
 16017  1446  0087               	movwf	7
 16018  1447  1381               	bcf	1,7
 16019                           
 16020                           ;Dimmer_B1.c: 535: setDimmerLights_TriggerAdj(sw, 0);
 16021  1448  01A2               	clrf	setDimmerLights_TriggerAdj@command
 16022  1449  0830               	movf	setDimmerLights_SwOff@sw,w
 16023  144A  319E  267A         	fcall	_setDimmerLights_TriggerAdj
 16024                           
 16025                           ;Dimmer_B1.c: 536: }
 16026                           ;Dimmer_B1.c: 537: } else {
 16027  144C  0008               	return
 16028  144D                     l6335:	
 16029                           
 16030                           ;Dimmer_B1.c: 538: setDimmerLights_Trigger(sw, 0);
 16031  144D  0020               	movlb	0	; select bank0
 16032  144E  01A2               	clrf	setDimmerLights_Trigger@command
 16033  144F  0830               	movf	setDimmerLights_SwOff@sw,w
 16034  1450  3187  27E2  3194   	fcall	_setDimmerLights_Trigger
 16035                           
 16036                           ;Dimmer_B1.c: 540: if (getDelayOff_GO(sw) == 1) {
 16037  1453  0020               	movlb	0	; select bank0
 16038  1454  0830               	movf	setDimmerLights_SwOff@sw,w
 16039  1455  319B  23E1  3194   	fcall	_getDelayOff_GO
 16040  1458  3A01               	xorlw	1
 16041  1459  1D03               	skipz
 16042  145A  0008               	return
 16043                           
 16044                           ;Dimmer_B1.c: 541: setDelayOff_GO(sw, 0, 0);
 16045  145B  0020               	movlb	0	; select bank0
 16046  145C  01AA               	clrf	setDelayOff_GO@command
 16047  145D  01AB               	clrf	setDelayOff_GO@value
 16048  145E  0830               	movf	setDimmerLights_SwOff@sw,w
 16049  145F  3188  2057         	fcall	_setDelayOff_GO
 16050  1461  0008               	return
 16051  1462                     __end_of_setDimmerLights_SwOff:	
 16052                           
 16053                           	psect	text99
 16054  1E7A                     __ptext99:	
 16055 ;; *************** function _setDimmerLights_TriggerAdj *****************
 16056 ;; Defined at:
 16057 ;;		line 776 in file "../src/Dimmer_B1.c"
 16058 ;; Parameters:    Size  Location     Type
 16059 ;;  lights          1    wreg     unsigned char 
 16060 ;;  command         1    2[BANK0 ] unsigned char 
 16061 ;; Auto vars:     Size  Location     Type
 16062 ;;  lights          1    4[BANK0 ] unsigned char 
 16063 ;; Return value:  Size  Location     Type
 16064 ;;		None               void
 16065 ;; Registers used:
 16066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16067 ;; Tracked objects:
 16068 ;;		On entry : 0/0
 16069 ;;		On exit  : 0/0
 16070 ;;		Unchanged: 0/0
 16071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16072 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;Total ram usage:        3 bytes
 16077 ;; Hardware stack levels used:    1
 16078 ;; Hardware stack levels required when called:    6
 16079 ;; This function calls:
 16080 ;;		_DimmerLightsPointSelect
 16081 ;; This function is called by:
 16082 ;;		_setDimmerLights_SwOff
 16083 ;;		_setDimmerLights_AdjControl
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           
 16088                           ;psect for function _setDimmerLights_TriggerAdj
 16089  1E7A                     _setDimmerLights_TriggerAdj:	
 16090                           
 16091                           ;incstack = 0
 16092                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16093                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16094  1E7A  0020               	movlb	0	; select bank0
 16095  1E7B  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16096                           
 16097                           ;Dimmer_B1.c: 777: DimmerLightsPointSelect(lights);
 16098  1E7C  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16099  1E7D  319C  248F         	fcall	_DimmerLightsPointSelect
 16100                           
 16101                           ;Dimmer_B1.c: 778: DimmerLights->TriggerAdj = 1;
 16102  1E7F  0020               	movlb	0	; select bank0
 16103  1E80  086F               	movf	_DimmerLights,w
 16104  1E81  3E08               	addlw	8
 16105  1E82  0086               	movwf	6
 16106  1E83  3001               	movlw	1	; select bank2/3
 16107  1E84  0087               	movwf	7
 16108  1E85  1601               	bsf	1,4
 16109                           
 16110                           ;Dimmer_B1.c: 779: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16111  1E86  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16112  1E87  3A01               	xorlw	1
 16113  1E88  3000               	movlw	0
 16114  1E89  1903               	skipnz
 16115  1E8A  3001               	movlw	1
 16116  1E8B  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16117  1E8C  086F               	movf	_DimmerLights,w
 16118  1E8D  3E08               	addlw	8
 16119  1E8E  0086               	movwf	6
 16120  1E8F  3001               	movlw	1	; select bank2/3
 16121  1E90  0087               	movwf	7
 16122  1E91  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16123  1E92  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16124  1E93  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16125  1E94  0801               	movf	1,w
 16126  1E95  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16127  1E96  39F7               	andlw	-9
 16128  1E97  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16129  1E98  0081               	movwf	1
 16130  1E99  0008               	return
 16131  1E9A                     __end_of_setDimmerLights_TriggerAdj:	
 16132                           
 16133                           	psect	text100
 16134  07E2                     __ptext100:	
 16135 ;; *************** function _setDimmerLights_Trigger *****************
 16136 ;; Defined at:
 16137 ;;		line 770 in file "../src/Dimmer_B1.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;  lights          1    wreg     unsigned char 
 16140 ;;  command         1    2[BANK0 ] unsigned char 
 16141 ;; Auto vars:     Size  Location     Type
 16142 ;;  lights          1    4[BANK0 ] unsigned char 
 16143 ;; Return value:  Size  Location     Type
 16144 ;;		None               void
 16145 ;; Registers used:
 16146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16147 ;; Tracked objects:
 16148 ;;		On entry : 0/0
 16149 ;;		On exit  : 0/0
 16150 ;;		Unchanged: 0/0
 16151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;Total ram usage:        3 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    6
 16159 ;; This function calls:
 16160 ;;		_DimmerLightsPointSelect
 16161 ;; This function is called by:
 16162 ;;		_setDimmerLights_SwOn
 16163 ;;		_setDimmerLights_SwOff
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           
 16168                           ;psect for function _setDimmerLights_Trigger
 16169  07E2                     _setDimmerLights_Trigger:	
 16170                           
 16171                           ;incstack = 0
 16172                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16173                           ;setDimmerLights_Trigger@lights stored from wreg
 16174  07E2  0020               	movlb	0	; select bank0
 16175  07E3  00A4               	movwf	setDimmerLights_Trigger@lights
 16176                           
 16177                           ;Dimmer_B1.c: 771: DimmerLightsPointSelect(lights);
 16178  07E4  0824               	movf	setDimmerLights_Trigger@lights,w
 16179  07E5  319C  248F         	fcall	_DimmerLightsPointSelect
 16180                           
 16181                           ;Dimmer_B1.c: 772: DimmerLights->Trigger = 1;
 16182  07E7  0020               	movlb	0	; select bank0
 16183  07E8  086F               	movf	_DimmerLights,w
 16184  07E9  3E08               	addlw	8
 16185  07EA  0086               	movwf	6
 16186  07EB  3001               	movlw	1	; select bank2/3
 16187  07EC  0087               	movwf	7
 16188  07ED  1501               	bsf	1,2
 16189                           
 16190                           ;Dimmer_B1.c: 773: DimmerLights->Switch = command == 1 ? 1 : 0;
 16191  07EE  0822               	movf	setDimmerLights_Trigger@command,w
 16192  07EF  3A01               	xorlw	1
 16193  07F0  3000               	movlw	0
 16194  07F1  1903               	skipnz
 16195  07F2  3001               	movlw	1
 16196  07F3  00A3               	movwf	??_setDimmerLights_Trigger
 16197  07F4  086F               	movf	_DimmerLights,w
 16198  07F5  3E08               	addlw	8
 16199  07F6  0086               	movwf	6
 16200  07F7  3001               	movlw	1	; select bank2/3
 16201  07F8  0087               	movwf	7
 16202  07F9  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16203  07FA  0801               	movf	1,w
 16204  07FB  0623               	xorwf	??_setDimmerLights_Trigger,w
 16205  07FC  39FD               	andlw	-3
 16206  07FD  0623               	xorwf	??_setDimmerLights_Trigger,w
 16207  07FE  0081               	movwf	1
 16208  07FF  0008               	return
 16209  0800                     __end_of_setDimmerLights_Trigger:	
 16210                           
 16211                           	psect	text101
 16212  0857                     __ptext101:	
 16213 ;; *************** function _setDelayOff_GO *****************
 16214 ;; Defined at:
 16215 ;;		line 83 in file "../src/DelayOff_B1.c"
 16216 ;; Parameters:    Size  Location     Type
 16217 ;;  sw              1    wreg     unsigned char 
 16218 ;;  command         1   10[BANK0 ] unsigned char 
 16219 ;;  value           1   11[BANK0 ] unsigned char 
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;  sw              1   14[BANK0 ] unsigned char 
 16222 ;; Return value:  Size  Location     Type
 16223 ;;		None               void
 16224 ;; Registers used:
 16225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16226 ;; Tracked objects:
 16227 ;;		On entry : 0/0
 16228 ;;		On exit  : 0/0
 16229 ;;		Unchanged: 0/0
 16230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16231 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;Total ram usage:        5 bytes
 16236 ;; Hardware stack levels used:    1
 16237 ;; Hardware stack levels required when called:    7
 16238 ;; This function calls:
 16239 ;;		_DelayOffPointSelect
 16240 ;;		_DelayTimejudge
 16241 ;; This function is called by:
 16242 ;;		_setDimmerLights_SwOff
 16243 ;;		_setRFSW_Control
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           
 16248                           ;psect for function _setDelayOff_GO
 16249  0857                     _setDelayOff_GO:	
 16250                           
 16251                           ;incstack = 0
 16252                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16253                           ;setDelayOff_GO@sw stored from wreg
 16254  0857  0020               	movlb	0	; select bank0
 16255  0858  00AE               	movwf	setDelayOff_GO@sw
 16256                           
 16257                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16258  0859  082E               	movf	setDelayOff_GO@sw,w
 16259  085A  319C  24DB  3188   	fcall	_DelayOffPointSelect
 16260                           
 16261                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16262  085D  0020               	movlb	0	; select bank0
 16263  085E  082A               	movf	setDelayOff_GO@command,w
 16264  085F  3A01               	xorlw	1
 16265  0860  3000               	movlw	0
 16266  0861  1903               	skipnz
 16267  0862  3001               	movlw	1
 16268  0863  00AC               	movwf	??_setDelayOff_GO
 16269  0864  0878               	movf	_DelayOff,w
 16270  0865  0086               	movwf	6
 16271  0866  3001               	movlw	1	; select bank2/3
 16272  0867  0087               	movwf	7
 16273  0868  0DAC               	rlf	??_setDelayOff_GO,f
 16274  0869  0801               	movf	1,w
 16275  086A  062C               	xorwf	??_setDelayOff_GO,w
 16276  086B  39FD               	andlw	-3
 16277  086C  062C               	xorwf	??_setDelayOff_GO,w
 16278  086D  0081               	movwf	1
 16279                           
 16280                           ;DelayOff_B1.c: 89: if (command == 1) {
 16281  086E  082A               	movf	setDelayOff_GO@command,w
 16282  086F  3A01               	xorlw	1
 16283  0870  1D03               	skipz
 16284  0871  289C               	goto	l6245
 16285                           
 16286                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16287  0872  082B               	movf	setDelayOff_GO@value,w
 16288  0873  3190  20A6  3188   	fcall	_DelayTimejudge
 16289  0876  0020               	movlb	0	; select bank0
 16290  0877  00AC               	movwf	??_setDelayOff_GO
 16291  0878  0A78               	incf	_DelayOff,w
 16292  0879  0086               	movwf	6
 16293  087A  3001               	movlw	1	; select bank2/3
 16294  087B  0087               	movwf	7
 16295  087C  082C               	movf	??_setDelayOff_GO,w
 16296  087D  0081               	movwf	1
 16297                           
 16298                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16299  087E  300F               	movlw	15
 16300  087F  052B               	andwf	setDelayOff_GO@value,w
 16301  0880  00AC               	movwf	??_setDelayOff_GO
 16302  0881  082C               	movf	??_setDelayOff_GO,w
 16303  0882  3A05               	xorlw	5
 16304  0883  1903               	skipnz
 16305  0884  2889               	goto	l6239
 16306  0885  082B               	movf	setDelayOff_GO@value,w
 16307  0886  390F               	andlw	15
 16308  0887  1D03               	btfss	3,2
 16309  0888  288F               	goto	l6243
 16310  0889                     l6239:	
 16311  0889  3026               	movlw	38
 16312  088A  022B               	subwf	setDelayOff_GO@value,w
 16313  088B  1803               	skipnc
 16314  088C  288F               	goto	l6243
 16315                           
 16316                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16317  088D  082B               	movf	setDelayOff_GO@value,w
 16318  088E  2890               	goto	L9
 16319  088F                     l6243:	
 16320                           ;DelayOff_B1.c: 93: } else {
 16321                           
 16322                           
 16323                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16324  088F  3005               	movlw	5
 16325  0890                     L9:	
 16326  0890  00AC               	movwf	??_setDelayOff_GO
 16327  0891  082E               	movf	setDelayOff_GO@sw,w
 16328  0892  3E1A               	addlw	26
 16329  0893  076E               	addwf	_product,w
 16330  0894  00AD               	movwf	??_setDelayOff_GO+1
 16331  0895  082D               	movf	??_setDelayOff_GO+1,w
 16332  0896  0086               	movwf	6
 16333  0897  3002               	movlw	2	; select bank4/5
 16334  0898  0087               	movwf	7
 16335  0899  082C               	movf	??_setDelayOff_GO,w
 16336  089A  0081               	movwf	1
 16337                           
 16338                           ;DelayOff_B1.c: 95: }
 16339                           ;DelayOff_B1.c: 96: } else {
 16340  089B  28A5               	goto	l6247
 16341  089C                     l6245:	
 16342                           
 16343                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16344  089C  082E               	movf	setDelayOff_GO@sw,w
 16345  089D  3E1A               	addlw	26
 16346  089E  076E               	addwf	_product,w
 16347  089F  00AC               	movwf	??_setDelayOff_GO
 16348  08A0  082C               	movf	??_setDelayOff_GO,w
 16349  08A1  0086               	movwf	6
 16350  08A2  3002               	movlw	2	; select bank4/5
 16351  08A3  0087               	movwf	7
 16352  08A4  0181               	clrf	1
 16353  08A5                     l6247:	
 16354                           
 16355                           ;DelayOff_B1.c: 98: }
 16356                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16357  08A5  0878               	movf	_DelayOff,w
 16358  08A6  3E02               	addlw	2
 16359  08A7  0086               	movwf	6
 16360  08A8  3001               	movlw	1	; select bank2/3
 16361  08A9  0087               	movwf	7
 16362  08AA  3000               	movlw	0
 16363  08AB  3FC0               	movwi [0]fsr1
 16364  08AC  3FC1               	movwi [1]fsr1
 16365                           
 16366                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16367  08AD  0878               	movf	_DelayOff,w
 16368  08AE  3E04               	addlw	4
 16369  08AF  0086               	movwf	6
 16370  08B0  3001               	movlw	1	; select bank2/3
 16371  08B1  0087               	movwf	7
 16372  08B2  0181               	clrf	1
 16373  08B3  0008               	return
 16374  08B4                     __end_of_setDelayOff_GO:	
 16375                           
 16376                           	psect	text102
 16377  10A6                     __ptext102:	
 16378 ;; *************** function _DelayTimejudge *****************
 16379 ;; Defined at:
 16380 ;;		line 112 in file "../src/DelayOff_B1.c"
 16381 ;; Parameters:    Size  Location     Type
 16382 ;;  value           1    wreg     unsigned char 
 16383 ;; Auto vars:     Size  Location     Type
 16384 ;;  value           1    9[BANK0 ] unsigned char 
 16385 ;;  k               1    8[BANK0 ] unsigned char 
 16386 ;;  j               1    7[BANK0 ] unsigned char 
 16387 ;;  i               1    6[BANK0 ] unsigned char 
 16388 ;; Return value:  Size  Location     Type
 16389 ;;                  1    wreg      unsigned char 
 16390 ;; Registers used:
 16391 ;;		wreg, status,2, status,0, pclath, cstack
 16392 ;; Tracked objects:
 16393 ;;		On entry : 0/0
 16394 ;;		On exit  : 0/0
 16395 ;;		Unchanged: 0/0
 16396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;Total ram usage:        6 bytes
 16402 ;; Hardware stack levels used:    1
 16403 ;; Hardware stack levels required when called:    6
 16404 ;; This function calls:
 16405 ;;		___bmul
 16406 ;; This function is called by:
 16407 ;;		_setDelayOff_GO
 16408 ;; This function uses a non-reentrant model
 16409 ;;
 16410                           
 16411                           
 16412                           ;psect for function _DelayTimejudge
 16413  10A6                     _DelayTimejudge:	
 16414                           
 16415                           ;incstack = 0
 16416                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16417                           ;DelayTimejudge@value stored from wreg
 16418  10A6  0020               	movlb	0	; select bank0
 16419  10A7  00A9               	movwf	DelayTimejudge@value
 16420                           
 16421                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16422  10A8  3005               	movlw	5
 16423  10A9  00A4               	movwf	??_DelayTimejudge
 16424  10AA  0824               	movf	??_DelayTimejudge,w
 16425  10AB  00A6               	movwf	DelayTimejudge@i
 16426  10AC  01A7               	clrf	DelayTimejudge@j
 16427  10AD  01A8               	clrf	DelayTimejudge@k
 16428                           
 16429                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16430  10AE  3031               	movlw	49
 16431  10AF  0229               	subwf	DelayTimejudge@value,w
 16432  10B0  1803               	skipnc
 16433  10B1  28CE               	goto	l6137
 16434                           
 16435                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16436  10B2  0829               	movf	DelayTimejudge@value,w
 16437  10B3  390F               	andlw	15
 16438  10B4  00A4               	movwf	??_DelayTimejudge
 16439  10B5  0824               	movf	??_DelayTimejudge,w
 16440  10B6  00A7               	movwf	DelayTimejudge@j
 16441                           
 16442                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16443  10B7  0829               	movf	DelayTimejudge@value,w
 16444  10B8  00A4               	movwf	??_DelayTimejudge
 16445  10B9  3004               	movlw	4
 16446  10BA                     u5005:	
 16447  10BA  36A4               	lsrf	??_DelayTimejudge,f
 16448  10BB  0B89               	decfsz	9,f
 16449  10BC  28BA               	goto	u5005
 16450  10BD  0824               	movf	??_DelayTimejudge,w
 16451  10BE  390F               	andlw	15
 16452  10BF  00A5               	movwf	??_DelayTimejudge+1
 16453  10C0  0825               	movf	??_DelayTimejudge+1,w
 16454  10C1  00A8               	movwf	DelayTimejudge@k
 16455                           
 16456                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16457  10C2  300A               	movlw	10
 16458  10C3  00A4               	movwf	??_DelayTimejudge
 16459  10C4  0824               	movf	??_DelayTimejudge,w
 16460  10C5  00A0               	movwf	___bmul@multiplicand
 16461  10C6  0828               	movf	DelayTimejudge@k,w
 16462  10C7  319C  2459         	fcall	___bmul
 16463  10C9  0020               	movlb	0	; select bank0
 16464  10CA  0727               	addwf	DelayTimejudge@j,w
 16465  10CB  00A5               	movwf	??_DelayTimejudge+1
 16466  10CC  0825               	movf	??_DelayTimejudge+1,w
 16467  10CD  00A6               	movwf	DelayTimejudge@i
 16468  10CE                     l6137:	
 16469                           
 16470                           ;DelayOff_B1.c: 118: }
 16471                           ;DelayOff_B1.c: 139: return i;
 16472  10CE  0826               	movf	DelayTimejudge@i,w
 16473  10CF  0008               	return
 16474  10D0                     __end_of_DelayTimejudge:	
 16475                           
 16476                           	psect	text103
 16477  1C59                     __ptext103:	
 16478 ;; *************** function ___bmul *****************
 16479 ;; Defined at:
 16480 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  multiplier      1    wreg     unsigned char 
 16483 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16486 ;;  product         1    2[BANK0 ] unsigned char 
 16487 ;; Return value:  Size  Location     Type
 16488 ;;                  1    wreg      unsigned char 
 16489 ;; Registers used:
 16490 ;;		wreg, status,2, status,0
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16496 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;Total ram usage:        4 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    5
 16503 ;; This function calls:
 16504 ;;		Nothing
 16505 ;; This function is called by:
 16506 ;;		_DelayTimejudge
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           
 16511                           ;psect for function ___bmul
 16512  1C59                     ___bmul:	
 16513                           
 16514                           ;incstack = 0
 16515                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16516                           ;___bmul@multiplier stored from wreg
 16517  1C59  0020               	movlb	0	; select bank0
 16518  1C5A  00A3               	movwf	___bmul@multiplier
 16519  1C5B  01A2               	clrf	___bmul@product
 16520  1C5C                     l5875:	
 16521  1C5C  1C23               	btfss	___bmul@multiplier,0
 16522  1C5D  2C62               	goto	l5879
 16523  1C5E  0820               	movf	___bmul@multiplicand,w
 16524  1C5F  00A1               	movwf	??___bmul
 16525  1C60  0821               	movf	??___bmul,w
 16526  1C61  07A2               	addwf	___bmul@product,f
 16527  1C62                     l5879:	
 16528  1C62  1003               	clrc
 16529  1C63  0DA0               	rlf	___bmul@multiplicand,f
 16530  1C64  1003               	clrc
 16531  1C65  0CA3               	rrf	___bmul@multiplier,f
 16532  1C66  08A3               	movf	___bmul@multiplier,f
 16533  1C67  1D03               	skipz
 16534  1C68  2C5C               	goto	l5875
 16535  1C69  0822               	movf	___bmul@product,w
 16536  1C6A  0008               	return
 16537  1C6B                     __end_of___bmul:	
 16538                           
 16539                           	psect	text104
 16540  1BE1                     __ptext104:	
 16541 ;; *************** function _getDelayOff_GO *****************
 16542 ;; Defined at:
 16543 ;;		line 105 in file "../src/DelayOff_B1.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;  sw              1    wreg     unsigned char 
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;  sw              1    2[BANK0 ] unsigned char 
 16548 ;;  go              1    3[BANK0 ] unsigned char 
 16549 ;; Return value:  Size  Location     Type
 16550 ;;                  1    wreg      unsigned char 
 16551 ;; Registers used:
 16552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16553 ;; Tracked objects:
 16554 ;;		On entry : 0/0
 16555 ;;		On exit  : 0/0
 16556 ;;		Unchanged: 0/0
 16557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16559 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16562 ;;Total ram usage:        2 bytes
 16563 ;; Hardware stack levels used:    1
 16564 ;; Hardware stack levels required when called:    6
 16565 ;; This function calls:
 16566 ;;		_DelayOffPointSelect
 16567 ;; This function is called by:
 16568 ;;		_setDimmerLights_SwOff
 16569 ;;		_setRFSW_Control
 16570 ;; This function uses a non-reentrant model
 16571 ;;
 16572                           
 16573                           
 16574                           ;psect for function _getDelayOff_GO
 16575  1BE1                     _getDelayOff_GO:	
 16576                           
 16577                           ;incstack = 0
 16578                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16579                           ;getDelayOff_GO@sw stored from wreg
 16580  1BE1  0020               	movlb	0	; select bank0
 16581  1BE2  00A2               	movwf	getDelayOff_GO@sw
 16582                           
 16583                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16584  1BE3  0822               	movf	getDelayOff_GO@sw,w
 16585  1BE4  319C  24DB         	fcall	_DelayOffPointSelect
 16586                           
 16587                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16588  1BE6  0878               	movf	_DelayOff,w
 16589  1BE7  0086               	movwf	6
 16590  1BE8  3001               	movlw	1	; select bank2/3
 16591  1BE9  0087               	movwf	7
 16592  1BEA  3000               	movlw	0
 16593  1BEB  1881               	btfsc	1,1
 16594  1BEC  3001               	movlw	1
 16595  1BED  0020               	movlb	0	; select bank0
 16596  1BEE  00A3               	movwf	getDelayOff_GO@go
 16597                           
 16598                           ;DelayOff_B1.c: 108: return go;
 16599  1BEF  0823               	movf	getDelayOff_GO@go,w
 16600  1BF0  0008               	return
 16601  1BF1                     __end_of_getDelayOff_GO:	
 16602                           
 16603                           	psect	text105
 16604  1BD1                     __ptext105:	
 16605 ;; *************** function _getDimmerLights_Status *****************
 16606 ;; Defined at:
 16607 ;;		line 448 in file "../src/Dimmer_B1.c"
 16608 ;; Parameters:    Size  Location     Type
 16609 ;;  lights          1    wreg     unsigned char 
 16610 ;; Auto vars:     Size  Location     Type
 16611 ;;  lights          1    2[BANK0 ] unsigned char 
 16612 ;;  status          1    3[BANK0 ] unsigned char 
 16613 ;; Return value:  Size  Location     Type
 16614 ;;                  1    wreg      unsigned char 
 16615 ;; Registers used:
 16616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16617 ;; Tracked objects:
 16618 ;;		On entry : 0/0
 16619 ;;		On exit  : 0/0
 16620 ;;		Unchanged: 0/0
 16621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16626 ;;Total ram usage:        2 bytes
 16627 ;; Hardware stack levels used:    1
 16628 ;; Hardware stack levels required when called:    6
 16629 ;; This function calls:
 16630 ;;		_DimmerLightsPointSelect
 16631 ;; This function is called by:
 16632 ;;		_setDimmerLights_ErrorClose
 16633 ;;		_setRFSW_Control
 16634 ;;		_setRFSW_AdjControl
 16635 ;;		_getMain_LightsStatus
 16636 ;; This function uses a non-reentrant model
 16637 ;;
 16638                           
 16639                           
 16640                           ;psect for function _getDimmerLights_Status
 16641  1BD1                     _getDimmerLights_Status:	
 16642                           
 16643                           ;incstack = 0
 16644                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16645                           ;getDimmerLights_Status@lights stored from wreg
 16646  1BD1  0020               	movlb	0	; select bank0
 16647  1BD2  00A2               	movwf	getDimmerLights_Status@lights
 16648                           
 16649                           ;Dimmer_B1.c: 449: DimmerLightsPointSelect(lights);
 16650  1BD3  0822               	movf	getDimmerLights_Status@lights,w
 16651  1BD4  319C  248F         	fcall	_DimmerLightsPointSelect
 16652                           
 16653                           ;Dimmer_B1.c: 450: char status = DimmerLights->Status == 1 ? 1 : 0;
 16654  1BD6  0020               	movlb	0	; select bank0
 16655  1BD7  086F               	movf	_DimmerLights,w
 16656  1BD8  0086               	movwf	6
 16657  1BD9  3001               	movlw	1	; select bank2/3
 16658  1BDA  0087               	movwf	7
 16659  1BDB  3000               	movlw	0
 16660  1BDC  1A81               	btfsc	1,5
 16661  1BDD  3001               	movlw	1
 16662  1BDE  00A3               	movwf	getDimmerLights_Status@status
 16663                           
 16664                           ;Dimmer_B1.c: 451: return status;
 16665  1BDF  0823               	movf	getDimmerLights_Status@status,w
 16666  1BE0  0008               	return
 16667  1BE1                     __end_of_getDimmerLights_Status:	
 16668                           
 16669                           	psect	text106
 16670  1C8F                     __ptext106:	
 16671 ;; *************** function _DimmerLightsPointSelect *****************
 16672 ;; Defined at:
 16673 ;;		line 313 in file "../src/Dimmer_B1.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  lights          1    wreg     unsigned char 
 16676 ;; Auto vars:     Size  Location     Type
 16677 ;;  lights          1    1[BANK0 ] unsigned char 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;		None               void
 16680 ;; Registers used:
 16681 ;;		wreg
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;Total ram usage:        2 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:    5
 16694 ;; This function calls:
 16695 ;;		Nothing
 16696 ;; This function is called by:
 16697 ;;		_setDimmerLights_Initialization
 16698 ;;		_setDimmerLights_Main
 16699 ;;		_getDimmerLights_Status
 16700 ;;		_setDimmerLights_SwOn
 16701 ;;		_setDimmerLights_SwOff
 16702 ;;		_setDimmerLights_AdjControl
 16703 ;;		_setDimmerLights_ErrorClose
 16704 ;;		_setDimmerLights
 16705 ;;		_setDimmerLights_Adj
 16706 ;;		_setDimmerLights_AdjRF
 16707 ;;		_setDimmerLights_Trigger
 16708 ;;		_setDimmerLights_TriggerAdj
 16709 ;;		_setDimmerLights_Status
 16710 ;;		_setDimmerLights_GO
 16711 ;;		_setDimmerLights_MaxmumValue
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715                           
 16716                           ;psect for function _DimmerLightsPointSelect
 16717  1C8F                     _DimmerLightsPointSelect:	
 16718                           
 16719                           ;incstack = 0
 16720                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16721                           ;DimmerLightsPointSelect@lights stored from wreg
 16722  1C8F  0020               	movlb	0	; select bank0
 16723  1C90  00A1               	movwf	DimmerLightsPointSelect@lights
 16724                           
 16725                           ;Dimmer_B1.c: 315: if (lights == 1) {
 16726  1C91  0821               	movf	DimmerLightsPointSelect@lights,w
 16727  1C92  3A01               	xorlw	1
 16728  1C93  1D03               	skipz
 16729  1C94  2C99               	goto	l768
 16730                           
 16731                           ;Dimmer_B1.c: 316: DimmerLights = &DimmerLights1;
 16732  1C95  30BE               	movlw	_DimmerLights1& (0+255)
 16733  1C96  00A0               	movwf	??_DimmerLightsPointSelect
 16734  1C97  0820               	movf	??_DimmerLightsPointSelect,w
 16735  1C98  00EF               	movwf	_DimmerLights
 16736  1C99                     l768:	
 16737                           
 16738                           ;Dimmer_B1.c: 317: }
 16739                           ;Dimmer_B1.c: 320: if (lights == 2) {
 16740  1C99  0821               	movf	DimmerLightsPointSelect@lights,w
 16741  1C9A  3A02               	xorlw	2
 16742  1C9B  1D03               	skipz
 16743  1C9C  0008               	return
 16744                           
 16745                           ;Dimmer_B1.c: 321: DimmerLights = &DimmerLights2;
 16746  1C9D  30CD               	movlw	_DimmerLights2& (0+255)
 16747  1C9E  00A0               	movwf	??_DimmerLightsPointSelect
 16748  1C9F  0820               	movf	??_DimmerLightsPointSelect,w
 16749  1CA0  00EF               	movwf	_DimmerLights
 16750  1CA1  0008               	return
 16751  1CA2                     __end_of_DimmerLightsPointSelect:	
 16752                           
 16753                           	psect	text107
 16754  163C                     __ptext107:	
 16755 ;; *************** function _setBuz *****************
 16756 ;; Defined at:
 16757 ;;		line 22 in file "../src/Buzzer_B1.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;  count           1    wreg     unsigned char 
 16760 ;;  time            2    9[BANK0 ] int 
 16761 ;; Auto vars:     Size  Location     Type
 16762 ;;  count           1   12[BANK0 ] unsigned char 
 16763 ;; Return value:  Size  Location     Type
 16764 ;;		None               void
 16765 ;; Registers used:
 16766 ;;		wreg, status,2, status,0, pclath, cstack
 16767 ;; Tracked objects:
 16768 ;;		On entry : 0/0
 16769 ;;		On exit  : 0/0
 16770 ;;		Unchanged: 0/0
 16771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16776 ;;Total ram usage:        4 bytes
 16777 ;; Hardware stack levels used:    1
 16778 ;; Hardware stack levels required when called:    6
 16779 ;; This function calls:
 16780 ;;		___awdiv
 16781 ;; This function is called by:
 16782 ;;		_DlyOff_Main
 16783 ;;		_setDimmerLights_Main
 16784 ;;		_setDimmerLights_SwOn
 16785 ;;		_setTemp_Main
 16786 ;;		_setLog_Code
 16787 ;;		_setControl_Lights_Table
 16788 ;;		_setRFSW_Control
 16789 ;;		_setSw_Main
 16790 ;;		_my_MainTimer
 16791 ;;		_setMain_Exception
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           
 16796                           ;psect for function _setBuz
 16797  163C                     _setBuz:	
 16798                           
 16799                           ;incstack = 0
 16800                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16801                           ;setBuz@count stored from wreg
 16802  163C  0020               	movlb	0	; select bank0
 16803  163D  00AC               	movwf	setBuz@count
 16804                           
 16805                           ;Buzzer_B1.c: 23: time /= 10;
 16806  163E  300A               	movlw	10
 16807  163F  00A0               	movwf	___awdiv@divisor
 16808  1640  3000               	movlw	0
 16809  1641  00A1               	movwf	___awdiv@divisor+1
 16810  1642  082A               	movf	setBuz@time+1,w
 16811  1643  01A3               	clrf	___awdiv@dividend+1
 16812  1644  07A3               	addwf	___awdiv@dividend+1,f
 16813  1645  0829               	movf	setBuz@time,w
 16814  1646  01A2               	clrf	___awdiv@dividend
 16815  1647  07A2               	addwf	___awdiv@dividend,f
 16816  1648  3188  2003  3196   	fcall	___awdiv
 16817  164B  0020               	movlb	0	; select bank0
 16818  164C  0821               	movf	?___awdiv+1,w
 16819  164D  01AA               	clrf	setBuz@time+1
 16820  164E  07AA               	addwf	setBuz@time+1,f
 16821  164F  0820               	movf	?___awdiv,w
 16822  1650  01A9               	clrf	setBuz@time
 16823  1651  07A9               	addwf	setBuz@time,f
 16824                           
 16825                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16826  1652  0021               	movlb	1	; select bank1
 16827  1653  1C2F               	btfss	_Buz1^(0+128),0
 16828  1654  0008               	return
 16829                           
 16830                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16831  1655  18AF               	btfsc	_Buz1^(0+128),1
 16832  1656  2E6D               	goto	l96
 16833                           
 16834                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16835  1657  14AF               	bsf	_Buz1^(0+128),1
 16836                           
 16837                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16838  1658  01B0               	clrf	(_Buz1^(0+128)+1)
 16839  1659  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16840                           
 16841                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16842  165A  0020               	movlb	0	; select bank0
 16843  165B  082C               	movf	setBuz@count,w
 16844  165C  00AB               	movwf	??_setBuz
 16845  165D  082B               	movf	??_setBuz,w
 16846  165E  0021               	movlb	1	; select bank1
 16847  165F  00B2               	movwf	(_Buz1^(0+128)+3)
 16848                           
 16849                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16850  1660  0020               	movlb	0	; select bank0
 16851  1661  082A               	movf	setBuz@time+1,w
 16852  1662  0021               	movlb	1	; select bank1
 16853  1663  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16854  1664  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16855  1665  0020               	movlb	0	; select bank0
 16856  1666  0829               	movf	setBuz@time,w
 16857  1667  0021               	movlb	1	; select bank1
 16858  1668  01B5               	clrf	(_Buz1^(0+128)+6)
 16859  1669  07B5               	addwf	(_Buz1^(0+128)+6),f
 16860                           
 16861                           ;Buzzer_B1.c: 30: RB3 = 1;
 16862  166A  0020               	movlb	0	; select bank0
 16863  166B  158D               	bsf	13,3	;volatile
 16864                           
 16865                           ;Buzzer_B1.c: 31: } else {
 16866  166C  0008               	return
 16867  166D                     l96:	
 16868                           
 16869                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16870  166D  19AF               	btfsc	_Buz1^(0+128),3
 16871  166E  2E81               	goto	l98
 16872                           
 16873                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16874  166F  15AF               	bsf	_Buz1^(0+128),3
 16875                           
 16876                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16877  1670  0020               	movlb	0	; select bank0
 16878  1671  082C               	movf	setBuz@count,w
 16879  1672  00AB               	movwf	??_setBuz
 16880  1673  082B               	movf	??_setBuz,w
 16881  1674  0021               	movlb	1	; select bank1
 16882  1675  00B3               	movwf	(_Buz1^(0+128)+4)
 16883                           
 16884                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16885  1676  0020               	movlb	0	; select bank0
 16886  1677  082A               	movf	setBuz@time+1,w
 16887  1678  0021               	movlb	1	; select bank1
 16888  1679  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16889  167A  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16890  167B  0020               	movlb	0	; select bank0
 16891  167C  0829               	movf	setBuz@time,w
 16892  167D  0021               	movlb	1	; select bank1
 16893  167E  01B7               	clrf	(_Buz1^(0+128)+8)
 16894  167F  07B7               	addwf	(_Buz1^(0+128)+8),f
 16895                           
 16896                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16897  1680  0008               	return
 16898  1681                     l98:	
 16899  1681  1A2F               	btfsc	_Buz1^(0+128),4
 16900  1682  0008               	return
 16901                           
 16902                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16903  1683  162F               	bsf	_Buz1^(0+128),4
 16904                           
 16905                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16906  1684  0020               	movlb	0	; select bank0
 16907  1685  082C               	movf	setBuz@count,w
 16908  1686  00AB               	movwf	??_setBuz
 16909  1687  082B               	movf	??_setBuz,w
 16910  1688  0021               	movlb	1	; select bank1
 16911  1689  00B4               	movwf	(_Buz1^(0+128)+5)
 16912                           
 16913                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16914  168A  0020               	movlb	0	; select bank0
 16915  168B  082A               	movf	setBuz@time+1,w
 16916  168C  0021               	movlb	1	; select bank1
 16917  168D  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16918  168E  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16919  168F  0020               	movlb	0	; select bank0
 16920  1690  0829               	movf	setBuz@time,w
 16921  1691  0021               	movlb	1	; select bank1
 16922  1692  01B9               	clrf	(_Buz1^(0+128)+10)
 16923  1693  07B9               	addwf	(_Buz1^(0+128)+10),f
 16924  1694  0008               	return
 16925  1695                     __end_of_setBuz:	
 16926                           
 16927                           	psect	text108
 16928  0803                     __ptext108:	
 16929 ;; *************** function ___awdiv *****************
 16930 ;; Defined at:
 16931 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16932 ;; Parameters:    Size  Location     Type
 16933 ;;  divisor         2    0[BANK0 ] int 
 16934 ;;  dividend        2    2[BANK0 ] int 
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;  quotient        2    7[BANK0 ] int 
 16937 ;;  sign            1    6[BANK0 ] unsigned char 
 16938 ;;  counter         1    5[BANK0 ] unsigned char 
 16939 ;; Return value:  Size  Location     Type
 16940 ;;                  2    0[BANK0 ] int 
 16941 ;; Registers used:
 16942 ;;		wreg, status,2, status,0
 16943 ;; Tracked objects:
 16944 ;;		On entry : 0/0
 16945 ;;		On exit  : 0/0
 16946 ;;		Unchanged: 0/0
 16947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;Total ram usage:        9 bytes
 16953 ;; Hardware stack levels used:    1
 16954 ;; Hardware stack levels required when called:    5
 16955 ;; This function calls:
 16956 ;;		Nothing
 16957 ;; This function is called by:
 16958 ;;		_setBuz
 16959 ;; This function uses a non-reentrant model
 16960 ;;
 16961                           
 16962                           
 16963                           ;psect for function ___awdiv
 16964  0803                     ___awdiv:	
 16965                           
 16966                           ;incstack = 0
 16967                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16968  0803  0020               	movlb	0	; select bank0
 16969  0804  01A6               	clrf	___awdiv@sign
 16970  0805  1FA1               	btfss	___awdiv@divisor+1,7
 16971  0806  280E               	goto	l6163
 16972  0807  09A0               	comf	___awdiv@divisor,f
 16973  0808  09A1               	comf	___awdiv@divisor+1,f
 16974  0809  0AA0               	incf	___awdiv@divisor,f
 16975  080A  1903               	skipnz
 16976  080B  0AA1               	incf	___awdiv@divisor+1,f
 16977  080C  01A6               	clrf	___awdiv@sign
 16978  080D  0AA6               	incf	___awdiv@sign,f
 16979  080E                     l6163:	
 16980  080E  1FA3               	btfss	___awdiv@dividend+1,7
 16981  080F  2819               	goto	l6169
 16982  0810  09A2               	comf	___awdiv@dividend,f
 16983  0811  09A3               	comf	___awdiv@dividend+1,f
 16984  0812  0AA2               	incf	___awdiv@dividend,f
 16985  0813  1903               	skipnz
 16986  0814  0AA3               	incf	___awdiv@dividend+1,f
 16987  0815  3001               	movlw	1
 16988  0816  00A4               	movwf	??___awdiv
 16989  0817  0824               	movf	??___awdiv,w
 16990  0818  06A6               	xorwf	___awdiv@sign,f
 16991  0819                     l6169:	
 16992  0819  01A7               	clrf	___awdiv@quotient
 16993  081A  01A8               	clrf	___awdiv@quotient+1
 16994  081B  0821               	movf	___awdiv@divisor+1,w
 16995  081C  0420               	iorwf	___awdiv@divisor,w
 16996  081D  1903               	skipnz
 16997  081E  2848               	goto	l6191
 16998  081F  01A5               	clrf	___awdiv@counter
 16999  0820  0AA5               	incf	___awdiv@counter,f
 17000  0821                     l6179:	
 17001  0821  1BA1               	btfsc	___awdiv@divisor+1,7
 17002  0822  282D               	goto	l6181
 17003  0823  3001               	movlw	1
 17004  0824                     u5065:	
 17005  0824  35A0               	lslf	___awdiv@divisor,f
 17006  0825  0DA1               	rlf	___awdiv@divisor+1,f
 17007  0826  0B89               	decfsz	9,f
 17008  0827  2824               	goto	u5065
 17009  0828  3001               	movlw	1
 17010  0829  00A4               	movwf	??___awdiv
 17011  082A  0824               	movf	??___awdiv,w
 17012  082B  07A5               	addwf	___awdiv@counter,f
 17013  082C  2821               	goto	l6179
 17014  082D                     l6181:	
 17015  082D  3001               	movlw	1
 17016  082E                     u5085:	
 17017  082E  35A7               	lslf	___awdiv@quotient,f
 17018  082F  0DA8               	rlf	___awdiv@quotient+1,f
 17019  0830  0B89               	decfsz	9,f
 17020  0831  282E               	goto	u5085
 17021  0832  0821               	movf	___awdiv@divisor+1,w
 17022  0833  0223               	subwf	___awdiv@dividend+1,w
 17023  0834  1D03               	skipz
 17024  0835  2838               	goto	u5095
 17025  0836  0820               	movf	___awdiv@divisor,w
 17026  0837  0222               	subwf	___awdiv@dividend,w
 17027  0838                     u5095:	
 17028  0838  1C03               	skipc
 17029  0839  283F               	goto	l6187
 17030  083A  0820               	movf	___awdiv@divisor,w
 17031  083B  02A2               	subwf	___awdiv@dividend,f
 17032  083C  0821               	movf	___awdiv@divisor+1,w
 17033  083D  3BA3               	subwfb	___awdiv@dividend+1,f
 17034  083E  1427               	bsf	___awdiv@quotient,0
 17035  083F                     l6187:	
 17036  083F  3001               	movlw	1
 17037  0840                     u5105:	
 17038  0840  36A1               	lsrf	___awdiv@divisor+1,f
 17039  0841  0CA0               	rrf	___awdiv@divisor,f
 17040  0842  0B89               	decfsz	9,f
 17041  0843  2840               	goto	u5105
 17042  0844  3001               	movlw	1
 17043  0845  02A5               	subwf	___awdiv@counter,f
 17044  0846  1D03               	btfss	3,2
 17045  0847  282D               	goto	l6181
 17046  0848                     l6191:	
 17047  0848  0826               	movf	___awdiv@sign,w
 17048  0849  1903               	btfsc	3,2
 17049  084A  2850               	goto	l6195
 17050  084B  09A7               	comf	___awdiv@quotient,f
 17051  084C  09A8               	comf	___awdiv@quotient+1,f
 17052  084D  0AA7               	incf	___awdiv@quotient,f
 17053  084E  1903               	skipnz
 17054  084F  0AA8               	incf	___awdiv@quotient+1,f
 17055  0850                     l6195:	
 17056  0850  0828               	movf	___awdiv@quotient+1,w
 17057  0851  01A1               	clrf	?___awdiv+1
 17058  0852  07A1               	addwf	?___awdiv+1,f
 17059  0853  0827               	movf	___awdiv@quotient,w
 17060  0854  01A0               	clrf	?___awdiv
 17061  0855  07A0               	addwf	?___awdiv,f
 17062  0856  0008               	return
 17063  0857                     __end_of___awdiv:	
 17064                           
 17065                           	psect	text109
 17066  1AE5                     __ptext109:	
 17067 ;; *************** function _DelayOff_Initialization *****************
 17068 ;; Defined at:
 17069 ;;		line 26 in file "../src/DelayOff_B1.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;		None
 17072 ;; Auto vars:     Size  Location     Type
 17073 ;;		None
 17074 ;; Return value:  Size  Location     Type
 17075 ;;		None               void
 17076 ;; Registers used:
 17077 ;;		wreg, status,2, status,0, pclath, cstack
 17078 ;; Tracked objects:
 17079 ;;		On entry : 0/0
 17080 ;;		On exit  : 0/0
 17081 ;;		Unchanged: 0/0
 17082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;Total ram usage:        0 bytes
 17088 ;; Hardware stack levels used:    1
 17089 ;; Hardware stack levels required when called:    7
 17090 ;; This function calls:
 17091 ;;		_DlyOff_Initialization
 17092 ;; This function is called by:
 17093 ;;		_main
 17094 ;; This function uses a non-reentrant model
 17095 ;;
 17096                           
 17097                           
 17098                           ;psect for function _DelayOff_Initialization
 17099  1AE5                     _DelayOff_Initialization:	
 17100                           
 17101                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17102                           
 17103                           ;incstack = 0
 17104                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17105  1AE5  3001               	movlw	1
 17106  1AE6  319A  22C4  319A   	fcall	_DlyOff_Initialization
 17107                           
 17108                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17109  1AE9  3002               	movlw	2
 17110  1AEA  319A  22C4         	fcall	_DlyOff_Initialization
 17111  1AEC  0008               	return
 17112  1AED                     __end_of_DelayOff_Initialization:	
 17113                           
 17114                           	psect	text110
 17115  1AC4                     __ptext110:	
 17116 ;; *************** function _DlyOff_Initialization *****************
 17117 ;; Defined at:
 17118 ;;		line 56 in file "../src/DelayOff_B1.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;  sw              1    wreg     unsigned char 
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;  sw              1    2[BANK0 ] unsigned char 
 17123 ;; Return value:  Size  Location     Type
 17124 ;;		None               void
 17125 ;; Registers used:
 17126 ;;		wreg, status,2, status,0, pclath, cstack
 17127 ;; Tracked objects:
 17128 ;;		On entry : 0/0
 17129 ;;		On exit  : 0/0
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;Total ram usage:        1 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; Hardware stack levels required when called:    6
 17139 ;; This function calls:
 17140 ;;		_DelayOffPointSelect
 17141 ;; This function is called by:
 17142 ;;		_DelayOff_Initialization
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           
 17147                           ;psect for function _DlyOff_Initialization
 17148  1AC4                     _DlyOff_Initialization:	
 17149                           
 17150                           ;incstack = 0
 17151                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17152                           ;DlyOff_Initialization@sw stored from wreg
 17153  1AC4  0020               	movlb	0	; select bank0
 17154  1AC5  00A2               	movwf	DlyOff_Initialization@sw
 17155                           
 17156                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17157  1AC6  0822               	movf	DlyOff_Initialization@sw,w
 17158  1AC7  319C  24DB         	fcall	_DelayOffPointSelect
 17159  1AC9  0008               	return
 17160  1ACA                     __end_of_DlyOff_Initialization:	
 17161                           
 17162                           	psect	text111
 17163  1CDB                     __ptext111:	
 17164 ;; *************** function _DelayOffPointSelect *****************
 17165 ;; Defined at:
 17166 ;;		line 7 in file "../src/DelayOff_B1.c"
 17167 ;; Parameters:    Size  Location     Type
 17168 ;;  sw              1    wreg     unsigned char 
 17169 ;; Auto vars:     Size  Location     Type
 17170 ;;  sw              1    1[BANK0 ] unsigned char 
 17171 ;; Return value:  Size  Location     Type
 17172 ;;		None               void
 17173 ;; Registers used:
 17174 ;;		wreg
 17175 ;; Tracked objects:
 17176 ;;		On entry : 0/0
 17177 ;;		On exit  : 0/0
 17178 ;;		Unchanged: 0/0
 17179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17184 ;;Total ram usage:        2 bytes
 17185 ;; Hardware stack levels used:    1
 17186 ;; Hardware stack levels required when called:    5
 17187 ;; This function calls:
 17188 ;;		Nothing
 17189 ;; This function is called by:
 17190 ;;		_DlyOff_Initialization
 17191 ;;		_DlyOff_Main
 17192 ;;		_setDelayOff_GO
 17193 ;;		_getDelayOff_GO
 17194 ;; This function uses a non-reentrant model
 17195 ;;
 17196                           
 17197                           
 17198                           ;psect for function _DelayOffPointSelect
 17199  1CDB                     _DelayOffPointSelect:	
 17200                           
 17201                           ;incstack = 0
 17202                           ; Regs used in _DelayOffPointSelect: [wreg]
 17203                           ;DelayOffPointSelect@sw stored from wreg
 17204  1CDB  0020               	movlb	0	; select bank0
 17205  1CDC  00A1               	movwf	DelayOffPointSelect@sw
 17206                           
 17207                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17208  1CDD  0821               	movf	DelayOffPointSelect@sw,w
 17209  1CDE  3A01               	xorlw	1
 17210  1CDF  1D03               	skipz
 17211  1CE0  2CE6               	goto	l6121
 17212                           
 17213                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17214  1CE1  3053               	movlw	_DlySw1& (0+255)
 17215  1CE2  00A0               	movwf	??_DelayOffPointSelect
 17216  1CE3  0820               	movf	??_DelayOffPointSelect,w
 17217  1CE4  00F8               	movwf	_DelayOff
 17218                           
 17219                           ;DelayOff_B1.c: 11: }
 17220  1CE5  0008               	return
 17221  1CE6                     l6121:	
 17222                           
 17223                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17224  1CE6  0821               	movf	DelayOffPointSelect@sw,w
 17225  1CE7  3A02               	xorlw	2
 17226  1CE8  1D03               	skipz
 17227  1CE9  0008               	return
 17228                           
 17229                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17230  1CEA  3058               	movlw	_DlySw2& (0+255)
 17231  1CEB  00A0               	movwf	??_DelayOffPointSelect
 17232  1CEC  0820               	movf	??_DelayOffPointSelect,w
 17233  1CED  00F8               	movwf	_DelayOff
 17234  1CEE  0008               	return
 17235  1CEF                     __end_of_DelayOffPointSelect:	
 17236                           
 17237                           	psect	text112
 17238  1D2C                     __ptext112:	
 17239 ;; *************** function _CC2500_PowerOnInitial *****************
 17240 ;; Defined at:
 17241 ;;		line 119 in file "../src/CC2500_B1.c"
 17242 ;; Parameters:    Size  Location     Type
 17243 ;;		None
 17244 ;; Auto vars:     Size  Location     Type
 17245 ;;		None
 17246 ;; Return value:  Size  Location     Type
 17247 ;;		None               void
 17248 ;; Registers used:
 17249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17250 ;; Tracked objects:
 17251 ;;		On entry : 0/0
 17252 ;;		On exit  : 0/0
 17253 ;;		Unchanged: 0/0
 17254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;Total ram usage:        0 bytes
 17260 ;; Hardware stack levels used:    1
 17261 ;; Hardware stack levels required when called:    8
 17262 ;; This function calls:
 17263 ;;		_CC2500_ClearRXFIFO
 17264 ;;		_CC2500_ClearTXFIFO
 17265 ;;		_CC2500_FrequencyCabr
 17266 ;;		_CC2500_InitPATable
 17267 ;;		_CC2500_InitSetREG
 17268 ;;		_CC2500_PowerRST
 17269 ;;		_CC2500_SIDLEMode
 17270 ;; This function is called by:
 17271 ;;		_main
 17272 ;; This function uses a non-reentrant model
 17273 ;;
 17274                           
 17275                           
 17276                           ;psect for function _CC2500_PowerOnInitial
 17277  1D2C                     _CC2500_PowerOnInitial:	
 17278                           
 17279                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17280                           
 17281                           ;incstack = 0
 17282                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17283  1D2C  3193  238F  319D   	fcall	_CC2500_PowerRST
 17284                           
 17285                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17286  1D2F  3190  207C  319D   	fcall	_CC2500_InitSetREG
 17287                           
 17288                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17289  1D32  319E  263C  319D   	fcall	_CC2500_InitPATable
 17290                           
 17291                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17292  1D35  319A  22AE  319D   	fcall	_CC2500_ClearTXFIFO
 17293                           
 17294                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17295  1D38  319A  22AA  319D   	fcall	_CC2500_ClearRXFIFO
 17296                           
 17297                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17298  1D3B  319B  2335  319D   	fcall	_CC2500_FrequencyCabr
 17299                           
 17300                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17301  1D3E  319A  22B2         	fcall	_CC2500_SIDLEMode
 17302  1D40  0008               	return
 17303  1D41                     __end_of_CC2500_PowerOnInitial:	
 17304                           
 17305                           	psect	text113
 17306  1AB2                     __ptext113:	
 17307 ;; *************** function _CC2500_SIDLEMode *****************
 17308 ;; Defined at:
 17309 ;;		line 209 in file "../src/CC2500_B1.c"
 17310 ;; Parameters:    Size  Location     Type
 17311 ;;		None
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;		None
 17314 ;; Return value:  Size  Location     Type
 17315 ;;		None               void
 17316 ;; Registers used:
 17317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;Total ram usage:        0 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    7
 17330 ;; This function calls:
 17331 ;;		_CC2500_WriteCommand
 17332 ;; This function is called by:
 17333 ;;		_CC2500_PowerOnInitial
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           
 17338                           ;psect for function _CC2500_SIDLEMode
 17339  1AB2                     _CC2500_SIDLEMode:	
 17340                           
 17341                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17342                           
 17343                           ;incstack = 0
 17344                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17345  1AB2  3036               	movlw	54
 17346  1AB3  319D  25B4         	fcall	_CC2500_WriteCommand
 17347  1AB5  0008               	return
 17348  1AB6                     __end_of_CC2500_SIDLEMode:	
 17349                           
 17350                           	psect	text114
 17351  138F                     __ptext114:	
 17352 ;; *************** function _CC2500_PowerRST *****************
 17353 ;; Defined at:
 17354 ;;		line 132 in file "../src/CC2500_B1.c"
 17355 ;; Parameters:    Size  Location     Type
 17356 ;;		None
 17357 ;; Auto vars:     Size  Location     Type
 17358 ;;		None
 17359 ;; Return value:  Size  Location     Type
 17360 ;;		None               void
 17361 ;; Registers used:
 17362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17363 ;; Tracked objects:
 17364 ;;		On entry : 0/0
 17365 ;;		On exit  : 0/0
 17366 ;;		Unchanged: 0/0
 17367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;Total ram usage:        1 bytes
 17373 ;; Hardware stack levels used:    1
 17374 ;; Hardware stack levels required when called:    6
 17375 ;; This function calls:
 17376 ;;		_CC2500_WriteByte
 17377 ;;		_DelayTime_1us
 17378 ;;		_Timeout_Counter
 17379 ;;		_set_TimeoutCleared
 17380 ;; This function is called by:
 17381 ;;		_CC2500_PowerOnInitial
 17382 ;; This function uses a non-reentrant model
 17383 ;;
 17384                           
 17385                           
 17386                           ;psect for function _CC2500_PowerRST
 17387  138F                     _CC2500_PowerRST:	
 17388                           
 17389                           ;CC2500_B1.c: 133: RC1 = 0;
 17390                           
 17391                           ;incstack = 0
 17392                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17393  138F  0020               	movlb	0	; select bank0
 17394  1390  108E               	bcf	14,1	;volatile
 17395                           
 17396                           ;CC2500_B1.c: 134: RC0 = 0;
 17397  1391  100E               	bcf	14,0	;volatile
 17398                           
 17399                           ;CC2500_B1.c: 135: RC4 = 1;
 17400  1392  160E               	bsf	14,4	;volatile
 17401                           
 17402                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17403  1393  300A               	movlw	10
 17404  1394  00A0               	movwf	DelayTime_1us@count
 17405  1395  3000               	movlw	0
 17406  1396  00A1               	movwf	DelayTime_1us@count+1
 17407  1397  319F  278B  3193   	fcall	_DelayTime_1us
 17408                           
 17409                           ;CC2500_B1.c: 137: RC4 = 0;
 17410  139A  0020               	movlb	0	; select bank0
 17411  139B  120E               	bcf	14,4	;volatile
 17412                           
 17413                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17414  139C  300A               	movlw	10
 17415  139D  00A0               	movwf	DelayTime_1us@count
 17416  139E  3000               	movlw	0
 17417  139F  00A1               	movwf	DelayTime_1us@count+1
 17418  13A0  319F  278B  3193   	fcall	_DelayTime_1us
 17419                           
 17420                           ;CC2500_B1.c: 139: RC4 = 1;
 17421  13A3  0020               	movlb	0	; select bank0
 17422  13A4  160E               	bsf	14,4	;volatile
 17423                           
 17424                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17425  13A5  3028               	movlw	40
 17426  13A6  00A0               	movwf	DelayTime_1us@count
 17427  13A7  3000               	movlw	0
 17428  13A8  00A1               	movwf	DelayTime_1us@count+1
 17429  13A9  319F  278B  3193   	fcall	_DelayTime_1us
 17430                           
 17431                           ;CC2500_B1.c: 141: RC4 = 0;
 17432  13AC  0020               	movlb	0	; select bank0
 17433  13AD  120E               	bcf	14,4	;volatile
 17434                           
 17435                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17436  13AE  3030               	movlw	48
 17437  13AF  00A6               	movwf	??_CC2500_PowerRST
 17438  13B0  0826               	movf	??_CC2500_PowerRST,w
 17439  13B1  0021               	movlb	1	; select bank1
 17440  13B2  00D1               	movwf	_SPI0Buffer^(0+128)
 17441                           
 17442                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17443  13B3  2BB7               	goto	l7197
 17444  13B4                     l7195:	
 17445                           
 17446                           ;CC2500_B1.c: 144: Timeout_Counter();
 17447  13B4  319D  2517  3193   	fcall	_Timeout_Counter
 17448  13B7                     l7197:	
 17449  13B7  0020               	movlb	0	; select bank0
 17450  13B8  1D0E               	btfss	14,2	;volatile
 17451  13B9  2BBD               	goto	l7201
 17452  13BA  0021               	movlb	1	; select bank1
 17453  13BB  1D2C               	btfss	(_myMain^(0+128)+12),2
 17454  13BC  2BB4               	goto	l7195
 17455  13BD                     l7201:	
 17456                           
 17457                           ;CC2500_B1.c: 145: };
 17458                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17459  13BD  319A  22BA  3193   	fcall	_set_TimeoutCleared
 17460                           
 17461                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17462  13C0  319D  2582  3193   	fcall	_CC2500_WriteByte
 17463                           
 17464                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17465  13C3  2BC7               	goto	l7207
 17466  13C4                     l7205:	
 17467                           
 17468                           ;CC2500_B1.c: 149: Timeout_Counter();
 17469  13C4  319D  2517  3193   	fcall	_Timeout_Counter
 17470  13C7                     l7207:	
 17471  13C7  0020               	movlb	0	; select bank0
 17472  13C8  1D0E               	btfss	14,2	;volatile
 17473  13C9  2BCD               	goto	l7211
 17474  13CA  0021               	movlb	1	; select bank1
 17475  13CB  1D2C               	btfss	(_myMain^(0+128)+12),2
 17476  13CC  2BC4               	goto	l7205
 17477  13CD                     l7211:	
 17478                           
 17479                           ;CC2500_B1.c: 150: };
 17480                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17481  13CD  319A  22BA         	fcall	_set_TimeoutCleared
 17482                           
 17483                           ;CC2500_B1.c: 152: RC0 = 0;
 17484  13CF  0020               	movlb	0	; select bank0
 17485  13D0  100E               	bcf	14,0	;volatile
 17486                           
 17487                           ;CC2500_B1.c: 153: RC4 = 1;
 17488  13D1  160E               	bsf	14,4	;volatile
 17489  13D2  0008               	return
 17490  13D3                     __end_of_CC2500_PowerRST:	
 17491                           
 17492                           	psect	text115
 17493  107C                     __ptext115:	
 17494 ;; *************** function _CC2500_InitSetREG *****************
 17495 ;; Defined at:
 17496 ;;		line 159 in file "../src/CC2500_B1.c"
 17497 ;; Parameters:    Size  Location     Type
 17498 ;;		None
 17499 ;; Auto vars:     Size  Location     Type
 17500 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17501 ;;  temp2           1    7[BANK0 ] unsigned char 
 17502 ;;  temp1           1    6[BANK0 ] unsigned char 
 17503 ;; Return value:  Size  Location     Type
 17504 ;;		None               void
 17505 ;; Registers used:
 17506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17507 ;; Tracked objects:
 17508 ;;		On entry : 0/0
 17509 ;;		On exit  : 0/0
 17510 ;;		Unchanged: 0/0
 17511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;Total ram usage:        4 bytes
 17517 ;; Hardware stack levels used:    1
 17518 ;; Hardware stack levels required when called:    7
 17519 ;; This function calls:
 17520 ;;		_CC2500_WriteREG
 17521 ;; This function is called by:
 17522 ;;		_CC2500_PowerOnInitial
 17523 ;; This function uses a non-reentrant model
 17524 ;;
 17525                           
 17526                           
 17527                           ;psect for function _CC2500_InitSetREG
 17528  107C                     _CC2500_InitSetREG:	
 17529                           
 17530                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17531                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17532                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17533                           
 17534                           ;incstack = 0
 17535                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17536  107C  0020               	movlb	0	; select bank0
 17537  107D  01A8               	clrf	CC2500_InitSetREG@loop_c
 17538  107E                     L10:	
 17539  107E  302F               	movlw	47
 17540  107F  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17541  1080  1803               	btfsc	3,0
 17542  1081  0008               	return
 17543                           
 17544                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17545  1082  0828               	movf	CC2500_InitSetREG@loop_c,w
 17546  1083  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17547  1084  0084               	movwf	4
 17548  1085  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17549  1086  1803               	skipnc
 17550  1087  3E01               	addlw	1
 17551  1088  0085               	movwf	5
 17552  1089  0800               	movf	0,w	;code access
 17553  108A  00A5               	movwf	??_CC2500_InitSetREG
 17554  108B  0825               	movf	??_CC2500_InitSetREG,w
 17555  108C  00A6               	movwf	CC2500_InitSetREG@temp1
 17556                           
 17557                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17558  108D  0828               	movf	CC2500_InitSetREG@loop_c,w
 17559  108E  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17560  108F  0084               	movwf	4
 17561  1090  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17562  1091  1803               	skipnc
 17563  1092  3E01               	addlw	1
 17564  1093  0085               	movwf	5
 17565  1094  0800               	movf	0,w	;code access
 17566  1095  00A5               	movwf	??_CC2500_InitSetREG
 17567  1096  0825               	movf	??_CC2500_InitSetREG,w
 17568  1097  00A7               	movwf	CC2500_InitSetREG@temp2
 17569                           
 17570                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17571  1098  0827               	movf	CC2500_InitSetREG@temp2,w
 17572  1099  00A5               	movwf	??_CC2500_InitSetREG
 17573  109A  0825               	movf	??_CC2500_InitSetREG,w
 17574  109B  00A2               	movwf	CC2500_WriteREG@value
 17575  109C  0826               	movf	CC2500_InitSetREG@temp1,w
 17576  109D  319E  26FC  3190   	fcall	_CC2500_WriteREG
 17577  10A0  3001               	movlw	1
 17578  10A1  0020               	movlb	0	; select bank0
 17579  10A2  00A5               	movwf	??_CC2500_InitSetREG
 17580  10A3  0825               	movf	??_CC2500_InitSetREG,w
 17581  10A4  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17582  10A5  287E               	goto	L10
 17583  10A6                     __end_of_CC2500_InitSetREG:	
 17584                           
 17585                           	psect	text116
 17586  1E3C                     __ptext116:	
 17587 ;; *************** function _CC2500_InitPATable *****************
 17588 ;; Defined at:
 17589 ;;		line 174 in file "../src/CC2500_B1.c"
 17590 ;; Parameters:    Size  Location     Type
 17591 ;;		None
 17592 ;; Auto vars:     Size  Location     Type
 17593 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17594 ;;  temp            1    6[BANK0 ] unsigned char 
 17595 ;; Return value:  Size  Location     Type
 17596 ;;		None               void
 17597 ;; Registers used:
 17598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17599 ;; Tracked objects:
 17600 ;;		On entry : 0/0
 17601 ;;		On exit  : 0/0
 17602 ;;		Unchanged: 0/0
 17603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;Total ram usage:        3 bytes
 17609 ;; Hardware stack levels used:    1
 17610 ;; Hardware stack levels required when called:    7
 17611 ;; This function calls:
 17612 ;;		_CC2500_WriteREG
 17613 ;; This function is called by:
 17614 ;;		_CC2500_PowerOnInitial
 17615 ;; This function uses a non-reentrant model
 17616 ;;
 17617                           
 17618                           
 17619                           ;psect for function _CC2500_InitPATable
 17620  1E3C                     _CC2500_InitPATable:	
 17621                           
 17622                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17623                           ;CC2500_B1.c: 176: unsigned char temp;
 17624                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17625                           
 17626                           ;incstack = 0
 17627                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17628  1E3C  0020               	movlb	0	; select bank0
 17629  1E3D  01A7               	clrf	CC2500_InitPATable@loop_d
 17630  1E3E                     L11:	
 17631  1E3E  3008               	movlw	8
 17632  1E3F  0227               	subwf	CC2500_InitPATable@loop_d,w
 17633  1E40  1803               	btfsc	3,0
 17634  1E41  0008               	return
 17635                           
 17636                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17637  1E42  0827               	movf	CC2500_InitPATable@loop_d,w
 17638  1E43  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17639  1E44  0084               	movwf	4
 17640  1E45  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17641  1E46  1803               	skipnc
 17642  1E47  3E01               	addlw	1
 17643  1E48  0085               	movwf	5
 17644  1E49  0800               	movf	0,w	;code access
 17645  1E4A  00A5               	movwf	??_CC2500_InitPATable
 17646  1E4B  0825               	movf	??_CC2500_InitPATable,w
 17647  1E4C  00A6               	movwf	CC2500_InitPATable@temp
 17648                           
 17649                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17650  1E4D  0826               	movf	CC2500_InitPATable@temp,w
 17651  1E4E  00A5               	movwf	??_CC2500_InitPATable
 17652  1E4F  0825               	movf	??_CC2500_InitPATable,w
 17653  1E50  00A2               	movwf	CC2500_WriteREG@value
 17654  1E51  303E               	movlw	62
 17655  1E52  319E  26FC  319E   	fcall	_CC2500_WriteREG
 17656  1E55  3001               	movlw	1
 17657  1E56  0020               	movlb	0	; select bank0
 17658  1E57  00A5               	movwf	??_CC2500_InitPATable
 17659  1E58  0825               	movf	??_CC2500_InitPATable,w
 17660  1E59  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17661  1E5A  2E3E               	goto	L11
 17662  1E5B                     __end_of_CC2500_InitPATable:	
 17663                           
 17664                           	psect	text117
 17665  1EFC                     __ptext117:	
 17666 ;; *************** function _CC2500_WriteREG *****************
 17667 ;; Defined at:
 17668 ;;		line 251 in file "../src/CC2500_B1.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  w_addr          1    wreg     unsigned char 
 17671 ;;  value           1    2[BANK0 ] unsigned char 
 17672 ;; Auto vars:     Size  Location     Type
 17673 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17674 ;; Return value:  Size  Location     Type
 17675 ;;		None               void
 17676 ;; Registers used:
 17677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17678 ;; Tracked objects:
 17679 ;;		On entry : 0/0
 17680 ;;		On exit  : 0/0
 17681 ;;		Unchanged: 0/0
 17682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17683 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17687 ;;Total ram usage:        3 bytes
 17688 ;; Hardware stack levels used:    1
 17689 ;; Hardware stack levels required when called:    6
 17690 ;; This function calls:
 17691 ;;		_CC2500_WriteByte
 17692 ;;		_Timeout_Counter
 17693 ;;		_set_TimeoutCleared
 17694 ;; This function is called by:
 17695 ;;		_CC2500_InitSetREG
 17696 ;;		_CC2500_InitPATable
 17697 ;; This function uses a non-reentrant model
 17698 ;;
 17699                           
 17700                           
 17701                           ;psect for function _CC2500_WriteREG
 17702  1EFC                     _CC2500_WriteREG:	
 17703                           
 17704                           ;incstack = 0
 17705                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17706                           ;CC2500_WriteREG@w_addr stored from wreg
 17707  1EFC  0020               	movlb	0	; select bank0
 17708  1EFD  00A4               	movwf	CC2500_WriteREG@w_addr
 17709                           
 17710                           ;CC2500_B1.c: 252: RC4 = 0;
 17711  1EFE  120E               	bcf	14,4	;volatile
 17712                           
 17713                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17714  1EFF  0824               	movf	CC2500_WriteREG@w_addr,w
 17715  1F00  00A3               	movwf	??_CC2500_WriteREG
 17716  1F01  0823               	movf	??_CC2500_WriteREG,w
 17717  1F02  0021               	movlb	1	; select bank1
 17718  1F03  00D1               	movwf	_SPI0Buffer^(0+128)
 17719                           
 17720                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17721  1F04  2F08               	goto	l6843
 17722  1F05                     l6841:	
 17723                           
 17724                           ;CC2500_B1.c: 255: Timeout_Counter();
 17725  1F05  319D  2517  319E   	fcall	_Timeout_Counter
 17726  1F08                     l6843:	
 17727  1F08  0020               	movlb	0	; select bank0
 17728  1F09  1D0E               	btfss	14,2	;volatile
 17729  1F0A  2F0E               	goto	l6847
 17730  1F0B  0021               	movlb	1	; select bank1
 17731  1F0C  1D2C               	btfss	(_myMain^(0+128)+12),2
 17732  1F0D  2F05               	goto	l6841
 17733  1F0E                     l6847:	
 17734                           
 17735                           ;CC2500_B1.c: 256: };
 17736                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17737  1F0E  319A  22BA  319E   	fcall	_set_TimeoutCleared
 17738                           
 17739                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17740  1F11  319D  2582  319E   	fcall	_CC2500_WriteByte
 17741                           
 17742                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17743  1F14  0020               	movlb	0	; select bank0
 17744  1F15  0822               	movf	CC2500_WriteREG@value,w
 17745  1F16  00A3               	movwf	??_CC2500_WriteREG
 17746  1F17  0823               	movf	??_CC2500_WriteREG,w
 17747  1F18  0021               	movlb	1	; select bank1
 17748  1F19  00D1               	movwf	_SPI0Buffer^(0+128)
 17749                           
 17750                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17751  1F1A  319D  2582         	fcall	_CC2500_WriteByte
 17752                           
 17753                           ;CC2500_B1.c: 262: RC4 = 1;
 17754  1F1C  0020               	movlb	0	; select bank0
 17755  1F1D  160E               	bsf	14,4	;volatile
 17756  1F1E  0008               	return
 17757  1F1F                     __end_of_CC2500_WriteREG:	
 17758                           
 17759                           	psect	text118
 17760  1B35                     __ptext118:	
 17761 ;; *************** function _CC2500_FrequencyCabr *****************
 17762 ;; Defined at:
 17763 ;;		line 201 in file "../src/CC2500_B1.c"
 17764 ;; Parameters:    Size  Location     Type
 17765 ;;		None
 17766 ;; Auto vars:     Size  Location     Type
 17767 ;;		None
 17768 ;; Return value:  Size  Location     Type
 17769 ;;		None               void
 17770 ;; Registers used:
 17771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17781 ;;Total ram usage:        0 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:    7
 17784 ;; This function calls:
 17785 ;;		_CC2500_WriteCommand
 17786 ;;		_DelayTime_1us
 17787 ;; This function is called by:
 17788 ;;		_CC2500_PowerOnInitial
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           
 17793                           ;psect for function _CC2500_FrequencyCabr
 17794  1B35                     _CC2500_FrequencyCabr:	
 17795                           
 17796                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17797                           
 17798                           ;incstack = 0
 17799                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17800  1B35  3033               	movlw	51
 17801  1B36  319D  25B4  319B   	fcall	_CC2500_WriteCommand
 17802                           
 17803                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17804  1B39  30E8               	movlw	232
 17805  1B3A  0020               	movlb	0	; select bank0
 17806  1B3B  00A0               	movwf	DelayTime_1us@count
 17807  1B3C  3003               	movlw	3
 17808  1B3D  00A1               	movwf	DelayTime_1us@count+1
 17809  1B3E  319F  278B         	fcall	_DelayTime_1us
 17810  1B40  0008               	return
 17811  1B41                     __end_of_CC2500_FrequencyCabr:	
 17812                           
 17813                           	psect	text119
 17814  1F8B                     __ptext119:	
 17815 ;; *************** function _DelayTime_1us *****************
 17816 ;; Defined at:
 17817 ;;		line 320 in file "../src/CC2500_B1.c"
 17818 ;; Parameters:    Size  Location     Type
 17819 ;;  count           2    0[BANK0 ] int 
 17820 ;; Auto vars:     Size  Location     Type
 17821 ;;  j               2    4[BANK0 ] unsigned int 
 17822 ;;  i               2    2[BANK0 ] unsigned int 
 17823 ;; Return value:  Size  Location     Type
 17824 ;;		None               void
 17825 ;; Registers used:
 17826 ;;		wreg, status,2
 17827 ;; Tracked objects:
 17828 ;;		On entry : 0/0
 17829 ;;		On exit  : 0/0
 17830 ;;		Unchanged: 0/0
 17831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;Total ram usage:        6 bytes
 17837 ;; Hardware stack levels used:    1
 17838 ;; Hardware stack levels required when called:    5
 17839 ;; This function calls:
 17840 ;;		Nothing
 17841 ;; This function is called by:
 17842 ;;		_CC2500_PowerRST
 17843 ;;		_CC2500_FrequencyCabr
 17844 ;; This function uses a non-reentrant model
 17845 ;;
 17846                           
 17847                           
 17848                           ;psect for function _DelayTime_1us
 17849  1F8B                     _DelayTime_1us:	
 17850                           
 17851                           ;CC2500_B1.c: 321: unsigned int i, j;
 17852                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17853                           
 17854                           ;incstack = 0
 17855                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17856  1F8B  3001               	movlw	1
 17857  1F8C  0020               	movlb	0	; select bank0
 17858  1F8D  00A2               	movwf	DelayTime_1us@i
 17859  1F8E  3000               	movlw	0
 17860  1F8F  00A3               	movwf	DelayTime_1us@i+1
 17861  1F90                     l372:	
 17862  1F90  0821               	movf	DelayTime_1us@count+1,w
 17863  1F91  0223               	subwf	DelayTime_1us@i+1,w
 17864  1F92  1D03               	skipz
 17865  1F93  2F96               	goto	u5985
 17866  1F94  0820               	movf	DelayTime_1us@count,w
 17867  1F95  0222               	subwf	DelayTime_1us@i,w
 17868  1F96                     u5985:	
 17869  1F96  1803               	btfsc	3,0
 17870  1F97  0008               	return
 17871                           
 17872                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17873  1F98  01A4               	clrf	DelayTime_1us@j
 17874  1F99  01A5               	clrf	DelayTime_1us@j+1
 17875  1F9A  3000               	movlw	0
 17876  1F9B  0225               	subwf	DelayTime_1us@j+1,w
 17877  1F9C  3002               	movlw	2
 17878  1F9D  1903               	skipnz
 17879  1F9E  0224               	subwf	DelayTime_1us@j,w
 17880  1F9F  1803               	btfsc	3,0
 17881  1FA0  2FAC               	goto	l6835
 17882  1FA1                     l6833:	
 17883  1FA1  3001               	movlw	1
 17884  1FA2  07A4               	addwf	DelayTime_1us@j,f
 17885  1FA3  3000               	movlw	0
 17886  1FA4  3DA5               	addwfc	DelayTime_1us@j+1,f
 17887  1FA5  3000               	movlw	0
 17888  1FA6  0225               	subwf	DelayTime_1us@j+1,w
 17889  1FA7  3002               	movlw	2
 17890  1FA8  1903               	skipnz
 17891  1FA9  0224               	subwf	DelayTime_1us@j,w
 17892  1FAA  1C03               	skipc
 17893  1FAB  2FA1               	goto	l6833
 17894  1FAC                     l6835:	
 17895  1FAC  3001               	movlw	1
 17896  1FAD  07A2               	addwf	DelayTime_1us@i,f
 17897  1FAE  3000               	movlw	0
 17898  1FAF  3DA3               	addwfc	DelayTime_1us@i+1,f
 17899  1FB0  2F90               	goto	l372
 17900  1FB1                     __end_of_DelayTime_1us:	
 17901                           
 17902                           	psect	text120
 17903  1AAE                     __ptext120:	
 17904 ;; *************** function _CC2500_ClearTXFIFO *****************
 17905 ;; Defined at:
 17906 ;;		line 187 in file "../src/CC2500_B1.c"
 17907 ;; Parameters:    Size  Location     Type
 17908 ;;		None
 17909 ;; Auto vars:     Size  Location     Type
 17910 ;;		None
 17911 ;; Return value:  Size  Location     Type
 17912 ;;		None               void
 17913 ;; Registers used:
 17914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17915 ;; Tracked objects:
 17916 ;;		On entry : 0/0
 17917 ;;		On exit  : 0/0
 17918 ;;		Unchanged: 0/0
 17919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;Total ram usage:        0 bytes
 17925 ;; Hardware stack levels used:    1
 17926 ;; Hardware stack levels required when called:    7
 17927 ;; This function calls:
 17928 ;;		_CC2500_WriteCommand
 17929 ;; This function is called by:
 17930 ;;		_CC2500_PowerOnInitial
 17931 ;; This function uses a non-reentrant model
 17932 ;;
 17933                           
 17934                           
 17935                           ;psect for function _CC2500_ClearTXFIFO
 17936  1AAE                     _CC2500_ClearTXFIFO:	
 17937                           
 17938                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17939                           
 17940                           ;incstack = 0
 17941                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17942  1AAE  303B               	movlw	59
 17943  1AAF  319D  25B4         	fcall	_CC2500_WriteCommand
 17944  1AB1  0008               	return
 17945  1AB2                     __end_of_CC2500_ClearTXFIFO:	
 17946                           
 17947                           	psect	text121
 17948  1AAA                     __ptext121:	
 17949 ;; *************** function _CC2500_ClearRXFIFO *****************
 17950 ;; Defined at:
 17951 ;;		line 194 in file "../src/CC2500_B1.c"
 17952 ;; Parameters:    Size  Location     Type
 17953 ;;		None
 17954 ;; Auto vars:     Size  Location     Type
 17955 ;;		None
 17956 ;; Return value:  Size  Location     Type
 17957 ;;		None               void
 17958 ;; Registers used:
 17959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17960 ;; Tracked objects:
 17961 ;;		On entry : 0/0
 17962 ;;		On exit  : 0/0
 17963 ;;		Unchanged: 0/0
 17964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17969 ;;Total ram usage:        0 bytes
 17970 ;; Hardware stack levels used:    1
 17971 ;; Hardware stack levels required when called:    7
 17972 ;; This function calls:
 17973 ;;		_CC2500_WriteCommand
 17974 ;; This function is called by:
 17975 ;;		_CC2500_PowerOnInitial
 17976 ;; This function uses a non-reentrant model
 17977 ;;
 17978                           
 17979                           
 17980                           ;psect for function _CC2500_ClearRXFIFO
 17981  1AAA                     _CC2500_ClearRXFIFO:	
 17982                           
 17983                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17984                           
 17985                           ;incstack = 0
 17986                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17987  1AAA  303A               	movlw	58
 17988  1AAB  319D  25B4         	fcall	_CC2500_WriteCommand
 17989  1AAD  0008               	return
 17990  1AAE                     __end_of_CC2500_ClearRXFIFO:	
 17991                           
 17992                           	psect	text122
 17993  1DB4                     __ptext122:	
 17994 ;; *************** function _CC2500_WriteCommand *****************
 17995 ;; Defined at:
 17996 ;;		line 285 in file "../src/CC2500_B1.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;  command         1    wreg     unsigned char 
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;  command         1    3[BANK0 ] unsigned char 
 18001 ;; Return value:  Size  Location     Type
 18002 ;;		None               void
 18003 ;; Registers used:
 18004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;Total ram usage:        2 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:    6
 18017 ;; This function calls:
 18018 ;;		_CC2500_WriteByte
 18019 ;;		_Timeout_Counter
 18020 ;;		_set_TimeoutCleared
 18021 ;; This function is called by:
 18022 ;;		_CC2500_TxData
 18023 ;;		_CC2500_ClearTXFIFO
 18024 ;;		_CC2500_ClearRXFIFO
 18025 ;;		_CC2500_FrequencyCabr
 18026 ;;		_CC2500_SIDLEMode
 18027 ;;		_setRF_Main
 18028 ;;		_RF_RxDisable
 18029 ;; This function uses a non-reentrant model
 18030 ;;
 18031                           
 18032                           
 18033                           ;psect for function _CC2500_WriteCommand
 18034  1DB4                     _CC2500_WriteCommand:	
 18035                           
 18036                           ;incstack = 0
 18037                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18038                           ;CC2500_WriteCommand@command stored from wreg
 18039  1DB4  0020               	movlb	0	; select bank0
 18040  1DB5  00A3               	movwf	CC2500_WriteCommand@command
 18041                           
 18042                           ;CC2500_B1.c: 286: RC4 = 0;
 18043  1DB6  120E               	bcf	14,4	;volatile
 18044                           
 18045                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18046  1DB7  0823               	movf	CC2500_WriteCommand@command,w
 18047  1DB8  00A2               	movwf	??_CC2500_WriteCommand
 18048  1DB9  0822               	movf	??_CC2500_WriteCommand,w
 18049  1DBA  0021               	movlb	1	; select bank1
 18050  1DBB  00D1               	movwf	_SPI0Buffer^(0+128)
 18051                           
 18052                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18053  1DBC  2DC0               	goto	l6539
 18054  1DBD                     l6537:	
 18055                           
 18056                           ;CC2500_B1.c: 290: Timeout_Counter();
 18057  1DBD  319D  2517  319D   	fcall	_Timeout_Counter
 18058  1DC0                     l6539:	
 18059  1DC0  0020               	movlb	0	; select bank0
 18060  1DC1  1D0E               	btfss	14,2	;volatile
 18061  1DC2  2DC6               	goto	l6543
 18062  1DC3  0021               	movlb	1	; select bank1
 18063  1DC4  1D2C               	btfss	(_myMain^(0+128)+12),2
 18064  1DC5  2DBD               	goto	l6537
 18065  1DC6                     l6543:	
 18066                           
 18067                           ;CC2500_B1.c: 291: };
 18068                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18069  1DC6  319A  22BA  319D   	fcall	_set_TimeoutCleared
 18070                           
 18071                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18072  1DC9  319D  2582         	fcall	_CC2500_WriteByte
 18073                           
 18074                           ;CC2500_B1.c: 295: RC4 = 1;
 18075  1DCB  0020               	movlb	0	; select bank0
 18076  1DCC  160E               	bsf	14,4	;volatile
 18077  1DCD  0008               	return
 18078  1DCE                     __end_of_CC2500_WriteCommand:	
 18079                           
 18080                           	psect	text123
 18081  1ABA                     __ptext123:	
 18082 ;; *************** function _set_TimeoutCleared *****************
 18083 ;; Defined at:
 18084 ;;		line 276 in file "../src/main_B1.c"
 18085 ;; Parameters:    Size  Location     Type
 18086 ;;		None
 18087 ;; Auto vars:     Size  Location     Type
 18088 ;;		None
 18089 ;; Return value:  Size  Location     Type
 18090 ;;		None               void
 18091 ;; Registers used:
 18092 ;;		status,2
 18093 ;; Tracked objects:
 18094 ;;		On entry : 0/0
 18095 ;;		On exit  : 0/0
 18096 ;;		Unchanged: 0/0
 18097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;Total ram usage:        0 bytes
 18103 ;; Hardware stack levels used:    1
 18104 ;; Hardware stack levels required when called:    5
 18105 ;; This function calls:
 18106 ;;		Nothing
 18107 ;; This function is called by:
 18108 ;;		_CC2500_TxData
 18109 ;;		_CC2500_RxData
 18110 ;;		_CC2500_PowerRST
 18111 ;;		_CC2500_WriteREG
 18112 ;;		_CC2500_WriteCommand
 18113 ;;		_CC2500_ReadStatus
 18114 ;;		_getAD
 18115 ;;		_TouchPower
 18116 ;;		_CC2500_ReadREG
 18117 ;; This function uses a non-reentrant model
 18118 ;;
 18119                           
 18120                           
 18121                           ;psect for function _set_TimeoutCleared
 18122  1ABA                     _set_TimeoutCleared:	
 18123                           
 18124                           ;main_B1.c: 277: myMain.Timeout = 0;
 18125                           
 18126                           ;incstack = 0
 18127                           ; Regs used in _set_TimeoutCleared: [status,2]
 18128  1ABA  0021               	movlb	1	; select bank1
 18129  1ABB  112C               	bcf	(_myMain^(0+128)+12),2
 18130                           
 18131                           ;main_B1.c: 278: myMain.Timeout_Counter = 0;
 18132  1ABC  01AD               	clrf	(_myMain^(0+128)+13)
 18133  1ABD  01AE               	clrf	((_myMain+1)^(0+128)+13)
 18134  1ABE  0008               	return
 18135  1ABF                     __end_of_set_TimeoutCleared:	
 18136                           
 18137                           	psect	text124
 18138  1D17                     __ptext124:	
 18139 ;; *************** function _Timeout_Counter *****************
 18140 ;; Defined at:
 18141 ;;		line 267 in file "../src/main_B1.c"
 18142 ;; Parameters:    Size  Location     Type
 18143 ;;		None
 18144 ;; Auto vars:     Size  Location     Type
 18145 ;;		None
 18146 ;; Return value:  Size  Location     Type
 18147 ;;		None               void
 18148 ;; Registers used:
 18149 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18150 ;; Tracked objects:
 18151 ;;		On entry : 0/0
 18152 ;;		On exit  : 0/0
 18153 ;;		Unchanged: 0/0
 18154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;Total ram usage:        0 bytes
 18160 ;; Hardware stack levels used:    1
 18161 ;; Hardware stack levels required when called:    5
 18162 ;; This function calls:
 18163 ;;		Nothing
 18164 ;; This function is called by:
 18165 ;;		_CC2500_TxData
 18166 ;;		_CC2500_RxData
 18167 ;;		_CC2500_PowerRST
 18168 ;;		_CC2500_WriteREG
 18169 ;;		_CC2500_WriteCommand
 18170 ;;		_CC2500_ReadStatus
 18171 ;;		_getAD
 18172 ;;		_TouchPower
 18173 ;;		_CC2500_ReadREG
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           
 18178                           ;psect for function _Timeout_Counter
 18179  1D17                     _Timeout_Counter:	
 18180                           
 18181                           ;main_B1.c: 268: myMain.Timeout_Counter++;
 18182                           
 18183                           ;incstack = 0
 18184                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18185  1D17  3001               	movlw	1
 18186  1D18  0021               	movlb	1	; select bank1
 18187  1D19  07AD               	addwf	(_myMain^(0+128)+13),f
 18188  1D1A  3000               	movlw	0
 18189  1D1B  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 18190                           
 18191                           ;main_B1.c: 269: if (myMain.Timeout_Counter == 10000) {
 18192  1D1C  300D               	movlw	13
 18193  1D1D  3EA0               	addlw	_myMain& (0+255)
 18194  1D1E  0086               	movwf	6
 18195  1D1F  0187               	clrf	7
 18196  1D20  3F40               	moviw [0]fsr1
 18197  1D21  3A10               	xorlw	16
 18198  1D22  1D03               	skipz
 18199  1D23  2D26               	goto	u5345
 18200  1D24  3F41               	moviw [1]fsr1
 18201  1D25  3A27               	xorlw	39
 18202  1D26                     u5345:	
 18203  1D26  1D03               	skipz
 18204  1D27  0008               	return
 18205                           
 18206                           ;main_B1.c: 270: myMain.Timeout_Counter = 0;
 18207  1D28  01AD               	clrf	(_myMain^(0+128)+13)
 18208  1D29  01AE               	clrf	((_myMain+1)^(0+128)+13)
 18209                           
 18210                           ;main_B1.c: 271: myMain.Timeout = 1;
 18211  1D2A  152C               	bsf	(_myMain^(0+128)+12),2
 18212  1D2B  0008               	return
 18213  1D2C                     __end_of_Timeout_Counter:	
 18214                           
 18215                           	psect	text125
 18216  1D82                     __ptext125:	
 18217 ;; *************** function _CC2500_WriteByte *****************
 18218 ;; Defined at:
 18219 ;;		line 219 in file "../src/CC2500_B1.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;		None
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18224 ;; Return value:  Size  Location     Type
 18225 ;;		None               void
 18226 ;; Registers used:
 18227 ;;		wreg, status,2, status,0
 18228 ;; Tracked objects:
 18229 ;;		On entry : 0/0
 18230 ;;		On exit  : 0/0
 18231 ;;		Unchanged: 0/0
 18232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;Total ram usage:        2 bytes
 18238 ;; Hardware stack levels used:    1
 18239 ;; Hardware stack levels required when called:    5
 18240 ;; This function calls:
 18241 ;;		Nothing
 18242 ;; This function is called by:
 18243 ;;		_CC2500_TxData
 18244 ;;		_CC2500_RxData
 18245 ;;		_CC2500_PowerRST
 18246 ;;		_CC2500_WriteREG
 18247 ;;		_CC2500_WriteCommand
 18248 ;;		_CC2500_ReadStatus
 18249 ;;		_CC2500_ReadREG
 18250 ;; This function uses a non-reentrant model
 18251 ;;
 18252                           
 18253                           
 18254                           ;psect for function _CC2500_WriteByte
 18255  1D82                     _CC2500_WriteByte:	
 18256                           
 18257                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18258                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18259                           
 18260                           ;incstack = 0
 18261                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18262  1D82  0020               	movlb	0	; select bank0
 18263  1D83  01A1               	clrf	CC2500_WriteByte@loop_a
 18264  1D84                     L12:	
 18265  1D84  3008               	movlw	8
 18266  1D85  0221               	subwf	CC2500_WriteByte@loop_a,w
 18267  1D86  1803               	btfsc	3,0
 18268  1D87  0008               	return
 18269                           
 18270                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18271  1D88  0021               	movlb	1	; select bank1
 18272  1D89  1FD1               	btfss	_SPI0Buffer^(0+128),7
 18273  1D8A  2D8E               	goto	l328
 18274                           
 18275                           ;CC2500_B1.c: 223: RC0 = 1;
 18276  1D8B  0020               	movlb	0	; select bank0
 18277  1D8C  140E               	bsf	14,0	;volatile
 18278  1D8D  2D90               	goto	l329
 18279  1D8E                     l328:	
 18280                           
 18281                           ;CC2500_B1.c: 224: else
 18282                           ;CC2500_B1.c: 225: RC0 = 0;
 18283  1D8E  0020               	movlb	0	; select bank0
 18284  1D8F  100E               	bcf	14,0	;volatile
 18285  1D90                     l329:	
 18286                           
 18287                           ;CC2500_B1.c: 226: RC1 = 1;
 18288  1D90  148E               	bsf	14,1	;volatile
 18289                           
 18290                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18291  1D91  1003               	clrc
 18292  1D92  0021               	movlb	1	; select bank1
 18293  1D93  0DD1               	rlf	_SPI0Buffer^(0+128),f
 18294                           
 18295                           ;CC2500_B1.c: 228: RC1 = 0;
 18296  1D94  0020               	movlb	0	; select bank0
 18297  1D95  108E               	bcf	14,1	;volatile
 18298  1D96  3001               	movlw	1
 18299  1D97  00A0               	movwf	??_CC2500_WriteByte
 18300  1D98  0820               	movf	??_CC2500_WriteByte,w
 18301  1D99  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18302  1D9A  2D84               	goto	L12
 18303  1D9B                     __end_of_CC2500_WriteByte:	
 18304                           
 18305                           	psect	text126
 18306  1462                     __ptext126:	
 18307 ;; *************** function _Buzzer_Main *****************
 18308 ;; Defined at:
 18309 ;;		line 46 in file "../src/Buzzer_B1.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;		None
 18312 ;; Auto vars:     Size  Location     Type
 18313 ;;		None
 18314 ;; Return value:  Size  Location     Type
 18315 ;;		None               void
 18316 ;; Registers used:
 18317 ;;		wreg, status,2, status,0
 18318 ;; Tracked objects:
 18319 ;;		On entry : 0/0
 18320 ;;		On exit  : 0/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18327 ;;Total ram usage:        1 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    5
 18330 ;; This function calls:
 18331 ;;		Nothing
 18332 ;; This function is called by:
 18333 ;;		_main
 18334 ;; This function uses a non-reentrant model
 18335 ;;
 18336                           
 18337                           
 18338                           ;psect for function _Buzzer_Main
 18339  1462                     _Buzzer_Main:	
 18340                           
 18341                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18342                           
 18343                           ;incstack = 0
 18344                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18345  1462  0021               	movlb	1	; select bank1
 18346  1463  1CAF               	btfss	_Buz1^(0+128),1
 18347  1464  0008               	return
 18348                           
 18349                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18350  1465  3001               	movlw	1
 18351  1466  07B0               	addwf	(_Buz1^(0+128)+1),f
 18352  1467  3000               	movlw	0
 18353  1468  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 18354                           
 18355                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18356  1469  0836               	movf	((_Buz1+1)^(0+128)+6),w
 18357  146A  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 18358  146B  1D03               	skipz
 18359  146C  2C6F               	goto	u7725
 18360  146D  0835               	movf	(_Buz1^(0+128)+6),w
 18361  146E  0230               	subwf	(_Buz1^(0+128)+1),w
 18362  146F                     u7725:	
 18363  146F  1C03               	skipc
 18364  1470  0008               	return
 18365                           
 18366                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18367  1471  01B0               	clrf	(_Buz1^(0+128)+1)
 18368  1472  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 18369                           
 18370                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18371  1473  12AF               	bcf	_Buz1^(0+128),5
 18372  1474  0020               	movlb	0	; select bank0
 18373  1475  1D8D               	btfss	13,3	;volatile
 18374  1476  2C79               	goto	l7875
 18375  1477  0021               	movlb	1	; select bank1
 18376  1478  16AF               	bsf	_Buz1^(0+128),5
 18377  1479                     l7875:	
 18378                           
 18379                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18380  1479  0021               	movlb	1	; select bank1
 18381  147A  1AAF               	btfsc	_Buz1^(0+128),5
 18382  147B  2CA5               	goto	l106
 18383                           
 18384                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18385  147C  08B2               	movf	(_Buz1^(0+128)+3),f
 18386  147D  1D03               	skipz
 18387  147E  2CA1               	goto	l107
 18388                           
 18389                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18390  147F  1DAF               	btfss	_Buz1^(0+128),3
 18391  1480  2C8F               	goto	l108
 18392                           
 18393                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18394  1481  11AF               	bcf	_Buz1^(0+128),3
 18395                           
 18396                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18397  1482  0833               	movf	(_Buz1^(0+128)+4),w
 18398  1483  0020               	movlb	0	; select bank0
 18399  1484  00A0               	movwf	??_Buzzer_Main
 18400  1485  0820               	movf	??_Buzzer_Main,w
 18401  1486  0021               	movlb	1	; select bank1
 18402  1487  00B2               	movwf	(_Buz1^(0+128)+3)
 18403                           
 18404                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18405  1488  0838               	movf	((_Buz1+1)^(0+128)+8),w
 18406  1489  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18407  148A  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18408  148B  0837               	movf	(_Buz1^(0+128)+8),w
 18409  148C  01B5               	clrf	(_Buz1^(0+128)+6)
 18410  148D  07B5               	addwf	(_Buz1^(0+128)+6),f
 18411                           
 18412                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18413  148E  0008               	return
 18414  148F                     l108:	
 18415  148F  1E2F               	btfss	_Buz1^(0+128),4
 18416  1490  2C9F               	goto	l110
 18417                           
 18418                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18419  1491  122F               	bcf	_Buz1^(0+128),4
 18420                           
 18421                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18422  1492  0834               	movf	(_Buz1^(0+128)+5),w
 18423  1493  0020               	movlb	0	; select bank0
 18424  1494  00A0               	movwf	??_Buzzer_Main
 18425  1495  0820               	movf	??_Buzzer_Main,w
 18426  1496  0021               	movlb	1	; select bank1
 18427  1497  00B2               	movwf	(_Buz1^(0+128)+3)
 18428                           
 18429                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18430  1498  083A               	movf	((_Buz1+1)^(0+128)+10),w
 18431  1499  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18432  149A  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18433  149B  0839               	movf	(_Buz1^(0+128)+10),w
 18434  149C  01B5               	clrf	(_Buz1^(0+128)+6)
 18435  149D  07B5               	addwf	(_Buz1^(0+128)+6),f
 18436                           
 18437                           ;Buzzer_B1.c: 62: } else {
 18438  149E  0008               	return
 18439  149F                     l110:	
 18440                           
 18441                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18442  149F  10AF               	bcf	_Buz1^(0+128),1
 18443                           
 18444                           ;Buzzer_B1.c: 64: }
 18445                           ;Buzzer_B1.c: 65: } else {
 18446  14A0  0008               	return
 18447  14A1                     l107:	
 18448                           
 18449                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18450  14A1  16AF               	bsf	_Buz1^(0+128),5
 18451                           
 18452                           ;Buzzer_B1.c: 68: RB3 = 1;
 18453  14A2  0020               	movlb	0	; select bank0
 18454  14A3  158D               	bsf	13,3	;volatile
 18455                           
 18456                           ;Buzzer_B1.c: 69: }
 18457                           ;Buzzer_B1.c: 70: } else {
 18458  14A4  0008               	return
 18459  14A5                     l106:	
 18460                           
 18461                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18462  14A5  12AF               	bcf	_Buz1^(0+128),5
 18463                           
 18464                           ;Buzzer_B1.c: 73: RB3 = 0;
 18465  14A6  0020               	movlb	0	; select bank0
 18466  14A7  118D               	bcf	13,3	;volatile
 18467                           
 18468                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18469  14A8  3001               	movlw	1
 18470  14A9  0021               	movlb	1	; select bank1
 18471  14AA  02B2               	subwf	(_Buz1^(0+128)+3),f
 18472  14AB  0008               	return
 18473  14AC                     __end_of_Buzzer_Main:	
 18474                           
 18475                           	psect	text127
 18476  1A9E                     __ptext127:	
 18477 ;; *************** function _Buzzer_Initialization *****************
 18478 ;; Defined at:
 18479 ;;		line 11 in file "../src/Buzzer_B1.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;		None
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;		None
 18484 ;; Return value:  Size  Location     Type
 18485 ;;		None               void
 18486 ;; Registers used:
 18487 ;;		None
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18497 ;;Total ram usage:        0 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    5
 18500 ;; This function calls:
 18501 ;;		Nothing
 18502 ;; This function is called by:
 18503 ;;		_main
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           
 18508                           ;psect for function _Buzzer_Initialization
 18509  1A9E                     _Buzzer_Initialization:	
 18510                           
 18511                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18512                           
 18513                           ;incstack = 0
 18514                           ; Regs used in _Buzzer_Initialization: []
 18515  1A9E  0021               	movlb	1	; select bank1
 18516  1A9F  142F               	bsf	_Buz1^(0+128),0
 18517  1AA0  0008               	return
 18518  1AA1                     __end_of_Buzzer_Initialization:	
 18519                           
 18520                           	psect	intentry
 18521  0004                     __pintentry:	
 18522 ;; *************** function _ISR *****************
 18523 ;; Defined at:
 18524 ;;		line 107 in file "../src/MCU_B1.c"
 18525 ;; Parameters:    Size  Location     Type
 18526 ;;		None
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;		None
 18529 ;; Return value:  Size  Location     Type
 18530 ;;		None               void
 18531 ;; Registers used:
 18532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;Total ram usage:        1 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    4
 18545 ;; This function calls:
 18546 ;;		_IOC_ISR
 18547 ;;		_TMR1_ISR
 18548 ;; This function is called by:
 18549 ;;		Interrupt level 1
 18550 ;; This function uses a non-reentrant model
 18551 ;;
 18552                           
 18553  0004                     _ISR:	
 18554                           
 18555                           ;incstack = 0
 18556                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18557  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18558  0005  3180               	pagesel	$
 18559  0006  0020               	movlb	0	; select bank0
 18560  0007  087F               	movf	127,w
 18561  0008  00F7               	movwf	??_ISR
 18562                           
 18563                           ;MCU_B1.c: 109: IOC_ISR();
 18564  0009  319B  23A4  3180   	fcall	_IOC_ISR
 18565                           
 18566                           ;MCU_B1.c: 111: ;;
 18567                           ;MCU_B1.c: 113: TMR1_ISR();
 18568  000C  319F  27D8         	fcall	_TMR1_ISR
 18569  000E  0877               	movf	??_ISR,w
 18570  000F  0020               	movlb	0	; select bank0
 18571  0010  00FF               	movwf	127
 18572  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18573  0012  0009               	retfie
 18574  0013                     __end_of_ISR:	
 18575                           
 18576                           	psect	text129
 18577  1FD8                     __ptext129:	
 18578 ;; *************** function _TMR1_ISR *****************
 18579 ;; Defined at:
 18580 ;;		line 209 in file "../src/MCU_B1.c"
 18581 ;; Parameters:    Size  Location     Type
 18582 ;;		None
 18583 ;; Auto vars:     Size  Location     Type
 18584 ;;		None
 18585 ;; Return value:  Size  Location     Type
 18586 ;;		None               void
 18587 ;; Registers used:
 18588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18589 ;; Tracked objects:
 18590 ;;		On entry : 0/0
 18591 ;;		On exit  : 0/0
 18592 ;;		Unchanged: 0/0
 18593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18598 ;;Total ram usage:        0 bytes
 18599 ;; Hardware stack levels used:    1
 18600 ;; Hardware stack levels required when called:    2
 18601 ;; This function calls:
 18602 ;;		_setDimmerLights_IntrControl
 18603 ;; This function is called by:
 18604 ;;		_ISR
 18605 ;; This function uses a non-reentrant model
 18606 ;;
 18607                           
 18608                           
 18609                           ;psect for function _TMR1_ISR
 18610  1FD8                     _TMR1_ISR:	
 18611                           
 18612                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18613                           
 18614                           ;incstack = 0
 18615                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18616  1FD8  0021               	movlb	1	; select bank1
 18617  1FD9  1C11               	btfss	17,0	;volatile
 18618  1FDA  0008               	return
 18619  1FDB  0020               	movlb	0	; select bank0
 18620  1FDC  1C11               	btfss	17,0	;volatile
 18621  1FDD  0008               	return
 18622                           
 18623                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18624  1FDE  30FA               	movlw	250
 18625  1FDF  0097               	movwf	23	;volatile
 18626                           
 18627                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18628  1FE0  3038               	movlw	56
 18629  1FE1  0096               	movwf	22	;volatile
 18630                           
 18631                           ;MCU_B1.c: 214: TMR1IF = 0;
 18632  1FE2  1011               	bcf	17,0	;volatile
 18633                           
 18634                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18635  1FE3  3001               	movlw	1
 18636  1FE4  3183  2337  319F   	fcall	_setDimmerLights_IntrControl
 18637                           
 18638                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18639  1FE7  3002               	movlw	2
 18640  1FE8  3183  2337  319F   	fcall	_setDimmerLights_IntrControl
 18641                           
 18642                           ;MCU_B1.c: 234: Timer1.Count++;
 18643  1FEB  3001               	movlw	1
 18644  1FEC  0021               	movlb	1	; select bank1
 18645  1FED  07C8               	addwf	(_Timer1^(0+128)+1),f
 18646  1FEE  3000               	movlw	0
 18647  1FEF  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18648                           
 18649                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18650  1FF0  3001               	movlw	1
 18651  1FF1  3EC7               	addlw	_Timer1& (0+255)
 18652  1FF2  0086               	movwf	6
 18653  1FF3  0187               	clrf	7
 18654  1FF4  3F40               	moviw [0]fsr1
 18655  1FF5  3A64               	xorlw	100
 18656  1FF6  1D03               	skipz
 18657  1FF7  2FFA               	goto	u788_25
 18658  1FF8  3F41               	moviw [1]fsr1
 18659  1FF9  3A00               	xorlw	0
 18660  1FFA                     u788_25:	
 18661  1FFA  1D03               	skipz
 18662  1FFB  0008               	return
 18663                           
 18664                           ;MCU_B1.c: 236: {
 18665                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18666  1FFC  01C8               	clrf	(_Timer1^(0+128)+1)
 18667  1FFD  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18668                           
 18669                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18670  1FFE  1447               	bsf	_Timer1^(0+128),0
 18671  1FFF  0008               	return
 18672  2000                     __end_of_TMR1_ISR:	
 18673                           
 18674                           	psect	text130
 18675  0337                     __ptext130:	
 18676 ;; *************** function _setDimmerLights_IntrControl *****************
 18677 ;; Defined at:
 18678 ;;		line 97 in file "../src/Dimmer_B1.c"
 18679 ;; Parameters:    Size  Location     Type
 18680 ;;  lights          1    wreg     unsigned char 
 18681 ;; Auto vars:     Size  Location     Type
 18682 ;;  lights          1    6[COMMON] unsigned char 
 18683 ;; Return value:  Size  Location     Type
 18684 ;;		None               void
 18685 ;; Registers used:
 18686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18687 ;; Tracked objects:
 18688 ;;		On entry : 0/0
 18689 ;;		On exit  : 0/0
 18690 ;;		Unchanged: 0/0
 18691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18694 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18695 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18696 ;;Total ram usage:        5 bytes
 18697 ;; Hardware stack levels used:    1
 18698 ;; Hardware stack levels required when called:    1
 18699 ;; This function calls:
 18700 ;;		_DimmerIntrPointSelect
 18701 ;; This function is called by:
 18702 ;;		_TMR1_ISR
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           
 18707                           ;psect for function _setDimmerLights_IntrControl
 18708  0337                     _setDimmerLights_IntrControl:	
 18709                           
 18710                           ;incstack = 0
 18711                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18712                           ;setDimmerLights_IntrControl@lights stored from wreg
 18713  0337  00F6               	movwf	setDimmerLights_IntrControl@lights
 18714                           
 18715                           ;Dimmer_B1.c: 235: DimmerIntrPointSelect(lights);
 18716  0338  0876               	movf	setDimmerLights_IntrControl@lights,w
 18717  0339  319C  2447  3183   	fcall	_DimmerIntrPointSelect
 18718                           
 18719                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->GO == 1) {
 18720  033C  0879               	movf	_DimmerLightsIntr,w
 18721  033D  0086               	movwf	6
 18722  033E  3001               	movlw	1	; select bank2/3
 18723  033F  0087               	movwf	7
 18724  0340  1C01               	btfss	1,0
 18725  0341  2B99               	goto	i1l7303
 18726                           
 18727                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18728  0342  3001               	movlw	1
 18729  0343  00F2               	movwf	??_setDimmerLights_IntrControl
 18730  0344  0879               	movf	_DimmerLightsIntr,w
 18731  0345  3E03               	addlw	3
 18732  0346  0086               	movwf	6
 18733  0347  3001               	movlw	1	; select bank2/3
 18734  0348  0087               	movwf	7
 18735  0349  0872               	movf	??_setDimmerLights_IntrControl,w
 18736  034A  0781               	addwf	1,f
 18737                           
 18738                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count
 18739                           ;Dimmer_B1.c: 239: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18740  034B  0022               	movlb	2	; select bank2
 18741  034C  0822               	movf	(_Dimmer^(0+256)+2),w
 18742  034D  00F2               	movwf	??_setDimmerLights_IntrControl
 18743  034E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18744  034F  09F2               	comf	??_setDimmerLights_IntrControl,f
 18745  0350  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18746  0351  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18747  0352  1903               	skipnz
 18748  0353  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18749  0354  0879               	movf	_DimmerLightsIntr,w
 18750  0355  3E04               	addlw	4
 18751  0356  0086               	movwf	6
 18752  0357  3001               	movlw	1	; select bank2/3
 18753  0358  0087               	movwf	7
 18754  0359  0801               	movf	1,w
 18755  035A  0772               	addwf	??_setDimmerLights_IntrControl,w
 18756  035B  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18757  035C  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18758  035D  1803               	skipnc
 18759  035E  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18760  035F  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18761  0360  0879               	movf	_DimmerLightsIntr,w
 18762  0361  3E03               	addlw	3
 18763  0362  0086               	movwf	6
 18764  0363  3001               	movlw	1	; select bank2/3
 18765  0364  0087               	movwf	7
 18766  0365  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18767  0366  3A80               	xorlw	128
 18768  0367  3C80               	sublw	128
 18769  0368  1D03               	skipz
 18770  0369  2B6C               	goto	u667_25
 18771  036A  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18772  036B  0201               	subwf	1,w
 18773  036C                     u667_25:	
 18774  036C  1C03               	skipc
 18775  036D  0008               	return
 18776                           
 18777                           ;Dimmer_B1.c: 240: DimmerLightsIntr->Count = 0;
 18778  036E  0879               	movf	_DimmerLightsIntr,w
 18779  036F  3E03               	addlw	3
 18780  0370  0086               	movwf	6
 18781  0371  3001               	movlw	1	; select bank2/3
 18782  0372  0087               	movwf	7
 18783  0373  0181               	clrf	1
 18784                           
 18785                           ;Dimmer_B1.c: 241: DimmerLightsIntr->GO = 0;
 18786  0374  0879               	movf	_DimmerLightsIntr,w
 18787  0375  0086               	movwf	6
 18788  0376  3001               	movlw	1	; select bank2/3
 18789  0377  0087               	movwf	7
 18790  0378  1001               	bcf	1,0
 18791                           
 18792                           ;Dimmer_B1.c: 242: DimmerLightsIntr->Flag = 1;
 18793  0379  0879               	movf	_DimmerLightsIntr,w
 18794  037A  3E08               	addlw	8
 18795  037B  0086               	movwf	6
 18796  037C  3001               	movlw	1	; select bank2/3
 18797  037D  0087               	movwf	7
 18798  037E  1401               	bsf	1,0
 18799                           
 18800                           ;Dimmer_B1.c: 243: if (DimmerLightsIntr->MOSFET == 1) {
 18801  037F  0879               	movf	_DimmerLightsIntr,w
 18802  0380  3E09               	addlw	9
 18803  0381  0086               	movwf	6
 18804  0382  3001               	movlw	1	; select bank2/3
 18805  0383  0087               	movwf	7
 18806  0384  1E01               	btfss	1,4
 18807  0385  0008               	return
 18808                           
 18809                           ;Dimmer_B1.c: 244: DimmerLightsIntr->MOSFET = 0;
 18810  0386  0879               	movf	_DimmerLightsIntr,w
 18811  0387  3E09               	addlw	9
 18812  0388  0086               	movwf	6
 18813  0389  3001               	movlw	1	; select bank2/3
 18814  038A  0087               	movwf	7
 18815  038B  1201               	bcf	1,4
 18816                           
 18817                           ;Dimmer_B1.c: 246: if (lights == 1) {
 18818  038C  0876               	movf	setDimmerLights_IntrControl@lights,w
 18819  038D  3A01               	xorlw	1
 18820  038E  1D03               	skipz
 18821  038F  2B92               	goto	i1l7299
 18822                           
 18823                           ;Dimmer_B1.c: 247: RA7 = 0;
 18824  0390  0020               	movlb	0	; select bank0
 18825  0391  138C               	bcf	12,7	;volatile
 18826  0392                     i1l7299:	
 18827                           
 18828                           ;Dimmer_B1.c: 249: }
 18829                           ;Dimmer_B1.c: 252: if (lights == 2) {
 18830  0392  0876               	movf	setDimmerLights_IntrControl@lights,w
 18831  0393  3A02               	xorlw	2
 18832  0394  1D03               	skipz
 18833  0395  0008               	return
 18834                           
 18835                           ;Dimmer_B1.c: 253: RB4 = 0;
 18836  0396  0020               	movlb	0	; select bank0
 18837  0397  120D               	bcf	13,4	;volatile
 18838                           
 18839                           ;Dimmer_B1.c: 254: }
 18840                           ;Dimmer_B1.c: 256: }
 18841                           ;Dimmer_B1.c: 257: }
 18842                           ;Dimmer_B1.c: 258: } else {
 18843  0398  0008               	return
 18844  0399                     i1l7303:	
 18845                           
 18846                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->Flag == 1) {
 18847  0399  0879               	movf	_DimmerLightsIntr,w
 18848  039A  3E08               	addlw	8
 18849  039B  0086               	movwf	6
 18850  039C  3001               	movlw	1	; select bank2/3
 18851  039D  0087               	movwf	7
 18852  039E  1C01               	btfss	1,0
 18853  039F  2C5D               	goto	i1l747
 18854                           
 18855                           ;Dimmer_B1.c: 260: DimmerLightsIntr->Flag = 0;
 18856  03A0  0879               	movf	_DimmerLightsIntr,w
 18857  03A1  3E08               	addlw	8
 18858  03A2  0086               	movwf	6
 18859  03A3  3001               	movlw	1	; select bank2/3
 18860  03A4  0087               	movwf	7
 18861  03A5  1001               	bcf	1,0
 18862                           
 18863                           ;Dimmer_B1.c: 261: if (DimmerLightsIntr->Signal == 1) {
 18864  03A6  0879               	movf	_DimmerLightsIntr,w
 18865  03A7  0086               	movwf	6
 18866  03A8  3001               	movlw	1	; select bank2/3
 18867  03A9  0087               	movwf	7
 18868  03AA  1C81               	btfss	1,1
 18869  03AB  2C5D               	goto	i1l747
 18870                           
 18871                           ;Dimmer_B1.c: 262: DimmerLightsIntr->DimmingTime++;
 18872  03AC  3001               	movlw	1
 18873  03AD  00F2               	movwf	??_setDimmerLights_IntrControl
 18874  03AE  0A79               	incf	_DimmerLightsIntr,w
 18875  03AF  0086               	movwf	6
 18876  03B0  3001               	movlw	1	; select bank2/3
 18877  03B1  0087               	movwf	7
 18878  03B2  0872               	movf	??_setDimmerLights_IntrControl,w
 18879  03B3  0781               	addwf	1,f
 18880                           
 18881                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18882  03B4  0A79               	incf	_DimmerLightsIntr,w
 18883  03B5  0086               	movwf	6
 18884  03B6  3001               	movlw	1	; select bank2/3
 18885  03B7  0087               	movwf	7
 18886  03B8  0879               	movf	_DimmerLightsIntr,w
 18887  03B9  3E02               	addlw	2
 18888  03BA  0084               	movwf	4
 18889  03BB  3001               	movlw	1	; select bank2/3
 18890  03BC  0085               	movwf	5
 18891  03BD  0800               	movf	0,w
 18892  03BE  0201               	subwf	1,w
 18893  03BF  1C03               	skipc
 18894  03C0  2C5D               	goto	i1l747
 18895                           
 18896                           ;Dimmer_B1.c: 264: DimmerLightsIntr->DimmingTime = 0;
 18897  03C1  0A79               	incf	_DimmerLightsIntr,w
 18898  03C2  0086               	movwf	6
 18899  03C3  3001               	movlw	1	; select bank2/3
 18900  03C4  0087               	movwf	7
 18901  03C5  0181               	clrf	1
 18902                           
 18903                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->AdjFlag == 1) {
 18904  03C6  0879               	movf	_DimmerLightsIntr,w
 18905  03C7  0086               	movwf	6
 18906  03C8  3001               	movlw	1	; select bank2/3
 18907  03C9  0087               	movwf	7
 18908  03CA  1D81               	btfss	1,3
 18909  03CB  2C12               	goto	i1l7333
 18910                           
 18911                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->AdjStatus == 0) {
 18912  03CC  0879               	movf	_DimmerLightsIntr,w
 18913  03CD  0086               	movwf	6
 18914  03CE  3001               	movlw	1	; select bank2/3
 18915  03CF  0087               	movwf	7
 18916  03D0  1A01               	btfsc	1,4
 18917  03D1  2BF3               	goto	i1l7325
 18918                           
 18919                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18920  03D2  0879               	movf	_DimmerLightsIntr,w
 18921  03D3  3E04               	addlw	4
 18922  03D4  0086               	movwf	6
 18923  03D5  3001               	movlw	1	; select bank2/3
 18924  03D6  0087               	movwf	7
 18925  03D7  3040               	movlw	64
 18926  03D8  0201               	subwf	1,w
 18927  03D9  1803               	skipnc
 18928  03DA  2BE4               	goto	i1l7321
 18929                           
 18930                           ;Dimmer_B1.c: 268: DimmerLightsIntr->DimmingValue++;
 18931  03DB  3001               	movlw	1
 18932  03DC  00F2               	movwf	??_setDimmerLights_IntrControl
 18933  03DD  0879               	movf	_DimmerLightsIntr,w
 18934  03DE  3E04               	addlw	4
 18935  03DF  0086               	movwf	6
 18936  03E0  3001               	movlw	1	; select bank2/3
 18937  03E1  0087               	movwf	7
 18938  03E2  0872               	movf	??_setDimmerLights_IntrControl,w
 18939  03E3  0781               	addwf	1,f
 18940  03E4                     i1l7321:	
 18941                           
 18942                           ;Dimmer_B1.c: 269: }
 18943                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->DimmingValue == ((char)(80*0.8))) {
 18944  03E4  0879               	movf	_DimmerLightsIntr,w
 18945  03E5  3E04               	addlw	4
 18946  03E6  0086               	movwf	6
 18947  03E7  3001               	movlw	1	; select bank2/3
 18948  03E8  0087               	movwf	7
 18949  03E9  0801               	movf	1,w
 18950  03EA  3A40               	xorlw	64
 18951  03EB  1D03               	skipz
 18952  03EC  2C5D               	goto	i1l747
 18953                           
 18954                           ;Dimmer_B1.c: 271: DimmerLightsIntr->AdjStatus = 1;
 18955  03ED  0879               	movf	_DimmerLightsIntr,w
 18956  03EE  0086               	movwf	6
 18957  03EF  3001               	movlw	1	; select bank2/3
 18958  03F0  0087               	movwf	7
 18959  03F1  1601               	bsf	1,4
 18960                           
 18961                           ;Dimmer_B1.c: 272: }
 18962                           ;Dimmer_B1.c: 273: } else {
 18963  03F2  2C5D               	goto	i1l747
 18964  03F3                     i1l7325:	
 18965                           
 18966                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18967  03F3  0879               	movf	_DimmerLightsIntr,w
 18968  03F4  3E04               	addlw	4
 18969  03F5  0086               	movwf	6
 18970  03F6  3001               	movlw	1	; select bank2/3
 18971  03F7  0087               	movwf	7
 18972  03F8  300D               	movlw	13
 18973  03F9  0201               	subwf	1,w
 18974  03FA  1C03               	skipc
 18975  03FB  2C03               	goto	i1l7329
 18976                           
 18977                           ;Dimmer_B1.c: 275: DimmerLightsIntr->DimmingValue--;
 18978  03FC  0879               	movf	_DimmerLightsIntr,w
 18979  03FD  3E04               	addlw	4
 18980  03FE  0086               	movwf	6
 18981  03FF  3001               	movlw	1	; select bank2/3
 18982  0400  0087               	movwf	7
 18983  0401  3001               	movlw	1
 18984  0402  0281               	subwf	1,f
 18985  0403                     i1l7329:	
 18986                           
 18987                           ;Dimmer_B1.c: 276: }
 18988                           ;Dimmer_B1.c: 277: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18989  0403  0879               	movf	_DimmerLightsIntr,w
 18990  0404  3E04               	addlw	4
 18991  0405  0086               	movwf	6
 18992  0406  3001               	movlw	1	; select bank2/3
 18993  0407  0087               	movwf	7
 18994  0408  0801               	movf	1,w
 18995  0409  3A0C               	xorlw	12
 18996  040A  1D03               	skipz
 18997  040B  2C5D               	goto	i1l747
 18998                           
 18999                           ;Dimmer_B1.c: 278: DimmerLightsIntr->AdjStatus = 0;
 19000  040C  0879               	movf	_DimmerLightsIntr,w
 19001  040D  0086               	movwf	6
 19002  040E  3001               	movlw	1	; select bank2/3
 19003  040F  0087               	movwf	7
 19004  0410  1201               	bcf	1,4
 19005                           
 19006                           ;Dimmer_B1.c: 279: }
 19007                           ;Dimmer_B1.c: 280: }
 19008                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->AdjRF == 1) {
 19009  0411  2C5D               	goto	i1l747
 19010  0412                     i1l7333:	
 19011  0412  0879               	movf	_DimmerLightsIntr,w
 19012  0413  0086               	movwf	6
 19013  0414  3001               	movlw	1	; select bank2/3
 19014  0415  0087               	movwf	7
 19015  0416  1D01               	btfss	1,2
 19016  0417  2C5D               	goto	i1l747
 19017                           
 19018                           ;Dimmer_B1.c: 282: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19019  0418  0879               	movf	_DimmerLightsIntr,w
 19020  0419  3E04               	addlw	4
 19021  041A  0086               	movwf	6
 19022  041B  3001               	movlw	1	; select bank2/3
 19023  041C  0087               	movwf	7
 19024  041D  0879               	movf	_DimmerLightsIntr,w
 19025  041E  3E05               	addlw	5
 19026  041F  0084               	movwf	4
 19027  0420  3001               	movlw	1	; select bank2/3
 19028  0421  0085               	movwf	5
 19029  0422  0800               	movf	0,w
 19030  0423  0201               	subwf	1,w
 19031  0424  1803               	skipnc
 19032  0425  2C30               	goto	i1l7339
 19033                           
 19034                           ;Dimmer_B1.c: 283: DimmerLightsIntr->DimmingValue++;
 19035  0426  3001               	movlw	1
 19036  0427  00F2               	movwf	??_setDimmerLights_IntrControl
 19037  0428  0879               	movf	_DimmerLightsIntr,w
 19038  0429  3E04               	addlw	4
 19039  042A  0086               	movwf	6
 19040  042B  3001               	movlw	1	; select bank2/3
 19041  042C  0087               	movwf	7
 19042  042D  0872               	movf	??_setDimmerLights_IntrControl,w
 19043  042E  0781               	addwf	1,f
 19044                           
 19045                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19046  042F  2C45               	goto	i1l7343
 19047  0430                     i1l7339:	
 19048  0430  0879               	movf	_DimmerLightsIntr,w
 19049  0431  3E05               	addlw	5
 19050  0432  0086               	movwf	6
 19051  0433  3001               	movlw	1	; select bank2/3
 19052  0434  0087               	movwf	7
 19053  0435  0879               	movf	_DimmerLightsIntr,w
 19054  0436  3E04               	addlw	4
 19055  0437  0084               	movwf	4
 19056  0438  3001               	movlw	1	; select bank2/3
 19057  0439  0085               	movwf	5
 19058  043A  0800               	movf	0,w
 19059  043B  0201               	subwf	1,w
 19060  043C  1803               	skipnc
 19061  043D  2C45               	goto	i1l7343
 19062                           
 19063                           ;Dimmer_B1.c: 285: DimmerLightsIntr->DimmingValue--;
 19064  043E  0879               	movf	_DimmerLightsIntr,w
 19065  043F  3E04               	addlw	4
 19066  0440  0086               	movwf	6
 19067  0441  3001               	movlw	1	; select bank2/3
 19068  0442  0087               	movwf	7
 19069  0443  3001               	movlw	1
 19070  0444  0281               	subwf	1,f
 19071  0445                     i1l7343:	
 19072                           
 19073                           ;Dimmer_B1.c: 286: }
 19074                           ;Dimmer_B1.c: 287: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19075  0445  0879               	movf	_DimmerLightsIntr,w
 19076  0446  3E05               	addlw	5
 19077  0447  0086               	movwf	6
 19078  0448  3001               	movlw	1	; select bank2/3
 19079  0449  0087               	movwf	7
 19080  044A  0879               	movf	_DimmerLightsIntr,w
 19081  044B  3E04               	addlw	4
 19082  044C  0084               	movwf	4
 19083  044D  3001               	movlw	1	; select bank2/3
 19084  044E  0085               	movwf	5
 19085  044F  0800               	movf	0,w
 19086  0450  0601               	xorwf	1,w
 19087  0451  1D03               	skipz
 19088  0452  2C5D               	goto	i1l747
 19089                           
 19090                           ;Dimmer_B1.c: 288: DimmerLightsIntr->AdjRF = 0;
 19091  0453  0879               	movf	_DimmerLightsIntr,w
 19092  0454  0086               	movwf	6
 19093  0455  3001               	movlw	1	; select bank2/3
 19094  0456  0087               	movwf	7
 19095  0457  1101               	bcf	1,2
 19096                           
 19097                           ;Dimmer_B1.c: 289: DimmerLightsIntr->Signal = 0;
 19098  0458  0879               	movf	_DimmerLightsIntr,w
 19099  0459  0086               	movwf	6
 19100  045A  3001               	movlw	1	; select bank2/3
 19101  045B  0087               	movwf	7
 19102  045C  1081               	bcf	1,1
 19103  045D                     i1l747:	
 19104                           
 19105                           ;Dimmer_B1.c: 290: }
 19106                           ;Dimmer_B1.c: 291: }
 19107                           ;Dimmer_B1.c: 292: }
 19108                           ;Dimmer_B1.c: 293: }
 19109                           ;Dimmer_B1.c: 294: }
 19110                           ;Dimmer_B1.c: 296: if (DimmerLightsIntr->MosfetSignal == 1) {
 19111  045D  0879               	movf	_DimmerLightsIntr,w
 19112  045E  3E09               	addlw	9
 19113  045F  0086               	movwf	6
 19114  0460  3001               	movlw	1	; select bank2/3
 19115  0461  0087               	movwf	7
 19116  0462  1D81               	btfss	1,3
 19117  0463  0008               	return
 19118                           
 19119                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignalCount++;
 19120  0464  3001               	movlw	1
 19121  0465  00F2               	movwf	??_setDimmerLights_IntrControl
 19122  0466  0879               	movf	_DimmerLightsIntr,w
 19123  0467  3E0C               	addlw	12
 19124  0468  0086               	movwf	6
 19125  0469  3001               	movlw	1	; select bank2/3
 19126  046A  0087               	movwf	7
 19127  046B  0872               	movf	??_setDimmerLights_IntrControl,w
 19128  046C  0781               	addwf	1,f
 19129                           
 19130                           ;Dimmer_B1.c: 298: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 19131  046D  0879               	movf	_DimmerLightsIntr,w
 19132  046E  3E0C               	addlw	12
 19133  046F  0086               	movwf	6
 19134  0470  3001               	movlw	1	; select bank2/3
 19135  0471  0087               	movwf	7
 19136  0472  0801               	movf	1,w
 19137  0473  3A05               	xorlw	5
 19138  0474  1D03               	skipz
 19139  0475  0008               	return
 19140                           
 19141                           ;Dimmer_B1.c: 299: DimmerLightsIntr->MosfetSignalCount = 0;
 19142  0476  0879               	movf	_DimmerLightsIntr,w
 19143  0477  3E0C               	addlw	12
 19144  0478  0086               	movwf	6
 19145  0479  3001               	movlw	1	; select bank2/3
 19146  047A  0087               	movwf	7
 19147  047B  0181               	clrf	1
 19148                           
 19149                           ;Dimmer_B1.c: 300: DimmerLightsIntr->MosfetSignal = 0;
 19150  047C  0879               	movf	_DimmerLightsIntr,w
 19151  047D  3E09               	addlw	9
 19152  047E  0086               	movwf	6
 19153  047F  3001               	movlw	1	; select bank2/3
 19154  0480  0087               	movwf	7
 19155  0481  1181               	bcf	1,3
 19156  0482  0008               	return
 19157  0483                     __end_of_setDimmerLights_IntrControl:	
 19158                           
 19159                           	psect	text131
 19160  1C47                     __ptext131:	
 19161 ;; *************** function _DimmerIntrPointSelect *****************
 19162 ;; Defined at:
 19163 ;;		line 75 in file "../src/Dimmer_B1.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;  lights          1    wreg     unsigned char 
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;  lights          1    1[COMMON] unsigned char 
 19168 ;; Return value:  Size  Location     Type
 19169 ;;		None               void
 19170 ;; Registers used:
 19171 ;;		wreg
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19181 ;;Total ram usage:        2 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; This function calls:
 19184 ;;		Nothing
 19185 ;; This function is called by:
 19186 ;;		_setDimmerLights_IntrControl
 19187 ;; This function uses a non-reentrant model
 19188 ;;
 19189                           
 19190                           
 19191                           ;psect for function _DimmerIntrPointSelect
 19192  1C47                     _DimmerIntrPointSelect:	
 19193                           
 19194                           ;incstack = 0
 19195                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19196                           ;DimmerIntrPointSelect@lights stored from wreg
 19197  1C47  00F1               	movwf	DimmerIntrPointSelect@lights
 19198                           
 19199                           ;Dimmer_B1.c: 77: if (lights == 1) {
 19200  1C48  0871               	movf	DimmerIntrPointSelect@lights,w
 19201  1C49  3A01               	xorlw	1
 19202  1C4A  1D03               	skipz
 19203  1C4B  2C50               	goto	i1l736
 19204                           
 19205                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights1;
 19206  1C4C  30BE               	movlw	_DimmerLights1& (0+255)
 19207  1C4D  00F0               	movwf	??_DimmerIntrPointSelect
 19208  1C4E  0870               	movf	??_DimmerIntrPointSelect,w
 19209  1C4F  00F9               	movwf	_DimmerLightsIntr
 19210  1C50                     i1l736:	
 19211                           
 19212                           ;Dimmer_B1.c: 79: }
 19213                           ;Dimmer_B1.c: 82: if (lights == 2) {
 19214  1C50  0871               	movf	DimmerIntrPointSelect@lights,w
 19215  1C51  3A02               	xorlw	2
 19216  1C52  1D03               	skipz
 19217  1C53  0008               	return
 19218                           
 19219                           ;Dimmer_B1.c: 83: DimmerLightsIntr = &DimmerLights2;
 19220  1C54  30CD               	movlw	_DimmerLights2& (0+255)
 19221  1C55  00F0               	movwf	??_DimmerIntrPointSelect
 19222  1C56  0870               	movf	??_DimmerIntrPointSelect,w
 19223  1C57  00F9               	movwf	_DimmerLightsIntr
 19224  1C58  0008               	return
 19225  1C59                     __end_of_DimmerIntrPointSelect:	
 19226                           
 19227                           	psect	text132
 19228  1BA4                     __ptext132:	
 19229 ;; *************** function _IOC_ISR *****************
 19230 ;; Defined at:
 19231 ;;		line 401 in file "../src/MCU_B1.c"
 19232 ;; Parameters:    Size  Location     Type
 19233 ;;		None
 19234 ;; Auto vars:     Size  Location     Type
 19235 ;;		None
 19236 ;; Return value:  Size  Location     Type
 19237 ;;		None               void
 19238 ;; Registers used:
 19239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19240 ;; Tracked objects:
 19241 ;;		On entry : 0/0
 19242 ;;		On exit  : 0/0
 19243 ;;		Unchanged: 0/0
 19244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19249 ;;Total ram usage:        0 bytes
 19250 ;; Hardware stack levels used:    1
 19251 ;; Hardware stack levels required when called:    3
 19252 ;; This function calls:
 19253 ;;		_setDimmerReClock
 19254 ;; This function is called by:
 19255 ;;		_ISR
 19256 ;; This function uses a non-reentrant model
 19257 ;;
 19258                           
 19259                           
 19260                           ;psect for function _IOC_ISR
 19261  1BA4                     _IOC_ISR:	
 19262                           
 19263                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19264                           
 19265                           ;incstack = 0
 19266                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19267  1BA4  1D8B               	btfss	11,3	;volatile
 19268  1BA5  0008               	return
 19269  1BA6  1C0B               	btfss	11,0	;volatile
 19270  1BA7  0008               	return
 19271  1BA8  0027               	movlb	7	; select bank7
 19272  1BA9  1D16               	btfss	22,2	;volatile
 19273  1BAA  0008               	return
 19274                           
 19275                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19276  1BAB  1116               	bcf	22,2	;volatile
 19277                           
 19278                           ;MCU_B1.c: 404: IOCIF = 0;
 19279  1BAC  100B               	bcf	11,0	;volatile
 19280                           
 19281                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19282  1BAD  0021               	movlb	1	; select bank1
 19283  1BAE  1C20               	btfss	_myMain^(0+128),0
 19284  1BAF  0008               	return
 19285                           
 19286                           ;MCU_B1.c: 408: setDimmerReClock();
 19287  1BB0  319A  22DD         	fcall	_setDimmerReClock
 19288  1BB2  0008               	return
 19289  1BB3                     __end_of_IOC_ISR:	
 19290                           
 19291                           	psect	text133
 19292  1ADD                     __ptext133:	
 19293 ;; *************** function _setDimmerReClock *****************
 19294 ;; Defined at:
 19295 ;;		line 244 in file "../src/MCU_B1.c"
 19296 ;; Parameters:    Size  Location     Type
 19297 ;;		None
 19298 ;; Auto vars:     Size  Location     Type
 19299 ;;		None
 19300 ;; Return value:  Size  Location     Type
 19301 ;;		None               void
 19302 ;; Registers used:
 19303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19304 ;; Tracked objects:
 19305 ;;		On entry : 0/0
 19306 ;;		On exit  : 0/0
 19307 ;;		Unchanged: 0/0
 19308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19313 ;;Total ram usage:        0 bytes
 19314 ;; Hardware stack levels used:    1
 19315 ;; Hardware stack levels required when called:    2
 19316 ;; This function calls:
 19317 ;;		_setDimmerLights_IntrIOC_GO
 19318 ;; This function is called by:
 19319 ;;		_IOC_ISR
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           
 19324                           ;psect for function _setDimmerReClock
 19325  1ADD                     _setDimmerReClock:	
 19326                           
 19327                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19328                           
 19329                           ;incstack = 0
 19330                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19331  1ADD  3001               	movlw	1
 19332  1ADE  3193  23D3  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19333                           
 19334                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19335  1AE1  3002               	movlw	2
 19336  1AE2  3193  23D3         	fcall	_setDimmerLights_IntrIOC_GO
 19337  1AE4  0008               	return
 19338  1AE5                     __end_of_setDimmerReClock:	
 19339                           
 19340                           	psect	text134
 19341  13D3                     __ptext134:	
 19342 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19343 ;; Defined at:
 19344 ;;		line 28 in file "../src/Dimmer_B1.c"
 19345 ;; Parameters:    Size  Location     Type
 19346 ;;  lights          1    wreg     unsigned char 
 19347 ;; Auto vars:     Size  Location     Type
 19348 ;;  lights          1    2[COMMON] unsigned char 
 19349 ;; Return value:  Size  Location     Type
 19350 ;;		None               void
 19351 ;; Registers used:
 19352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19353 ;; Tracked objects:
 19354 ;;		On entry : 0/0
 19355 ;;		On exit  : 0/0
 19356 ;;		Unchanged: 0/0
 19357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19362 ;;Total ram usage:        1 bytes
 19363 ;; Hardware stack levels used:    1
 19364 ;; Hardware stack levels required when called:    1
 19365 ;; This function calls:
 19366 ;;		_DimmerIntrIOCPointSelect
 19367 ;; This function is called by:
 19368 ;;		_setDimmerReClock
 19369 ;; This function uses a non-reentrant model
 19370 ;;
 19371                           
 19372                           
 19373                           ;psect for function _setDimmerLights_IntrIOC_GO
 19374  13D3                     _setDimmerLights_IntrIOC_GO:	
 19375                           
 19376                           ;incstack = 0
 19377                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19378                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19379  13D3  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19380                           
 19381                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19382  13D4  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19383  13D5  319C  2435  3193   	fcall	_DimmerIntrIOCPointSelect
 19384                           
 19385                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19386  13D8  087A               	movf	_DimmerLightsIntrIOC,w
 19387  13D9  0086               	movwf	6
 19388  13DA  3001               	movlw	1	; select bank2/3
 19389  13DB  0087               	movwf	7
 19390  13DC  1801               	btfsc	1,0
 19391  13DD  2C0D               	goto	i1l6879
 19392  13DE  087A               	movf	_DimmerLightsIntrIOC,w
 19393  13DF  3E09               	addlw	9
 19394  13E0  0086               	movwf	6
 19395  13E1  3001               	movlw	1	; select bank2/3
 19396  13E2  0087               	movwf	7
 19397  13E3  1981               	btfsc	1,3
 19398  13E4  2C0D               	goto	i1l6879
 19399  13E5  0020               	movlb	0	; select bank0
 19400  13E6  190D               	btfsc	13,2	;volatile
 19401  13E7  2C0D               	goto	i1l6879
 19402                           
 19403                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19404  13E8  087A               	movf	_DimmerLightsIntrIOC,w
 19405  13E9  0086               	movwf	6
 19406  13EA  3001               	movlw	1	; select bank2/3
 19407  13EB  0087               	movwf	7
 19408  13EC  1401               	bsf	1,0
 19409                           
 19410                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19411  13ED  087A               	movf	_DimmerLightsIntrIOC,w
 19412  13EE  3E09               	addlw	9
 19413  13EF  0086               	movwf	6
 19414  13F0  3001               	movlw	1	; select bank2/3
 19415  13F1  0087               	movwf	7
 19416  13F2  1581               	bsf	1,3
 19417                           
 19418                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19419  13F3  0022               	movlb	2	; select bank2
 19420  13F4  01A2               	clrf	(_Dimmer^(0+256)+2)
 19421                           
 19422                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19423  13F5  087A               	movf	_DimmerLightsIntrIOC,w
 19424  13F6  0086               	movwf	6
 19425  13F7  3001               	movlw	1	; select bank2/3
 19426  13F8  0087               	movwf	7
 19427  13F9  1F01               	btfss	1,6
 19428  13FA  2C0D               	goto	i1l6879
 19429                           
 19430                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19431  13FB  087A               	movf	_DimmerLightsIntrIOC,w
 19432  13FC  3E09               	addlw	9
 19433  13FD  0086               	movwf	6
 19434  13FE  3001               	movlw	1	; select bank2/3
 19435  13FF  0087               	movwf	7
 19436  1400  1601               	bsf	1,4
 19437                           
 19438                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19439  1401  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19440  1402  3A01               	xorlw	1
 19441  1403  1D03               	skipz
 19442  1404  2C07               	goto	i1l6875
 19443                           
 19444                           ;Dimmer_B1.c: 54: RA7 = 1;
 19445  1405  0020               	movlb	0	; select bank0
 19446  1406  178C               	bsf	12,7	;volatile
 19447  1407                     i1l6875:	
 19448                           
 19449                           ;Dimmer_B1.c: 56: }
 19450                           ;Dimmer_B1.c: 59: if (lights == 2) {
 19451  1407  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19452  1408  3A02               	xorlw	2
 19453  1409  1D03               	skipz
 19454  140A  2C0D               	goto	i1l6879
 19455                           
 19456                           ;Dimmer_B1.c: 60: RB4 = 1;
 19457  140B  0020               	movlb	0	; select bank0
 19458  140C  160D               	bsf	13,4	;volatile
 19459  140D                     i1l6879:	
 19460                           
 19461                           ;Dimmer_B1.c: 61: }
 19462                           ;Dimmer_B1.c: 63: }
 19463                           ;Dimmer_B1.c: 67: }
 19464                           ;Dimmer_B1.c: 69: if (DimmerLightsIntrIOC->Status == 1) {
 19465  140D  087A               	movf	_DimmerLightsIntrIOC,w
 19466  140E  0086               	movwf	6
 19467  140F  3001               	movlw	1	; select bank2/3
 19468  1410  0087               	movwf	7
 19469  1411  1E81               	btfss	1,5
 19470  1412  0008               	return
 19471                           
 19472                           ;Dimmer_B1.c: 70: DimmerLightsIntrIOC->StatusFlag = 1;
 19473  1413  087A               	movf	_DimmerLightsIntrIOC,w
 19474  1414  0086               	movwf	6
 19475  1415  3001               	movlw	1	; select bank2/3
 19476  1416  0087               	movwf	7
 19477  1417  1701               	bsf	1,6
 19478  1418  0008               	return
 19479  1419                     __end_of_setDimmerLights_IntrIOC_GO:	
 19480                           
 19481                           	psect	text135
 19482  1C35                     __ptext135:	
 19483 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19484 ;; Defined at:
 19485 ;;		line 8 in file "../src/Dimmer_B1.c"
 19486 ;; Parameters:    Size  Location     Type
 19487 ;;  lights          1    wreg     unsigned char 
 19488 ;; Auto vars:     Size  Location     Type
 19489 ;;  lights          1    1[COMMON] unsigned char 
 19490 ;; Return value:  Size  Location     Type
 19491 ;;		None               void
 19492 ;; Registers used:
 19493 ;;		wreg
 19494 ;; Tracked objects:
 19495 ;;		On entry : 0/0
 19496 ;;		On exit  : 0/0
 19497 ;;		Unchanged: 0/0
 19498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19501 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19503 ;;Total ram usage:        2 bytes
 19504 ;; Hardware stack levels used:    1
 19505 ;; This function calls:
 19506 ;;		Nothing
 19507 ;; This function is called by:
 19508 ;;		_setDimmerLights_IntrIOC_GO
 19509 ;; This function uses a non-reentrant model
 19510 ;;
 19511                           
 19512                           
 19513                           ;psect for function _DimmerIntrIOCPointSelect
 19514  1C35                     _DimmerIntrIOCPointSelect:	
 19515                           
 19516                           ;incstack = 0
 19517                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19518                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19519  1C35  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19520                           
 19521                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19522  1C36  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19523  1C37  3A01               	xorlw	1
 19524  1C38  1D03               	skipz
 19525  1C39  2C3E               	goto	i1l723
 19526                           
 19527                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19528  1C3A  30BE               	movlw	_DimmerLights1& (0+255)
 19529  1C3B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19530  1C3C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19531  1C3D  00FA               	movwf	_DimmerLightsIntrIOC
 19532  1C3E                     i1l723:	
 19533                           
 19534                           ;Dimmer_B1.c: 12: }
 19535                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19536  1C3E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19537  1C3F  3A02               	xorlw	2
 19538  1C40  1D03               	skipz
 19539  1C41  0008               	return
 19540                           
 19541                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19542  1C42  30CD               	movlw	_DimmerLights2& (0+255)
 19543  1C43  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19544  1C44  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19545  1C45  00FA               	movwf	_DimmerLightsIntrIOC
 19546  1C46  0008               	return
 19547  1C47                     __end_of_DimmerIntrIOCPointSelect:	
 19548  007E                     btemp	set	126	;btemp
 19549  007E                     pic14e$flags	set	126
 19550  007E                     wtemp	set	126
 19551  007E                     wtemp0	set	126
 19552  0080                     wtemp1	set	128
 19553  0082                     wtemp2	set	130
 19554  0084                     wtemp3	set	132
 19555  0086                     wtemp4	set	134
 19556  0088                     wtemp5	set	136
 19557  007F                     wtemp6	set	127
 19558  007E                     ttemp	set	126
 19559  007E                     ttemp0	set	126
 19560  0081                     ttemp1	set	129
 19561  0084                     ttemp2	set	132
 19562  0087                     ttemp3	set	135
 19563  007F                     ttemp4	set	127
 19564  007E                     ltemp	set	126
 19565  007E                     ltemp0	set	126
 19566  0082                     ltemp1	set	130
 19567  0086                     ltemp2	set	134
 19568  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         267
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      73
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   97740
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11672
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    6308
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5136
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29470
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29470
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28687
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26847
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7483
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2038
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15503
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15280
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15214
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1327
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     518
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1369
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28549
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   28136
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12665
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13705
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     205
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3949
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3949
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 05 15:43:18 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 166D                                       l98 1681  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F1F  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CC8  
                 __end_of_setDelayOff_GO 08B4                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1695  
                   _setDimmerLights_Line 1D41                             ___ftadd@sign 004B  
                                    l110 149F                                      l106 14A5  
                                    l107 14A1                                      l108 148F  
                   _setDimmerLights_SwOn 12D4                                      l255 09AE  
                                    l328 1D8E                                      l329 1D90  
                                    l372 1F90                                      l768 1C99  
                                    l779 11BB                                      l867 1CD1  
                                    l868 1CD8                                      _GIE 005F  
                                    _CRC 00CC                                      l999 1DF2  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 007B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BB  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01DC  
                                    _Sw2 01E5                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D9B                    _Buzzer_Initialization 1A9E  
                        __end_of_ADC_Set 1ADD                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CE5  
                 _setMain_Exception$7105 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1F1F                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1BB3                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1000 1DFA                                     l1034 1348  
                                   l1302 122A                                     l2014 1BB8  
                                   l2022 0DA5                                     l2032 0DFB  
                                   l1316 1125                                     l2052 0B6D  
                                   l1325 153D                                     l3014 0522  
                                   l2038 1262                                     l2064 137A  
               ?_DimmerLightsPointSelect 0070                                     l1461 01C2  
                                   l1464 0082                                     l1465 0192  
                                   l1466 0190                                     l2370 1D5D  
                                   l1618 0E9F                          __end_of_IOC_Set 1B7D  
                                   l2386 1F52                                     l2724 1174  
                                   l2396 032E                                     l2725 118F  
                                   l6021 0F63                                     l2398 0207  
                                   l6007 0F2A                                     l6121 1CE6  
                                   l2729 118B                                     l6113 0CDC  
                                   l6105 0CC2                                     l2681 14F5  
                                   l6107 0CCB                                     l6051 0FD0  
                                   l6043 0FBC                                     l6027 0F79  
                                   l1971 071F                                     l1980 06B3  
                                   l6109 0CCE                                     l1973 067E  
                                   l1982 06EC                                     l1974 0680  
                                   l6055 0FD8                                     l6039 0FB4  
                                   l7103 0D91                                     l1975 0688  
                                   l7201 13BD                                     l6137 10CE  
                                   l7211 13CD                                     l6163 080E  
                                   l6243 088F                                     l7035 110D  
                                   l7115 0DA8                           _Load_Main$3869 002D  
                                   l7205 13C4                                     l6181 082D  
                                   l6245 089C                                     l7207 13C7  
                                   l6191 0848                                     l6247 08A5  
                                   l6239 0889                                     l6335 144D  
                                   l2991 095B                                     l6079 0C77  
                                   l6407 1139                                     l6319 130A  
                                   l6511 1578                                     l7143 0DF1  
                                   l7127 0DC0                                     l6169 0819  
                                   l2985 0944                                     l6097 0CA7  
                                   l6353 1794                                     l7137 0DE6  
                                   l7153 1CFA                                     l6195 0850  
                                   l6187 083F                                     l6179 0821  
                                   l6099 0CB5                                     l6515 1587  
                  _setDimmerLights_SwOff 1419                                     l6621 15B4  
                                   l6269 1C0C                                     l8117 0071  
                                   l6543 1DC6                                     l6607 15A3  
                                   l6615 15AB                                     l6455 1E2F  
                                   l7079 1C2F                                     l6703 0B42  
                                   l7167 1E68                                     l8311 14CD  
                                   l6537 1DBD                                     l6641 15D6  
                                   l5913 04B2                                     l8145 00C7  
                                   l6457 1E35                                     l6553 1F70  
                                   l6529 1368                                     l6705 0B46  
                                   l6713 0B52                                     l7177 1E74  
                                   l7169 1E6A                                     l8073 0C23  
                                   l8065 0BFE                                     l6539 1DC0  
                                   l7195 13B4                                     l6475 1725  
                                   l5851 0921                                     l5931 04DB  
                                   l8139 009D                                     l6555 1F73  
                                   l6811 0BA9                                     l6723 097A  
                                   l6707 0B4A                                     l7179 1E78  
                                   l7197 13B7                                     l6477 16FA  
                                   l6901 10D9                                     l6637 15D2  
                                   l6645 15DA                                     l6629 15BC  
                                   l5861 0949                                     l5853 092B  
                                   l5941 04FD                                     l5909 04AB  
                                   l7381 16C0                                     l8237 01B0  
                                   l6813 0BC2                                     l6725 097D  
                                   l6709 0B4E                                     l8093 0C58  
                                   l8077 0C2B                                     l8317 14DF  
                                   l6479 172B                                     l6903 10FA  
                                   l6655 1D4E                                     l5863 0951  
                                   l5855 0930                                     l5847 091A  
                                   l5951 051E                                     l5943 0501  
                                   l5919 04C1                                     l7391 16E8  
                                   l8175 0155                                     l6559 1F79  
                                   l6743 0995                                     l7711 1D68  
                                   l7551 0E12                                     l6833 1FA1  
                                   l6841 1F05                                     l6585 116F  
                                   l5937 04EE                                     l8169 0148  
                                   l8177 015B                                     l6761 09CA  
                                   l6753 09BD                                     l6729 0983  
                                   l7633 069F                                     l7721 17B0  
                                   l7473 1EA5                                     l6835 1FAC  
                                   l6843 1F08                                     l5875 1C5C  
                                   l6595 1186                                     l6587 1178  
                                   l5955 0534                                     l5939 04F8  
                                   l7379 16BA                                     l7491 14FE  
                                   l8187 0170                                     l6755 09C1  
                                   l6747 09B4                                     l7707 1D62  
                                   l7475 1EA8                                     l8259 12C5  
                                   l8443 1608                                     l5949 0514  
                                   l6925 0D33                                     l6773 0B72  
                                   l6781 0B7E                                     l6757 09C4  
                                   l6749 09B7                                     l7581 0E6B  
                                   l6847 1F0E                                     l5879 1C62  
                                   l5959 0546                                     l6791 0B91  
                                   l6775 0B75                                     l6687 0B07  
                                   l7735 17D1                                     l8287 1F5B  
                                   l7583 0E6D                                     l7479 1EAD  
                                   l8447 1613                                     l5897 1EE5  
                                   l5969 0561                                     l5985 0ED0  
                                   l6937 0D5A                                     l6945 0AB6  
                                   l7497 1513                                     l7745 17F1  
                                   l7729 17C3                                     l7809 02D7  
                                   l7593 0E82                                     l5979 0EBA  
                                   l7923 11B2                                     l7851 127B  
                                   l6795 0B97                                     l6779 0B7B  
                                   l6699 0B2C                                     l7667 06D1  
                                   l7739 17E1                                     l7747 17FA  
                                   l7835 032A                                     l7595 0E83  
                                   l7925 11B5                                     l7861 1296  
                                   l6789 0B8E                                     l7669 06D3  
                                   l7685 06FD                    _myMain_Initialization 1BC2  
                                   l5999 0F11                                     l7927 11BD  
                                   l7775 0235                                     l7759 01F2  
                                   l7857 128D                                     l7849 126F  
                                   l6969 11DA                                     l7785 0267  
                                   l7875 1479                                     l6899 10F5  
                                   l7799 02A5                                     l7985 05EB  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u5005 10BA                                     u5105 0840  
                                   u4315 0926                                     u4335 093F  
                                   u5065 0824                                     u6115 10E2  
                                   u4355 094C                                     _PEIE 005E  
                                   u5085 082E                                     u4525 04DC  
                                   u5095 0838                                     u4615 0515  
                                   u5345 1D26                                     u4385 0962  
                                   u4705 0F12                                     u5290 1752  
                                   u5435 1703                                     u4555 04EF  
                                   u4715 0F21                                     u7115 0E53  
                                   u4725 0F2B                                     u4805 0FC3  
                                   u5295 1750                                     u7135 0E73  
                                   u8015 0C11                                     u4585 0502  
                                   u4915 0CA8                                     u4835 0FD9  
                                   u7235 0699                                     u4685 0EE2  
                                   u8205 0108                                     u4845 0FDF  
                                   u4765 0F85                                     u4695 0EF2  
                                   u4775 0F95                                     u4945 0CC3  
                                   u8065 0C45                                     u4795 0FBD  
                                   u7355 070E                                     u4885 0C7E  
                                   u8265 0161                                     u8435 14BD  
                                   u7725 146F                                     u8445 14DB  
                                   u7655 1272                                     u8375 12BC  
                                   u8455 14ED                                     u5985 1F96  
                                   u8385 12CB                                     u7675 127C  
                                   u7685 1286                                     u7695 128E  
                                   u7955 1221                                     _LWLO 0CAD  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00AF                                     _Load 0125  
                                   _Temp 00D7                                     _main 15E4  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0911  
                        __end_of_RF_Main 1AA7                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1B2A                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1ADD  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 138F                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1BD1  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1B71         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1C59                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EC                          __end_of___awdiv 0857  
                        __end_of___ftadd 0579                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1B16                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 129D                                    i1l723 1C3E  
                                  i1l736 1C50                                    i1l747 045D  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1D2C  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1419  
             _setDimmerLights_IntrIOC_GO 13D3                         __end_of_TMR1_ISR 2000  
           __size_of_CC2500_WriteCommand 001A       __end_of_setDimmerLights_ErrorClose 1748  
             _setDimmerLights_ErrorClose 16EE                         __end_of_TMR1_Set 1B89  
                                  _getAD 1E9A                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1C8F              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 107C  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 10FD  
          __end_of_setLED_Initialization 1C02                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1748  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A3B                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 163C  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1ABA  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D6E  
                   _setSw_Initialization 1B05                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B06                           _setMemory_Data 1B41  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0012  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1CA2  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08B4                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1EFC  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0972  
               _getMain_All_Error_Status 115E                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 07E2                                   i1l7303 0399  
                                 i1l7321 03E4                                   i1l7325 03F3  
                                 i1l7333 0412                                   i1l7343 0445  
                                 i1l7329 0403                                   i1l7339 0430  
                                 i1l7299 0392                                   i1l6875 1407  
                                 i1l6879 140D                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                     __size_of_Load_Main 017D                                   u667_25 036C  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1D9B                                   u788_25 1FFA  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1A9C           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1D41                                   _Dimmer 0120  
                                 _DlySw1 0153                                   _DlySw2 0158  
             __end_of_Mcu_Initialization 1C7D                      __end_of_Buzzer_Main 14AC  
                                 _Memory 0220                                   _Timer1 00C7  
     __end_of_setDimmerLights_TriggerAdj 1E9A               _setDimmerLights_TriggerAdj 1E7A  
                                 ___bmul 1C59                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D5  
                                 _s_data 00D6                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 1594                                   _myMain 00A0  
                 __end_of_setMemory_Data 1B4D                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 163C  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1AC4  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 0483              _setDimmerLights_IntrControl 0337  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1CC8              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1D03             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 001B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1D56               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0AA0         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0047                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5286 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1EBA                            __end_of_getAD 1EBA  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1B59  
                        _getSw_KeyStatus 1E5B                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1066  
                              ?_WDT_Main 0070                        __end_of_Load_Main 01C8  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 10D0  
             __end_of_set_TimeoutCleared 1ABF                 __end_of_setDimmerReClock 1AE5  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                           _DimmerLights22 00CE  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1AA7  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1462  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 0803  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1AE5  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 15E4  
                         _getDelayOff_GO 1BE1                      _CC2500_WriteCommand 1DB4  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BDD  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1AF5  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1AD6                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 129D                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1B35  
                     _setRFSW_AdjControl 134F                                  _IOC_ISR 1BA4  
                                _IOC_Set 1B71                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 11FA  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1DCE  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006F  
                 __size_of_CC2500_TxData 0064              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1AA4                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1B1F  
        __end_of_setControl_Lights_Table 0B6E                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 09D6                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1B41  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1C24  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1BF1                                  _VarLED1 0161  
                                _VarLED2 0165           __end_of_getDimmerLights_Status 1BE1  
                      __end_of_getRxData 0DFE                  __end_of_getSw_KeyStatus 1E7A  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C47  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 0800  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 0803  
                                ___ftadd 0483                                  ___ftdiv 0EA3  
                                ___ftneg 1B0D                                  ___ftmul 0F4C  
                                ___fttol 0C5E                      __end_of_Switch_Main 1F66  
                                ___lwdiv 1266                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1C24                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0050  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 14AC                                  __ptext2 1BC2  
                                __ptext3 129D                                  __ptext4 0BDD  
                                __ptext5 1E9A                                  __ptext6 1C7D  
                                __ptext7 0002                                  __ptext8 0800  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C47  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 1230                __end_of_Flash_Memory_Read 1DE8  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 0655  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1AED  
                      _DimmerLights_Main 1191           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1ACA               __end_of_CC2500_ClearRXFIFO 1AAE  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1AB2  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1DE8                      _DelayOffPointSelect 1CDB  
                         _getMain_LoadOK 1B96                                  clrloop0 1AD1  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1B96  
                   end_of_initialization 0047                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 107C                            _DelayTime_1us 1F8B  
                      __end_of_setTxData 07E2               __end_of_Flash_Memory_Write 112C  
                                init_ram 1ACA                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1ACB                               _setSw_Main 01C8  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 1F66                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BF1                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0B6E  
                          _CC2500_TxData 0972                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 14F7  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1B16                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 11C5                       _Mcu_Initialization 1C6B  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 14F7  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1E03                  __end_of_setPercentValue 0A3B  
                 __end_of_getMain_LoadOK 1BA4                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 10A6                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0AA0  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1F8B  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1DB4                     _setRF_Initialization 1B2A  
                     _setMemory_LoopSave 1CB5                              _Switch_Main 1F42  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C8F                  __end_of_getRF_KeyStatus 1C35  
                      _setMain_Exception 17A4                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1D2C  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C6B                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1C35  
        _setDimmerLights_AdjControl$2590 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0028            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 15E4  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 1695                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1B35               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 1545                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 112C                          ?_LedPointSelect 0070  
                              _Load_Main 004B                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1AFD  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1E5B          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1ABA                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015D  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 1800                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 0800                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D0  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D3                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1C02                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1191                         _CC2500_SIDLEMode 1AB2  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 115E  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2569 0022                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1CA2                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E9  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1E1F  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00CE  
                         Load_Main@adjgo 002C                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 1A9D                                _getBuz_GO 1C13  
    __end_of_Flash_Memory_Initialization 0655              _Flash_Memory_Initialization 0579  
                               ?___awdiv 0020                                __ptext100 07E2  
                              __ptext101 0857                                __ptext110 1AC4  
                              __ptext102 10A6                                __ptext111 1CDB  
                              __ptext103 1C59                                __ptext120 1AAE  
                              __ptext112 1D2C                                __ptext104 1BE1  
                              __ptext121 1AAA                                __ptext113 1AB2  
                              __ptext105 1BD1                                __ptext130 0337  
                              __ptext122 1DB4                                __ptext114 138F  
                              __ptext106 1C8F                                __ptext131 1C47  
                              __ptext123 1ABA                                __ptext115 107C  
                              __ptext107 163C                                __ptext132 1BA4  
                              __ptext124 1D17                                __ptext116 1E3C  
                              __ptext108 0803                                __ptext133 1ADD  
                              __ptext125 1D82                                __ptext117 1EFC  
                              __ptext109 1AE5                                 ?___ftadd 0041  
                              __ptext134 13D3                                __ptext126 1462  
                              __ptext118 1B35                                __ptext135 1C35  
                              __ptext127 1A9E                                __ptext119 1F8B  
                              __ptext129 1FD8                                _getRxData 0D6E  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 1594            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1AA1                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0021                       __end_of_TouchPower 1D6B  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 1F42  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2507 0069  
                              _r_address 00D4           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 1462  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1BD1  
                         __size_of_getAD 0020                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CEF  
                    __end_of_setLED_Main 134F                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 007A                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1AAA             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1B65  
                        SwPointSelect@sw 0021                                clear_ram0 1AD0  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 14AC                                _setTxData 0723  
    __end_of_DimmerLights_Initialization 1D82              _DimmerLights_Initialization 1D6B  
                     _CC2500_ClearRXFIFO 1AAA                       _CC2500_ClearTXFIFO 1AAE  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1D17  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 10FD  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1FD8                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1B7D                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0123                     __end_of_RF_RxDisable 1BC2  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1DCE  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C7D  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E9  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1B59  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1266  
                  _DlyOff_Initialization 1AC4                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1AB6  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C5E  
                     __end_of_getLoad_OK 1AFD                    _Switch_Initialization 1B89  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 12D4  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1D82  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D2                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$7115 0021  
          _getMain_All_Error_Status$7116 0023                 __end_of_getDimmer_LoadOK 1B05  
                    _Load_Initialization 1ABF                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1EDA                         ??_LedPointSelect 0020  
                               ___ftpack 0911            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002D  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1311  
             __end_of_setRF_DimmerLights 17A4                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 1AA7  
                               __ptext11 1A9D                                 __ptext20 1B89  
                               __ptext12 1F42                                 __ptext21 1B05  
                               __ptext13 01C8                                 __ptext30 12D4  
                               __ptext22 1D56                                 __ptext14 1D03  
                               __ptext31 134F                                 __ptext23 1AA4  
                               __ptext15 11C5                                 __ptext40 0972  
                               __ptext32 112C                                 __ptext24 0655  
                               __ptext16 1E5B                                 __ptext41 0B6E  
                               __ptext33 1F1F                                 __ptext25 0D6E  
                               __ptext17 1CEF                                 __ptext50 1B71  
                               __ptext42 1F66                                 __ptext34 0A3B  
                               __ptext26 1230                                 __ptext18 17A4  
                               __ptext51 1AB6                                 __ptext43 1E1F  
                               __ptext35 0F4C                                 __ptext27 1CB5  
                               __ptext19 1CC8                                 __ptext60 1E03  
                               __ptext52 1AD6                                 __ptext44 1AA1  
                               __ptext36 1CA2                                 __ptext28 0B06  
                               __ptext61 1B65                                 __ptext53 004B  
                               __ptext45 1B2A                                 __ptext37 1C24  
                               __ptext29 1545                                 __ptext70 10FD  
                               __ptext62 1311                                 __ptext54 1B96  
                               __ptext46 1C6B                                 __ptext38 1C13  
                               __ptext71 1B16                                 __ptext63 1B59  
                               __ptext55 1AFD                                 __ptext47 1B1F  
                               __ptext39 1BB3                                 __ptext80 0C5E  
                               __ptext72 1DCE                                 __ptext64 1BF1  
                               __ptext56 1066                                 __ptext48 1B7D  
                               __ptext81 1B0D                                 __ptext73 1191  
                               __ptext65 11FA                                 __ptext57 1C02  
                               __ptext49 1D9B                                 __ptext90 10D0  
                               __ptext82 0EA3                                 __ptext74 1695  
                               __ptext66 14F7                                 __ptext58 1266  
                               __ptext91 1AF5                                 __ptext83 0483  
                               __ptext75 0AA0                                 __ptext67 1B4D  
                               __ptext59 1ABF                                 __ptext92 1D6B  
                               __ptext84 1EDA                                 __ptext76 0CE5  
                               __ptext68 0579                                 __ptext93 1FB1  
                               __ptext85 0911                                 __ptext77 0723  
                               __ptext69 1B41                                 __ptext94 1A9C  
                               __ptext86 1594                                 __ptext78 1748  
                               __ptext95 1AED                                 __ptext87 1DE8  
                               __ptext79 09D6                                 __ptext96 08B4  
                               __ptext88 1D41                                 __ptext97 16EE  
                               __ptext89 115E                                 __ptext98 1419  
                               __ptext99 1E7A                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1CDB            __end_of_Dimmer_Initialization 1A9D  
           __end_of_setDimmerLights_Main 16EE             __end_of_setDimmerLights_Line 1D56  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 1311  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D03                 __end_of_CC2500_SIDLEMode 1AB6  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1CEF  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EA  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E1F                       _CC2500_InitPATable 1E3C  
               __end_of_setMemory_Modify 1CB5            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0723                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6366 0021  
                   _getSw_KeyStatus$6367 0022                          _CC2500_PowerRST 138F  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 1545  
                      ??_getPercentValue 005C                              _setLog_Code 1230  
            __end_of_Flash_Memory_Unlock 1B1F                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EFC                       __end_of_setSw_Main 0337  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 10A6  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C13  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1FD8  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1FB1  
            __end_of_setDimmerLights_Adj 0B06                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1AA1  
   __size_of_setDimmerLights_IntrControl 014C                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1B4D                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D1          __end_of_DelayOff_Initialization 1AED  
    __size_of_setDimmerLights_IntrIOC_GO 0046      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1AF5  
     __end_of_setDimmerLights_AdjControl 11FA               _setDimmerLights_AdjControl 11C5  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0857         __size_of_setControl_Lights_Table 0068  
                 __end_of_DelayTimejudge 10D0     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1FB1  
                __end_of_CC2500_ReadByte 1E3C             __end_of_setSw_Initialization 1B0D  
                        _Timeout_Counter 1D17          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005E                             _RF_RxDisable 1BB3  
             __end_of_LED_Initialization 1B65         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1A9E                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1AA4                    __end_of_CC2500_RxData 0BDD  
                  __end_of_CC2500_TxData 09D6                    _setLoad_AH_AL_Restore 1E03  
                __end_of_CC2500_PowerRST 13D3           getAll_DimmerLights_AdjGO@adjgo 0021  
