

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 29 15:18:31 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	dabs	1,0x7E,2
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0298                     	;# 
   232  0298                     	;# 
   233  0299                     	;# 
   234  029A                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  0FE4                     	;# 
   239  0FE5                     	;# 
   240  0FE6                     	;# 
   241  0FE7                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  008C                     	;# 
   277  008D                     	;# 
   278  008E                     	;# 
   279  0090                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  011D                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0194                     	;# 
   307  0195                     	;# 
   308  0196                     	;# 
   309  0197                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020D                     	;# 
   322  0210                     	;# 
   323  0211                     	;# 
   324  0211                     	;# 
   325  0212                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0213                     	;# 
   329  0214                     	;# 
   330  0214                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0216                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0217                     	;# 
   338  0291                     	;# 
   339  0291                     	;# 
   340  0292                     	;# 
   341  0293                     	;# 
   342  0298                     	;# 
   343  0298                     	;# 
   344  0299                     	;# 
   345  029A                     	;# 
   346  0394                     	;# 
   347  0395                     	;# 
   348  0396                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0090                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  0116                     	;# 
   407  0117                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018E                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0194                     	;# 
   418  0195                     	;# 
   419  0196                     	;# 
   420  0197                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020D                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0291                     	;# 
   450  0291                     	;# 
   451  0292                     	;# 
   452  0293                     	;# 
   453  0298                     	;# 
   454  0298                     	;# 
   455  0299                     	;# 
   456  029A                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE9                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEF                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  0010                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0090                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  0199                     	;# 
   533  019A                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019C                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020D                     	;# 
   544  0210                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0298                     	;# 
   565  0298                     	;# 
   566  0299                     	;# 
   567  029A                     	;# 
   568  0394                     	;# 
   569  0395                     	;# 
   570  0396                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001C                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0097                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009B                     	;# 
   622  009C                     	;# 
   623  009D                     	;# 
   624  009E                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0197                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020D                     	;# 
   655  0210                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0291                     	;# 
   672  0291                     	;# 
   673  0292                     	;# 
   674  0293                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  0394                     	;# 
   680  0395                     	;# 
   681  0396                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0016                     	;# 
   714  0017                     	;# 
   715  0018                     	;# 
   716  0019                     	;# 
   717  001A                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  008C                     	;# 
   721  008D                     	;# 
   722  008E                     	;# 
   723  0090                     	;# 
   724  0091                     	;# 
   725  0092                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0099                     	;# 
   730  009A                     	;# 
   731  009B                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010D                     	;# 
   738  010E                     	;# 
   739  0116                     	;# 
   740  0117                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018D                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0194                     	;# 
   751  0195                     	;# 
   752  0196                     	;# 
   753  0197                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020D                     	;# 
   766  0210                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  029A                     	;# 
   790  0394                     	;# 
   791  0395                     	;# 
   792  0396                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  0010                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  010C                     	;# 
   848  010D                     	;# 
   849  010E                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  011D                     	;# 
   853  018C                     	;# 
   854  018D                     	;# 
   855  018E                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0197                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  0394                     	;# 
   902  0395                     	;# 
   903  0396                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915  0000                     	;# 
   916  0001                     	;# 
   917  0002                     	;# 
   918  0003                     	;# 
   919  0004                     	;# 
   920  0005                     	;# 
   921  0006                     	;# 
   922  0007                     	;# 
   923  0008                     	;# 
   924  0009                     	;# 
   925  000A                     	;# 
   926  000B                     	;# 
   927  000C                     	;# 
   928  000D                     	;# 
   929  000E                     	;# 
   930  0010                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  0090                     	;# 
   946  0091                     	;# 
   947  0092                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  010C                     	;# 
   959  010D                     	;# 
   960  010E                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020D                     	;# 
   988  0210                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0298                     	;# 
  1009  0298                     	;# 
  1010  0299                     	;# 
  1011  029A                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000D                     	;# 
  1040  000E                     	;# 
  1041  0010                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  008C                     	;# 
  1054  008D                     	;# 
  1055  008E                     	;# 
  1056  0090                     	;# 
  1057  0091                     	;# 
  1058  0092                     	;# 
  1059  0095                     	;# 
  1060  0096                     	;# 
  1061  0097                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009E                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0116                     	;# 
  1073  0117                     	;# 
  1074  011D                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019C                     	;# 
  1094  019C                     	;# 
  1095  019D                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  0210                     	;# 
  1100  0211                     	;# 
  1101  0211                     	;# 
  1102  0212                     	;# 
  1103  0212                     	;# 
  1104  0213                     	;# 
  1105  0213                     	;# 
  1106  0214                     	;# 
  1107  0214                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0216                     	;# 
  1112  0216                     	;# 
  1113  0217                     	;# 
  1114  0217                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  0394                     	;# 
  1124  0395                     	;# 
  1125  0396                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008D                     	;# 
  1166  008E                     	;# 
  1167  0090                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0095                     	;# 
  1171  0096                     	;# 
  1172  0097                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  010C                     	;# 
  1181  010D                     	;# 
  1182  010E                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0197                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019C                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020D                     	;# 
  1210  0210                     	;# 
  1211  0211                     	;# 
  1212  0211                     	;# 
  1213  0212                     	;# 
  1214  0212                     	;# 
  1215  0213                     	;# 
  1216  0213                     	;# 
  1217  0214                     	;# 
  1218  0214                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0215                     	;# 
  1222  0216                     	;# 
  1223  0216                     	;# 
  1224  0217                     	;# 
  1225  0217                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0298                     	;# 
  1231  0298                     	;# 
  1232  0299                     	;# 
  1233  029A                     	;# 
  1234  0394                     	;# 
  1235  0395                     	;# 
  1236  0396                     	;# 
  1237  0FE4                     	;# 
  1238  0FE5                     	;# 
  1239  0FE6                     	;# 
  1240  0FE7                     	;# 
  1241  0FE8                     	;# 
  1242  0FE9                     	;# 
  1243  0FEA                     	;# 
  1244  0FEB                     	;# 
  1245  0FED                     	;# 
  1246  0FEE                     	;# 
  1247  0FEF                     	;# 
  1248  0000                     	;# 
  1249  0001                     	;# 
  1250  0002                     	;# 
  1251  0003                     	;# 
  1252  0004                     	;# 
  1253  0005                     	;# 
  1254  0006                     	;# 
  1255  0007                     	;# 
  1256  0008                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  0010                     	;# 
  1264  0011                     	;# 
  1265  0012                     	;# 
  1266  0015                     	;# 
  1267  0016                     	;# 
  1268  0016                     	;# 
  1269  0017                     	;# 
  1270  0018                     	;# 
  1271  0019                     	;# 
  1272  001A                     	;# 
  1273  001B                     	;# 
  1274  001C                     	;# 
  1275  008C                     	;# 
  1276  008D                     	;# 
  1277  008E                     	;# 
  1278  0090                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0095                     	;# 
  1282  0096                     	;# 
  1283  0097                     	;# 
  1284  0099                     	;# 
  1285  009A                     	;# 
  1286  009B                     	;# 
  1287  009B                     	;# 
  1288  009C                     	;# 
  1289  009D                     	;# 
  1290  009E                     	;# 
  1291  010C                     	;# 
  1292  010D                     	;# 
  1293  010E                     	;# 
  1294  0116                     	;# 
  1295  0117                     	;# 
  1296  011D                     	;# 
  1297  018C                     	;# 
  1298  018D                     	;# 
  1299  018E                     	;# 
  1300  0191                     	;# 
  1301  0191                     	;# 
  1302  0192                     	;# 
  1303  0193                     	;# 
  1304  0193                     	;# 
  1305  0194                     	;# 
  1306  0195                     	;# 
  1307  0196                     	;# 
  1308  0197                     	;# 
  1309  0199                     	;# 
  1310  019A                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019C                     	;# 
  1316  019C                     	;# 
  1317  019D                     	;# 
  1318  019E                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0291                     	;# 
  1338  0291                     	;# 
  1339  0292                     	;# 
  1340  0293                     	;# 
  1341  0298                     	;# 
  1342  0298                     	;# 
  1343  0299                     	;# 
  1344  029A                     	;# 
  1345  0394                     	;# 
  1346  0395                     	;# 
  1347  0396                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  000E                     	;# 
  1374  0010                     	;# 
  1375  0011                     	;# 
  1376  0012                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  008E                     	;# 
  1389  0090                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010D                     	;# 
  1404  010E                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  011D                     	;# 
  1408  018C                     	;# 
  1409  018D                     	;# 
  1410  018E                     	;# 
  1411  0191                     	;# 
  1412  0191                     	;# 
  1413  0192                     	;# 
  1414  0193                     	;# 
  1415  0193                     	;# 
  1416  0194                     	;# 
  1417  0195                     	;# 
  1418  0196                     	;# 
  1419  0197                     	;# 
  1420  0199                     	;# 
  1421  019A                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019C                     	;# 
  1428  019D                     	;# 
  1429  019E                     	;# 
  1430  019F                     	;# 
  1431  020D                     	;# 
  1432  0210                     	;# 
  1433  0211                     	;# 
  1434  0211                     	;# 
  1435  0212                     	;# 
  1436  0212                     	;# 
  1437  0213                     	;# 
  1438  0213                     	;# 
  1439  0214                     	;# 
  1440  0214                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0215                     	;# 
  1444  0216                     	;# 
  1445  0216                     	;# 
  1446  0217                     	;# 
  1447  0217                     	;# 
  1448  0291                     	;# 
  1449  0291                     	;# 
  1450  0292                     	;# 
  1451  0293                     	;# 
  1452  0298                     	;# 
  1453  0298                     	;# 
  1454  0299                     	;# 
  1455  029A                     	;# 
  1456  0394                     	;# 
  1457  0395                     	;# 
  1458  0396                     	;# 
  1459  0FE4                     	;# 
  1460  0FE5                     	;# 
  1461  0FE6                     	;# 
  1462  0FE7                     	;# 
  1463  0FE8                     	;# 
  1464  0FE9                     	;# 
  1465  0FEA                     	;# 
  1466  0FEB                     	;# 
  1467  0FED                     	;# 
  1468  0FEE                     	;# 
  1469  0FEF                     	;# 
  1470  0000                     	;# 
  1471  0001                     	;# 
  1472  0002                     	;# 
  1473  0003                     	;# 
  1474  0004                     	;# 
  1475  0005                     	;# 
  1476  0006                     	;# 
  1477  0007                     	;# 
  1478  0008                     	;# 
  1479  0009                     	;# 
  1480  000A                     	;# 
  1481  000B                     	;# 
  1482  000C                     	;# 
  1483  000D                     	;# 
  1484  000E                     	;# 
  1485  0010                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0015                     	;# 
  1489  0016                     	;# 
  1490  0016                     	;# 
  1491  0017                     	;# 
  1492  0018                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0095                     	;# 
  1504  0096                     	;# 
  1505  0097                     	;# 
  1506  0099                     	;# 
  1507  009A                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  010C                     	;# 
  1514  010D                     	;# 
  1515  010E                     	;# 
  1516  0116                     	;# 
  1517  0117                     	;# 
  1518  011D                     	;# 
  1519  018C                     	;# 
  1520  018D                     	;# 
  1521  018E                     	;# 
  1522  0191                     	;# 
  1523  0191                     	;# 
  1524  0192                     	;# 
  1525  0193                     	;# 
  1526  0193                     	;# 
  1527  0194                     	;# 
  1528  0195                     	;# 
  1529  0196                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0298                     	;# 
  1564  0298                     	;# 
  1565  0299                     	;# 
  1566  029A                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0010                     	;# 
  1597  0011                     	;# 
  1598  0012                     	;# 
  1599  0015                     	;# 
  1600  0016                     	;# 
  1601  0016                     	;# 
  1602  0017                     	;# 
  1603  0018                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  008C                     	;# 
  1609  008D                     	;# 
  1610  008E                     	;# 
  1611  0090                     	;# 
  1612  0091                     	;# 
  1613  0092                     	;# 
  1614  0095                     	;# 
  1615  0096                     	;# 
  1616  0097                     	;# 
  1617  0099                     	;# 
  1618  009A                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  010C                     	;# 
  1625  010D                     	;# 
  1626  010E                     	;# 
  1627  0116                     	;# 
  1628  0117                     	;# 
  1629  011D                     	;# 
  1630  018C                     	;# 
  1631  018D                     	;# 
  1632  018E                     	;# 
  1633  0191                     	;# 
  1634  0191                     	;# 
  1635  0192                     	;# 
  1636  0193                     	;# 
  1637  0193                     	;# 
  1638  0194                     	;# 
  1639  0195                     	;# 
  1640  0196                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  019A                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019C                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020D                     	;# 
  1654  0210                     	;# 
  1655  0211                     	;# 
  1656  0211                     	;# 
  1657  0212                     	;# 
  1658  0212                     	;# 
  1659  0213                     	;# 
  1660  0213                     	;# 
  1661  0214                     	;# 
  1662  0214                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0215                     	;# 
  1666  0216                     	;# 
  1667  0216                     	;# 
  1668  0217                     	;# 
  1669  0217                     	;# 
  1670  0291                     	;# 
  1671  0291                     	;# 
  1672  0292                     	;# 
  1673  0293                     	;# 
  1674  0298                     	;# 
  1675  0298                     	;# 
  1676  0299                     	;# 
  1677  029A                     	;# 
  1678  0394                     	;# 
  1679  0395                     	;# 
  1680  0396                     	;# 
  1681  0FE4                     	;# 
  1682  0FE5                     	;# 
  1683  0FE6                     	;# 
  1684  0FE7                     	;# 
  1685  0FE8                     	;# 
  1686  0FE9                     	;# 
  1687  0FEA                     	;# 
  1688  0FEB                     	;# 
  1689  0FED                     	;# 
  1690  0FEE                     	;# 
  1691  0FEF                     	;# 
  1692  0000                     	;# 
  1693  0001                     	;# 
  1694  0002                     	;# 
  1695  0003                     	;# 
  1696  0004                     	;# 
  1697  0005                     	;# 
  1698  0006                     	;# 
  1699  0007                     	;# 
  1700  0008                     	;# 
  1701  0009                     	;# 
  1702  000A                     	;# 
  1703  000B                     	;# 
  1704  000C                     	;# 
  1705  000D                     	;# 
  1706  000E                     	;# 
  1707  0010                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0090                     	;# 
  1723  0091                     	;# 
  1724  0092                     	;# 
  1725  0095                     	;# 
  1726  0096                     	;# 
  1727  0097                     	;# 
  1728  0099                     	;# 
  1729  009A                     	;# 
  1730  009B                     	;# 
  1731  009B                     	;# 
  1732  009C                     	;# 
  1733  009D                     	;# 
  1734  009E                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020D                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0291                     	;# 
  1782  0291                     	;# 
  1783  0292                     	;# 
  1784  0293                     	;# 
  1785  0298                     	;# 
  1786  0298                     	;# 
  1787  0299                     	;# 
  1788  029A                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0FE4                     	;# 
  1793  0FE5                     	;# 
  1794  0FE6                     	;# 
  1795  0FE7                     	;# 
  1796  0FE8                     	;# 
  1797  0FE9                     	;# 
  1798  0FEA                     	;# 
  1799  0FEB                     	;# 
  1800  0FED                     	;# 
  1801  0FEE                     	;# 
  1802  0FEF                     	;# 
  1803  0000                     	;# 
  1804  0001                     	;# 
  1805  0002                     	;# 
  1806  0003                     	;# 
  1807  0004                     	;# 
  1808  0005                     	;# 
  1809  0006                     	;# 
  1810  0007                     	;# 
  1811  0008                     	;# 
  1812  0009                     	;# 
  1813  000A                     	;# 
  1814  000B                     	;# 
  1815  000C                     	;# 
  1816  000D                     	;# 
  1817  000E                     	;# 
  1818  0010                     	;# 
  1819  0011                     	;# 
  1820  0012                     	;# 
  1821  0015                     	;# 
  1822  0016                     	;# 
  1823  0016                     	;# 
  1824  0017                     	;# 
  1825  0018                     	;# 
  1826  0019                     	;# 
  1827  001A                     	;# 
  1828  001B                     	;# 
  1829  001C                     	;# 
  1830  008C                     	;# 
  1831  008D                     	;# 
  1832  008E                     	;# 
  1833  0090                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0095                     	;# 
  1837  0096                     	;# 
  1838  0097                     	;# 
  1839  0099                     	;# 
  1840  009A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  011D                     	;# 
  1852  018C                     	;# 
  1853  018D                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  020D                     	;# 
  1876  0210                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0298                     	;# 
  1897  0298                     	;# 
  1898  0299                     	;# 
  1899  029A                     	;# 
  1900  0394                     	;# 
  1901  0395                     	;# 
  1902  0396                     	;# 
  1903  0FE4                     	;# 
  1904  0FE5                     	;# 
  1905  0FE6                     	;# 
  1906  0FE7                     	;# 
  1907  0FE8                     	;# 
  1908  0FE9                     	;# 
  1909  0FEA                     	;# 
  1910  0FEB                     	;# 
  1911  0FED                     	;# 
  1912  0FEE                     	;# 
  1913  0FEF                     	;# 
  1914  0000                     	;# 
  1915  0001                     	;# 
  1916  0002                     	;# 
  1917  0003                     	;# 
  1918  0004                     	;# 
  1919  0005                     	;# 
  1920  0006                     	;# 
  1921  0007                     	;# 
  1922  0008                     	;# 
  1923  0009                     	;# 
  1924  000A                     	;# 
  1925  000B                     	;# 
  1926  000C                     	;# 
  1927  000D                     	;# 
  1928  000E                     	;# 
  1929  0010                     	;# 
  1930  0011                     	;# 
  1931  0012                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  008C                     	;# 
  1942  008D                     	;# 
  1943  008E                     	;# 
  1944  0090                     	;# 
  1945  0091                     	;# 
  1946  0092                     	;# 
  1947  0095                     	;# 
  1948  0096                     	;# 
  1949  0097                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0116                     	;# 
  1961  0117                     	;# 
  1962  011D                     	;# 
  1963  018C                     	;# 
  1964  018D                     	;# 
  1965  018E                     	;# 
  1966  0191                     	;# 
  1967  0191                     	;# 
  1968  0192                     	;# 
  1969  0193                     	;# 
  1970  0193                     	;# 
  1971  0194                     	;# 
  1972  0195                     	;# 
  1973  0196                     	;# 
  1974  0197                     	;# 
  1975  0199                     	;# 
  1976  019A                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019C                     	;# 
  1982  019C                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019F                     	;# 
  1986  020D                     	;# 
  1987  0210                     	;# 
  1988  0211                     	;# 
  1989  0211                     	;# 
  1990  0212                     	;# 
  1991  0212                     	;# 
  1992  0213                     	;# 
  1993  0213                     	;# 
  1994  0214                     	;# 
  1995  0214                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0215                     	;# 
  1999  0216                     	;# 
  2000  0216                     	;# 
  2001  0217                     	;# 
  2002  0217                     	;# 
  2003  0291                     	;# 
  2004  0291                     	;# 
  2005  0292                     	;# 
  2006  0293                     	;# 
  2007  0298                     	;# 
  2008  0298                     	;# 
  2009  0299                     	;# 
  2010  029A                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE9                     	;# 
  2020  0FEA                     	;# 
  2021  0FEB                     	;# 
  2022  0FED                     	;# 
  2023  0FEE                     	;# 
  2024  0FEF                     	;# 
  2025                           
  2026                           	psect	idataBANK3
  2027  138D                     __pidataBANK3:	
  2028                           
  2029                           ;initializer for __product
  2030  138D  3463               	retlw	99
  2031  138E  3402               	retlw	2
  2032  138F  3400               	retlw	0
  2033  1390  3400               	retlw	0
  2034  1391  3400               	retlw	0
  2035  1392  3400               	retlw	0
  2036  1393  3400               	retlw	0
  2037  1394  3400               	retlw	0
  2038  1395  3400               	retlw	0
  2039  1396  3400               	retlw	0
  2040  1397  3400               	retlw	0
  2041  1398  3400               	retlw	0
  2042  1399  34FF               	retlw	255
  2043  139A  34FF               	retlw	255
  2044  139B  34FF               	retlw	255
  2045  139C  3400               	retlw	0
  2046  139D  3400               	retlw	0
  2047  139E  3400               	retlw	0
  2048  139F  3400               	retlw	0
  2049  13A0  3400               	retlw	0
  2050  13A1  3400               	retlw	0
  2051  13A2  3400               	retlw	0
  2052  13A3  3400               	retlw	0
  2053  13A4  3400               	retlw	0
  2054  13A5  3400               	retlw	0
  2055  13A6  3400               	retlw	0
  2056  13A7  3400               	retlw	0
  2057  13A8  3400               	retlw	0
  2058  13A9  3400               	retlw	0
  2059  13AA  3400               	retlw	0
  2060  13AB  3400               	retlw	0
  2061  13AC  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext
  2064  1000                     __pstringtext:	
  2065  1000                     _CC2500_registers_address:	
  2066  1000  3403               	retlw	3
  2067  1001  3416               	retlw	22
  2068  1002  3417               	retlw	23
  2069  1003  341E               	retlw	30
  2070  1004  341F               	retlw	31
  2071  1005  3420               	retlw	32
  2072  1006  342A               	retlw	42
  2073  1007  342B               	retlw	43
  2074  1008  340B               	retlw	11
  2075  1009  340C               	retlw	12
  2076  100A  340D               	retlw	13
  2077  100B  340E               	retlw	14
  2078  100C  340F               	retlw	15
  2079  100D  3410               	retlw	16
  2080  100E  3411               	retlw	17
  2081  100F  3412               	retlw	18
  2082  1010  3413               	retlw	19
  2083  1011  3414               	retlw	20
  2084  1012  340A               	retlw	10
  2085  1013  3415               	retlw	21
  2086  1014  3421               	retlw	33
  2087  1015  3422               	retlw	34
  2088  1016  3418               	retlw	24
  2089  1017  3419               	retlw	25
  2090  1018  341A               	retlw	26
  2091  1019  341B               	retlw	27
  2092  101A  341C               	retlw	28
  2093  101B  341D               	retlw	29
  2094  101C  3423               	retlw	35
  2095  101D  3424               	retlw	36
  2096  101E  3425               	retlw	37
  2097  101F  3426               	retlw	38
  2098  1020  3429               	retlw	41
  2099  1021  342C               	retlw	44
  2100  1022  342D               	retlw	45
  2101  1023  342E               	retlw	46
  2102  1024  3400               	retlw	0
  2103  1025  3401               	retlw	1
  2104  1026  3402               	retlw	2
  2105  1027  3407               	retlw	7
  2106  1028  3408               	retlw	8
  2107  1029  3409               	retlw	9
  2108  102A  3406               	retlw	6
  2109  102B  3404               	retlw	4
  2110  102C  3405               	retlw	5
  2111  102D  3427               	retlw	39
  2112  102E  3428               	retlw	40
  2113  102F                     __end_of_CC2500_registers_address:	
  2114  102F                     _CC2500_rfSettings:	
  2115  102F  3407               	retlw	7
  2116  1030  3407               	retlw	7
  2117  1031  3430               	retlw	48
  2118  1032  3487               	retlw	135
  2119  1033  346B               	retlw	107
  2120  1034  34F8               	retlw	248
  2121  1035  347F               	retlw	127
  2122  1036  343F               	retlw	63
  2123  1037  3409               	retlw	9
  2124  1038  3400               	retlw	0
  2125  1039  345C               	retlw	92
  2126  103A  34A7               	retlw	167
  2127  103B  3462               	retlw	98
  2128  103C  3486               	retlw	134
  2129  103D  3483               	retlw	131
  2130  103E  3403               	retlw	3
  2131  103F  3422               	retlw	34
  2132  1040  34F8               	retlw	248
  2133  1041  3400               	retlw	0
  2134  1042  3444               	retlw	68
  2135  1043  34B6               	retlw	182
  2136  1044  3410               	retlw	16
  2137  1045  3418               	retlw	24
  2138  1046  341D               	retlw	29
  2139  1047  341C               	retlw	28
  2140  1048  34C7               	retlw	199
  2141  1049  3400               	retlw	0
  2142  104A  34B2               	retlw	178
  2143  104B  34EA               	retlw	234
  2144  104C  340A               	retlw	10
  2145  104D  3400               	retlw	0
  2146  104E  3411               	retlw	17
  2147  104F  3459               	retlw	89
  2148  1050  3488               	retlw	136
  2149  1051  3431               	retlw	49
  2150  1052  340B               	retlw	11
  2151  1053  342F               	retlw	47
  2152  1054  342E               	retlw	46
  2153  1055  3406               	retlw	6
  2154  1056  3404               	retlw	4
  2155  1057  3405               	retlw	5
  2156  1058  3400               	retlw	0
  2157  1059  3430               	retlw	48
  2158  105A  34D3               	retlw	211
  2159  105B  3491               	retlw	145
  2160  105C  3441               	retlw	65
  2161  105D  3400               	retlw	0
  2162  105E                     __end_of_CC2500_rfSettings:	
  2163  105E                     _CC2500_patable_vaule:	
  2164  105E  34FE               	retlw	254
  2165  105F  34FE               	retlw	254
  2166  1060  34FE               	retlw	254
  2167  1061  34FE               	retlw	254
  2168  1062  34FE               	retlw	254
  2169  1063  34FE               	retlw	254
  2170  1064  34FE               	retlw	254
  2171  1065  34FE               	retlw	254
  2172  1066                     __end_of_CC2500_patable_vaule:	
  2173                           
  2174                           	psect	nvBANK0
  2175  006E                     __pnvBANK0:	
  2176  006E                     _product:	
  2177  006E                     	ds	1
  2178  000C                     _PORTA	set	12
  2179  000D                     _PORTB	set	13
  2180  000E                     _PORTC	set	14
  2181  0018                     _T1CON	set	24
  2182  0017                     _TMR1H	set	23
  2183  0016                     _TMR1L	set	22
  2184  005F                     _GIE	set	95
  2185  005C                     _INTE	set	92
  2186  0059                     _INTF	set	89
  2187  005B                     _IOCIE	set	91
  2188  0058                     _IOCIF	set	88
  2189  005E                     _PEIE	set	94
  2190  0060                     _RA0	set	96
  2191  0063                     _RA3	set	99
  2192  0064                     _RA4	set	100
  2193  0066                     _RA6	set	102
  2194  0067                     _RA7	set	103
  2195  0068                     _RB0	set	104
  2196  0069                     _RB1	set	105
  2197  006B                     _RB3	set	107
  2198  006C                     _RB4	set	108
  2199  006D                     _RB5	set	109
  2200  0070                     _RC0	set	112
  2201  0071                     _RC1	set	113
  2202  0072                     _RC2	set	114
  2203  0074                     _RC4	set	116
  2204  0075                     _RC5	set	117
  2205  0077                     _RC7	set	119
  2206  0088                     _TMR1IF	set	136
  2207  009D                     _ADCON0	set	157
  2208  009E                     _ADCON1	set	158
  2209  009C                     _ADRESH	set	156
  2210  009B                     _ADRESL	set	155
  2211  0099                     _OSCCON	set	153
  2212  008C                     _TRISA	set	140
  2213  008D                     _TRISB	set	141
  2214  008E                     _TRISC	set	142
  2215  0097                     _WDTCON	set	151
  2216  04E9                     _GO_nDONE	set	1257
  2217  0488                     _TMR1IE	set	1160
  2218  0117                     _FVRCON	set	279
  2219  010C                     _LATA	set	268
  2220  010D                     _LATB	set	269
  2221  010E                     _LATC	set	270
  2222  018C                     _ANSELA	set	396
  2223  018D                     _ANSELB	set	397
  2224  018E                     _ANSELC	set	398
  2225  0192                     _PMADRH	set	402
  2226  0191                     _PMADRL	set	401
  2227  0196                     _PMCON2	set	406
  2228  0194                     _PMDATH	set	404
  2229  0193                     _PMDATL	set	403
  2230  0CAE                     _CFGS	set	3246
  2231  0CAC                     _FREE	set	3244
  2232  0CAD                     _LWLO	set	3245
  2233  0CA8                     _RD	set	3240
  2234  0CA9                     _WR	set	3241
  2235  0CAA                     _WREN	set	3242
  2236  1068                     _WPUB0	set	4200
  2237  1069                     _WPUB1	set	4201
  2238  106A                     _WPUB2	set	4202
  2239  0396                     _IOCBF	set	918
  2240  0395                     _IOCBN	set	917
  2241  0394                     _IOCBP	set	916
  2242  1CB2                     _IOCBF2	set	7346
  2243                           
  2244                           ; #config settings
  2245  0000                     
  2246                           	psect	cinit
  2247  0018                     start_initialization:	
  2248  0018                     __initialization:	
  2249                           
  2250                           ; Clear objects allocated to BITCOMMON
  2251  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2252                           
  2253                           ; Clear objects allocated to COMMON
  2254  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2255  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2256  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2257  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2258                           
  2259                           ; Clear objects allocated to BANK0
  2260  001D  01EF               	clrf	__pbssBANK0& (0+127)
  2261                           
  2262                           ; Clear objects allocated to BANK1
  2263  001E  30A0               	movlw	low __pbssBANK1
  2264  001F  0084               	movwf	4
  2265  0020  3000               	movlw	high __pbssBANK1
  2266  0021  0085               	movwf	5
  2267  0022  304D               	movlw	77
  2268  0023  319F  278A  3180   	fcall	clear_ram0
  2269                           
  2270                           ; Clear objects allocated to BANK2
  2271  0026  3020               	movlw	low __pbssBANK2
  2272  0027  0084               	movwf	4
  2273  0028  3001               	movlw	high __pbssBANK2
  2274  0029  0085               	movwf	5
  2275  002A  304D               	movlw	77
  2276  002B  319F  278A  3180   	fcall	clear_ram0
  2277                           
  2278                           ; Clear objects allocated to BANK3
  2279  002E  30A0               	movlw	low __pbssBANK3
  2280  002F  0084               	movwf	4
  2281  0030  3001               	movlw	high __pbssBANK3
  2282  0031  0085               	movwf	5
  2283  0032  3025               	movlw	37
  2284  0033  319F  278A  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Initialize objects allocated to BANK3
  2287  0036  308D               	movlw	low __pidataBANK3
  2288  0037  0084               	movwf	4
  2289  0038  3093               	movlw	(high __pidataBANK3)| (0+128)
  2290  0039  0085               	movwf	5
  2291  003A  30C5               	movlw	low __pdataBANK3
  2292  003B  0086               	movwf	6
  2293  003C  3001               	movlw	high __pdataBANK3
  2294  003D  0087               	movwf	7
  2295  003E  3020               	movlw	32
  2296  003F  319F  2784         	fcall	init_ram
  2297  0041                     end_of_initialization:	
  2298                           ;End of C runtime variable initialization code
  2299                           
  2300  0041                     __end_of__initialization:	
  2301  0041  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2302  0042  0020               	movlb	0
  2303  0043  3196  2E5F         	ljmp	_main	;jump to C main() function
  2304                           
  2305                           	psect	bitbssCOMMON
  2306  03E0                     __pbitbssCOMMON:	
  2307  03E0                     _Receive_OK:	
  2308  03E0                     	ds	1
  2309  03E1                     _Transceive_OK:	
  2310  03E1                     	ds	1
  2311                           
  2312                           	psect	bssCOMMON
  2313  0078                     __pbssCOMMON:	
  2314  0078                     _DelayOff:	
  2315  0078                     	ds	1
  2316  0079                     _DimmerLights:	
  2317  0079                     	ds	1
  2318  007A                     _DimmerLightsIntr:	
  2319  007A                     	ds	1
  2320  007B                     _SPI0Buffer:	
  2321  007B                     	ds	1
  2322                           
  2323                           	psect	bssBANK0
  2324  006F                     __pbssBANK0:	
  2325  006F                     _Sw:	
  2326  006F                     	ds	1
  2327                           
  2328                           	psect	bssBANK1
  2329  00A0                     __pbssBANK1:	
  2330  00A0                     _myMain:	
  2331  00A0                     	ds	19
  2332  00B3                     _Buz1:	
  2333  00B3                     	ds	12
  2334  00BF                     _RF1:	
  2335  00BF                     	ds	12
  2336  00CB                     _Timer1:	
  2337  00CB                     	ds	3
  2338  00CE                     _LED:	
  2339  00CE                     	ds	2
  2340  00D0                     _RF_Count:	
  2341  00D0                     	ds	2
  2342  00D2                     _WDT:	
  2343  00D2                     	ds	2
  2344  00D4                     _CRC:	
  2345  00D4                     	ds	1
  2346  00D5                     _Dimmer:	
  2347  00D5                     	ds	1
  2348  00D6                     _DimmerLights11:	
  2349  00D6                     	ds	1
  2350  00D7                     _DimmerLights22:	
  2351  00D7                     	ds	1
  2352  00D8                     _DimmerLightsIntrIOC:	
  2353  00D8                     	ds	1
  2354  00D9                     _RFSW:	
  2355  00D9                     	ds	1
  2356  00DA                     _RSSI:	
  2357  00DA                     	ds	1
  2358  00DB                     _Rx_Length:	
  2359  00DB                     	ds	1
  2360  00DC                     _Tx_Length:	
  2361  00DC                     	ds	1
  2362  00DD                     _r_address:	
  2363  00DD                     	ds	1
  2364  00DE                     _r_data:	
  2365  00DE                     	ds	1
  2366  00DF                     _s_data:	
  2367  00DF                     	ds	1
  2368  00E0                     _VarErrLED:	
  2369  00E0                     	ds	4
  2370  00E4                     _Dimmer1:	
  2371  00E4                     	ds	3
  2372  00E7                     _DlySw1:	
  2373  00E7                     	ds	2
  2374  00E9                     _DlySw2:	
  2375  00E9                     	ds	2
  2376  00EB                     _RFSW1:	
  2377  00EB                     	ds	1
  2378  00EC                     _RFSW2:	
  2379  00EC                     	ds	1
  2380                           
  2381                           	psect	bssBANK2
  2382  0120                     __pbssBANK2:	
  2383  0120                     _RF_Data:	
  2384  0120                     	ds	21
  2385  0135                     _DimmerLights1:	
  2386  0135                     	ds	15
  2387  0144                     _DimmerLights2:	
  2388  0144                     	ds	15
  2389  0153                     _Sw1:	
  2390  0153                     	ds	9
  2391  015C                     _Sw2:	
  2392  015C                     	ds	9
  2393  0165                     _VarLED1:	
  2394  0165                     	ds	4
  2395  0169                     _VarLED2:	
  2396  0169                     	ds	4
  2397                           
  2398                           	psect	bssBANK3
  2399  01A0                     __pbssBANK3:	
  2400  01A0                     _Memory:	
  2401  01A0                     	ds	37
  2402                           
  2403                           	psect	dataBANK3
  2404  01C5                     __pdataBANK3:	
  2405  01C5                     __product:	
  2406  01C5                     	ds	32
  2407                           
  2408                           	psect	clrtext
  2409  1F8A                     clear_ram0:	
  2410                           ;	Called with FSR0 containing the base address, and
  2411                           ;	WREG with the size to clear
  2412                           
  2413  1F8A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2414  1F8B                     clrloop0:	
  2415  1F8B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2416  1F8C  3101               	addfsr 0,1
  2417  1F8D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2418  1F8E  2F8B               	goto	clrloop0	;have we reached the end yet?
  2419  1F8F  3400               	retlw	0	;all done for this memory range, return
  2420                           
  2421                           	psect	inittext
  2422  1F84                     init_ram:	
  2423  1F84  00FE               	movwf	126
  2424  1F85                     initloop:	
  2425  1F85  0012               	moviw fsr0++
  2426  1F86  001E               	movwi fsr1++
  2427  1F87  0BFE               	decfsz	126,f
  2428  1F88  2F85               	goto	initloop
  2429  1F89  3400               	retlw	0
  2430                           
  2431                           	psect	cstackCOMMON
  2432  0070                     __pcstackCOMMON:	
  2433  0070                     ?_Timeout_Counter:	
  2434  0070                     ?_set_TimeoutCleared:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0070                     ?_CC2500_WriteByte:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0070                     ?_CC2500_WriteCommand:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0070                     ?_CC2500_ReadStatus:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0070                     ?_CC2500_ReadByte:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0070                     ?_CC2500_PowerRST:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ?_CC2500_InitSetREG:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0070                     ?_CC2500_InitPATable:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0070                     ?_CC2500_ClearTXFIFO:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_CC2500_ClearRXFIFO:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_FrequencyCabr:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_SIDLEMode:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_DlyOff_Initialization:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_DlyOff_Main:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_setTxData:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_setDimmerLights_Initialization:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_Dimmer_Initialization:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_setMemory_GO:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_setDimmerLights_Main:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_setLED_Initialization:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_setLED_Main:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_Fosc_Set:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_IO_Set:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_TMR1_Set:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_ADC_Set:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_INT_Set:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_IOC_Set:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_WDT_Set:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_IOC_ISR:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_TMR1_ISR:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_INT_ISR:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setRF_ReceiveGO:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ??_setRF_ReceiveGO:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Flash_Memory_Write:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_Flash_Memory_Modify:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_WDT_Clearing:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setRF_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setRF_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_getRxData:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_setLog_Code:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_setControl_Lights_Table:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_setRFSW_Control:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_setRFSW_AdjControl:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_setRF_DimmerValue:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_setSw_Initialization:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_setSw_Main:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_Sw_DimmerOnFunc:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Sw_DimmerAdjFunc:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Sw_DimmerOffFunc:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_myMain_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_my_MainTime:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_Buzzer_Initialization:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Buzzer_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_TxData:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_RxData:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_PowerOnInitial:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_DelayOffPointSelect:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_DelayOff_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DelayOff_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DimmerIntrIOCPointSelect:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ??_DimmerIntrIOCPointSelect:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_DimmerIntrPointSelect:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ??_DimmerIntrPointSelect:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_IntrControl:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_DimmerLightsPointSelect:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DimmerLights_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DimmerLights_Close:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DimmerLights_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_AdjRF:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_LedPointSelect:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_LED_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_LED_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_Mcu_Initialization:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_ISR:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerReClock:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Flash_Memory_Initialization:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Flash_Memory_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Flash_Memory_Unlock:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Flash_Memory_Erasing:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_WDT_Main:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_RF_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_RF_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setRF_Learn:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setRF_Enable:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_RfSWPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_TouchPower:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_SwPointSelect:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Switch_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Switch_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setSw_Enable:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_DelayTimejudge:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getDimmerLights_StatusFlag:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713  0070                     ?_getPercentValue:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Read:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0070                     ?_setPercentValue:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0070                     setRF_ReceiveGO@command:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725                           
  2726                           ; 1 bytes @ 0x0
  2727  0070                     	ds	1
  2728  0071                     ??_INT_ISR:	
  2729  0071                     DimmerIntrIOCPointSelect@lights:	
  2730                           ; 0 bytes @ 0x1
  2731                           
  2732  0071                     DimmerIntrPointSelect@lights:	
  2733                           ; 1 bytes @ 0x1
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0x1
  2737  0071                     	ds	1
  2738  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2739  0072                     ??_setDimmerLights_IntrControl:	
  2740                           ; 0 bytes @ 0x2
  2741                           
  2742  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2743                           ; 0 bytes @ 0x2
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0x2
  2747  0072                     	ds	1
  2748  0073                     ??_IOC_ISR:	
  2749  0073                     ??_setDimmerReClock:	
  2750                           ; 0 bytes @ 0x3
  2751                           
  2752                           
  2753                           ; 0 bytes @ 0x3
  2754  0073                     	ds	3
  2755  0076                     setDimmerLights_IntrControl@lights:	
  2756                           
  2757                           ; 1 bytes @ 0x6
  2758  0076                     	ds	1
  2759  0077                     ??_TMR1_ISR:	
  2760  0077                     ??_ISR:	
  2761                           ; 0 bytes @ 0x7
  2762                           
  2763                           
  2764                           ; 0 bytes @ 0x7
  2765  0077                     	ds	1
  2766                           
  2767                           	psect	cstackBANK0
  2768  0020                     __pcstackBANK0:	
  2769  0020                     ??_Timeout_Counter:	
  2770  0020                     ??_set_TimeoutCleared:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0020                     ??_CC2500_WriteByte:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0020                     ??_CC2500_ReadByte:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0020                     ?_DelayTime_1us:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0020                     ??_setTxData:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0020                     ??_Dimmer_Initialization:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0020                     ??_getDimmerLights_StatusFlag:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0020                     ??_setMemory_GO:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0020                     ??_Fosc_Set:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ??_IO_Set:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_TMR1_Set:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_ADC_Set:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_INT_Set:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_IOC_Set:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_WDT_Set:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_Flash_Memory_Read:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_Flash_Memory_Write:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_WDT_Clearing:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_setRF_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_myMain_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_Buzzer_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_Buzzer_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_DelayOffPointSelect:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_DimmerLightsPointSelect:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_LedPointSelect:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_Flash_Memory_Unlock:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_Flash_Memory_Erasing:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_WDT_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_setRF_Learn:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_setRF_Enable:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_RfSWPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_TouchPower:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_SwPointSelect:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ?___bmul:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ?_getBuz_GO:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0020                     ?___awdiv:	
  2876                           ; 2 bytes @ 0x0
  2877                           
  2878  0020                     ?___ftpack:	
  2879                           ; 2 bytes @ 0x0
  2880                           
  2881  0020                     LedPointSelect@led:	
  2882                           ; 3 bytes @ 0x0
  2883                           
  2884  0020                     setRF_Learn@command:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0020                     setRF_Enable@command:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0020                     ___bmul@multiplicand:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0020                     DelayTime_1us@count:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0020                     ___awdiv@divisor:	
  2897                           ; 2 bytes @ 0x0
  2898                           
  2899  0020                     ___ftpack@arg:	
  2900                           ; 2 bytes @ 0x0
  2901                           
  2902                           
  2903                           ; 3 bytes @ 0x0
  2904  0020                     	ds	1
  2905  0021                     ?_setLED:	
  2906  0021                     ??_setLED_Main:	
  2907                           ; 0 bytes @ 0x1
  2908                           
  2909  0021                     ??_Mcu_Initialization:	
  2910                           ; 0 bytes @ 0x1
  2911                           
  2912  0021                     ??_RF_Initialization:	
  2913                           ; 0 bytes @ 0x1
  2914                           
  2915  0021                     ??___bmul:	
  2916                           ; 0 bytes @ 0x1
  2917                           
  2918  0021                     CC2500_WriteByte@loop_a:	
  2919                           ; 0 bytes @ 0x1
  2920                           
  2921  0021                     CC2500_ReadByte@loop_b:	
  2922                           ; 1 bytes @ 0x1
  2923                           
  2924  0021                     DelayOffPointSelect@sw:	
  2925                           ; 1 bytes @ 0x1
  2926                           
  2927  0021                     DimmerLightsPointSelect@lights:	
  2928                           ; 1 bytes @ 0x1
  2929                           
  2930  0021                     getDimmerLights_StatusFlag@Status:	
  2931                           ; 1 bytes @ 0x1
  2932                           
  2933  0021                     setLED@command:	
  2934                           ; 1 bytes @ 0x1
  2935                           
  2936  0021                     Flash_Memory_Read@i:	
  2937                           ; 1 bytes @ 0x1
  2938                           
  2939  0021                     Flash_Memory_Write@i:	
  2940                           ; 1 bytes @ 0x1
  2941                           
  2942  0021                     RfSWPointSelect@sw:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945  0021                     SwPointSelect@sw:	
  2946                           ; 1 bytes @ 0x1
  2947                           
  2948                           
  2949                           ; 1 bytes @ 0x1
  2950  0021                     	ds	1
  2951  0022                     ??_CC2500_WriteCommand:	
  2952  0022                     ??_CC2500_ReadStatus:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955  0022                     ??_DelayTime_1us:	
  2956                           ; 0 bytes @ 0x2
  2957                           
  2958  0022                     ?_CC2500_WriteREG:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0022                     ??_DlyOff_Initialization:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0022                     ?_setSw_Status:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0022                     ?_setRFSW_Status:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0022                     ?_setDimmerLights_Trigger:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0022                     ?_setDimmerLights_Switch:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0022                     ??_setDimmerLights_Initialization:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0022                     ??_setLED:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0022                     ??_getBuz_GO:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0022                     ?_setDimmerLights_AdjGo:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0022                     ?_setDimmerLights_TriggerAdj:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0022                     ??_setSw_Enable:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0022                     CC2500_WriteREG@value:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0022                     DlyOff_Initialization@sw:	
  2998                           ; 1 bytes @ 0x2
  2999                           
  3000  0022                     _getDimmerLights_StatusFlag$2255:	
  3001                           ; 1 bytes @ 0x2
  3002                           
  3003  0022                     setDimmerLights_Switch@command:	
  3004                           ; 1 bytes @ 0x2
  3005                           
  3006  0022                     setDimmerLights_AdjGo@command:	
  3007                           ; 1 bytes @ 0x2
  3008                           
  3009  0022                     setDimmerLights_Trigger@command:	
  3010                           ; 1 bytes @ 0x2
  3011                           
  3012  0022                     setDimmerLights_TriggerAdj@command:	
  3013                           ; 1 bytes @ 0x2
  3014                           
  3015  0022                     setLED@led:	
  3016                           ; 1 bytes @ 0x2
  3017                           
  3018  0022                     Flash_Memory_Read@address:	
  3019                           ; 1 bytes @ 0x2
  3020                           
  3021  0022                     setMemory_GO@command:	
  3022                           ; 1 bytes @ 0x2
  3023                           
  3024  0022                     setRFSW_Status@command:	
  3025                           ; 1 bytes @ 0x2
  3026                           
  3027  0022                     setSw_Enable@command:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0022                     setSw_Status@command:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0022                     ___bmul@product:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0022                     DelayTime_1us@i:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0022                     ___awdiv@dividend:	
  3040                           ; 2 bytes @ 0x2
  3041                           
  3042                           
  3043                           ; 2 bytes @ 0x2
  3044  0022                     	ds	1
  3045  0023                     ??_CC2500_WriteREG:	
  3046  0023                     ??_setSw_Status:	
  3047                           ; 0 bytes @ 0x3
  3048                           
  3049  0023                     ??_setRFSW_Status:	
  3050                           ; 0 bytes @ 0x3
  3051                           
  3052  0023                     ??_setDimmerLights_Trigger:	
  3053                           ; 0 bytes @ 0x3
  3054                           
  3055  0023                     ??_setDimmerLights_Switch:	
  3056                           ; 0 bytes @ 0x3
  3057                           
  3058  0023                     ?_setDimmerLights:	
  3059                           ; 0 bytes @ 0x3
  3060                           
  3061  0023                     ??_setLED_Initialization:	
  3062                           ; 0 bytes @ 0x3
  3063                           
  3064  0023                     ??_setSw_Initialization:	
  3065                           ; 0 bytes @ 0x3
  3066                           
  3067  0023                     ??_DelayOff_Initialization:	
  3068                           ; 0 bytes @ 0x3
  3069                           
  3070  0023                     ??_DimmerLights_Close:	
  3071                           ; 0 bytes @ 0x3
  3072                           
  3073  0023                     ??_setDimmerLights_AdjGo:	
  3074                           ; 0 bytes @ 0x3
  3075                           
  3076  0023                     ??_setDimmerLights_TriggerAdj:	
  3077                           ; 0 bytes @ 0x3
  3078                           
  3079  0023                     CC2500_WriteCommand@command:	
  3080                           ; 0 bytes @ 0x3
  3081                           
  3082  0023                     CC2500_ReadStatus@status_addr:	
  3083                           ; 1 bytes @ 0x3
  3084                           
  3085  0023                     setDimmerLights_Initialization@lights:	
  3086                           ; 1 bytes @ 0x3
  3087                           
  3088  0023                     setDimmerLights@status:	
  3089                           ; 1 bytes @ 0x3
  3090                           
  3091  0023                     setDimmerLights_Switch@lights:	
  3092                           ; 1 bytes @ 0x3
  3093                           
  3094  0023                     setDimmerLights_AdjGo@lights:	
  3095                           ; 1 bytes @ 0x3
  3096                           
  3097  0023                     setDimmerLights_Trigger@lights:	
  3098                           ; 1 bytes @ 0x3
  3099                           
  3100  0023                     setDimmerLights_TriggerAdj@lights:	
  3101                           ; 1 bytes @ 0x3
  3102                           
  3103  0023                     setLED_Initialization@led:	
  3104                           ; 1 bytes @ 0x3
  3105                           
  3106  0023                     setLED_Main@led:	
  3107                           ; 1 bytes @ 0x3
  3108                           
  3109  0023                     Flash_Memory_Read@ret:	
  3110                           ; 1 bytes @ 0x3
  3111                           
  3112  0023                     setRFSW_Status@sw:	
  3113                           ; 1 bytes @ 0x3
  3114                           
  3115  0023                     setSw_Initialization@sw:	
  3116                           ; 1 bytes @ 0x3
  3117                           
  3118  0023                     setSw_Status@sw:	
  3119                           ; 1 bytes @ 0x3
  3120                           
  3121  0023                     ___bmul@multiplier:	
  3122                           ; 1 bytes @ 0x3
  3123                           
  3124  0023                     ___ftpack@exp:	
  3125                           ; 1 bytes @ 0x3
  3126                           
  3127                           
  3128                           ; 1 bytes @ 0x3
  3129  0023                     	ds	1
  3130  0024                     ??_CC2500_ClearTXFIFO:	
  3131  0024                     ??_CC2500_ClearRXFIFO:	
  3132                           ; 0 bytes @ 0x4
  3133                           
  3134  0024                     ??_CC2500_SIDLEMode:	
  3135                           ; 0 bytes @ 0x4
  3136                           
  3137  0024                     ??_DelayTimejudge:	
  3138                           ; 0 bytes @ 0x4
  3139                           
  3140  0024                     ??_setDimmerLights:	
  3141                           ; 0 bytes @ 0x4
  3142                           
  3143  0024                     ??_Flash_Memory_Modify:	
  3144                           ; 0 bytes @ 0x4
  3145                           
  3146  0024                     ??_Sw_DimmerAdjFunc:	
  3147                           ; 0 bytes @ 0x4
  3148                           
  3149  0024                     ??_CC2500_TxData:	
  3150                           ; 0 bytes @ 0x4
  3151                           
  3152  0024                     ??_CC2500_RxData:	
  3153                           ; 0 bytes @ 0x4
  3154                           
  3155  0024                     ??_DimmerLights_Initialization:	
  3156                           ; 0 bytes @ 0x4
  3157                           
  3158  0024                     ??_LED_Initialization:	
  3159                           ; 0 bytes @ 0x4
  3160                           
  3161  0024                     ??_LED_Main:	
  3162                           ; 0 bytes @ 0x4
  3163                           
  3164  0024                     ??_Switch_Initialization:	
  3165                           ; 0 bytes @ 0x4
  3166                           
  3167  0024                     ??___awdiv:	
  3168                           ; 0 bytes @ 0x4
  3169                           
  3170  0024                     CC2500_WriteREG@w_addr:	
  3171                           ; 0 bytes @ 0x4
  3172                           
  3173  0024                     Sw_DimmerAdjFunc@Idle:	
  3174                           ; 1 bytes @ 0x4
  3175                           
  3176  0024                     ___ftpack@sign:	
  3177                           ; 1 bytes @ 0x4
  3178                           
  3179  0024                     getBuz_GO@i:	
  3180                           ; 1 bytes @ 0x4
  3181                           
  3182  0024                     DelayTime_1us@j:	
  3183                           ; 2 bytes @ 0x4
  3184                           
  3185                           
  3186                           ; 2 bytes @ 0x4
  3187  0024                     	ds	1
  3188  0025                     ??_CC2500_InitSetREG:	
  3189  0025                     ??_CC2500_InitPATable:	
  3190                           ; 0 bytes @ 0x5
  3191                           
  3192  0025                     ??___ftpack:	
  3193                           ; 0 bytes @ 0x5
  3194                           
  3195  0025                     CC2500_TxData@loop_e:	
  3196                           ; 0 bytes @ 0x5
  3197                           
  3198  0025                     CC2500_RxData@loop_f:	
  3199                           ; 1 bytes @ 0x5
  3200                           
  3201  0025                     setDimmerLights@lights:	
  3202                           ; 1 bytes @ 0x5
  3203                           
  3204  0025                     Flash_Memory_Modify@i:	
  3205                           ; 1 bytes @ 0x5
  3206                           
  3207  0025                     Sw_DimmerAdjFunc@sw:	
  3208                           ; 1 bytes @ 0x5
  3209                           
  3210  0025                     ___awdiv@counter:	
  3211                           ; 1 bytes @ 0x5
  3212                           
  3213                           
  3214                           ; 1 bytes @ 0x5
  3215  0025                     	ds	1
  3216  0026                     ??_CC2500_PowerRST:	
  3217  0026                     ??_CC2500_FrequencyCabr:	
  3218                           ; 0 bytes @ 0x6
  3219                           
  3220  0026                     ??_Flash_Memory_Main:	
  3221                           ; 0 bytes @ 0x6
  3222                           
  3223  0026                     CC2500_InitSetREG@temp1:	
  3224                           ; 0 bytes @ 0x6
  3225                           
  3226  0026                     CC2500_InitPATable@temp:	
  3227                           ; 1 bytes @ 0x6
  3228                           
  3229  0026                     DelayTimejudge@i:	
  3230                           ; 1 bytes @ 0x6
  3231                           
  3232  0026                     ___awdiv@sign:	
  3233                           ; 1 bytes @ 0x6
  3234                           
  3235                           
  3236                           ; 1 bytes @ 0x6
  3237  0026                     	ds	1
  3238  0027                     CC2500_InitSetREG@temp2:	
  3239  0027                     CC2500_InitPATable@loop_d:	
  3240                           ; 1 bytes @ 0x7
  3241                           
  3242  0027                     DelayTimejudge@j:	
  3243                           ; 1 bytes @ 0x7
  3244                           
  3245  0027                     ___awdiv@quotient:	
  3246                           ; 1 bytes @ 0x7
  3247                           
  3248                           
  3249                           ; 2 bytes @ 0x7
  3250  0027                     	ds	1
  3251  0028                     ?___awtoft:	
  3252  0028                     CC2500_InitSetREG@loop_c:	
  3253                           ; 3 bytes @ 0x8
  3254                           
  3255  0028                     DelayTimejudge@k:	
  3256                           ; 1 bytes @ 0x8
  3257                           
  3258  0028                     ___awtoft@c:	
  3259                           ; 1 bytes @ 0x8
  3260                           
  3261                           
  3262                           ; 2 bytes @ 0x8
  3263  0028                     	ds	1
  3264  0029                     ?_setBuz:	
  3265  0029                     ??_CC2500_PowerOnInitial:	
  3266                           ; 0 bytes @ 0x9
  3267                           
  3268  0029                     DelayTimejudge@value:	
  3269                           ; 0 bytes @ 0x9
  3270                           
  3271  0029                     setBuz@time:	
  3272                           ; 1 bytes @ 0x9
  3273                           
  3274                           
  3275                           ; 2 bytes @ 0x9
  3276  0029                     	ds	1
  3277  002A                     ?_setDelayOff_GO:	
  3278  002A                     setDelayOff_GO@command:	
  3279                           ; 0 bytes @ 0xA
  3280                           
  3281                           
  3282                           ; 1 bytes @ 0xA
  3283  002A                     	ds	1
  3284  002B                     ??_setBuz:	
  3285  002B                     ??___awtoft:	
  3286                           ; 0 bytes @ 0xB
  3287                           
  3288  002B                     setDelayOff_GO@value:	
  3289                           ; 0 bytes @ 0xB
  3290                           
  3291                           
  3292                           ; 1 bytes @ 0xB
  3293  002B                     	ds	1
  3294  002C                     ??_setDelayOff_GO:	
  3295  002C                     setBuz@count:	
  3296                           ; 0 bytes @ 0xC
  3297                           
  3298                           
  3299                           ; 1 bytes @ 0xC
  3300  002C                     	ds	1
  3301  002D                     ??_setLog_Code:	
  3302  002D                     ??_my_MainTime:	
  3303                           ; 0 bytes @ 0xD
  3304                           
  3305  002D                     ___awtoft@sign:	
  3306                           ; 0 bytes @ 0xD
  3307                           
  3308                           
  3309                           ; 1 bytes @ 0xD
  3310  002D                     	ds	1
  3311  002E                     ?___ftdiv:	
  3312  002E                     ?___ftmul:	
  3313                           ; 3 bytes @ 0xE
  3314                           
  3315  002E                     setDelayOff_GO@sw:	
  3316                           ; 3 bytes @ 0xE
  3317                           
  3318  002E                     ___ftdiv@f2:	
  3319                           ; 1 bytes @ 0xE
  3320                           
  3321  002E                     ___ftmul@f1:	
  3322                           ; 3 bytes @ 0xE
  3323                           
  3324                           
  3325                           ; 3 bytes @ 0xE
  3326  002E                     	ds	3
  3327  0031                     ___ftdiv@f1:	
  3328  0031                     ___ftmul@f2:	
  3329                           ; 3 bytes @ 0x11
  3330                           
  3331                           
  3332                           ; 3 bytes @ 0x11
  3333  0031                     	ds	3
  3334  0034                     ??___ftdiv:	
  3335  0034                     ??___ftmul:	
  3336                           ; 0 bytes @ 0x14
  3337                           
  3338                           
  3339                           ; 0 bytes @ 0x14
  3340  0034                     	ds	4
  3341  0038                     ___ftdiv@cntr:	
  3342  0038                     ___ftmul@exp:	
  3343                           ; 1 bytes @ 0x18
  3344                           
  3345                           
  3346                           ; 1 bytes @ 0x18
  3347  0038                     	ds	1
  3348  0039                     ___ftdiv@f3:	
  3349  0039                     ___ftmul@f3_as_product:	
  3350                           ; 3 bytes @ 0x19
  3351                           
  3352                           
  3353                           ; 3 bytes @ 0x19
  3354  0039                     	ds	3
  3355  003C                     ___ftdiv@exp:	
  3356  003C                     ___ftmul@cntr:	
  3357                           ; 1 bytes @ 0x1C
  3358                           
  3359                           
  3360                           ; 1 bytes @ 0x1C
  3361  003C                     	ds	1
  3362  003D                     ___ftdiv@sign:	
  3363  003D                     ___ftmul@sign:	
  3364                           ; 1 bytes @ 0x1D
  3365                           
  3366                           
  3367                           ; 1 bytes @ 0x1D
  3368  003D                     	ds	1
  3369  003E                     ?___ftadd:	
  3370  003E                     ___ftadd@f1:	
  3371                           ; 3 bytes @ 0x1E
  3372                           
  3373                           
  3374                           ; 3 bytes @ 0x1E
  3375  003E                     	ds	3
  3376  0041                     ___ftadd@f2:	
  3377                           
  3378                           ; 3 bytes @ 0x21
  3379  0041                     	ds	3
  3380  0044                     ??___ftadd:	
  3381                           
  3382                           ; 0 bytes @ 0x24
  3383  0044                     	ds	4
  3384  0048                     ___ftadd@sign:	
  3385                           
  3386                           ; 1 bytes @ 0x28
  3387  0048                     	ds	1
  3388  0049                     ___ftadd@exp2:	
  3389                           
  3390                           ; 1 bytes @ 0x29
  3391  0049                     	ds	1
  3392  004A                     ___ftadd@exp1:	
  3393                           
  3394                           ; 1 bytes @ 0x2A
  3395  004A                     	ds	1
  3396  004B                     ?___fttol:	
  3397  004B                     ___fttol@f1:	
  3398                           ; 4 bytes @ 0x2B
  3399                           
  3400                           
  3401                           ; 3 bytes @ 0x2B
  3402  004B                     	ds	4
  3403  004F                     ??___fttol:	
  3404                           
  3405                           ; 0 bytes @ 0x2F
  3406  004F                     	ds	4
  3407  0053                     ___fttol@sign1:	
  3408                           
  3409                           ; 1 bytes @ 0x33
  3410  0053                     	ds	1
  3411  0054                     ___fttol@lval:	
  3412                           
  3413                           ; 4 bytes @ 0x34
  3414  0054                     	ds	4
  3415  0058                     ___fttol@exp1:	
  3416                           
  3417                           ; 1 bytes @ 0x38
  3418  0058                     	ds	1
  3419  0059                     ??_getPercentValue:	
  3420  0059                     ??_setPercentValue:	
  3421                           ; 0 bytes @ 0x39
  3422                           
  3423  0059                     setPercentValue@value:	
  3424                           ; 0 bytes @ 0x39
  3425                           
  3426                           
  3427                           ; 1 bytes @ 0x39
  3428  0059                     	ds	1
  3429  005A                     setPercentValue@i:	
  3430                           
  3431                           ; 3 bytes @ 0x3A
  3432  005A                     	ds	1
  3433  005B                     getPercentValue@value:	
  3434                           
  3435                           ; 1 bytes @ 0x3B
  3436  005B                     	ds	1
  3437  005C                     getPercentValue@i:	
  3438                           
  3439                           ; 3 bytes @ 0x3C
  3440  005C                     	ds	1
  3441  005D                     ?_setRF_DimmerLights:	
  3442  005D                     ??_Flash_Memory_Initialization:	
  3443                           ; 0 bytes @ 0x3D
  3444                           
  3445  005D                     setRF_DimmerLights@on:	
  3446                           ; 0 bytes @ 0x3D
  3447                           
  3448                           
  3449                           ; 1 bytes @ 0x3D
  3450  005D                     	ds	1
  3451  005E                     ??_setRF_DimmerLights:	
  3452  005E                     Flash_Memory_Initialization@i:	
  3453                           ; 0 bytes @ 0x3E
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x3E
  3457  005E                     	ds	1
  3458  005F                     ??_setDimmerLights_AdjRF:	
  3459                           
  3460                           ; 0 bytes @ 0x3F
  3461  005F                     	ds	1
  3462  0060                     setDimmerLights_AdjRF@lights:	
  3463  0060                     setRF_DimmerLights@status:	
  3464                           ; 1 bytes @ 0x40
  3465                           
  3466                           
  3467                           ; 1 bytes @ 0x40
  3468  0060                     	ds	1
  3469  0061                     ??_setRF_DimmerValue:	
  3470  0061                     setRF_DimmerLights@lights:	
  3471                           ; 0 bytes @ 0x41
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0x41
  3475  0061                     	ds	1
  3476  0062                     ??_DlyOff_Main:	
  3477  0062                     ?_setDimmerLights_Adj:	
  3478                           ; 0 bytes @ 0x42
  3479                           
  3480  0062                     ??_setRFSW_Control:	
  3481                           ; 0 bytes @ 0x42
  3482                           
  3483  0062                     ??_Sw_DimmerOnFunc:	
  3484                           ; 0 bytes @ 0x42
  3485                           
  3486  0062                     ??_Sw_DimmerOffFunc:	
  3487                           ; 0 bytes @ 0x42
  3488                           
  3489  0062                     setDimmerLights_Adj@status:	
  3490                           ; 0 bytes @ 0x42
  3491                           
  3492  0062                     Sw_DimmerOnFunc@Idle:	
  3493                           ; 1 bytes @ 0x42
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x42
  3497  0062                     	ds	1
  3498  0063                     ??_setDimmerLights_Adj:	
  3499  0063                     setRFSW_Control@sw:	
  3500                           ; 0 bytes @ 0x43
  3501                           
  3502  0063                     setRF_DimmerValue@lights:	
  3503                           ; 1 bytes @ 0x43
  3504                           
  3505  0063                     Sw_DimmerOnFunc@sw:	
  3506                           ; 1 bytes @ 0x43
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0x43
  3510  0063                     	ds	1
  3511  0064                     ??_setRFSW_AdjControl:	
  3512  0064                     DlyOff_Main@sw:	
  3513                           ; 0 bytes @ 0x44
  3514                           
  3515  0064                     setDimmerLights_Adj@lights:	
  3516                           ; 1 bytes @ 0x44
  3517                           
  3518  0064                     Sw_DimmerOffFunc@sw:	
  3519                           ; 1 bytes @ 0x44
  3520                           
  3521                           
  3522                           ; 1 bytes @ 0x44
  3523  0064                     	ds	1
  3524  0065                     ??_setDimmerLights_Main:	
  3525  0065                     ??_setSw_Main:	
  3526                           ; 0 bytes @ 0x45
  3527                           
  3528  0065                     ??_DelayOff_Main:	
  3529                           ; 0 bytes @ 0x45
  3530                           
  3531  0065                     setDimmerLights_Main@clear:	
  3532                           ; 0 bytes @ 0x45
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x45
  3536  0065                     	ds	1
  3537  0066                     setDimmerLights_Main@lights:	
  3538  0066                     setRFSW_AdjControl@sw:	
  3539                           ; 1 bytes @ 0x46
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x46
  3543  0066                     	ds	1
  3544  0067                     ??_setRF_Main:	
  3545  0067                     ??_getRxData:	
  3546                           ; 0 bytes @ 0x47
  3547                           
  3548  0067                     ??_setControl_Lights_Table:	
  3549                           ; 0 bytes @ 0x47
  3550                           
  3551  0067                     ??_DimmerLights_Main:	
  3552                           ; 0 bytes @ 0x47
  3553                           
  3554  0067                     _setSw_Main$5462:	
  3555                           ; 0 bytes @ 0x47
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x47
  3559  0067                     	ds	1
  3560  0068                     _setRF_Main$4530:	
  3561  0068                     _setSw_Main$5463:	
  3562                           ; 1 bytes @ 0x48
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x48
  3566  0068                     	ds	1
  3567  0069                     ??_RF_Main:	
  3568  0069                     setSw_Main@sw:	
  3569                           ; 0 bytes @ 0x49
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x49
  3573  0069                     	ds	1
  3574  006A                     ??_Switch_Main:	
  3575  006A                     ?_main:	
  3576                           ; 0 bytes @ 0x4A
  3577                           
  3578  006A                     main@argc:	
  3579                           ; 2 bytes @ 0x4A
  3580                           
  3581                           
  3582                           ; 2 bytes @ 0x4A
  3583  006A                     	ds	2
  3584  006C                     main@argv:	
  3585                           
  3586                           ; 2 bytes @ 0x4C
  3587  006C                     	ds	2
  3588  006E                     ??_main:	
  3589                           
  3590                           	psect	maintext
  3591  165F                     __pmaintext:	
  3592                           ; 0 bytes @ 0x4E
  3593 ;;
  3594 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3595 ;;
  3596 ;; *************** function _main *****************
  3597 ;; Defined at:
  3598 ;;		line 7 in file "../src/main_B1.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  argc            2   74[BANK0 ] int 
  3601 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;		None
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  2   74[BANK0 ] int 
  3606 ;; Registers used:
  3607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 17F/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3613 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3616 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3617 ;;Total ram usage:        4 bytes
  3618 ;; Hardware stack levels required when called:   15
  3619 ;; This function calls:
  3620 ;;		_Buzzer_Initialization
  3621 ;;		_Buzzer_Main
  3622 ;;		_CC2500_PowerOnInitial
  3623 ;;		_DelayOff_Initialization
  3624 ;;		_DelayOff_Main
  3625 ;;		_DimmerLights_Initialization
  3626 ;;		_DimmerLights_Main
  3627 ;;		_Flash_Memory_Initialization
  3628 ;;		_Flash_Memory_Main
  3629 ;;		_LED_Initialization
  3630 ;;		_LED_Main
  3631 ;;		_Mcu_Initialization
  3632 ;;		_RF_Initialization
  3633 ;;		_RF_Main
  3634 ;;		_Switch_Initialization
  3635 ;;		_Switch_Main
  3636 ;;		_WDT_Main
  3637 ;;		_myMain_Initialization
  3638 ;;		_my_MainTime
  3639 ;; This function is called by:
  3640 ;;		Startup code after reset
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           
  3645                           ;psect for function _main
  3646  165F                     _main:	
  3647                           
  3648                           ;main_B1.c: 8: myMain_Initialization();
  3649                           
  3650                           ;incstack = 0
  3651                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3652  165F  3191  211E  3196   	fcall	_myMain_Initialization
  3653                           
  3654                           ;main_B1.c: 9: Mcu_Initialization();
  3655  1662  3192  2278  3196   	fcall	_Mcu_Initialization
  3656                           
  3657                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3658  1665  3184  24C6  3196   	fcall	_Flash_Memory_Initialization
  3659                           
  3660                           ;main_B1.c: 11: LED_Initialization();
  3661  1668  3190  2098  3196   	fcall	_LED_Initialization
  3662                           
  3663                           ;main_B1.c: 12: Buzzer_Initialization();
  3664  166B  319F  2764  3196   	fcall	_Buzzer_Initialization
  3665                           
  3666                           ;main_B1.c: 14: ;;
  3667                           ;main_B1.c: 15: ;;
  3668                           ;main_B1.c: 16: ;;
  3669                           ;main_B1.c: 17: ;;
  3670                           ;main_B1.c: 18: DelayOff_Initialization();
  3671  166E  319F  27A6  3196   	fcall	_DelayOff_Initialization
  3672                           
  3673                           ;main_B1.c: 20: DimmerLights_Initialization();
  3674  1671  3192  22B9  3196   	fcall	_DimmerLights_Initialization
  3675                           
  3676                           ;main_B1.c: 21: ;;
  3677                           ;main_B1.c: 22: ;;
  3678                           ;main_B1.c: 23: ;;
  3679                           ;main_B1.c: 24: Switch_Initialization();
  3680  1674  3190  20D6  3196   	fcall	_Switch_Initialization
  3681                           
  3682                           ;main_B1.c: 25: RF_Initialization();
  3683  1677  319F  2767  3196   	fcall	_RF_Initialization
  3684                           
  3685                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3686  167A  3192  2263  3196   	fcall	_CC2500_PowerOnInitial
  3687  167D                     l2590:	
  3688                           ;main_B1.c: 27: ;;
  3689                           ;main_B1.c: 29: while (1) {
  3690                           
  3691                           
  3692                           ;main_B1.c: 56: }
  3693                           ;main_B1.c: 92: if (myMain.T1_Timerout == 1) {
  3694  167D  0021               	movlb	1	; select bank1
  3695  167E  1D20               	btfss	_myMain^(0+128),2
  3696  167F  2E7D               	goto	l2590
  3697                           
  3698                           ;main_B1.c: 93: myMain.T1_Timerout = 0;
  3699  1680  1120               	bcf	_myMain^(0+128),2
  3700                           
  3701                           ;main_B1.c: 94: my_MainTime();
  3702  1681  3188  209E  3196   	fcall	_my_MainTime
  3703                           
  3704                           ;main_B1.c: 95: WDT_Main();
  3705  1684  3191  21C5  3196   	fcall	_WDT_Main
  3706                           
  3707                           ;main_B1.c: 96: ;;
  3708                           ;main_B1.c: 97: ;;
  3709                           ;main_B1.c: 98: if (myMain.PowerON) {
  3710  1687  0021               	movlb	1	; select bank1
  3711  1688  1C20               	btfss	_myMain^(0+128),0
  3712  1689  2E7D               	goto	l2590
  3713                           
  3714                           ;main_B1.c: 99: Flash_Memory_Main();
  3715  168A  3193  236E  3196   	fcall	_Flash_Memory_Main
  3716                           
  3717                           ;main_B1.c: 101: LED_Main();
  3718  168D  3190  20A4  3196   	fcall	_LED_Main
  3719                           
  3720                           ;main_B1.c: 102: Buzzer_Main();
  3721  1690  3188  2000  3196   	fcall	_Buzzer_Main
  3722                           
  3723                           ;main_B1.c: 104: ;;
  3724                           ;main_B1.c: 105: ;;
  3725                           ;main_B1.c: 106: ;;
  3726                           ;main_B1.c: 107: ;;
  3727                           ;main_B1.c: 109: ;;
  3728                           ;main_B1.c: 110: DimmerLights_Main();
  3729  1693  319F  27F5  3196   	fcall	_DimmerLights_Main
  3730                           
  3731                           ;main_B1.c: 111: Switch_Main();
  3732  1696  319F  27C6  3196   	fcall	_Switch_Main
  3733                           
  3734                           ;main_B1.c: 112: ;;
  3735                           ;main_B1.c: 113: ;;
  3736                           ;main_B1.c: 115: RF_Main();
  3737  1699  319F  276A  3196   	fcall	_RF_Main
  3738                           
  3739                           ;main_B1.c: 116: DelayOff_Main();
  3740  169C  319F  27AE  3196   	fcall	_DelayOff_Main
  3741                           
  3742                           ;main_B1.c: 117: ;;
  3743  169F  2E7D               	goto	l2590
  3744  16A0                     __end_of_main:	
  3745                           ;main_B1.c: 125: }
  3746                           ;main_B1.c: 126: }
  3747                           ;main_B1.c: 160: }
  3748                           ;main_B1.c: 161: return (0);
  3749                           ;	Return value of _main is never used
  3750                           
  3751                           
  3752                           	psect	text1
  3753  089E                     __ptext1:	
  3754 ;; *************** function _my_MainTime *****************
  3755 ;; Defined at:
  3756 ;;		line 180 in file "../src/main_B1.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    7
  3777 ;; This function calls:
  3778 ;;		_setBuz
  3779 ;;		_setRF_Enable
  3780 ;;		_setSw_Enable
  3781 ;; This function is called by:
  3782 ;;		_main
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           
  3787                           ;psect for function _my_MainTime
  3788  089E                     _my_MainTime:	
  3789                           
  3790                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3794  089E  0021               	movlb	1	; select bank1
  3795  089F  1820               	btfsc	_myMain^(0+128),0
  3796  08A0  28C8               	goto	l7230
  3797                           
  3798                           ;main_B1.c: 183: myMain.PowerCount++;
  3799  08A1  3001               	movlw	1
  3800  08A2  07A2               	addwf	(_myMain^(0+128)+2),f
  3801  08A3  3000               	movlw	0
  3802  08A4  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3803                           
  3804                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  3805  08A5  3002               	movlw	2
  3806  08A6  3EA0               	addlw	_myMain& (0+255)
  3807  08A7  0086               	movwf	6
  3808  08A8  0187               	clrf	7
  3809  08A9  3F40               	moviw [0]fsr1
  3810  08AA  3A96               	xorlw	150
  3811  08AB  1D03               	skipz
  3812  08AC  28AF               	goto	u6805
  3813  08AD  3F41               	moviw [1]fsr1
  3814  08AE  3A00               	xorlw	0
  3815  08AF                     u6805:	
  3816  08AF  1D03               	skipz
  3817  08B0  28E0               	goto	l7240
  3818                           
  3819                           ;main_B1.c: 185: {
  3820                           ;main_B1.c: 186: myMain.PowerCount = 0;
  3821  08B1  01A2               	clrf	(_myMain^(0+128)+2)
  3822  08B2  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3823                           
  3824                           ;main_B1.c: 187: myMain.PowerON = 1;
  3825  08B3  1420               	bsf	_myMain^(0+128),0
  3826                           
  3827                           ;main_B1.c: 190: ;;
  3828                           ;main_B1.c: 194: ;;
  3829                           ;main_B1.c: 200: setBuz(3, 50);
  3830  08B4  3032               	movlw	50
  3831  08B5  0020               	movlb	0	; select bank0
  3832  08B6  00A9               	movwf	setBuz@time
  3833  08B7  3000               	movlw	0
  3834  08B8  00AA               	movwf	setBuz@time+1
  3835  08B9  3003               	movlw	3
  3836  08BA  3187  27A7  3188   	fcall	_setBuz
  3837                           
  3838                           ;main_B1.c: 201: myMain.SelfTest = 1;
  3839  08BD  0021               	movlb	1	; select bank1
  3840  08BE  17A0               	bsf	_myMain^(0+128),7
  3841                           
  3842                           ;main_B1.c: 203: setSw_Enable(1);
  3843  08BF  3001               	movlw	1
  3844  08C0  3193  2333  3188   	fcall	_setSw_Enable
  3845                           
  3846                           ;main_B1.c: 206: setRF_Enable(1);
  3847  08C3  3001               	movlw	1
  3848  08C4  3190  20E3  3188   	fcall	_setRF_Enable
  3849                           
  3850                           ;main_B1.c: 210: }
  3851                           ;main_B1.c: 211: } else {
  3852  08C7  28E0               	goto	l7240
  3853  08C8                     l7230:	
  3854                           
  3855                           ;main_B1.c: 219: myMain.Count1++;
  3856  08C8  3001               	movlw	1
  3857  08C9  0021               	movlb	1	; select bank1
  3858  08CA  07A6               	addwf	(_myMain^(0+128)+6),f
  3859  08CB  3000               	movlw	0
  3860  08CC  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3861                           
  3862                           ;main_B1.c: 220: if (myMain.Count1 == 100)
  3863  08CD  3006               	movlw	6
  3864  08CE  3EA0               	addlw	_myMain& (0+255)
  3865  08CF  0086               	movwf	6
  3866  08D0  0187               	clrf	7
  3867  08D1  3F40               	moviw [0]fsr1
  3868  08D2  3A64               	xorlw	100
  3869  08D3  1D03               	skipz
  3870  08D4  28D7               	goto	u6815
  3871  08D5  3F41               	moviw [1]fsr1
  3872  08D6  3A00               	xorlw	0
  3873  08D7                     u6815:	
  3874  08D7  1D03               	skipz
  3875  08D8  28E0               	goto	l7240
  3876                           
  3877                           ;main_B1.c: 221: {
  3878                           ;main_B1.c: 222: myMain.Count1 = 0;
  3879  08D9  01A6               	clrf	(_myMain^(0+128)+6)
  3880  08DA  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3881                           
  3882                           ;main_B1.c: 234: if (myMain.Flag) {
  3883  08DB  1E20               	btfss	_myMain^(0+128),4
  3884  08DC  28DF               	goto	l2605
  3885                           
  3886                           ;main_B1.c: 235: myMain.Flag = 0;
  3887  08DD  1220               	bcf	_myMain^(0+128),4
  3888                           
  3889                           ;main_B1.c: 244: } else {
  3890  08DE  28E0               	goto	l7240
  3891  08DF                     l2605:	
  3892                           
  3893                           ;main_B1.c: 245: myMain.Flag = 1;
  3894  08DF  1620               	bsf	_myMain^(0+128),4
  3895  08E0                     l7240:	
  3896                           
  3897                           ;main_B1.c: 254: }
  3898                           ;main_B1.c: 255: }
  3899                           ;main_B1.c: 257: }
  3900                           ;main_B1.c: 259: myMain.Count2++;
  3901  08E0  3001               	movlw	1
  3902  08E1  0021               	movlb	1	; select bank1
  3903  08E2  07A8               	addwf	(_myMain^(0+128)+8),f
  3904  08E3  3000               	movlw	0
  3905  08E4  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  3906                           
  3907                           ;main_B1.c: 260: if (myMain.Count2 == 50) {
  3908  08E5  3008               	movlw	8
  3909  08E6  3EA0               	addlw	_myMain& (0+255)
  3910  08E7  0086               	movwf	6
  3911  08E8  0187               	clrf	7
  3912  08E9  3F40               	moviw [0]fsr1
  3913  08EA  3A32               	xorlw	50
  3914  08EB  1D03               	skipz
  3915  08EC  28EF               	goto	u6835
  3916  08ED  3F41               	moviw [1]fsr1
  3917  08EE  3A00               	xorlw	0
  3918  08EF                     u6835:	
  3919  08EF  1D03               	skipz
  3920  08F0  0008               	return
  3921                           
  3922                           ;main_B1.c: 261: myMain.Count2 = 0;
  3923  08F1  01A8               	clrf	(_myMain^(0+128)+8)
  3924  08F2  01A9               	clrf	((_myMain+1)^(0+128)+8)
  3925  08F3  0008               	return
  3926  08F4                     __end_of_my_MainTime:	
  3927                           
  3928                           	psect	text2
  3929  1333                     __ptext2:	
  3930 ;; *************** function _setSw_Enable *****************
  3931 ;; Defined at:
  3932 ;;		line 91 in file "../src/Switch_B1.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  command         1    wreg     unsigned char 
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;  command         1    2[BANK0 ] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;		None               void
  3939 ;; Registers used:
  3940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3949 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;Total ram usage:        1 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    6
  3953 ;; This function calls:
  3954 ;;		_SwPointSelect
  3955 ;; This function is called by:
  3956 ;;		_my_MainTime
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _setSw_Enable
  3962  1333                     _setSw_Enable:	
  3963                           
  3964                           ;incstack = 0
  3965                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3966                           ;setSw_Enable@command stored from wreg
  3967  1333  0020               	movlb	0	; select bank0
  3968  1334  00A2               	movwf	setSw_Enable@command
  3969                           
  3970                           ;Switch_B1.c: 94: SwPointSelect(1);
  3971  1335  3001               	movlw	1
  3972  1336  3192  2226  3193   	fcall	_SwPointSelect
  3973                           
  3974                           ;Switch_B1.c: 95: Sw->Enable = command;
  3975  1339  0020               	movlb	0	; select bank0
  3976  133A  086F               	movf	_Sw,w
  3977  133B  0086               	movwf	6
  3978  133C  3001               	movlw	1	; select bank2/3
  3979  133D  0087               	movwf	7
  3980  133E  0822               	movf	setSw_Enable@command,w
  3981  133F  1001               	bcf	1,0
  3982  1340  1D03               	skipz
  3983  1341  1401               	bsf	1,0
  3984                           
  3985                           ;Switch_B1.c: 99: SwPointSelect(2);
  3986  1342  3002               	movlw	2
  3987  1343  3192  2226         	fcall	_SwPointSelect
  3988                           
  3989                           ;Switch_B1.c: 100: Sw->Enable = command;
  3990  1345  0020               	movlb	0	; select bank0
  3991  1346  086F               	movf	_Sw,w
  3992  1347  0086               	movwf	6
  3993  1348  3001               	movlw	1	; select bank2/3
  3994  1349  0087               	movwf	7
  3995  134A  0822               	movf	setSw_Enable@command,w
  3996  134B  1001               	bcf	1,0
  3997  134C  1D03               	skipz
  3998  134D  1401               	bsf	1,0
  3999  134E  0008               	return
  4000  134F                     __end_of_setSw_Enable:	
  4001                           
  4002                           	psect	text3
  4003  10E3                     __ptext3:	
  4004 ;; *************** function _setRF_Enable *****************
  4005 ;; Defined at:
  4006 ;;		line 227 in file "../src/RF_Control_B1.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  command         1    wreg     unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  command         1    0[BANK0 ] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;		None               void
  4013 ;; Registers used:
  4014 ;;		wreg, status,2
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;Total ram usage:        1 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    5
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_my_MainTime
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _setRF_Enable
  4036  10E3                     _setRF_Enable:	
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4040                           ;setRF_Enable@command stored from wreg
  4041  10E3  0020               	movlb	0	; select bank0
  4042  10E4  00A0               	movwf	setRF_Enable@command
  4043                           
  4044                           ;RF_Control_B1.c: 228: RF1.Enable = command;
  4045  10E5  0820               	movf	setRF_Enable@command,w
  4046  10E6  0021               	movlb	1	; select bank1
  4047  10E7  103F               	bcf	_RF1^(0+128),0
  4048  10E8  1D03               	skipz
  4049  10E9  143F               	bsf	_RF1^(0+128),0
  4050                           
  4051                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
  4052  10EA  133F               	bcf	_RF1^(0+128),6
  4053                           
  4054                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
  4055  10EB  113F               	bcf	_RF1^(0+128),2
  4056                           
  4057                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
  4058  10EC  11BF               	bcf	_RF1^(0+128),3
  4059                           
  4060                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
  4061  10ED  10BF               	bcf	_RF1^(0+128),1
  4062                           
  4063                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
  4064  10EE  01C8               	clrf	(_RF1^(0+128)+9)
  4065                           
  4066                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
  4067  10EF  12BF               	bcf	_RF1^(0+128),5
  4068  10F0  0008               	return
  4069  10F1                     __end_of_setRF_Enable:	
  4070                           
  4071                           	psect	text4
  4072  111E                     __ptext4:	
  4073 ;; *************** function _myMain_Initialization *****************
  4074 ;; Defined at:
  4075 ;;		line 167 in file "../src/main_B1.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;		None
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, fsr1l, fsr1h
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;Total ram usage:        1 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    5
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _myMain_Initialization
  4105  111E                     _myMain_Initialization:	
  4106                           
  4107                           ;main_B1.c: 169: product = &_product;
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4111  111E  30C5               	movlw	__product& (0+255)
  4112  111F  0020               	movlb	0	; select bank0
  4113  1120  00A0               	movwf	??_myMain_Initialization
  4114  1121  0820               	movf	??_myMain_Initialization,w
  4115  1122  00EE               	movwf	_product
  4116                           
  4117                           ;main_B1.c: 170: product->Data[20] = 210;
  4118  1123  30D2               	movlw	210
  4119  1124  00A0               	movwf	??_myMain_Initialization
  4120  1125  086E               	movf	_product,w
  4121  1126  3E14               	addlw	20
  4122  1127  0086               	movwf	6
  4123  1128  3001               	movlw	1	; select bank2/3
  4124  1129  0087               	movwf	7
  4125  112A  0820               	movf	??_myMain_Initialization,w
  4126  112B  0081               	movwf	1
  4127  112C  0008               	return
  4128  112D                     __end_of_myMain_Initialization:	
  4129                           
  4130                           	psect	text5
  4131  11C5                     __ptext5:	
  4132 ;; *************** function _WDT_Main *****************
  4133 ;; Defined at:
  4134 ;;		line 1019 in file "../src/MCU_B1.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, pclath, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;Total ram usage:        1 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    6
  4155 ;; This function calls:
  4156 ;;		_WDT_Clearing
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _WDT_Main
  4164  11C5                     _WDT_Main:	
  4165                           
  4166                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4170  11C5  0021               	movlb	1	; select bank1
  4171  11C6  1C52               	btfss	_WDT^(0+128),0
  4172  11C7  0008               	return
  4173                           
  4174                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4175  11C8  3001               	movlw	1
  4176  11C9  02D3               	subwf	(_WDT^(0+128)+1),f
  4177  11CA  0853               	movf	(_WDT^(0+128)+1),w
  4178  11CB  3AFF               	xorlw	255
  4179  11CC  1903               	skipnz
  4180  11CD  0008               	return
  4181                           
  4182                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4183  11CE  3064               	movlw	100
  4184  11CF  0020               	movlb	0	; select bank0
  4185  11D0  00A0               	movwf	??_WDT_Main
  4186  11D1  0820               	movf	??_WDT_Main,w
  4187  11D2  0021               	movlb	1	; select bank1
  4188  11D3  00D3               	movwf	(_WDT^(0+128)+1)
  4189                           
  4190                           ;MCU_B1.c: 1023: WDT_Clearing();
  4191  11D4  3180  2002         	fcall	_WDT_Clearing
  4192  11D6  0008               	return
  4193  11D7                     __end_of_WDT_Main:	
  4194                           
  4195                           	psect	text6
  4196  0002                     __ptext6:	
  4197 ;; *************** function _WDT_Clearing *****************
  4198 ;; Defined at:
  4199 ;;		line 1029 in file "../src/MCU_B1.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;		None               void
  4206 ;; Registers used:
  4207 ;;		None
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    5
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_WDT_Main
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _WDT_Clearing
  4229  0002                     _WDT_Clearing:	
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _WDT_Clearing: []
  4233  0002  0064               	clrwdt	;# 
  4234  0003  0008               	return
  4235  0004                     __end_of_WDT_Clearing:	
  4236                           
  4237                           	psect	text7
  4238  1FC6                     __ptext7:	
  4239 ;; *************** function _Switch_Main *****************
  4240 ;; Defined at:
  4241 ;;		line 67 in file "../src/Switch_B1.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;		None               void
  4248 ;; Registers used:
  4249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;Total ram usage:        0 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:   11
  4262 ;; This function calls:
  4263 ;;		_setSw_Main
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           
  4270                           ;psect for function _Switch_Main
  4271  1FC6                     _Switch_Main:	
  4272                           
  4273                           ;Switch_B1.c: 69: setSw_Main(1);
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4277  1FC6  3001               	movlw	1
  4278  1FC7  3181  21A7  319F   	fcall	_setSw_Main
  4279                           
  4280                           ;Switch_B1.c: 73: setSw_Main(2);
  4281  1FCA  3002               	movlw	2
  4282  1FCB  3181  21A7         	fcall	_setSw_Main
  4283  1FCD  0008               	return
  4284  1FCE                     __end_of_Switch_Main:	
  4285                           
  4286                           	psect	text8
  4287  01A7                     __ptext8:	
  4288 ;; *************** function _setSw_Main *****************
  4289 ;; Defined at:
  4290 ;;		line 117 in file "../src/Switch_B1.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  sw              1    wreg     unsigned char 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  sw              1   73[BANK0 ] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;		None               void
  4297 ;; Registers used:
  4298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4305 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4306 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;Total ram usage:        5 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:   10
  4311 ;; This function calls:
  4312 ;;		_SwPointSelect
  4313 ;;		_Sw_DimmerAdjFunc
  4314 ;;		_Sw_DimmerOffFunc
  4315 ;;		_Sw_DimmerOnFunc
  4316 ;;		_setBuz
  4317 ;;		_setRF_Learn
  4318 ;; This function is called by:
  4319 ;;		_Switch_Main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _setSw_Main
  4325  01A7                     _setSw_Main:	
  4326                           
  4327                           ;incstack = 0
  4328                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4329                           ;setSw_Main@sw stored from wreg
  4330  01A7  0020               	movlb	0	; select bank0
  4331  01A8  00E9               	movwf	setSw_Main@sw
  4332                           
  4333                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4334  01A9  0869               	movf	setSw_Main@sw,w
  4335  01AA  3192  2226  3181   	fcall	_SwPointSelect
  4336                           
  4337                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4338  01AD  0020               	movlb	0	; select bank0
  4339  01AE  086F               	movf	_Sw,w
  4340  01AF  0086               	movwf	6
  4341  01B0  3001               	movlw	1	; select bank2/3
  4342  01B1  0087               	movwf	7
  4343  01B2  1C01               	btfss	1,0
  4344  01B3  0008               	return
  4345                           
  4346                           ;Switch_B1.c: 131: if (sw == 1) {
  4347  01B4  0869               	movf	setSw_Main@sw,w
  4348  01B5  3A01               	xorlw	1
  4349  01B6  1D03               	skipz
  4350  01B7  29C4               	goto	l6936
  4351                           
  4352                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  4353  01B8  01E7               	clrf	_setSw_Main$5462
  4354  01B9  0AE7               	incf	_setSw_Main$5462,f
  4355  01BA  1F0C               	btfss	12,6	;volatile
  4356  01BB  1A0C               	btfsc	12,4	;volatile
  4357  01BC  29BE               	goto	l6934
  4358  01BD  01E7               	clrf	_setSw_Main$5462
  4359  01BE                     l6934:	
  4360  01BE  086F               	movf	_Sw,w
  4361  01BF  0086               	movwf	6
  4362  01C0  3001               	movlw	1	; select bank2/3
  4363  01C1  0087               	movwf	7
  4364  01C2  0867               	movf	_setSw_Main$5462,w
  4365  01C3  29D3               	goto	L1
  4366  01C4                     l6936:	
  4367                           ;Switch_B1.c: 133: } else if (sw == 2) {
  4368                           
  4369  01C4  0869               	movf	setSw_Main@sw,w
  4370  01C5  3A02               	xorlw	2
  4371  01C6  1D03               	skipz
  4372  01C7  29D6               	goto	l6946
  4373                           
  4374                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  4375  01C8  01E8               	clrf	_setSw_Main$5463
  4376  01C9  0AE8               	incf	_setSw_Main$5463,f
  4377  01CA  1C0C               	btfss	12,0	;volatile
  4378  01CB  188D               	btfsc	13,1	;volatile
  4379  01CC  29CE               	goto	l6944
  4380  01CD  01E8               	clrf	_setSw_Main$5463
  4381  01CE                     l6944:	
  4382  01CE  086F               	movf	_Sw,w
  4383  01CF  0086               	movwf	6
  4384  01D0  3001               	movlw	1	; select bank2/3
  4385  01D1  0087               	movwf	7
  4386  01D2  0868               	movf	_setSw_Main$5463,w
  4387  01D3                     L1:	
  4388  01D3  1081               	bcf	1,1
  4389  01D4  1D03               	skipz
  4390  01D5  1481               	bsf	1,1
  4391  01D6                     l6946:	
  4392                           
  4393                           ;Switch_B1.c: 135: }
  4394                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4395  01D6  086F               	movf	_Sw,w
  4396  01D7  0086               	movwf	6
  4397  01D8  3001               	movlw	1	; select bank2/3
  4398  01D9  0087               	movwf	7
  4399  01DA  1C81               	btfss	1,1
  4400  01DB  2AA0               	goto	l6994
  4401                           
  4402                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4403  01DC  086F               	movf	_Sw,w
  4404  01DD  0086               	movwf	6
  4405  01DE  3001               	movlw	1	; select bank2/3
  4406  01DF  0087               	movwf	7
  4407  01E0  1901               	btfsc	1,2
  4408  01E1  2A03               	goto	l6960
  4409                           
  4410                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4411  01E2  3001               	movlw	1
  4412  01E3  00E5               	movwf	??_setSw_Main
  4413  01E4  086F               	movf	_Sw,w
  4414  01E5  3E02               	addlw	2
  4415  01E6  0086               	movwf	6
  4416  01E7  3001               	movlw	1	; select bank2/3
  4417  01E8  0087               	movwf	7
  4418  01E9  0865               	movf	??_setSw_Main,w
  4419  01EA  0781               	addwf	1,f
  4420                           
  4421                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4422  01EB  086F               	movf	_Sw,w
  4423  01EC  3E02               	addlw	2
  4424  01ED  0086               	movwf	6
  4425  01EE  3001               	movlw	1	; select bank2/3
  4426  01EF  0087               	movwf	7
  4427  01F0  3005               	movlw	5
  4428  01F1  0201               	subwf	1,w
  4429  01F2  1C03               	skipc
  4430  01F3  0008               	return
  4431                           
  4432                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4433  01F4  086F               	movf	_Sw,w
  4434  01F5  3E02               	addlw	2
  4435  01F6  0086               	movwf	6
  4436  01F7  3001               	movlw	1	; select bank2/3
  4437  01F8  0087               	movwf	7
  4438  01F9  0181               	clrf	1
  4439                           
  4440                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4441  01FA  086F               	movf	_Sw,w
  4442  01FB  0086               	movwf	6
  4443  01FC  3001               	movlw	1	; select bank2/3
  4444  01FD  0087               	movwf	7
  4445  01FE  1501               	bsf	1,2
  4446                           
  4447                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4448  01FF  0869               	movf	setSw_Main@sw,w
  4449  0200  318D  2566         	fcall	_Sw_DimmerOnFunc
  4450                           
  4451                           ;Switch_B1.c: 173: }
  4452                           ;Switch_B1.c: 174: } else {
  4453  0202  0008               	return
  4454  0203                     l6960:	
  4455                           
  4456                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4457  0203  0020               	movlb	0	; select bank0
  4458  0204  086F               	movf	_Sw,w
  4459  0205  0086               	movwf	6
  4460  0206  3001               	movlw	1	; select bank2/3
  4461  0207  0087               	movwf	7
  4462  0208  1981               	btfsc	1,3
  4463  0209  2A30               	goto	l6970
  4464                           
  4465                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4466  020A  086F               	movf	_Sw,w
  4467  020B  3E03               	addlw	3
  4468  020C  0086               	movwf	6
  4469  020D  3001               	movlw	1	; select bank2/3
  4470  020E  0087               	movwf	7
  4471  020F  3001               	movlw	1
  4472  0210  0781               	addwf	1,f
  4473  0211  3141               	addfsr 1,1
  4474  0212  1803               	skipnc
  4475  0213  0A81               	incf	1,f
  4476                           
  4477                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4478  0214  086F               	movf	_Sw,w
  4479  0215  3E03               	addlw	3
  4480  0216  0086               	movwf	6
  4481  0217  3001               	movlw	1	; select bank2/3
  4482  0218  0087               	movwf	7
  4483  0219  3F40               	moviw [0]fsr1
  4484  021A  00E5               	movwf	??_setSw_Main
  4485  021B  3F41               	moviw [1]fsr1
  4486  021C  00E6               	movwf	??_setSw_Main+1
  4487  021D  3000               	movlw	0
  4488  021E  0266               	subwf	??_setSw_Main+1,w
  4489  021F  3096               	movlw	150
  4490  0220  1903               	skipnz
  4491  0221  0265               	subwf	??_setSw_Main,w
  4492  0222  1C03               	skipc
  4493  0223  0008               	return
  4494                           
  4495                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4496  0224  086F               	movf	_Sw,w
  4497  0225  3E03               	addlw	3
  4498  0226  0086               	movwf	6
  4499  0227  3001               	movlw	1	; select bank2/3
  4500  0228  0087               	movwf	7
  4501  0229  3000               	movlw	0
  4502  022A  3FC0               	movwi [0]fsr1
  4503  022B  3FC1               	movwi [1]fsr1
  4504                           
  4505                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4506  022C  0869               	movf	setSw_Main@sw,w
  4507  022D  3197  27B4         	fcall	_Sw_DimmerAdjFunc
  4508                           
  4509                           ;Switch_B1.c: 184: }
  4510                           ;Switch_B1.c: 185: } else {
  4511  022F  0008               	return
  4512  0230                     l6970:	
  4513                           
  4514                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4515  0230  0020               	movlb	0	; select bank0
  4516  0231  086F               	movf	_Sw,w
  4517  0232  0086               	movwf	6
  4518  0233  3001               	movlw	1	; select bank2/3
  4519  0234  0087               	movwf	7
  4520  0235  1A01               	btfsc	1,4
  4521  0236  2A6E               	goto	l6984
  4522                           
  4523                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4524  0237  086F               	movf	_Sw,w
  4525  0238  3E05               	addlw	5
  4526  0239  0086               	movwf	6
  4527  023A  3001               	movlw	1	; select bank2/3
  4528  023B  0087               	movwf	7
  4529  023C  3001               	movlw	1
  4530  023D  0781               	addwf	1,f
  4531  023E  3141               	addfsr 1,1
  4532  023F  1803               	skipnc
  4533  0240  0A81               	incf	1,f
  4534                           
  4535                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4536  0241  086F               	movf	_Sw,w
  4537  0242  3E05               	addlw	5
  4538  0243  0086               	movwf	6
  4539  0244  3001               	movlw	1	; select bank2/3
  4540  0245  0087               	movwf	7
  4541  0246  3F40               	moviw [0]fsr1
  4542  0247  00E5               	movwf	??_setSw_Main
  4543  0248  3F41               	moviw [1]fsr1
  4544  0249  00E6               	movwf	??_setSw_Main+1
  4545  024A  3000               	movlw	0
  4546  024B  0266               	subwf	??_setSw_Main+1,w
  4547  024C  3096               	movlw	150
  4548  024D  1903               	skipnz
  4549  024E  0265               	subwf	??_setSw_Main,w
  4550  024F  1C03               	skipc
  4551  0250  0008               	return
  4552                           
  4553                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4554  0251  086F               	movf	_Sw,w
  4555  0252  3E05               	addlw	5
  4556  0253  0086               	movwf	6
  4557  0254  3001               	movlw	1	; select bank2/3
  4558  0255  0087               	movwf	7
  4559  0256  3000               	movlw	0
  4560  0257  3FC0               	movwi [0]fsr1
  4561  0258  3FC1               	movwi [1]fsr1
  4562                           
  4563                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4564  0259  086F               	movf	_Sw,w
  4565  025A  0086               	movwf	6
  4566  025B  3001               	movlw	1	; select bank2/3
  4567  025C  0087               	movwf	7
  4568  025D  1601               	bsf	1,4
  4569                           
  4570                           ;Switch_B1.c: 193: setRF_Learn(1);
  4571  025E  3001               	movlw	1
  4572  025F  319F  27BE  3181   	fcall	_setRF_Learn
  4573                           
  4574                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4575  0262  0021               	movlb	1	; select bank1
  4576  0263  1C21               	btfss	(_myMain^(0+128)+1),0
  4577  0264  0008               	return
  4578                           
  4579                           ;Switch_B1.c: 196: setBuz(2, 100);
  4580  0265  3064               	movlw	100
  4581  0266  0020               	movlb	0	; select bank0
  4582  0267  00A9               	movwf	setBuz@time
  4583  0268  3000               	movlw	0
  4584  0269  00AA               	movwf	setBuz@time+1
  4585  026A  3002               	movlw	2
  4586  026B  3187  27A7         	fcall	_setBuz
  4587                           
  4588                           ;Switch_B1.c: 197: }
  4589                           ;Switch_B1.c: 199: }
  4590                           ;Switch_B1.c: 200: } else {
  4591  026D  0008               	return
  4592  026E                     l6984:	
  4593                           
  4594                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4595  026E  0020               	movlb	0	; select bank0
  4596  026F  086F               	movf	_Sw,w
  4597  0270  0086               	movwf	6
  4598  0271  3001               	movlw	1	; select bank2/3
  4599  0272  0087               	movwf	7
  4600  0273  1A81               	btfsc	1,5
  4601  0274  0008               	return
  4602                           
  4603                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4604  0275  086F               	movf	_Sw,w
  4605  0276  3E07               	addlw	7
  4606  0277  0086               	movwf	6
  4607  0278  3001               	movlw	1	; select bank2/3
  4608  0279  0087               	movwf	7
  4609  027A  3001               	movlw	1
  4610  027B  0781               	addwf	1,f
  4611  027C  3141               	addfsr 1,1
  4612  027D  1803               	skipnc
  4613  027E  0A81               	incf	1,f
  4614                           
  4615                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4616  027F  086F               	movf	_Sw,w
  4617  0280  3E07               	addlw	7
  4618  0281  0086               	movwf	6
  4619  0282  3001               	movlw	1	; select bank2/3
  4620  0283  0087               	movwf	7
  4621  0284  3F40               	moviw [0]fsr1
  4622  0285  00E5               	movwf	??_setSw_Main
  4623  0286  3F41               	moviw [1]fsr1
  4624  0287  00E6               	movwf	??_setSw_Main+1
  4625  0288  3001               	movlw	1
  4626  0289  0266               	subwf	??_setSw_Main+1,w
  4627  028A  302C               	movlw	44
  4628  028B  1903               	skipnz
  4629  028C  0265               	subwf	??_setSw_Main,w
  4630  028D  1C03               	skipc
  4631  028E  0008               	return
  4632                           
  4633                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4634  028F  086F               	movf	_Sw,w
  4635  0290  3E07               	addlw	7
  4636  0291  0086               	movwf	6
  4637  0292  3001               	movlw	1	; select bank2/3
  4638  0293  0087               	movwf	7
  4639  0294  3000               	movlw	0
  4640  0295  3FC0               	movwi [0]fsr1
  4641  0296  3FC1               	movwi [1]fsr1
  4642                           
  4643                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4644  0297  086F               	movf	_Sw,w
  4645  0298  0086               	movwf	6
  4646  0299  3001               	movlw	1	; select bank2/3
  4647  029A  0087               	movwf	7
  4648  029B  1681               	bsf	1,5
  4649                           
  4650                           ;Switch_B1.c: 208: setRF_Learn(0);
  4651  029C  3000               	movlw	0
  4652  029D  319F  27BE         	fcall	_setRF_Learn
  4653                           
  4654                           ;Switch_B1.c: 211: }
  4655                           ;Switch_B1.c: 212: }
  4656                           ;Switch_B1.c: 213: }
  4657                           ;Switch_B1.c: 214: }
  4658                           ;Switch_B1.c: 215: }
  4659                           ;Switch_B1.c: 216: } else {
  4660  029F  0008               	return
  4661  02A0                     l6994:	
  4662                           
  4663                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4664  02A0  0020               	movlb	0	; select bank0
  4665  02A1  086F               	movf	_Sw,w
  4666  02A2  0086               	movwf	6
  4667  02A3  3001               	movlw	1	; select bank2/3
  4668  02A4  0087               	movwf	7
  4669  02A5  1D01               	btfss	1,2
  4670  02A6  0008               	return
  4671                           
  4672                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4673  02A7  3001               	movlw	1
  4674  02A8  00E5               	movwf	??_setSw_Main
  4675  02A9  086F               	movf	_Sw,w
  4676  02AA  3E02               	addlw	2
  4677  02AB  0086               	movwf	6
  4678  02AC  3001               	movlw	1	; select bank2/3
  4679  02AD  0087               	movwf	7
  4680  02AE  0865               	movf	??_setSw_Main,w
  4681  02AF  0781               	addwf	1,f
  4682                           
  4683                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4684  02B0  086F               	movf	_Sw,w
  4685  02B1  3E02               	addlw	2
  4686  02B2  0086               	movwf	6
  4687  02B3  3001               	movlw	1	; select bank2/3
  4688  02B4  0087               	movwf	7
  4689  02B5  3005               	movlw	5
  4690  02B6  0201               	subwf	1,w
  4691  02B7  1C03               	skipc
  4692  02B8  0008               	return
  4693                           
  4694                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4695  02B9  086F               	movf	_Sw,w
  4696  02BA  3E02               	addlw	2
  4697  02BB  0086               	movwf	6
  4698  02BC  3001               	movlw	1	; select bank2/3
  4699  02BD  0087               	movwf	7
  4700  02BE  0181               	clrf	1
  4701                           
  4702                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4703  02BF  086F               	movf	_Sw,w
  4704  02C0  0086               	movwf	6
  4705  02C1  3001               	movlw	1	; select bank2/3
  4706  02C2  0087               	movwf	7
  4707  02C3  1101               	bcf	1,2
  4708                           
  4709                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4710  02C4  086F               	movf	_Sw,w
  4711  02C5  3E03               	addlw	3
  4712  02C6  0086               	movwf	6
  4713  02C7  3001               	movlw	1	; select bank2/3
  4714  02C8  0087               	movwf	7
  4715  02C9  3000               	movlw	0
  4716  02CA  3FC0               	movwi [0]fsr1
  4717  02CB  3FC1               	movwi [1]fsr1
  4718                           
  4719                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4720  02CC  086F               	movf	_Sw,w
  4721  02CD  0086               	movwf	6
  4722  02CE  3001               	movlw	1	; select bank2/3
  4723  02CF  0087               	movwf	7
  4724  02D0  1181               	bcf	1,3
  4725                           
  4726                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4727  02D1  086F               	movf	_Sw,w
  4728  02D2  3E05               	addlw	5
  4729  02D3  0086               	movwf	6
  4730  02D4  3001               	movlw	1	; select bank2/3
  4731  02D5  0087               	movwf	7
  4732  02D6  3000               	movlw	0
  4733  02D7  3FC0               	movwi [0]fsr1
  4734  02D8  3FC1               	movwi [1]fsr1
  4735                           
  4736                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4737  02D9  086F               	movf	_Sw,w
  4738  02DA  0086               	movwf	6
  4739  02DB  3001               	movlw	1	; select bank2/3
  4740  02DC  0087               	movwf	7
  4741  02DD  1201               	bcf	1,4
  4742                           
  4743                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4744  02DE  086F               	movf	_Sw,w
  4745  02DF  3E07               	addlw	7
  4746  02E0  0086               	movwf	6
  4747  02E1  3001               	movlw	1	; select bank2/3
  4748  02E2  0087               	movwf	7
  4749  02E3  3000               	movlw	0
  4750  02E4  3FC0               	movwi [0]fsr1
  4751  02E5  3FC1               	movwi [1]fsr1
  4752                           
  4753                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4754  02E6  086F               	movf	_Sw,w
  4755  02E7  0086               	movwf	6
  4756  02E8  3001               	movlw	1	; select bank2/3
  4757  02E9  0087               	movwf	7
  4758  02EA  1281               	bcf	1,5
  4759                           
  4760                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4761  02EB  0869               	movf	setSw_Main@sw,w
  4762  02EC  318C  2416  3181   	fcall	_Sw_DimmerOffFunc
  4763                           
  4764                           ;Switch_B1.c: 232: setRF_Learn(0);
  4765  02EF  3000               	movlw	0
  4766  02F0  319F  27BE         	fcall	_setRF_Learn
  4767  02F2  0008               	return
  4768  02F3                     __end_of_setSw_Main:	
  4769                           
  4770                           	psect	text9
  4771  1FBE                     __ptext9:	
  4772 ;; *************** function _setRF_Learn *****************
  4773 ;; Defined at:
  4774 ;;		line 23 in file "../src/RF_Control_B1.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  command         1    wreg     unsigned char 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  command         1    0[BANK0 ] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;		None               void
  4781 ;; Registers used:
  4782 ;;		wreg
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        1 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    5
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_setSw_Main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _setRF_Learn
  4804  1FBE                     _setRF_Learn:	
  4805                           
  4806                           ;incstack = 0
  4807                           ; Regs used in _setRF_Learn: [wreg]
  4808                           ;setRF_Learn@command stored from wreg
  4809  1FBE  0020               	movlb	0	; select bank0
  4810  1FBF  00A0               	movwf	setRF_Learn@command
  4811                           
  4812                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4813  1FC0  0820               	movf	setRF_Learn@command,w
  4814  1FC1  0021               	movlb	1	; select bank1
  4815  1FC2  133F               	bcf	_RF1^(0+128),6
  4816  1FC3  1D03               	skipz
  4817  1FC4  173F               	bsf	_RF1^(0+128),6
  4818  1FC5  0008               	return
  4819  1FC6                     __end_of_setRF_Learn:	
  4820                           
  4821                           	psect	text10
  4822  0D66                     __ptext10:	
  4823 ;; *************** function _Sw_DimmerOnFunc *****************
  4824 ;; Defined at:
  4825 ;;		line 241 in file "../src/Switch_B1.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  sw              1    wreg     unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  sw              1   67[BANK0 ] unsigned char 
  4830 ;;  Idle            1   66[BANK0 ] unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;Total ram usage:        2 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    9
  4847 ;; This function calls:
  4848 ;;		_setBuz
  4849 ;;		_setDimmerLights_Switch
  4850 ;;		_setDimmerLights_Trigger
  4851 ;;		_setRFSW_Status
  4852 ;;		_setRF_DimmerLights
  4853 ;;		_setTxData
  4854 ;; This function is called by:
  4855 ;;		_setSw_Main
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _Sw_DimmerOnFunc
  4861  0D66                     _Sw_DimmerOnFunc:	
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4865                           ;Sw_DimmerOnFunc@sw stored from wreg
  4866  0D66  0020               	movlb	0	; select bank0
  4867  0D67  00E3               	movwf	Sw_DimmerOnFunc@sw
  4868                           
  4869                           ;Switch_B1.c: 242: char Idle = 1;
  4870  0D68  01E2               	clrf	Sw_DimmerOnFunc@Idle
  4871  0D69  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  4872                           
  4873                           ;Switch_B1.c: 256: if (sw == 1) {
  4874  0D6A  0863               	movf	Sw_DimmerOnFunc@sw,w
  4875  0D6B  3A01               	xorlw	1
  4876  0D6C  1D03               	skipz
  4877  0D6D  2D78               	goto	l6352
  4878                           
  4879                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  4880  0D6E  1003               	clrc
  4881  0D6F  0022               	movlb	2	; select bank2
  4882  0D70  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  4883  0D71  1403               	setc
  4884  0D72  3000               	movlw	0
  4885  0D73  1803               	btfsc	3,0
  4886  0D74  3001               	movlw	1
  4887  0D75  0020               	movlb	0	; select bank0
  4888  0D76  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4889                           
  4890                           ;Switch_B1.c: 258: } else if (sw == 2) {
  4891  0D77  2D85               	goto	l6356
  4892  0D78                     l6352:	
  4893  0D78  0863               	movf	Sw_DimmerOnFunc@sw,w
  4894  0D79  3A02               	xorlw	2
  4895  0D7A  1D03               	skipz
  4896  0D7B  2D85               	goto	l6356
  4897                           
  4898                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  4899  0D7C  1003               	clrc
  4900  0D7D  0022               	movlb	2	; select bank2
  4901  0D7E  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  4902  0D7F  1403               	setc
  4903  0D80  3000               	movlw	0
  4904  0D81  1803               	btfsc	3,0
  4905  0D82  3001               	movlw	1
  4906  0D83  0020               	movlb	0	; select bank0
  4907  0D84  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4908  0D85                     l6356:	
  4909                           
  4910                           ;Switch_B1.c: 260: }
  4911                           ;Switch_B1.c: 263: if (Idle == 1) {
  4912  0D85  0862               	movf	Sw_DimmerOnFunc@Idle,w
  4913  0D86  3A01               	xorlw	1
  4914  0D87  1D03               	skipz
  4915  0D88  0008               	return
  4916                           
  4917                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4918  0D89  086F               	movf	_Sw,w
  4919  0D8A  0086               	movwf	6
  4920  0D8B  3001               	movlw	1	; select bank2/3
  4921  0D8C  0087               	movwf	7
  4922  0D8D  1781               	bsf	1,7
  4923                           
  4924                           ;Switch_B1.c: 265: setBuz(1, 100);
  4925  0D8E  3064               	movlw	100
  4926  0D8F  00A9               	movwf	setBuz@time
  4927  0D90  3000               	movlw	0
  4928  0D91  00AA               	movwf	setBuz@time+1
  4929  0D92  3001               	movlw	1
  4930  0D93  3187  27A7  318D   	fcall	_setBuz
  4931                           
  4932                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  4933  0D96  0020               	movlb	0	; select bank0
  4934  0D97  086F               	movf	_Sw,w
  4935  0D98  0086               	movwf	6
  4936  0D99  3001               	movlw	1	; select bank2/3
  4937  0D9A  0087               	movwf	7
  4938  0D9B  1B01               	btfsc	1,6
  4939  0D9C  2DC6               	goto	l6376
  4940                           
  4941                           ;Switch_B1.c: 267: Sw->Status = 1;
  4942  0D9D  086F               	movf	_Sw,w
  4943  0D9E  0086               	movwf	6
  4944  0D9F  3001               	movlw	1	; select bank2/3
  4945  0DA0  0087               	movwf	7
  4946  0DA1  1701               	bsf	1,6
  4947                           
  4948                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  4949  0DA2  01A2               	clrf	setRFSW_Status@command
  4950  0DA3  0AA2               	incf	setRFSW_Status@command,f
  4951  0DA4  0863               	movf	Sw_DimmerOnFunc@sw,w
  4952  0DA5  3190  20F1  318D   	fcall	_setRFSW_Status
  4953                           
  4954                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  4955  0DA8  0020               	movlb	0	; select bank0
  4956  0DA9  01A2               	clrf	setDimmerLights_Trigger@command
  4957  0DAA  0AA2               	incf	setDimmerLights_Trigger@command,f
  4958  0DAB  0863               	movf	Sw_DimmerOnFunc@sw,w
  4959  0DAC  3191  213D  318D   	fcall	_setDimmerLights_Trigger
  4960                           
  4961                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  4962  0DAF  0020               	movlb	0	; select bank0
  4963  0DB0  01A2               	clrf	setDimmerLights_Switch@command
  4964  0DB1  0AA2               	incf	setDimmerLights_Switch@command,f
  4965  0DB2  0863               	movf	Sw_DimmerOnFunc@sw,w
  4966  0DB3  3191  212D  318D   	fcall	_setDimmerLights_Switch
  4967                           
  4968                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  4969  0DB6  0020               	movlb	0	; select bank0
  4970  0DB7  086F               	movf	_Sw,w
  4971  0DB8  0086               	movwf	6
  4972  0DB9  3001               	movlw	1	; select bank2/3
  4973  0DBA  0087               	movwf	7
  4974  0DBB  3000               	movlw	0
  4975  0DBC  1B01               	btfsc	1,6
  4976  0DBD  3001               	movlw	1
  4977  0DBE  00DD               	movwf	setRF_DimmerLights@on
  4978  0DBF  0863               	movf	Sw_DimmerOnFunc@sw,w
  4979  0DC0  318B  23AA  318D   	fcall	_setRF_DimmerLights
  4980                           
  4981                           ;Switch_B1.c: 274: setTxData();
  4982  0DC3  3185  258D         	fcall	_setTxData
  4983                           
  4984                           ;Switch_B1.c: 276: } else {
  4985  0DC5  0008               	return
  4986  0DC6                     l6376:	
  4987                           
  4988                           ;Switch_B1.c: 277: Sw->Status = 0;
  4989  0DC6  0020               	movlb	0	; select bank0
  4990  0DC7  086F               	movf	_Sw,w
  4991  0DC8  0086               	movwf	6
  4992  0DC9  3001               	movlw	1	; select bank2/3
  4993  0DCA  0087               	movwf	7
  4994  0DCB  1301               	bcf	1,6
  4995                           
  4996                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  4997  0DCC  086F               	movf	_Sw,w
  4998  0DCD  0086               	movwf	6
  4999  0DCE  3001               	movlw	1	; select bank2/3
  5000  0DCF  0087               	movwf	7
  5001  0DD0  3000               	movlw	0
  5002  0DD1  1B01               	btfsc	1,6
  5003  0DD2  3001               	movlw	1
  5004  0DD3  00A2               	movwf	setRFSW_Status@command
  5005  0DD4  0863               	movf	Sw_DimmerOnFunc@sw,w
  5006  0DD5  3190  20F1         	fcall	_setRFSW_Status
  5007  0DD7  0008               	return
  5008  0DD8                     __end_of_Sw_DimmerOnFunc:	
  5009                           
  5010                           	psect	text11
  5011  0C16                     __ptext11:	
  5012 ;; *************** function _Sw_DimmerOffFunc *****************
  5013 ;; Defined at:
  5014 ;;		line 284 in file "../src/Switch_B1.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  sw              1    wreg     unsigned char 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  sw              1   68[BANK0 ] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;		None               void
  5021 ;; Registers used:
  5022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;Total ram usage:        3 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    9
  5035 ;; This function calls:
  5036 ;;		_setDelayOff_GO
  5037 ;;		_setDimmerLights_AdjGo
  5038 ;;		_setDimmerLights_Switch
  5039 ;;		_setDimmerLights_Trigger
  5040 ;;		_setDimmerLights_TriggerAdj
  5041 ;;		_setRF_DimmerLights
  5042 ;;		_setTxData
  5043 ;; This function is called by:
  5044 ;;		_setSw_Main
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _Sw_DimmerOffFunc
  5050  0C16                     _Sw_DimmerOffFunc:	
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5054                           ;Sw_DimmerOffFunc@sw stored from wreg
  5055  0C16  0020               	movlb	0	; select bank0
  5056  0C17  00E4               	movwf	Sw_DimmerOffFunc@sw
  5057                           
  5058                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5059  0C18  086F               	movf	_Sw,w
  5060  0C19  0086               	movwf	6
  5061  0C1A  3001               	movlw	1	; select bank2/3
  5062  0C1B  0087               	movwf	7
  5063  0C1C  1F81               	btfss	1,7
  5064  0C1D  0008               	return
  5065                           
  5066                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5067  0C1E  086F               	movf	_Sw,w
  5068  0C1F  0086               	movwf	6
  5069  0C20  3001               	movlw	1	; select bank2/3
  5070  0C21  0087               	movwf	7
  5071  0C22  1381               	bcf	1,7
  5072                           
  5073                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5074  0C23  086F               	movf	_Sw,w
  5075  0C24  0086               	movwf	6
  5076  0C25  3001               	movlw	1	; select bank2/3
  5077  0C26  0087               	movwf	7
  5078  0C27  1F01               	btfss	1,6
  5079  0C28  2C61               	goto	l6420
  5080                           
  5081                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5082  0C29  0A6F               	incf	_Sw,w
  5083  0C2A  0086               	movwf	6
  5084  0C2B  3001               	movlw	1	; select bank2/3
  5085  0C2C  0087               	movwf	7
  5086  0C2D  1C01               	btfss	1,0
  5087  0C2E  0008               	return
  5088                           
  5089                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5090  0C2F  0A6F               	incf	_Sw,w
  5091  0C30  0086               	movwf	6
  5092  0C31  3001               	movlw	1	; select bank2/3
  5093  0C32  0087               	movwf	7
  5094  0C33  1001               	bcf	1,0
  5095                           
  5096                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5097  0C34  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5098  0C35  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5099  0C36  0864               	movf	Sw_DimmerOffFunc@sw,w
  5100  0C37  3191  215D  318C   	fcall	_setDimmerLights_TriggerAdj
  5101                           
  5102                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5103  0C3A  0020               	movlb	0	; select bank0
  5104  0C3B  01A2               	clrf	setDimmerLights_AdjGo@command
  5105  0C3C  0864               	movf	Sw_DimmerOffFunc@sw,w
  5106  0C3D  3191  214D  318C   	fcall	_setDimmerLights_AdjGo
  5107                           
  5108                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5109  0C40  0020               	movlb	0	; select bank0
  5110  0C41  0864               	movf	Sw_DimmerOffFunc@sw,w
  5111  0C42  3E1A               	addlw	26
  5112  0C43  076E               	addwf	_product,w
  5113  0C44  00E2               	movwf	??_Sw_DimmerOffFunc
  5114  0C45  0862               	movf	??_Sw_DimmerOffFunc,w
  5115  0C46  0086               	movwf	6
  5116  0C47  3001               	movlw	1	; select bank2/3
  5117  0C48  0087               	movwf	7
  5118  0C49  0801               	movf	1,w
  5119  0C4A  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5120  0C4B  086E               	movf	_product,w
  5121  0C4C  3E11               	addlw	17
  5122  0C4D  0086               	movwf	6
  5123  0C4E  3001               	movlw	1	; select bank2/3
  5124  0C4F  0087               	movwf	7
  5125  0C50  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5126  0C51  0081               	movwf	1
  5127                           
  5128                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5129  0C52  086F               	movf	_Sw,w
  5130  0C53  0086               	movwf	6
  5131  0C54  3001               	movlw	1	; select bank2/3
  5132  0C55  0087               	movwf	7
  5133  0C56  3000               	movlw	0
  5134  0C57  1B01               	btfsc	1,6
  5135  0C58  3001               	movlw	1
  5136  0C59  00DD               	movwf	setRF_DimmerLights@on
  5137  0C5A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5138  0C5B  318B  23AA  318C   	fcall	_setRF_DimmerLights
  5139                           
  5140                           ;Switch_B1.c: 295: setTxData();
  5141  0C5E  3185  258D         	fcall	_setTxData
  5142                           
  5143                           ;Switch_B1.c: 297: }
  5144                           ;Switch_B1.c: 298: } else {
  5145  0C60  0008               	return
  5146  0C61                     l6420:	
  5147                           
  5148                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5149  0C61  0020               	movlb	0	; select bank0
  5150  0C62  01A2               	clrf	setDimmerLights_Trigger@command
  5151  0C63  0AA2               	incf	setDimmerLights_Trigger@command,f
  5152  0C64  0864               	movf	Sw_DimmerOffFunc@sw,w
  5153  0C65  3191  213D  318C   	fcall	_setDimmerLights_Trigger
  5154                           
  5155                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5156  0C68  0020               	movlb	0	; select bank0
  5157  0C69  01A2               	clrf	setDimmerLights_Switch@command
  5158  0C6A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5159  0C6B  3191  212D  318C   	fcall	_setDimmerLights_Switch
  5160                           
  5161                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5162  0C6E  0020               	movlb	0	; select bank0
  5163  0C6F  01AA               	clrf	setDelayOff_GO@command
  5164  0C70  01AB               	clrf	setDelayOff_GO@value
  5165  0C71  0864               	movf	Sw_DimmerOffFunc@sw,w
  5166  0C72  3189  214F  318C   	fcall	_setDelayOff_GO
  5167                           
  5168                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5169  0C75  0020               	movlb	0	; select bank0
  5170  0C76  086F               	movf	_Sw,w
  5171  0C77  0086               	movwf	6
  5172  0C78  3001               	movlw	1	; select bank2/3
  5173  0C79  0087               	movwf	7
  5174  0C7A  3000               	movlw	0
  5175  0C7B  1B01               	btfsc	1,6
  5176  0C7C  3001               	movlw	1
  5177  0C7D  00DD               	movwf	setRF_DimmerLights@on
  5178  0C7E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5179  0C7F  318B  23AA  318C   	fcall	_setRF_DimmerLights
  5180                           
  5181                           ;Switch_B1.c: 304: setTxData();
  5182  0C82  3185  258D         	fcall	_setTxData
  5183  0C84  0008               	return
  5184  0C85                     __end_of_Sw_DimmerOffFunc:	
  5185                           
  5186                           	psect	text12
  5187  17B4                     __ptext12:	
  5188 ;; *************** function _Sw_DimmerAdjFunc *****************
  5189 ;; Defined at:
  5190 ;;		line 311 in file "../src/Switch_B1.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  sw              1    wreg     unsigned char 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  sw              1    5[BANK0 ] unsigned char 
  5195 ;;  Idle            1    4[BANK0 ] unsigned char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;		None               void
  5198 ;; Registers used:
  5199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5206 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;Total ram usage:        2 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    7
  5212 ;; This function calls:
  5213 ;;		_setDimmerLights_AdjGo
  5214 ;;		_setDimmerLights_TriggerAdj
  5215 ;;		_setRFSW_Status
  5216 ;; This function is called by:
  5217 ;;		_setSw_Main
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function _Sw_DimmerAdjFunc
  5223  17B4                     _Sw_DimmerAdjFunc:	
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5227                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5228  17B4  0020               	movlb	0	; select bank0
  5229  17B5  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5230                           
  5231                           ;Switch_B1.c: 312: char Idle = 1;
  5232  17B6  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5233  17B7  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5234                           
  5235                           ;Switch_B1.c: 325: if (sw == 1) {
  5236  17B8  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5237  17B9  3A01               	xorlw	1
  5238  17BA  1D03               	skipz
  5239  17BB  2FC6               	goto	l6386
  5240                           
  5241                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  5242  17BC  1003               	clrc
  5243  17BD  0022               	movlb	2	; select bank2
  5244  17BE  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  5245  17BF  1403               	setc
  5246  17C0  3000               	movlw	0
  5247  17C1  1803               	btfsc	3,0
  5248  17C2  3001               	movlw	1
  5249  17C3  0020               	movlb	0	; select bank0
  5250  17C4  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5251                           
  5252                           ;Switch_B1.c: 327: } else if (sw == 2) {
  5253  17C5  2FD3               	goto	l6390
  5254  17C6                     l6386:	
  5255  17C6  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5256  17C7  3A02               	xorlw	2
  5257  17C8  1D03               	skipz
  5258  17C9  2FD3               	goto	l6390
  5259                           
  5260                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  5261  17CA  1003               	clrc
  5262  17CB  0022               	movlb	2	; select bank2
  5263  17CC  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  5264  17CD  1403               	setc
  5265  17CE  3000               	movlw	0
  5266  17CF  1803               	btfsc	3,0
  5267  17D0  3001               	movlw	1
  5268  17D1  0020               	movlb	0	; select bank0
  5269  17D2  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5270  17D3                     l6390:	
  5271                           
  5272                           ;Switch_B1.c: 329: }
  5273                           ;Switch_B1.c: 332: if (Idle == 1) {
  5274  17D3  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5275  17D4  3A01               	xorlw	1
  5276  17D5  1D03               	skipz
  5277  17D6  0008               	return
  5278                           
  5279                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5280  17D7  086F               	movf	_Sw,w
  5281  17D8  0086               	movwf	6
  5282  17D9  3001               	movlw	1	; select bank2/3
  5283  17DA  0087               	movwf	7
  5284  17DB  1F81               	btfss	1,7
  5285  17DC  0008               	return
  5286                           
  5287                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5288  17DD  086F               	movf	_Sw,w
  5289  17DE  0086               	movwf	6
  5290  17DF  3001               	movlw	1	; select bank2/3
  5291  17E0  0087               	movwf	7
  5292  17E1  1581               	bsf	1,3
  5293                           
  5294                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5295  17E2  0A6F               	incf	_Sw,w
  5296  17E3  0086               	movwf	6
  5297  17E4  3001               	movlw	1	; select bank2/3
  5298  17E5  0087               	movwf	7
  5299  17E6  1401               	bsf	1,0
  5300                           
  5301                           ;Switch_B1.c: 336: Sw->Status = 1;
  5302  17E7  086F               	movf	_Sw,w
  5303  17E8  0086               	movwf	6
  5304  17E9  3001               	movlw	1	; select bank2/3
  5305  17EA  0087               	movwf	7
  5306  17EB  1701               	bsf	1,6
  5307                           
  5308                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5309  17EC  01A2               	clrf	setRFSW_Status@command
  5310  17ED  0AA2               	incf	setRFSW_Status@command,f
  5311  17EE  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5312  17EF  3190  20F1  3197   	fcall	_setRFSW_Status
  5313                           
  5314                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5315  17F2  0020               	movlb	0	; select bank0
  5316  17F3  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5317  17F4  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5318  17F5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5319  17F6  3191  215D  3197   	fcall	_setDimmerLights_TriggerAdj
  5320                           
  5321                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5322  17F9  0020               	movlb	0	; select bank0
  5323  17FA  01A2               	clrf	setDimmerLights_AdjGo@command
  5324  17FB  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5325  17FC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5326  17FD  3191  214D         	fcall	_setDimmerLights_AdjGo
  5327  17FF  0008               	return
  5328  1800                     __end_of_Sw_DimmerAdjFunc:	
  5329                           
  5330                           	psect	text13
  5331  115D                     __ptext13:	
  5332 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5333 ;; Defined at:
  5334 ;;		line 720 in file "../src/Dimmer_B1.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  lights          1    wreg     unsigned char 
  5337 ;;  command         1    2[BANK0 ] unsigned char 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  lights          1    3[BANK0 ] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;		None               void
  5342 ;; Registers used:
  5343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:        2 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    6
  5356 ;; This function calls:
  5357 ;;		_DimmerLightsPointSelect
  5358 ;; This function is called by:
  5359 ;;		_Sw_DimmerOffFunc
  5360 ;;		_Sw_DimmerAdjFunc
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _setDimmerLights_TriggerAdj
  5366  115D                     _setDimmerLights_TriggerAdj:	
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5370                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5371  115D  0020               	movlb	0	; select bank0
  5372  115E  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5373                           
  5374                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  5375  115F  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5376  1160  3191  21D7         	fcall	_DimmerLightsPointSelect
  5377                           
  5378                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  5379  1162  0879               	movf	_DimmerLights,w
  5380  1163  3E08               	addlw	8
  5381  1164  0086               	movwf	6
  5382  1165  3001               	movlw	1	; select bank2/3
  5383  1166  0087               	movwf	7
  5384  1167  0020               	movlb	0	; select bank0
  5385  1168  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5386  1169  1201               	bcf	1,4
  5387  116A  1D03               	skipz
  5388  116B  1601               	bsf	1,4
  5389  116C  0008               	return
  5390  116D                     __end_of_setDimmerLights_TriggerAdj:	
  5391                           
  5392                           	psect	text14
  5393  114D                     __ptext14:	
  5394 ;; *************** function _setDimmerLights_AdjGo *****************
  5395 ;; Defined at:
  5396 ;;		line 708 in file "../src/Dimmer_B1.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  lights          1    wreg     unsigned char 
  5399 ;;  command         1    2[BANK0 ] unsigned char 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  lights          1    3[BANK0 ] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5411 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;Total ram usage:        2 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    6
  5418 ;; This function calls:
  5419 ;;		_DimmerLightsPointSelect
  5420 ;; This function is called by:
  5421 ;;		_Sw_DimmerOffFunc
  5422 ;;		_Sw_DimmerAdjFunc
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           
  5427                           ;psect for function _setDimmerLights_AdjGo
  5428  114D                     _setDimmerLights_AdjGo:	
  5429                           
  5430                           ;incstack = 0
  5431                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5432                           ;setDimmerLights_AdjGo@lights stored from wreg
  5433  114D  0020               	movlb	0	; select bank0
  5434  114E  00A3               	movwf	setDimmerLights_AdjGo@lights
  5435                           
  5436                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  5437  114F  0823               	movf	setDimmerLights_AdjGo@lights,w
  5438  1150  3191  21D7         	fcall	_DimmerLightsPointSelect
  5439                           
  5440                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  5441  1152  0879               	movf	_DimmerLights,w
  5442  1153  3E08               	addlw	8
  5443  1154  0086               	movwf	6
  5444  1155  3001               	movlw	1	; select bank2/3
  5445  1156  0087               	movwf	7
  5446  1157  0020               	movlb	0	; select bank0
  5447  1158  0822               	movf	setDimmerLights_AdjGo@command,w
  5448  1159  1181               	bcf	1,3
  5449  115A  1D03               	skipz
  5450  115B  1581               	bsf	1,3
  5451  115C  0008               	return
  5452  115D                     __end_of_setDimmerLights_AdjGo:	
  5453                           
  5454                           	psect	text15
  5455  10D6                     __ptext15:	
  5456 ;; *************** function _Switch_Initialization *****************
  5457 ;; Defined at:
  5458 ;;		line 41 in file "../src/Switch_B1.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;		None
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;		None
  5463 ;; Return value:  Size  Location     Type
  5464 ;;		None               void
  5465 ;; Registers used:
  5466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;Total ram usage:        0 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:    8
  5479 ;; This function calls:
  5480 ;;		_TouchPower
  5481 ;;		_setSw_Initialization
  5482 ;; This function is called by:
  5483 ;;		_main
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           
  5488                           ;psect for function _Switch_Initialization
  5489  10D6                     _Switch_Initialization:	
  5490                           
  5491                           ;Switch_B1.c: 42: TouchPower();
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5495  10D6  3191  210F  3190   	fcall	_TouchPower
  5496                           
  5497                           ;Switch_B1.c: 44: WPUB1 = 0;
  5498  10D9  0024               	movlb	4	; select bank4
  5499  10DA  108D               	bcf	13,1	;volatile
  5500                           
  5501                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5502  10DB  3001               	movlw	1
  5503  10DC  319F  27B6  3190   	fcall	_setSw_Initialization
  5504                           
  5505                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5506  10DF  3002               	movlw	2
  5507  10E0  319F  27B6         	fcall	_setSw_Initialization
  5508  10E2  0008               	return
  5509  10E3                     __end_of_Switch_Initialization:	
  5510                           
  5511                           	psect	text16
  5512  1FB6                     __ptext16:	
  5513 ;; *************** function _setSw_Initialization *****************
  5514 ;; Defined at:
  5515 ;;		line 83 in file "../src/Switch_B1.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  sw              1    wreg     unsigned char 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  sw              1    3[BANK0 ] unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;		None               void
  5522 ;; Registers used:
  5523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;Total ram usage:        1 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    7
  5536 ;; This function calls:
  5537 ;;		_setLED
  5538 ;; This function is called by:
  5539 ;;		_Switch_Initialization
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _setSw_Initialization
  5545  1FB6                     _setSw_Initialization:	
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5549                           ;setSw_Initialization@sw stored from wreg
  5550  1FB6  0020               	movlb	0	; select bank0
  5551  1FB7  00A3               	movwf	setSw_Initialization@sw
  5552                           
  5553                           ;Switch_B1.c: 84: setLED(sw, 1);
  5554  1FB8  01A1               	clrf	setLED@command
  5555  1FB9  0AA1               	incf	setLED@command,f
  5556  1FBA  0823               	movf	setSw_Initialization@sw,w
  5557  1FBB  318A  220F         	fcall	_setLED
  5558  1FBD  0008               	return
  5559  1FBE                     __end_of_setSw_Initialization:	
  5560                           
  5561                           	psect	text17
  5562  110F                     __ptext17:	
  5563 ;; *************** function _TouchPower *****************
  5564 ;; Defined at:
  5565 ;;		line 10 in file "../src/Switch_B1.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;		None               void
  5572 ;; Registers used:
  5573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    6
  5586 ;; This function calls:
  5587 ;;		_Timeout_Counter
  5588 ;;		_set_TimeoutCleared
  5589 ;; This function is called by:
  5590 ;;		_Switch_Initialization
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _TouchPower
  5596  110F                     _TouchPower:	
  5597                           
  5598                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5599                           
  5600                           ;incstack = 0
  5601                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5602  110F  2915               	goto	l6914
  5603  1110                     l2288:	
  5604                           
  5605                           ;Switch_B1.c: 12: RC5 = 1;
  5606  1110  0020               	movlb	0	; select bank0
  5607  1111  168E               	bsf	14,5	;volatile
  5608                           
  5609                           ;Switch_B1.c: 13: Timeout_Counter();
  5610  1112  3192  224E  3191   	fcall	_Timeout_Counter
  5611  1115                     l6914:	
  5612  1115  0020               	movlb	0	; select bank0
  5613  1116  1A8E               	btfsc	14,5	;volatile
  5614  1117  291B               	goto	l6918
  5615  1118  0021               	movlb	1	; select bank1
  5616  1119  1D30               	btfss	(_myMain^(0+128)+16),2
  5617  111A  2910               	goto	l2288
  5618  111B                     l6918:	
  5619                           
  5620                           ;Switch_B1.c: 14: }
  5621                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5622  111B  319F  2779         	fcall	_set_TimeoutCleared
  5623  111D  0008               	return
  5624  111E                     __end_of_TouchPower:	
  5625                           
  5626                           	psect	text18
  5627  1F6A                     __ptext18:	
  5628 ;; *************** function _RF_Main *****************
  5629 ;; Defined at:
  5630 ;;		line 16 in file "../src/RF_Control_B1.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;		None
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;		None               void
  5637 ;; Registers used:
  5638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;Total ram usage:        0 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:   14
  5651 ;; This function calls:
  5652 ;;		_setRF_Main
  5653 ;; This function is called by:
  5654 ;;		_main
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           
  5659                           ;psect for function _RF_Main
  5660  1F6A                     _RF_Main:	
  5661                           
  5662                           ;RF_Control_B1.c: 18: setRF_Main();
  5663                           
  5664                           ;incstack = 0
  5665                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5666  1F6A  3183  23E9         	fcall	_setRF_Main
  5667  1F6C  0008               	return
  5668  1F6D                     __end_of_RF_Main:	
  5669                           
  5670                           	psect	text19
  5671  03E9                     __ptext19:	
  5672 ;; *************** function _setRF_Main *****************
  5673 ;; Defined at:
  5674 ;;		line 52 in file "../src/RF_Control_B1.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  Receive_OK      1    0        unsigned char 
  5679 ;;  loop_f          1    0        unsigned char 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;		None               void
  5682 ;; Registers used:
  5683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;Total ram usage:        2 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:   13
  5696 ;; This function calls:
  5697 ;;		_CC2500_ReadStatus
  5698 ;;		_CC2500_RxData
  5699 ;;		_CC2500_TxData
  5700 ;;		_CC2500_WriteCommand
  5701 ;;		_getBuz_GO
  5702 ;;		_getRxData
  5703 ;; This function is called by:
  5704 ;;		_RF_Main
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _setRF_Main
  5710  03E9                     _setRF_Main:	
  5711                           
  5712                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5713                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5714                           
  5715                           ;incstack = 0
  5716                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5717  03E9  0021               	movlb	1	; select bank1
  5718  03EA  1C3F               	btfss	_RF1^(0+128),0
  5719  03EB  0008               	return
  5720                           
  5721                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5722  03EC  3191  217E  3183   	fcall	_getBuz_GO
  5723  03EF  0020               	movlb	0	; select bank0
  5724  03F0  0821               	movf	?_getBuz_GO+1,w
  5725  03F1  0420               	iorwf	?_getBuz_GO,w
  5726  03F2  1D03               	skipz
  5727  03F3  0008               	return
  5728                           
  5729                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5730  03F4  01E8               	clrf	_setRF_Main$4530
  5731  03F5  0AE8               	incf	_setRF_Main$4530,f
  5732  03F6  1F0C               	btfss	12,6	;volatile
  5733  03F7  1A0C               	btfsc	12,4	;volatile
  5734  03F8  2BFD               	goto	l7676
  5735  03F9  1C0C               	btfss	12,0	;volatile
  5736  03FA  188D               	btfsc	13,1	;volatile
  5737  03FB  2BFD               	goto	l7676
  5738  03FC  01E8               	clrf	_setRF_Main$4530
  5739  03FD                     l7676:	
  5740  03FD  0868               	movf	_setRF_Main$4530,w
  5741  03FE  0021               	movlb	1	; select bank1
  5742  03FF  13BF               	bcf	_RF1^(0+128),7
  5743  0400  1D03               	skipz
  5744  0401  17BF               	bsf	_RF1^(0+128),7
  5745                           
  5746                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  5747  0402  1BBF               	btfsc	_RF1^(0+128),7
  5748  0403  1B3F               	btfsc	_RF1^(0+128),6
  5749  0404  2C0A               	goto	l1879
  5750                           
  5751                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  5752  0405  01C1               	clrf	(_RF1^(0+128)+2)
  5753  0406  01C2               	clrf	((_RF1+1)^(0+128)+2)
  5754                           
  5755                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  5756  0407  14C0               	bsf	(_RF1^(0+128)+1),1
  5757                           
  5758                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  5759  0408  11BF               	bcf	_RF1^(0+128),3
  5760                           
  5761                           ;RF_Control_B1.c: 76: } else {
  5762  0409  0008               	return
  5763  040A                     l1879:	
  5764                           
  5765                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5766  040A  18C0               	btfsc	(_RF1^(0+128)+1),1
  5767  040B  1B3F               	btfsc	_RF1^(0+128),6
  5768  040C  2C21               	goto	l7698
  5769                           
  5770                           ;RF_Control_B1.c: 78: RF1.Count++;
  5771  040D  3001               	movlw	1
  5772  040E  07C1               	addwf	(_RF1^(0+128)+2),f
  5773  040F  3000               	movlw	0
  5774  0410  3DC2               	addwfc	((_RF1+1)^(0+128)+2),f
  5775                           
  5776                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5777  0411  3002               	movlw	2
  5778  0412  3EBF               	addlw	_RF1& (0+255)
  5779  0413  0086               	movwf	6
  5780  0414  0187               	clrf	7
  5781  0415  3F40               	moviw [0]fsr1
  5782  0416  0646               	xorwf	(_RF1^(0+128)+7),w
  5783  0417  1D03               	skipz
  5784  0418  2C1B               	goto	u7655
  5785  0419  3F41               	moviw [1]fsr1
  5786  041A  0647               	xorwf	((_RF1+1)^(0+128)+7),w
  5787  041B                     u7655:	
  5788  041B  1D03               	skipz
  5789  041C  2C93               	goto	l7752
  5790                           
  5791                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5792  041D  01C1               	clrf	(_RF1^(0+128)+2)
  5793  041E  01C2               	clrf	((_RF1+1)^(0+128)+2)
  5794                           
  5795                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5796  041F  10C0               	bcf	(_RF1^(0+128)+1),1
  5797                           
  5798                           ;RF_Control_B1.c: 82: }
  5799                           ;RF_Control_B1.c: 83: } else {
  5800  0420  2C93               	goto	l7752
  5801  0421                     l7698:	
  5802                           
  5803                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5804  0421  01C1               	clrf	(_RF1^(0+128)+2)
  5805  0422  01C2               	clrf	((_RF1+1)^(0+128)+2)
  5806                           
  5807                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5808  0423  10C0               	bcf	(_RF1^(0+128)+1),1
  5809                           
  5810                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5811  0424  193F               	btfsc	_RF1^(0+128),2
  5812  0425  1B3F               	btfsc	_RF1^(0+128),6
  5813  0426  2C42               	goto	l1884
  5814                           
  5815                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5816  0427  113F               	bcf	_RF1^(0+128),2
  5817                           
  5818                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5819  0428  11BF               	bcf	_RF1^(0+128),3
  5820                           
  5821                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5822  0429  10BF               	bcf	_RF1^(0+128),1
  5823                           
  5824                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5825  042A  303B               	movlw	59
  5826  042B  3194  2412  3183   	fcall	_CC2500_ReadStatus
  5827                           
  5828                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5829  042E  0021               	movlb	1	; select bank1
  5830  042F  085F               	movf	_s_data^(0+128),w
  5831  0430  1903               	btfsc	3,2
  5832  0431  2C3E               	goto	l1885
  5833                           
  5834                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5835  0432  3036               	movlw	54
  5836  0433  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5837                           
  5838                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5839  0436  303B               	movlw	59
  5840  0437  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5841                           
  5842                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5843  043A  303A               	movlw	58
  5844  043B  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5845  043E                     l1885:	
  5846                           
  5847                           ;RF_Control_B1.c: 97: }
  5848                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5849  043E  318A  2271  3183   	fcall	_CC2500_TxData
  5850                           
  5851                           ;RF_Control_B1.c: 100: } else {
  5852  0441  2C93               	goto	l7752
  5853  0442                     l1884:	
  5854                           
  5855                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5856  0442  1DBF               	btfss	_RF1^(0+128),3
  5857  0443  2C7E               	goto	l1887
  5858                           
  5859                           ;RF_Control_B1.c: 103: CC2500_RxData();
  5860  0444  318C  24F5  3183   	fcall	_CC2500_RxData
  5861                           
  5862                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  5863  0447  0021               	movlb	1	; select bank1
  5864  0448  1CBF               	btfss	_RF1^(0+128),1
  5865  0449  2C93               	goto	l7752
  5866                           
  5867                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  5868  044A  10BF               	bcf	_RF1^(0+128),1
  5869                           
  5870                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  5871  044B  12C0               	bcf	(_RF1^(0+128)+1),5
  5872                           
  5873                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  5874  044C  01C9               	clrf	(_RF1^(0+128)+10)
  5875  044D  01CA               	clrf	((_RF1+1)^(0+128)+10)
  5876                           
  5877                           ;RF_Control_B1.c: 116: getRxData();
  5878  044E  318A  22D6  3183   	fcall	_getRxData
  5879                           
  5880                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  5881  0451  3020               	movlw	32
  5882  0452  0020               	movlb	0	; select bank0
  5883  0453  068D               	xorwf	13,f
  5884                           
  5885                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  5886  0454  0021               	movlb	1	; select bank1
  5887  0455  14C0               	bsf	(_RF1^(0+128)+1),1
  5888                           
  5889                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  5890  0456  1DC0               	btfss	(_RF1^(0+128)+1),3
  5891  0457  2C65               	goto	l7736
  5892                           
  5893                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  5894  0458  3000               	movlw	0
  5895  0459  0247               	subwf	((_RF1+1)^(0+128)+7),w
  5896  045A  3015               	movlw	21
  5897  045B  1903               	skipnz
  5898  045C  0246               	subwf	(_RF1^(0+128)+7),w
  5899  045D  1C03               	skipc
  5900  045E  2C63               	goto	l7734
  5901                           
  5902                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  5903  045F  3014               	movlw	20
  5904  0460  00C6               	movwf	(_RF1^(0+128)+7)
  5905  0461  3000               	movlw	0
  5906  0462  00C7               	movwf	(_RF1^(0+128)+8)
  5907  0463                     l7734:	
  5908                           
  5909                           ;RF_Control_B1.c: 125: }
  5910                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  5911  0463  01C3               	clrf	(_RF1^(0+128)+4)
  5912                           
  5913                           ;RF_Control_B1.c: 127: } else {
  5914  0464  2C93               	goto	l7752
  5915  0465                     l7736:	
  5916                           
  5917                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  5918  0465  3001               	movlw	1
  5919  0466  0020               	movlb	0	; select bank0
  5920  0467  00E7               	movwf	??_setRF_Main
  5921  0468  0867               	movf	??_setRF_Main,w
  5922  0469  0021               	movlb	1	; select bank1
  5923  046A  07C3               	addwf	(_RF1^(0+128)+4),f
  5924                           
  5925                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  5926  046B  0843               	movf	(_RF1^(0+128)+4),w
  5927  046C  3A02               	xorlw	2
  5928  046D  1D03               	skipz
  5929  046E  2C93               	goto	l7752
  5930                           
  5931                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  5932  046F  01C3               	clrf	(_RF1^(0+128)+4)
  5933                           
  5934                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  5935  0470  01C4               	clrf	(_RF1^(0+128)+5)
  5936  0471  01C5               	clrf	((_RF1+1)^(0+128)+5)
  5937                           
  5938                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  5939  0472  3001               	movlw	1
  5940  0473  0247               	subwf	((_RF1+1)^(0+128)+7),w
  5941  0474  302C               	movlw	44
  5942  0475  1903               	skipnz
  5943  0476  0246               	subwf	(_RF1^(0+128)+7),w
  5944  0477  1803               	skipnc
  5945  0478  2C93               	goto	l7752
  5946                           
  5947                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  5948  0479  300A               	movlw	10
  5949  047A  07C6               	addwf	(_RF1^(0+128)+7),f
  5950  047B  3000               	movlw	0
  5951  047C  3DC7               	addwfc	((_RF1+1)^(0+128)+7),f
  5952                           
  5953                           ;RF_Control_B1.c: 134: }
  5954                           ;RF_Control_B1.c: 135: }
  5955                           ;RF_Control_B1.c: 136: }
  5956                           ;RF_Control_B1.c: 137: }
  5957                           ;RF_Control_B1.c: 138: } else {
  5958  047D  2C93               	goto	l7752
  5959  047E                     l1887:	
  5960                           
  5961                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  5962  047E  1DBF               	btfss	_RF1^(0+128),3
  5963  047F  18BF               	btfsc	_RF1^(0+128),1
  5964  0480  2C93               	goto	l7752
  5965                           
  5966                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  5967  0481  15BF               	bsf	_RF1^(0+128),3
  5968                           
  5969                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  5970  0482  16C0               	bsf	(_RF1^(0+128)+1),5
  5971                           
  5972                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  5973  0483  3036               	movlw	54
  5974  0484  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5975                           
  5976                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  5977  0487  303B               	movlw	59
  5978  0488  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5979                           
  5980                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  5981  048B  303A               	movlw	58
  5982  048C  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5983                           
  5984                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  5985  048F  3034               	movlw	52
  5986  0490  3192  22E7  3183   	fcall	_CC2500_WriteCommand
  5987  0493                     l7752:	
  5988                           
  5989                           ;RF_Control_B1.c: 149: }
  5990                           ;RF_Control_B1.c: 151: }
  5991                           ;RF_Control_B1.c: 152: }
  5992                           ;RF_Control_B1.c: 153: }
  5993                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  5994  0493  0021               	movlb	1	; select bank1
  5995  0494  1DBF               	btfss	_RF1^(0+128),3
  5996  0495  2CB4               	goto	l7764
  5997                           
  5998                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  5999  0496  3001               	movlw	1
  6000  0497  07C4               	addwf	(_RF1^(0+128)+5),f
  6001  0498  3000               	movlw	0
  6002  0499  3DC5               	addwfc	((_RF1+1)^(0+128)+5),f
  6003                           
  6004                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  6005  049A  3005               	movlw	5
  6006  049B  3EBF               	addlw	_RF1& (0+255)
  6007  049C  0086               	movwf	6
  6008  049D  0187               	clrf	7
  6009  049E  3F40               	moviw [0]fsr1
  6010  049F  3A64               	xorlw	100
  6011  04A0  1D03               	skipz
  6012  04A1  2CA4               	goto	u7785
  6013  04A2  3F41               	moviw [1]fsr1
  6014  04A3  3A00               	xorlw	0
  6015  04A4                     u7785:	
  6016  04A4  1D03               	skipz
  6017  04A5  2CB4               	goto	l7764
  6018                           
  6019                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  6020  04A6  01C4               	clrf	(_RF1^(0+128)+5)
  6021  04A7  01C5               	clrf	((_RF1+1)^(0+128)+5)
  6022                           
  6023                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  6024  04A8  01C3               	clrf	(_RF1^(0+128)+4)
  6025                           
  6026                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  6027  04A9  3000               	movlw	0
  6028  04AA  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6029  04AB  3015               	movlw	21
  6030  04AC  1903               	skipnz
  6031  04AD  0246               	subwf	(_RF1^(0+128)+7),w
  6032  04AE  1C03               	skipc
  6033  04AF  2CB4               	goto	l7764
  6034                           
  6035                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  6036  04B0  300A               	movlw	10
  6037  04B1  02C6               	subwf	(_RF1^(0+128)+7),f
  6038  04B2  3000               	movlw	0
  6039  04B3  3BC7               	subwfb	((_RF1+1)^(0+128)+7),f
  6040  04B4                     l7764:	
  6041                           
  6042                           ;RF_Control_B1.c: 161: }
  6043                           ;RF_Control_B1.c: 162: }
  6044                           ;RF_Control_B1.c: 163: }
  6045                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  6046  04B4  1EC0               	btfss	(_RF1^(0+128)+1),5
  6047  04B5  0008               	return
  6048                           
  6049                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  6050  04B6  3001               	movlw	1
  6051  04B7  07C9               	addwf	(_RF1^(0+128)+10),f
  6052  04B8  3000               	movlw	0
  6053  04B9  3DCA               	addwfc	((_RF1+1)^(0+128)+10),f
  6054                           
  6055                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  6056  04BA  3075               	movlw	117
  6057  04BB  024A               	subwf	((_RF1+1)^(0+128)+10),w
  6058  04BC  3030               	movlw	48
  6059  04BD  1903               	skipnz
  6060  04BE  0249               	subwf	(_RF1^(0+128)+10),w
  6061  04BF  1C03               	skipc
  6062  04C0  0008               	return
  6063                           
  6064                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  6065  04C1  01C9               	clrf	(_RF1^(0+128)+10)
  6066  04C2  01CA               	clrf	((_RF1+1)^(0+128)+10)
  6067                           
  6068                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  6069  04C3  11BF               	bcf	_RF1^(0+128),3
  6070                           
  6071                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  6072  04C4  10BF               	bcf	_RF1^(0+128),1
  6073  04C5  0008               	return
  6074  04C6                     __end_of_setRF_Main:	
  6075                           
  6076                           	psect	text20
  6077  0AD6                     __ptext20:	
  6078 ;; *************** function _getRxData *****************
  6079 ;; Defined at:
  6080 ;;		line 252 in file "../src/RF_Control_B1.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;		None
  6085 ;; Return value:  Size  Location     Type
  6086 ;;		None               void
  6087 ;; Registers used:
  6088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;Total ram usage:        0 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:   12
  6101 ;; This function calls:
  6102 ;;		_setControl_Lights_Table
  6103 ;;		_setLog_Code
  6104 ;; This function is called by:
  6105 ;;		_setRF_Main
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           
  6110                           ;psect for function _getRxData
  6111  0AD6                     _getRxData:	
  6112                           
  6113                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6117  0AD6  0021               	movlb	1	; select bank1
  6118  0AD7  1F3F               	btfss	_RF1^(0+128),6
  6119  0AD8  2AE9               	goto	l7566
  6120                           
  6121                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6122  0AD9  0022               	movlb	2	; select bank2
  6123  0ADA  08A0               	movf	_RF_Data^(0+256),f
  6124  0ADB  1D03               	skipz
  6125  0ADC  2AE6               	goto	l1918
  6126  0ADD  0821               	movf	(_RF_Data^(0+256)+1),w
  6127  0ADE  3A64               	xorlw	100
  6128  0ADF  1D03               	skipz
  6129  0AE0  2AE6               	goto	l1918
  6130                           
  6131                           ;RF_Control_B1.c: 255: setLog_Code();
  6132  0AE1  3195  2580         	fcall	_setLog_Code
  6133                           
  6134                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  6135  0AE3  0021               	movlb	1	; select bank1
  6136  0AE4  15C0               	bsf	(_RF1^(0+128)+1),3
  6137                           
  6138                           ;RF_Control_B1.c: 257: } else {
  6139  0AE5  0008               	return
  6140  0AE6                     l1918:	
  6141                           
  6142                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  6143  0AE6  0021               	movlb	1	; select bank1
  6144  0AE7  11C0               	bcf	(_RF1^(0+128)+1),3
  6145                           
  6146                           ;RF_Control_B1.c: 259: }
  6147                           ;RF_Control_B1.c: 260: } else {
  6148  0AE8  0008               	return
  6149  0AE9                     l7566:	
  6150                           
  6151                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6152  0AE9  0022               	movlb	2	; select bank2
  6153  0AEA  08A0               	movf	_RF_Data^(0+256),f
  6154  0AEB  1D03               	skipz
  6155  0AEC  2B27               	goto	l7588
  6156  0AED  0821               	movf	(_RF_Data^(0+256)+1),w
  6157  0AEE  3A02               	xorlw	2
  6158  0AEF  1D03               	skipz
  6159  0AF0  2B27               	goto	l7588
  6160                           
  6161                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6162  0AF1  082C               	movf	(_RF_Data^(0+256)+12),w
  6163  0AF2  3AFF               	xorlw	255
  6164  0AF3  1D03               	skipz
  6165  0AF4  2B01               	goto	l7578
  6166  0AF5  082D               	movf	(_RF_Data^(0+256)+13),w
  6167  0AF6  3AFF               	xorlw	255
  6168  0AF7  1D03               	skipz
  6169  0AF8  2B01               	goto	l7578
  6170  0AF9  082E               	movf	(_RF_Data^(0+256)+14),w
  6171  0AFA  3AFF               	xorlw	255
  6172  0AFB  1D03               	skipz
  6173  0AFC  2B01               	goto	l7578
  6174                           
  6175                           ;RF_Control_B1.c: 264: __nop();
  6176  0AFD  0000               	nop
  6177                           
  6178                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  6179  0AFE  0021               	movlb	1	; select bank1
  6180  0AFF  11C0               	bcf	(_RF1^(0+128)+1),3
  6181                           
  6182                           ;RF_Control_B1.c: 266: } else {
  6183  0B00  0008               	return
  6184  0B01                     l7578:	
  6185                           
  6186                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6187  0B01  0020               	movlb	0	; select bank0
  6188  0B02  086E               	movf	_product,w
  6189  0B03  3E0C               	addlw	12
  6190  0B04  0086               	movwf	6
  6191  0B05  3001               	movlw	1	; select bank2/3
  6192  0B06  0087               	movwf	7
  6193  0B07  0022               	movlb	2	; select bank2
  6194  0B08  082C               	movf	(_RF_Data^(0+256)+12),w
  6195  0B09  0601               	xorwf	1,w
  6196  0B0A  1D03               	skipz
  6197  0B0B  0008               	return
  6198  0B0C  0020               	movlb	0	; select bank0
  6199  0B0D  086E               	movf	_product,w
  6200  0B0E  3E0D               	addlw	13
  6201  0B0F  0086               	movwf	6
  6202  0B10  3001               	movlw	1	; select bank2/3
  6203  0B11  0087               	movwf	7
  6204  0B12  0022               	movlb	2	; select bank2
  6205  0B13  082D               	movf	(_RF_Data^(0+256)+13),w
  6206  0B14  0601               	xorwf	1,w
  6207  0B15  1D03               	skipz
  6208  0B16  0008               	return
  6209  0B17  0020               	movlb	0	; select bank0
  6210  0B18  086E               	movf	_product,w
  6211  0B19  3E0E               	addlw	14
  6212  0B1A  0086               	movwf	6
  6213  0B1B  3001               	movlw	1	; select bank2/3
  6214  0B1C  0087               	movwf	7
  6215  0B1D  0022               	movlb	2	; select bank2
  6216  0B1E  082E               	movf	(_RF_Data^(0+256)+14),w
  6217  0B1F  0601               	xorwf	1,w
  6218  0B20  1D03               	skipz
  6219  0B21  0008               	return
  6220                           
  6221                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  6222  0B22  318E  26E5         	fcall	_setControl_Lights_Table
  6223                           
  6224                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  6225  0B24  0021               	movlb	1	; select bank1
  6226  0B25  15C0               	bsf	(_RF1^(0+128)+1),3
  6227                           
  6228                           ;RF_Control_B1.c: 270: }
  6229                           ;RF_Control_B1.c: 271: }
  6230                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6231  0B26  0008               	return
  6232  0B27                     l7588:	
  6233  0B27  0022               	movlb	2	; select bank2
  6234  0B28  0820               	movf	_RF_Data^(0+256),w
  6235  0B29  3AFF               	xorlw	255
  6236  0B2A  1D03               	skipz
  6237  0B2B  2B32               	goto	l7594
  6238  0B2C  0821               	movf	(_RF_Data^(0+256)+1),w
  6239  0B2D  3A02               	xorlw	2
  6240  0B2E  1D03               	skipz
  6241  0B2F  2B32               	goto	l7594
  6242                           
  6243                           ;RF_Control_B1.c: 273: __nop();
  6244  0B30  0000               	nop
  6245                           
  6246                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6247  0B31  0008               	return
  6248  0B32                     l7594:	
  6249  0B32  0022               	movlb	2	; select bank2
  6250  0B33  08A0               	movf	_RF_Data^(0+256),f
  6251  0B34  1D03               	skipz
  6252  0B35  2B3C               	goto	l1928
  6253  0B36  0821               	movf	(_RF_Data^(0+256)+1),w
  6254  0B37  3A65               	xorlw	101
  6255  0B38  1D03               	skipz
  6256  0B39  2B3C               	goto	l1928
  6257                           
  6258                           ;RF_Control_B1.c: 275: __nop();
  6259  0B3A  0000               	nop
  6260                           
  6261                           ;RF_Control_B1.c: 276: } else {
  6262  0B3B  0008               	return
  6263  0B3C                     l1928:	
  6264                           
  6265                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  6266  0B3C  0021               	movlb	1	; select bank1
  6267  0B3D  11C0               	bcf	(_RF1^(0+128)+1),3
  6268  0B3E  0008               	return
  6269  0B3F                     __end_of_getRxData:	
  6270                           
  6271                           	psect	text21
  6272  1580                     __ptext21:	
  6273 ;; *************** function _setLog_Code *****************
  6274 ;; Defined at:
  6275 ;;		line 287 in file "../src/RF_Control_B1.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;		None
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;		None               void
  6282 ;; Registers used:
  6283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;Total ram usage:        1 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    7
  6296 ;; This function calls:
  6297 ;;		_setBuz
  6298 ;; This function is called by:
  6299 ;;		_getRxData
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           
  6304                           ;psect for function _setLog_Code
  6305  1580                     _setLog_Code:	
  6306                           
  6307                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  6308                           
  6309                           ;incstack = 0
  6310                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6311  1580  0022               	movlb	2	; select bank2
  6312  1581  082C               	movf	(_RF_Data^(0+256)+12),w
  6313  1582  0020               	movlb	0	; select bank0
  6314  1583  00AD               	movwf	??_setLog_Code
  6315  1584  086E               	movf	_product,w
  6316  1585  3E0C               	addlw	12
  6317  1586  0086               	movwf	6
  6318  1587  3001               	movlw	1	; select bank2/3
  6319  1588  0087               	movwf	7
  6320  1589  082D               	movf	??_setLog_Code,w
  6321  158A  0081               	movwf	1
  6322                           
  6323                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  6324  158B  0022               	movlb	2	; select bank2
  6325  158C  082D               	movf	(_RF_Data^(0+256)+13),w
  6326  158D  0020               	movlb	0	; select bank0
  6327  158E  00AD               	movwf	??_setLog_Code
  6328  158F  086E               	movf	_product,w
  6329  1590  3E0D               	addlw	13
  6330  1591  0086               	movwf	6
  6331  1592  3001               	movlw	1	; select bank2/3
  6332  1593  0087               	movwf	7
  6333  1594  082D               	movf	??_setLog_Code,w
  6334  1595  0081               	movwf	1
  6335                           
  6336                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  6337  1596  0022               	movlb	2	; select bank2
  6338  1597  082E               	movf	(_RF_Data^(0+256)+14),w
  6339  1598  0020               	movlb	0	; select bank0
  6340  1599  00AD               	movwf	??_setLog_Code
  6341  159A  086E               	movf	_product,w
  6342  159B  3E0E               	addlw	14
  6343  159C  0086               	movwf	6
  6344  159D  3001               	movlw	1	; select bank2/3
  6345  159E  0087               	movwf	7
  6346  159F  082D               	movf	??_setLog_Code,w
  6347  15A0  0081               	movwf	1
  6348                           
  6349                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  6350  15A1  3064               	movlw	100
  6351  15A2  00A9               	movwf	setBuz@time
  6352  15A3  3000               	movlw	0
  6353  15A4  00AA               	movwf	setBuz@time+1
  6354  15A5  3001               	movlw	1
  6355  15A6  3187  27A7  3195   	fcall	_setBuz
  6356                           
  6357                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  6358  15A9  0021               	movlb	1	; select bank1
  6359  15AA  133F               	bcf	_RF1^(0+128),6
  6360                           
  6361                           ;RF_Control_B1.c: 293: if (myMain.First) {
  6362  15AB  1C21               	btfss	(_myMain^(0+128)+1),0
  6363  15AC  2DAF               	goto	l1933
  6364                           
  6365                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  6366  15AD  0023               	movlb	3	; select bank3
  6367  15AE  1544               	bsf	(_Memory^(0+384)+36),2
  6368  15AF                     l1933:	
  6369                           
  6370                           ;RF_Control_B1.c: 295: }
  6371                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  6372  15AF  0023               	movlb	3	; select bank3
  6373  15B0  1444               	bsf	(_Memory^(0+384)+36),0
  6374  15B1  0008               	return
  6375  15B2                     __end_of_setLog_Code:	
  6376                           
  6377                           	psect	text22
  6378  0EE5                     __ptext22:	
  6379 ;; *************** function _setControl_Lights_Table *****************
  6380 ;; Defined at:
  6381 ;;		line 300 in file "../src/RF_Control_B1.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        0 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:   11
  6402 ;; This function calls:
  6403 ;;		_setBuz
  6404 ;;		_setDimmerLights
  6405 ;;		_setRFSW_AdjControl
  6406 ;;		_setRFSW_Control
  6407 ;;		_setRFSW_Status
  6408 ;;		_setSw_Status
  6409 ;;		_setTxData
  6410 ;; This function is called by:
  6411 ;;		_getRxData
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           
  6416                           ;psect for function _setControl_Lights_Table
  6417  0EE5                     _setControl_Lights_Table:	
  6418                           
  6419                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  6420                           
  6421                           ;incstack = 0
  6422                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6423  0EE5  0022               	movlb	2	; select bank2
  6424  0EE6  08AF               	movf	(_RF_Data^(0+256)+15),f
  6425  0EE7  1D03               	skipz
  6426  0EE8  2F31               	goto	l7534
  6427                           
  6428                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  6429  0EE9  0020               	movlb	0	; select bank0
  6430  0EEA  01A3               	clrf	setDimmerLights@status
  6431  0EEB  3001               	movlw	1
  6432  0EEC  318D  25D8  318E   	fcall	_setDimmerLights
  6433                           
  6434                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  6435  0EEF  0020               	movlb	0	; select bank0
  6436  0EF0  01A2               	clrf	setRFSW_Status@command
  6437  0EF1  3001               	movlw	1
  6438  0EF2  3190  20F1  318E   	fcall	_setRFSW_Status
  6439                           
  6440                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  6441  0EF5  0020               	movlb	0	; select bank0
  6442  0EF6  01A2               	clrf	setSw_Status@command
  6443  0EF7  3001               	movlw	1
  6444  0EF8  3191  2100  318E   	fcall	_setSw_Status
  6445                           
  6446                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  6447  0EFB  0020               	movlb	0	; select bank0
  6448  0EFC  01A3               	clrf	setDimmerLights@status
  6449  0EFD  3002               	movlw	2
  6450  0EFE  318D  25D8  318E   	fcall	_setDimmerLights
  6451                           
  6452                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  6453  0F01  0020               	movlb	0	; select bank0
  6454  0F02  01A2               	clrf	setRFSW_Status@command
  6455  0F03  3002               	movlw	2
  6456  0F04  3190  20F1  318E   	fcall	_setRFSW_Status
  6457                           
  6458                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  6459  0F07  0020               	movlb	0	; select bank0
  6460  0F08  01A2               	clrf	setSw_Status@command
  6461  0F09  3002               	movlw	2
  6462  0F0A  3191  2100  318E   	fcall	_setSw_Status
  6463                           
  6464                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  6465  0F0D  0020               	movlb	0	; select bank0
  6466  0F0E  086E               	movf	_product,w
  6467  0F0F  3E09               	addlw	9
  6468  0F10  0086               	movwf	6
  6469  0F11  3001               	movlw	1	; select bank2/3
  6470  0F12  0087               	movwf	7
  6471  0F13  0181               	clrf	1
  6472                           
  6473                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  6474  0F14  086E               	movf	_product,w
  6475  0F15  3E0B               	addlw	11
  6476  0F16  0086               	movwf	6
  6477  0F17  3001               	movlw	1	; select bank2/3
  6478  0F18  0087               	movwf	7
  6479  0F19  0181               	clrf	1
  6480                           
  6481                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  6482  0F1A  086E               	movf	_product,w
  6483  0F1B  3E0F               	addlw	15
  6484  0F1C  0086               	movwf	6
  6485  0F1D  3001               	movlw	1	; select bank2/3
  6486  0F1E  0087               	movwf	7
  6487  0F1F  0181               	clrf	1
  6488                           
  6489                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  6490  0F20  086E               	movf	_product,w
  6491  0F21  3E11               	addlw	17
  6492  0F22  0086               	movwf	6
  6493  0F23  3001               	movlw	1	; select bank2/3
  6494  0F24  0087               	movwf	7
  6495  0F25  0181               	clrf	1
  6496                           
  6497                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  6498  0F26  3064               	movlw	100
  6499  0F27  00A9               	movwf	setBuz@time
  6500  0F28  3000               	movlw	0
  6501  0F29  00AA               	movwf	setBuz@time+1
  6502  0F2A  3001               	movlw	1
  6503  0F2B  3187  27A7  318E   	fcall	_setBuz
  6504                           
  6505                           ;RF_Control_B1.c: 323: setTxData();
  6506  0F2E  3185  258D         	fcall	_setTxData
  6507                           
  6508                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  6509  0F30  0008               	return
  6510  0F31                     l7534:	
  6511  0F31  0022               	movlb	2	; select bank2
  6512  0F32  082F               	movf	(_RF_Data^(0+256)+15),w
  6513  0F33  3A20               	xorlw	32
  6514  0F34  1D03               	skipz
  6515  0F35  2F4C               	goto	l7540
  6516                           
  6517                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  6518  0F36  0020               	movlb	0	; select bank0
  6519  0F37  086E               	movf	_product,w
  6520  0F38  3E09               	addlw	9
  6521  0F39  0086               	movwf	6
  6522  0F3A  3001               	movlw	1	; select bank2/3
  6523  0F3B  0087               	movwf	7
  6524  0F3C  0181               	clrf	1
  6525                           
  6526                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  6527  0F3D  086E               	movf	_product,w
  6528  0F3E  3E0B               	addlw	11
  6529  0F3F  0086               	movwf	6
  6530  0F40  3001               	movlw	1	; select bank2/3
  6531  0F41  0087               	movwf	7
  6532  0F42  0181               	clrf	1
  6533                           
  6534                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  6535  0F43  086E               	movf	_product,w
  6536  0F44  3E11               	addlw	17
  6537  0F45  0086               	movwf	6
  6538  0F46  3001               	movlw	1	; select bank2/3
  6539  0F47  0087               	movwf	7
  6540  0F48  0181               	clrf	1
  6541                           
  6542                           ;RF_Control_B1.c: 328: setTxData();
  6543  0F49  3185  258D         	fcall	_setTxData
  6544                           
  6545                           ;RF_Control_B1.c: 329: }
  6546  0F4B  0008               	return
  6547  0F4C                     l7540:	
  6548                           
  6549                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  6550  0F4C  0022               	movlb	2	; select bank2
  6551  0F4D  082F               	movf	(_RF_Data^(0+256)+15),w
  6552  0F4E  3A01               	xorlw	1
  6553  0F4F  1D03               	skipz
  6554  0F50  2F55               	goto	l7544
  6555                           
  6556                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  6557  0F51  3001               	movlw	1
  6558  0F52  318F  2770         	fcall	_setRFSW_Control
  6559                           
  6560                           ;RF_Control_B1.c: 333: }
  6561  0F54  0008               	return
  6562  0F55                     l7544:	
  6563                           
  6564                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  6565  0F55  0022               	movlb	2	; select bank2
  6566  0F56  082F               	movf	(_RF_Data^(0+256)+15),w
  6567  0F57  3A11               	xorlw	17
  6568  0F58  1D03               	skipz
  6569  0F59  2F5E               	goto	l7548
  6570                           
  6571                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  6572  0F5A  3001               	movlw	1
  6573  0F5B  3195  25E7         	fcall	_setRFSW_AdjControl
  6574                           
  6575                           ;RF_Control_B1.c: 337: }
  6576  0F5D  0008               	return
  6577  0F5E                     l7548:	
  6578                           
  6579                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  6580  0F5E  0022               	movlb	2	; select bank2
  6581  0F5F  082F               	movf	(_RF_Data^(0+256)+15),w
  6582  0F60  3A02               	xorlw	2
  6583  0F61  1D03               	skipz
  6584  0F62  2F67               	goto	l7552
  6585                           
  6586                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  6587  0F63  3002               	movlw	2
  6588  0F64  318F  2770         	fcall	_setRFSW_Control
  6589                           
  6590                           ;RF_Control_B1.c: 344: }
  6591  0F66  0008               	return
  6592  0F67                     l7552:	
  6593                           
  6594                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  6595  0F67  0022               	movlb	2	; select bank2
  6596  0F68  082F               	movf	(_RF_Data^(0+256)+15),w
  6597  0F69  3A21               	xorlw	33
  6598  0F6A  1D03               	skipz
  6599  0F6B  0008               	return
  6600                           
  6601                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  6602  0F6C  3002               	movlw	2
  6603  0F6D  3195  25E7         	fcall	_setRFSW_AdjControl
  6604  0F6F  0008               	return
  6605  0F70                     __end_of_setControl_Lights_Table:	
  6606                           
  6607                           	psect	text23
  6608  0F70                     __ptext23:	
  6609 ;; *************** function _setRFSW_Control *****************
  6610 ;; Defined at:
  6611 ;;		line 388 in file "../src/RF_Control_B1.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  sw              1    wreg     unsigned char 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  sw              1   67[BANK0 ] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;		None               void
  6618 ;; Registers used:
  6619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;Total ram usage:        2 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    9
  6632 ;; This function calls:
  6633 ;;		_RfSWPointSelect
  6634 ;;		_setBuz
  6635 ;;		_setDelayOff_GO
  6636 ;;		_setDimmerLights_Switch
  6637 ;;		_setDimmerLights_Trigger
  6638 ;;		_setRF_DimmerLights
  6639 ;;		_setSw_Status
  6640 ;;		_setTxData
  6641 ;; This function is called by:
  6642 ;;		_setControl_Lights_Table
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _setRFSW_Control
  6648  0F70                     _setRFSW_Control:	
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6652                           ;setRFSW_Control@sw stored from wreg
  6653  0F70  0020               	movlb	0	; select bank0
  6654  0F71  00E3               	movwf	setRFSW_Control@sw
  6655                           
  6656                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  6657  0F72  0863               	movf	setRFSW_Control@sw,w
  6658  0F73  3192  228D  318F   	fcall	_RfSWPointSelect
  6659                           
  6660                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  6661  0F76  0021               	movlb	1	; select bank1
  6662  0F77  0859               	movf	_RFSW^(0+128),w
  6663  0F78  0086               	movwf	6
  6664  0F79  0187               	clrf	7
  6665  0F7A  1801               	btfsc	1,0
  6666  0F7B  2FB2               	goto	l5906
  6667                           
  6668                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  6669  0F7C  0022               	movlb	2	; select bank2
  6670  0F7D  0830               	movf	(_RF_Data^(0+256)+16),w
  6671  0F7E  3A80               	xorlw	128
  6672  0F7F  1D03               	skipz
  6673  0F80  2F8E               	goto	l5896
  6674                           
  6675                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  6676  0F81  0020               	movlb	0	; select bank0
  6677  0F82  01AA               	clrf	setDelayOff_GO@command
  6678  0F83  0AAA               	incf	setDelayOff_GO@command,f
  6679  0F84  0022               	movlb	2	; select bank2
  6680  0F85  0831               	movf	(_RF_Data^(0+256)+17),w
  6681  0F86  0020               	movlb	0	; select bank0
  6682  0F87  00E2               	movwf	??_setRFSW_Control
  6683  0F88  0862               	movf	??_setRFSW_Control,w
  6684  0F89  00AB               	movwf	setDelayOff_GO@value
  6685  0F8A  0863               	movf	setRFSW_Control@sw,w
  6686  0F8B  3189  214F  318F   	fcall	_setDelayOff_GO
  6687  0F8E                     l5896:	
  6688                           
  6689                           ;RF_Control_B1.c: 393: }
  6690                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  6691  0F8E  0021               	movlb	1	; select bank1
  6692  0F8F  0859               	movf	_RFSW^(0+128),w
  6693  0F90  0086               	movwf	6
  6694  0F91  0187               	clrf	7
  6695  0F92  1401               	bsf	1,0
  6696                           
  6697                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  6698  0F93  0020               	movlb	0	; select bank0
  6699  0F94  01A2               	clrf	setSw_Status@command
  6700  0F95  0AA2               	incf	setSw_Status@command,f
  6701  0F96  0863               	movf	setRFSW_Control@sw,w
  6702  0F97  3191  2100  318F   	fcall	_setSw_Status
  6703                           
  6704                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  6705  0F9A  0020               	movlb	0	; select bank0
  6706  0F9B  01A2               	clrf	setDimmerLights_Trigger@command
  6707  0F9C  0AA2               	incf	setDimmerLights_Trigger@command,f
  6708  0F9D  0863               	movf	setRFSW_Control@sw,w
  6709  0F9E  3191  213D  318F   	fcall	_setDimmerLights_Trigger
  6710                           
  6711                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  6712  0FA1  0020               	movlb	0	; select bank0
  6713  0FA2  01A2               	clrf	setDimmerLights_Switch@command
  6714  0FA3  0AA2               	incf	setDimmerLights_Switch@command,f
  6715  0FA4  0863               	movf	setRFSW_Control@sw,w
  6716  0FA5  3191  212D  318F   	fcall	_setDimmerLights_Switch
  6717                           
  6718                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  6719  0FA8  0021               	movlb	1	; select bank1
  6720  0FA9  0859               	movf	_RFSW^(0+128),w
  6721  0FAA  0086               	movwf	6
  6722  0FAB  0187               	clrf	7
  6723  0FAC  3000               	movlw	0
  6724  0FAD  1801               	btfsc	1,0
  6725  0FAE  3001               	movlw	1
  6726  0FAF  0020               	movlb	0	; select bank0
  6727  0FB0  00DD               	movwf	setRF_DimmerLights@on
  6728  0FB1  2FF0               	goto	L2
  6729  0FB2                     l5906:	
  6730                           ;RF_Control_B1.c: 401: } else {
  6731                           
  6732                           
  6733                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  6734  0FB2  0022               	movlb	2	; select bank2
  6735  0FB3  0830               	movf	(_RF_Data^(0+256)+16),w
  6736  0FB4  3A80               	xorlw	128
  6737  0FB5  1D03               	skipz
  6738  0FB6  2FC8               	goto	l5910
  6739                           
  6740                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  6741  0FB7  0020               	movlb	0	; select bank0
  6742  0FB8  01AA               	clrf	setDelayOff_GO@command
  6743  0FB9  0AAA               	incf	setDelayOff_GO@command,f
  6744  0FBA  0022               	movlb	2	; select bank2
  6745  0FBB  0831               	movf	(_RF_Data^(0+256)+17),w
  6746  0FBC  0020               	movlb	0	; select bank0
  6747  0FBD  00E2               	movwf	??_setRFSW_Control
  6748  0FBE  0862               	movf	??_setRFSW_Control,w
  6749  0FBF  00AB               	movwf	setDelayOff_GO@value
  6750  0FC0  0863               	movf	setRFSW_Control@sw,w
  6751  0FC1  3189  214F  318F   	fcall	_setDelayOff_GO
  6752                           
  6753                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  6754  0FC4  0020               	movlb	0	; select bank0
  6755  0FC5  01DD               	clrf	setRF_DimmerLights@on
  6756  0FC6  0ADD               	incf	setRF_DimmerLights@on,f
  6757  0FC7  2FF0               	goto	L2
  6758  0FC8                     l5910:	
  6759                           ;RF_Control_B1.c: 405: } else {
  6760                           
  6761                           
  6762                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  6763  0FC8  0021               	movlb	1	; select bank1
  6764  0FC9  0859               	movf	_RFSW^(0+128),w
  6765  0FCA  0086               	movwf	6
  6766  0FCB  0187               	clrf	7
  6767  0FCC  1001               	bcf	1,0
  6768                           
  6769                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  6770  0FCD  0020               	movlb	0	; select bank0
  6771  0FCE  01A2               	clrf	setSw_Status@command
  6772  0FCF  0863               	movf	setRFSW_Control@sw,w
  6773  0FD0  3191  2100  318F   	fcall	_setSw_Status
  6774                           
  6775                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  6776  0FD3  0020               	movlb	0	; select bank0
  6777  0FD4  01A2               	clrf	setDimmerLights_Trigger@command
  6778  0FD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  6779  0FD6  0863               	movf	setRFSW_Control@sw,w
  6780  0FD7  3191  213D  318F   	fcall	_setDimmerLights_Trigger
  6781                           
  6782                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  6783  0FDA  0021               	movlb	1	; select bank1
  6784  0FDB  0859               	movf	_RFSW^(0+128),w
  6785  0FDC  0086               	movwf	6
  6786  0FDD  0187               	clrf	7
  6787  0FDE  3000               	movlw	0
  6788  0FDF  1801               	btfsc	1,0
  6789  0FE0  3001               	movlw	1
  6790  0FE1  0020               	movlb	0	; select bank0
  6791  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  6792  0FE3  0863               	movf	setRFSW_Control@sw,w
  6793  0FE4  3191  212D  318F   	fcall	_setDimmerLights_Switch
  6794                           
  6795                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  6796  0FE7  0020               	movlb	0	; select bank0
  6797  0FE8  01AA               	clrf	setDelayOff_GO@command
  6798  0FE9  01AB               	clrf	setDelayOff_GO@value
  6799  0FEA  0863               	movf	setRFSW_Control@sw,w
  6800  0FEB  3189  214F  318F   	fcall	_setDelayOff_GO
  6801                           
  6802                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  6803  0FEE  0020               	movlb	0	; select bank0
  6804  0FEF  01DD               	clrf	setRF_DimmerLights@on
  6805  0FF0                     L2:	
  6806  0FF0  0863               	movf	setRFSW_Control@sw,w
  6807  0FF1  318B  23AA  318F   	fcall	_setRF_DimmerLights
  6808                           
  6809                           ;RF_Control_B1.c: 414: }
  6810                           ;RF_Control_B1.c: 415: }
  6811                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  6812  0FF4  3064               	movlw	100
  6813  0FF5  0020               	movlb	0	; select bank0
  6814  0FF6  00A9               	movwf	setBuz@time
  6815  0FF7  3000               	movlw	0
  6816  0FF8  00AA               	movwf	setBuz@time+1
  6817  0FF9  3001               	movlw	1
  6818  0FFA  3187  27A7  318F   	fcall	_setBuz
  6819                           
  6820                           ;RF_Control_B1.c: 417: setTxData();
  6821  0FFD  3185  258D         	fcall	_setTxData
  6822  0FFF  0008               	return
  6823  1000                     __end_of_setRFSW_Control:	
  6824                           
  6825                           	psect	text24
  6826  094F                     __ptext24:	
  6827 ;; *************** function _setDelayOff_GO *****************
  6828 ;; Defined at:
  6829 ;;		line 86 in file "../src/DelayOff_B1.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;  sw              1    wreg     unsigned char 
  6832 ;;  command         1   10[BANK0 ] unsigned char 
  6833 ;;  value           1   11[BANK0 ] unsigned char 
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;  sw              1   14[BANK0 ] unsigned char 
  6836 ;; Return value:  Size  Location     Type
  6837 ;;		None               void
  6838 ;; Registers used:
  6839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6845 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;Total ram usage:        5 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; Hardware stack levels required when called:    7
  6852 ;; This function calls:
  6853 ;;		_DelayOffPointSelect
  6854 ;;		_DelayTimejudge
  6855 ;; This function is called by:
  6856 ;;		_setRFSW_Control
  6857 ;;		_Sw_DimmerOffFunc
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           
  6862                           ;psect for function _setDelayOff_GO
  6863  094F                     _setDelayOff_GO:	
  6864                           
  6865                           ;incstack = 0
  6866                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6867                           ;setDelayOff_GO@sw stored from wreg
  6868  094F  0020               	movlb	0	; select bank0
  6869  0950  00AE               	movwf	setDelayOff_GO@sw
  6870                           
  6871                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  6872  0951  082E               	movf	setDelayOff_GO@sw,w
  6873  0952  3192  2212  3189   	fcall	_DelayOffPointSelect
  6874                           
  6875                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  6876  0955  0878               	movf	_DelayOff,w
  6877  0956  0086               	movwf	6
  6878  0957  0187               	clrf	7
  6879  0958  1C01               	btfss	1,0
  6880  0959  0008               	return
  6881                           
  6882                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  6883  095A  0020               	movlb	0	; select bank0
  6884  095B  082A               	movf	setDelayOff_GO@command,w
  6885  095C  3A01               	xorlw	1
  6886  095D  3000               	movlw	0
  6887  095E  1903               	skipnz
  6888  095F  3001               	movlw	1
  6889  0960  00AC               	movwf	??_setDelayOff_GO
  6890  0961  0878               	movf	_DelayOff,w
  6891  0962  0086               	movwf	6
  6892  0963  0187               	clrf	7
  6893  0964  0DAC               	rlf	??_setDelayOff_GO,f
  6894  0965  0801               	movf	1,w
  6895  0966  062C               	xorwf	??_setDelayOff_GO,w
  6896  0967  39FD               	andlw	-3
  6897  0968  062C               	xorwf	??_setDelayOff_GO,w
  6898  0969  0081               	movwf	1
  6899                           
  6900                           ;DelayOff_B1.c: 90: if (command == 1) {
  6901  096A  082A               	movf	setDelayOff_GO@command,w
  6902  096B  3A01               	xorlw	1
  6903  096C  1D03               	skipz
  6904  096D  2997               	goto	l5730
  6905                           
  6906                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  6907  096E  082B               	movf	setDelayOff_GO@value,w
  6908  096F  3194  24CF  3189   	fcall	_DelayTimejudge
  6909  0972  0020               	movlb	0	; select bank0
  6910  0973  00AC               	movwf	??_setDelayOff_GO
  6911  0974  0878               	movf	_DelayOff,w
  6912  0975  0086               	movwf	6
  6913  0976  0187               	clrf	7
  6914  0977  082C               	movf	??_setDelayOff_GO,w
  6915  0978  0081               	movwf	1
  6916                           
  6917                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  6918  0979  300F               	movlw	15
  6919  097A  052B               	andwf	setDelayOff_GO@value,w
  6920  097B  00AC               	movwf	??_setDelayOff_GO
  6921  097C  082C               	movf	??_setDelayOff_GO,w
  6922  097D  3A05               	xorlw	5
  6923  097E  1903               	skipnz
  6924  097F  2984               	goto	l5724
  6925  0980  082B               	movf	setDelayOff_GO@value,w
  6926  0981  390F               	andlw	15
  6927  0982  1D03               	btfss	3,2
  6928  0983  298A               	goto	l5728
  6929  0984                     l5724:	
  6930  0984  3026               	movlw	38
  6931  0985  022B               	subwf	setDelayOff_GO@value,w
  6932  0986  1803               	skipnc
  6933  0987  298A               	goto	l5728
  6934                           
  6935                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  6936  0988  082B               	movf	setDelayOff_GO@value,w
  6937  0989  298B               	goto	L3
  6938  098A                     l5728:	
  6939                           ;DelayOff_B1.c: 94: } else {
  6940                           
  6941                           
  6942                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  6943  098A  3005               	movlw	5
  6944  098B                     L3:	
  6945  098B  00AC               	movwf	??_setDelayOff_GO
  6946  098C  082E               	movf	setDelayOff_GO@sw,w
  6947  098D  3E1A               	addlw	26
  6948  098E  076E               	addwf	_product,w
  6949  098F  00AD               	movwf	??_setDelayOff_GO+1
  6950  0990  082D               	movf	??_setDelayOff_GO+1,w
  6951  0991  0086               	movwf	6
  6952  0992  3001               	movlw	1	; select bank2/3
  6953  0993  0087               	movwf	7
  6954  0994  082C               	movf	??_setDelayOff_GO,w
  6955  0995  0081               	movwf	1
  6956                           
  6957                           ;DelayOff_B1.c: 96: }
  6958                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  6959  0996  29A3               	goto	l5734
  6960  0997                     l5730:	
  6961  0997  08AA               	movf	setDelayOff_GO@command,f
  6962  0998  1D03               	skipz
  6963  0999  29A3               	goto	l5734
  6964                           
  6965                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  6966  099A  082E               	movf	setDelayOff_GO@sw,w
  6967  099B  3E1A               	addlw	26
  6968  099C  076E               	addwf	_product,w
  6969  099D  00AC               	movwf	??_setDelayOff_GO
  6970  099E  082C               	movf	??_setDelayOff_GO,w
  6971  099F  0086               	movwf	6
  6972  09A0  3001               	movlw	1	; select bank2/3
  6973  09A1  0087               	movwf	7
  6974  09A2  0181               	clrf	1
  6975  09A3                     l5734:	
  6976                           
  6977                           ;DelayOff_B1.c: 99: }
  6978                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  6979  09A3  0878               	movf	_DelayOff,w
  6980  09A4  0086               	movwf	6
  6981  09A5  0187               	clrf	7
  6982  09A6  3000               	movlw	0
  6983  09A7  3FC0               	movwi [0]fsr1
  6984  09A8  3FC1               	movwi [1]fsr1
  6985                           
  6986                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  6987  09A9  0878               	movf	_DelayOff,w
  6988  09AA  0086               	movwf	6
  6989  09AB  0187               	clrf	7
  6990  09AC  0181               	clrf	1
  6991  09AD  0008               	return
  6992  09AE                     __end_of_setDelayOff_GO:	
  6993                           
  6994                           	psect	text25
  6995  14CF                     __ptext25:	
  6996 ;; *************** function _DelayTimejudge *****************
  6997 ;; Defined at:
  6998 ;;		line 106 in file "../src/DelayOff_B1.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  value           1    wreg     unsigned char 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  value           1    9[BANK0 ] unsigned char 
  7003 ;;  k               1    8[BANK0 ] unsigned char 
  7004 ;;  j               1    7[BANK0 ] unsigned char 
  7005 ;;  i               1    6[BANK0 ] unsigned char 
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  1    wreg      unsigned char 
  7008 ;; Registers used:
  7009 ;;		wreg, status,2, status,0, pclath, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;Total ram usage:        6 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    6
  7022 ;; This function calls:
  7023 ;;		___bmul
  7024 ;; This function is called by:
  7025 ;;		_setDelayOff_GO
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           
  7030                           ;psect for function _DelayTimejudge
  7031  14CF                     _DelayTimejudge:	
  7032                           
  7033                           ;incstack = 0
  7034                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7035                           ;DelayTimejudge@value stored from wreg
  7036  14CF  0020               	movlb	0	; select bank0
  7037  14D0  00A9               	movwf	DelayTimejudge@value
  7038                           
  7039                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7040  14D1  3005               	movlw	5
  7041  14D2  00A4               	movwf	??_DelayTimejudge
  7042  14D3  0824               	movf	??_DelayTimejudge,w
  7043  14D4  00A6               	movwf	DelayTimejudge@i
  7044  14D5  01A7               	clrf	DelayTimejudge@j
  7045  14D6  01A8               	clrf	DelayTimejudge@k
  7046                           
  7047                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7048  14D7  3031               	movlw	49
  7049  14D8  0229               	subwf	DelayTimejudge@value,w
  7050  14D9  1803               	skipnc
  7051  14DA  2CF7               	goto	l5526
  7052                           
  7053                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7054  14DB  0829               	movf	DelayTimejudge@value,w
  7055  14DC  390F               	andlw	15
  7056  14DD  00A4               	movwf	??_DelayTimejudge
  7057  14DE  0824               	movf	??_DelayTimejudge,w
  7058  14DF  00A7               	movwf	DelayTimejudge@j
  7059                           
  7060                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7061  14E0  0829               	movf	DelayTimejudge@value,w
  7062  14E1  00A4               	movwf	??_DelayTimejudge
  7063  14E2  3004               	movlw	4
  7064  14E3                     u4255:	
  7065  14E3  36A4               	lsrf	??_DelayTimejudge,f
  7066  14E4  0B89               	decfsz	9,f
  7067  14E5  2CE3               	goto	u4255
  7068  14E6  0824               	movf	??_DelayTimejudge,w
  7069  14E7  390F               	andlw	15
  7070  14E8  00A5               	movwf	??_DelayTimejudge+1
  7071  14E9  0825               	movf	??_DelayTimejudge+1,w
  7072  14EA  00A8               	movwf	DelayTimejudge@k
  7073                           
  7074                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7075  14EB  300A               	movlw	10
  7076  14EC  00A4               	movwf	??_DelayTimejudge
  7077  14ED  0824               	movf	??_DelayTimejudge,w
  7078  14EE  00A0               	movwf	___bmul@multiplicand
  7079  14EF  0828               	movf	DelayTimejudge@k,w
  7080  14F0  3191  21B3         	fcall	___bmul
  7081  14F2  0020               	movlb	0	; select bank0
  7082  14F3  0727               	addwf	DelayTimejudge@j,w
  7083  14F4  00A5               	movwf	??_DelayTimejudge+1
  7084  14F5  0825               	movf	??_DelayTimejudge+1,w
  7085  14F6  00A6               	movwf	DelayTimejudge@i
  7086  14F7                     l5526:	
  7087                           
  7088                           ;DelayOff_B1.c: 112: }
  7089                           ;DelayOff_B1.c: 133: return i;
  7090  14F7  0826               	movf	DelayTimejudge@i,w
  7091  14F8  0008               	return
  7092  14F9                     __end_of_DelayTimejudge:	
  7093                           
  7094                           	psect	text26
  7095  11B3                     __ptext26:	
  7096 ;; *************** function ___bmul *****************
  7097 ;; Defined at:
  7098 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  multiplier      1    wreg     unsigned char 
  7101 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7104 ;;  product         1    2[BANK0 ] unsigned char 
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      unsigned char 
  7107 ;; Registers used:
  7108 ;;		wreg, status,2, status,0
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7114 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;Total ram usage:        4 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    5
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		_DelayTimejudge
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function ___bmul
  7130  11B3                     ___bmul:	
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7134                           ;___bmul@multiplier stored from wreg
  7135  11B3  0020               	movlb	0	; select bank0
  7136  11B4  00A3               	movwf	___bmul@multiplier
  7137  11B5  01A2               	clrf	___bmul@product
  7138  11B6                     l5492:	
  7139  11B6  1C23               	btfss	___bmul@multiplier,0
  7140  11B7  29BC               	goto	l5496
  7141  11B8  0820               	movf	___bmul@multiplicand,w
  7142  11B9  00A1               	movwf	??___bmul
  7143  11BA  0821               	movf	??___bmul,w
  7144  11BB  07A2               	addwf	___bmul@product,f
  7145  11BC                     l5496:	
  7146  11BC  1003               	clrc
  7147  11BD  0DA0               	rlf	___bmul@multiplicand,f
  7148  11BE  1003               	clrc
  7149  11BF  0CA3               	rrf	___bmul@multiplier,f
  7150  11C0  08A3               	movf	___bmul@multiplier,f
  7151  11C1  1D03               	skipz
  7152  11C2  29B6               	goto	l5492
  7153  11C3  0822               	movf	___bmul@product,w
  7154  11C4  0008               	return
  7155  11C5                     __end_of___bmul:	
  7156                           
  7157                           	psect	text27
  7158  15E7                     __ptext27:	
  7159 ;; *************** function _setRFSW_AdjControl *****************
  7160 ;; Defined at:
  7161 ;;		line 421 in file "../src/RF_Control_B1.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  sw              1    wreg     unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  sw              1   70[BANK0 ] unsigned char 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;		None               void
  7168 ;; Registers used:
  7169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;Total ram usage:        3 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:   10
  7182 ;; This function calls:
  7183 ;;		_RfSWPointSelect
  7184 ;;		_setRF_DimmerValue
  7185 ;;		_setTxData
  7186 ;; This function is called by:
  7187 ;;		_setControl_Lights_Table
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _setRFSW_AdjControl
  7193  15E7                     _setRFSW_AdjControl:	
  7194                           
  7195                           ;incstack = 0
  7196                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7197                           ;setRFSW_AdjControl@sw stored from wreg
  7198  15E7  0020               	movlb	0	; select bank0
  7199  15E8  00E6               	movwf	setRFSW_AdjControl@sw
  7200                           
  7201                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  7202  15E9  0866               	movf	setRFSW_AdjControl@sw,w
  7203  15EA  3192  228D  3195   	fcall	_RfSWPointSelect
  7204                           
  7205                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  7206  15ED  0021               	movlb	1	; select bank1
  7207  15EE  0859               	movf	_RFSW^(0+128),w
  7208  15EF  0086               	movwf	6
  7209  15F0  0187               	clrf	7
  7210  15F1  1C01               	btfss	1,0
  7211  15F2  2DFB               	goto	l5934
  7212                           
  7213                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  7214  15F3  0023               	movlb	3	; select bank3
  7215  15F4  1444               	bsf	(_Memory^(0+384)+36),0
  7216                           
  7217                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  7218  15F5  0020               	movlb	0	; select bank0
  7219  15F6  0866               	movf	setRFSW_AdjControl@sw,w
  7220  15F7  3195  25B2  3195   	fcall	_setRF_DimmerValue
  7221                           
  7222                           ;RF_Control_B1.c: 426: } else {
  7223  15FA  2E0D               	goto	l1965
  7224  15FB                     l5934:	
  7225                           
  7226                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  7227  15FB  0020               	movlb	0	; select bank0
  7228  15FC  0866               	movf	setRFSW_AdjControl@sw,w
  7229  15FD  3E14               	addlw	20
  7230  15FE  076E               	addwf	_product,w
  7231  15FF  00E4               	movwf	??_setRFSW_AdjControl
  7232  1600  0864               	movf	??_setRFSW_AdjControl,w
  7233  1601  0086               	movwf	6
  7234  1602  3001               	movlw	1	; select bank2/3
  7235  1603  0087               	movwf	7
  7236  1604  0801               	movf	1,w
  7237  1605  00E5               	movwf	??_setRFSW_AdjControl+1
  7238  1606  086E               	movf	_product,w
  7239  1607  3E09               	addlw	9
  7240  1608  0086               	movwf	6
  7241  1609  3001               	movlw	1	; select bank2/3
  7242  160A  0087               	movwf	7
  7243  160B  0865               	movf	??_setRFSW_AdjControl+1,w
  7244  160C  0081               	movwf	1
  7245  160D                     l1965:	
  7246                           
  7247                           ;RF_Control_B1.c: 428: }
  7248                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  7249  160D  0020               	movlb	0	; select bank0
  7250  160E  0866               	movf	setRFSW_AdjControl@sw,w
  7251  160F  3E1A               	addlw	26
  7252  1610  076E               	addwf	_product,w
  7253  1611  00E4               	movwf	??_setRFSW_AdjControl
  7254  1612  0864               	movf	??_setRFSW_AdjControl,w
  7255  1613  0086               	movwf	6
  7256  1614  3001               	movlw	1	; select bank2/3
  7257  1615  0087               	movwf	7
  7258  1616  0801               	movf	1,w
  7259  1617  00E5               	movwf	??_setRFSW_AdjControl+1
  7260  1618  086E               	movf	_product,w
  7261  1619  3E11               	addlw	17
  7262  161A  0086               	movwf	6
  7263  161B  3001               	movlw	1	; select bank2/3
  7264  161C  0087               	movwf	7
  7265  161D  0865               	movf	??_setRFSW_AdjControl+1,w
  7266  161E  0081               	movwf	1
  7267                           
  7268                           ;RF_Control_B1.c: 430: setTxData();
  7269  161F  3185  258D         	fcall	_setTxData
  7270  1621  0008               	return
  7271  1622                     __end_of_setRFSW_AdjControl:	
  7272                           
  7273                           	psect	text28
  7274  15B2                     __ptext28:	
  7275 ;; *************** function _setRF_DimmerValue *****************
  7276 ;; Defined at:
  7277 ;;		line 441 in file "../src/RF_Control_B1.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  lights          1    wreg     unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  lights          1   67[BANK0 ] unsigned char 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;		None               void
  7284 ;; Registers used:
  7285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;Total ram usage:        3 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    9
  7298 ;; This function calls:
  7299 ;;		_setDimmerLights_AdjRF
  7300 ;; This function is called by:
  7301 ;;		_setRFSW_AdjControl
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _setRF_DimmerValue
  7307  15B2                     _setRF_DimmerValue:	
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7311                           ;setRF_DimmerValue@lights stored from wreg
  7312  15B2  0020               	movlb	0	; select bank0
  7313  15B3  00E3               	movwf	setRF_DimmerValue@lights
  7314                           
  7315                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  7316  15B4  3065               	movlw	101
  7317  15B5  0022               	movlb	2	; select bank2
  7318  15B6  0229               	subwf	(_RF_Data^(0+256)+9),w
  7319  15B7  1C03               	skipc
  7320  15B8  2DBF               	goto	l5804
  7321                           
  7322                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  7323  15B9  3064               	movlw	100
  7324  15BA  0020               	movlb	0	; select bank0
  7325  15BB  00E1               	movwf	??_setRF_DimmerValue
  7326  15BC  0861               	movf	??_setRF_DimmerValue,w
  7327  15BD  0022               	movlb	2	; select bank2
  7328  15BE  00A9               	movwf	(_RF_Data^(0+256)+9)
  7329  15BF                     l5804:	
  7330                           
  7331                           ;RF_Control_B1.c: 444: }
  7332                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  7333  15BF  0829               	movf	(_RF_Data^(0+256)+9),w
  7334  15C0  0020               	movlb	0	; select bank0
  7335  15C1  00E1               	movwf	??_setRF_DimmerValue
  7336  15C2  086E               	movf	_product,w
  7337  15C3  3E09               	addlw	9
  7338  15C4  0086               	movwf	6
  7339  15C5  3001               	movlw	1	; select bank2/3
  7340  15C6  0087               	movwf	7
  7341  15C7  0861               	movf	??_setRF_DimmerValue,w
  7342  15C8  0081               	movwf	1
  7343                           
  7344                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  7345  15C9  0863               	movf	setRF_DimmerValue@lights,w
  7346  15CA  00E1               	movwf	??_setRF_DimmerValue
  7347  15CB  086E               	movf	_product,w
  7348  15CC  3E0B               	addlw	11
  7349  15CD  0086               	movwf	6
  7350  15CE  3001               	movlw	1	; select bank2/3
  7351  15CF  0087               	movwf	7
  7352  15D0  0861               	movf	??_setRF_DimmerValue,w
  7353  15D1  0081               	movwf	1
  7354                           
  7355                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  7356  15D2  086E               	movf	_product,w
  7357  15D3  3E09               	addlw	9
  7358  15D4  0086               	movwf	6
  7359  15D5  3001               	movlw	1	; select bank2/3
  7360  15D6  0087               	movwf	7
  7361  15D7  0801               	movf	1,w
  7362  15D8  00E1               	movwf	??_setRF_DimmerValue
  7363  15D9  0863               	movf	setRF_DimmerValue@lights,w
  7364  15DA  3E14               	addlw	20
  7365  15DB  076E               	addwf	_product,w
  7366  15DC  00E2               	movwf	??_setRF_DimmerValue+1
  7367  15DD  0862               	movf	??_setRF_DimmerValue+1,w
  7368  15DE  0086               	movwf	6
  7369  15DF  3001               	movlw	1	; select bank2/3
  7370  15E0  0087               	movwf	7
  7371  15E1  0861               	movf	??_setRF_DimmerValue,w
  7372  15E2  0081               	movwf	1
  7373                           
  7374                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  7375  15E3  0863               	movf	setRF_DimmerValue@lights,w
  7376  15E4  3194  2434         	fcall	_setDimmerLights_AdjRF
  7377  15E6  0008               	return
  7378  15E7                     __end_of_setRF_DimmerValue:	
  7379                           
  7380                           	psect	text29
  7381  1434                     __ptext29:	
  7382 ;; *************** function _setDimmerLights_AdjRF *****************
  7383 ;; Defined at:
  7384 ;;		line 688 in file "../src/Dimmer_B1.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  lights          1    wreg     unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  lights          1   64[BANK0 ] unsigned char 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;		None               void
  7391 ;; Registers used:
  7392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;Total ram usage:        2 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    8
  7405 ;; This function calls:
  7406 ;;		_DimmerLightsPointSelect
  7407 ;;		_getPercentValue
  7408 ;; This function is called by:
  7409 ;;		_setRF_DimmerValue
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           
  7414                           ;psect for function _setDimmerLights_AdjRF
  7415  1434                     _setDimmerLights_AdjRF:	
  7416                           
  7417                           ;incstack = 0
  7418                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7419                           ;setDimmerLights_AdjRF@lights stored from wreg
  7420  1434  0020               	movlb	0	; select bank0
  7421  1435  00E0               	movwf	setDimmerLights_AdjRF@lights
  7422                           
  7423                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  7424  1436  0860               	movf	setDimmerLights_AdjRF@lights,w
  7425  1437  3191  21D7  3194   	fcall	_DimmerLightsPointSelect
  7426                           
  7427                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  7428  143A  0879               	movf	_DimmerLights,w
  7429  143B  0086               	movwf	6
  7430  143C  3001               	movlw	1	; select bank2/3
  7431  143D  0087               	movwf	7
  7432  143E  1501               	bsf	1,2
  7433                           
  7434                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  7435  143F  0879               	movf	_DimmerLights,w
  7436  1440  0086               	movwf	6
  7437  1441  3001               	movlw	1	; select bank2/3
  7438  1442  0087               	movwf	7
  7439  1443  1481               	bsf	1,1
  7440                           
  7441                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7442  1444  0020               	movlb	0	; select bank0
  7443  1445  086E               	movf	_product,w
  7444  1446  3E09               	addlw	9
  7445  1447  0086               	movwf	6
  7446  1448  3001               	movlw	1	; select bank2/3
  7447  1449  0087               	movwf	7
  7448  144A  0801               	movf	1,w
  7449  144B  3188  20F4         	fcall	_getPercentValue
  7450  144D  0020               	movlb	0	; select bank0
  7451  144E  00DF               	movwf	??_setDimmerLights_AdjRF
  7452  144F  0879               	movf	_DimmerLights,w
  7453  1450  3E05               	addlw	5
  7454  1451  0086               	movwf	6
  7455  1452  3001               	movlw	1	; select bank2/3
  7456  1453  0087               	movwf	7
  7457  1454  085F               	movf	??_setDimmerLights_AdjRF,w
  7458  1455  0081               	movwf	1
  7459  1456  0008               	return
  7460  1457                     __end_of_setDimmerLights_AdjRF:	
  7461                           
  7462                           	psect	text30
  7463  08F4                     __ptext30:	
  7464 ;; *************** function _getPercentValue *****************
  7465 ;; Defined at:
  7466 ;;		line 761 in file "../src/Dimmer_B1.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  value           1    wreg     unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  value           1   59[BANK0 ] unsigned char 
  7471 ;;  i               3   60[BANK0 ] float 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      unsigned char 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2, status,0, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;Total ram usage:        6 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    7
  7488 ;; This function calls:
  7489 ;;		___awtoft
  7490 ;;		___ftadd
  7491 ;;		___ftdiv
  7492 ;;		___ftmul
  7493 ;;		___fttol
  7494 ;; This function is called by:
  7495 ;;		_setDimmerLights_AdjRF
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           
  7500                           ;psect for function _getPercentValue
  7501  08F4                     _getPercentValue:	
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7505                           ;getPercentValue@value stored from wreg
  7506  08F4  0020               	movlb	0	; select bank0
  7507  08F5  00DB               	movwf	getPercentValue@value
  7508                           
  7509                           ;Dimmer_B1.c: 769: float i = ((char)(65*0.8)) - ((char)(25*0.8));
  7510  08F6  3000               	movlw	0
  7511  08F7  00DC               	movwf	getPercentValue@i
  7512  08F8  3000               	movlw	0
  7513  08F9  00DD               	movwf	getPercentValue@i+1
  7514  08FA  3042               	movlw	66
  7515  08FB  00DE               	movwf	getPercentValue@i+2
  7516                           
  7517                           ;Dimmer_B1.c: 770: i /= 100;
  7518  08FC  3000               	movlw	0
  7519  08FD  00AE               	movwf	___ftdiv@f2
  7520  08FE  30C8               	movlw	200
  7521  08FF  00AF               	movwf	___ftdiv@f2+1
  7522  0900  3042               	movlw	66
  7523  0901  00B0               	movwf	___ftdiv@f2+2
  7524  0902  085C               	movf	getPercentValue@i,w
  7525  0903  00B1               	movwf	___ftdiv@f1
  7526  0904  085D               	movf	getPercentValue@i+1,w
  7527  0905  00B2               	movwf	___ftdiv@f1+1
  7528  0906  085E               	movf	getPercentValue@i+2,w
  7529  0907  00B3               	movwf	___ftdiv@f1+2
  7530  0908  3186  26FE  3188   	fcall	___ftdiv
  7531  090B  0020               	movlb	0	; select bank0
  7532  090C  082E               	movf	?___ftdiv,w
  7533  090D  00DC               	movwf	getPercentValue@i
  7534  090E  082F               	movf	?___ftdiv+1,w
  7535  090F  00DD               	movwf	getPercentValue@i+1
  7536  0910  0830               	movf	?___ftdiv+2,w
  7537  0911  00DE               	movwf	getPercentValue@i+2
  7538                           
  7539                           ;Dimmer_B1.c: 772: return (char) (((100 - value) * i) + ((char)(65*0.8)));
  7540  0912  085B               	movf	getPercentValue@value,w
  7541  0913  00D9               	movwf	??_getPercentValue
  7542  0914  01DA               	clrf	??_getPercentValue+1
  7543  0915  09D9               	comf	??_getPercentValue,f
  7544  0916  09DA               	comf	??_getPercentValue+1,f
  7545  0917  0AD9               	incf	??_getPercentValue,f
  7546  0918  1903               	skipnz
  7547  0919  0ADA               	incf	??_getPercentValue+1,f
  7548  091A  0859               	movf	??_getPercentValue,w
  7549  091B  3E64               	addlw	100
  7550  091C  00A8               	movwf	___awtoft@c
  7551  091D  3000               	movlw	0
  7552  091E  3D5A               	addwfc	??_getPercentValue+1,w
  7553  091F  00A9               	movwf	___awtoft@c+1
  7554  0920  3193  23CE  3188   	fcall	___awtoft
  7555  0923  0020               	movlb	0	; select bank0
  7556  0924  0828               	movf	?___awtoft,w
  7557  0925  00B1               	movwf	___ftmul@f2
  7558  0926  0829               	movf	?___awtoft+1,w
  7559  0927  00B2               	movwf	___ftmul@f2+1
  7560  0928  082A               	movf	?___awtoft+2,w
  7561  0929  00B3               	movwf	___ftmul@f2+2
  7562  092A  085C               	movf	getPercentValue@i,w
  7563  092B  00AE               	movwf	___ftmul@f1
  7564  092C  085D               	movf	getPercentValue@i+1,w
  7565  092D  00AF               	movwf	___ftmul@f1+1
  7566  092E  085E               	movf	getPercentValue@i+2,w
  7567  092F  00B0               	movwf	___ftmul@f1+2
  7568  0930  3186  264A  3188   	fcall	___ftmul
  7569  0933  0020               	movlb	0	; select bank0
  7570  0934  082E               	movf	?___ftmul,w
  7571  0935  00C1               	movwf	___ftadd@f2
  7572  0936  082F               	movf	?___ftmul+1,w
  7573  0937  00C2               	movwf	___ftadd@f2+1
  7574  0938  0830               	movf	?___ftmul+2,w
  7575  0939  00C3               	movwf	___ftadd@f2+2
  7576  093A  3000               	movlw	0
  7577  093B  00BE               	movwf	___ftadd@f1
  7578  093C  3050               	movlw	80
  7579  093D  00BF               	movwf	___ftadd@f1+1
  7580  093E  3042               	movlw	66
  7581  093F  00C0               	movwf	___ftadd@f1+2
  7582  0940  3182  22F3  3188   	fcall	___ftadd
  7583  0943  0020               	movlb	0	; select bank0
  7584  0944  083E               	movf	?___ftadd,w
  7585  0945  00CB               	movwf	___fttol@f1
  7586  0946  083F               	movf	?___ftadd+1,w
  7587  0947  00CC               	movwf	___fttol@f1+1
  7588  0948  0840               	movf	?___ftadd+2,w
  7589  0949  00CD               	movwf	___fttol@f1+2
  7590  094A  318E  265E         	fcall	___fttol
  7591  094C  0020               	movlb	0	; select bank0
  7592  094D  084B               	movf	?___fttol,w
  7593  094E  0008               	return
  7594  094F                     __end_of_getPercentValue:	
  7595                           
  7596                           	psect	text31
  7597  064A                     __ptext31:	
  7598 ;; *************** function ___ftmul *****************
  7599 ;; Defined at:
  7600 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;  f1              3   14[BANK0 ] float 
  7603 ;;  f2              3   17[BANK0 ] float 
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7606 ;;  sign            1   29[BANK0 ] unsigned char 
  7607 ;;  cntr            1   28[BANK0 ] unsigned char 
  7608 ;;  exp             1   24[BANK0 ] unsigned char 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  3   14[BANK0 ] float 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0, pclath, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7618 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;Total ram usage:       16 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    6
  7625 ;; This function calls:
  7626 ;;		___ftpack
  7627 ;; This function is called by:
  7628 ;;		_getPercentValue
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function ___ftmul
  7634  064A                     ___ftmul:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7638  064A  0020               	movlb	0	; select bank0
  7639  064B  082E               	movf	___ftmul@f1,w
  7640  064C  00B4               	movwf	??___ftmul
  7641  064D  082F               	movf	___ftmul@f1+1,w
  7642  064E  00B5               	movwf	??___ftmul+1
  7643  064F  0830               	movf	___ftmul@f1+2,w
  7644  0650  00B6               	movwf	??___ftmul+2
  7645  0651  1003               	clrc
  7646  0652  0D35               	rlf	??___ftmul+1,w
  7647  0653  0D36               	rlf	??___ftmul+2,w
  7648  0654  00B7               	movwf	??___ftmul+3
  7649  0655  0837               	movf	??___ftmul+3,w
  7650  0656  00B8               	movwf	___ftmul@exp
  7651  0657  08B8               	movf	___ftmul@exp,f
  7652  0658  1D03               	skipz
  7653  0659  2E61               	goto	l5388
  7654  065A  3000               	movlw	0
  7655  065B  00AE               	movwf	?___ftmul
  7656  065C  3000               	movlw	0
  7657  065D  00AF               	movwf	?___ftmul+1
  7658  065E  3000               	movlw	0
  7659  065F  00B0               	movwf	?___ftmul+2
  7660  0660  0008               	return
  7661  0661                     l5388:	
  7662  0661  0831               	movf	___ftmul@f2,w
  7663  0662  00B4               	movwf	??___ftmul
  7664  0663  0832               	movf	___ftmul@f2+1,w
  7665  0664  00B5               	movwf	??___ftmul+1
  7666  0665  0833               	movf	___ftmul@f2+2,w
  7667  0666  00B6               	movwf	??___ftmul+2
  7668  0667  1003               	clrc
  7669  0668  0D35               	rlf	??___ftmul+1,w
  7670  0669  0D36               	rlf	??___ftmul+2,w
  7671  066A  00B7               	movwf	??___ftmul+3
  7672  066B  0837               	movf	??___ftmul+3,w
  7673  066C  00BD               	movwf	___ftmul@sign
  7674  066D  08BD               	movf	___ftmul@sign,f
  7675  066E  1D03               	skipz
  7676  066F  2E77               	goto	l5394
  7677  0670  3000               	movlw	0
  7678  0671  00AE               	movwf	?___ftmul
  7679  0672  3000               	movlw	0
  7680  0673  00AF               	movwf	?___ftmul+1
  7681  0674  3000               	movlw	0
  7682  0675  00B0               	movwf	?___ftmul+2
  7683  0676  0008               	return
  7684  0677                     l5394:	
  7685  0677  083D               	movf	___ftmul@sign,w
  7686  0678  3E7B               	addlw	123
  7687  0679  00B4               	movwf	??___ftmul
  7688  067A  0834               	movf	??___ftmul,w
  7689  067B  07B8               	addwf	___ftmul@exp,f
  7690  067C  082E               	movf	___ftmul@f1,w
  7691  067D  00B4               	movwf	??___ftmul
  7692  067E  082F               	movf	___ftmul@f1+1,w
  7693  067F  00B5               	movwf	??___ftmul+1
  7694  0680  0830               	movf	___ftmul@f1+2,w
  7695  0681  00B6               	movwf	??___ftmul+2
  7696  0682  3010               	movlw	16
  7697  0683                     u3985:	
  7698  0683  36B6               	lsrf	??___ftmul+2,f
  7699  0684  0CB5               	rrf	??___ftmul+1,f
  7700  0685  0CB4               	rrf	??___ftmul,f
  7701  0686  0B89               	decfsz	9,f
  7702  0687  2E83               	goto	u3985
  7703  0688  0834               	movf	??___ftmul,w
  7704  0689  00B7               	movwf	??___ftmul+3
  7705  068A  0837               	movf	??___ftmul+3,w
  7706  068B  00BD               	movwf	___ftmul@sign
  7707  068C  0831               	movf	___ftmul@f2,w
  7708  068D  00B4               	movwf	??___ftmul
  7709  068E  0832               	movf	___ftmul@f2+1,w
  7710  068F  00B5               	movwf	??___ftmul+1
  7711  0690  0833               	movf	___ftmul@f2+2,w
  7712  0691  00B6               	movwf	??___ftmul+2
  7713  0692  3010               	movlw	16
  7714  0693                     u3995:	
  7715  0693  36B6               	lsrf	??___ftmul+2,f
  7716  0694  0CB5               	rrf	??___ftmul+1,f
  7717  0695  0CB4               	rrf	??___ftmul,f
  7718  0696  0B89               	decfsz	9,f
  7719  0697  2E93               	goto	u3995
  7720  0698  0834               	movf	??___ftmul,w
  7721  0699  00B7               	movwf	??___ftmul+3
  7722  069A  0837               	movf	??___ftmul+3,w
  7723  069B  06BD               	xorwf	___ftmul@sign,f
  7724  069C  3080               	movlw	128
  7725  069D  00B4               	movwf	??___ftmul
  7726  069E  0834               	movf	??___ftmul,w
  7727  069F  05BD               	andwf	___ftmul@sign,f
  7728  06A0  17AF               	bsf	___ftmul@f1+1,7
  7729  06A1  17B2               	bsf	___ftmul@f2+1,7
  7730  06A2  30FF               	movlw	255
  7731  06A3  05B1               	andwf	___ftmul@f2,f
  7732  06A4  30FF               	movlw	255
  7733  06A5  05B2               	andwf	___ftmul@f2+1,f
  7734  06A6  3000               	movlw	0
  7735  06A7  05B3               	andwf	___ftmul@f2+2,f
  7736  06A8  3000               	movlw	0
  7737  06A9  00B9               	movwf	___ftmul@f3_as_product
  7738  06AA  3000               	movlw	0
  7739  06AB  00BA               	movwf	___ftmul@f3_as_product+1
  7740  06AC  3000               	movlw	0
  7741  06AD  00BB               	movwf	___ftmul@f3_as_product+2
  7742  06AE  3007               	movlw	7
  7743  06AF  00B4               	movwf	??___ftmul
  7744  06B0  0834               	movf	??___ftmul,w
  7745  06B1  00BC               	movwf	___ftmul@cntr
  7746  06B2                     l5406:	
  7747  06B2  1C2E               	btfss	___ftmul@f1,0
  7748  06B3  2EBA               	goto	l5410
  7749  06B4  0831               	movf	___ftmul@f2,w
  7750  06B5  07B9               	addwf	___ftmul@f3_as_product,f
  7751  06B6  0832               	movf	___ftmul@f2+1,w
  7752  06B7  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7753  06B8  0833               	movf	___ftmul@f2+2,w
  7754  06B9  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7755  06BA                     l5410:	
  7756  06BA  3001               	movlw	1
  7757  06BB                     u4015:	
  7758  06BB  36B0               	lsrf	___ftmul@f1+2,f
  7759  06BC  0CAF               	rrf	___ftmul@f1+1,f
  7760  06BD  0CAE               	rrf	___ftmul@f1,f
  7761  06BE  0B89               	decfsz	9,f
  7762  06BF  2EBB               	goto	u4015
  7763  06C0  3001               	movlw	1
  7764  06C1                     u4025:	
  7765  06C1  35B1               	lslf	___ftmul@f2,f
  7766  06C2  0DB2               	rlf	___ftmul@f2+1,f
  7767  06C3  0DB3               	rlf	___ftmul@f2+2,f
  7768  06C4  0B89               	decfsz	9,f
  7769  06C5  2EC1               	goto	u4025
  7770  06C6  3001               	movlw	1
  7771  06C7  02BC               	subwf	___ftmul@cntr,f
  7772  06C8  1D03               	btfss	3,2
  7773  06C9  2EB2               	goto	l5406
  7774  06CA  3009               	movlw	9
  7775  06CB  00B4               	movwf	??___ftmul
  7776  06CC  0834               	movf	??___ftmul,w
  7777  06CD  00BC               	movwf	___ftmul@cntr
  7778  06CE                     l5418:	
  7779  06CE  1C2E               	btfss	___ftmul@f1,0
  7780  06CF  2ED6               	goto	l5422
  7781  06D0  0831               	movf	___ftmul@f2,w
  7782  06D1  07B9               	addwf	___ftmul@f3_as_product,f
  7783  06D2  0832               	movf	___ftmul@f2+1,w
  7784  06D3  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7785  06D4  0833               	movf	___ftmul@f2+2,w
  7786  06D5  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7787  06D6                     l5422:	
  7788  06D6  3001               	movlw	1
  7789  06D7                     u4055:	
  7790  06D7  36B0               	lsrf	___ftmul@f1+2,f
  7791  06D8  0CAF               	rrf	___ftmul@f1+1,f
  7792  06D9  0CAE               	rrf	___ftmul@f1,f
  7793  06DA  0B89               	decfsz	9,f
  7794  06DB  2ED7               	goto	u4055
  7795  06DC  3001               	movlw	1
  7796  06DD                     u4065:	
  7797  06DD  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7798  06DE  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7799  06DF  0CB9               	rrf	___ftmul@f3_as_product,f
  7800  06E0  0B89               	decfsz	9,f
  7801  06E1  2EDD               	goto	u4065
  7802  06E2  3001               	movlw	1
  7803  06E3  02BC               	subwf	___ftmul@cntr,f
  7804  06E4  1D03               	btfss	3,2
  7805  06E5  2ECE               	goto	l5418
  7806  06E6  0839               	movf	___ftmul@f3_as_product,w
  7807  06E7  00A0               	movwf	___ftpack@arg
  7808  06E8  083A               	movf	___ftmul@f3_as_product+1,w
  7809  06E9  00A1               	movwf	___ftpack@arg+1
  7810  06EA  083B               	movf	___ftmul@f3_as_product+2,w
  7811  06EB  00A2               	movwf	___ftpack@arg+2
  7812  06EC  0838               	movf	___ftmul@exp,w
  7813  06ED  00B4               	movwf	??___ftmul
  7814  06EE  0834               	movf	??___ftmul,w
  7815  06EF  00A3               	movwf	___ftpack@exp
  7816  06F0  083D               	movf	___ftmul@sign,w
  7817  06F1  00B5               	movwf	??___ftmul+1
  7818  06F2  0835               	movf	??___ftmul+1,w
  7819  06F3  00A4               	movwf	___ftpack@sign
  7820  06F4  3189  21AE         	fcall	___ftpack
  7821  06F6  0020               	movlb	0	; select bank0
  7822  06F7  0820               	movf	?___ftpack,w
  7823  06F8  00AE               	movwf	?___ftmul
  7824  06F9  0821               	movf	?___ftpack+1,w
  7825  06FA  00AF               	movwf	?___ftmul+1
  7826  06FB  0822               	movf	?___ftpack+2,w
  7827  06FC  00B0               	movwf	?___ftmul+2
  7828  06FD  0008               	return
  7829  06FE                     __end_of___ftmul:	
  7830                           
  7831                           	psect	text32
  7832  02F3                     __ptext32:	
  7833 ;; *************** function ___ftadd *****************
  7834 ;; Defined at:
  7835 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  f1              3   30[BANK0 ] float 
  7838 ;;  f2              3   33[BANK0 ] float 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  exp1            1   42[BANK0 ] unsigned char 
  7841 ;;  exp2            1   41[BANK0 ] unsigned char 
  7842 ;;  sign            1   40[BANK0 ] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  3   30[BANK0 ] float 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2, status,0, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7852 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;Total ram usage:       13 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    6
  7859 ;; This function calls:
  7860 ;;		___ftpack
  7861 ;; This function is called by:
  7862 ;;		_getPercentValue
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           
  7867                           ;psect for function ___ftadd
  7868  02F3                     ___ftadd:	
  7869                           
  7870                           ;incstack = 0
  7871                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7872  02F3  0020               	movlb	0	; select bank0
  7873  02F4  083E               	movf	___ftadd@f1,w
  7874  02F5  00C4               	movwf	??___ftadd
  7875  02F6  083F               	movf	___ftadd@f1+1,w
  7876  02F7  00C5               	movwf	??___ftadd+1
  7877  02F8  0840               	movf	___ftadd@f1+2,w
  7878  02F9  00C6               	movwf	??___ftadd+2
  7879  02FA  1003               	clrc
  7880  02FB  0D45               	rlf	??___ftadd+1,w
  7881  02FC  0D46               	rlf	??___ftadd+2,w
  7882  02FD  00C7               	movwf	??___ftadd+3
  7883  02FE  0847               	movf	??___ftadd+3,w
  7884  02FF  00CA               	movwf	___ftadd@exp1
  7885  0300  0841               	movf	___ftadd@f2,w
  7886  0301  00C4               	movwf	??___ftadd
  7887  0302  0842               	movf	___ftadd@f2+1,w
  7888  0303  00C5               	movwf	??___ftadd+1
  7889  0304  0843               	movf	___ftadd@f2+2,w
  7890  0305  00C6               	movwf	??___ftadd+2
  7891  0306  1003               	clrc
  7892  0307  0D45               	rlf	??___ftadd+1,w
  7893  0308  0D46               	rlf	??___ftadd+2,w
  7894  0309  00C7               	movwf	??___ftadd+3
  7895  030A  0847               	movf	??___ftadd+3,w
  7896  030B  00C9               	movwf	___ftadd@exp2
  7897  030C  084A               	movf	___ftadd@exp1,w
  7898  030D  1903               	btfsc	3,2
  7899  030E  2B1B               	goto	l5276
  7900  030F  0849               	movf	___ftadd@exp2,w
  7901  0310  024A               	subwf	___ftadd@exp1,w
  7902  0311  1803               	skipnc
  7903  0312  2B22               	goto	l5280
  7904  0313  034A               	decf	___ftadd@exp1,w
  7905  0314  3AFF               	xorlw	255
  7906  0315  0749               	addwf	___ftadd@exp2,w
  7907  0316  00C4               	movwf	??___ftadd
  7908  0317  3019               	movlw	25
  7909  0318  0244               	subwf	??___ftadd,w
  7910  0319  1C03               	skipc
  7911  031A  2B22               	goto	l5280
  7912  031B                     l5276:	
  7913  031B  0841               	movf	___ftadd@f2,w
  7914  031C  00BE               	movwf	?___ftadd
  7915  031D  0842               	movf	___ftadd@f2+1,w
  7916  031E  00BF               	movwf	?___ftadd+1
  7917  031F  0843               	movf	___ftadd@f2+2,w
  7918  0320  00C0               	movwf	?___ftadd+2
  7919  0321  0008               	return
  7920  0322                     l5280:	
  7921  0322  0849               	movf	___ftadd@exp2,w
  7922  0323  1903               	btfsc	3,2
  7923  0324  0008               	return
  7924  0325  084A               	movf	___ftadd@exp1,w
  7925  0326  0249               	subwf	___ftadd@exp2,w
  7926  0327  1803               	skipnc
  7927  0328  2B31               	goto	l5286
  7928  0329  0349               	decf	___ftadd@exp2,w
  7929  032A  3AFF               	xorlw	255
  7930  032B  074A               	addwf	___ftadd@exp1,w
  7931  032C  00C4               	movwf	??___ftadd
  7932  032D  3019               	movlw	25
  7933  032E  0244               	subwf	??___ftadd,w
  7934  032F  1803               	btfsc	3,0
  7935  0330  0008               	return
  7936  0331                     l5286:	
  7937  0331  3006               	movlw	6
  7938  0332  00C4               	movwf	??___ftadd
  7939  0333  0844               	movf	??___ftadd,w
  7940  0334  00C8               	movwf	___ftadd@sign
  7941  0335  1BC0               	btfsc	___ftadd@f1+2,7
  7942  0336  17C8               	bsf	___ftadd@sign,7
  7943  0337  1BC3               	btfsc	___ftadd@f2+2,7
  7944  0338  1748               	bsf	___ftadd@sign,6
  7945  0339  17BF               	bsf	___ftadd@f1+1,7
  7946  033A  30FF               	movlw	255
  7947  033B  05BE               	andwf	___ftadd@f1,f
  7948  033C  30FF               	movlw	255
  7949  033D  05BF               	andwf	___ftadd@f1+1,f
  7950  033E  3000               	movlw	0
  7951  033F  05C0               	andwf	___ftadd@f1+2,f
  7952  0340  17C2               	bsf	___ftadd@f2+1,7
  7953  0341  30FF               	movlw	255
  7954  0342  05C1               	andwf	___ftadd@f2,f
  7955  0343  30FF               	movlw	255
  7956  0344  05C2               	andwf	___ftadd@f2+1,f
  7957  0345  3000               	movlw	0
  7958  0346  05C3               	andwf	___ftadd@f2+2,f
  7959  0347  0849               	movf	___ftadd@exp2,w
  7960  0348  024A               	subwf	___ftadd@exp1,w
  7961  0349  1803               	skipnc
  7962  034A  2B6D               	goto	l5308
  7963  034B                     l5298:	
  7964  034B  3001               	movlw	1
  7965  034C                     u3745:	
  7966  034C  35C1               	lslf	___ftadd@f2,f
  7967  034D  0DC2               	rlf	___ftadd@f2+1,f
  7968  034E  0DC3               	rlf	___ftadd@f2+2,f
  7969  034F  0B89               	decfsz	9,f
  7970  0350  2B4C               	goto	u3745
  7971  0351  3001               	movlw	1
  7972  0352  02C9               	subwf	___ftadd@exp2,f
  7973  0353  0849               	movf	___ftadd@exp2,w
  7974  0354  064A               	xorwf	___ftadd@exp1,w
  7975  0355  1903               	skipnz
  7976  0356  2B68               	goto	l5306
  7977  0357  3001               	movlw	1
  7978  0358  02C8               	subwf	___ftadd@sign,f
  7979  0359  0848               	movf	___ftadd@sign,w
  7980  035A  3907               	andlw	7
  7981  035B  1903               	btfsc	3,2
  7982  035C  2B68               	goto	l5306
  7983  035D  2B4B               	goto	l5298
  7984  035E                     l5304:	
  7985  035E  3001               	movlw	1
  7986  035F                     u3775:	
  7987  035F  36C0               	lsrf	___ftadd@f1+2,f
  7988  0360  0CBF               	rrf	___ftadd@f1+1,f
  7989  0361  0CBE               	rrf	___ftadd@f1,f
  7990  0362  0B89               	decfsz	9,f
  7991  0363  2B5F               	goto	u3775
  7992  0364  3001               	movlw	1
  7993  0365  00C4               	movwf	??___ftadd
  7994  0366  0844               	movf	??___ftadd,w
  7995  0367  07CA               	addwf	___ftadd@exp1,f
  7996  0368                     l5306:	
  7997  0368  084A               	movf	___ftadd@exp1,w
  7998  0369  0649               	xorwf	___ftadd@exp2,w
  7999  036A  1903               	btfsc	3,2
  8000  036B  2B92               	goto	l2815
  8001  036C  2B5E               	goto	l5304
  8002  036D                     l5308:	
  8003  036D  084A               	movf	___ftadd@exp1,w
  8004  036E  0249               	subwf	___ftadd@exp2,w
  8005  036F  1803               	skipnc
  8006  0370  2B92               	goto	l2815
  8007  0371                     l5310:	
  8008  0371  3001               	movlw	1
  8009  0372                     u3805:	
  8010  0372  35BE               	lslf	___ftadd@f1,f
  8011  0373  0DBF               	rlf	___ftadd@f1+1,f
  8012  0374  0DC0               	rlf	___ftadd@f1+2,f
  8013  0375  0B89               	decfsz	9,f
  8014  0376  2B72               	goto	u3805
  8015  0377  3001               	movlw	1
  8016  0378  02CA               	subwf	___ftadd@exp1,f
  8017  0379  0849               	movf	___ftadd@exp2,w
  8018  037A  064A               	xorwf	___ftadd@exp1,w
  8019  037B  1903               	skipnz
  8020  037C  2B8E               	goto	l5318
  8021  037D  3001               	movlw	1
  8022  037E  02C8               	subwf	___ftadd@sign,f
  8023  037F  0848               	movf	___ftadd@sign,w
  8024  0380  3907               	andlw	7
  8025  0381  1903               	btfsc	3,2
  8026  0382  2B8E               	goto	l5318
  8027  0383  2B71               	goto	l5310
  8028  0384                     l5316:	
  8029  0384  3001               	movlw	1
  8030  0385                     u3835:	
  8031  0385  36C3               	lsrf	___ftadd@f2+2,f
  8032  0386  0CC2               	rrf	___ftadd@f2+1,f
  8033  0387  0CC1               	rrf	___ftadd@f2,f
  8034  0388  0B89               	decfsz	9,f
  8035  0389  2B85               	goto	u3835
  8036  038A  3001               	movlw	1
  8037  038B  00C4               	movwf	??___ftadd
  8038  038C  0844               	movf	??___ftadd,w
  8039  038D  07C9               	addwf	___ftadd@exp2,f
  8040  038E                     l5318:	
  8041  038E  084A               	movf	___ftadd@exp1,w
  8042  038F  0649               	xorwf	___ftadd@exp2,w
  8043  0390  1D03               	skipz
  8044  0391  2B84               	goto	l5316
  8045  0392                     l2815:	
  8046  0392  1FC8               	btfss	___ftadd@sign,7
  8047  0393  2BA4               	goto	l5322
  8048  0394  30FF               	movlw	255
  8049  0395  06BE               	xorwf	___ftadd@f1,f
  8050  0396  30FF               	movlw	255
  8051  0397  06BF               	xorwf	___ftadd@f1+1,f
  8052  0398  30FF               	movlw	255
  8053  0399  06C0               	xorwf	___ftadd@f1+2,f
  8054  039A  3001               	movlw	1
  8055  039B  07BE               	addwf	___ftadd@f1,f
  8056  039C  3000               	movlw	0
  8057  039D  1803               	skipnc
  8058  039E  3001               	movlw	1
  8059  039F  07BF               	addwf	___ftadd@f1+1,f
  8060  03A0  3000               	movlw	0
  8061  03A1  1803               	skipnc
  8062  03A2  3001               	movlw	1
  8063  03A3  07C0               	addwf	___ftadd@f1+2,f
  8064  03A4                     l5322:	
  8065  03A4  1F48               	btfss	___ftadd@sign,6
  8066  03A5  2BB6               	goto	l5326
  8067  03A6  30FF               	movlw	255
  8068  03A7  06C1               	xorwf	___ftadd@f2,f
  8069  03A8  30FF               	movlw	255
  8070  03A9  06C2               	xorwf	___ftadd@f2+1,f
  8071  03AA  30FF               	movlw	255
  8072  03AB  06C3               	xorwf	___ftadd@f2+2,f
  8073  03AC  3001               	movlw	1
  8074  03AD  07C1               	addwf	___ftadd@f2,f
  8075  03AE  3000               	movlw	0
  8076  03AF  1803               	skipnc
  8077  03B0  3001               	movlw	1
  8078  03B1  07C2               	addwf	___ftadd@f2+1,f
  8079  03B2  3000               	movlw	0
  8080  03B3  1803               	skipnc
  8081  03B4  3001               	movlw	1
  8082  03B5  07C3               	addwf	___ftadd@f2+2,f
  8083  03B6                     l5326:	
  8084  03B6  01C8               	clrf	___ftadd@sign
  8085  03B7  083E               	movf	___ftadd@f1,w
  8086  03B8  07C1               	addwf	___ftadd@f2,f
  8087  03B9  083F               	movf	___ftadd@f1+1,w
  8088  03BA  3DC2               	addwfc	___ftadd@f2+1,f
  8089  03BB  0840               	movf	___ftadd@f1+2,w
  8090  03BC  3DC3               	addwfc	___ftadd@f2+2,f
  8091  03BD  1FC3               	btfss	___ftadd@f2+2,7
  8092  03BE  2BD1               	goto	l5336
  8093  03BF  30FF               	movlw	255
  8094  03C0  06C1               	xorwf	___ftadd@f2,f
  8095  03C1  30FF               	movlw	255
  8096  03C2  06C2               	xorwf	___ftadd@f2+1,f
  8097  03C3  30FF               	movlw	255
  8098  03C4  06C3               	xorwf	___ftadd@f2+2,f
  8099  03C5  3001               	movlw	1
  8100  03C6  07C1               	addwf	___ftadd@f2,f
  8101  03C7  3000               	movlw	0
  8102  03C8  1803               	skipnc
  8103  03C9  3001               	movlw	1
  8104  03CA  07C2               	addwf	___ftadd@f2+1,f
  8105  03CB  3000               	movlw	0
  8106  03CC  1803               	skipnc
  8107  03CD  3001               	movlw	1
  8108  03CE  07C3               	addwf	___ftadd@f2+2,f
  8109  03CF  01C8               	clrf	___ftadd@sign
  8110  03D0  0AC8               	incf	___ftadd@sign,f
  8111  03D1                     l5336:	
  8112  03D1  0841               	movf	___ftadd@f2,w
  8113  03D2  00A0               	movwf	___ftpack@arg
  8114  03D3  0842               	movf	___ftadd@f2+1,w
  8115  03D4  00A1               	movwf	___ftpack@arg+1
  8116  03D5  0843               	movf	___ftadd@f2+2,w
  8117  03D6  00A2               	movwf	___ftpack@arg+2
  8118  03D7  084A               	movf	___ftadd@exp1,w
  8119  03D8  00C4               	movwf	??___ftadd
  8120  03D9  0844               	movf	??___ftadd,w
  8121  03DA  00A3               	movwf	___ftpack@exp
  8122  03DB  0848               	movf	___ftadd@sign,w
  8123  03DC  00C5               	movwf	??___ftadd+1
  8124  03DD  0845               	movf	??___ftadd+1,w
  8125  03DE  00A4               	movwf	___ftpack@sign
  8126  03DF  3189  21AE         	fcall	___ftpack
  8127  03E1  0020               	movlb	0	; select bank0
  8128  03E2  0820               	movf	?___ftpack,w
  8129  03E3  00BE               	movwf	?___ftadd
  8130  03E4  0821               	movf	?___ftpack+1,w
  8131  03E5  00BF               	movwf	?___ftadd+1
  8132  03E6  0822               	movf	?___ftpack+2,w
  8133  03E7  00C0               	movwf	?___ftadd+2
  8134  03E8  0008               	return
  8135  03E9                     __end_of___ftadd:	
  8136                           
  8137                           	psect	text33
  8138  117E                     __ptext33:	
  8139 ;; *************** function _getBuz_GO *****************
  8140 ;; Defined at:
  8141 ;;		line 82 in file "../src/Buzzer_B1.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;		None
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  i               2    4[BANK0 ] int 
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  2    0[BANK0 ] int 
  8148 ;; Registers used:
  8149 ;;		wreg, status,2, status,0
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8155 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;Total ram usage:        6 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; Hardware stack levels required when called:    5
  8162 ;; This function calls:
  8163 ;;		Nothing
  8164 ;; This function is called by:
  8165 ;;		_setRF_Main
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           
  8170                           ;psect for function _getBuz_GO
  8171  117E                     _getBuz_GO:	
  8172                           
  8173                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8177  117E  0021               	movlb	1	; select bank1
  8178  117F  0C33               	rrf	_Buz1^(0+128),w
  8179  1180  3901               	andlw	1
  8180  1181  0020               	movlb	0	; select bank0
  8181  1182  00A2               	movwf	??_getBuz_GO
  8182  1183  01A3               	clrf	??_getBuz_GO+1
  8183  1184  0822               	movf	??_getBuz_GO,w
  8184  1185  00A4               	movwf	getBuz_GO@i
  8185  1186  0823               	movf	??_getBuz_GO+1,w
  8186  1187  00A5               	movwf	getBuz_GO@i+1
  8187                           
  8188                           ;Buzzer_B1.c: 84: return i;
  8189  1188  0825               	movf	getBuz_GO@i+1,w
  8190  1189  01A1               	clrf	?_getBuz_GO+1
  8191  118A  07A1               	addwf	?_getBuz_GO+1,f
  8192  118B  0824               	movf	getBuz_GO@i,w
  8193  118C  01A0               	clrf	?_getBuz_GO
  8194  118D  07A0               	addwf	?_getBuz_GO,f
  8195  118E  0008               	return
  8196  118F                     __end_of_getBuz_GO:	
  8197                           
  8198                           	psect	text34
  8199  0A71                     __ptext34:	
  8200 ;; *************** function _CC2500_TxData *****************
  8201 ;; Defined at:
  8202 ;;		line 32 in file "../src/CC2500_B1.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;		None
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;		None               void
  8209 ;; Registers used:
  8210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;Total ram usage:        2 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    7
  8223 ;; This function calls:
  8224 ;;		_CC2500_WriteByte
  8225 ;;		_CC2500_WriteCommand
  8226 ;;		_Timeout_Counter
  8227 ;;		_set_TimeoutCleared
  8228 ;; This function is called by:
  8229 ;;		_setRF_Main
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           
  8234                           ;psect for function _CC2500_TxData
  8235  0A71                     _CC2500_TxData:	
  8236                           
  8237                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8238                           ;CC2500_B1.c: 35: RC4 = 0;
  8239                           
  8240                           ;incstack = 0
  8241                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8242  0A71  0020               	movlb	0	; select bank0
  8243  0A72  120E               	bcf	14,4	;volatile
  8244                           
  8245                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8246  0A73  307F               	movlw	127
  8247  0A74  00A4               	movwf	??_CC2500_TxData
  8248  0A75  0824               	movf	??_CC2500_TxData,w
  8249  0A76  00FB               	movwf	_SPI0Buffer
  8250                           
  8251                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8252  0A77  2A7B               	goto	l6054
  8253  0A78                     l6052:	
  8254                           
  8255                           ;CC2500_B1.c: 38: Timeout_Counter();
  8256  0A78  3192  224E  318A   	fcall	_Timeout_Counter
  8257  0A7B                     l6054:	
  8258  0A7B  0020               	movlb	0	; select bank0
  8259  0A7C  1D0E               	btfss	14,2	;volatile
  8260  0A7D  2A81               	goto	l6058
  8261  0A7E  0021               	movlb	1	; select bank1
  8262  0A7F  1D30               	btfss	(_myMain^(0+128)+16),2
  8263  0A80  2A78               	goto	l6052
  8264  0A81                     l6058:	
  8265                           
  8266                           ;CC2500_B1.c: 39: };
  8267                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8268  0A81  319F  2779  318A   	fcall	_set_TimeoutCleared
  8269                           
  8270                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8271  0A84  3191  21FE  318A   	fcall	_CC2500_WriteByte
  8272                           
  8273                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8274  0A87  0021               	movlb	1	; select bank1
  8275  0A88  085C               	movf	_Tx_Length^(0+128),w
  8276  0A89  0020               	movlb	0	; select bank0
  8277  0A8A  00A4               	movwf	??_CC2500_TxData
  8278  0A8B  0824               	movf	??_CC2500_TxData,w
  8279  0A8C  00FB               	movwf	_SPI0Buffer
  8280                           
  8281                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8282  0A8D  3191  21FE  318A   	fcall	_CC2500_WriteByte
  8283                           
  8284                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8285  0A90  0020               	movlb	0	; select bank0
  8286  0A91  01A5               	clrf	CC2500_TxData@loop_e
  8287  0A92                     l6072:	
  8288  0A92  0021               	movlb	1	; select bank1
  8289  0A93  085C               	movf	_Tx_Length^(0+128),w
  8290  0A94  0020               	movlb	0	; select bank0
  8291  0A95  0225               	subwf	CC2500_TxData@loop_e,w
  8292  0A96  1803               	btfsc	3,0
  8293  0A97  2AAA               	goto	l259
  8294                           
  8295                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8296  0A98  0825               	movf	CC2500_TxData@loop_e,w
  8297  0A99  3E20               	addlw	_RF_Data& (0+255)
  8298  0A9A  0086               	movwf	6
  8299  0A9B  3001               	movlw	1	; select bank2/3
  8300  0A9C  0087               	movwf	7
  8301  0A9D  0801               	movf	1,w
  8302  0A9E  00A4               	movwf	??_CC2500_TxData
  8303  0A9F  0824               	movf	??_CC2500_TxData,w
  8304  0AA0  00FB               	movwf	_SPI0Buffer
  8305                           
  8306                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8307  0AA1  3191  21FE  318A   	fcall	_CC2500_WriteByte
  8308  0AA4  3001               	movlw	1
  8309  0AA5  0020               	movlb	0	; select bank0
  8310  0AA6  00A4               	movwf	??_CC2500_TxData
  8311  0AA7  0824               	movf	??_CC2500_TxData,w
  8312  0AA8  07A5               	addwf	CC2500_TxData@loop_e,f
  8313  0AA9  2A92               	goto	l6072
  8314  0AAA                     l259:	
  8315                           
  8316                           ;CC2500_B1.c: 48: }
  8317                           ;CC2500_B1.c: 49: RC4 = 1;
  8318  0AAA  160E               	bsf	14,4	;volatile
  8319                           
  8320                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8321  0AAB  3035               	movlw	53
  8322  0AAC  3192  22E7  318A   	fcall	_CC2500_WriteCommand
  8323                           
  8324                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8325  0AAF  2AB3               	goto	l6078
  8326  0AB0                     l6076:	
  8327                           
  8328                           ;CC2500_B1.c: 52: Timeout_Counter();
  8329  0AB0  3192  224E  318A   	fcall	_Timeout_Counter
  8330  0AB3                     l6078:	
  8331  0AB3  0020               	movlb	0	; select bank0
  8332  0AB4  180D               	btfsc	13,0	;volatile
  8333  0AB5  2AB9               	goto	l6082
  8334  0AB6  0021               	movlb	1	; select bank1
  8335  0AB7  1D30               	btfss	(_myMain^(0+128)+16),2
  8336  0AB8  2AB0               	goto	l6076
  8337  0AB9                     l6082:	
  8338                           
  8339                           ;CC2500_B1.c: 53: };
  8340                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8341  0AB9  319F  2779  318A   	fcall	_set_TimeoutCleared
  8342                           
  8343                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8344  0ABC  2AC0               	goto	l6086
  8345  0ABD                     l6084:	
  8346                           
  8347                           ;CC2500_B1.c: 57: Timeout_Counter();
  8348  0ABD  3192  224E  318A   	fcall	_Timeout_Counter
  8349  0AC0                     l6086:	
  8350  0AC0  0020               	movlb	0	; select bank0
  8351  0AC1  1C0D               	btfss	13,0	;volatile
  8352  0AC2  2AC6               	goto	l6090
  8353  0AC3  0021               	movlb	1	; select bank1
  8354  0AC4  1D30               	btfss	(_myMain^(0+128)+16),2
  8355  0AC5  2ABD               	goto	l6084
  8356  0AC6                     l6090:	
  8357                           
  8358                           ;CC2500_B1.c: 58: };
  8359                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8360  0AC6  319F  2779  318A   	fcall	_set_TimeoutCleared
  8361                           
  8362                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8363  0AC9  3036               	movlw	54
  8364  0ACA  3192  22E7  318A   	fcall	_CC2500_WriteCommand
  8365                           
  8366                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8367  0ACD  303B               	movlw	59
  8368  0ACE  3192  22E7  318A   	fcall	_CC2500_WriteCommand
  8369                           
  8370                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8371  0AD1  303A               	movlw	58
  8372  0AD2  3192  22E7         	fcall	_CC2500_WriteCommand
  8373                           
  8374                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8375  0AD4  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8376  0AD5  0008               	return
  8377  0AD6                     __end_of_CC2500_TxData:	
  8378                           
  8379                           	psect	text35
  8380  0CF5                     __ptext35:	
  8381 ;; *************** function _CC2500_RxData *****************
  8382 ;; Defined at:
  8383 ;;		line 70 in file "../src/CC2500_B1.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;		None
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;		None               void
  8390 ;; Registers used:
  8391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:        2 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    7
  8404 ;; This function calls:
  8405 ;;		_CC2500_ReadByte
  8406 ;;		_CC2500_ReadStatus
  8407 ;;		_CC2500_WriteByte
  8408 ;;		_Timeout_Counter
  8409 ;;		_set_TimeoutCleared
  8410 ;; This function is called by:
  8411 ;;		_setRF_Main
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           
  8416                           ;psect for function _CC2500_RxData
  8417  0CF5                     _CC2500_RxData:	
  8418                           
  8419                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8420                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8424  0CF5  0020               	movlb	0	; select bank0
  8425  0CF6  180D               	btfsc	13,0	;volatile
  8426  0CF7  2CFC               	goto	l6106
  8427  0CF8  2D05               	goto	l6112
  8428  0CF9                     l6104:	
  8429                           ;CC2500_B1.c: 76: {
  8430                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8431                           
  8432                           
  8433                           ;CC2500_B1.c: 78: Timeout_Counter();
  8434  0CF9  3192  224E  318C   	fcall	_Timeout_Counter
  8435  0CFC                     l6106:	
  8436  0CFC  0020               	movlb	0	; select bank0
  8437  0CFD  1C0D               	btfss	13,0	;volatile
  8438  0CFE  2D02               	goto	l6110
  8439  0CFF  0021               	movlb	1	; select bank1
  8440  0D00  1D30               	btfss	(_myMain^(0+128)+16),2
  8441  0D01  2CF9               	goto	l6104
  8442  0D02                     l6110:	
  8443                           
  8444                           ;CC2500_B1.c: 79: };
  8445                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8446  0D02  319F  2779  318C   	fcall	_set_TimeoutCleared
  8447  0D05                     l6112:	
  8448                           
  8449                           ;CC2500_B1.c: 81: }
  8450                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8451  0D05  303B               	movlw	59
  8452  0D06  3194  2412  318C   	fcall	_CC2500_ReadStatus
  8453                           
  8454                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8455  0D09  0021               	movlb	1	; select bank1
  8456  0D0A  085F               	movf	_s_data^(0+128),w
  8457  0D0B  1903               	btfsc	3,2
  8458  0D0C  0008               	return
  8459                           
  8460                           ;CC2500_B1.c: 86: RC4 = 0;
  8461  0D0D  0020               	movlb	0	; select bank0
  8462  0D0E  120E               	bcf	14,4	;volatile
  8463                           
  8464                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8465  0D0F  30FF               	movlw	255
  8466  0D10  00A4               	movwf	??_CC2500_RxData
  8467  0D11  0824               	movf	??_CC2500_RxData,w
  8468  0D12  00FB               	movwf	_SPI0Buffer
  8469                           
  8470                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8471  0D13  2D1A               	goto	l6122
  8472  0D14                     l6124:	
  8473  0D14  0021               	movlb	1	; select bank1
  8474  0D15  1930               	btfsc	(_myMain^(0+128)+16),2
  8475  0D16  2D1D               	goto	l284
  8476                           
  8477                           ;CC2500_B1.c: 89: Timeout_Counter();
  8478  0D17  3192  224E  318C   	fcall	_Timeout_Counter
  8479  0D1A                     l6122:	
  8480  0D1A  0020               	movlb	0	; select bank0
  8481  0D1B  190E               	btfsc	14,2	;volatile
  8482  0D1C  2D14               	goto	l6124
  8483  0D1D                     l284:	
  8484                           
  8485                           ;CC2500_B1.c: 90: };
  8486                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8487  0D1D  0021               	movlb	1	; select bank1
  8488  0D1E  1930               	btfsc	(_myMain^(0+128)+16),2
  8489  0D1F  2D60               	goto	l285
  8490                           
  8491                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8492  0D20  3191  21FE  318C   	fcall	_CC2500_WriteByte
  8493                           
  8494                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8495  0D23  3192  22D0  318C   	fcall	_CC2500_ReadByte
  8496                           
  8497                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8498  0D26  087B               	movf	_SPI0Buffer,w
  8499  0D27  0020               	movlb	0	; select bank0
  8500  0D28  00A4               	movwf	??_CC2500_RxData
  8501  0D29  0824               	movf	??_CC2500_RxData,w
  8502  0D2A  0021               	movlb	1	; select bank1
  8503  0D2B  00DB               	movwf	_Rx_Length^(0+128)
  8504                           
  8505                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8506  0D2C  0020               	movlb	0	; select bank0
  8507  0D2D  01A5               	clrf	CC2500_RxData@loop_f
  8508  0D2E                     l6138:	
  8509  0D2E  0021               	movlb	1	; select bank1
  8510  0D2F  085B               	movf	_Rx_Length^(0+128),w
  8511  0D30  0020               	movlb	0	; select bank0
  8512  0D31  0225               	subwf	CC2500_RxData@loop_f,w
  8513  0D32  1803               	btfsc	3,0
  8514  0D33  2D46               	goto	l6140
  8515                           
  8516                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8517  0D34  3192  22D0  318C   	fcall	_CC2500_ReadByte
  8518                           
  8519                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8520  0D37  087B               	movf	_SPI0Buffer,w
  8521  0D38  0020               	movlb	0	; select bank0
  8522  0D39  00A4               	movwf	??_CC2500_RxData
  8523  0D3A  0825               	movf	CC2500_RxData@loop_f,w
  8524  0D3B  3E20               	addlw	_RF_Data& (0+255)
  8525  0D3C  0086               	movwf	6
  8526  0D3D  3001               	movlw	1	; select bank2/3
  8527  0D3E  0087               	movwf	7
  8528  0D3F  0824               	movf	??_CC2500_RxData,w
  8529  0D40  0081               	movwf	1
  8530  0D41  3001               	movlw	1
  8531  0D42  00A4               	movwf	??_CC2500_RxData
  8532  0D43  0824               	movf	??_CC2500_RxData,w
  8533  0D44  07A5               	addwf	CC2500_RxData@loop_f,f
  8534  0D45  2D2E               	goto	l6138
  8535  0D46                     l6140:	
  8536                           
  8537                           ;CC2500_B1.c: 99: }
  8538                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8539  0D46  3192  22D0  318C   	fcall	_CC2500_ReadByte
  8540                           
  8541                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8542  0D49  087B               	movf	_SPI0Buffer,w
  8543  0D4A  0020               	movlb	0	; select bank0
  8544  0D4B  00A4               	movwf	??_CC2500_RxData
  8545  0D4C  0824               	movf	??_CC2500_RxData,w
  8546  0D4D  0021               	movlb	1	; select bank1
  8547  0D4E  00DA               	movwf	_RSSI^(0+128)
  8548                           
  8549                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8550  0D4F  3192  22D0  318C   	fcall	_CC2500_ReadByte
  8551                           
  8552                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8553  0D52  087B               	movf	_SPI0Buffer,w
  8554  0D53  0020               	movlb	0	; select bank0
  8555  0D54  00A4               	movwf	??_CC2500_RxData
  8556  0D55  0824               	movf	??_CC2500_RxData,w
  8557  0D56  0021               	movlb	1	; select bank1
  8558  0D57  00D4               	movwf	_CRC^(0+128)
  8559                           
  8560                           ;CC2500_B1.c: 104: RC4 = 1;
  8561  0D58  0020               	movlb	0	; select bank0
  8562  0D59  160E               	bsf	14,4	;volatile
  8563                           
  8564                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8565  0D5A  0021               	movlb	1	; select bank1
  8566  0D5B  1BD4               	btfsc	_CRC^(0+128),7
  8567                           
  8568                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8569  0D5C  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8570                           
  8571                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8572  0D5D  11BF               	bcf	_RF1^(0+128),3
  8573                           
  8574                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8575  0D5E  14BF               	bsf	_RF1^(0+128),1
  8576                           
  8577                           ;CC2500_B1.c: 110: } else {
  8578  0D5F  2D62               	goto	l6152
  8579  0D60                     l285:	
  8580                           
  8581                           ;CC2500_B1.c: 111: RC4 = 1;
  8582  0D60  0020               	movlb	0	; select bank0
  8583  0D61  160E               	bsf	14,4	;volatile
  8584  0D62                     l6152:	
  8585                           
  8586                           ;CC2500_B1.c: 112: }
  8587                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8588  0D62  319F  2779         	fcall	_set_TimeoutCleared
  8589  0D64  0021               	movlb	1	; select bank1
  8590  0D65  0008               	return
  8591  0D66                     __end_of_CC2500_RxData:	
  8592                           
  8593                           	psect	text36
  8594  1412                     __ptext36:	
  8595 ;; *************** function _CC2500_ReadStatus *****************
  8596 ;; Defined at:
  8597 ;;		line 304 in file "../src/CC2500_B1.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  status_addr     1    wreg     unsigned char 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;		None               void
  8604 ;; Registers used:
  8605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;Total ram usage:        2 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    6
  8618 ;; This function calls:
  8619 ;;		_CC2500_ReadByte
  8620 ;;		_CC2500_WriteByte
  8621 ;;		_Timeout_Counter
  8622 ;;		_set_TimeoutCleared
  8623 ;; This function is called by:
  8624 ;;		_CC2500_RxData
  8625 ;;		_setRF_Main
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _CC2500_ReadStatus
  8631  1412                     _CC2500_ReadStatus:	
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8635                           ;CC2500_ReadStatus@status_addr stored from wreg
  8636  1412  0020               	movlb	0	; select bank0
  8637  1413  00A3               	movwf	CC2500_ReadStatus@status_addr
  8638                           
  8639                           ;CC2500_B1.c: 305: RC4 = 0;
  8640  1414  120E               	bcf	14,4	;volatile
  8641                           
  8642                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8643  1415  0823               	movf	CC2500_ReadStatus@status_addr,w
  8644  1416  3EC0               	addlw	192
  8645  1417  00A2               	movwf	??_CC2500_ReadStatus
  8646  1418  0822               	movf	??_CC2500_ReadStatus,w
  8647  1419  00FB               	movwf	_SPI0Buffer
  8648                           
  8649                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8650  141A  2C1E               	goto	l5960
  8651  141B                     l5958:	
  8652                           
  8653                           ;CC2500_B1.c: 309: Timeout_Counter();
  8654  141B  3192  224E  3194   	fcall	_Timeout_Counter
  8655  141E                     l5960:	
  8656  141E  0020               	movlb	0	; select bank0
  8657  141F  1D0E               	btfss	14,2	;volatile
  8658  1420  2C24               	goto	l5964
  8659  1421  0021               	movlb	1	; select bank1
  8660  1422  1D30               	btfss	(_myMain^(0+128)+16),2
  8661  1423  2C1B               	goto	l5958
  8662  1424                     l5964:	
  8663                           
  8664                           ;CC2500_B1.c: 310: };
  8665                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8666  1424  319F  2779  3194   	fcall	_set_TimeoutCleared
  8667                           
  8668                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8669  1427  3191  21FE  3194   	fcall	_CC2500_WriteByte
  8670                           
  8671                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8672  142A  3192  22D0         	fcall	_CC2500_ReadByte
  8673                           
  8674                           ;CC2500_B1.c: 315: RC4 = 1;
  8675  142C  0020               	movlb	0	; select bank0
  8676  142D  160E               	bsf	14,4	;volatile
  8677                           
  8678                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8679  142E  087B               	movf	_SPI0Buffer,w
  8680  142F  00A2               	movwf	??_CC2500_ReadStatus
  8681  1430  0822               	movf	??_CC2500_ReadStatus,w
  8682  1431  0021               	movlb	1	; select bank1
  8683  1432  00DF               	movwf	_s_data^(0+128)
  8684  1433  0008               	return
  8685  1434                     __end_of_CC2500_ReadStatus:	
  8686                           
  8687                           	psect	text37
  8688  12D0                     __ptext37:	
  8689 ;; *************** function _CC2500_ReadByte *****************
  8690 ;; Defined at:
  8691 ;;		line 238 in file "../src/CC2500_B1.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;		None               void
  8698 ;; Registers used:
  8699 ;;		wreg, status,2, status,0
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;Total ram usage:        2 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    5
  8712 ;; This function calls:
  8713 ;;		Nothing
  8714 ;; This function is called by:
  8715 ;;		_CC2500_RxData
  8716 ;;		_CC2500_ReadStatus
  8717 ;;		_CC2500_ReadREG
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           
  8722                           ;psect for function _CC2500_ReadByte
  8723  12D0                     _CC2500_ReadByte:	
  8724                           
  8725                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8726                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8727                           
  8728                           ;incstack = 0
  8729                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8730  12D0  0020               	movlb	0	; select bank0
  8731  12D1  01A1               	clrf	CC2500_ReadByte@loop_b
  8732  12D2                     L4:	
  8733  12D2  3008               	movlw	8
  8734  12D3  0221               	subwf	CC2500_ReadByte@loop_b,w
  8735  12D4  1803               	btfsc	3,0
  8736  12D5  0008               	return
  8737                           
  8738                           ;CC2500_B1.c: 241: RC1 = 1;
  8739  12D6  148E               	bsf	14,1	;volatile
  8740                           
  8741                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8742  12D7  1003               	clrc
  8743  12D8  0DFB               	rlf	_SPI0Buffer,f
  8744                           
  8745                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8746  12D9  1D0E               	btfss	14,2	;volatile
  8747  12DA  2ADD               	goto	l5852
  8748                           
  8749                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8750  12DB  147B               	bsf	_SPI0Buffer,0
  8751  12DC  2AE1               	goto	l5854
  8752  12DD                     l5852:	
  8753                           
  8754                           ;CC2500_B1.c: 245: else
  8755                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8756  12DD  30FE               	movlw	254
  8757  12DE  00A0               	movwf	??_CC2500_ReadByte
  8758  12DF  0820               	movf	??_CC2500_ReadByte,w
  8759  12E0  05FB               	andwf	_SPI0Buffer,f
  8760  12E1                     l5854:	
  8761                           
  8762                           ;CC2500_B1.c: 247: RC1 = 0;
  8763  12E1  108E               	bcf	14,1	;volatile
  8764  12E2  3001               	movlw	1
  8765  12E3  00A0               	movwf	??_CC2500_ReadByte
  8766  12E4  0820               	movf	??_CC2500_ReadByte,w
  8767  12E5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8768  12E6  2AD2               	goto	L4
  8769  12E7                     __end_of_CC2500_ReadByte:	
  8770                           
  8771                           	psect	text38
  8772  1F67                     __ptext38:	
  8773 ;; *************** function _RF_Initialization *****************
  8774 ;; Defined at:
  8775 ;;		line 9 in file "../src/RF_Control_B1.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;		None
  8780 ;; Return value:  Size  Location     Type
  8781 ;;		None               void
  8782 ;; Registers used:
  8783 ;;		wreg, status,2, status,0, pclath, cstack
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;Total ram usage:        0 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    6
  8796 ;; This function calls:
  8797 ;;		_setRF_Initialization
  8798 ;; This function is called by:
  8799 ;;		_main
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           
  8804                           ;psect for function _RF_Initialization
  8805  1F67                     _RF_Initialization:	
  8806                           
  8807                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8811  1F67  3190  2075         	fcall	_setRF_Initialization
  8812  1F69  0008               	return
  8813  1F6A                     __end_of_RF_Initialization:	
  8814                           
  8815                           	psect	text39
  8816  1075                     __ptext39:	
  8817 ;; *************** function _setRF_Initialization *****************
  8818 ;; Defined at:
  8819 ;;		line 43 in file "../src/RF_Control_B1.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;		None
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;		None
  8824 ;; Return value:  Size  Location     Type
  8825 ;;		None               void
  8826 ;; Registers used:
  8827 ;;		wreg
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;Total ram usage:        1 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    5
  8840 ;; This function calls:
  8841 ;;		Nothing
  8842 ;; This function is called by:
  8843 ;;		_RF_Initialization
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function _setRF_Initialization
  8849  1075                     _setRF_Initialization:	
  8850                           
  8851                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _setRF_Initialization: [wreg]
  8855  1075  3015               	movlw	21
  8856  1076  0020               	movlb	0	; select bank0
  8857  1077  00A0               	movwf	??_setRF_Initialization
  8858  1078  0820               	movf	??_setRF_Initialization,w
  8859  1079  0021               	movlb	1	; select bank1
  8860  107A  00DC               	movwf	_Tx_Length^(0+128)
  8861                           
  8862                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  8863  107B  3014               	movlw	20
  8864  107C  00C6               	movwf	(_RF1^(0+128)+7)
  8865  107D  3000               	movlw	0
  8866  107E  00C7               	movwf	(_RF1^(0+128)+8)
  8867  107F  0008               	return
  8868  1080                     __end_of_setRF_Initialization:	
  8869                           
  8870                           	psect	text40
  8871  1278                     __ptext40:	
  8872 ;; *************** function _Mcu_Initialization *****************
  8873 ;; Defined at:
  8874 ;;		line 30 in file "../src/MCU_B1.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;		None
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;		None
  8879 ;; Return value:  Size  Location     Type
  8880 ;;		None               void
  8881 ;; Registers used:
  8882 ;;		wreg, status,2, status,0, pclath, cstack
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;Total ram usage:        0 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    6
  8895 ;; This function calls:
  8896 ;;		_ADC_Set
  8897 ;;		_Fosc_Set
  8898 ;;		_INT_Set
  8899 ;;		_IOC_Set
  8900 ;;		_IO_Set
  8901 ;;		_TMR1_Set
  8902 ;;		_WDT_Set
  8903 ;; This function is called by:
  8904 ;;		_main
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _Mcu_Initialization
  8910  1278                     _Mcu_Initialization:	
  8911                           
  8912                           ;MCU_B1.c: 32: Fosc_Set();
  8913                           
  8914                           ;incstack = 0
  8915                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8916  1278  3190  2066  3192   	fcall	_Fosc_Set
  8917                           
  8918                           ;MCU_B1.c: 34: IO_Set();
  8919  127B  3193  2300  3192   	fcall	_IO_Set
  8920                           
  8921                           ;MCU_B1.c: 36: ;;
  8922                           ;MCU_B1.c: 38: TMR1_Set();
  8923  127E  3190  20B0  3192   	fcall	_TMR1_Set
  8924                           
  8925                           ;MCU_B1.c: 40: ADC_Set();
  8926  1281  319F  2797  3192   	fcall	_ADC_Set
  8927                           
  8928                           ;MCU_B1.c: 42: ;;
  8929                           ;MCU_B1.c: 44: INT_Set();
  8930  1284  319F  277E  3192   	fcall	_INT_Set
  8931                           
  8932                           ;MCU_B1.c: 46: IOC_Set();
  8933  1287  3190  20C9  3192   	fcall	_IOC_Set
  8934                           
  8935                           ;MCU_B1.c: 48: ;;
  8936                           ;MCU_B1.c: 50: ;;
  8937                           ;MCU_B1.c: 52: WDT_Set();
  8938  128A  3190  206A         	fcall	_WDT_Set
  8939  128C  0008               	return
  8940  128D                     __end_of_Mcu_Initialization:	
  8941                           
  8942                           	psect	text41
  8943  106A                     __ptext41:	
  8944 ;; *************** function _WDT_Set *****************
  8945 ;; Defined at:
  8946 ;;		line 1005 in file "../src/MCU_B1.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;		None
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;		None
  8951 ;; Return value:  Size  Location     Type
  8952 ;;		None               void
  8953 ;; Registers used:
  8954 ;;		wreg
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;Total ram usage:        1 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    5
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_Mcu_Initialization
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _WDT_Set
  8976  106A                     _WDT_Set:	
  8977                           
  8978                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _WDT_Set: [wreg]
  8982  106A  3017               	movlw	23
  8983  106B  0021               	movlb	1	; select bank1
  8984  106C  0097               	movwf	23	;volatile
  8985                           
  8986                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  8987  106D  1452               	bsf	_WDT^(0+128),0
  8988                           
  8989                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  8990  106E  300A               	movlw	10
  8991  106F  0020               	movlb	0	; select bank0
  8992  1070  00A0               	movwf	??_WDT_Set
  8993  1071  0820               	movf	??_WDT_Set,w
  8994  1072  0021               	movlb	1	; select bank1
  8995  1073  00D3               	movwf	(_WDT^(0+128)+1)
  8996  1074  0008               	return
  8997  1075                     __end_of_WDT_Set:	
  8998                           
  8999                           	psect	text42
  9000  10B0                     __ptext42:	
  9001 ;; *************** function _TMR1_Set *****************
  9002 ;; Defined at:
  9003 ;;		line 199 in file "../src/MCU_B1.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;		None
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;		None
  9008 ;; Return value:  Size  Location     Type
  9009 ;;		None               void
  9010 ;; Registers used:
  9011 ;;		wreg
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;Total ram usage:        0 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; Hardware stack levels required when called:    5
  9024 ;; This function calls:
  9025 ;;		Nothing
  9026 ;; This function is called by:
  9027 ;;		_Mcu_Initialization
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _TMR1_Set
  9033  10B0                     _TMR1_Set:	
  9034                           
  9035                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in _TMR1_Set: [wreg]
  9039  10B0  3041               	movlw	65
  9040  10B1  0020               	movlb	0	; select bank0
  9041  10B2  0098               	movwf	24	;volatile
  9042                           
  9043                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9044  10B3  30FA               	movlw	250
  9045  10B4  0097               	movwf	23	;volatile
  9046                           
  9047                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9048  10B5  3038               	movlw	56
  9049  10B6  0096               	movwf	22	;volatile
  9050                           
  9051                           ;MCU_B1.c: 203: TMR1IE = 1;
  9052  10B7  0021               	movlb	1	; select bank1
  9053  10B8  1411               	bsf	17,0	;volatile
  9054                           
  9055                           ;MCU_B1.c: 204: PEIE = 1;
  9056  10B9  170B               	bsf	11,6	;volatile
  9057                           
  9058                           ;MCU_B1.c: 205: GIE = 1;
  9059  10BA  178B               	bsf	11,7	;volatile
  9060  10BB  0008               	return
  9061  10BC                     __end_of_TMR1_Set:	
  9062                           
  9063                           	psect	text43
  9064  1300                     __ptext43:	
  9065 ;; *************** function _IO_Set *****************
  9066 ;; Defined at:
  9067 ;;		line 60 in file "../src/MCU_B1.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;		None
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;		None
  9072 ;; Return value:  Size  Location     Type
  9073 ;;		None               void
  9074 ;; Registers used:
  9075 ;;		wreg, status,2
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;Total ram usage:        0 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    5
  9088 ;; This function calls:
  9089 ;;		Nothing
  9090 ;; This function is called by:
  9091 ;;		_Mcu_Initialization
  9092 ;; This function uses a non-reentrant model
  9093 ;;
  9094                           
  9095                           
  9096                           ;psect for function _IO_Set
  9097  1300                     _IO_Set:	
  9098                           
  9099                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9100                           
  9101                           ;incstack = 0
  9102                           ; Regs used in _IO_Set: [wreg+status,2]
  9103  1300  3077               	movlw	119
  9104  1301  0021               	movlb	1	; select bank1
  9105  1302  008C               	movwf	12	;volatile
  9106                           
  9107                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9108  1303  3007               	movlw	7
  9109  1304  008D               	movwf	13	;volatile
  9110                           
  9111                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9112  1305  300C               	movlw	12
  9113  1306  008E               	movwf	14	;volatile
  9114                           
  9115                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9116  1307  0022               	movlb	2	; select bank2
  9117  1308  018C               	clrf	12	;volatile
  9118                           
  9119                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9120  1309  3002               	movlw	2
  9121  130A  008D               	movwf	13	;volatile
  9122                           
  9123                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9124  130B  018E               	clrf	14	;volatile
  9125                           
  9126                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9127  130C  3022               	movlw	34
  9128  130D  0023               	movlb	3	; select bank3
  9129  130E  008C               	movwf	12	;volatile
  9130                           
  9131                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9132  130F  018D               	clrf	13	;volatile
  9133                           
  9134                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9135  1310  018E               	clrf	14	;volatile
  9136                           
  9137                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9138  1311  3077               	movlw	119
  9139  1312  0020               	movlb	0	; select bank0
  9140  1313  008C               	movwf	12	;volatile
  9141                           
  9142                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9143  1314  3007               	movlw	7
  9144  1315  008D               	movwf	13	;volatile
  9145                           
  9146                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9147  1316  300C               	movlw	12
  9148  1317  008E               	movwf	14	;volatile
  9149  1318  0008               	return
  9150  1319                     __end_of_IO_Set:	
  9151                           
  9152                           	psect	text44
  9153  10C9                     __ptext44:	
  9154 ;; *************** function _IOC_Set *****************
  9155 ;; Defined at:
  9156 ;;		line 367 in file "../src/MCU_B1.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;		None
  9161 ;; Return value:  Size  Location     Type
  9162 ;;		None               void
  9163 ;; Registers used:
  9164 ;;		wreg, status,2
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;Total ram usage:        0 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    5
  9177 ;; This function calls:
  9178 ;;		Nothing
  9179 ;; This function is called by:
  9180 ;;		_Mcu_Initialization
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _IOC_Set
  9186  10C9                     _IOC_Set:	
  9187                           
  9188                           ;MCU_B1.c: 368: WPUB2 = 0;
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _IOC_Set: [wreg+status,2]
  9192  10C9  0024               	movlb	4	; select bank4
  9193  10CA  110D               	bcf	13,2	;volatile
  9194                           
  9195                           ;MCU_B1.c: 382: IOCBP = 0b00000100;
  9196  10CB  3004               	movlw	4
  9197  10CC  0027               	movlb	7	; select bank7
  9198  10CD  0094               	movwf	20	;volatile
  9199                           
  9200                           ;MCU_B1.c: 383: IOCBN = 0b00000100;
  9201  10CE  3004               	movlw	4
  9202  10CF  0095               	movwf	21	;volatile
  9203                           
  9204                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9205  10D0  0196               	clrf	22	;volatile
  9206                           
  9207                           ;MCU_B1.c: 394: IOCIE = 1;
  9208  10D1  158B               	bsf	11,3	;volatile
  9209                           
  9210                           ;MCU_B1.c: 395: IOCIF = 0;
  9211  10D2  100B               	bcf	11,0	;volatile
  9212                           
  9213                           ;MCU_B1.c: 396: PEIE = 1;
  9214  10D3  170B               	bsf	11,6	;volatile
  9215                           
  9216                           ;MCU_B1.c: 397: GIE = 1;
  9217  10D4  178B               	bsf	11,7	;volatile
  9218  10D5  0008               	return
  9219  10D6                     __end_of_IOC_Set:	
  9220                           
  9221                           	psect	text45
  9222  1F7E                     __ptext45:	
  9223 ;; *************** function _INT_Set *****************
  9224 ;; Defined at:
  9225 ;;		line 340 in file "../src/MCU_B1.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;		None
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;		None
  9230 ;; Return value:  Size  Location     Type
  9231 ;;		None               void
  9232 ;; Registers used:
  9233 ;;		None
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;Total ram usage:        0 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    5
  9246 ;; This function calls:
  9247 ;;		Nothing
  9248 ;; This function is called by:
  9249 ;;		_Mcu_Initialization
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           
  9254                           ;psect for function _INT_Set
  9255  1F7E                     _INT_Set:	
  9256                           
  9257                           ;MCU_B1.c: 341: WPUB0 = 0;
  9258                           
  9259                           ;incstack = 0
  9260                           ; Regs used in _INT_Set: []
  9261  1F7E  0024               	movlb	4	; select bank4
  9262  1F7F  100D               	bcf	13,0	;volatile
  9263                           
  9264                           ;MCU_B1.c: 342: INTE = 0;
  9265  1F80  120B               	bcf	11,4	;volatile
  9266                           
  9267                           ;MCU_B1.c: 343: PEIE = 1;
  9268  1F81  170B               	bsf	11,6	;volatile
  9269                           
  9270                           ;MCU_B1.c: 344: GIE = 1;
  9271  1F82  178B               	bsf	11,7	;volatile
  9272  1F83  0008               	return
  9273  1F84                     __end_of_INT_Set:	
  9274                           
  9275                           	psect	text46
  9276  1066                     __ptext46:	
  9277 ;; *************** function _Fosc_Set *****************
  9278 ;; Defined at:
  9279 ;;		line 56 in file "../src/MCU_B1.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;		None
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;		None
  9284 ;; Return value:  Size  Location     Type
  9285 ;;		None               void
  9286 ;; Registers used:
  9287 ;;		wreg
  9288 ;; Tracked objects:
  9289 ;;		On entry : 0/0
  9290 ;;		On exit  : 0/0
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;Total ram usage:        0 bytes
  9298 ;; Hardware stack levels used:    1
  9299 ;; Hardware stack levels required when called:    5
  9300 ;; This function calls:
  9301 ;;		Nothing
  9302 ;; This function is called by:
  9303 ;;		_Mcu_Initialization
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307                           
  9308                           ;psect for function _Fosc_Set
  9309  1066                     _Fosc_Set:	
  9310                           
  9311                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9312                           
  9313                           ;incstack = 0
  9314                           ; Regs used in _Fosc_Set: [wreg]
  9315  1066  3078               	movlw	120
  9316  1067  0021               	movlb	1	; select bank1
  9317  1068  0099               	movwf	25	;volatile
  9318  1069  0008               	return
  9319  106A                     __end_of_Fosc_Set:	
  9320                           
  9321                           	psect	text47
  9322  1F97                     __ptext47:	
  9323 ;; *************** function _ADC_Set *****************
  9324 ;; Defined at:
  9325 ;;		line 419 in file "../src/MCU_B1.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    5
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_Mcu_Initialization
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _ADC_Set
  9355  1F97                     _ADC_Set:	
  9356                           
  9357                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in _ADC_Set: [wreg]
  9361  1F97  30F2               	movlw	242
  9362  1F98  0021               	movlb	1	; select bank1
  9363  1F99  009E               	movwf	30	;volatile
  9364                           
  9365                           ;MCU_B1.c: 421: FVRCON = 0xc0;
  9366  1F9A  30C0               	movlw	192
  9367  1F9B  0022               	movlb	2	; select bank2
  9368  1F9C  0097               	movwf	23	;volatile
  9369  1F9D  0008               	return
  9370  1F9E                     __end_of_ADC_Set:	
  9371                           
  9372                           	psect	text48
  9373  10A4                     __ptext48:	
  9374 ;; *************** function _LED_Main *****************
  9375 ;; Defined at:
  9376 ;;		line 47 in file "../src/LED_B1.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;		None
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;		None
  9381 ;; Return value:  Size  Location     Type
  9382 ;;		None               void
  9383 ;; Registers used:
  9384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;Total ram usage:        0 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    7
  9397 ;; This function calls:
  9398 ;;		_setLED_Main
  9399 ;; This function is called by:
  9400 ;;		_main
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           
  9405                           ;psect for function _LED_Main
  9406  10A4                     _LED_Main:	
  9407                           
  9408                           ;LED_B1.c: 49: setLED_Main(1);
  9409                           
  9410                           ;incstack = 0
  9411                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9412  10A4  3001               	movlw	1
  9413  10A5  3197  276D  3190   	fcall	_setLED_Main
  9414                           
  9415                           ;LED_B1.c: 52: setLED_Main(2);
  9416  10A8  3002               	movlw	2
  9417  10A9  3197  276D  3190   	fcall	_setLED_Main
  9418                           
  9419                           ;LED_B1.c: 58: setLED_Main(99);
  9420  10AC  3063               	movlw	99
  9421  10AD  3197  276D         	fcall	_setLED_Main
  9422  10AF  0008               	return
  9423  10B0                     __end_of_LED_Main:	
  9424                           
  9425                           	psect	text49
  9426  176D                     __ptext49:	
  9427 ;; *************** function _setLED_Main *****************
  9428 ;; Defined at:
  9429 ;;		line 192 in file "../src/LED_B1.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  led             1    wreg     unsigned char 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;  led             1    3[BANK0 ] unsigned char 
  9434 ;; Return value:  Size  Location     Type
  9435 ;;		None               void
  9436 ;; Registers used:
  9437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;Total ram usage:        3 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    6
  9450 ;; This function calls:
  9451 ;;		_LedPointSelect
  9452 ;; This function is called by:
  9453 ;;		_LED_Main
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function _setLED_Main
  9459  176D                     _setLED_Main:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9463                           ;setLED_Main@led stored from wreg
  9464  176D  0020               	movlb	0	; select bank0
  9465  176E  00A3               	movwf	setLED_Main@led
  9466                           
  9467                           ;LED_B1.c: 193: LedPointSelect(led);
  9468  176F  0823               	movf	setLED_Main@led,w
  9469  1770  3193  23F0  3197   	fcall	_LedPointSelect
  9470                           
  9471                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9472  1773  0021               	movlb	1	; select bank1
  9473  1774  084E               	movf	_LED^(0+128),w
  9474  1775  0086               	movwf	6
  9475  1776  084F               	movf	(_LED+1)^(0+128),w
  9476  1777  0087               	movwf	7
  9477  1778  1C81               	btfss	1,1
  9478  1779  0008               	return
  9479                           
  9480                           ;LED_B1.c: 195: LED->Time++;
  9481  177A  084E               	movf	_LED^(0+128),w
  9482  177B  0086               	movwf	6
  9483  177C  084F               	movf	(_LED+1)^(0+128),w
  9484  177D  0087               	movwf	7
  9485  177E  3141               	addfsr 1,1
  9486  177F  3001               	movlw	1
  9487  1780  0781               	addwf	1,f
  9488  1781  3141               	addfsr 1,1
  9489  1782  1803               	skipnc
  9490  1783  0A81               	incf	1,f
  9491                           
  9492                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9493  1784  084E               	movf	_LED^(0+128),w
  9494  1785  0086               	movwf	6
  9495  1786  084F               	movf	(_LED+1)^(0+128),w
  9496  1787  0087               	movwf	7
  9497  1788  3141               	addfsr 1,1
  9498  1789  3F40               	moviw [0]fsr1
  9499  178A  0020               	movlb	0	; select bank0
  9500  178B  00A1               	movwf	??_setLED_Main
  9501  178C  3F41               	moviw [1]fsr1
  9502  178D  00A2               	movwf	??_setLED_Main+1
  9503  178E  3000               	movlw	0
  9504  178F  0222               	subwf	??_setLED_Main+1,w
  9505  1790  3032               	movlw	50
  9506  1791  1903               	skipnz
  9507  1792  0221               	subwf	??_setLED_Main,w
  9508  1793  1C03               	skipc
  9509  1794  0008               	return
  9510                           
  9511                           ;LED_B1.c: 197: LED->Time = 0;
  9512  1795  0021               	movlb	1	; select bank1
  9513  1796  084E               	movf	_LED^(0+128),w
  9514  1797  0086               	movwf	6
  9515  1798  084F               	movf	(_LED+1)^(0+128),w
  9516  1799  0087               	movwf	7
  9517  179A  3141               	addfsr 1,1
  9518  179B  3000               	movlw	0
  9519  179C  3FC0               	movwi [0]fsr1
  9520  179D  3FC1               	movwi [1]fsr1
  9521                           
  9522                           ;LED_B1.c: 199: if (led == 1) {
  9523  179E  0020               	movlb	0	; select bank0
  9524  179F  0823               	movf	setLED_Main@led,w
  9525  17A0  3A01               	xorlw	1
  9526  17A1  1D03               	skipz
  9527  17A2  2FA6               	goto	l7654
  9528                           
  9529                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
  9530  17A3  3008               	movlw	8
  9531  17A4  068C               	xorwf	12,f
  9532                           
  9533                           ;LED_B1.c: 201: }
  9534  17A5  0008               	return
  9535  17A6                     l7654:	
  9536                           
  9537                           ;LED_B1.c: 204: else if (led == 2) {
  9538  17A6  0823               	movf	setLED_Main@led,w
  9539  17A7  3A02               	xorlw	2
  9540  17A8  1D03               	skipz
  9541  17A9  2FAD               	goto	l7658
  9542                           
  9543                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
  9544  17AA  3080               	movlw	128
  9545  17AB  068E               	xorwf	14,f
  9546                           
  9547                           ;LED_B1.c: 206: }
  9548  17AC  0008               	return
  9549  17AD                     l7658:	
  9550                           
  9551                           ;LED_B1.c: 214: else if (led == 99) {
  9552  17AD  0823               	movf	setLED_Main@led,w
  9553  17AE  3A63               	xorlw	99
  9554  17AF  1D03               	skipz
  9555  17B0  0008               	return
  9556                           
  9557                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9558  17B1  3020               	movlw	32
  9559  17B2  068D               	xorwf	13,f
  9560  17B3  0008               	return
  9561  17B4                     __end_of_setLED_Main:	
  9562                           
  9563                           	psect	text50
  9564  1098                     __ptext50:	
  9565 ;; *************** function _LED_Initialization *****************
  9566 ;; Defined at:
  9567 ;;		line 31 in file "../src/LED_B1.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;		None
  9572 ;; Return value:  Size  Location     Type
  9573 ;;		None               void
  9574 ;; Registers used:
  9575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;Total ram usage:        0 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    8
  9588 ;; This function calls:
  9589 ;;		_setLED_Initialization
  9590 ;; This function is called by:
  9591 ;;		_main
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _LED_Initialization
  9597  1098                     _LED_Initialization:	
  9598                           
  9599                           ;LED_B1.c: 33: setLED_Initialization(1);
  9600                           
  9601                           ;incstack = 0
  9602                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9603  1098  3001               	movlw	1
  9604  1099  3191  21A1  3190   	fcall	_setLED_Initialization
  9605                           
  9606                           ;LED_B1.c: 36: setLED_Initialization(2);
  9607  109C  3002               	movlw	2
  9608  109D  3191  21A1  3190   	fcall	_setLED_Initialization
  9609                           
  9610                           ;LED_B1.c: 42: setLED_Initialization(99);
  9611  10A0  3063               	movlw	99
  9612  10A1  3191  21A1         	fcall	_setLED_Initialization
  9613  10A3  0008               	return
  9614  10A4                     __end_of_LED_Initialization:	
  9615                           
  9616                           	psect	text51
  9617  11A1                     __ptext51:	
  9618 ;; *************** function _setLED_Initialization *****************
  9619 ;; Defined at:
  9620 ;;		line 63 in file "../src/LED_B1.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  led             1    wreg     unsigned char 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  led             1    3[BANK0 ] unsigned char 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;		None               void
  9627 ;; Registers used:
  9628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;Total ram usage:        1 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    7
  9641 ;; This function calls:
  9642 ;;		_LedPointSelect
  9643 ;;		_setLED
  9644 ;; This function is called by:
  9645 ;;		_LED_Initialization
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function _setLED_Initialization
  9651  11A1                     _setLED_Initialization:	
  9652                           
  9653                           ;incstack = 0
  9654                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9655                           ;setLED_Initialization@led stored from wreg
  9656  11A1  0020               	movlb	0	; select bank0
  9657  11A2  00A3               	movwf	setLED_Initialization@led
  9658                           
  9659                           ;LED_B1.c: 64: LedPointSelect(led);
  9660  11A3  0823               	movf	setLED_Initialization@led,w
  9661  11A4  3193  23F0  3191   	fcall	_LedPointSelect
  9662                           
  9663                           ;LED_B1.c: 65: LED->Enable = 1;
  9664  11A7  0021               	movlb	1	; select bank1
  9665  11A8  084E               	movf	_LED^(0+128),w
  9666  11A9  0086               	movwf	6
  9667  11AA  084F               	movf	(_LED+1)^(0+128),w
  9668  11AB  0087               	movwf	7
  9669  11AC  1401               	bsf	1,0
  9670                           
  9671                           ;LED_B1.c: 66: setLED(led, 0);
  9672  11AD  0020               	movlb	0	; select bank0
  9673  11AE  01A1               	clrf	setLED@command
  9674  11AF  0823               	movf	setLED_Initialization@led,w
  9675  11B0  318A  220F         	fcall	_setLED
  9676  11B2  0008               	return
  9677  11B3                     __end_of_setLED_Initialization:	
  9678                           
  9679                           	psect	text52
  9680  136E                     __ptext52:	
  9681 ;; *************** function _Flash_Memory_Main *****************
  9682 ;; Defined at:
  9683 ;;		line 900 in file "../src/MCU_B1.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;		None
  9688 ;; Return value:  Size  Location     Type
  9689 ;;		None               void
  9690 ;; Registers used:
  9691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;Total ram usage:        0 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; Hardware stack levels required when called:    8
  9704 ;; This function calls:
  9705 ;;		_Flash_Memory_Modify
  9706 ;; This function is called by:
  9707 ;;		_main
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           
  9712                           ;psect for function _Flash_Memory_Main
  9713  136E                     _Flash_Memory_Main:	
  9714                           
  9715                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
  9716                           
  9717                           ;incstack = 0
  9718                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9719  136E  0023               	movlb	3	; select bank3
  9720  136F  1CC4               	btfss	(_Memory^(0+384)+36),1
  9721  1370  0008               	return
  9722                           
  9723                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
  9724  1371  1C44               	btfss	(_Memory^(0+384)+36),0
  9725  1372  2B8B               	goto	l1327
  9726                           
  9727                           ;MCU_B1.c: 903: Memory.Time++;
  9728  1373  3001               	movlw	1
  9729  1374  07C2               	addwf	(_Memory^(0+384)+34),f
  9730  1375  3000               	movlw	0
  9731  1376  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9732                           
  9733                           ;MCU_B1.c: 904: if (Memory.Time == 25)
  9734  1377  3022               	movlw	34
  9735  1378  3EA0               	addlw	_Memory& (0+255)
  9736  1379  0086               	movwf	6
  9737  137A  3001               	movlw	1	; select bank3/4
  9738  137B  0087               	movwf	7
  9739  137C  3F40               	moviw [0]fsr1
  9740  137D  3A19               	xorlw	25
  9741  137E  1D03               	skipz
  9742  137F  2B82               	goto	u6765
  9743  1380  3F41               	moviw [1]fsr1
  9744  1381  3A00               	xorlw	0
  9745  1382                     u6765:	
  9746  1382  1D03               	skipz
  9747  1383  0008               	return
  9748                           
  9749                           ;MCU_B1.c: 905: {
  9750                           ;MCU_B1.c: 906: Memory.Time = 0;
  9751  1384  01C2               	clrf	(_Memory^(0+384)+34)
  9752  1385  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9753                           
  9754                           ;MCU_B1.c: 907: Memory.Modify = 0;
  9755  1386  1044               	bcf	(_Memory^(0+384)+36),0
  9756                           
  9757                           ;MCU_B1.c: 908: Memory.GO = 0;
  9758  1387  10C4               	bcf	(_Memory^(0+384)+36),1
  9759                           
  9760                           ;MCU_B1.c: 909: Flash_Memory_Modify();
  9761  1388  3196  26E3         	fcall	_Flash_Memory_Modify
  9762                           
  9763                           ;MCU_B1.c: 910: }
  9764                           ;MCU_B1.c: 911: } else {
  9765  138A  0008               	return
  9766  138B                     l1327:	
  9767                           
  9768                           ;MCU_B1.c: 912: Memory.GO = 0;
  9769  138B  10C4               	bcf	(_Memory^(0+384)+36),1
  9770  138C  0008               	return
  9771  138D                     __end_of_Flash_Memory_Main:	
  9772                           
  9773                           	psect	text53
  9774  16E3                     __ptext53:	
  9775 ;; *************** function _Flash_Memory_Modify *****************
  9776 ;; Defined at:
  9777 ;;		line 969 in file "../src/MCU_B1.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  i               1    5[BANK0 ] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        2 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    7
  9798 ;; This function calls:
  9799 ;;		_Flash_Memory_Erasing
  9800 ;;		_Flash_Memory_Read
  9801 ;;		_Flash_Memory_Write
  9802 ;; This function is called by:
  9803 ;;		_Flash_Memory_Main
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function _Flash_Memory_Modify
  9809  16E3                     _Flash_Memory_Modify:	
  9810                           
  9811                           ;MCU_B1.c: 970: char i = 0;
  9812                           
  9813                           ;incstack = 0
  9814                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9815  16E3  0020               	movlb	0	; select bank0
  9816  16E4  01A5               	clrf	Flash_Memory_Modify@i
  9817                           
  9818                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
  9819  16E5  01A5               	clrf	Flash_Memory_Modify@i
  9820  16E6  3020               	movlw	32
  9821  16E7  0225               	subwf	Flash_Memory_Modify@i,w
  9822  16E8  1803               	btfsc	3,0
  9823  16E9  2EFF               	goto	l6768
  9824  16EA                     l6762:	
  9825                           
  9826                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
  9827  16EA  0825               	movf	Flash_Memory_Modify@i,w
  9828  16EB  3193  2319  3196   	fcall	_Flash_Memory_Read
  9829  16EE  0020               	movlb	0	; select bank0
  9830  16EF  00A4               	movwf	??_Flash_Memory_Modify
  9831  16F0  0825               	movf	Flash_Memory_Modify@i,w
  9832  16F1  3EA0               	addlw	_Memory& (0+255)
  9833  16F2  0086               	movwf	6
  9834  16F3  3001               	movlw	1	; select bank3/4
  9835  16F4  0087               	movwf	7
  9836  16F5  0824               	movf	??_Flash_Memory_Modify,w
  9837  16F6  0081               	movwf	1
  9838  16F7  3001               	movlw	1
  9839  16F8  00A4               	movwf	??_Flash_Memory_Modify
  9840  16F9  0824               	movf	??_Flash_Memory_Modify,w
  9841  16FA  07A5               	addwf	Flash_Memory_Modify@i,f
  9842  16FB  3020               	movlw	32
  9843  16FC  0225               	subwf	Flash_Memory_Modify@i,w
  9844  16FD  1C03               	skipc
  9845  16FE  2EEA               	goto	l6762
  9846  16FF                     l6768:	
  9847                           
  9848                           ;MCU_B1.c: 973: }
  9849                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
  9850  16FF  086E               	movf	_product,w
  9851  1700  0086               	movwf	6
  9852  1701  3001               	movlw	1	; select bank2/3
  9853  1702  0087               	movwf	7
  9854  1703  3001               	movlw	1	; select bank2/3
  9855  1704  3F4C               	moviw [12]fsr1
  9856  1705  0023               	movlb	3	; select bank3
  9857  1706  00A0               	movwf	_Memory^(0+384)
  9858                           
  9859                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
  9860  1707  0020               	movlb	0	; select bank0
  9861  1708  086E               	movf	_product,w
  9862  1709  0086               	movwf	6
  9863  170A  3001               	movlw	1	; select bank2/3
  9864  170B  0087               	movwf	7
  9865  170C  3001               	movlw	1	; select bank2/3
  9866  170D  3F4D               	moviw [13]fsr1
  9867  170E  0023               	movlb	3	; select bank3
  9868  170F  00A1               	movwf	(_Memory^(0+384)+1)
  9869                           
  9870                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
  9871  1710  0020               	movlb	0	; select bank0
  9872  1711  086E               	movf	_product,w
  9873  1712  0086               	movwf	6
  9874  1713  3001               	movlw	1	; select bank2/3
  9875  1714  0087               	movwf	7
  9876  1715  3001               	movlw	1	; select bank2/3
  9877  1716  3F4E               	moviw [14]fsr1
  9878  1717  0023               	movlb	3	; select bank3
  9879  1718  00A2               	movwf	(_Memory^(0+384)+2)
  9880                           
  9881                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
  9882  1719  1D44               	btfss	(_Memory^(0+384)+36),2
  9883  171A  2F1F               	goto	l1349
  9884                           
  9885                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
  9886  171B  1144               	bcf	(_Memory^(0+384)+36),2
  9887                           
  9888                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
  9889  171C  0021               	movlb	1	; select bank1
  9890  171D  1320               	bcf	_myMain^(0+128),6
  9891                           
  9892                           ;MCU_B1.c: 985: myMain.First = 0;
  9893  171E  1021               	bcf	(_myMain^(0+128)+1),0
  9894  171F                     l1349:	
  9895                           
  9896                           ;MCU_B1.c: 987: }
  9897                           ;MCU_B1.c: 988: GIE = 0;
  9898  171F  138B               	bcf	11,7	;volatile
  9899                           
  9900                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
  9901  1720  3190  208C  3196   	fcall	_Flash_Memory_Erasing
  9902                           
  9903                           ;MCU_B1.c: 990: Flash_Memory_Write();
  9904  1723  3195  2551         	fcall	_Flash_Memory_Write
  9905                           
  9906                           ;MCU_B1.c: 991: GIE = 1;
  9907  1725  178B               	bsf	11,7	;volatile
  9908  1726  0008               	return
  9909  1727                     __end_of_Flash_Memory_Modify:	
  9910                           
  9911                           	psect	text54
  9912  108C                     __ptext54:	
  9913 ;; *************** function _Flash_Memory_Erasing *****************
  9914 ;; Defined at:
  9915 ;;		line 958 in file "../src/MCU_B1.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;		None
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;		None               void
  9922 ;; Registers used:
  9923 ;;		wreg, status,2, status,0, pclath, cstack
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;Total ram usage:        0 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    6
  9936 ;; This function calls:
  9937 ;;		_Flash_Memory_Unlock
  9938 ;; This function is called by:
  9939 ;;		_Flash_Memory_Modify
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           
  9944                           ;psect for function _Flash_Memory_Erasing
  9945  108C                     _Flash_Memory_Erasing:	
  9946                           
  9947                           ;MCU_B1.c: 959: CFGS = 0;
  9948                           
  9949                           ;incstack = 0
  9950                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  9951  108C  0023               	movlb	3	; select bank3
  9952  108D  1315               	bcf	21,6	;volatile
  9953                           
  9954                           ;MCU_B1.c: 960: PMADRH = 0x30;
  9955  108E  3030               	movlw	48
  9956  108F  0092               	movwf	18	;volatile
  9957                           
  9958                           ;MCU_B1.c: 961: PMADRL = 0x00;
  9959  1090  0191               	clrf	17	;volatile
  9960                           
  9961                           ;MCU_B1.c: 962: FREE = 1;
  9962  1091  1615               	bsf	21,4	;volatile
  9963                           
  9964                           ;MCU_B1.c: 963: WREN = 1;
  9965  1092  1515               	bsf	21,2	;volatile
  9966                           
  9967                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
  9968  1093  319F  27D7         	fcall	_Flash_Memory_Unlock
  9969                           
  9970                           ;MCU_B1.c: 965: WREN = 0;
  9971  1095  0023               	movlb	3	; select bank3
  9972  1096  1115               	bcf	21,2	;volatile
  9973  1097  0008               	return
  9974  1098                     __end_of_Flash_Memory_Erasing:	
  9975                           
  9976                           	psect	text55
  9977  04C6                     __ptext55:	
  9978 ;; *************** function _Flash_Memory_Initialization *****************
  9979 ;; Defined at:
  9980 ;;		line 859 in file "../src/MCU_B1.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;		None
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;  i               1   62[BANK0 ] unsigned char 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;		None               void
  9987 ;; Registers used:
  9988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;Total ram usage:        2 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    8
 10001 ;; This function calls:
 10002 ;;		_Flash_Memory_Read
 10003 ;;		_Flash_Memory_Write
 10004 ;;		_setPercentValue
 10005 ;; This function is called by:
 10006 ;;		_main
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           
 10011                           ;psect for function _Flash_Memory_Initialization
 10012  04C6                     _Flash_Memory_Initialization:	
 10013                           
 10014                           ;MCU_B1.c: 860: char i = 0;
 10015                           
 10016                           ;incstack = 0
 10017                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10018  04C6  0020               	movlb	0	; select bank0
 10019  04C7  01DE               	clrf	Flash_Memory_Initialization@i
 10020                           
 10021                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 10022  04C8  301F               	movlw	31
 10023  04C9  3193  2319  3184   	fcall	_Flash_Memory_Read
 10024  04CC  3AAA               	xorlw	170
 10025  04CD  1D03               	skipz
 10026  04CE  2D38               	goto	l7144
 10027                           
 10028                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 10029  04CF  3000               	movlw	0
 10030  04D0  3193  2319  3184   	fcall	_Flash_Memory_Read
 10031  04D3  0020               	movlb	0	; select bank0
 10032  04D4  00DD               	movwf	??_Flash_Memory_Initialization
 10033  04D5  086E               	movf	_product,w
 10034  04D6  3E0C               	addlw	12
 10035  04D7  0086               	movwf	6
 10036  04D8  3001               	movlw	1	; select bank2/3
 10037  04D9  0087               	movwf	7
 10038  04DA  085D               	movf	??_Flash_Memory_Initialization,w
 10039  04DB  0081               	movwf	1
 10040                           
 10041                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 10042  04DC  3001               	movlw	1
 10043  04DD  3193  2319  3184   	fcall	_Flash_Memory_Read
 10044  04E0  0020               	movlb	0	; select bank0
 10045  04E1  00DD               	movwf	??_Flash_Memory_Initialization
 10046  04E2  086E               	movf	_product,w
 10047  04E3  3E0D               	addlw	13
 10048  04E4  0086               	movwf	6
 10049  04E5  3001               	movlw	1	; select bank2/3
 10050  04E6  0087               	movwf	7
 10051  04E7  085D               	movf	??_Flash_Memory_Initialization,w
 10052  04E8  0081               	movwf	1
 10053                           
 10054                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 10055  04E9  3002               	movlw	2
 10056  04EA  3193  2319  3184   	fcall	_Flash_Memory_Read
 10057  04ED  0020               	movlb	0	; select bank0
 10058  04EE  00DD               	movwf	??_Flash_Memory_Initialization
 10059  04EF  086E               	movf	_product,w
 10060  04F0  3E0E               	addlw	14
 10061  04F1  0086               	movwf	6
 10062  04F2  3001               	movlw	1	; select bank2/3
 10063  04F3  0087               	movwf	7
 10064  04F4  085D               	movf	??_Flash_Memory_Initialization,w
 10065  04F5  0081               	movwf	1
 10066                           
 10067                           ;MCU_B1.c: 870: i = setPercentValue(((char)(65*0.8)));
 10068  04F6  3034               	movlw	52
 10069  04F7  3197  2727  3184   	fcall	_setPercentValue
 10070  04FA  0020               	movlb	0	; select bank0
 10071  04FB  00DD               	movwf	??_Flash_Memory_Initialization
 10072  04FC  085D               	movf	??_Flash_Memory_Initialization,w
 10073  04FD  00DE               	movwf	Flash_Memory_Initialization@i
 10074                           
 10075                           ;MCU_B1.c: 871: product->Data[21] = i;
 10076  04FE  085E               	movf	Flash_Memory_Initialization@i,w
 10077  04FF  00DD               	movwf	??_Flash_Memory_Initialization
 10078  0500  086E               	movf	_product,w
 10079  0501  3E15               	addlw	21
 10080  0502  0086               	movwf	6
 10081  0503  3001               	movlw	1	; select bank2/3
 10082  0504  0087               	movwf	7
 10083  0505  085D               	movf	??_Flash_Memory_Initialization,w
 10084  0506  0081               	movwf	1
 10085                           
 10086                           ;MCU_B1.c: 872: product->Data[22] = i;
 10087  0507  085E               	movf	Flash_Memory_Initialization@i,w
 10088  0508  00DD               	movwf	??_Flash_Memory_Initialization
 10089  0509  086E               	movf	_product,w
 10090  050A  3E16               	addlw	22
 10091  050B  0086               	movwf	6
 10092  050C  3001               	movlw	1	; select bank2/3
 10093  050D  0087               	movwf	7
 10094  050E  085D               	movf	??_Flash_Memory_Initialization,w
 10095  050F  0081               	movwf	1
 10096                           
 10097                           ;MCU_B1.c: 873: product->Data[23] = i;
 10098  0510  085E               	movf	Flash_Memory_Initialization@i,w
 10099  0511  00DD               	movwf	??_Flash_Memory_Initialization
 10100  0512  086E               	movf	_product,w
 10101  0513  3E17               	addlw	23
 10102  0514  0086               	movwf	6
 10103  0515  3001               	movlw	1	; select bank2/3
 10104  0516  0087               	movwf	7
 10105  0517  085D               	movf	??_Flash_Memory_Initialization,w
 10106  0518  0081               	movwf	1
 10107                           
 10108                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10109  0519  086E               	movf	_product,w
 10110  051A  3E0C               	addlw	12
 10111  051B  0086               	movwf	6
 10112  051C  3001               	movlw	1	; select bank2/3
 10113  051D  0087               	movwf	7
 10114  051E  0801               	movf	1,w
 10115  051F  3AFF               	xorlw	255
 10116  0520  1D03               	skipz
 10117  0521  0008               	return
 10118  0522  086E               	movf	_product,w
 10119  0523  3E0D               	addlw	13
 10120  0524  0086               	movwf	6
 10121  0525  3001               	movlw	1	; select bank2/3
 10122  0526  0087               	movwf	7
 10123  0527  0801               	movf	1,w
 10124  0528  3AFF               	xorlw	255
 10125  0529  1D03               	skipz
 10126  052A  0008               	return
 10127  052B  086E               	movf	_product,w
 10128  052C  3E0E               	addlw	14
 10129  052D  0086               	movwf	6
 10130  052E  3001               	movlw	1	; select bank2/3
 10131  052F  0087               	movwf	7
 10132  0530  0801               	movf	1,w
 10133  0531  3AFF               	xorlw	255
 10134  0532  1D03               	skipz
 10135  0533  0008               	return
 10136                           
 10137                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 10138  0534  0021               	movlb	1	; select bank1
 10139  0535  1720               	bsf	_myMain^(0+128),6
 10140                           
 10141                           ;MCU_B1.c: 877: myMain.First = 1;
 10142  0536  1421               	bsf	(_myMain^(0+128)+1),0
 10143                           
 10144                           ;MCU_B1.c: 878: }
 10145                           ;MCU_B1.c: 879: } else {
 10146  0537  0008               	return
 10147  0538                     l7144:	
 10148                           
 10149                           ;MCU_B1.c: 880: i = setPercentValue(((char)(65*0.8)));
 10150  0538  3034               	movlw	52
 10151  0539  3197  2727  3184   	fcall	_setPercentValue
 10152  053C  0020               	movlb	0	; select bank0
 10153  053D  00DD               	movwf	??_Flash_Memory_Initialization
 10154  053E  085D               	movf	??_Flash_Memory_Initialization,w
 10155  053F  00DE               	movwf	Flash_Memory_Initialization@i
 10156                           
 10157                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 10158  0540  30FF               	movlw	255
 10159  0541  00DD               	movwf	??_Flash_Memory_Initialization
 10160  0542  085D               	movf	??_Flash_Memory_Initialization,w
 10161  0543  0023               	movlb	3	; select bank3
 10162  0544  00A0               	movwf	_Memory^(0+384)
 10163                           
 10164                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 10165  0545  30FF               	movlw	255
 10166  0546  0020               	movlb	0	; select bank0
 10167  0547  00DD               	movwf	??_Flash_Memory_Initialization
 10168  0548  085D               	movf	??_Flash_Memory_Initialization,w
 10169  0549  0023               	movlb	3	; select bank3
 10170  054A  00A1               	movwf	(_Memory^(0+384)+1)
 10171                           
 10172                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 10173  054B  30FF               	movlw	255
 10174  054C  0020               	movlb	0	; select bank0
 10175  054D  00DD               	movwf	??_Flash_Memory_Initialization
 10176  054E  085D               	movf	??_Flash_Memory_Initialization,w
 10177  054F  0023               	movlb	3	; select bank3
 10178  0550  00A2               	movwf	(_Memory^(0+384)+2)
 10179                           
 10180                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 10181  0551  30FF               	movlw	255
 10182  0552  0020               	movlb	0	; select bank0
 10183  0553  00DD               	movwf	??_Flash_Memory_Initialization
 10184  0554  085D               	movf	??_Flash_Memory_Initialization,w
 10185  0555  0023               	movlb	3	; select bank3
 10186  0556  00A3               	movwf	(_Memory^(0+384)+3)
 10187                           
 10188                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 10189  0557  30FF               	movlw	255
 10190  0558  0020               	movlb	0	; select bank0
 10191  0559  00DD               	movwf	??_Flash_Memory_Initialization
 10192  055A  085D               	movf	??_Flash_Memory_Initialization,w
 10193  055B  0023               	movlb	3	; select bank3
 10194  055C  00A4               	movwf	(_Memory^(0+384)+4)
 10195                           
 10196                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 10197  055D  30FF               	movlw	255
 10198  055E  0020               	movlb	0	; select bank0
 10199  055F  00DD               	movwf	??_Flash_Memory_Initialization
 10200  0560  085D               	movf	??_Flash_Memory_Initialization,w
 10201  0561  0023               	movlb	3	; select bank3
 10202  0562  00A5               	movwf	(_Memory^(0+384)+5)
 10203                           
 10204                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 10205  0563  30AA               	movlw	170
 10206  0564  0020               	movlb	0	; select bank0
 10207  0565  00DD               	movwf	??_Flash_Memory_Initialization
 10208  0566  085D               	movf	??_Flash_Memory_Initialization,w
 10209  0567  0023               	movlb	3	; select bank3
 10210  0568  00BF               	movwf	(_Memory^(0+384)+31)
 10211                           
 10212                           ;MCU_B1.c: 888: product->Data[21] = i;
 10213  0569  0020               	movlb	0	; select bank0
 10214  056A  085E               	movf	Flash_Memory_Initialization@i,w
 10215  056B  00DD               	movwf	??_Flash_Memory_Initialization
 10216  056C  086E               	movf	_product,w
 10217  056D  3E15               	addlw	21
 10218  056E  0086               	movwf	6
 10219  056F  3001               	movlw	1	; select bank2/3
 10220  0570  0087               	movwf	7
 10221  0571  085D               	movf	??_Flash_Memory_Initialization,w
 10222  0572  0081               	movwf	1
 10223                           
 10224                           ;MCU_B1.c: 889: product->Data[22] = i;
 10225  0573  085E               	movf	Flash_Memory_Initialization@i,w
 10226  0574  00DD               	movwf	??_Flash_Memory_Initialization
 10227  0575  086E               	movf	_product,w
 10228  0576  3E16               	addlw	22
 10229  0577  0086               	movwf	6
 10230  0578  3001               	movlw	1	; select bank2/3
 10231  0579  0087               	movwf	7
 10232  057A  085D               	movf	??_Flash_Memory_Initialization,w
 10233  057B  0081               	movwf	1
 10234                           
 10235                           ;MCU_B1.c: 890: product->Data[23] = i;
 10236  057C  085E               	movf	Flash_Memory_Initialization@i,w
 10237  057D  00DD               	movwf	??_Flash_Memory_Initialization
 10238  057E  086E               	movf	_product,w
 10239  057F  3E17               	addlw	23
 10240  0580  0086               	movwf	6
 10241  0581  3001               	movlw	1	; select bank2/3
 10242  0582  0087               	movwf	7
 10243  0583  085D               	movf	??_Flash_Memory_Initialization,w
 10244  0584  0081               	movwf	1
 10245                           
 10246                           ;MCU_B1.c: 891: GIE = 0;
 10247  0585  138B               	bcf	11,7	;volatile
 10248                           
 10249                           ;MCU_B1.c: 892: Flash_Memory_Write();
 10250  0586  3195  2551         	fcall	_Flash_Memory_Write
 10251                           
 10252                           ;MCU_B1.c: 893: GIE = 1;
 10253  0588  178B               	bsf	11,7	;volatile
 10254                           
 10255                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 10256  0589  0021               	movlb	1	; select bank1
 10257  058A  1720               	bsf	_myMain^(0+128),6
 10258                           
 10259                           ;MCU_B1.c: 895: myMain.First = 1;
 10260  058B  1421               	bsf	(_myMain^(0+128)+1),0
 10261  058C  0008               	return
 10262  058D                     __end_of_Flash_Memory_Initialization:	
 10263                           
 10264                           	psect	text56
 10265  1551                     __ptext56:	
 10266 ;; *************** function _Flash_Memory_Write *****************
 10267 ;; Defined at:
 10268 ;;		line 939 in file "../src/MCU_B1.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;		None
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;  i               1    1[BANK0 ] unsigned char 
 10273 ;; Return value:  Size  Location     Type
 10274 ;;		None               void
 10275 ;; Registers used:
 10276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;Total ram usage:        2 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    6
 10289 ;; This function calls:
 10290 ;;		_Flash_Memory_Unlock
 10291 ;; This function is called by:
 10292 ;;		_Flash_Memory_Initialization
 10293 ;;		_Flash_Memory_Modify
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _Flash_Memory_Write
 10299  1551                     _Flash_Memory_Write:	
 10300                           
 10301                           ;MCU_B1.c: 940: char i = 0;
 10302                           
 10303                           ;incstack = 0
 10304                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10305  1551  0020               	movlb	0	; select bank0
 10306  1552  01A1               	clrf	Flash_Memory_Write@i
 10307                           
 10308                           ;MCU_B1.c: 941: CFGS = 0;
 10309  1553  0023               	movlb	3	; select bank3
 10310  1554  1315               	bcf	21,6	;volatile
 10311                           
 10312                           ;MCU_B1.c: 942: PMADRH = 0x30;
 10313  1555  3030               	movlw	48
 10314  1556  0092               	movwf	18	;volatile
 10315                           
 10316                           ;MCU_B1.c: 943: PMDATH = 0;
 10317  1557  0194               	clrf	20	;volatile
 10318                           
 10319                           ;MCU_B1.c: 944: FREE = 0;
 10320  1558  1215               	bcf	21,4	;volatile
 10321                           
 10322                           ;MCU_B1.c: 945: LWLO = 1;
 10323  1559  1695               	bsf	21,5	;volatile
 10324                           
 10325                           ;MCU_B1.c: 946: WREN = 1;
 10326  155A  1515               	bsf	21,2	;volatile
 10327                           
 10328                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 10329  155B  0020               	movlb	0	; select bank0
 10330  155C  01A1               	clrf	Flash_Memory_Write@i
 10331  155D  3020               	movlw	32
 10332  155E  0221               	subwf	Flash_Memory_Write@i,w
 10333  155F  1803               	btfsc	3,0
 10334  1560  2D79               	goto	l1340
 10335  1561                     l6272:	
 10336                           
 10337                           ;MCU_B1.c: 948: PMADRL = i;
 10338  1561  0821               	movf	Flash_Memory_Write@i,w
 10339  1562  0023               	movlb	3	; select bank3
 10340  1563  0091               	movwf	17	;volatile
 10341                           
 10342                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 10343  1564  0020               	movlb	0	; select bank0
 10344  1565  0821               	movf	Flash_Memory_Write@i,w
 10345  1566  3EA0               	addlw	_Memory& (0+255)
 10346  1567  0086               	movwf	6
 10347  1568  3001               	movlw	1	; select bank3/4
 10348  1569  0087               	movwf	7
 10349  156A  0801               	movf	1,w
 10350  156B  0023               	movlb	3	; select bank3
 10351  156C  0093               	movwf	19	;volatile
 10352                           
 10353                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 10354  156D  319F  27D7  3195   	fcall	_Flash_Memory_Unlock
 10355  1570  3001               	movlw	1
 10356  1571  0020               	movlb	0	; select bank0
 10357  1572  00A0               	movwf	??_Flash_Memory_Write
 10358  1573  0820               	movf	??_Flash_Memory_Write,w
 10359  1574  07A1               	addwf	Flash_Memory_Write@i,f
 10360  1575  3020               	movlw	32
 10361  1576  0221               	subwf	Flash_Memory_Write@i,w
 10362  1577  1C03               	skipc
 10363  1578  2D61               	goto	l6272
 10364  1579                     l1340:	
 10365                           
 10366                           ;MCU_B1.c: 951: }
 10367                           ;MCU_B1.c: 952: LWLO = 0;
 10368  1579  0023               	movlb	3	; select bank3
 10369  157A  1295               	bcf	21,5	;volatile
 10370                           
 10371                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 10372  157B  319F  27D7         	fcall	_Flash_Memory_Unlock
 10373                           
 10374                           ;MCU_B1.c: 954: WREN = 0;
 10375  157D  0023               	movlb	3	; select bank3
 10376  157E  1115               	bcf	21,2	;volatile
 10377  157F  0008               	return
 10378  1580                     __end_of_Flash_Memory_Write:	
 10379                           
 10380                           	psect	text57
 10381  1FD7                     __ptext57:	
 10382 ;; *************** function _Flash_Memory_Unlock *****************
 10383 ;; Defined at:
 10384 ;;		line 918 in file "../src/MCU_B1.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;		None               void
 10391 ;; Registers used:
 10392 ;;		wreg
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;Total ram usage:        0 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    5
 10405 ;; This function calls:
 10406 ;;		Nothing
 10407 ;; This function is called by:
 10408 ;;		_Flash_Memory_Write
 10409 ;;		_Flash_Memory_Erasing
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           
 10414                           ;psect for function _Flash_Memory_Unlock
 10415  1FD7                     _Flash_Memory_Unlock:	
 10416                           
 10417                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 10418                           
 10419                           ;incstack = 0
 10420                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10421  1FD7  3055               	movlw	85
 10422  1FD8  0023               	movlb	3	; select bank3
 10423  1FD9  0096               	movwf	22	;volatile
 10424                           
 10425                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 10426  1FDA  30AA               	movlw	170
 10427  1FDB  0096               	movwf	22	;volatile
 10428                           
 10429                           ;MCU_B1.c: 921: WR = 1;
 10430  1FDC  1495               	bsf	21,1	;volatile
 10431                           
 10432                           ;MCU_B1.c: 922: __nop();
 10433  1FDD  0000               	nop
 10434                           
 10435                           ;MCU_B1.c: 923: __nop();
 10436  1FDE  0000               	nop
 10437  1FDF  0008               	return
 10438  1FE0                     __end_of_Flash_Memory_Unlock:	
 10439                           
 10440                           	psect	text58
 10441  1319                     __ptext58:	
 10442 ;; *************** function _Flash_Memory_Read *****************
 10443 ;; Defined at:
 10444 ;;		line 927 in file "../src/MCU_B1.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;  address         1    wreg     unsigned char 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  address         1    2[BANK0 ] unsigned char 
 10449 ;;  ret             1    3[BANK0 ] unsigned char 
 10450 ;;  i               1    1[BANK0 ] unsigned char 
 10451 ;; Return value:  Size  Location     Type
 10452 ;;                  1    wreg      unsigned char 
 10453 ;; Registers used:
 10454 ;;		wreg, status,2
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;Total ram usage:        4 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    5
 10467 ;; This function calls:
 10468 ;;		Nothing
 10469 ;; This function is called by:
 10470 ;;		_Flash_Memory_Initialization
 10471 ;;		_Flash_Memory_Modify
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           
 10476                           ;psect for function _Flash_Memory_Read
 10477  1319                     _Flash_Memory_Read:	
 10478                           
 10479                           ;incstack = 0
 10480                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10481                           ;Flash_Memory_Read@address stored from wreg
 10482  1319  0020               	movlb	0	; select bank0
 10483  131A  00A2               	movwf	Flash_Memory_Read@address
 10484                           
 10485                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 10486  131B  01A1               	clrf	Flash_Memory_Read@i
 10487  131C  01A3               	clrf	Flash_Memory_Read@ret
 10488                           
 10489                           ;MCU_B1.c: 929: PMADRH = 0x30;
 10490  131D  3030               	movlw	48
 10491  131E  0023               	movlb	3	; select bank3
 10492  131F  0092               	movwf	18	;volatile
 10493                           
 10494                           ;MCU_B1.c: 930: PMADRL = address;
 10495  1320  0020               	movlb	0	; select bank0
 10496  1321  0822               	movf	Flash_Memory_Read@address,w
 10497  1322  0023               	movlb	3	; select bank3
 10498  1323  0091               	movwf	17	;volatile
 10499                           
 10500                           ;MCU_B1.c: 931: CFGS = 0;
 10501  1324  1315               	bcf	21,6	;volatile
 10502                           
 10503                           ;MCU_B1.c: 932: RD = 1;
 10504  1325  1415               	bsf	21,0	;volatile
 10505                           
 10506                           ;MCU_B1.c: 933: i = PMDATH;
 10507  1326  0814               	movf	20,w	;volatile
 10508  1327  0020               	movlb	0	; select bank0
 10509  1328  00A0               	movwf	??_Flash_Memory_Read
 10510  1329  0820               	movf	??_Flash_Memory_Read,w
 10511  132A  00A1               	movwf	Flash_Memory_Read@i
 10512                           
 10513                           ;MCU_B1.c: 934: ret = PMDATL;
 10514  132B  0023               	movlb	3	; select bank3
 10515  132C  0813               	movf	19,w	;volatile
 10516  132D  0020               	movlb	0	; select bank0
 10517  132E  00A0               	movwf	??_Flash_Memory_Read
 10518  132F  0820               	movf	??_Flash_Memory_Read,w
 10519  1330  00A3               	movwf	Flash_Memory_Read@ret
 10520                           
 10521                           ;MCU_B1.c: 935: return ret;
 10522  1331  0823               	movf	Flash_Memory_Read@ret,w
 10523  1332  0008               	return
 10524  1333                     __end_of_Flash_Memory_Read:	
 10525                           
 10526                           	psect	text59
 10527  1FF5                     __ptext59:	
 10528 ;; *************** function _DimmerLights_Main *****************
 10529 ;; Defined at:
 10530 ;;		line 416 in file "../src/Dimmer_B1.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;		None               void
 10537 ;; Registers used:
 10538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;Total ram usage:        0 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:   11
 10551 ;; This function calls:
 10552 ;;		_DimmerLights_Close
 10553 ;;		_setDimmerLights_Main
 10554 ;; This function is called by:
 10555 ;;		_main
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           
 10560                           ;psect for function _DimmerLights_Main
 10561  1FF5                     _DimmerLights_Main:	
 10562                           
 10563                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 10564                           
 10565                           ;incstack = 0
 10566                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10567  1FF5  3001               	movlw	1
 10568  1FF6  318C  2485  319F   	fcall	_setDimmerLights_Main
 10569                           
 10570                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 10571  1FF9  3002               	movlw	2
 10572  1FFA  318C  2485  319F   	fcall	_setDimmerLights_Main
 10573                           
 10574                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 10575  1FFD  3192  223A         	fcall	_DimmerLights_Close
 10576  1FFF  0008               	return
 10577  2000                     __end_of_DimmerLights_Main:	
 10578                           
 10579                           	psect	text60
 10580  0C85                     __ptext60:	
 10581 ;; *************** function _setDimmerLights_Main *****************
 10582 ;; Defined at:
 10583 ;;		line 434 in file "../src/Dimmer_B1.c"
 10584 ;; Parameters:    Size  Location     Type
 10585 ;;  lights          1    wreg     unsigned char 
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;  lights          1   70[BANK0 ] unsigned char 
 10588 ;;  clear           1   69[BANK0 ] unsigned char 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;		None               void
 10591 ;; Registers used:
 10592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;Total ram usage:        2 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:   10
 10605 ;; This function calls:
 10606 ;;		_DimmerLightsPointSelect
 10607 ;;		_setBuz
 10608 ;;		_setDimmerLights
 10609 ;;		_setDimmerLights_Adj
 10610 ;; This function is called by:
 10611 ;;		_DimmerLights_Main
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           
 10616                           ;psect for function _setDimmerLights_Main
 10617  0C85                     _setDimmerLights_Main:	
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10621                           ;setDimmerLights_Main@lights stored from wreg
 10622  0C85  0020               	movlb	0	; select bank0
 10623  0C86  00E6               	movwf	setDimmerLights_Main@lights
 10624                           
 10625                           ;Dimmer_B1.c: 435: char clear = 1;
 10626  0C87  01E5               	clrf	setDimmerLights_Main@clear
 10627  0C88  0AE5               	incf	setDimmerLights_Main@clear,f
 10628                           
 10629                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 10630  0C89  0866               	movf	setDimmerLights_Main@lights,w
 10631  0C8A  3191  21D7  318C   	fcall	_DimmerLightsPointSelect
 10632                           
 10633                           ;Dimmer_B1.c: 449: if (lights == 1) {
 10634  0C8D  0020               	movlb	0	; select bank0
 10635  0C8E  0866               	movf	setDimmerLights_Main@lights,w
 10636  0C8F  3A01               	xorlw	1
 10637  0C90  1D03               	skipz
 10638  0C91  2C99               	goto	l7608
 10639                           
 10640                           ;Dimmer_B1.c: 450: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 10641  0C92  3000               	movlw	0
 10642  0C93  0022               	movlb	2	; select bank2
 10643  0C94  194D               	btfsc	(_DimmerLights2^(0+256)+9),2
 10644  0C95  3001               	movlw	1
 10645  0C96  0020               	movlb	0	; select bank0
 10646  0C97  00E5               	movwf	setDimmerLights_Main@clear
 10647                           
 10648                           ;Dimmer_B1.c: 451: } else if (lights == 2) {
 10649  0C98  2CA3               	goto	l7612
 10650  0C99                     l7608:	
 10651  0C99  0866               	movf	setDimmerLights_Main@lights,w
 10652  0C9A  3A02               	xorlw	2
 10653  0C9B  1D03               	skipz
 10654  0C9C  2CA3               	goto	l7612
 10655                           
 10656                           ;Dimmer_B1.c: 452: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 10657  0C9D  3000               	movlw	0
 10658  0C9E  0022               	movlb	2	; select bank2
 10659  0C9F  193E               	btfsc	(_DimmerLights1^(0+256)+9),2
 10660  0CA0  3001               	movlw	1
 10661  0CA1  0020               	movlb	0	; select bank0
 10662  0CA2  00E5               	movwf	setDimmerLights_Main@clear
 10663  0CA3                     l7612:	
 10664                           
 10665                           ;Dimmer_B1.c: 453: }
 10666                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 10667  0CA3  0879               	movf	_DimmerLights,w
 10668  0CA4  3E08               	addlw	8
 10669  0CA5  0086               	movwf	6
 10670  0CA6  3001               	movlw	1	; select bank2/3
 10671  0CA7  0087               	movwf	7
 10672  0CA8  1D01               	btfss	1,2
 10673  0CA9  2CC7               	goto	l7622
 10674                           
 10675                           ;Dimmer_B1.c: 457: if (clear == 1) {
 10676  0CAA  0865               	movf	setDimmerLights_Main@clear,w
 10677  0CAB  3A01               	xorlw	1
 10678  0CAC  1D03               	skipz
 10679  0CAD  0008               	return
 10680                           
 10681                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 10682  0CAE  0879               	movf	_DimmerLights,w
 10683  0CAF  3E08               	addlw	8
 10684  0CB0  0086               	movwf	6
 10685  0CB1  3001               	movlw	1	; select bank2/3
 10686  0CB2  0087               	movwf	7
 10687  0CB3  1101               	bcf	1,2
 10688                           
 10689                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 10690  0CB4  0879               	movf	_DimmerLights,w
 10691  0CB5  3E08               	addlw	8
 10692  0CB6  0086               	movwf	6
 10693  0CB7  3001               	movlw	1	; select bank2/3
 10694  0CB8  0087               	movwf	7
 10695  0CB9  1C81               	btfss	1,1
 10696  0CBA  2CC1               	goto	l7620
 10697                           
 10698                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 10699  0CBB  01A3               	clrf	setDimmerLights@status
 10700  0CBC  0AA3               	incf	setDimmerLights@status,f
 10701  0CBD  0866               	movf	setDimmerLights_Main@lights,w
 10702  0CBE  318D  25D8         	fcall	_setDimmerLights
 10703                           
 10704                           ;Dimmer_B1.c: 461: } else {
 10705  0CC0  0008               	return
 10706  0CC1                     l7620:	
 10707                           
 10708                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 10709  0CC1  0020               	movlb	0	; select bank0
 10710  0CC2  01A3               	clrf	setDimmerLights@status
 10711  0CC3  0866               	movf	setDimmerLights_Main@lights,w
 10712  0CC4  318D  25D8         	fcall	_setDimmerLights
 10713                           
 10714                           ;Dimmer_B1.c: 463: }
 10715                           ;Dimmer_B1.c: 467: }
 10716                           ;Dimmer_B1.c: 468: } else {
 10717  0CC6  0008               	return
 10718  0CC7                     l7622:	
 10719                           
 10720                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 10721  0CC7  0879               	movf	_DimmerLights,w
 10722  0CC8  3E08               	addlw	8
 10723  0CC9  0086               	movwf	6
 10724  0CCA  3001               	movlw	1	; select bank2/3
 10725  0CCB  0087               	movwf	7
 10726  0CCC  1E01               	btfss	1,4
 10727  0CCD  0008               	return
 10728                           
 10729                           ;Dimmer_B1.c: 470: if (clear == 1) {
 10730  0CCE  0020               	movlb	0	; select bank0
 10731  0CCF  0865               	movf	setDimmerLights_Main@clear,w
 10732  0CD0  3A01               	xorlw	1
 10733  0CD1  1D03               	skipz
 10734  0CD2  0008               	return
 10735                           
 10736                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 10737  0CD3  0879               	movf	_DimmerLights,w
 10738  0CD4  3E08               	addlw	8
 10739  0CD5  0086               	movwf	6
 10740  0CD6  3001               	movlw	1	; select bank2/3
 10741  0CD7  0087               	movwf	7
 10742  0CD8  1201               	bcf	1,4
 10743                           
 10744                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 10745  0CD9  0879               	movf	_DimmerLights,w
 10746  0CDA  3E08               	addlw	8
 10747  0CDB  0086               	movwf	6
 10748  0CDC  3001               	movlw	1	; select bank2/3
 10749  0CDD  0087               	movwf	7
 10750  0CDE  1D81               	btfss	1,3
 10751  0CDF  2CEF               	goto	l7632
 10752                           
 10753                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 10754  0CE0  01E2               	clrf	setDimmerLights_Adj@status
 10755  0CE1  0AE2               	incf	setDimmerLights_Adj@status,f
 10756  0CE2  0866               	movf	setDimmerLights_Main@lights,w
 10757  0CE3  3196  2622  318C   	fcall	_setDimmerLights_Adj
 10758                           
 10759                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 10760  0CE6  3064               	movlw	100
 10761  0CE7  0020               	movlb	0	; select bank0
 10762  0CE8  00A9               	movwf	setBuz@time
 10763  0CE9  3000               	movlw	0
 10764  0CEA  00AA               	movwf	setBuz@time+1
 10765  0CEB  3001               	movlw	1
 10766  0CEC  3187  27A7         	fcall	_setBuz
 10767                           
 10768                           ;Dimmer_B1.c: 475: } else {
 10769  0CEE  0008               	return
 10770  0CEF                     l7632:	
 10771                           
 10772                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 10773  0CEF  0020               	movlb	0	; select bank0
 10774  0CF0  01E2               	clrf	setDimmerLights_Adj@status
 10775  0CF1  0866               	movf	setDimmerLights_Main@lights,w
 10776  0CF2  3196  2622         	fcall	_setDimmerLights_Adj
 10777  0CF4  0008               	return
 10778  0CF5                     __end_of_setDimmerLights_Main:	
 10779                           
 10780                           	psect	text61
 10781  1622                     __ptext61:	
 10782 ;; *************** function _setDimmerLights_Adj *****************
 10783 ;; Defined at:
 10784 ;;		line 655 in file "../src/Dimmer_B1.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  lights          1    wreg     unsigned char 
 10787 ;;  status          1   66[BANK0 ] unsigned char 
 10788 ;; Auto vars:     Size  Location     Type
 10789 ;;  lights          1   68[BANK0 ] unsigned char 
 10790 ;; Return value:  Size  Location     Type
 10791 ;;		None               void
 10792 ;; Registers used:
 10793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10794 ;; Tracked objects:
 10795 ;;		On entry : 0/0
 10796 ;;		On exit  : 0/0
 10797 ;;		Unchanged: 0/0
 10798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10799 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;Total ram usage:        3 bytes
 10804 ;; Hardware stack levels used:    1
 10805 ;; Hardware stack levels required when called:    9
 10806 ;; This function calls:
 10807 ;;		_DimmerLightsPointSelect
 10808 ;;		_setRF_DimmerLights
 10809 ;;		_setTxData
 10810 ;; This function is called by:
 10811 ;;		_setDimmerLights_Main
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           
 10816                           ;psect for function _setDimmerLights_Adj
 10817  1622                     _setDimmerLights_Adj:	
 10818                           
 10819                           ;incstack = 0
 10820                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10821                           ;setDimmerLights_Adj@lights stored from wreg
 10822  1622  0020               	movlb	0	; select bank0
 10823  1623  00E4               	movwf	setDimmerLights_Adj@lights
 10824                           
 10825                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 10826  1624  0864               	movf	setDimmerLights_Adj@lights,w
 10827  1625  3191  21D7  3196   	fcall	_DimmerLightsPointSelect
 10828                           
 10829                           ;Dimmer_B1.c: 657: if (status == 1) {
 10830  1628  0020               	movlb	0	; select bank0
 10831  1629  0862               	movf	setDimmerLights_Adj@status,w
 10832  162A  3A01               	xorlw	1
 10833  162B  1D03               	skipz
 10834  162C  2E38               	goto	l6226
 10835                           
 10836                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 10837  162D  0879               	movf	_DimmerLights,w
 10838  162E  0086               	movwf	6
 10839  162F  3001               	movlw	1	; select bank2/3
 10840  1630  0087               	movwf	7
 10841  1631  1581               	bsf	1,3
 10842                           
 10843                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 10844  1632  0879               	movf	_DimmerLights,w
 10845  1633  0086               	movwf	6
 10846  1634  3001               	movlw	1	; select bank2/3
 10847  1635  0087               	movwf	7
 10848  1636  1481               	bsf	1,1
 10849                           
 10850                           ;Dimmer_B1.c: 660: } else {
 10851  1637  0008               	return
 10852  1638                     l6226:	
 10853                           
 10854                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 10855  1638  0879               	movf	_DimmerLights,w
 10856  1639  0086               	movwf	6
 10857  163A  3001               	movlw	1	; select bank2/3
 10858  163B  0087               	movwf	7
 10859  163C  1D81               	btfss	1,3
 10860  163D  0008               	return
 10861                           
 10862                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 10863  163E  0879               	movf	_DimmerLights,w
 10864  163F  0086               	movwf	6
 10865  1640  3001               	movlw	1	; select bank2/3
 10866  1641  0087               	movwf	7
 10867  1642  1081               	bcf	1,1
 10868                           
 10869                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 10870  1643  0879               	movf	_DimmerLights,w
 10871  1644  0086               	movwf	6
 10872  1645  3001               	movlw	1	; select bank2/3
 10873  1646  0087               	movwf	7
 10874  1647  1181               	bcf	1,3
 10875                           
 10876                           ;Dimmer_B1.c: 665: ;;
 10877                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10878  1648  0879               	movf	_DimmerLights,w
 10879  1649  3E04               	addlw	4
 10880  164A  0086               	movwf	6
 10881  164B  3001               	movlw	1	; select bank2/3
 10882  164C  0087               	movwf	7
 10883  164D  0801               	movf	1,w
 10884  164E  00E3               	movwf	??_setDimmerLights_Adj
 10885  164F  0879               	movf	_DimmerLights,w
 10886  1650  3E05               	addlw	5
 10887  1651  0086               	movwf	6
 10888  1652  3001               	movlw	1	; select bank2/3
 10889  1653  0087               	movwf	7
 10890  1654  0863               	movf	??_setDimmerLights_Adj,w
 10891  1655  0081               	movwf	1
 10892                           
 10893                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 10894  1656  01DD               	clrf	setRF_DimmerLights@on
 10895  1657  0ADD               	incf	setRF_DimmerLights@on,f
 10896  1658  0864               	movf	setDimmerLights_Adj@lights,w
 10897  1659  318B  23AA  3196   	fcall	_setRF_DimmerLights
 10898                           
 10899                           ;Dimmer_B1.c: 675: setTxData();
 10900  165C  3185  258D         	fcall	_setTxData
 10901  165E  0008               	return
 10902  165F                     __end_of_setDimmerLights_Adj:	
 10903                           
 10904                           	psect	text62
 10905  0DD8                     __ptext62:	
 10906 ;; *************** function _setDimmerLights *****************
 10907 ;; Defined at:
 10908 ;;		line 602 in file "../src/Dimmer_B1.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;  lights          1    wreg     unsigned char 
 10911 ;;  status          1    3[BANK0 ] unsigned char 
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;  lights          1    5[BANK0 ] unsigned char 
 10914 ;; Return value:  Size  Location     Type
 10915 ;;		None               void
 10916 ;; Registers used:
 10917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;Total ram usage:        3 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    7
 10930 ;; This function calls:
 10931 ;;		_DimmerLightsPointSelect
 10932 ;;		_setLED
 10933 ;;		_setMemory_GO
 10934 ;; This function is called by:
 10935 ;;		_setDimmerLights_Main
 10936 ;;		_setControl_Lights_Table
 10937 ;; This function uses a non-reentrant model
 10938 ;;
 10939                           
 10940                           
 10941                           ;psect for function _setDimmerLights
 10942  0DD8                     _setDimmerLights:	
 10943                           
 10944                           ;incstack = 0
 10945                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10946                           ;setDimmerLights@lights stored from wreg
 10947  0DD8  0020               	movlb	0	; select bank0
 10948  0DD9  00A5               	movwf	setDimmerLights@lights
 10949                           
 10950                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 10951  0DDA  0825               	movf	setDimmerLights@lights,w
 10952  0DDB  3191  21D7  318D   	fcall	_DimmerLightsPointSelect
 10953                           
 10954                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 10955  0DDE  0020               	movlb	0	; select bank0
 10956  0DDF  0825               	movf	setDimmerLights@lights,w
 10957  0DE0  00A4               	movwf	??_setDimmerLights
 10958  0DE1  0021               	movlb	1	; select bank1
 10959  0DE2  0A55               	incf	_Dimmer^(0+128),w
 10960  0DE3  0086               	movwf	6
 10961  0DE4  0187               	clrf	7
 10962  0DE5  0020               	movlb	0	; select bank0
 10963  0DE6  0824               	movf	??_setDimmerLights,w
 10964  0DE7  0081               	movwf	1
 10965                           
 10966                           ;Dimmer_B1.c: 605: if (status == 1) {
 10967  0DE8  0823               	movf	setDimmerLights@status,w
 10968  0DE9  3A01               	xorlw	1
 10969  0DEA  1D03               	skipz
 10970  0DEB  2E2C               	goto	l7516
 10971                           
 10972                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 10973  0DEC  0879               	movf	_DimmerLights,w
 10974  0DED  0086               	movwf	6
 10975  0DEE  3001               	movlw	1	; select bank2/3
 10976  0DEF  0087               	movwf	7
 10977  0DF0  1681               	bsf	1,5
 10978                           
 10979                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 10980  0DF1  01A1               	clrf	setLED@command
 10981  0DF2  0825               	movf	setDimmerLights@lights,w
 10982  0DF3  318A  220F  318D   	fcall	_setLED
 10983                           
 10984                           ;Dimmer_B1.c: 609: ;;
 10985                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 10986  0DF6  0879               	movf	_DimmerLights,w
 10987  0DF7  0086               	movwf	6
 10988  0DF8  3001               	movlw	1	; select bank2/3
 10989  0DF9  0087               	movwf	7
 10990  0DFA  1481               	bsf	1,1
 10991                           
 10992                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 10993  0DFB  3007               	movlw	7
 10994  0DFC  0020               	movlb	0	; select bank0
 10995  0DFD  00A4               	movwf	??_setDimmerLights
 10996  0DFE  0879               	movf	_DimmerLights,w
 10997  0DFF  3E02               	addlw	2
 10998  0E00  0086               	movwf	6
 10999  0E01  3001               	movlw	1	; select bank2/3
 11000  0E02  0087               	movwf	7
 11001  0E03  0824               	movf	??_setDimmerLights,w
 11002  0E04  0081               	movwf	1
 11003                           
 11004                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 11005  0E05  0879               	movf	_DimmerLights,w
 11006  0E06  0086               	movwf	6
 11007  0E07  3001               	movlw	1	; select bank2/3
 11008  0E08  0087               	movwf	7
 11009  0E09  1B01               	btfsc	1,6
 11010  0E0A  0008               	return
 11011                           
 11012                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 11013  0E0B  0879               	movf	_DimmerLights,w
 11014  0E0C  0086               	movwf	6
 11015  0E0D  3001               	movlw	1	; select bank2/3
 11016  0E0E  0087               	movwf	7
 11017  0E0F  1701               	bsf	1,6
 11018                           
 11019                           ;Dimmer_B1.c: 616: ;;
 11020                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 11021  0E10  3000               	movlw	0
 11022  0E11  3192  22A3         	fcall	_setMemory_GO
 11023                           
 11024                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11025  0E13  0879               	movf	_DimmerLights,w
 11026  0E14  3E05               	addlw	5
 11027  0E15  0086               	movwf	6
 11028  0E16  3001               	movlw	1	; select bank2/3
 11029  0E17  0087               	movwf	7
 11030  0E18  0801               	movf	1,w
 11031  0E19  0020               	movlb	0	; select bank0
 11032  0E1A  00A4               	movwf	??_setDimmerLights
 11033  0E1B  0879               	movf	_DimmerLights,w
 11034  0E1C  3E04               	addlw	4
 11035  0E1D  0086               	movwf	6
 11036  0E1E  3001               	movlw	1	; select bank2/3
 11037  0E1F  0087               	movwf	7
 11038  0E20  0824               	movf	??_setDimmerLights,w
 11039  0E21  0081               	movwf	1
 11040                           
 11041                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)(65*0.8));
 11042  0E22  3034               	movlw	52
 11043  0E23  00A4               	movwf	??_setDimmerLights
 11044  0E24  0879               	movf	_DimmerLights,w
 11045  0E25  3E04               	addlw	4
 11046  0E26  0086               	movwf	6
 11047  0E27  3001               	movlw	1	; select bank2/3
 11048  0E28  0087               	movwf	7
 11049  0E29  0824               	movf	??_setDimmerLights,w
 11050  0E2A  0081               	movwf	1
 11051                           
 11052                           ;Dimmer_B1.c: 626: }
 11053                           ;Dimmer_B1.c: 627: } else {
 11054  0E2B  0008               	return
 11055  0E2C                     l7516:	
 11056                           
 11057                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 11058  0E2C  0879               	movf	_DimmerLights,w
 11059  0E2D  0086               	movwf	6
 11060  0E2E  3001               	movlw	1	; select bank2/3
 11061  0E2F  0087               	movwf	7
 11062  0E30  1281               	bcf	1,5
 11063                           
 11064                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11065  0E31  0879               	movf	_DimmerLights,w
 11066  0E32  3E06               	addlw	6
 11067  0E33  0086               	movwf	6
 11068  0E34  3001               	movlw	1	; select bank2/3
 11069  0E35  0087               	movwf	7
 11070  0E36  0801               	movf	1,w
 11071  0E37  00A4               	movwf	??_setDimmerLights
 11072  0E38  0879               	movf	_DimmerLights,w
 11073  0E39  3E04               	addlw	4
 11074  0E3A  0086               	movwf	6
 11075  0E3B  3001               	movlw	1	; select bank2/3
 11076  0E3C  0087               	movwf	7
 11077  0E3D  0824               	movf	??_setDimmerLights,w
 11078  0E3E  0081               	movwf	1
 11079                           
 11080                           ;Dimmer_B1.c: 635: DimmerLights->MosfetClose = 1;
 11081  0E3F  0879               	movf	_DimmerLights,w
 11082  0E40  3E08               	addlw	8
 11083  0E41  0086               	movwf	6
 11084  0E42  3001               	movlw	1	; select bank2/3
 11085  0E43  0087               	movwf	7
 11086  0E44  1781               	bsf	1,7
 11087                           
 11088                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 11089  0E45  0879               	movf	_DimmerLights,w
 11090  0E46  0086               	movwf	6
 11091  0E47  3001               	movlw	1	; select bank2/3
 11092  0E48  0087               	movwf	7
 11093  0E49  1481               	bsf	1,1
 11094                           
 11095                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 11096  0E4A  0879               	movf	_DimmerLights,w
 11097  0E4B  0086               	movwf	6
 11098  0E4C  3001               	movlw	1	; select bank2/3
 11099  0E4D  0087               	movwf	7
 11100  0E4E  1181               	bcf	1,3
 11101                           
 11102                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 11103  0E4F  0879               	movf	_DimmerLights,w
 11104  0E50  0086               	movwf	6
 11105  0E51  3001               	movlw	1	; select bank2/3
 11106  0E52  0087               	movwf	7
 11107  0E53  1201               	bcf	1,4
 11108                           
 11109                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 11110  0E54  3007               	movlw	7
 11111  0E55  00A4               	movwf	??_setDimmerLights
 11112  0E56  0879               	movf	_DimmerLights,w
 11113  0E57  3E02               	addlw	2
 11114  0E58  0086               	movwf	6
 11115  0E59  3001               	movlw	1	; select bank2/3
 11116  0E5A  0087               	movwf	7
 11117  0E5B  0824               	movf	??_setDimmerLights,w
 11118  0E5C  0081               	movwf	1
 11119  0E5D  0008               	return
 11120  0E5E                     __end_of_setDimmerLights:	
 11121                           
 11122                           	psect	text63
 11123  0A0F                     __ptext63:	
 11124 ;; *************** function _setLED *****************
 11125 ;; Defined at:
 11126 ;;		line 70 in file "../src/LED_B1.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  led             1    wreg     unsigned char 
 11129 ;;  command         1    1[BANK0 ] unsigned char 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  led             1    2[BANK0 ] unsigned char 
 11132 ;; Return value:  Size  Location     Type
 11133 ;;		None               void
 11134 ;; Registers used:
 11135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11141 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;Total ram usage:        2 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    6
 11148 ;; This function calls:
 11149 ;;		_LedPointSelect
 11150 ;; This function is called by:
 11151 ;;		_setDimmerLights
 11152 ;;		_setLED_Initialization
 11153 ;;		_setSw_Initialization
 11154 ;;		_setDimmerLights_ERROR
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           
 11159                           ;psect for function _setLED
 11160  0A0F                     _setLED:	
 11161                           
 11162                           ;incstack = 0
 11163                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11164                           ;setLED@led stored from wreg
 11165  0A0F  0020               	movlb	0	; select bank0
 11166  0A10  00A2               	movwf	setLED@led
 11167                           
 11168                           ;LED_B1.c: 71: LedPointSelect(led);
 11169  0A11  0822               	movf	setLED@led,w
 11170  0A12  3193  23F0  318A   	fcall	_LedPointSelect
 11171                           
 11172                           ;LED_B1.c: 72: if (command == 0) {
 11173  0A15  0020               	movlb	0	; select bank0
 11174  0A16  08A1               	movf	setLED@command,f
 11175  0A17  1D03               	skipz
 11176  0A18  2A2B               	goto	l7458
 11177                           
 11178                           ;LED_B1.c: 74: if (led == 1) {
 11179  0A19  0822               	movf	setLED@led,w
 11180  0A1A  3A01               	xorlw	1
 11181  0A1B  1D03               	skipz
 11182  0A1C  2A1F               	goto	l7450
 11183                           
 11184                           ;LED_B1.c: 78: RA3 = 1;
 11185  0A1D  158C               	bsf	12,3	;volatile
 11186                           
 11187                           ;LED_B1.c: 80: }
 11188  0A1E  0008               	return
 11189  0A1F                     l7450:	
 11190                           
 11191                           ;LED_B1.c: 83: else if (led == 2) {
 11192  0A1F  0822               	movf	setLED@led,w
 11193  0A20  3A02               	xorlw	2
 11194  0A21  1D03               	skipz
 11195  0A22  2A25               	goto	l7454
 11196                           
 11197                           ;LED_B1.c: 87: RC7 = 1;
 11198  0A23  178E               	bsf	14,7	;volatile
 11199                           
 11200                           ;LED_B1.c: 89: }
 11201  0A24  0008               	return
 11202  0A25                     l7454:	
 11203                           
 11204                           ;LED_B1.c: 101: else if (led == 99) {
 11205  0A25  0822               	movf	setLED@led,w
 11206  0A26  3A63               	xorlw	99
 11207  0A27  1D03               	skipz
 11208  0A28  0008               	return
 11209                           
 11210                           ;LED_B1.c: 105: RB5 = 1;
 11211  0A29  168D               	bsf	13,5	;volatile
 11212                           
 11213                           ;LED_B1.c: 107: }
 11214                           ;LED_B1.c: 109: } else if (command == 1) {
 11215  0A2A  0008               	return
 11216  0A2B                     l7458:	
 11217  0A2B  0821               	movf	setLED@command,w
 11218  0A2C  3A01               	xorlw	1
 11219  0A2D  1D03               	skipz
 11220  0A2E  2A41               	goto	l7472
 11221                           
 11222                           ;LED_B1.c: 111: if (led == 1) {
 11223  0A2F  0822               	movf	setLED@led,w
 11224  0A30  3A01               	xorlw	1
 11225  0A31  1D03               	skipz
 11226  0A32  2A35               	goto	l7464
 11227                           
 11228                           ;LED_B1.c: 115: RA3 = 0;
 11229  0A33  118C               	bcf	12,3	;volatile
 11230                           
 11231                           ;LED_B1.c: 117: }
 11232  0A34  0008               	return
 11233  0A35                     l7464:	
 11234                           
 11235                           ;LED_B1.c: 120: else if (led == 2) {
 11236  0A35  0822               	movf	setLED@led,w
 11237  0A36  3A02               	xorlw	2
 11238  0A37  1D03               	skipz
 11239  0A38  2A3B               	goto	l7468
 11240                           
 11241                           ;LED_B1.c: 124: RC7 = 0;
 11242  0A39  138E               	bcf	14,7	;volatile
 11243                           
 11244                           ;LED_B1.c: 126: }
 11245  0A3A  0008               	return
 11246  0A3B                     l7468:	
 11247                           
 11248                           ;LED_B1.c: 138: else if (led == 99) {
 11249  0A3B  0822               	movf	setLED@led,w
 11250  0A3C  3A63               	xorlw	99
 11251  0A3D  1D03               	skipz
 11252  0A3E  0008               	return
 11253                           
 11254                           ;LED_B1.c: 142: RB5 = 0;
 11255  0A3F  128D               	bcf	13,5	;volatile
 11256                           
 11257                           ;LED_B1.c: 144: }
 11258                           ;LED_B1.c: 146: } else if (command == 10) {
 11259  0A40  0008               	return
 11260  0A41                     l7472:	
 11261  0A41  0821               	movf	setLED@command,w
 11262  0A42  3A0A               	xorlw	10
 11263  0A43  1D03               	skipz
 11264  0A44  2A66               	goto	l7488
 11265                           
 11266                           ;LED_B1.c: 147: LED->GO = 0;
 11267  0A45  0021               	movlb	1	; select bank1
 11268  0A46  084E               	movf	_LED^(0+128),w
 11269  0A47  0086               	movwf	6
 11270  0A48  084F               	movf	(_LED+1)^(0+128),w
 11271  0A49  0087               	movwf	7
 11272  0A4A  1081               	bcf	1,1
 11273                           
 11274                           ;LED_B1.c: 148: LED->Time = 0;
 11275  0A4B  084E               	movf	_LED^(0+128),w
 11276  0A4C  0086               	movwf	6
 11277  0A4D  084F               	movf	(_LED+1)^(0+128),w
 11278  0A4E  0087               	movwf	7
 11279  0A4F  3141               	addfsr 1,1
 11280  0A50  3000               	movlw	0
 11281  0A51  3FC0               	movwi [0]fsr1
 11282  0A52  3FC1               	movwi [1]fsr1
 11283                           
 11284                           ;LED_B1.c: 150: if (led == 1) {
 11285  0A53  0020               	movlb	0	; select bank0
 11286  0A54  0822               	movf	setLED@led,w
 11287  0A55  3A01               	xorlw	1
 11288  0A56  1D03               	skipz
 11289  0A57  2A5A               	goto	l7480
 11290                           
 11291                           ;LED_B1.c: 154: RA3 = 1;
 11292  0A58  158C               	bsf	12,3	;volatile
 11293                           
 11294                           ;LED_B1.c: 156: }
 11295  0A59  0008               	return
 11296  0A5A                     l7480:	
 11297                           
 11298                           ;LED_B1.c: 159: else if (led == 2) {
 11299  0A5A  0822               	movf	setLED@led,w
 11300  0A5B  3A02               	xorlw	2
 11301  0A5C  1D03               	skipz
 11302  0A5D  2A60               	goto	l7484
 11303                           
 11304                           ;LED_B1.c: 163: RC7 = 1;
 11305  0A5E  178E               	bsf	14,7	;volatile
 11306                           
 11307                           ;LED_B1.c: 165: }
 11308  0A5F  0008               	return
 11309  0A60                     l7484:	
 11310                           
 11311                           ;LED_B1.c: 177: else if (led == 99) {
 11312  0A60  0822               	movf	setLED@led,w
 11313  0A61  3A63               	xorlw	99
 11314  0A62  1D03               	skipz
 11315  0A63  0008               	return
 11316                           
 11317                           ;LED_B1.c: 181: RB5 = 1;
 11318  0A64  168D               	bsf	13,5	;volatile
 11319                           
 11320                           ;LED_B1.c: 183: }
 11321                           ;LED_B1.c: 185: } else if (command == 11) {
 11322  0A65  0008               	return
 11323  0A66                     l7488:	
 11324  0A66  0821               	movf	setLED@command,w
 11325  0A67  3A0B               	xorlw	11
 11326  0A68  1D03               	skipz
 11327  0A69  0008               	return
 11328                           
 11329                           ;LED_B1.c: 186: LED->GO = 1;
 11330  0A6A  0021               	movlb	1	; select bank1
 11331  0A6B  084E               	movf	_LED^(0+128),w
 11332  0A6C  0086               	movwf	6
 11333  0A6D  084F               	movf	(_LED+1)^(0+128),w
 11334  0A6E  0087               	movwf	7
 11335  0A6F  1481               	bsf	1,1
 11336  0A70  0008               	return
 11337  0A71                     __end_of_setLED:	
 11338                           
 11339                           	psect	text64
 11340  13F0                     __ptext64:	
 11341 ;; *************** function _LedPointSelect *****************
 11342 ;; Defined at:
 11343 ;;		line 7 in file "../src/LED_B1.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;  led             1    wreg     unsigned char 
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;  led             1    0[BANK0 ] unsigned char 
 11348 ;; Return value:  Size  Location     Type
 11349 ;;		None               void
 11350 ;; Registers used:
 11351 ;;		wreg, status,2, status,0
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;Total ram usage:        1 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:    5
 11364 ;; This function calls:
 11365 ;;		Nothing
 11366 ;; This function is called by:
 11367 ;;		_setLED_Initialization
 11368 ;;		_setLED
 11369 ;;		_setLED_Main
 11370 ;; This function uses a non-reentrant model
 11371 ;;
 11372                           
 11373                           
 11374                           ;psect for function _LedPointSelect
 11375  13F0                     _LedPointSelect:	
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11379                           ;LedPointSelect@led stored from wreg
 11380  13F0  0020               	movlb	0	; select bank0
 11381  13F1  00A0               	movwf	LedPointSelect@led
 11382                           
 11383                           ;LED_B1.c: 9: if (led == 1) {
 11384  13F2  0820               	movf	LedPointSelect@led,w
 11385  13F3  3A01               	xorlw	1
 11386  13F4  1D03               	skipz
 11387  13F5  2BFC               	goto	l7434
 11388                           
 11389                           ;LED_B1.c: 10: LED = &VarLED1;
 11390  13F6  3065               	movlw	low _VarLED1
 11391  13F7  0021               	movlb	1	; select bank1
 11392  13F8  00CE               	movwf	_LED^(0+128)
 11393  13F9  3001               	movlw	high _VarLED1
 11394  13FA  00CF               	movwf	(_LED+1)^(0+128)
 11395                           
 11396                           ;LED_B1.c: 11: }
 11397  13FB  0008               	return
 11398  13FC                     l7434:	
 11399                           
 11400                           ;LED_B1.c: 14: else if (led == 2) {
 11401  13FC  0020               	movlb	0	; select bank0
 11402  13FD  0820               	movf	LedPointSelect@led,w
 11403  13FE  3A02               	xorlw	2
 11404  13FF  1D03               	skipz
 11405  1400  2C07               	goto	l7438
 11406                           
 11407                           ;LED_B1.c: 15: LED = &VarLED2;
 11408  1401  3069               	movlw	low _VarLED2
 11409  1402  0021               	movlb	1	; select bank1
 11410  1403  00CE               	movwf	_LED^(0+128)
 11411  1404  3001               	movlw	high _VarLED2
 11412  1405  00CF               	movwf	(_LED+1)^(0+128)
 11413                           
 11414                           ;LED_B1.c: 16: }
 11415  1406  0008               	return
 11416  1407                     l7438:	
 11417                           
 11418                           ;LED_B1.c: 24: else if (led == 99) {
 11419  1407  0020               	movlb	0	; select bank0
 11420  1408  0820               	movf	LedPointSelect@led,w
 11421  1409  3A63               	xorlw	99
 11422  140A  1D03               	skipz
 11423  140B  0008               	return
 11424                           
 11425                           ;LED_B1.c: 25: LED = &VarErrLED;
 11426  140C  30E0               	movlw	low _VarErrLED
 11427  140D  0021               	movlb	1	; select bank1
 11428  140E  00CE               	movwf	_LED^(0+128)
 11429  140F  3000               	movlw	high _VarErrLED
 11430  1410  00CF               	movwf	(_LED+1)^(0+128)
 11431  1411  0008               	return
 11432  1412                     __end_of_LedPointSelect:	
 11433                           
 11434                           	psect	text65
 11435  123A                     __ptext65:	
 11436 ;; *************** function _DimmerLights_Close *****************
 11437 ;; Defined at:
 11438 ;;		line 405 in file "../src/Dimmer_B1.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;		None
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;		None
 11443 ;; Return value:  Size  Location     Type
 11444 ;;		None               void
 11445 ;; Registers used:
 11446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;Total ram usage:        0 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    6
 11459 ;; This function calls:
 11460 ;;		_getDimmerLights_StatusFlag
 11461 ;;		_setMemory_GO
 11462 ;; This function is called by:
 11463 ;;		_DimmerLights_Main
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           
 11468                           ;psect for function _DimmerLights_Close
 11469  123A                     _DimmerLights_Close:	
 11470                           
 11471                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 11472                           
 11473                           ;incstack = 0
 11474                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11475  123A  0021               	movlb	1	; select bank1
 11476  123B  0855               	movf	_Dimmer^(0+128),w
 11477  123C  0086               	movwf	6
 11478  123D  0187               	clrf	7
 11479  123E  1C01               	btfss	1,0
 11480  123F  0008               	return
 11481                           
 11482                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 11483  1240  0855               	movf	_Dimmer^(0+128),w
 11484  1241  0086               	movwf	6
 11485  1242  0187               	clrf	7
 11486  1243  1001               	bcf	1,0
 11487                           
 11488                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 11489  1244  3191  216D  3192   	fcall	_getDimmerLights_StatusFlag
 11490  1247  3800               	iorlw	0
 11491  1248  1D03               	skipz
 11492  1249  0008               	return
 11493                           
 11494                           ;Dimmer_B1.c: 409: ;;
 11495                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 11496  124A  3001               	movlw	1
 11497  124B  3192  22A3         	fcall	_setMemory_GO
 11498  124D  0008               	return
 11499  124E                     __end_of_DimmerLights_Close:	
 11500                           
 11501                           	psect	text66
 11502  12A3                     __ptext66:	
 11503 ;; *************** function _setMemory_GO *****************
 11504 ;; Defined at:
 11505 ;;		line 995 in file "../src/MCU_B1.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;  command         1    wreg     unsigned char 
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  command         1    2[BANK0 ] unsigned char 
 11510 ;; Return value:  Size  Location     Type
 11511 ;;		None               void
 11512 ;; Registers used:
 11513 ;;		wreg, status,2, status,0
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        3 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    5
 11526 ;; This function calls:
 11527 ;;		Nothing
 11528 ;; This function is called by:
 11529 ;;		_DimmerLights_Close
 11530 ;;		_setDimmerLights
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           
 11535                           ;psect for function _setMemory_GO
 11536  12A3                     _setMemory_GO:	
 11537                           
 11538                           ;incstack = 0
 11539                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11540                           ;setMemory_GO@command stored from wreg
 11541  12A3  0020               	movlb	0	; select bank0
 11542  12A4  00A2               	movwf	setMemory_GO@command
 11543                           
 11544                           ;MCU_B1.c: 996: Memory.GO = command;
 11545  12A5  0822               	movf	setMemory_GO@command,w
 11546  12A6  0023               	movlb	3	; select bank3
 11547  12A7  10C4               	bcf	(_Memory^(0+384)+36),1
 11548  12A8  1D03               	skipz
 11549  12A9  14C4               	bsf	(_Memory^(0+384)+36),1
 11550                           
 11551                           ;MCU_B1.c: 997: if (command == 0) {
 11552  12AA  0020               	movlb	0	; select bank0
 11553  12AB  08A2               	movf	setMemory_GO@command,f
 11554  12AC  1D03               	skipz
 11555  12AD  0008               	return
 11556                           
 11557                           ;MCU_B1.c: 998: Memory.Time = command;
 11558  12AE  0822               	movf	setMemory_GO@command,w
 11559  12AF  00A0               	movwf	??_setMemory_GO
 11560  12B0  01A1               	clrf	??_setMemory_GO+1
 11561  12B1  0820               	movf	??_setMemory_GO,w
 11562  12B2  0023               	movlb	3	; select bank3
 11563  12B3  00C2               	movwf	(_Memory^(0+384)+34)
 11564  12B4  0020               	movlb	0	; select bank0
 11565  12B5  0821               	movf	??_setMemory_GO+1,w
 11566  12B6  0023               	movlb	3	; select bank3
 11567  12B7  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11568  12B8  0008               	return
 11569  12B9                     __end_of_setMemory_GO:	
 11570                           
 11571                           	psect	text67
 11572  116D                     __ptext67:	
 11573 ;; *************** function _getDimmerLights_StatusFlag *****************
 11574 ;; Defined at:
 11575 ;;		line 484 in file "../src/Dimmer_B1.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;		None
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;  Status          1    1[BANK0 ] unsigned char 
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      unsigned char 
 11582 ;; Registers used:
 11583 ;;		wreg, status,2
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;Total ram usage:        3 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    5
 11596 ;; This function calls:
 11597 ;;		Nothing
 11598 ;; This function is called by:
 11599 ;;		_DimmerLights_Close
 11600 ;;		_DimmerLights_Exceptions
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           
 11605                           ;psect for function _getDimmerLights_StatusFlag
 11606  116D                     _getDimmerLights_StatusFlag:	
 11607                           
 11608                           ;Dimmer_B1.c: 485: char Status = 0;
 11609                           
 11610                           ;incstack = 0
 11611                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11612  116D  0020               	movlb	0	; select bank0
 11613  116E  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11614                           
 11615                           ;Dimmer_B1.c: 492: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 11616  116F  01A2               	clrf	_getDimmerLights_StatusFlag$2255
 11617  1170  0AA2               	incf	_getDimmerLights_StatusFlag$2255,f
 11618  1171  0022               	movlb	2	; select bank2
 11619  1172  1F35               	btfss	_DimmerLights1^(0+256),6
 11620  1173  1B44               	btfsc	_DimmerLights2^(0+256),6
 11621  1174  2977               	goto	l6214
 11622  1175  0020               	movlb	0	; select bank0
 11623  1176  01A2               	clrf	_getDimmerLights_StatusFlag$2255
 11624  1177                     l6214:	
 11625  1177  0020               	movlb	0	; select bank0
 11626  1178  0822               	movf	_getDimmerLights_StatusFlag$2255,w
 11627  1179  00A0               	movwf	??_getDimmerLights_StatusFlag
 11628  117A  0820               	movf	??_getDimmerLights_StatusFlag,w
 11629  117B  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11630                           
 11631                           ;Dimmer_B1.c: 499: return Status;
 11632  117C  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11633  117D  0008               	return
 11634  117E                     __end_of_getDimmerLights_StatusFlag:	
 11635                           
 11636                           	psect	text68
 11637  12B9                     __ptext68:	
 11638 ;; *************** function _DimmerLights_Initialization *****************
 11639 ;; Defined at:
 11640 ;;		line 343 in file "../src/Dimmer_B1.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;		None
 11645 ;; Return value:  Size  Location     Type
 11646 ;;		None               void
 11647 ;; Registers used:
 11648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 0/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;Total ram usage:        1 bytes
 11659 ;; Hardware stack levels used:    1
 11660 ;; Hardware stack levels required when called:    7
 11661 ;; This function calls:
 11662 ;;		_Dimmer_Initialization
 11663 ;;		_setDimmerLights_Initialization
 11664 ;; This function is called by:
 11665 ;;		_main
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           
 11670                           ;psect for function _DimmerLights_Initialization
 11671  12B9                     _DimmerLights_Initialization:	
 11672                           
 11673                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 11674                           
 11675                           ;incstack = 0
 11676                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11677  12B9  3035               	movlw	_DimmerLights1& (0+255)
 11678  12BA  0020               	movlb	0	; select bank0
 11679  12BB  00A4               	movwf	??_DimmerLights_Initialization
 11680  12BC  0824               	movf	??_DimmerLights_Initialization,w
 11681  12BD  0021               	movlb	1	; select bank1
 11682  12BE  00D6               	movwf	_DimmerLights11^(0+128)
 11683                           
 11684                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 11685  12BF  3001               	movlw	1
 11686  12C0  3195  2524  3192   	fcall	_setDimmerLights_Initialization
 11687                           
 11688                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 11689  12C3  3044               	movlw	_DimmerLights2& (0+255)
 11690  12C4  0020               	movlb	0	; select bank0
 11691  12C5  00A4               	movwf	??_DimmerLights_Initialization
 11692  12C6  0824               	movf	??_DimmerLights_Initialization,w
 11693  12C7  0021               	movlb	1	; select bank1
 11694  12C8  00D7               	movwf	_DimmerLights22^(0+128)
 11695                           
 11696                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 11697  12C9  3002               	movlw	2
 11698  12CA  3195  2524  3192   	fcall	_setDimmerLights_Initialization
 11699                           
 11700                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 11701  12CD  319F  2790         	fcall	_Dimmer_Initialization
 11702  12CF  0008               	return
 11703  12D0                     __end_of_DimmerLights_Initialization:	
 11704                           
 11705                           	psect	text69
 11706  1524                     __ptext69:	
 11707 ;; *************** function _setDimmerLights_Initialization *****************
 11708 ;; Defined at:
 11709 ;;		line 366 in file "../src/Dimmer_B1.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;  lights          1    wreg     unsigned char 
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;  lights          1    3[BANK0 ] unsigned char 
 11714 ;; Return value:  Size  Location     Type
 11715 ;;		None               void
 11716 ;; Registers used:
 11717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11718 ;; Tracked objects:
 11719 ;;		On entry : 0/0
 11720 ;;		On exit  : 0/0
 11721 ;;		Unchanged: 0/0
 11722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;Total ram usage:        2 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; Hardware stack levels required when called:    6
 11730 ;; This function calls:
 11731 ;;		_DimmerLightsPointSelect
 11732 ;; This function is called by:
 11733 ;;		_DimmerLights_Initialization
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           
 11738                           ;psect for function _setDimmerLights_Initialization
 11739  1524                     _setDimmerLights_Initialization:	
 11740                           
 11741                           ;incstack = 0
 11742                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11743                           ;setDimmerLights_Initialization@lights stored from wreg
 11744  1524  0020               	movlb	0	; select bank0
 11745  1525  00A3               	movwf	setDimmerLights_Initialization@lights
 11746                           
 11747                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 11748  1526  0823               	movf	setDimmerLights_Initialization@lights,w
 11749  1527  3191  21D7         	fcall	_DimmerLightsPointSelect
 11750                           
 11751                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 11752  1529  0879               	movf	_DimmerLights,w
 11753  152A  3E09               	addlw	9
 11754  152B  0086               	movwf	6
 11755  152C  3001               	movlw	1	; select bank2/3
 11756  152D  0087               	movwf	7
 11757  152E  1501               	bsf	1,2
 11758                           
 11759                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)(65*0.8));
 11760  152F  3034               	movlw	52
 11761  1530  0020               	movlb	0	; select bank0
 11762  1531  00A2               	movwf	??_setDimmerLights_Initialization
 11763  1532  0879               	movf	_DimmerLights,w
 11764  1533  3E05               	addlw	5
 11765  1534  0086               	movwf	6
 11766  1535  3001               	movlw	1	; select bank2/3
 11767  1536  0087               	movwf	7
 11768  1537  0822               	movf	??_setDimmerLights_Initialization,w
 11769  1538  0081               	movwf	1
 11770                           
 11771                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)(25*0.8));
 11772  1539  3014               	movlw	20
 11773  153A  00A2               	movwf	??_setDimmerLights_Initialization
 11774  153B  0879               	movf	_DimmerLights,w
 11775  153C  3E06               	addlw	6
 11776  153D  0086               	movwf	6
 11777  153E  3001               	movlw	1	; select bank2/3
 11778  153F  0087               	movwf	7
 11779  1540  0822               	movf	??_setDimmerLights_Initialization,w
 11780  1541  0081               	movwf	1
 11781                           
 11782                           ;Dimmer_B1.c: 390: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11783  1542  0879               	movf	_DimmerLights,w
 11784  1543  3E05               	addlw	5
 11785  1544  0086               	movwf	6
 11786  1545  3001               	movlw	1	; select bank2/3
 11787  1546  0087               	movwf	7
 11788  1547  0801               	movf	1,w
 11789  1548  00A2               	movwf	??_setDimmerLights_Initialization
 11790  1549  0879               	movf	_DimmerLights,w
 11791  154A  3E04               	addlw	4
 11792  154B  0086               	movwf	6
 11793  154C  3001               	movlw	1	; select bank2/3
 11794  154D  0087               	movwf	7
 11795  154E  0822               	movf	??_setDimmerLights_Initialization,w
 11796  154F  0081               	movwf	1
 11797  1550  0008               	return
 11798  1551                     __end_of_setDimmerLights_Initialization:	
 11799                           
 11800                           	psect	text70
 11801  1F90                     __ptext70:	
 11802 ;; *************** function _Dimmer_Initialization *****************
 11803 ;; Defined at:
 11804 ;;		line 795 in file "../src/Dimmer_B1.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;		None               void
 11811 ;; Registers used:
 11812 ;;		wreg
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;Total ram usage:        1 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    5
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_DimmerLights_Initialization
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           
 11833                           ;psect for function _Dimmer_Initialization
 11834  1F90                     _Dimmer_Initialization:	
 11835                           
 11836                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 11837                           
 11838                           ;incstack = 0
 11839                           ; Regs used in _Dimmer_Initialization: [wreg]
 11840  1F90  30E4               	movlw	_Dimmer1& (0+255)
 11841  1F91  0020               	movlb	0	; select bank0
 11842  1F92  00A0               	movwf	??_Dimmer_Initialization
 11843  1F93  0820               	movf	??_Dimmer_Initialization,w
 11844  1F94  0021               	movlb	1	; select bank1
 11845  1F95  00D5               	movwf	_Dimmer^(0+128)
 11846  1F96  0008               	return
 11847  1F97                     __end_of_Dimmer_Initialization:	
 11848                           
 11849                           	psect	text71
 11850  1FAE                     __ptext71:	
 11851 ;; *************** function _DelayOff_Main *****************
 11852 ;; Defined at:
 11853 ;;		line 41 in file "../src/DelayOff_B1.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;		None
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;		None
 11858 ;; Return value:  Size  Location     Type
 11859 ;;		None               void
 11860 ;; Registers used:
 11861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;Total ram usage:        0 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:   10
 11874 ;; This function calls:
 11875 ;;		_DlyOff_Main
 11876 ;; This function is called by:
 11877 ;;		_main
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           
 11882                           ;psect for function _DelayOff_Main
 11883  1FAE                     _DelayOff_Main:	
 11884                           
 11885                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11889  1FAE  3001               	movlw	1
 11890  1FAF  318B  233F  319F   	fcall	_DlyOff_Main
 11891                           
 11892                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 11893  1FB2  3002               	movlw	2
 11894  1FB3  318B  233F         	fcall	_DlyOff_Main
 11895  1FB5  0008               	return
 11896  1FB6                     __end_of_DelayOff_Main:	
 11897                           
 11898                           	psect	text72
 11899  0B3F                     __ptext72:	
 11900 ;; *************** function _DlyOff_Main *****************
 11901 ;; Defined at:
 11902 ;;		line 62 in file "../src/DelayOff_B1.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;  sw              1    wreg     unsigned char 
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;  sw              1   68[BANK0 ] unsigned char 
 11907 ;; Return value:  Size  Location     Type
 11908 ;;		None               void
 11909 ;; Registers used:
 11910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        3 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:    9
 11923 ;; This function calls:
 11924 ;;		_DelayOffPointSelect
 11925 ;;		_setBuz
 11926 ;;		_setDimmerLights_Switch
 11927 ;;		_setDimmerLights_Trigger
 11928 ;;		_setRFSW_Status
 11929 ;;		_setRF_DimmerLights
 11930 ;;		_setSw_Status
 11931 ;;		_setTxData
 11932 ;; This function is called by:
 11933 ;;		_DelayOff_Main
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           
 11938                           ;psect for function _DlyOff_Main
 11939  0B3F                     _DlyOff_Main:	
 11940                           
 11941                           ;incstack = 0
 11942                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11943                           ;DlyOff_Main@sw stored from wreg
 11944  0B3F  0020               	movlb	0	; select bank0
 11945  0B40  00E4               	movwf	DlyOff_Main@sw
 11946                           
 11947                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 11948  0B41  0864               	movf	DlyOff_Main@sw,w
 11949  0B42  3192  2212  318B   	fcall	_DelayOffPointSelect
 11950                           
 11951                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 11952  0B45  0878               	movf	_DelayOff,w
 11953  0B46  0086               	movwf	6
 11954  0B47  0187               	clrf	7
 11955  0B48  1C81               	btfss	1,1
 11956  0B49  0008               	return
 11957                           
 11958                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 11959  0B4A  0878               	movf	_DelayOff,w
 11960  0B4B  0086               	movwf	6
 11961  0B4C  0187               	clrf	7
 11962  0B4D  3001               	movlw	1
 11963  0B4E  0781               	addwf	1,f
 11964  0B4F  3141               	addfsr 1,1
 11965  0B50  1803               	skipnc
 11966  0B51  0A81               	incf	1,f
 11967                           
 11968                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 11969  0B52  0878               	movf	_DelayOff,w
 11970  0B53  0086               	movwf	6
 11971  0B54  0187               	clrf	7
 11972  0B55  3F40               	moviw [0]fsr1
 11973  0B56  0020               	movlb	0	; select bank0
 11974  0B57  00E2               	movwf	??_DlyOff_Main
 11975  0B58  3F41               	moviw [1]fsr1
 11976  0B59  00E3               	movwf	??_DlyOff_Main+1
 11977  0B5A  3016               	movlw	22
 11978  0B5B  0263               	subwf	??_DlyOff_Main+1,w
 11979  0B5C  3012               	movlw	18
 11980  0B5D  1903               	skipnz
 11981  0B5E  0262               	subwf	??_DlyOff_Main,w
 11982  0B5F  1C03               	skipc
 11983  0B60  0008               	return
 11984                           
 11985                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 11986  0B61  0878               	movf	_DelayOff,w
 11987  0B62  0086               	movwf	6
 11988  0B63  0187               	clrf	7
 11989  0B64  3000               	movlw	0
 11990  0B65  3FC0               	movwi [0]fsr1
 11991  0B66  3FC1               	movwi [1]fsr1
 11992                           
 11993                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 11994  0B67  3001               	movlw	1
 11995  0B68  00E2               	movwf	??_DlyOff_Main
 11996  0B69  0878               	movf	_DelayOff,w
 11997  0B6A  0086               	movwf	6
 11998  0B6B  0187               	clrf	7
 11999  0B6C  0862               	movf	??_DlyOff_Main,w
 12000  0B6D  0781               	addwf	1,f
 12001                           
 12002                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12003  0B6E  0878               	movf	_DelayOff,w
 12004  0B6F  0086               	movwf	6
 12005  0B70  0187               	clrf	7
 12006  0B71  0878               	movf	_DelayOff,w
 12007  0B72  0084               	movwf	4
 12008  0B73  0185               	clrf	5
 12009  0B74  0800               	movf	0,w
 12010  0B75  0201               	subwf	1,w
 12011  0B76  1C03               	skipc
 12012  0B77  0008               	return
 12013                           
 12014                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12015  0B78  0878               	movf	_DelayOff,w
 12016  0B79  0086               	movwf	6
 12017  0B7A  0187               	clrf	7
 12018  0B7B  0181               	clrf	1
 12019                           
 12020                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12021  0B7C  0878               	movf	_DelayOff,w
 12022  0B7D  0086               	movwf	6
 12023  0B7E  0187               	clrf	7
 12024  0B7F  1081               	bcf	1,1
 12025                           
 12026                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12027  0B80  01A2               	clrf	setSw_Status@command
 12028  0B81  0864               	movf	DlyOff_Main@sw,w
 12029  0B82  3191  2100  318B   	fcall	_setSw_Status
 12030                           
 12031                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12032  0B85  0020               	movlb	0	; select bank0
 12033  0B86  01A2               	clrf	setRFSW_Status@command
 12034  0B87  0864               	movf	DlyOff_Main@sw,w
 12035  0B88  3190  20F1  318B   	fcall	_setRFSW_Status
 12036                           
 12037                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12038  0B8B  0020               	movlb	0	; select bank0
 12039  0B8C  01DD               	clrf	setRF_DimmerLights@on
 12040  0B8D  0864               	movf	DlyOff_Main@sw,w
 12041  0B8E  318B  23AA  318B   	fcall	_setRF_DimmerLights
 12042                           
 12043                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12044  0B91  0020               	movlb	0	; select bank0
 12045  0B92  01A2               	clrf	setDimmerLights_Trigger@command
 12046  0B93  0AA2               	incf	setDimmerLights_Trigger@command,f
 12047  0B94  0864               	movf	DlyOff_Main@sw,w
 12048  0B95  3191  213D  318B   	fcall	_setDimmerLights_Trigger
 12049                           
 12050                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12051  0B98  0020               	movlb	0	; select bank0
 12052  0B99  01A2               	clrf	setDimmerLights_Switch@command
 12053  0B9A  0864               	movf	DlyOff_Main@sw,w
 12054  0B9B  3191  212D  318B   	fcall	_setDimmerLights_Switch
 12055                           
 12056                           ;DelayOff_B1.c: 78: setTxData();
 12057  0B9E  3185  258D  318B   	fcall	_setTxData
 12058                           
 12059                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12060  0BA1  3064               	movlw	100
 12061  0BA2  0020               	movlb	0	; select bank0
 12062  0BA3  00A9               	movwf	setBuz@time
 12063  0BA4  3000               	movlw	0
 12064  0BA5  00AA               	movwf	setBuz@time+1
 12065  0BA6  3001               	movlw	1
 12066  0BA7  3187  27A7         	fcall	_setBuz
 12067  0BA9  0008               	return
 12068  0BAA                     __end_of_DlyOff_Main:	
 12069                           
 12070                           	psect	text73
 12071  058D                     __ptext73:	
 12072 ;; *************** function _setTxData *****************
 12073 ;; Defined at:
 12074 ;;		line 186 in file "../src/RF_Control_B1.c"
 12075 ;; Parameters:    Size  Location     Type
 12076 ;;		None
 12077 ;; Auto vars:     Size  Location     Type
 12078 ;;  i               1    0        unsigned char 
 12079 ;; Return value:  Size  Location     Type
 12080 ;;		None               void
 12081 ;; Registers used:
 12082 ;;		wreg, fsr1l, fsr1h
 12083 ;; Tracked objects:
 12084 ;;		On entry : 0/0
 12085 ;;		On exit  : 0/0
 12086 ;;		Unchanged: 0/0
 12087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12092 ;;Total ram usage:        1 bytes
 12093 ;; Hardware stack levels used:    1
 12094 ;; Hardware stack levels required when called:    5
 12095 ;; This function calls:
 12096 ;;		Nothing
 12097 ;; This function is called by:
 12098 ;;		_DlyOff_Main
 12099 ;;		_setDimmerLights_Adj
 12100 ;;		_setControl_Lights_Table
 12101 ;;		_setRFSW_Control
 12102 ;;		_setRFSW_AdjControl
 12103 ;;		_Sw_DimmerOnFunc
 12104 ;;		_Sw_DimmerOffFunc
 12105 ;; This function uses a non-reentrant model
 12106 ;;
 12107                           
 12108                           
 12109                           ;psect for function _setTxData
 12110  058D                     _setTxData:	
 12111                           
 12112                           ;RF_Control_B1.c: 187: char i;
 12113                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 12114                           
 12115                           ;incstack = 0
 12116                           ; Regs used in _setTxData: [wregfsr1]
 12117  058D  0021               	movlb	1	; select bank1
 12118  058E  1C3F               	btfss	_RF1^(0+128),0
 12119  058F  0008               	return
 12120                           
 12121                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 12122  0590  153F               	bsf	_RF1^(0+128),2
 12123                           
 12124                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 12125  0591  3014               	movlw	20
 12126  0592  00C6               	movwf	(_RF1^(0+128)+7)
 12127  0593  3000               	movlw	0
 12128  0594  00C7               	movwf	(_RF1^(0+128)+8)
 12129                           
 12130                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 12131  0595  3063               	movlw	99
 12132  0596  0020               	movlb	0	; select bank0
 12133  0597  00A0               	movwf	??_setTxData
 12134  0598  0820               	movf	??_setTxData,w
 12135  0599  0022               	movlb	2	; select bank2
 12136  059A  00A0               	movwf	_RF_Data^(0+256)
 12137                           
 12138                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 12139  059B  3002               	movlw	2
 12140  059C  0020               	movlb	0	; select bank0
 12141  059D  00A0               	movwf	??_setTxData
 12142  059E  0820               	movf	??_setTxData,w
 12143  059F  0022               	movlb	2	; select bank2
 12144  05A0  00A1               	movwf	(_RF_Data^(0+256)+1)
 12145                           
 12146                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 12147  05A1  0020               	movlb	0	; select bank0
 12148  05A2  086E               	movf	_product,w
 12149  05A3  0086               	movwf	6
 12150  05A4  3001               	movlw	1	; select bank2/3
 12151  05A5  0087               	movwf	7
 12152  05A6  3001               	movlw	1	; select bank2/3
 12153  05A7  3F42               	moviw [2]fsr1
 12154  05A8  0022               	movlb	2	; select bank2
 12155  05A9  00A2               	movwf	(_RF_Data^(0+256)+2)
 12156                           
 12157                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 12158  05AA  0020               	movlb	0	; select bank0
 12159  05AB  086E               	movf	_product,w
 12160  05AC  0086               	movwf	6
 12161  05AD  3001               	movlw	1	; select bank2/3
 12162  05AE  0087               	movwf	7
 12163  05AF  3001               	movlw	1	; select bank2/3
 12164  05B0  3F43               	moviw [3]fsr1
 12165  05B1  0022               	movlb	2	; select bank2
 12166  05B2  00A3               	movwf	(_RF_Data^(0+256)+3)
 12167                           
 12168                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 12169  05B3  0020               	movlb	0	; select bank0
 12170  05B4  086E               	movf	_product,w
 12171  05B5  0086               	movwf	6
 12172  05B6  3001               	movlw	1	; select bank2/3
 12173  05B7  0087               	movwf	7
 12174  05B8  3001               	movlw	1	; select bank2/3
 12175  05B9  3F44               	moviw [4]fsr1
 12176  05BA  0022               	movlb	2	; select bank2
 12177  05BB  00A4               	movwf	(_RF_Data^(0+256)+4)
 12178                           
 12179                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 12180  05BC  0020               	movlb	0	; select bank0
 12181  05BD  086E               	movf	_product,w
 12182  05BE  0086               	movwf	6
 12183  05BF  3001               	movlw	1	; select bank2/3
 12184  05C0  0087               	movwf	7
 12185  05C1  3001               	movlw	1	; select bank2/3
 12186  05C2  3F45               	moviw [5]fsr1
 12187  05C3  0022               	movlb	2	; select bank2
 12188  05C4  00A5               	movwf	(_RF_Data^(0+256)+5)
 12189                           
 12190                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 12191  05C5  0020               	movlb	0	; select bank0
 12192  05C6  086E               	movf	_product,w
 12193  05C7  0086               	movwf	6
 12194  05C8  3001               	movlw	1	; select bank2/3
 12195  05C9  0087               	movwf	7
 12196  05CA  3001               	movlw	1	; select bank2/3
 12197  05CB  3F46               	moviw [6]fsr1
 12198  05CC  0022               	movlb	2	; select bank2
 12199  05CD  00A6               	movwf	(_RF_Data^(0+256)+6)
 12200                           
 12201                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 12202  05CE  0020               	movlb	0	; select bank0
 12203  05CF  086E               	movf	_product,w
 12204  05D0  0086               	movwf	6
 12205  05D1  3001               	movlw	1	; select bank2/3
 12206  05D2  0087               	movwf	7
 12207  05D3  3001               	movlw	1	; select bank2/3
 12208  05D4  3F47               	moviw [7]fsr1
 12209  05D5  0022               	movlb	2	; select bank2
 12210  05D6  00A7               	movwf	(_RF_Data^(0+256)+7)
 12211                           
 12212                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 12213  05D7  0020               	movlb	0	; select bank0
 12214  05D8  086E               	movf	_product,w
 12215  05D9  0086               	movwf	6
 12216  05DA  3001               	movlw	1	; select bank2/3
 12217  05DB  0087               	movwf	7
 12218  05DC  3001               	movlw	1	; select bank2/3
 12219  05DD  3F48               	moviw [8]fsr1
 12220  05DE  0022               	movlb	2	; select bank2
 12221  05DF  00A8               	movwf	(_RF_Data^(0+256)+8)
 12222                           
 12223                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 12224  05E0  0020               	movlb	0	; select bank0
 12225  05E1  086E               	movf	_product,w
 12226  05E2  0086               	movwf	6
 12227  05E3  3001               	movlw	1	; select bank2/3
 12228  05E4  0087               	movwf	7
 12229  05E5  3001               	movlw	1	; select bank2/3
 12230  05E6  3F49               	moviw [9]fsr1
 12231  05E7  0022               	movlb	2	; select bank2
 12232  05E8  00A9               	movwf	(_RF_Data^(0+256)+9)
 12233                           
 12234                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 12235  05E9  0020               	movlb	0	; select bank0
 12236  05EA  086E               	movf	_product,w
 12237  05EB  0086               	movwf	6
 12238  05EC  3001               	movlw	1	; select bank2/3
 12239  05ED  0087               	movwf	7
 12240  05EE  3001               	movlw	1	; select bank2/3
 12241  05EF  3F4A               	moviw [10]fsr1
 12242  05F0  0022               	movlb	2	; select bank2
 12243  05F1  00AA               	movwf	(_RF_Data^(0+256)+10)
 12244                           
 12245                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 12246  05F2  0020               	movlb	0	; select bank0
 12247  05F3  086E               	movf	_product,w
 12248  05F4  0086               	movwf	6
 12249  05F5  3001               	movlw	1	; select bank2/3
 12250  05F6  0087               	movwf	7
 12251  05F7  3001               	movlw	1	; select bank2/3
 12252  05F8  3F4B               	moviw [11]fsr1
 12253  05F9  0022               	movlb	2	; select bank2
 12254  05FA  00AB               	movwf	(_RF_Data^(0+256)+11)
 12255                           
 12256                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 12257  05FB  0020               	movlb	0	; select bank0
 12258  05FC  086E               	movf	_product,w
 12259  05FD  0086               	movwf	6
 12260  05FE  3001               	movlw	1	; select bank2/3
 12261  05FF  0087               	movwf	7
 12262  0600  3001               	movlw	1	; select bank2/3
 12263  0601  3F4C               	moviw [12]fsr1
 12264  0602  0022               	movlb	2	; select bank2
 12265  0603  00AC               	movwf	(_RF_Data^(0+256)+12)
 12266                           
 12267                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 12268  0604  0020               	movlb	0	; select bank0
 12269  0605  086E               	movf	_product,w
 12270  0606  0086               	movwf	6
 12271  0607  3001               	movlw	1	; select bank2/3
 12272  0608  0087               	movwf	7
 12273  0609  3001               	movlw	1	; select bank2/3
 12274  060A  3F4D               	moviw [13]fsr1
 12275  060B  0022               	movlb	2	; select bank2
 12276  060C  00AD               	movwf	(_RF_Data^(0+256)+13)
 12277                           
 12278                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 12279  060D  0020               	movlb	0	; select bank0
 12280  060E  086E               	movf	_product,w
 12281  060F  0086               	movwf	6
 12282  0610  3001               	movlw	1	; select bank2/3
 12283  0611  0087               	movwf	7
 12284  0612  3001               	movlw	1	; select bank2/3
 12285  0613  3F4E               	moviw [14]fsr1
 12286  0614  0022               	movlb	2	; select bank2
 12287  0615  00AE               	movwf	(_RF_Data^(0+256)+14)
 12288                           
 12289                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 12290  0616  0020               	movlb	0	; select bank0
 12291  0617  086E               	movf	_product,w
 12292  0618  0086               	movwf	6
 12293  0619  3001               	movlw	1	; select bank2/3
 12294  061A  0087               	movwf	7
 12295  061B  3001               	movlw	1	; select bank2/3
 12296  061C  3F4F               	moviw [15]fsr1
 12297  061D  0022               	movlb	2	; select bank2
 12298  061E  00AF               	movwf	(_RF_Data^(0+256)+15)
 12299                           
 12300                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 12301  061F  0020               	movlb	0	; select bank0
 12302  0620  086E               	movf	_product,w
 12303  0621  0086               	movwf	6
 12304  0622  3001               	movlw	1	; select bank2/3
 12305  0623  0087               	movwf	7
 12306  0624  3001               	movlw	1	; select bank2/3
 12307  0625  3F50               	moviw [16]fsr1
 12308  0626  0022               	movlb	2	; select bank2
 12309  0627  00B0               	movwf	(_RF_Data^(0+256)+16)
 12310                           
 12311                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 12312  0628  0020               	movlb	0	; select bank0
 12313  0629  086E               	movf	_product,w
 12314  062A  0086               	movwf	6
 12315  062B  3001               	movlw	1	; select bank2/3
 12316  062C  0087               	movwf	7
 12317  062D  3001               	movlw	1	; select bank2/3
 12318  062E  3F51               	moviw [17]fsr1
 12319  062F  0022               	movlb	2	; select bank2
 12320  0630  00B1               	movwf	(_RF_Data^(0+256)+17)
 12321                           
 12322                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 12323  0631  0020               	movlb	0	; select bank0
 12324  0632  086E               	movf	_product,w
 12325  0633  0086               	movwf	6
 12326  0634  3001               	movlw	1	; select bank2/3
 12327  0635  0087               	movwf	7
 12328  0636  3001               	movlw	1	; select bank2/3
 12329  0637  3F52               	moviw [18]fsr1
 12330  0638  0022               	movlb	2	; select bank2
 12331  0639  00B2               	movwf	(_RF_Data^(0+256)+18)
 12332                           
 12333                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 12334  063A  0020               	movlb	0	; select bank0
 12335  063B  086E               	movf	_product,w
 12336  063C  0086               	movwf	6
 12337  063D  3001               	movlw	1	; select bank2/3
 12338  063E  0087               	movwf	7
 12339  063F  3001               	movlw	1	; select bank2/3
 12340  0640  3F53               	moviw [19]fsr1
 12341  0641  0022               	movlb	2	; select bank2
 12342  0642  00B3               	movwf	(_RF_Data^(0+256)+19)
 12343                           
 12344                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 12345  0643  30D2               	movlw	210
 12346  0644  0020               	movlb	0	; select bank0
 12347  0645  00A0               	movwf	??_setTxData
 12348  0646  0820               	movf	??_setTxData,w
 12349  0647  0022               	movlb	2	; select bank2
 12350  0648  00B4               	movwf	(_RF_Data^(0+256)+20)
 12351  0649  0008               	return
 12352  064A                     __end_of_setTxData:	
 12353                           
 12354                           	psect	text74
 12355  1100                     __ptext74:	
 12356 ;; *************** function _setSw_Status *****************
 12357 ;; Defined at:
 12358 ;;		line 111 in file "../src/Switch_B1.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  sw              1    wreg     unsigned char 
 12361 ;;  command         1    2[BANK0 ] unsigned char 
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;  sw              1    3[BANK0 ] unsigned char 
 12364 ;; Return value:  Size  Location     Type
 12365 ;;		None               void
 12366 ;; Registers used:
 12367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12373 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;Total ram usage:        2 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    6
 12380 ;; This function calls:
 12381 ;;		_SwPointSelect
 12382 ;; This function is called by:
 12383 ;;		_DlyOff_Main
 12384 ;;		_setControl_Lights_Table
 12385 ;;		_setRFSW_Control
 12386 ;;		_setDimmerLights_ERROR
 12387 ;; This function uses a non-reentrant model
 12388 ;;
 12389                           
 12390                           
 12391                           ;psect for function _setSw_Status
 12392  1100                     _setSw_Status:	
 12393                           
 12394                           ;incstack = 0
 12395                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12396                           ;setSw_Status@sw stored from wreg
 12397  1100  0020               	movlb	0	; select bank0
 12398  1101  00A3               	movwf	setSw_Status@sw
 12399                           
 12400                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12401  1102  0823               	movf	setSw_Status@sw,w
 12402  1103  3192  2226         	fcall	_SwPointSelect
 12403                           
 12404                           ;Switch_B1.c: 113: Sw->Status = command;
 12405  1105  0020               	movlb	0	; select bank0
 12406  1106  086F               	movf	_Sw,w
 12407  1107  0086               	movwf	6
 12408  1108  3001               	movlw	1	; select bank2/3
 12409  1109  0087               	movwf	7
 12410  110A  0822               	movf	setSw_Status@command,w
 12411  110B  1301               	bcf	1,6
 12412  110C  1D03               	skipz
 12413  110D  1701               	bsf	1,6
 12414  110E  0008               	return
 12415  110F                     __end_of_setSw_Status:	
 12416                           
 12417                           	psect	text75
 12418  1226                     __ptext75:	
 12419 ;; *************** function _SwPointSelect *****************
 12420 ;; Defined at:
 12421 ;;		line 21 in file "../src/Switch_B1.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;  sw              1    wreg     unsigned char 
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;  sw              1    1[BANK0 ] unsigned char 
 12426 ;; Return value:  Size  Location     Type
 12427 ;;		None               void
 12428 ;; Registers used:
 12429 ;;		wreg
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;Total ram usage:        2 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    5
 12442 ;; This function calls:
 12443 ;;		Nothing
 12444 ;; This function is called by:
 12445 ;;		_setSw_Enable
 12446 ;;		_setSw_Status
 12447 ;;		_setSw_Main
 12448 ;;		_Sw_Detect
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           
 12453                           ;psect for function _SwPointSelect
 12454  1226                     _SwPointSelect:	
 12455                           
 12456                           ;incstack = 0
 12457                           ; Regs used in _SwPointSelect: [wreg]
 12458                           ;SwPointSelect@sw stored from wreg
 12459  1226  0020               	movlb	0	; select bank0
 12460  1227  00A1               	movwf	SwPointSelect@sw
 12461                           
 12462                           ;Switch_B1.c: 24: if (sw == 1) {
 12463  1228  0821               	movf	SwPointSelect@sw,w
 12464  1229  3A01               	xorlw	1
 12465  122A  1D03               	skipz
 12466  122B  2A31               	goto	l5562
 12467                           
 12468                           ;Switch_B1.c: 25: Sw = &Sw1;
 12469  122C  3053               	movlw	_Sw1& (0+255)
 12470  122D  00A0               	movwf	??_SwPointSelect
 12471  122E  0820               	movf	??_SwPointSelect,w
 12472  122F  00EF               	movwf	_Sw
 12473                           
 12474                           ;Switch_B1.c: 26: }
 12475  1230  0008               	return
 12476  1231                     l5562:	
 12477                           
 12478                           ;Switch_B1.c: 29: else if (sw == 2) {
 12479  1231  0821               	movf	SwPointSelect@sw,w
 12480  1232  3A02               	xorlw	2
 12481  1233  1D03               	skipz
 12482  1234  0008               	return
 12483                           
 12484                           ;Switch_B1.c: 30: Sw = &Sw2;
 12485  1235  305C               	movlw	_Sw2& (0+255)
 12486  1236  00A0               	movwf	??_SwPointSelect
 12487  1237  0820               	movf	??_SwPointSelect,w
 12488  1238  00EF               	movwf	_Sw
 12489  1239  0008               	return
 12490  123A                     __end_of_SwPointSelect:	
 12491                           
 12492                           	psect	text76
 12493  0BAA                     __ptext76:	
 12494 ;; *************** function _setRF_DimmerLights *****************
 12495 ;; Defined at:
 12496 ;;		line 452 in file "../src/RF_Control_B1.c"
 12497 ;; Parameters:    Size  Location     Type
 12498 ;;  lights          1    wreg     unsigned char 
 12499 ;;  on              1   61[BANK0 ] unsigned char 
 12500 ;; Auto vars:     Size  Location     Type
 12501 ;;  lights          1   65[BANK0 ] unsigned char 
 12502 ;;  status          1   64[BANK0 ] unsigned char 
 12503 ;; Return value:  Size  Location     Type
 12504 ;;		None               void
 12505 ;; Registers used:
 12506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12512 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;Total ram usage:        5 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    8
 12519 ;; This function calls:
 12520 ;;		_setPercentValue
 12521 ;; This function is called by:
 12522 ;;		_DlyOff_Main
 12523 ;;		_setDimmerLights_Adj
 12524 ;;		_setRFSW_Control
 12525 ;;		_Sw_DimmerOnFunc
 12526 ;;		_Sw_DimmerOffFunc
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           
 12531                           ;psect for function _setRF_DimmerLights
 12532  0BAA                     _setRF_DimmerLights:	
 12533                           
 12534                           ;incstack = 0
 12535                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12536                           ;setRF_DimmerLights@lights stored from wreg
 12537  0BAA  0020               	movlb	0	; select bank0
 12538  0BAB  00E1               	movwf	setRF_DimmerLights@lights
 12539                           
 12540                           ;RF_Control_B1.c: 453: char status;
 12541                           ;RF_Control_B1.c: 454: status = 1;
 12542  0BAC  01E0               	clrf	setRF_DimmerLights@status
 12543  0BAD  0AE0               	incf	setRF_DimmerLights@status,f
 12544                           
 12545                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 12546  0BAE  0861               	movf	setRF_DimmerLights@lights,w
 12547  0BAF  3EFF               	addlw	-1
 12548  0BB0  0A89               	incf	9,f
 12549  0BB1  2BB4               	goto	u4450
 12550  0BB2                     u4455:	
 12551  0BB2  1003               	clrc
 12552  0BB3  0DE0               	rlf	setRF_DimmerLights@status,f
 12553  0BB4                     u4450:	
 12554  0BB4  3EFF               	addlw	-1
 12555  0BB5  1D03               	skipz
 12556  0BB6  2BB2               	goto	u4455
 12557                           
 12558                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 12559  0BB7  0861               	movf	setRF_DimmerLights@lights,w
 12560  0BB8  00DE               	movwf	??_setRF_DimmerLights
 12561  0BB9  086E               	movf	_product,w
 12562  0BBA  3E0B               	addlw	11
 12563  0BBB  0086               	movwf	6
 12564  0BBC  3001               	movlw	1	; select bank2/3
 12565  0BBD  0087               	movwf	7
 12566  0BBE  085E               	movf	??_setRF_DimmerLights,w
 12567  0BBF  0081               	movwf	1
 12568                           
 12569                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)(65*0.8)));
 12570  0BC0  3034               	movlw	52
 12571  0BC1  3197  2727  318B   	fcall	_setPercentValue
 12572  0BC4  0020               	movlb	0	; select bank0
 12573  0BC5  00DE               	movwf	??_setRF_DimmerLights
 12574  0BC6  0861               	movf	setRF_DimmerLights@lights,w
 12575  0BC7  3E14               	addlw	20
 12576  0BC8  076E               	addwf	_product,w
 12577  0BC9  00DF               	movwf	??_setRF_DimmerLights+1
 12578  0BCA  085F               	movf	??_setRF_DimmerLights+1,w
 12579  0BCB  0086               	movwf	6
 12580  0BCC  3001               	movlw	1	; select bank2/3
 12581  0BCD  0087               	movwf	7
 12582  0BCE  085E               	movf	??_setRF_DimmerLights,w
 12583  0BCF  0081               	movwf	1
 12584                           
 12585                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 12586  0BD0  0861               	movf	setRF_DimmerLights@lights,w
 12587  0BD1  3E14               	addlw	20
 12588  0BD2  076E               	addwf	_product,w
 12589  0BD3  00DE               	movwf	??_setRF_DimmerLights
 12590  0BD4  085E               	movf	??_setRF_DimmerLights,w
 12591  0BD5  0086               	movwf	6
 12592  0BD6  3001               	movlw	1	; select bank2/3
 12593  0BD7  0087               	movwf	7
 12594  0BD8  0801               	movf	1,w
 12595  0BD9  00DF               	movwf	??_setRF_DimmerLights+1
 12596  0BDA  086E               	movf	_product,w
 12597  0BDB  3E09               	addlw	9
 12598  0BDC  0086               	movwf	6
 12599  0BDD  3001               	movlw	1	; select bank2/3
 12600  0BDE  0087               	movwf	7
 12601  0BDF  085F               	movf	??_setRF_DimmerLights+1,w
 12602  0BE0  0081               	movwf	1
 12603                           
 12604                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 12605  0BE1  0861               	movf	setRF_DimmerLights@lights,w
 12606  0BE2  3E1A               	addlw	26
 12607  0BE3  076E               	addwf	_product,w
 12608  0BE4  00DE               	movwf	??_setRF_DimmerLights
 12609  0BE5  085E               	movf	??_setRF_DimmerLights,w
 12610  0BE6  0086               	movwf	6
 12611  0BE7  3001               	movlw	1	; select bank2/3
 12612  0BE8  0087               	movwf	7
 12613  0BE9  0801               	movf	1,w
 12614  0BEA  00DF               	movwf	??_setRF_DimmerLights+1
 12615  0BEB  086E               	movf	_product,w
 12616  0BEC  3E11               	addlw	17
 12617  0BED  0086               	movwf	6
 12618  0BEE  3001               	movlw	1	; select bank2/3
 12619  0BEF  0087               	movwf	7
 12620  0BF0  085F               	movf	??_setRF_DimmerLights+1,w
 12621  0BF1  0081               	movwf	1
 12622                           
 12623                           ;RF_Control_B1.c: 464: if (on == 1) {
 12624  0BF2  085D               	movf	setRF_DimmerLights@on,w
 12625  0BF3  3A01               	xorlw	1
 12626  0BF4  1D03               	skipz
 12627  0BF5  2C06               	goto	l5658
 12628                           
 12629                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 12630  0BF6  086E               	movf	_product,w
 12631  0BF7  3E0F               	addlw	15
 12632  0BF8  0086               	movwf	6
 12633  0BF9  3001               	movlw	1	; select bank2/3
 12634  0BFA  0087               	movwf	7
 12635  0BFB  0801               	movf	1,w
 12636  0BFC  0460               	iorwf	setRF_DimmerLights@status,w
 12637  0BFD  00DE               	movwf	??_setRF_DimmerLights
 12638  0BFE  086E               	movf	_product,w
 12639  0BFF  3E0F               	addlw	15
 12640  0C00  0086               	movwf	6
 12641  0C01  3001               	movlw	1	; select bank2/3
 12642  0C02  0087               	movwf	7
 12643  0C03  085E               	movf	??_setRF_DimmerLights,w
 12644  0C04  0081               	movwf	1
 12645                           
 12646                           ;RF_Control_B1.c: 466: } else {
 12647  0C05  0008               	return
 12648  0C06                     l5658:	
 12649                           
 12650                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 12651  0C06  086E               	movf	_product,w
 12652  0C07  3E0F               	addlw	15
 12653  0C08  0086               	movwf	6
 12654  0C09  3001               	movlw	1	; select bank2/3
 12655  0C0A  0087               	movwf	7
 12656  0C0B  0960               	comf	setRF_DimmerLights@status,w
 12657  0C0C  0501               	andwf	1,w
 12658  0C0D  00DE               	movwf	??_setRF_DimmerLights
 12659  0C0E  086E               	movf	_product,w
 12660  0C0F  3E0F               	addlw	15
 12661  0C10  0086               	movwf	6
 12662  0C11  3001               	movlw	1	; select bank2/3
 12663  0C12  0087               	movwf	7
 12664  0C13  085E               	movf	??_setRF_DimmerLights,w
 12665  0C14  0081               	movwf	1
 12666  0C15  0008               	return
 12667  0C16                     __end_of_setRF_DimmerLights:	
 12668                           
 12669                           	psect	text77
 12670  1727                     __ptext77:	
 12671 ;; *************** function _setPercentValue *****************
 12672 ;; Defined at:
 12673 ;;		line 777 in file "../src/Dimmer_B1.c"
 12674 ;; Parameters:    Size  Location     Type
 12675 ;;  value           1    wreg     unsigned char 
 12676 ;; Auto vars:     Size  Location     Type
 12677 ;;  value           1   57[BANK0 ] unsigned char 
 12678 ;;  i               3   58[BANK0 ] float 
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  1    wreg      unsigned char 
 12681 ;; Registers used:
 12682 ;;		wreg, status,2, status,0, pclath, cstack
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;Total ram usage:        4 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:    7
 12695 ;; This function calls:
 12696 ;;		___awtoft
 12697 ;;		___ftdiv
 12698 ;;		___fttol
 12699 ;; This function is called by:
 12700 ;;		_Flash_Memory_Initialization
 12701 ;;		_setRF_DimmerLights
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           
 12706                           ;psect for function _setPercentValue
 12707  1727                     _setPercentValue:	
 12708                           
 12709                           ;incstack = 0
 12710                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12711                           ;setPercentValue@value stored from wreg
 12712  1727  0020               	movlb	0	; select bank0
 12713  1728  00D9               	movwf	setPercentValue@value
 12714                           
 12715                           ;Dimmer_B1.c: 785: float i = ((char)(65*0.8)) - ((char)(25*0.8));
 12716  1729  3000               	movlw	0
 12717  172A  00DA               	movwf	setPercentValue@i
 12718  172B  3000               	movlw	0
 12719  172C  00DB               	movwf	setPercentValue@i+1
 12720  172D  3042               	movlw	66
 12721  172E  00DC               	movwf	setPercentValue@i+2
 12722                           
 12723                           ;Dimmer_B1.c: 786: i /= 100;
 12724  172F  3000               	movlw	0
 12725  1730  00AE               	movwf	___ftdiv@f2
 12726  1731  30C8               	movlw	200
 12727  1732  00AF               	movwf	___ftdiv@f2+1
 12728  1733  3042               	movlw	66
 12729  1734  00B0               	movwf	___ftdiv@f2+2
 12730  1735  085A               	movf	setPercentValue@i,w
 12731  1736  00B1               	movwf	___ftdiv@f1
 12732  1737  085B               	movf	setPercentValue@i+1,w
 12733  1738  00B2               	movwf	___ftdiv@f1+1
 12734  1739  085C               	movf	setPercentValue@i+2,w
 12735  173A  00B3               	movwf	___ftdiv@f1+2
 12736  173B  3186  26FE  3197   	fcall	___ftdiv
 12737  173E  0020               	movlb	0	; select bank0
 12738  173F  082E               	movf	?___ftdiv,w
 12739  1740  00DA               	movwf	setPercentValue@i
 12740  1741  082F               	movf	?___ftdiv+1,w
 12741  1742  00DB               	movwf	setPercentValue@i+1
 12742  1743  0830               	movf	?___ftdiv+2,w
 12743  1744  00DC               	movwf	setPercentValue@i+2
 12744                           
 12745                           ;Dimmer_B1.c: 788: return (100 - (char) ((value - ((char)(65*0.8))) / i));
 12746  1745  0859               	movf	setPercentValue@value,w
 12747  1746  3ECC               	addlw	204
 12748  1747  00A8               	movwf	___awtoft@c
 12749  1748  30FF               	movlw	255
 12750  1749  1803               	skipnc
 12751  174A  3000               	movlw	0
 12752  174B  00A9               	movwf	___awtoft@c+1
 12753  174C  3193  23CE  3197   	fcall	___awtoft
 12754  174F  0020               	movlb	0	; select bank0
 12755  1750  0828               	movf	?___awtoft,w
 12756  1751  00B1               	movwf	___ftdiv@f1
 12757  1752  0829               	movf	?___awtoft+1,w
 12758  1753  00B2               	movwf	___ftdiv@f1+1
 12759  1754  082A               	movf	?___awtoft+2,w
 12760  1755  00B3               	movwf	___ftdiv@f1+2
 12761  1756  085A               	movf	setPercentValue@i,w
 12762  1757  00AE               	movwf	___ftdiv@f2
 12763  1758  085B               	movf	setPercentValue@i+1,w
 12764  1759  00AF               	movwf	___ftdiv@f2+1
 12765  175A  085C               	movf	setPercentValue@i+2,w
 12766  175B  00B0               	movwf	___ftdiv@f2+2
 12767  175C  3186  26FE  3197   	fcall	___ftdiv
 12768  175F  0020               	movlb	0	; select bank0
 12769  1760  082E               	movf	?___ftdiv,w
 12770  1761  00CB               	movwf	___fttol@f1
 12771  1762  082F               	movf	?___ftdiv+1,w
 12772  1763  00CC               	movwf	___fttol@f1+1
 12773  1764  0830               	movf	?___ftdiv+2,w
 12774  1765  00CD               	movwf	___fttol@f1+2
 12775  1766  318E  265E         	fcall	___fttol
 12776  1768  0020               	movlb	0	; select bank0
 12777  1769  034B               	decf	?___fttol,w
 12778  176A  3AFF               	xorlw	255
 12779  176B  3E64               	addlw	100
 12780  176C  0008               	return
 12781  176D                     __end_of_setPercentValue:	
 12782                           
 12783                           	psect	text78
 12784  0E5E                     __ptext78:	
 12785 ;; *************** function ___fttol *****************
 12786 ;; Defined at:
 12787 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12788 ;; Parameters:    Size  Location     Type
 12789 ;;  f1              3   43[BANK0 ] float 
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;  lval            4   52[BANK0 ] unsigned long 
 12792 ;;  exp1            1   56[BANK0 ] unsigned char 
 12793 ;;  sign1           1   51[BANK0 ] unsigned char 
 12794 ;; Return value:  Size  Location     Type
 12795 ;;                  4   43[BANK0 ] long 
 12796 ;; Registers used:
 12797 ;;		wreg, status,2, status,0
 12798 ;; Tracked objects:
 12799 ;;		On entry : 0/0
 12800 ;;		On exit  : 0/0
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12803 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12807 ;;Total ram usage:       14 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    5
 12810 ;; This function calls:
 12811 ;;		Nothing
 12812 ;; This function is called by:
 12813 ;;		_getPercentValue
 12814 ;;		_setPercentValue
 12815 ;; This function uses a non-reentrant model
 12816 ;;
 12817                           
 12818                           
 12819                           ;psect for function ___fttol
 12820  0E5E                     ___fttol:	
 12821                           
 12822                           ;incstack = 0
 12823                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12824  0E5E  0020               	movlb	0	; select bank0
 12825  0E5F  084B               	movf	___fttol@f1,w
 12826  0E60  00CF               	movwf	??___fttol
 12827  0E61  084C               	movf	___fttol@f1+1,w
 12828  0E62  00D0               	movwf	??___fttol+1
 12829  0E63  084D               	movf	___fttol@f1+2,w
 12830  0E64  00D1               	movwf	??___fttol+2
 12831  0E65  1003               	clrc
 12832  0E66  0D50               	rlf	??___fttol+1,w
 12833  0E67  0D51               	rlf	??___fttol+2,w
 12834  0E68  00D2               	movwf	??___fttol+3
 12835  0E69  0852               	movf	??___fttol+3,w
 12836  0E6A  00D8               	movwf	___fttol@exp1
 12837  0E6B  08D8               	movf	___fttol@exp1,f
 12838  0E6C  1D03               	skipz
 12839  0E6D  2E77               	goto	l5438
 12840  0E6E  3000               	movlw	0
 12841  0E6F  00CE               	movwf	?___fttol+3
 12842  0E70  3000               	movlw	0
 12843  0E71  00CD               	movwf	?___fttol+2
 12844  0E72  3000               	movlw	0
 12845  0E73  00CC               	movwf	?___fttol+1
 12846  0E74  3000               	movlw	0
 12847  0E75  00CB               	movwf	?___fttol
 12848  0E76  0008               	return
 12849  0E77                     l5438:	
 12850  0E77  084B               	movf	___fttol@f1,w
 12851  0E78  00CF               	movwf	??___fttol
 12852  0E79  084C               	movf	___fttol@f1+1,w
 12853  0E7A  00D0               	movwf	??___fttol+1
 12854  0E7B  084D               	movf	___fttol@f1+2,w
 12855  0E7C  00D1               	movwf	??___fttol+2
 12856  0E7D  3017               	movlw	23
 12857  0E7E                     u4095:	
 12858  0E7E  36D1               	lsrf	??___fttol+2,f
 12859  0E7F  0CD0               	rrf	??___fttol+1,f
 12860  0E80  0CCF               	rrf	??___fttol,f
 12861  0E81  0B89               	decfsz	9,f
 12862  0E82  2E7E               	goto	u4095
 12863  0E83  084F               	movf	??___fttol,w
 12864  0E84  00D2               	movwf	??___fttol+3
 12865  0E85  0852               	movf	??___fttol+3,w
 12866  0E86  00D3               	movwf	___fttol@sign1
 12867  0E87  17CC               	bsf	___fttol@f1+1,7
 12868  0E88  30FF               	movlw	255
 12869  0E89  05CB               	andwf	___fttol@f1,f
 12870  0E8A  30FF               	movlw	255
 12871  0E8B  05CC               	andwf	___fttol@f1+1,f
 12872  0E8C  3000               	movlw	0
 12873  0E8D  05CD               	andwf	___fttol@f1+2,f
 12874  0E8E  084B               	movf	___fttol@f1,w
 12875  0E8F  00D4               	movwf	___fttol@lval
 12876  0E90  084C               	movf	___fttol@f1+1,w
 12877  0E91  00D5               	movwf	___fttol@lval+1
 12878  0E92  084D               	movf	___fttol@f1+2,w
 12879  0E93  00D6               	movwf	___fttol@lval+2
 12880  0E94  01D7               	clrf	___fttol@lval+3
 12881  0E95  308E               	movlw	142
 12882  0E96  02D8               	subwf	___fttol@exp1,f
 12883  0E97  1FD8               	btfss	___fttol@exp1,7
 12884  0E98  2EB5               	goto	l5458
 12885  0E99  0858               	movf	___fttol@exp1,w
 12886  0E9A  3A80               	xorlw	128
 12887  0E9B  3E8F               	addlw	143
 12888  0E9C  1803               	skipnc
 12889  0E9D  2EA7               	goto	l5456
 12890  0E9E  3000               	movlw	0
 12891  0E9F  00CE               	movwf	?___fttol+3
 12892  0EA0  3000               	movlw	0
 12893  0EA1  00CD               	movwf	?___fttol+2
 12894  0EA2  3000               	movlw	0
 12895  0EA3  00CC               	movwf	?___fttol+1
 12896  0EA4  3000               	movlw	0
 12897  0EA5  00CB               	movwf	?___fttol
 12898  0EA6  0008               	return
 12899  0EA7                     l5456:	
 12900  0EA7  3001               	movlw	1
 12901  0EA8                     u4125:	
 12902  0EA8  36D7               	lsrf	___fttol@lval+3,f
 12903  0EA9  0CD6               	rrf	___fttol@lval+2,f
 12904  0EAA  0CD5               	rrf	___fttol@lval+1,f
 12905  0EAB  0CD4               	rrf	___fttol@lval,f
 12906  0EAC  0B89               	decfsz	9,f
 12907  0EAD  2EA8               	goto	u4125
 12908  0EAE  3001               	movlw	1
 12909  0EAF  00CF               	movwf	??___fttol
 12910  0EB0  084F               	movf	??___fttol,w
 12911  0EB1  07D8               	addwf	___fttol@exp1,f
 12912  0EB2  1903               	btfsc	3,2
 12913  0EB3  2ECE               	goto	l5468
 12914  0EB4  2EA7               	goto	l5456
 12915  0EB5                     l5458:	
 12916  0EB5  3018               	movlw	24
 12917  0EB6  0258               	subwf	___fttol@exp1,w
 12918  0EB7  1C03               	skipc
 12919  0EB8  2ECB               	goto	l5466
 12920  0EB9  3000               	movlw	0
 12921  0EBA  00CE               	movwf	?___fttol+3
 12922  0EBB  3000               	movlw	0
 12923  0EBC  00CD               	movwf	?___fttol+2
 12924  0EBD  3000               	movlw	0
 12925  0EBE  00CC               	movwf	?___fttol+1
 12926  0EBF  3000               	movlw	0
 12927  0EC0  00CB               	movwf	?___fttol
 12928  0EC1  0008               	return
 12929  0EC2                     l5464:	
 12930  0EC2  3001               	movlw	1
 12931  0EC3                     u4155:	
 12932  0EC3  35D4               	lslf	___fttol@lval,f
 12933  0EC4  0DD5               	rlf	___fttol@lval+1,f
 12934  0EC5  0DD6               	rlf	___fttol@lval+2,f
 12935  0EC6  0DD7               	rlf	___fttol@lval+3,f
 12936  0EC7  0B89               	decfsz	9,f
 12937  0EC8  2EC3               	goto	u4155
 12938  0EC9  3001               	movlw	1
 12939  0ECA  02D8               	subwf	___fttol@exp1,f
 12940  0ECB                     l5466:	
 12941  0ECB  08D8               	movf	___fttol@exp1,f
 12942  0ECC  1D03               	skipz
 12943  0ECD  2EC2               	goto	l5464
 12944  0ECE                     l5468:	
 12945  0ECE  0853               	movf	___fttol@sign1,w
 12946  0ECF  1903               	btfsc	3,2
 12947  0ED0  2EDC               	goto	l5472
 12948  0ED1  09D4               	comf	___fttol@lval,f
 12949  0ED2  09D5               	comf	___fttol@lval+1,f
 12950  0ED3  09D6               	comf	___fttol@lval+2,f
 12951  0ED4  09D7               	comf	___fttol@lval+3,f
 12952  0ED5  0AD4               	incf	___fttol@lval,f
 12953  0ED6  1903               	skipnz
 12954  0ED7  0AD5               	incf	___fttol@lval+1,f
 12955  0ED8  1903               	skipnz
 12956  0ED9  0AD6               	incf	___fttol@lval+2,f
 12957  0EDA  1903               	skipnz
 12958  0EDB  0AD7               	incf	___fttol@lval+3,f
 12959  0EDC                     l5472:	
 12960  0EDC  0857               	movf	___fttol@lval+3,w
 12961  0EDD  00CE               	movwf	?___fttol+3
 12962  0EDE  0856               	movf	___fttol@lval+2,w
 12963  0EDF  00CD               	movwf	?___fttol+2
 12964  0EE0  0855               	movf	___fttol@lval+1,w
 12965  0EE1  00CC               	movwf	?___fttol+1
 12966  0EE2  0854               	movf	___fttol@lval,w
 12967  0EE3  00CB               	movwf	?___fttol
 12968  0EE4  0008               	return
 12969  0EE5                     __end_of___fttol:	
 12970                           
 12971                           	psect	text79
 12972  06FE                     __ptext79:	
 12973 ;; *************** function ___ftdiv *****************
 12974 ;; Defined at:
 12975 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12976 ;; Parameters:    Size  Location     Type
 12977 ;;  f2              3   14[BANK0 ] float 
 12978 ;;  f1              3   17[BANK0 ] float 
 12979 ;; Auto vars:     Size  Location     Type
 12980 ;;  f3              3   25[BANK0 ] float 
 12981 ;;  sign            1   29[BANK0 ] unsigned char 
 12982 ;;  exp             1   28[BANK0 ] unsigned char 
 12983 ;;  cntr            1   24[BANK0 ] unsigned char 
 12984 ;; Return value:  Size  Location     Type
 12985 ;;                  3   14[BANK0 ] float 
 12986 ;; Registers used:
 12987 ;;		wreg, status,2, status,0, pclath, cstack
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : 0/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12993 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;Total ram usage:       16 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; Hardware stack levels required when called:    6
 13000 ;; This function calls:
 13001 ;;		___ftpack
 13002 ;; This function is called by:
 13003 ;;		_getPercentValue
 13004 ;;		_setPercentValue
 13005 ;; This function uses a non-reentrant model
 13006 ;;
 13007                           
 13008                           
 13009                           ;psect for function ___ftdiv
 13010  06FE                     ___ftdiv:	
 13011                           
 13012                           ;incstack = 0
 13013                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13014  06FE  0020               	movlb	0	; select bank0
 13015  06FF  0831               	movf	___ftdiv@f1,w
 13016  0700  00B4               	movwf	??___ftdiv
 13017  0701  0832               	movf	___ftdiv@f1+1,w
 13018  0702  00B5               	movwf	??___ftdiv+1
 13019  0703  0833               	movf	___ftdiv@f1+2,w
 13020  0704  00B6               	movwf	??___ftdiv+2
 13021  0705  1003               	clrc
 13022  0706  0D35               	rlf	??___ftdiv+1,w
 13023  0707  0D36               	rlf	??___ftdiv+2,w
 13024  0708  00B7               	movwf	??___ftdiv+3
 13025  0709  0837               	movf	??___ftdiv+3,w
 13026  070A  00BC               	movwf	___ftdiv@exp
 13027  070B  08BC               	movf	___ftdiv@exp,f
 13028  070C  1D03               	skipz
 13029  070D  2F15               	goto	l5346
 13030  070E  3000               	movlw	0
 13031  070F  00AE               	movwf	?___ftdiv
 13032  0710  3000               	movlw	0
 13033  0711  00AF               	movwf	?___ftdiv+1
 13034  0712  3000               	movlw	0
 13035  0713  00B0               	movwf	?___ftdiv+2
 13036  0714  0008               	return
 13037  0715                     l5346:	
 13038  0715  082E               	movf	___ftdiv@f2,w
 13039  0716  00B4               	movwf	??___ftdiv
 13040  0717  082F               	movf	___ftdiv@f2+1,w
 13041  0718  00B5               	movwf	??___ftdiv+1
 13042  0719  0830               	movf	___ftdiv@f2+2,w
 13043  071A  00B6               	movwf	??___ftdiv+2
 13044  071B  1003               	clrc
 13045  071C  0D35               	rlf	??___ftdiv+1,w
 13046  071D  0D36               	rlf	??___ftdiv+2,w
 13047  071E  00B7               	movwf	??___ftdiv+3
 13048  071F  0837               	movf	??___ftdiv+3,w
 13049  0720  00BD               	movwf	___ftdiv@sign
 13050  0721  08BD               	movf	___ftdiv@sign,f
 13051  0722  1D03               	skipz
 13052  0723  2F2B               	goto	l5352
 13053  0724  3000               	movlw	0
 13054  0725  00AE               	movwf	?___ftdiv
 13055  0726  3000               	movlw	0
 13056  0727  00AF               	movwf	?___ftdiv+1
 13057  0728  3000               	movlw	0
 13058  0729  00B0               	movwf	?___ftdiv+2
 13059  072A  0008               	return
 13060  072B                     l5352:	
 13061  072B  3000               	movlw	0
 13062  072C  00B9               	movwf	___ftdiv@f3
 13063  072D  3000               	movlw	0
 13064  072E  00BA               	movwf	___ftdiv@f3+1
 13065  072F  3000               	movlw	0
 13066  0730  00BB               	movwf	___ftdiv@f3+2
 13067  0731  3089               	movlw	137
 13068  0732  073D               	addwf	___ftdiv@sign,w
 13069  0733  00B4               	movwf	??___ftdiv
 13070  0734  0834               	movf	??___ftdiv,w
 13071  0735  02BC               	subwf	___ftdiv@exp,f
 13072  0736  0831               	movf	___ftdiv@f1,w
 13073  0737  00B4               	movwf	??___ftdiv
 13074  0738  0832               	movf	___ftdiv@f1+1,w
 13075  0739  00B5               	movwf	??___ftdiv+1
 13076  073A  0833               	movf	___ftdiv@f1+2,w
 13077  073B  00B6               	movwf	??___ftdiv+2
 13078  073C  3010               	movlw	16
 13079  073D                     u3905:	
 13080  073D  36B6               	lsrf	??___ftdiv+2,f
 13081  073E  0CB5               	rrf	??___ftdiv+1,f
 13082  073F  0CB4               	rrf	??___ftdiv,f
 13083  0740  0B89               	decfsz	9,f
 13084  0741  2F3D               	goto	u3905
 13085  0742  0834               	movf	??___ftdiv,w
 13086  0743  00B7               	movwf	??___ftdiv+3
 13087  0744  0837               	movf	??___ftdiv+3,w
 13088  0745  00BD               	movwf	___ftdiv@sign
 13089  0746  082E               	movf	___ftdiv@f2,w
 13090  0747  00B4               	movwf	??___ftdiv
 13091  0748  082F               	movf	___ftdiv@f2+1,w
 13092  0749  00B5               	movwf	??___ftdiv+1
 13093  074A  0830               	movf	___ftdiv@f2+2,w
 13094  074B  00B6               	movwf	??___ftdiv+2
 13095  074C  3010               	movlw	16
 13096  074D                     u3915:	
 13097  074D  36B6               	lsrf	??___ftdiv+2,f
 13098  074E  0CB5               	rrf	??___ftdiv+1,f
 13099  074F  0CB4               	rrf	??___ftdiv,f
 13100  0750  0B89               	decfsz	9,f
 13101  0751  2F4D               	goto	u3915
 13102  0752  0834               	movf	??___ftdiv,w
 13103  0753  00B7               	movwf	??___ftdiv+3
 13104  0754  0837               	movf	??___ftdiv+3,w
 13105  0755  06BD               	xorwf	___ftdiv@sign,f
 13106  0756  3080               	movlw	128
 13107  0757  00B4               	movwf	??___ftdiv
 13108  0758  0834               	movf	??___ftdiv,w
 13109  0759  05BD               	andwf	___ftdiv@sign,f
 13110  075A  17B2               	bsf	___ftdiv@f1+1,7
 13111  075B  30FF               	movlw	255
 13112  075C  05B1               	andwf	___ftdiv@f1,f
 13113  075D  30FF               	movlw	255
 13114  075E  05B2               	andwf	___ftdiv@f1+1,f
 13115  075F  3000               	movlw	0
 13116  0760  05B3               	andwf	___ftdiv@f1+2,f
 13117  0761  17AF               	bsf	___ftdiv@f2+1,7
 13118  0762  30FF               	movlw	255
 13119  0763  05AE               	andwf	___ftdiv@f2,f
 13120  0764  30FF               	movlw	255
 13121  0765  05AF               	andwf	___ftdiv@f2+1,f
 13122  0766  3000               	movlw	0
 13123  0767  05B0               	andwf	___ftdiv@f2+2,f
 13124  0768  3018               	movlw	24
 13125  0769  00B4               	movwf	??___ftdiv
 13126  076A  0834               	movf	??___ftdiv,w
 13127  076B  00B8               	movwf	___ftdiv@cntr
 13128  076C                     l5366:	
 13129  076C  3001               	movlw	1
 13130  076D                     u3925:	
 13131  076D  35B9               	lslf	___ftdiv@f3,f
 13132  076E  0DBA               	rlf	___ftdiv@f3+1,f
 13133  076F  0DBB               	rlf	___ftdiv@f3+2,f
 13134  0770  0B89               	decfsz	9,f
 13135  0771  2F6D               	goto	u3925
 13136  0772  0830               	movf	___ftdiv@f2+2,w
 13137  0773  0233               	subwf	___ftdiv@f1+2,w
 13138  0774  1D03               	skipz
 13139  0775  2F7C               	goto	u3935
 13140  0776  082F               	movf	___ftdiv@f2+1,w
 13141  0777  0232               	subwf	___ftdiv@f1+1,w
 13142  0778  1D03               	skipz
 13143  0779  2F7C               	goto	u3935
 13144  077A  082E               	movf	___ftdiv@f2,w
 13145  077B  0231               	subwf	___ftdiv@f1,w
 13146  077C                     u3935:	
 13147  077C  1C03               	skipc
 13148  077D  2F85               	goto	l5374
 13149  077E  082E               	movf	___ftdiv@f2,w
 13150  077F  02B1               	subwf	___ftdiv@f1,f
 13151  0780  082F               	movf	___ftdiv@f2+1,w
 13152  0781  3BB2               	subwfb	___ftdiv@f1+1,f
 13153  0782  0830               	movf	___ftdiv@f2+2,w
 13154  0783  3BB3               	subwfb	___ftdiv@f1+2,f
 13155  0784  1439               	bsf	___ftdiv@f3,0
 13156  0785                     l5374:	
 13157  0785  3001               	movlw	1
 13158  0786                     u3945:	
 13159  0786  35B1               	lslf	___ftdiv@f1,f
 13160  0787  0DB2               	rlf	___ftdiv@f1+1,f
 13161  0788  0DB3               	rlf	___ftdiv@f1+2,f
 13162  0789  0B89               	decfsz	9,f
 13163  078A  2F86               	goto	u3945
 13164  078B  3001               	movlw	1
 13165  078C  02B8               	subwf	___ftdiv@cntr,f
 13166  078D  1D03               	btfss	3,2
 13167  078E  2F6C               	goto	l5366
 13168  078F  0839               	movf	___ftdiv@f3,w
 13169  0790  00A0               	movwf	___ftpack@arg
 13170  0791  083A               	movf	___ftdiv@f3+1,w
 13171  0792  00A1               	movwf	___ftpack@arg+1
 13172  0793  083B               	movf	___ftdiv@f3+2,w
 13173  0794  00A2               	movwf	___ftpack@arg+2
 13174  0795  083C               	movf	___ftdiv@exp,w
 13175  0796  00B4               	movwf	??___ftdiv
 13176  0797  0834               	movf	??___ftdiv,w
 13177  0798  00A3               	movwf	___ftpack@exp
 13178  0799  083D               	movf	___ftdiv@sign,w
 13179  079A  00B5               	movwf	??___ftdiv+1
 13180  079B  0835               	movf	??___ftdiv+1,w
 13181  079C  00A4               	movwf	___ftpack@sign
 13182  079D  3189  21AE         	fcall	___ftpack
 13183  079F  0020               	movlb	0	; select bank0
 13184  07A0  0820               	movf	?___ftpack,w
 13185  07A1  00AE               	movwf	?___ftdiv
 13186  07A2  0821               	movf	?___ftpack+1,w
 13187  07A3  00AF               	movwf	?___ftdiv+1
 13188  07A4  0822               	movf	?___ftpack+2,w
 13189  07A5  00B0               	movwf	?___ftdiv+2
 13190  07A6  0008               	return
 13191  07A7                     __end_of___ftdiv:	
 13192                           
 13193                           	psect	text80
 13194  13CE                     __ptext80:	
 13195 ;; *************** function ___awtoft *****************
 13196 ;; Defined at:
 13197 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  c               2    8[BANK0 ] int 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  sign            1   13[BANK0 ] unsigned char 
 13202 ;; Return value:  Size  Location     Type
 13203 ;;                  3    8[BANK0 ] float 
 13204 ;; Registers used:
 13205 ;;		wreg, status,2, status,0, pclath, cstack
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13211 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;Total ram usage:        6 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    6
 13218 ;; This function calls:
 13219 ;;		___ftpack
 13220 ;; This function is called by:
 13221 ;;		_getPercentValue
 13222 ;;		_setPercentValue
 13223 ;; This function uses a non-reentrant model
 13224 ;;
 13225                           
 13226                           
 13227                           ;psect for function ___awtoft
 13228  13CE                     ___awtoft:	
 13229                           
 13230                           ;incstack = 0
 13231                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13232  13CE  0020               	movlb	0	; select bank0
 13233  13CF  01AD               	clrf	___awtoft@sign
 13234  13D0  1FA9               	btfss	___awtoft@c+1,7
 13235  13D1  2BD9               	goto	l5264
 13236  13D2  09A8               	comf	___awtoft@c,f
 13237  13D3  09A9               	comf	___awtoft@c+1,f
 13238  13D4  0AA8               	incf	___awtoft@c,f
 13239  13D5  1903               	skipnz
 13240  13D6  0AA9               	incf	___awtoft@c+1,f
 13241  13D7  01AD               	clrf	___awtoft@sign
 13242  13D8  0AAD               	incf	___awtoft@sign,f
 13243  13D9                     l5264:	
 13244  13D9  0828               	movf	___awtoft@c,w
 13245  13DA  00A0               	movwf	___ftpack@arg
 13246  13DB  0829               	movf	___awtoft@c+1,w
 13247  13DC  00A1               	movwf	___ftpack@arg+1
 13248  13DD  01A2               	clrf	___ftpack@arg+2
 13249  13DE  308E               	movlw	142
 13250  13DF  00AB               	movwf	??___awtoft
 13251  13E0  082B               	movf	??___awtoft,w
 13252  13E1  00A3               	movwf	___ftpack@exp
 13253  13E2  082D               	movf	___awtoft@sign,w
 13254  13E3  00AC               	movwf	??___awtoft+1
 13255  13E4  082C               	movf	??___awtoft+1,w
 13256  13E5  00A4               	movwf	___ftpack@sign
 13257  13E6  3189  21AE         	fcall	___ftpack
 13258  13E8  0020               	movlb	0	; select bank0
 13259  13E9  0820               	movf	?___ftpack,w
 13260  13EA  00A8               	movwf	?___awtoft
 13261  13EB  0821               	movf	?___ftpack+1,w
 13262  13EC  00A9               	movwf	?___awtoft+1
 13263  13ED  0822               	movf	?___ftpack+2,w
 13264  13EE  00AA               	movwf	?___awtoft+2
 13265  13EF  0008               	return
 13266  13F0                     __end_of___awtoft:	
 13267                           
 13268                           	psect	text81
 13269  09AE                     __ptext81:	
 13270 ;; *************** function ___ftpack *****************
 13271 ;; Defined at:
 13272 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13273 ;; Parameters:    Size  Location     Type
 13274 ;;  arg             3    0[BANK0 ] unsigned um
 13275 ;;  exp             1    3[BANK0 ] unsigned char 
 13276 ;;  sign            1    4[BANK0 ] unsigned char 
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;		None
 13279 ;; Return value:  Size  Location     Type
 13280 ;;                  3    0[BANK0 ] float 
 13281 ;; Registers used:
 13282 ;;		wreg, status,2, status,0
 13283 ;; Tracked objects:
 13284 ;;		On entry : 0/0
 13285 ;;		On exit  : 0/0
 13286 ;;		Unchanged: 0/0
 13287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13288 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;Total ram usage:        8 bytes
 13293 ;; Hardware stack levels used:    1
 13294 ;; Hardware stack levels required when called:    5
 13295 ;; This function calls:
 13296 ;;		Nothing
 13297 ;; This function is called by:
 13298 ;;		___awtoft
 13299 ;;		___ftadd
 13300 ;;		___ftdiv
 13301 ;;		___ftmul
 13302 ;; This function uses a non-reentrant model
 13303 ;;
 13304                           
 13305                           
 13306                           ;psect for function ___ftpack
 13307  09AE                     ___ftpack:	
 13308                           
 13309                           ;incstack = 0
 13310                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13311  09AE  0020               	movlb	0	; select bank0
 13312  09AF  0823               	movf	___ftpack@exp,w
 13313  09B0  1903               	btfsc	3,2
 13314  09B1  29B7               	goto	l5230
 13315  09B2  0822               	movf	___ftpack@arg+2,w
 13316  09B3  0421               	iorwf	___ftpack@arg+1,w
 13317  09B4  0420               	iorwf	___ftpack@arg,w
 13318  09B5  1D03               	skipz
 13319  09B6  29C8               	goto	l5236
 13320  09B7                     l5230:	
 13321  09B7  3000               	movlw	0
 13322  09B8  00A0               	movwf	?___ftpack
 13323  09B9  3000               	movlw	0
 13324  09BA  00A1               	movwf	?___ftpack+1
 13325  09BB  3000               	movlw	0
 13326  09BC  00A2               	movwf	?___ftpack+2
 13327  09BD  0008               	return
 13328  09BE                     l5234:	
 13329  09BE  3001               	movlw	1
 13330  09BF  00A5               	movwf	??___ftpack
 13331  09C0  0825               	movf	??___ftpack,w
 13332  09C1  07A3               	addwf	___ftpack@exp,f
 13333  09C2  3001               	movlw	1
 13334  09C3                     u3555:	
 13335  09C3  36A2               	lsrf	___ftpack@arg+2,f
 13336  09C4  0CA1               	rrf	___ftpack@arg+1,f
 13337  09C5  0CA0               	rrf	___ftpack@arg,f
 13338  09C6  0B89               	decfsz	9,f
 13339  09C7  29C3               	goto	u3555
 13340  09C8                     l5236:	
 13341  09C8  30FE               	movlw	254
 13342  09C9  0522               	andwf	___ftpack@arg+2,w
 13343  09CA  1903               	btfsc	3,2
 13344  09CB  29E1               	goto	l2786
 13345  09CC  29BE               	goto	l5234
 13346  09CD                     l5238:	
 13347  09CD  3001               	movlw	1
 13348  09CE  00A5               	movwf	??___ftpack
 13349  09CF  0825               	movf	??___ftpack,w
 13350  09D0  07A3               	addwf	___ftpack@exp,f
 13351  09D1  3001               	movlw	1
 13352  09D2  07A0               	addwf	___ftpack@arg,f
 13353  09D3  3000               	movlw	0
 13354  09D4  1803               	skipnc
 13355  09D5  3001               	movlw	1
 13356  09D6  07A1               	addwf	___ftpack@arg+1,f
 13357  09D7  3000               	movlw	0
 13358  09D8  1803               	skipnc
 13359  09D9  3001               	movlw	1
 13360  09DA  07A2               	addwf	___ftpack@arg+2,f
 13361  09DB  3001               	movlw	1
 13362  09DC                     u3575:	
 13363  09DC  36A2               	lsrf	___ftpack@arg+2,f
 13364  09DD  0CA1               	rrf	___ftpack@arg+1,f
 13365  09DE  0CA0               	rrf	___ftpack@arg,f
 13366  09DF  0B89               	decfsz	9,f
 13367  09E0  29DC               	goto	u3575
 13368  09E1                     l2786:	
 13369  09E1  30FF               	movlw	255
 13370  09E2  0522               	andwf	___ftpack@arg+2,w
 13371  09E3  1903               	btfsc	3,2
 13372  09E4  29EE               	goto	l5246
 13373  09E5  29CD               	goto	l5238
 13374  09E6                     l5244:	
 13375  09E6  3001               	movlw	1
 13376  09E7  02A3               	subwf	___ftpack@exp,f
 13377  09E8  3001               	movlw	1
 13378  09E9                     u3595:	
 13379  09E9  35A0               	lslf	___ftpack@arg,f
 13380  09EA  0DA1               	rlf	___ftpack@arg+1,f
 13381  09EB  0DA2               	rlf	___ftpack@arg+2,f
 13382  09EC  0B89               	decfsz	9,f
 13383  09ED  29E9               	goto	u3595
 13384  09EE                     l5246:	
 13385  09EE  1FA1               	btfss	___ftpack@arg+1,7
 13386  09EF  29E6               	goto	l5244
 13387  09F0  1823               	btfsc	___ftpack@exp,0
 13388  09F1  29F8               	goto	l2792
 13389  09F2  30FF               	movlw	255
 13390  09F3  05A0               	andwf	___ftpack@arg,f
 13391  09F4  307F               	movlw	127
 13392  09F5  05A1               	andwf	___ftpack@arg+1,f
 13393  09F6  30FF               	movlw	255
 13394  09F7  05A2               	andwf	___ftpack@arg+2,f
 13395  09F8                     l2792:	
 13396  09F8  1003               	clrc
 13397  09F9  0CA3               	rrf	___ftpack@exp,f
 13398  09FA  0823               	movf	___ftpack@exp,w
 13399  09FB  00A5               	movwf	??___ftpack
 13400  09FC  01A6               	clrf	??___ftpack+1
 13401  09FD  01A7               	clrf	??___ftpack+2
 13402  09FE  3010               	movlw	16
 13403  09FF                     u3625:	
 13404  09FF  35A5               	lslf	??___ftpack,f
 13405  0A00  0DA6               	rlf	??___ftpack+1,f
 13406  0A01  0DA7               	rlf	??___ftpack+2,f
 13407  0A02  0B89               	decfsz	9,f
 13408  0A03  29FF               	goto	u3625
 13409  0A04  0825               	movf	??___ftpack,w
 13410  0A05  04A0               	iorwf	___ftpack@arg,f
 13411  0A06  0826               	movf	??___ftpack+1,w
 13412  0A07  04A1               	iorwf	___ftpack@arg+1,f
 13413  0A08  0827               	movf	??___ftpack+2,w
 13414  0A09  04A2               	iorwf	___ftpack@arg+2,f
 13415  0A0A  0824               	movf	___ftpack@sign,w
 13416  0A0B  1903               	btfsc	3,2
 13417  0A0C  0008               	return
 13418  0A0D  17A2               	bsf	___ftpack@arg+2,7
 13419  0A0E  0008               	return
 13420  0A0F                     __end_of___ftpack:	
 13421                           
 13422                           	psect	text82
 13423  10F1                     __ptext82:	
 13424 ;; *************** function _setRFSW_Status *****************
 13425 ;; Defined at:
 13426 ;;		line 434 in file "../src/RF_Control_B1.c"
 13427 ;; Parameters:    Size  Location     Type
 13428 ;;  sw              1    wreg     unsigned char 
 13429 ;;  command         1    2[BANK0 ] unsigned char 
 13430 ;; Auto vars:     Size  Location     Type
 13431 ;;  sw              1    3[BANK0 ] unsigned char 
 13432 ;; Return value:  Size  Location     Type
 13433 ;;		None               void
 13434 ;; Registers used:
 13435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13436 ;; Tracked objects:
 13437 ;;		On entry : 0/0
 13438 ;;		On exit  : 0/0
 13439 ;;		Unchanged: 0/0
 13440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13441 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;Total ram usage:        2 bytes
 13446 ;; Hardware stack levels used:    1
 13447 ;; Hardware stack levels required when called:    6
 13448 ;; This function calls:
 13449 ;;		_RfSWPointSelect
 13450 ;; This function is called by:
 13451 ;;		_DlyOff_Main
 13452 ;;		_setControl_Lights_Table
 13453 ;;		_Sw_DimmerOnFunc
 13454 ;;		_Sw_DimmerAdjFunc
 13455 ;;		_setDimmerLights_ERROR
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           
 13460                           ;psect for function _setRFSW_Status
 13461  10F1                     _setRFSW_Status:	
 13462                           
 13463                           ;incstack = 0
 13464                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13465                           ;setRFSW_Status@sw stored from wreg
 13466  10F1  0020               	movlb	0	; select bank0
 13467  10F2  00A3               	movwf	setRFSW_Status@sw
 13468                           
 13469                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 13470  10F3  0823               	movf	setRFSW_Status@sw,w
 13471  10F4  3192  228D         	fcall	_RfSWPointSelect
 13472                           
 13473                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 13474  10F6  0021               	movlb	1	; select bank1
 13475  10F7  0859               	movf	_RFSW^(0+128),w
 13476  10F8  0086               	movwf	6
 13477  10F9  0187               	clrf	7
 13478  10FA  0020               	movlb	0	; select bank0
 13479  10FB  0822               	movf	setRFSW_Status@command,w
 13480  10FC  1001               	bcf	1,0
 13481  10FD  1D03               	skipz
 13482  10FE  1401               	bsf	1,0
 13483  10FF  0008               	return
 13484  1100                     __end_of_setRFSW_Status:	
 13485                           
 13486                           	psect	text83
 13487  128D                     __ptext83:	
 13488 ;; *************** function _RfSWPointSelect *****************
 13489 ;; Defined at:
 13490 ;;		line 369 in file "../src/RF_Control_B1.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;  sw              1    wreg     unsigned char 
 13493 ;; Auto vars:     Size  Location     Type
 13494 ;;  sw              1    1[BANK0 ] unsigned char 
 13495 ;; Return value:  Size  Location     Type
 13496 ;;		None               void
 13497 ;; Registers used:
 13498 ;;		wreg
 13499 ;; Tracked objects:
 13500 ;;		On entry : 0/0
 13501 ;;		On exit  : 0/0
 13502 ;;		Unchanged: 0/0
 13503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;Total ram usage:        2 bytes
 13509 ;; Hardware stack levels used:    1
 13510 ;; Hardware stack levels required when called:    5
 13511 ;; This function calls:
 13512 ;;		Nothing
 13513 ;; This function is called by:
 13514 ;;		_setRFSW_Control
 13515 ;;		_setRFSW_AdjControl
 13516 ;;		_setRFSW_Status
 13517 ;; This function uses a non-reentrant model
 13518 ;;
 13519                           
 13520                           
 13521                           ;psect for function _RfSWPointSelect
 13522  128D                     _RfSWPointSelect:	
 13523                           
 13524                           ;incstack = 0
 13525                           ; Regs used in _RfSWPointSelect: [wreg]
 13526                           ;RfSWPointSelect@sw stored from wreg
 13527  128D  0020               	movlb	0	; select bank0
 13528  128E  00A1               	movwf	RfSWPointSelect@sw
 13529                           
 13530                           ;RF_Control_B1.c: 371: if (sw == 1) {
 13531  128F  0821               	movf	RfSWPointSelect@sw,w
 13532  1290  3A01               	xorlw	1
 13533  1291  1D03               	skipz
 13534  1292  2A98               	goto	l1951
 13535                           
 13536                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 13537  1293  30EB               	movlw	_RFSW1& (0+255)
 13538  1294  00A0               	movwf	??_RfSWPointSelect
 13539  1295  0820               	movf	??_RfSWPointSelect,w
 13540  1296  0021               	movlb	1	; select bank1
 13541  1297  00D9               	movwf	_RFSW^(0+128)
 13542  1298                     l1951:	
 13543                           
 13544                           ;RF_Control_B1.c: 373: }
 13545                           ;RF_Control_B1.c: 376: if (sw == 2) {
 13546  1298  0020               	movlb	0	; select bank0
 13547  1299  0821               	movf	RfSWPointSelect@sw,w
 13548  129A  3A02               	xorlw	2
 13549  129B  1D03               	skipz
 13550  129C  0008               	return
 13551                           
 13552                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 13553  129D  30EC               	movlw	_RFSW2& (0+255)
 13554  129E  00A0               	movwf	??_RfSWPointSelect
 13555  129F  0820               	movf	??_RfSWPointSelect,w
 13556  12A0  0021               	movlb	1	; select bank1
 13557  12A1  00D9               	movwf	_RFSW^(0+128)
 13558  12A2  0008               	return
 13559  12A3                     __end_of_RfSWPointSelect:	
 13560                           
 13561                           	psect	text84
 13562  113D                     __ptext84:	
 13563 ;; *************** function _setDimmerLights_Trigger *****************
 13564 ;; Defined at:
 13565 ;;		line 714 in file "../src/Dimmer_B1.c"
 13566 ;; Parameters:    Size  Location     Type
 13567 ;;  lights          1    wreg     unsigned char 
 13568 ;;  command         1    2[BANK0 ] unsigned char 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  lights          1    3[BANK0 ] unsigned char 
 13571 ;; Return value:  Size  Location     Type
 13572 ;;		None               void
 13573 ;; Registers used:
 13574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13580 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13584 ;;Total ram usage:        2 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    6
 13587 ;; This function calls:
 13588 ;;		_DimmerLightsPointSelect
 13589 ;; This function is called by:
 13590 ;;		_DlyOff_Main
 13591 ;;		_setRFSW_Control
 13592 ;;		_Sw_DimmerOnFunc
 13593 ;;		_Sw_DimmerOffFunc
 13594 ;; This function uses a non-reentrant model
 13595 ;;
 13596                           
 13597                           
 13598                           ;psect for function _setDimmerLights_Trigger
 13599  113D                     _setDimmerLights_Trigger:	
 13600                           
 13601                           ;incstack = 0
 13602                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13603                           ;setDimmerLights_Trigger@lights stored from wreg
 13604  113D  0020               	movlb	0	; select bank0
 13605  113E  00A3               	movwf	setDimmerLights_Trigger@lights
 13606                           
 13607                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 13608  113F  0823               	movf	setDimmerLights_Trigger@lights,w
 13609  1140  3191  21D7         	fcall	_DimmerLightsPointSelect
 13610                           
 13611                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 13612  1142  0879               	movf	_DimmerLights,w
 13613  1143  3E08               	addlw	8
 13614  1144  0086               	movwf	6
 13615  1145  3001               	movlw	1	; select bank2/3
 13616  1146  0087               	movwf	7
 13617  1147  0020               	movlb	0	; select bank0
 13618  1148  0822               	movf	setDimmerLights_Trigger@command,w
 13619  1149  1101               	bcf	1,2
 13620  114A  1D03               	skipz
 13621  114B  1501               	bsf	1,2
 13622  114C  0008               	return
 13623  114D                     __end_of_setDimmerLights_Trigger:	
 13624                           
 13625                           	psect	text85
 13626  112D                     __ptext85:	
 13627 ;; *************** function _setDimmerLights_Switch *****************
 13628 ;; Defined at:
 13629 ;;		line 702 in file "../src/Dimmer_B1.c"
 13630 ;; Parameters:    Size  Location     Type
 13631 ;;  lights          1    wreg     unsigned char 
 13632 ;;  command         1    2[BANK0 ] unsigned char 
 13633 ;; Auto vars:     Size  Location     Type
 13634 ;;  lights          1    3[BANK0 ] unsigned char 
 13635 ;; Return value:  Size  Location     Type
 13636 ;;		None               void
 13637 ;; Registers used:
 13638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13639 ;; Tracked objects:
 13640 ;;		On entry : 0/0
 13641 ;;		On exit  : 0/0
 13642 ;;		Unchanged: 0/0
 13643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13644 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;Total ram usage:        2 bytes
 13649 ;; Hardware stack levels used:    1
 13650 ;; Hardware stack levels required when called:    6
 13651 ;; This function calls:
 13652 ;;		_DimmerLightsPointSelect
 13653 ;; This function is called by:
 13654 ;;		_DlyOff_Main
 13655 ;;		_setRFSW_Control
 13656 ;;		_Sw_DimmerOnFunc
 13657 ;;		_Sw_DimmerOffFunc
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           
 13662                           ;psect for function _setDimmerLights_Switch
 13663  112D                     _setDimmerLights_Switch:	
 13664                           
 13665                           ;incstack = 0
 13666                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13667                           ;setDimmerLights_Switch@lights stored from wreg
 13668  112D  0020               	movlb	0	; select bank0
 13669  112E  00A3               	movwf	setDimmerLights_Switch@lights
 13670                           
 13671                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 13672  112F  0823               	movf	setDimmerLights_Switch@lights,w
 13673  1130  3191  21D7         	fcall	_DimmerLightsPointSelect
 13674                           
 13675                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 13676  1132  0879               	movf	_DimmerLights,w
 13677  1133  3E08               	addlw	8
 13678  1134  0086               	movwf	6
 13679  1135  3001               	movlw	1	; select bank2/3
 13680  1136  0087               	movwf	7
 13681  1137  0020               	movlb	0	; select bank0
 13682  1138  0822               	movf	setDimmerLights_Switch@command,w
 13683  1139  1081               	bcf	1,1
 13684  113A  1D03               	skipz
 13685  113B  1481               	bsf	1,1
 13686  113C  0008               	return
 13687  113D                     __end_of_setDimmerLights_Switch:	
 13688                           
 13689                           	psect	text86
 13690  11D7                     __ptext86:	
 13691 ;; *************** function _DimmerLightsPointSelect *****************
 13692 ;; Defined at:
 13693 ;;		line 324 in file "../src/Dimmer_B1.c"
 13694 ;; Parameters:    Size  Location     Type
 13695 ;;  lights          1    wreg     unsigned char 
 13696 ;; Auto vars:     Size  Location     Type
 13697 ;;  lights          1    1[BANK0 ] unsigned char 
 13698 ;; Return value:  Size  Location     Type
 13699 ;;		None               void
 13700 ;; Registers used:
 13701 ;;		wreg
 13702 ;; Tracked objects:
 13703 ;;		On entry : 0/0
 13704 ;;		On exit  : 0/0
 13705 ;;		Unchanged: 0/0
 13706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13711 ;;Total ram usage:        2 bytes
 13712 ;; Hardware stack levels used:    1
 13713 ;; Hardware stack levels required when called:    5
 13714 ;; This function calls:
 13715 ;;		Nothing
 13716 ;; This function is called by:
 13717 ;;		_setDimmerLights_Initialization
 13718 ;;		_setDimmerLights_Main
 13719 ;;		_setDimmerLights
 13720 ;;		_setDimmerLights_Adj
 13721 ;;		_setDimmerLights_AdjRF
 13722 ;;		_setDimmerLights_Switch
 13723 ;;		_setDimmerLights_AdjGo
 13724 ;;		_setDimmerLights_Trigger
 13725 ;;		_setDimmerLights_TriggerAdj
 13726 ;;		_setDimmerLights_ERROR
 13727 ;;		_setDimmerLights_TriggerERROR
 13728 ;;		_setDimmerLights_GO
 13729 ;;		_setDimmerLights_MaxmumValue
 13730 ;;		_setDimmerLights_Clear
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function _DimmerLightsPointSelect
 13736  11D7                     _DimmerLightsPointSelect:	
 13737                           
 13738                           ;incstack = 0
 13739                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13740                           ;DimmerLightsPointSelect@lights stored from wreg
 13741  11D7  0020               	movlb	0	; select bank0
 13742  11D8  00A1               	movwf	DimmerLightsPointSelect@lights
 13743                           
 13744                           ;Dimmer_B1.c: 326: if (lights == 1) {
 13745  11D9  0821               	movf	DimmerLightsPointSelect@lights,w
 13746  11DA  3A01               	xorlw	1
 13747  11DB  1D03               	skipz
 13748  11DC  29E1               	goto	l788
 13749                           
 13750                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 13751  11DD  3035               	movlw	_DimmerLights1& (0+255)
 13752  11DE  00A0               	movwf	??_DimmerLightsPointSelect
 13753  11DF  0820               	movf	??_DimmerLightsPointSelect,w
 13754  11E0  00F9               	movwf	_DimmerLights
 13755  11E1                     l788:	
 13756                           
 13757                           ;Dimmer_B1.c: 328: }
 13758                           ;Dimmer_B1.c: 331: if (lights == 2) {
 13759  11E1  0821               	movf	DimmerLightsPointSelect@lights,w
 13760  11E2  3A02               	xorlw	2
 13761  11E3  1D03               	skipz
 13762  11E4  0008               	return
 13763                           
 13764                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 13765  11E5  3044               	movlw	_DimmerLights2& (0+255)
 13766  11E6  00A0               	movwf	??_DimmerLightsPointSelect
 13767  11E7  0820               	movf	??_DimmerLightsPointSelect,w
 13768  11E8  00F9               	movwf	_DimmerLights
 13769  11E9  0008               	return
 13770  11EA                     __end_of_DimmerLightsPointSelect:	
 13771                           
 13772                           	psect	text87
 13773  07A7                     __ptext87:	
 13774 ;; *************** function _setBuz *****************
 13775 ;; Defined at:
 13776 ;;		line 22 in file "../src/Buzzer_B1.c"
 13777 ;; Parameters:    Size  Location     Type
 13778 ;;  count           1    wreg     unsigned char 
 13779 ;;  time            2    9[BANK0 ] int 
 13780 ;; Auto vars:     Size  Location     Type
 13781 ;;  count           1   12[BANK0 ] unsigned char 
 13782 ;; Return value:  Size  Location     Type
 13783 ;;		None               void
 13784 ;; Registers used:
 13785 ;;		wreg, status,2, status,0, pclath, cstack
 13786 ;; Tracked objects:
 13787 ;;		On entry : 0/0
 13788 ;;		On exit  : 0/0
 13789 ;;		Unchanged: 0/0
 13790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13791 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;Total ram usage:        4 bytes
 13796 ;; Hardware stack levels used:    1
 13797 ;; Hardware stack levels required when called:    6
 13798 ;; This function calls:
 13799 ;;		___awdiv
 13800 ;; This function is called by:
 13801 ;;		_DlyOff_Main
 13802 ;;		_setDimmerLights_Main
 13803 ;;		_setLog_Code
 13804 ;;		_setControl_Lights_Table
 13805 ;;		_setRFSW_Control
 13806 ;;		_setSw_Main
 13807 ;;		_Sw_DimmerOnFunc
 13808 ;;		_my_MainTime
 13809 ;;		_DimmerLights_Exceptions
 13810 ;; This function uses a non-reentrant model
 13811 ;;
 13812                           
 13813                           
 13814                           ;psect for function _setBuz
 13815  07A7                     _setBuz:	
 13816                           
 13817                           ;incstack = 0
 13818                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 13819                           ;setBuz@count stored from wreg
 13820  07A7  0020               	movlb	0	; select bank0
 13821  07A8  00AC               	movwf	setBuz@count
 13822                           
 13823                           ;Buzzer_B1.c: 23: time /= 10;
 13824  07A9  300A               	movlw	10
 13825  07AA  00A0               	movwf	___awdiv@divisor
 13826  07AB  3000               	movlw	0
 13827  07AC  00A1               	movwf	___awdiv@divisor+1
 13828  07AD  082A               	movf	setBuz@time+1,w
 13829  07AE  01A3               	clrf	___awdiv@dividend+1
 13830  07AF  07A3               	addwf	___awdiv@dividend+1,f
 13831  07B0  0829               	movf	setBuz@time,w
 13832  07B1  01A2               	clrf	___awdiv@dividend
 13833  07B2  07A2               	addwf	___awdiv@dividend,f
 13834  07B3  3188  204A  3187   	fcall	___awdiv
 13835  07B6  0020               	movlb	0	; select bank0
 13836  07B7  0821               	movf	?___awdiv+1,w
 13837  07B8  01AA               	clrf	setBuz@time+1
 13838  07B9  07AA               	addwf	setBuz@time+1,f
 13839  07BA  0820               	movf	?___awdiv,w
 13840  07BB  01A9               	clrf	setBuz@time
 13841  07BC  07A9               	addwf	setBuz@time,f
 13842                           
 13843                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 13844  07BD  0021               	movlb	1	; select bank1
 13845  07BE  1C33               	btfss	_Buz1^(0+128),0
 13846  07BF  0008               	return
 13847                           
 13848                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 13849  07C0  18B3               	btfsc	_Buz1^(0+128),1
 13850  07C1  2FD8               	goto	l98
 13851                           
 13852                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 13853  07C2  14B3               	bsf	_Buz1^(0+128),1
 13854                           
 13855                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 13856  07C3  01B4               	clrf	(_Buz1^(0+128)+1)
 13857  07C4  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 13858                           
 13859                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 13860  07C5  0020               	movlb	0	; select bank0
 13861  07C6  082C               	movf	setBuz@count,w
 13862  07C7  00AB               	movwf	??_setBuz
 13863  07C8  082B               	movf	??_setBuz,w
 13864  07C9  0021               	movlb	1	; select bank1
 13865  07CA  00B6               	movwf	(_Buz1^(0+128)+3)
 13866                           
 13867                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 13868  07CB  0020               	movlb	0	; select bank0
 13869  07CC  082A               	movf	setBuz@time+1,w
 13870  07CD  0021               	movlb	1	; select bank1
 13871  07CE  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 13872  07CF  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 13873  07D0  0020               	movlb	0	; select bank0
 13874  07D1  0829               	movf	setBuz@time,w
 13875  07D2  0021               	movlb	1	; select bank1
 13876  07D3  01B9               	clrf	(_Buz1^(0+128)+6)
 13877  07D4  07B9               	addwf	(_Buz1^(0+128)+6),f
 13878                           
 13879                           ;Buzzer_B1.c: 30: RB3 = 1;
 13880  07D5  0020               	movlb	0	; select bank0
 13881  07D6  158D               	bsf	13,3	;volatile
 13882                           
 13883                           ;Buzzer_B1.c: 31: } else {
 13884  07D7  0008               	return
 13885  07D8                     l98:	
 13886                           
 13887                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 13888  07D8  19B3               	btfsc	_Buz1^(0+128),3
 13889  07D9  2FEC               	goto	l100
 13890                           
 13891                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 13892  07DA  15B3               	bsf	_Buz1^(0+128),3
 13893                           
 13894                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 13895  07DB  0020               	movlb	0	; select bank0
 13896  07DC  082C               	movf	setBuz@count,w
 13897  07DD  00AB               	movwf	??_setBuz
 13898  07DE  082B               	movf	??_setBuz,w
 13899  07DF  0021               	movlb	1	; select bank1
 13900  07E0  00B7               	movwf	(_Buz1^(0+128)+4)
 13901                           
 13902                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 13903  07E1  0020               	movlb	0	; select bank0
 13904  07E2  082A               	movf	setBuz@time+1,w
 13905  07E3  0021               	movlb	1	; select bank1
 13906  07E4  01BC               	clrf	((_Buz1+1)^(0+128)+8)
 13907  07E5  07BC               	addwf	((_Buz1+1)^(0+128)+8),f
 13908  07E6  0020               	movlb	0	; select bank0
 13909  07E7  0829               	movf	setBuz@time,w
 13910  07E8  0021               	movlb	1	; select bank1
 13911  07E9  01BB               	clrf	(_Buz1^(0+128)+8)
 13912  07EA  07BB               	addwf	(_Buz1^(0+128)+8),f
 13913                           
 13914                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 13915  07EB  0008               	return
 13916  07EC                     l100:	
 13917  07EC  1A33               	btfsc	_Buz1^(0+128),4
 13918  07ED  0008               	return
 13919                           
 13920                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 13921  07EE  1633               	bsf	_Buz1^(0+128),4
 13922                           
 13923                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 13924  07EF  0020               	movlb	0	; select bank0
 13925  07F0  082C               	movf	setBuz@count,w
 13926  07F1  00AB               	movwf	??_setBuz
 13927  07F2  082B               	movf	??_setBuz,w
 13928  07F3  0021               	movlb	1	; select bank1
 13929  07F4  00B8               	movwf	(_Buz1^(0+128)+5)
 13930                           
 13931                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 13932  07F5  0020               	movlb	0	; select bank0
 13933  07F6  082A               	movf	setBuz@time+1,w
 13934  07F7  0021               	movlb	1	; select bank1
 13935  07F8  01BE               	clrf	((_Buz1+1)^(0+128)+10)
 13936  07F9  07BE               	addwf	((_Buz1+1)^(0+128)+10),f
 13937  07FA  0020               	movlb	0	; select bank0
 13938  07FB  0829               	movf	setBuz@time,w
 13939  07FC  0021               	movlb	1	; select bank1
 13940  07FD  01BD               	clrf	(_Buz1^(0+128)+10)
 13941  07FE  07BD               	addwf	(_Buz1^(0+128)+10),f
 13942  07FF  0008               	return
 13943  0800                     __end_of_setBuz:	
 13944                           
 13945                           	psect	text88
 13946  084A                     __ptext88:	
 13947 ;; *************** function ___awdiv *****************
 13948 ;; Defined at:
 13949 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  divisor         2    0[BANK0 ] int 
 13952 ;;  dividend        2    2[BANK0 ] int 
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;  quotient        2    7[BANK0 ] int 
 13955 ;;  sign            1    6[BANK0 ] unsigned char 
 13956 ;;  counter         1    5[BANK0 ] unsigned char 
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  2    0[BANK0 ] int 
 13959 ;; Registers used:
 13960 ;;		wreg, status,2, status,0
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/0
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;Total ram usage:        9 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; Hardware stack levels required when called:    5
 13973 ;; This function calls:
 13974 ;;		Nothing
 13975 ;; This function is called by:
 13976 ;;		_setBuz
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           
 13981                           ;psect for function ___awdiv
 13982  084A                     ___awdiv:	
 13983                           
 13984                           ;incstack = 0
 13985                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13986  084A  0020               	movlb	0	; select bank0
 13987  084B  01A6               	clrf	___awdiv@sign
 13988  084C  1FA1               	btfss	___awdiv@divisor+1,7
 13989  084D  2855               	goto	l5574
 13990  084E  09A0               	comf	___awdiv@divisor,f
 13991  084F  09A1               	comf	___awdiv@divisor+1,f
 13992  0850  0AA0               	incf	___awdiv@divisor,f
 13993  0851  1903               	skipnz
 13994  0852  0AA1               	incf	___awdiv@divisor+1,f
 13995  0853  01A6               	clrf	___awdiv@sign
 13996  0854  0AA6               	incf	___awdiv@sign,f
 13997  0855                     l5574:	
 13998  0855  1FA3               	btfss	___awdiv@dividend+1,7
 13999  0856  2860               	goto	l5580
 14000  0857  09A2               	comf	___awdiv@dividend,f
 14001  0858  09A3               	comf	___awdiv@dividend+1,f
 14002  0859  0AA2               	incf	___awdiv@dividend,f
 14003  085A  1903               	skipnz
 14004  085B  0AA3               	incf	___awdiv@dividend+1,f
 14005  085C  3001               	movlw	1
 14006  085D  00A4               	movwf	??___awdiv
 14007  085E  0824               	movf	??___awdiv,w
 14008  085F  06A6               	xorwf	___awdiv@sign,f
 14009  0860                     l5580:	
 14010  0860  01A7               	clrf	___awdiv@quotient
 14011  0861  01A8               	clrf	___awdiv@quotient+1
 14012  0862  0821               	movf	___awdiv@divisor+1,w
 14013  0863  0420               	iorwf	___awdiv@divisor,w
 14014  0864  1903               	skipnz
 14015  0865  288F               	goto	l5602
 14016  0866  01A5               	clrf	___awdiv@counter
 14017  0867  0AA5               	incf	___awdiv@counter,f
 14018  0868                     l5590:	
 14019  0868  1BA1               	btfsc	___awdiv@divisor+1,7
 14020  0869  2874               	goto	l5592
 14021  086A  3001               	movlw	1
 14022  086B                     u4345:	
 14023  086B  35A0               	lslf	___awdiv@divisor,f
 14024  086C  0DA1               	rlf	___awdiv@divisor+1,f
 14025  086D  0B89               	decfsz	9,f
 14026  086E  286B               	goto	u4345
 14027  086F  3001               	movlw	1
 14028  0870  00A4               	movwf	??___awdiv
 14029  0871  0824               	movf	??___awdiv,w
 14030  0872  07A5               	addwf	___awdiv@counter,f
 14031  0873  2868               	goto	l5590
 14032  0874                     l5592:	
 14033  0874  3001               	movlw	1
 14034  0875                     u4365:	
 14035  0875  35A7               	lslf	___awdiv@quotient,f
 14036  0876  0DA8               	rlf	___awdiv@quotient+1,f
 14037  0877  0B89               	decfsz	9,f
 14038  0878  2875               	goto	u4365
 14039  0879  0821               	movf	___awdiv@divisor+1,w
 14040  087A  0223               	subwf	___awdiv@dividend+1,w
 14041  087B  1D03               	skipz
 14042  087C  287F               	goto	u4375
 14043  087D  0820               	movf	___awdiv@divisor,w
 14044  087E  0222               	subwf	___awdiv@dividend,w
 14045  087F                     u4375:	
 14046  087F  1C03               	skipc
 14047  0880  2886               	goto	l5598
 14048  0881  0820               	movf	___awdiv@divisor,w
 14049  0882  02A2               	subwf	___awdiv@dividend,f
 14050  0883  0821               	movf	___awdiv@divisor+1,w
 14051  0884  3BA3               	subwfb	___awdiv@dividend+1,f
 14052  0885  1427               	bsf	___awdiv@quotient,0
 14053  0886                     l5598:	
 14054  0886  3001               	movlw	1
 14055  0887                     u4385:	
 14056  0887  36A1               	lsrf	___awdiv@divisor+1,f
 14057  0888  0CA0               	rrf	___awdiv@divisor,f
 14058  0889  0B89               	decfsz	9,f
 14059  088A  2887               	goto	u4385
 14060  088B  3001               	movlw	1
 14061  088C  02A5               	subwf	___awdiv@counter,f
 14062  088D  1D03               	btfss	3,2
 14063  088E  2874               	goto	l5592
 14064  088F                     l5602:	
 14065  088F  0826               	movf	___awdiv@sign,w
 14066  0890  1903               	btfsc	3,2
 14067  0891  2897               	goto	l5606
 14068  0892  09A7               	comf	___awdiv@quotient,f
 14069  0893  09A8               	comf	___awdiv@quotient+1,f
 14070  0894  0AA7               	incf	___awdiv@quotient,f
 14071  0895  1903               	skipnz
 14072  0896  0AA8               	incf	___awdiv@quotient+1,f
 14073  0897                     l5606:	
 14074  0897  0828               	movf	___awdiv@quotient+1,w
 14075  0898  01A1               	clrf	?___awdiv+1
 14076  0899  07A1               	addwf	?___awdiv+1,f
 14077  089A  0827               	movf	___awdiv@quotient,w
 14078  089B  01A0               	clrf	?___awdiv
 14079  089C  07A0               	addwf	?___awdiv,f
 14080  089D  0008               	return
 14081  089E                     __end_of___awdiv:	
 14082                           
 14083                           	psect	text89
 14084  1FA6                     __ptext89:	
 14085 ;; *************** function _DelayOff_Initialization *****************
 14086 ;; Defined at:
 14087 ;;		line 26 in file "../src/DelayOff_B1.c"
 14088 ;; Parameters:    Size  Location     Type
 14089 ;;		None
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;		None
 14092 ;; Return value:  Size  Location     Type
 14093 ;;		None               void
 14094 ;; Registers used:
 14095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;Total ram usage:        0 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    7
 14108 ;; This function calls:
 14109 ;;		_DlyOff_Initialization
 14110 ;; This function is called by:
 14111 ;;		_main
 14112 ;; This function uses a non-reentrant model
 14113 ;;
 14114                           
 14115                           
 14116                           ;psect for function _DelayOff_Initialization
 14117  1FA6                     _DelayOff_Initialization:	
 14118                           
 14119                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14120                           
 14121                           ;incstack = 0
 14122                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14123  1FA6  3001               	movlw	1
 14124  1FA7  319F  27E0  319F   	fcall	_DlyOff_Initialization
 14125                           
 14126                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14127  1FAA  3002               	movlw	2
 14128  1FAB  319F  27E0         	fcall	_DlyOff_Initialization
 14129  1FAD  0008               	return
 14130  1FAE                     __end_of_DelayOff_Initialization:	
 14131                           
 14132                           	psect	text90
 14133  1FE0                     __ptext90:	
 14134 ;; *************** function _DlyOff_Initialization *****************
 14135 ;; Defined at:
 14136 ;;		line 56 in file "../src/DelayOff_B1.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;  sw              1    wreg     unsigned char 
 14139 ;; Auto vars:     Size  Location     Type
 14140 ;;  sw              1    2[BANK0 ] unsigned char 
 14141 ;; Return value:  Size  Location     Type
 14142 ;;		None               void
 14143 ;; Registers used:
 14144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14145 ;; Tracked objects:
 14146 ;;		On entry : 0/0
 14147 ;;		On exit  : 0/0
 14148 ;;		Unchanged: 0/0
 14149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;Total ram usage:        1 bytes
 14155 ;; Hardware stack levels used:    1
 14156 ;; Hardware stack levels required when called:    6
 14157 ;; This function calls:
 14158 ;;		_DelayOffPointSelect
 14159 ;; This function is called by:
 14160 ;;		_DelayOff_Initialization
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           
 14165                           ;psect for function _DlyOff_Initialization
 14166  1FE0                     _DlyOff_Initialization:	
 14167                           
 14168                           ;incstack = 0
 14169                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14170                           ;DlyOff_Initialization@sw stored from wreg
 14171  1FE0  0020               	movlb	0	; select bank0
 14172  1FE1  00A2               	movwf	DlyOff_Initialization@sw
 14173                           
 14174                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14175  1FE2  0822               	movf	DlyOff_Initialization@sw,w
 14176  1FE3  3192  2212         	fcall	_DelayOffPointSelect
 14177                           
 14178                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14179  1FE5  0878               	movf	_DelayOff,w
 14180  1FE6  0086               	movwf	6
 14181  1FE7  0187               	clrf	7
 14182  1FE8  1401               	bsf	1,0
 14183  1FE9  0008               	return
 14184  1FEA                     __end_of_DlyOff_Initialization:	
 14185                           
 14186                           	psect	text91
 14187  1212                     __ptext91:	
 14188 ;; *************** function _DelayOffPointSelect *****************
 14189 ;; Defined at:
 14190 ;;		line 7 in file "../src/DelayOff_B1.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;  sw              1    wreg     unsigned char 
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;  sw              1    1[BANK0 ] unsigned char 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;		None               void
 14197 ;; Registers used:
 14198 ;;		wreg
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:        2 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    5
 14211 ;; This function calls:
 14212 ;;		Nothing
 14213 ;; This function is called by:
 14214 ;;		_DlyOff_Initialization
 14215 ;;		_DlyOff_Main
 14216 ;;		_setDelayOff_GO
 14217 ;; This function uses a non-reentrant model
 14218 ;;
 14219                           
 14220                           
 14221                           ;psect for function _DelayOffPointSelect
 14222  1212                     _DelayOffPointSelect:	
 14223                           
 14224                           ;incstack = 0
 14225                           ; Regs used in _DelayOffPointSelect: [wreg]
 14226                           ;DelayOffPointSelect@sw stored from wreg
 14227  1212  0020               	movlb	0	; select bank0
 14228  1213  00A1               	movwf	DelayOffPointSelect@sw
 14229                           
 14230                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14231  1214  0821               	movf	DelayOffPointSelect@sw,w
 14232  1215  3A01               	xorlw	1
 14233  1216  1D03               	skipz
 14234  1217  2A1D               	goto	l5510
 14235                           
 14236                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14237  1218  30E7               	movlw	_DlySw1& (0+255)
 14238  1219  00A0               	movwf	??_DelayOffPointSelect
 14239  121A  0820               	movf	??_DelayOffPointSelect,w
 14240  121B  00F8               	movwf	_DelayOff
 14241                           
 14242                           ;DelayOff_B1.c: 11: }
 14243  121C  0008               	return
 14244  121D                     l5510:	
 14245                           
 14246                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14247  121D  0821               	movf	DelayOffPointSelect@sw,w
 14248  121E  3A02               	xorlw	2
 14249  121F  1D03               	skipz
 14250  1220  0008               	return
 14251                           
 14252                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14253  1221  30E9               	movlw	_DlySw2& (0+255)
 14254  1222  00A0               	movwf	??_DelayOffPointSelect
 14255  1223  0820               	movf	??_DelayOffPointSelect,w
 14256  1224  00F8               	movwf	_DelayOff
 14257  1225  0008               	return
 14258  1226                     __end_of_DelayOffPointSelect:	
 14259                           
 14260                           	psect	text92
 14261  1263                     __ptext92:	
 14262 ;; *************** function _CC2500_PowerOnInitial *****************
 14263 ;; Defined at:
 14264 ;;		line 122 in file "../src/CC2500_B1.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;		None
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;		None
 14269 ;; Return value:  Size  Location     Type
 14270 ;;		None               void
 14271 ;; Registers used:
 14272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;Total ram usage:        0 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    8
 14285 ;; This function calls:
 14286 ;;		_CC2500_ClearRXFIFO
 14287 ;;		_CC2500_ClearTXFIFO
 14288 ;;		_CC2500_FrequencyCabr
 14289 ;;		_CC2500_InitPATable
 14290 ;;		_CC2500_InitSetREG
 14291 ;;		_CC2500_PowerRST
 14292 ;;		_CC2500_SIDLEMode
 14293 ;; This function is called by:
 14294 ;;		_main
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           
 14299                           ;psect for function _CC2500_PowerOnInitial
 14300  1263                     _CC2500_PowerOnInitial:	
 14301                           
 14302                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14303                           
 14304                           ;incstack = 0
 14305                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14306  1263  3196  26A0  3192   	fcall	_CC2500_PowerRST
 14307                           
 14308                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14309  1266  3194  24A5  3192   	fcall	_CC2500_InitSetREG
 14310                           
 14311                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14312  1269  3193  234F  3192   	fcall	_CC2500_InitPATable
 14313                           
 14314                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14315  126C  319F  2771  3192   	fcall	_CC2500_ClearTXFIFO
 14316                           
 14317                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14318  126F  319F  276D  3192   	fcall	_CC2500_ClearRXFIFO
 14319                           
 14320                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14321  1272  3190  2080  3192   	fcall	_CC2500_FrequencyCabr
 14322                           
 14323                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14324  1275  319F  2775         	fcall	_CC2500_SIDLEMode
 14325  1277  0008               	return
 14326  1278                     __end_of_CC2500_PowerOnInitial:	
 14327                           
 14328                           	psect	text93
 14329  1F75                     __ptext93:	
 14330 ;; *************** function _CC2500_SIDLEMode *****************
 14331 ;; Defined at:
 14332 ;;		line 212 in file "../src/CC2500_B1.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;		None
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;		None
 14337 ;; Return value:  Size  Location     Type
 14338 ;;		None               void
 14339 ;; Registers used:
 14340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14341 ;; Tracked objects:
 14342 ;;		On entry : 0/0
 14343 ;;		On exit  : 0/0
 14344 ;;		Unchanged: 0/0
 14345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;Total ram usage:        0 bytes
 14351 ;; Hardware stack levels used:    1
 14352 ;; Hardware stack levels required when called:    7
 14353 ;; This function calls:
 14354 ;;		_CC2500_WriteCommand
 14355 ;; This function is called by:
 14356 ;;		_CC2500_PowerOnInitial
 14357 ;; This function uses a non-reentrant model
 14358 ;;
 14359                           
 14360                           
 14361                           ;psect for function _CC2500_SIDLEMode
 14362  1F75                     _CC2500_SIDLEMode:	
 14363                           
 14364                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14365                           
 14366                           ;incstack = 0
 14367                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14368  1F75  3036               	movlw	54
 14369  1F76  3192  22E7         	fcall	_CC2500_WriteCommand
 14370  1F78  0008               	return
 14371  1F79                     __end_of_CC2500_SIDLEMode:	
 14372                           
 14373                           	psect	text94
 14374  16A0                     __ptext94:	
 14375 ;; *************** function _CC2500_PowerRST *****************
 14376 ;; Defined at:
 14377 ;;		line 135 in file "../src/CC2500_B1.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;		None
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;		None
 14382 ;; Return value:  Size  Location     Type
 14383 ;;		None               void
 14384 ;; Registers used:
 14385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14386 ;; Tracked objects:
 14387 ;;		On entry : 0/0
 14388 ;;		On exit  : 0/0
 14389 ;;		Unchanged: 0/0
 14390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;Total ram usage:        1 bytes
 14396 ;; Hardware stack levels used:    1
 14397 ;; Hardware stack levels required when called:    6
 14398 ;; This function calls:
 14399 ;;		_CC2500_WriteByte
 14400 ;;		_DelayTime_1us
 14401 ;;		_Timeout_Counter
 14402 ;;		_set_TimeoutCleared
 14403 ;; This function is called by:
 14404 ;;		_CC2500_PowerOnInitial
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           
 14409                           ;psect for function _CC2500_PowerRST
 14410  16A0                     _CC2500_PowerRST:	
 14411                           
 14412                           ;CC2500_B1.c: 136: RC1 = 0;
 14413                           
 14414                           ;incstack = 0
 14415                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14416  16A0  0020               	movlb	0	; select bank0
 14417  16A1  108E               	bcf	14,1	;volatile
 14418                           
 14419                           ;CC2500_B1.c: 137: RC0 = 0;
 14420  16A2  100E               	bcf	14,0	;volatile
 14421                           
 14422                           ;CC2500_B1.c: 138: RC4 = 1;
 14423  16A3  160E               	bsf	14,4	;volatile
 14424                           
 14425                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14426  16A4  300A               	movlw	10
 14427  16A5  00A0               	movwf	DelayTime_1us@count
 14428  16A6  3000               	movlw	0
 14429  16A7  00A1               	movwf	DelayTime_1us@count+1
 14430  16A8  3194  2457  3196   	fcall	_DelayTime_1us
 14431                           
 14432                           ;CC2500_B1.c: 140: RC4 = 0;
 14433  16AB  0020               	movlb	0	; select bank0
 14434  16AC  120E               	bcf	14,4	;volatile
 14435                           
 14436                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14437  16AD  300A               	movlw	10
 14438  16AE  00A0               	movwf	DelayTime_1us@count
 14439  16AF  3000               	movlw	0
 14440  16B0  00A1               	movwf	DelayTime_1us@count+1
 14441  16B1  3194  2457  3196   	fcall	_DelayTime_1us
 14442                           
 14443                           ;CC2500_B1.c: 142: RC4 = 1;
 14444  16B4  0020               	movlb	0	; select bank0
 14445  16B5  160E               	bsf	14,4	;volatile
 14446                           
 14447                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14448  16B6  3028               	movlw	40
 14449  16B7  00A0               	movwf	DelayTime_1us@count
 14450  16B8  3000               	movlw	0
 14451  16B9  00A1               	movwf	DelayTime_1us@count+1
 14452  16BA  3194  2457  3196   	fcall	_DelayTime_1us
 14453                           
 14454                           ;CC2500_B1.c: 144: RC4 = 0;
 14455  16BD  0020               	movlb	0	; select bank0
 14456  16BE  120E               	bcf	14,4	;volatile
 14457                           
 14458                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14459  16BF  3030               	movlw	48
 14460  16C0  00A6               	movwf	??_CC2500_PowerRST
 14461  16C1  0826               	movf	??_CC2500_PowerRST,w
 14462  16C2  00FB               	movwf	_SPI0Buffer
 14463                           
 14464                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14465  16C3  2EC7               	goto	l6436
 14466  16C4                     l6434:	
 14467                           
 14468                           ;CC2500_B1.c: 147: Timeout_Counter();
 14469  16C4  3192  224E  3196   	fcall	_Timeout_Counter
 14470  16C7                     l6436:	
 14471  16C7  0020               	movlb	0	; select bank0
 14472  16C8  1D0E               	btfss	14,2	;volatile
 14473  16C9  2ECD               	goto	l6440
 14474  16CA  0021               	movlb	1	; select bank1
 14475  16CB  1D30               	btfss	(_myMain^(0+128)+16),2
 14476  16CC  2EC4               	goto	l6434
 14477  16CD                     l6440:	
 14478                           
 14479                           ;CC2500_B1.c: 148: };
 14480                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14481  16CD  319F  2779  3196   	fcall	_set_TimeoutCleared
 14482                           
 14483                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14484  16D0  3191  21FE  3196   	fcall	_CC2500_WriteByte
 14485                           
 14486                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14487  16D3  2ED7               	goto	l6446
 14488  16D4                     l6444:	
 14489                           
 14490                           ;CC2500_B1.c: 152: Timeout_Counter();
 14491  16D4  3192  224E  3196   	fcall	_Timeout_Counter
 14492  16D7                     l6446:	
 14493  16D7  0020               	movlb	0	; select bank0
 14494  16D8  1D0E               	btfss	14,2	;volatile
 14495  16D9  2EDD               	goto	l6450
 14496  16DA  0021               	movlb	1	; select bank1
 14497  16DB  1D30               	btfss	(_myMain^(0+128)+16),2
 14498  16DC  2ED4               	goto	l6444
 14499  16DD                     l6450:	
 14500                           
 14501                           ;CC2500_B1.c: 153: };
 14502                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14503  16DD  319F  2779         	fcall	_set_TimeoutCleared
 14504                           
 14505                           ;CC2500_B1.c: 155: RC0 = 0;
 14506  16DF  0020               	movlb	0	; select bank0
 14507  16E0  100E               	bcf	14,0	;volatile
 14508                           
 14509                           ;CC2500_B1.c: 156: RC4 = 1;
 14510  16E1  160E               	bsf	14,4	;volatile
 14511  16E2  0008               	return
 14512  16E3                     __end_of_CC2500_PowerRST:	
 14513                           
 14514                           	psect	text95
 14515  14A5                     __ptext95:	
 14516 ;; *************** function _CC2500_InitSetREG *****************
 14517 ;; Defined at:
 14518 ;;		line 162 in file "../src/CC2500_B1.c"
 14519 ;; Parameters:    Size  Location     Type
 14520 ;;		None
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14523 ;;  temp2           1    7[BANK0 ] unsigned char 
 14524 ;;  temp1           1    6[BANK0 ] unsigned char 
 14525 ;; Return value:  Size  Location     Type
 14526 ;;		None               void
 14527 ;; Registers used:
 14528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14529 ;; Tracked objects:
 14530 ;;		On entry : 0/0
 14531 ;;		On exit  : 0/0
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;Total ram usage:        4 bytes
 14539 ;; Hardware stack levels used:    1
 14540 ;; Hardware stack levels required when called:    7
 14541 ;; This function calls:
 14542 ;;		_CC2500_WriteREG
 14543 ;; This function is called by:
 14544 ;;		_CC2500_PowerOnInitial
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548                           
 14549                           ;psect for function _CC2500_InitSetREG
 14550  14A5                     _CC2500_InitSetREG:	
 14551                           
 14552                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14553                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14554                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14555                           
 14556                           ;incstack = 0
 14557                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14558  14A5  0020               	movlb	0	; select bank0
 14559  14A6  01A8               	clrf	CC2500_InitSetREG@loop_c
 14560  14A7                     L5:	
 14561  14A7  302F               	movlw	47
 14562  14A8  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14563  14A9  1803               	btfsc	3,0
 14564  14AA  0008               	return
 14565                           
 14566                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14567  14AB  0828               	movf	CC2500_InitSetREG@loop_c,w
 14568  14AC  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14569  14AD  0084               	movwf	4
 14570  14AE  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14571  14AF  1803               	skipnc
 14572  14B0  3E01               	addlw	1
 14573  14B1  0085               	movwf	5
 14574  14B2  0800               	movf	0,w	;code access
 14575  14B3  00A5               	movwf	??_CC2500_InitSetREG
 14576  14B4  0825               	movf	??_CC2500_InitSetREG,w
 14577  14B5  00A6               	movwf	CC2500_InitSetREG@temp1
 14578                           
 14579                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14580  14B6  0828               	movf	CC2500_InitSetREG@loop_c,w
 14581  14B7  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14582  14B8  0084               	movwf	4
 14583  14B9  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14584  14BA  1803               	skipnc
 14585  14BB  3E01               	addlw	1
 14586  14BC  0085               	movwf	5
 14587  14BD  0800               	movf	0,w	;code access
 14588  14BE  00A5               	movwf	??_CC2500_InitSetREG
 14589  14BF  0825               	movf	??_CC2500_InitSetREG,w
 14590  14C0  00A7               	movwf	CC2500_InitSetREG@temp2
 14591                           
 14592                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14593  14C1  0827               	movf	CC2500_InitSetREG@temp2,w
 14594  14C2  00A5               	movwf	??_CC2500_InitSetREG
 14595  14C3  0825               	movf	??_CC2500_InitSetREG,w
 14596  14C4  00A2               	movwf	CC2500_WriteREG@value
 14597  14C5  0826               	movf	CC2500_InitSetREG@temp1,w
 14598  14C6  3193  23AD  3194   	fcall	_CC2500_WriteREG
 14599  14C9  3001               	movlw	1
 14600  14CA  0020               	movlb	0	; select bank0
 14601  14CB  00A5               	movwf	??_CC2500_InitSetREG
 14602  14CC  0825               	movf	??_CC2500_InitSetREG,w
 14603  14CD  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14604  14CE  2CA7               	goto	L5
 14605  14CF                     __end_of_CC2500_InitSetREG:	
 14606                           
 14607                           	psect	text96
 14608  134F                     __ptext96:	
 14609 ;; *************** function _CC2500_InitPATable *****************
 14610 ;; Defined at:
 14611 ;;		line 177 in file "../src/CC2500_B1.c"
 14612 ;; Parameters:    Size  Location     Type
 14613 ;;		None
 14614 ;; Auto vars:     Size  Location     Type
 14615 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14616 ;;  temp            1    6[BANK0 ] unsigned char 
 14617 ;; Return value:  Size  Location     Type
 14618 ;;		None               void
 14619 ;; Registers used:
 14620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14621 ;; Tracked objects:
 14622 ;;		On entry : 0/0
 14623 ;;		On exit  : 0/0
 14624 ;;		Unchanged: 0/0
 14625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;Total ram usage:        3 bytes
 14631 ;; Hardware stack levels used:    1
 14632 ;; Hardware stack levels required when called:    7
 14633 ;; This function calls:
 14634 ;;		_CC2500_WriteREG
 14635 ;; This function is called by:
 14636 ;;		_CC2500_PowerOnInitial
 14637 ;; This function uses a non-reentrant model
 14638 ;;
 14639                           
 14640                           
 14641                           ;psect for function _CC2500_InitPATable
 14642  134F                     _CC2500_InitPATable:	
 14643                           
 14644                           ;CC2500_B1.c: 178: unsigned char loop_d;
 14645                           ;CC2500_B1.c: 179: unsigned char temp;
 14646                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 14647                           
 14648                           ;incstack = 0
 14649                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14650  134F  0020               	movlb	0	; select bank0
 14651  1350  01A7               	clrf	CC2500_InitPATable@loop_d
 14652  1351                     L6:	
 14653  1351  3008               	movlw	8
 14654  1352  0227               	subwf	CC2500_InitPATable@loop_d,w
 14655  1353  1803               	btfsc	3,0
 14656  1354  0008               	return
 14657                           
 14658                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 14659  1355  0827               	movf	CC2500_InitPATable@loop_d,w
 14660  1356  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14661  1357  0084               	movwf	4
 14662  1358  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14663  1359  1803               	skipnc
 14664  135A  3E01               	addlw	1
 14665  135B  0085               	movwf	5
 14666  135C  0800               	movf	0,w	;code access
 14667  135D  00A5               	movwf	??_CC2500_InitPATable
 14668  135E  0825               	movf	??_CC2500_InitPATable,w
 14669  135F  00A6               	movwf	CC2500_InitPATable@temp
 14670                           
 14671                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 14672  1360  0826               	movf	CC2500_InitPATable@temp,w
 14673  1361  00A5               	movwf	??_CC2500_InitPATable
 14674  1362  0825               	movf	??_CC2500_InitPATable,w
 14675  1363  00A2               	movwf	CC2500_WriteREG@value
 14676  1364  303E               	movlw	62
 14677  1365  3193  23AD  3193   	fcall	_CC2500_WriteREG
 14678  1368  3001               	movlw	1
 14679  1369  0020               	movlb	0	; select bank0
 14680  136A  00A5               	movwf	??_CC2500_InitPATable
 14681  136B  0825               	movf	??_CC2500_InitPATable,w
 14682  136C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14683  136D  2B51               	goto	L6
 14684  136E                     __end_of_CC2500_InitPATable:	
 14685                           
 14686                           	psect	text97
 14687  13AD                     __ptext97:	
 14688 ;; *************** function _CC2500_WriteREG *****************
 14689 ;; Defined at:
 14690 ;;		line 254 in file "../src/CC2500_B1.c"
 14691 ;; Parameters:    Size  Location     Type
 14692 ;;  w_addr          1    wreg     unsigned char 
 14693 ;;  value           1    2[BANK0 ] unsigned char 
 14694 ;; Auto vars:     Size  Location     Type
 14695 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;		None               void
 14698 ;; Registers used:
 14699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14705 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;Total ram usage:        3 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    6
 14712 ;; This function calls:
 14713 ;;		_CC2500_WriteByte
 14714 ;;		_Timeout_Counter
 14715 ;;		_set_TimeoutCleared
 14716 ;; This function is called by:
 14717 ;;		_CC2500_InitSetREG
 14718 ;;		_CC2500_InitPATable
 14719 ;; This function uses a non-reentrant model
 14720 ;;
 14721                           
 14722                           
 14723                           ;psect for function _CC2500_WriteREG
 14724  13AD                     _CC2500_WriteREG:	
 14725                           
 14726                           ;incstack = 0
 14727                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14728                           ;CC2500_WriteREG@w_addr stored from wreg
 14729  13AD  0020               	movlb	0	; select bank0
 14730  13AE  00A4               	movwf	CC2500_WriteREG@w_addr
 14731                           
 14732                           ;CC2500_B1.c: 255: RC4 = 0;
 14733  13AF  120E               	bcf	14,4	;volatile
 14734                           
 14735                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 14736  13B0  0824               	movf	CC2500_WriteREG@w_addr,w
 14737  13B1  00A3               	movwf	??_CC2500_WriteREG
 14738  13B2  0823               	movf	??_CC2500_WriteREG,w
 14739  13B3  00FB               	movwf	_SPI0Buffer
 14740                           
 14741                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 14742  13B4  2BB8               	goto	l6172
 14743  13B5                     l6170:	
 14744                           
 14745                           ;CC2500_B1.c: 258: Timeout_Counter();
 14746  13B5  3192  224E  3193   	fcall	_Timeout_Counter
 14747  13B8                     l6172:	
 14748  13B8  0020               	movlb	0	; select bank0
 14749  13B9  1D0E               	btfss	14,2	;volatile
 14750  13BA  2BBE               	goto	l6176
 14751  13BB  0021               	movlb	1	; select bank1
 14752  13BC  1D30               	btfss	(_myMain^(0+128)+16),2
 14753  13BD  2BB5               	goto	l6170
 14754  13BE                     l6176:	
 14755                           
 14756                           ;CC2500_B1.c: 259: };
 14757                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 14758  13BE  319F  2779  3193   	fcall	_set_TimeoutCleared
 14759                           
 14760                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 14761  13C1  3191  21FE  3193   	fcall	_CC2500_WriteByte
 14762                           
 14763                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 14764  13C4  0020               	movlb	0	; select bank0
 14765  13C5  0822               	movf	CC2500_WriteREG@value,w
 14766  13C6  00A3               	movwf	??_CC2500_WriteREG
 14767  13C7  0823               	movf	??_CC2500_WriteREG,w
 14768  13C8  00FB               	movwf	_SPI0Buffer
 14769                           
 14770                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 14771  13C9  3191  21FE         	fcall	_CC2500_WriteByte
 14772                           
 14773                           ;CC2500_B1.c: 265: RC4 = 1;
 14774  13CB  0020               	movlb	0	; select bank0
 14775  13CC  160E               	bsf	14,4	;volatile
 14776  13CD  0008               	return
 14777  13CE                     __end_of_CC2500_WriteREG:	
 14778                           
 14779                           	psect	text98
 14780  1080                     __ptext98:	
 14781 ;; *************** function _CC2500_FrequencyCabr *****************
 14782 ;; Defined at:
 14783 ;;		line 204 in file "../src/CC2500_B1.c"
 14784 ;; Parameters:    Size  Location     Type
 14785 ;;		None
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;		None
 14788 ;; Return value:  Size  Location     Type
 14789 ;;		None               void
 14790 ;; Registers used:
 14791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14792 ;; Tracked objects:
 14793 ;;		On entry : 0/0
 14794 ;;		On exit  : 0/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;Total ram usage:        0 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    7
 14804 ;; This function calls:
 14805 ;;		_CC2500_WriteCommand
 14806 ;;		_DelayTime_1us
 14807 ;; This function is called by:
 14808 ;;		_CC2500_PowerOnInitial
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           
 14813                           ;psect for function _CC2500_FrequencyCabr
 14814  1080                     _CC2500_FrequencyCabr:	
 14815                           
 14816                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 14817                           
 14818                           ;incstack = 0
 14819                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14820  1080  3033               	movlw	51
 14821  1081  3192  22E7  3190   	fcall	_CC2500_WriteCommand
 14822                           
 14823                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 14824  1084  30E8               	movlw	232
 14825  1085  0020               	movlb	0	; select bank0
 14826  1086  00A0               	movwf	DelayTime_1us@count
 14827  1087  3003               	movlw	3
 14828  1088  00A1               	movwf	DelayTime_1us@count+1
 14829  1089  3194  2457         	fcall	_DelayTime_1us
 14830  108B  0008               	return
 14831  108C                     __end_of_CC2500_FrequencyCabr:	
 14832                           
 14833                           	psect	text99
 14834  1457                     __ptext99:	
 14835 ;; *************** function _DelayTime_1us *****************
 14836 ;; Defined at:
 14837 ;;		line 323 in file "../src/CC2500_B1.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;  count           2    0[BANK0 ] int 
 14840 ;; Auto vars:     Size  Location     Type
 14841 ;;  j               2    4[BANK0 ] unsigned int 
 14842 ;;  i               2    2[BANK0 ] unsigned int 
 14843 ;; Return value:  Size  Location     Type
 14844 ;;		None               void
 14845 ;; Registers used:
 14846 ;;		wreg, status,2
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14853 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;Total ram usage:        6 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:    5
 14859 ;; This function calls:
 14860 ;;		Nothing
 14861 ;; This function is called by:
 14862 ;;		_CC2500_PowerRST
 14863 ;;		_CC2500_FrequencyCabr
 14864 ;; This function uses a non-reentrant model
 14865 ;;
 14866                           
 14867                           
 14868                           ;psect for function _DelayTime_1us
 14869  1457                     _DelayTime_1us:	
 14870                           
 14871                           ;CC2500_B1.c: 324: unsigned int i, j;
 14872                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 14873                           
 14874                           ;incstack = 0
 14875                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14876  1457  3001               	movlw	1
 14877  1458  0020               	movlb	0	; select bank0
 14878  1459  00A2               	movwf	DelayTime_1us@i
 14879  145A  3000               	movlw	0
 14880  145B  00A3               	movwf	DelayTime_1us@i+1
 14881  145C                     l378:	
 14882  145C  0821               	movf	DelayTime_1us@count+1,w
 14883  145D  0223               	subwf	DelayTime_1us@i+1,w
 14884  145E  1D03               	skipz
 14885  145F  2C62               	goto	u5155
 14886  1460  0820               	movf	DelayTime_1us@count,w
 14887  1461  0222               	subwf	DelayTime_1us@i,w
 14888  1462                     u5155:	
 14889  1462  1803               	btfsc	3,0
 14890  1463  0008               	return
 14891                           
 14892                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 14893  1464  01A4               	clrf	DelayTime_1us@j
 14894  1465  01A5               	clrf	DelayTime_1us@j+1
 14895  1466  3000               	movlw	0
 14896  1467  0225               	subwf	DelayTime_1us@j+1,w
 14897  1468  3002               	movlw	2
 14898  1469  1903               	skipnz
 14899  146A  0224               	subwf	DelayTime_1us@j,w
 14900  146B  1803               	btfsc	3,0
 14901  146C  2C78               	goto	l6164
 14902  146D                     l6162:	
 14903  146D  3001               	movlw	1
 14904  146E  07A4               	addwf	DelayTime_1us@j,f
 14905  146F  3000               	movlw	0
 14906  1470  3DA5               	addwfc	DelayTime_1us@j+1,f
 14907  1471  3000               	movlw	0
 14908  1472  0225               	subwf	DelayTime_1us@j+1,w
 14909  1473  3002               	movlw	2
 14910  1474  1903               	skipnz
 14911  1475  0224               	subwf	DelayTime_1us@j,w
 14912  1476  1C03               	skipc
 14913  1477  2C6D               	goto	l6162
 14914  1478                     l6164:	
 14915  1478  3001               	movlw	1
 14916  1479  07A2               	addwf	DelayTime_1us@i,f
 14917  147A  3000               	movlw	0
 14918  147B  3DA3               	addwfc	DelayTime_1us@i+1,f
 14919  147C  2C5C               	goto	l378
 14920  147D                     __end_of_DelayTime_1us:	
 14921                           
 14922                           	psect	text100
 14923  1F71                     __ptext100:	
 14924 ;; *************** function _CC2500_ClearTXFIFO *****************
 14925 ;; Defined at:
 14926 ;;		line 190 in file "../src/CC2500_B1.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;		None
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;		None
 14931 ;; Return value:  Size  Location     Type
 14932 ;;		None               void
 14933 ;; Registers used:
 14934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;Total ram usage:        0 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:    7
 14947 ;; This function calls:
 14948 ;;		_CC2500_WriteCommand
 14949 ;; This function is called by:
 14950 ;;		_CC2500_PowerOnInitial
 14951 ;; This function uses a non-reentrant model
 14952 ;;
 14953                           
 14954                           
 14955                           ;psect for function _CC2500_ClearTXFIFO
 14956  1F71                     _CC2500_ClearTXFIFO:	
 14957                           
 14958                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 14959                           
 14960                           ;incstack = 0
 14961                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14962  1F71  303B               	movlw	59
 14963  1F72  3192  22E7         	fcall	_CC2500_WriteCommand
 14964  1F74  0008               	return
 14965  1F75                     __end_of_CC2500_ClearTXFIFO:	
 14966                           
 14967                           	psect	text101
 14968  1F6D                     __ptext101:	
 14969 ;; *************** function _CC2500_ClearRXFIFO *****************
 14970 ;; Defined at:
 14971 ;;		line 197 in file "../src/CC2500_B1.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;		None
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;		None
 14976 ;; Return value:  Size  Location     Type
 14977 ;;		None               void
 14978 ;; Registers used:
 14979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;Total ram usage:        0 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    7
 14992 ;; This function calls:
 14993 ;;		_CC2500_WriteCommand
 14994 ;; This function is called by:
 14995 ;;		_CC2500_PowerOnInitial
 14996 ;; This function uses a non-reentrant model
 14997 ;;
 14998                           
 14999                           
 15000                           ;psect for function _CC2500_ClearRXFIFO
 15001  1F6D                     _CC2500_ClearRXFIFO:	
 15002                           
 15003                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15004                           
 15005                           ;incstack = 0
 15006                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15007  1F6D  303A               	movlw	58
 15008  1F6E  3192  22E7         	fcall	_CC2500_WriteCommand
 15009  1F70  0008               	return
 15010  1F71                     __end_of_CC2500_ClearRXFIFO:	
 15011                           
 15012                           	psect	text102
 15013  12E7                     __ptext102:	
 15014 ;; *************** function _CC2500_WriteCommand *****************
 15015 ;; Defined at:
 15016 ;;		line 288 in file "../src/CC2500_B1.c"
 15017 ;; Parameters:    Size  Location     Type
 15018 ;;  command         1    wreg     unsigned char 
 15019 ;; Auto vars:     Size  Location     Type
 15020 ;;  command         1    3[BANK0 ] unsigned char 
 15021 ;; Return value:  Size  Location     Type
 15022 ;;		None               void
 15023 ;; Registers used:
 15024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;Total ram usage:        2 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:    6
 15037 ;; This function calls:
 15038 ;;		_CC2500_WriteByte
 15039 ;;		_Timeout_Counter
 15040 ;;		_set_TimeoutCleared
 15041 ;; This function is called by:
 15042 ;;		_CC2500_TxData
 15043 ;;		_CC2500_ClearTXFIFO
 15044 ;;		_CC2500_ClearRXFIFO
 15045 ;;		_CC2500_FrequencyCabr
 15046 ;;		_CC2500_SIDLEMode
 15047 ;;		_setRF_Main
 15048 ;;		_RF_RxDisable
 15049 ;; This function uses a non-reentrant model
 15050 ;;
 15051                           
 15052                           
 15053                           ;psect for function _CC2500_WriteCommand
 15054  12E7                     _CC2500_WriteCommand:	
 15055                           
 15056                           ;incstack = 0
 15057                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15058                           ;CC2500_WriteCommand@command stored from wreg
 15059  12E7  0020               	movlb	0	; select bank0
 15060  12E8  00A3               	movwf	CC2500_WriteCommand@command
 15061                           
 15062                           ;CC2500_B1.c: 289: RC4 = 0;
 15063  12E9  120E               	bcf	14,4	;volatile
 15064                           
 15065                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15066  12EA  0823               	movf	CC2500_WriteCommand@command,w
 15067  12EB  00A2               	movwf	??_CC2500_WriteCommand
 15068  12EC  0822               	movf	??_CC2500_WriteCommand,w
 15069  12ED  00FB               	movwf	_SPI0Buffer
 15070                           
 15071                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15072  12EE  2AF2               	goto	l5944
 15073  12EF                     l5942:	
 15074                           
 15075                           ;CC2500_B1.c: 293: Timeout_Counter();
 15076  12EF  3192  224E  3192   	fcall	_Timeout_Counter
 15077  12F2                     l5944:	
 15078  12F2  0020               	movlb	0	; select bank0
 15079  12F3  1D0E               	btfss	14,2	;volatile
 15080  12F4  2AF8               	goto	l5948
 15081  12F5  0021               	movlb	1	; select bank1
 15082  12F6  1D30               	btfss	(_myMain^(0+128)+16),2
 15083  12F7  2AEF               	goto	l5942
 15084  12F8                     l5948:	
 15085                           
 15086                           ;CC2500_B1.c: 294: };
 15087                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15088  12F8  319F  2779  3192   	fcall	_set_TimeoutCleared
 15089                           
 15090                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15091  12FB  3191  21FE         	fcall	_CC2500_WriteByte
 15092                           
 15093                           ;CC2500_B1.c: 298: RC4 = 1;
 15094  12FD  0020               	movlb	0	; select bank0
 15095  12FE  160E               	bsf	14,4	;volatile
 15096  12FF  0008               	return
 15097  1300                     __end_of_CC2500_WriteCommand:	
 15098                           
 15099                           	psect	text103
 15100  1F79                     __ptext103:	
 15101 ;; *************** function _set_TimeoutCleared *****************
 15102 ;; Defined at:
 15103 ;;		line 278 in file "../src/main_B1.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;		None
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;		None
 15108 ;; Return value:  Size  Location     Type
 15109 ;;		None               void
 15110 ;; Registers used:
 15111 ;;		status,2
 15112 ;; Tracked objects:
 15113 ;;		On entry : 0/0
 15114 ;;		On exit  : 0/0
 15115 ;;		Unchanged: 0/0
 15116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15121 ;;Total ram usage:        0 bytes
 15122 ;; Hardware stack levels used:    1
 15123 ;; Hardware stack levels required when called:    5
 15124 ;; This function calls:
 15125 ;;		Nothing
 15126 ;; This function is called by:
 15127 ;;		_CC2500_TxData
 15128 ;;		_CC2500_RxData
 15129 ;;		_CC2500_PowerRST
 15130 ;;		_CC2500_WriteREG
 15131 ;;		_CC2500_WriteCommand
 15132 ;;		_CC2500_ReadStatus
 15133 ;;		_TouchPower
 15134 ;;		_CC2500_ReadREG
 15135 ;;		_getAD
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           
 15140                           ;psect for function _set_TimeoutCleared
 15141  1F79                     _set_TimeoutCleared:	
 15142                           
 15143                           ;main_B1.c: 279: myMain.Timeout = 0;
 15144                           
 15145                           ;incstack = 0
 15146                           ; Regs used in _set_TimeoutCleared: [status,2]
 15147  1F79  0021               	movlb	1	; select bank1
 15148  1F7A  1130               	bcf	(_myMain^(0+128)+16),2
 15149                           
 15150                           ;main_B1.c: 280: myMain.Timeout_Counter = 0;
 15151  1F7B  01B1               	clrf	(_myMain^(0+128)+17)
 15152  1F7C  01B2               	clrf	((_myMain+1)^(0+128)+17)
 15153  1F7D  0008               	return
 15154  1F7E                     __end_of_set_TimeoutCleared:	
 15155                           
 15156                           	psect	text104
 15157  124E                     __ptext104:	
 15158 ;; *************** function _Timeout_Counter *****************
 15159 ;; Defined at:
 15160 ;;		line 268 in file "../src/main_B1.c"
 15161 ;; Parameters:    Size  Location     Type
 15162 ;;		None
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;		None
 15165 ;; Return value:  Size  Location     Type
 15166 ;;		None               void
 15167 ;; Registers used:
 15168 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;Total ram usage:        0 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:    5
 15181 ;; This function calls:
 15182 ;;		Nothing
 15183 ;; This function is called by:
 15184 ;;		_CC2500_TxData
 15185 ;;		_CC2500_RxData
 15186 ;;		_CC2500_PowerRST
 15187 ;;		_CC2500_WriteREG
 15188 ;;		_CC2500_WriteCommand
 15189 ;;		_CC2500_ReadStatus
 15190 ;;		_TouchPower
 15191 ;;		_CC2500_ReadREG
 15192 ;;		_getAD
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           
 15197                           ;psect for function _Timeout_Counter
 15198  124E                     _Timeout_Counter:	
 15199                           
 15200                           ;main_B1.c: 269: myMain.Timeout_Counter++;
 15201                           
 15202                           ;incstack = 0
 15203                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15204  124E  3001               	movlw	1
 15205  124F  0021               	movlb	1	; select bank1
 15206  1250  07B1               	addwf	(_myMain^(0+128)+17),f
 15207  1251  3000               	movlw	0
 15208  1252  3DB2               	addwfc	((_myMain+1)^(0+128)+17),f
 15209                           
 15210                           ;main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
 15211  1253  3011               	movlw	17
 15212  1254  3EA0               	addlw	_myMain& (0+255)
 15213  1255  0086               	movwf	6
 15214  1256  0187               	clrf	7
 15215  1257  3F40               	moviw [0]fsr1
 15216  1258  3A10               	xorlw	16
 15217  1259  1D03               	skipz
 15218  125A  2A5D               	goto	u4715
 15219  125B  3F41               	moviw [1]fsr1
 15220  125C  3A27               	xorlw	39
 15221  125D                     u4715:	
 15222  125D  1D03               	skipz
 15223  125E  0008               	return
 15224                           
 15225                           ;main_B1.c: 271: myMain.Timeout_Counter = 0;
 15226  125F  01B1               	clrf	(_myMain^(0+128)+17)
 15227  1260  01B2               	clrf	((_myMain+1)^(0+128)+17)
 15228                           
 15229                           ;main_B1.c: 272: myMain.Timeout = 1;
 15230  1261  1530               	bsf	(_myMain^(0+128)+16),2
 15231  1262  0008               	return
 15232  1263                     __end_of_Timeout_Counter:	
 15233                           
 15234                           	psect	text105
 15235  11FE                     __ptext105:	
 15236 ;; *************** function _CC2500_WriteByte *****************
 15237 ;; Defined at:
 15238 ;;		line 222 in file "../src/CC2500_B1.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;		None
 15241 ;; Auto vars:     Size  Location     Type
 15242 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15243 ;; Return value:  Size  Location     Type
 15244 ;;		None               void
 15245 ;; Registers used:
 15246 ;;		wreg, status,2, status,0
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : 0/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;Total ram usage:        2 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    5
 15259 ;; This function calls:
 15260 ;;		Nothing
 15261 ;; This function is called by:
 15262 ;;		_CC2500_TxData
 15263 ;;		_CC2500_RxData
 15264 ;;		_CC2500_PowerRST
 15265 ;;		_CC2500_WriteREG
 15266 ;;		_CC2500_WriteCommand
 15267 ;;		_CC2500_ReadStatus
 15268 ;;		_CC2500_ReadREG
 15269 ;; This function uses a non-reentrant model
 15270 ;;
 15271                           
 15272                           
 15273                           ;psect for function _CC2500_WriteByte
 15274  11FE                     _CC2500_WriteByte:	
 15275                           
 15276                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15277                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15278                           
 15279                           ;incstack = 0
 15280                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15281  11FE  0020               	movlb	0	; select bank0
 15282  11FF  01A1               	clrf	CC2500_WriteByte@loop_a
 15283  1200                     L7:	
 15284  1200  3008               	movlw	8
 15285  1201  0221               	subwf	CC2500_WriteByte@loop_a,w
 15286  1202  1803               	btfsc	3,0
 15287  1203  0008               	return
 15288                           
 15289                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15290  1204  1FFB               	btfss	_SPI0Buffer,7
 15291  1205  2A08               	goto	l334
 15292                           
 15293                           ;CC2500_B1.c: 226: RC0 = 1;
 15294  1206  140E               	bsf	14,0	;volatile
 15295  1207  2A09               	goto	l335
 15296  1208                     l334:	
 15297                           
 15298                           ;CC2500_B1.c: 227: else
 15299                           ;CC2500_B1.c: 228: RC0 = 0;
 15300  1208  100E               	bcf	14,0	;volatile
 15301  1209                     l335:	
 15302                           
 15303                           ;CC2500_B1.c: 229: RC1 = 1;
 15304  1209  148E               	bsf	14,1	;volatile
 15305                           
 15306                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15307  120A  1003               	clrc
 15308  120B  0DFB               	rlf	_SPI0Buffer,f
 15309                           
 15310                           ;CC2500_B1.c: 231: RC1 = 0;
 15311  120C  108E               	bcf	14,1	;volatile
 15312  120D  3001               	movlw	1
 15313  120E  00A0               	movwf	??_CC2500_WriteByte
 15314  120F  0820               	movf	??_CC2500_WriteByte,w
 15315  1210  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15316  1211  2A00               	goto	L7
 15317  1212                     __end_of_CC2500_WriteByte:	
 15318                           
 15319                           	psect	text106
 15320  0800                     __ptext106:	
 15321 ;; *************** function _Buzzer_Main *****************
 15322 ;; Defined at:
 15323 ;;		line 46 in file "../src/Buzzer_B1.c"
 15324 ;; Parameters:    Size  Location     Type
 15325 ;;		None
 15326 ;; Auto vars:     Size  Location     Type
 15327 ;;		None
 15328 ;; Return value:  Size  Location     Type
 15329 ;;		None               void
 15330 ;; Registers used:
 15331 ;;		wreg, status,2, status,0
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;Total ram usage:        1 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    5
 15344 ;; This function calls:
 15345 ;;		Nothing
 15346 ;; This function is called by:
 15347 ;;		_main
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           
 15352                           ;psect for function _Buzzer_Main
 15353  0800                     _Buzzer_Main:	
 15354                           
 15355                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15356                           
 15357                           ;incstack = 0
 15358                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15359  0800  0021               	movlb	1	; select bank1
 15360  0801  1CB3               	btfss	_Buz1^(0+128),1
 15361  0802  0008               	return
 15362                           
 15363                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15364  0803  3001               	movlw	1
 15365  0804  07B4               	addwf	(_Buz1^(0+128)+1),f
 15366  0805  3000               	movlw	0
 15367  0806  3DB5               	addwfc	((_Buz1+1)^(0+128)+1),f
 15368                           
 15369                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15370  0807  083A               	movf	((_Buz1+1)^(0+128)+6),w
 15371  0808  0235               	subwf	((_Buz1+1)^(0+128)+1),w
 15372  0809  1D03               	skipz
 15373  080A  280D               	goto	u6565
 15374  080B  0839               	movf	(_Buz1^(0+128)+6),w
 15375  080C  0234               	subwf	(_Buz1^(0+128)+1),w
 15376  080D                     u6565:	
 15377  080D  1C03               	skipc
 15378  080E  0008               	return
 15379                           
 15380                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15381  080F  01B4               	clrf	(_Buz1^(0+128)+1)
 15382  0810  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 15383                           
 15384                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15385  0811  12B3               	bcf	_Buz1^(0+128),5
 15386  0812  0020               	movlb	0	; select bank0
 15387  0813  1D8D               	btfss	13,3	;volatile
 15388  0814  2817               	goto	l7036
 15389  0815  0021               	movlb	1	; select bank1
 15390  0816  16B3               	bsf	_Buz1^(0+128),5
 15391  0817                     l7036:	
 15392                           
 15393                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15394  0817  0021               	movlb	1	; select bank1
 15395  0818  1AB3               	btfsc	_Buz1^(0+128),5
 15396  0819  2843               	goto	l108
 15397                           
 15398                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15399  081A  08B6               	movf	(_Buz1^(0+128)+3),f
 15400  081B  1D03               	skipz
 15401  081C  283F               	goto	l109
 15402                           
 15403                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15404  081D  1DB3               	btfss	_Buz1^(0+128),3
 15405  081E  282D               	goto	l110
 15406                           
 15407                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15408  081F  11B3               	bcf	_Buz1^(0+128),3
 15409                           
 15410                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15411  0820  0837               	movf	(_Buz1^(0+128)+4),w
 15412  0821  0020               	movlb	0	; select bank0
 15413  0822  00A0               	movwf	??_Buzzer_Main
 15414  0823  0820               	movf	??_Buzzer_Main,w
 15415  0824  0021               	movlb	1	; select bank1
 15416  0825  00B6               	movwf	(_Buz1^(0+128)+3)
 15417                           
 15418                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15419  0826  083C               	movf	((_Buz1+1)^(0+128)+8),w
 15420  0827  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 15421  0828  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 15422  0829  083B               	movf	(_Buz1^(0+128)+8),w
 15423  082A  01B9               	clrf	(_Buz1^(0+128)+6)
 15424  082B  07B9               	addwf	(_Buz1^(0+128)+6),f
 15425                           
 15426                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15427  082C  0008               	return
 15428  082D                     l110:	
 15429  082D  1E33               	btfss	_Buz1^(0+128),4
 15430  082E  283D               	goto	l112
 15431                           
 15432                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15433  082F  1233               	bcf	_Buz1^(0+128),4
 15434                           
 15435                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15436  0830  0838               	movf	(_Buz1^(0+128)+5),w
 15437  0831  0020               	movlb	0	; select bank0
 15438  0832  00A0               	movwf	??_Buzzer_Main
 15439  0833  0820               	movf	??_Buzzer_Main,w
 15440  0834  0021               	movlb	1	; select bank1
 15441  0835  00B6               	movwf	(_Buz1^(0+128)+3)
 15442                           
 15443                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15444  0836  083E               	movf	((_Buz1+1)^(0+128)+10),w
 15445  0837  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 15446  0838  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 15447  0839  083D               	movf	(_Buz1^(0+128)+10),w
 15448  083A  01B9               	clrf	(_Buz1^(0+128)+6)
 15449  083B  07B9               	addwf	(_Buz1^(0+128)+6),f
 15450                           
 15451                           ;Buzzer_B1.c: 62: } else {
 15452  083C  0008               	return
 15453  083D                     l112:	
 15454                           
 15455                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15456  083D  10B3               	bcf	_Buz1^(0+128),1
 15457                           
 15458                           ;Buzzer_B1.c: 64: }
 15459                           ;Buzzer_B1.c: 65: } else {
 15460  083E  0008               	return
 15461  083F                     l109:	
 15462                           
 15463                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15464  083F  16B3               	bsf	_Buz1^(0+128),5
 15465                           
 15466                           ;Buzzer_B1.c: 68: RB3 = 1;
 15467  0840  0020               	movlb	0	; select bank0
 15468  0841  158D               	bsf	13,3	;volatile
 15469                           
 15470                           ;Buzzer_B1.c: 69: }
 15471                           ;Buzzer_B1.c: 70: } else {
 15472  0842  0008               	return
 15473  0843                     l108:	
 15474                           
 15475                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15476  0843  12B3               	bcf	_Buz1^(0+128),5
 15477                           
 15478                           ;Buzzer_B1.c: 73: RB3 = 0;
 15479  0844  0020               	movlb	0	; select bank0
 15480  0845  118D               	bcf	13,3	;volatile
 15481                           
 15482                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15483  0846  3001               	movlw	1
 15484  0847  0021               	movlb	1	; select bank1
 15485  0848  02B6               	subwf	(_Buz1^(0+128)+3),f
 15486  0849  0008               	return
 15487  084A                     __end_of_Buzzer_Main:	
 15488                           
 15489                           	psect	text107
 15490  1F64                     __ptext107:	
 15491 ;; *************** function _Buzzer_Initialization *****************
 15492 ;; Defined at:
 15493 ;;		line 11 in file "../src/Buzzer_B1.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;		None
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;		None
 15498 ;; Return value:  Size  Location     Type
 15499 ;;		None               void
 15500 ;; Registers used:
 15501 ;;		None
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;Total ram usage:        0 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; Hardware stack levels required when called:    5
 15514 ;; This function calls:
 15515 ;;		Nothing
 15516 ;; This function is called by:
 15517 ;;		_main
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           
 15522                           ;psect for function _Buzzer_Initialization
 15523  1F64                     _Buzzer_Initialization:	
 15524                           
 15525                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15526                           
 15527                           ;incstack = 0
 15528                           ; Regs used in _Buzzer_Initialization: []
 15529  1F64  0021               	movlb	1	; select bank1
 15530  1F65  1433               	bsf	_Buz1^(0+128),0
 15531  1F66  0008               	return
 15532  1F67                     __end_of_Buzzer_Initialization:	
 15533                           
 15534                           	psect	intentry
 15535  0004                     __pintentry:	
 15536 ;; *************** function _ISR *****************
 15537 ;; Defined at:
 15538 ;;		line 107 in file "../src/MCU_B1.c"
 15539 ;; Parameters:    Size  Location     Type
 15540 ;;		None
 15541 ;; Auto vars:     Size  Location     Type
 15542 ;;		None
 15543 ;; Return value:  Size  Location     Type
 15544 ;;		None               void
 15545 ;; Registers used:
 15546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;Total ram usage:        1 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; Hardware stack levels required when called:    4
 15559 ;; This function calls:
 15560 ;;		_INT_ISR
 15561 ;;		_IOC_ISR
 15562 ;;		_TMR1_ISR
 15563 ;; This function is called by:
 15564 ;;		Interrupt level 1
 15565 ;; This function uses a non-reentrant model
 15566 ;;
 15567                           
 15568  0004                     _ISR:	
 15569                           
 15570                           ;incstack = 0
 15571                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15572  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15573  0005  3180               	pagesel	$
 15574  0006  0020               	movlb	0	; select bank0
 15575  0007  087F               	movf	127,w
 15576  0008  00F7               	movwf	??_ISR
 15577                           
 15578                           ;MCU_B1.c: 109: IOC_ISR();
 15579  0009  3190  20BC  3180   	fcall	_IOC_ISR
 15580                           
 15581                           ;MCU_B1.c: 111: ;;
 15582                           ;MCU_B1.c: 113: TMR1_ISR();
 15583  000C  3194  247D  3180   	fcall	_TMR1_ISR
 15584                           
 15585                           ;MCU_B1.c: 115: ;;
 15586                           ;MCU_B1.c: 117: INT_ISR();
 15587  000F  319F  27CE         	fcall	_INT_ISR
 15588  0011  0877               	movf	??_ISR,w
 15589  0012  0020               	movlb	0	; select bank0
 15590  0013  00FF               	movwf	127
 15591  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15592  0015  0009               	retfie
 15593  0016                     __end_of_ISR:	
 15594                           
 15595                           	psect	text109
 15596  147D                     __ptext109:	
 15597 ;; *************** function _TMR1_ISR *****************
 15598 ;; Defined at:
 15599 ;;		line 209 in file "../src/MCU_B1.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;		None
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;		None
 15604 ;; Return value:  Size  Location     Type
 15605 ;;		None               void
 15606 ;; Registers used:
 15607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;Total ram usage:        0 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    2
 15620 ;; This function calls:
 15621 ;;		_setDimmerLights_IntrControl
 15622 ;; This function is called by:
 15623 ;;		_ISR
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           
 15628                           ;psect for function _TMR1_ISR
 15629  147D                     _TMR1_ISR:	
 15630                           
 15631                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 15632                           
 15633                           ;incstack = 0
 15634                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15635  147D  0021               	movlb	1	; select bank1
 15636  147E  1C11               	btfss	17,0	;volatile
 15637  147F  0008               	return
 15638  1480  0020               	movlb	0	; select bank0
 15639  1481  1C11               	btfss	17,0	;volatile
 15640  1482  0008               	return
 15641                           
 15642                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 15643  1483  30FA               	movlw	250
 15644  1484  0097               	movwf	23	;volatile
 15645                           
 15646                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 15647  1485  3038               	movlw	56
 15648  1486  0096               	movwf	22	;volatile
 15649                           
 15650                           ;MCU_B1.c: 214: TMR1IF = 0;
 15651  1487  1011               	bcf	17,0	;volatile
 15652                           
 15653                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 15654  1488  3001               	movlw	1
 15655  1489  3180  2045  3194   	fcall	_setDimmerLights_IntrControl
 15656                           
 15657                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 15658  148C  3002               	movlw	2
 15659  148D  3180  2045  3194   	fcall	_setDimmerLights_IntrControl
 15660                           
 15661                           ;MCU_B1.c: 234: Timer1.Count++;
 15662  1490  3001               	movlw	1
 15663  1491  0021               	movlb	1	; select bank1
 15664  1492  07CC               	addwf	(_Timer1^(0+128)+1),f
 15665  1493  3000               	movlw	0
 15666  1494  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 15667                           
 15668                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 15669  1495  3001               	movlw	1
 15670  1496  3ECB               	addlw	_Timer1& (0+255)
 15671  1497  0086               	movwf	6
 15672  1498  0187               	clrf	7
 15673  1499  3F40               	moviw [0]fsr1
 15674  149A  3A64               	xorlw	100
 15675  149B  1D03               	skipz
 15676  149C  2C9F               	goto	u667_25
 15677  149D  3F41               	moviw [1]fsr1
 15678  149E  3A00               	xorlw	0
 15679  149F                     u667_25:	
 15680  149F  1D03               	skipz
 15681  14A0  0008               	return
 15682                           
 15683                           ;MCU_B1.c: 236: {
 15684                           ;MCU_B1.c: 237: Timer1.Count = 0;
 15685  14A1  01CC               	clrf	(_Timer1^(0+128)+1)
 15686  14A2  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 15687                           
 15688                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
 15689  14A3  1520               	bsf	_myMain^(0+128),2
 15690  14A4  0008               	return
 15691  14A5                     __end_of_TMR1_ISR:	
 15692                           
 15693                           	psect	text110
 15694  0045                     __ptext110:	
 15695 ;; *************** function _setDimmerLights_IntrControl *****************
 15696 ;; Defined at:
 15697 ;;		line 94 in file "../src/Dimmer_B1.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;  lights          1    wreg     unsigned char 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  lights          1    6[COMMON] unsigned char 
 15702 ;; Return value:  Size  Location     Type
 15703 ;;		None               void
 15704 ;; Registers used:
 15705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;Total ram usage:        5 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; Hardware stack levels required when called:    1
 15718 ;; This function calls:
 15719 ;;		_DimmerIntrPointSelect
 15720 ;; This function is called by:
 15721 ;;		_TMR1_ISR
 15722 ;; This function uses a non-reentrant model
 15723 ;;
 15724                           
 15725                           
 15726                           ;psect for function _setDimmerLights_IntrControl
 15727  0045                     _setDimmerLights_IntrControl:	
 15728                           
 15729                           ;incstack = 0
 15730                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15731                           ;setDimmerLights_IntrControl@lights stored from wreg
 15732  0045  00F6               	movwf	setDimmerLights_IntrControl@lights
 15733                           
 15734                           ;Dimmer_B1.c: 229: DimmerIntrPointSelect(lights);
 15735  0046  0876               	movf	setDimmerLights_IntrControl@lights,w
 15736  0047  3191  218F  3180   	fcall	_DimmerIntrPointSelect
 15737                           
 15738                           ;Dimmer_B1.c: 230: if (DimmerLightsIntr->GO == 1) {
 15739  004A  087A               	movf	_DimmerLightsIntr,w
 15740  004B  0086               	movwf	6
 15741  004C  3001               	movlw	1	; select bank2/3
 15742  004D  0087               	movwf	7
 15743  004E  1C01               	btfss	1,0
 15744  004F  28CD               	goto	i1l6566
 15745                           
 15746                           ;Dimmer_B1.c: 231: DimmerLightsIntr->Count++;
 15747  0050  3001               	movlw	1
 15748  0051  00F2               	movwf	??_setDimmerLights_IntrControl
 15749  0052  087A               	movf	_DimmerLightsIntr,w
 15750  0053  3E03               	addlw	3
 15751  0054  0086               	movwf	6
 15752  0055  3001               	movlw	1	; select bank2/3
 15753  0056  0087               	movwf	7
 15754  0057  0872               	movf	??_setDimmerLights_IntrControl,w
 15755  0058  0781               	addwf	1,f
 15756                           
 15757                           ;Dimmer_B1.c: 232: if (DimmerLightsIntr->Count
 15758                           ;Dimmer_B1.c: 233: >= (DimmerLightsIntr->DimmingValue - Dimmer->Correction)) {
 15759  0059  0021               	movlb	1	; select bank1
 15760  005A  0855               	movf	_Dimmer^(0+128),w
 15761  005B  3E02               	addlw	2
 15762  005C  0086               	movwf	6
 15763  005D  0187               	clrf	7
 15764  005E  0801               	movf	1,w
 15765  005F  00F2               	movwf	??_setDimmerLights_IntrControl
 15766  0060  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15767  0061  09F2               	comf	??_setDimmerLights_IntrControl,f
 15768  0062  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15769  0063  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15770  0064  1903               	skipnz
 15771  0065  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15772  0066  087A               	movf	_DimmerLightsIntr,w
 15773  0067  3E04               	addlw	4
 15774  0068  0086               	movwf	6
 15775  0069  3001               	movlw	1	; select bank2/3
 15776  006A  0087               	movwf	7
 15777  006B  0801               	movf	1,w
 15778  006C  0772               	addwf	??_setDimmerLights_IntrControl,w
 15779  006D  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15780  006E  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15781  006F  1803               	skipnc
 15782  0070  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15783  0071  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15784  0072  087A               	movf	_DimmerLightsIntr,w
 15785  0073  3E03               	addlw	3
 15786  0074  0086               	movwf	6
 15787  0075  3001               	movlw	1	; select bank2/3
 15788  0076  0087               	movwf	7
 15789  0077  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15790  0078  3A80               	xorlw	128
 15791  0079  3C80               	sublw	128
 15792  007A  1D03               	skipz
 15793  007B  287E               	goto	u568_25
 15794  007C  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15795  007D  0201               	subwf	1,w
 15796  007E                     u568_25:	
 15797  007E  1C03               	skipc
 15798  007F  2981               	goto	i1l765
 15799                           
 15800                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count = 0;
 15801  0080  087A               	movf	_DimmerLightsIntr,w
 15802  0081  3E03               	addlw	3
 15803  0082  0086               	movwf	6
 15804  0083  3001               	movlw	1	; select bank2/3
 15805  0084  0087               	movwf	7
 15806  0085  0181               	clrf	1
 15807                           
 15808                           ;Dimmer_B1.c: 235: DimmerLightsIntr->GO = 0;
 15809  0086  087A               	movf	_DimmerLightsIntr,w
 15810  0087  0086               	movwf	6
 15811  0088  3001               	movlw	1	; select bank2/3
 15812  0089  0087               	movwf	7
 15813  008A  1001               	bcf	1,0
 15814                           
 15815                           ;Dimmer_B1.c: 236: DimmerLightsIntr->Flag = 1;
 15816  008B  087A               	movf	_DimmerLightsIntr,w
 15817  008C  3E08               	addlw	8
 15818  008D  0086               	movwf	6
 15819  008E  3001               	movlw	1	; select bank2/3
 15820  008F  0087               	movwf	7
 15821  0090  1401               	bsf	1,0
 15822                           
 15823                           ;Dimmer_B1.c: 237: if (DimmerLightsIntr->StatusFlag) {
 15824  0091  087A               	movf	_DimmerLightsIntr,w
 15825  0092  0086               	movwf	6
 15826  0093  3001               	movlw	1	; select bank2/3
 15827  0094  0087               	movwf	7
 15828  0095  1F01               	btfss	1,6
 15829  0096  2981               	goto	i1l765
 15830                           
 15831                           ;Dimmer_B1.c: 239: if (lights == 1) {
 15832  0097  0876               	movf	setDimmerLights_IntrControl@lights,w
 15833  0098  3A01               	xorlw	1
 15834  0099  1D03               	skipz
 15835  009A  289D               	goto	i1l6548
 15836                           
 15837                           ;Dimmer_B1.c: 240: RA7 = 0;
 15838  009B  0020               	movlb	0	; select bank0
 15839  009C  138C               	bcf	12,7	;volatile
 15840  009D                     i1l6548:	
 15841                           ;Dimmer_B1.c: 241: ;;
 15842                           
 15843                           
 15844                           ;Dimmer_B1.c: 242: }
 15845                           ;Dimmer_B1.c: 245: if (lights == 2) {
 15846  009D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15847  009E  3A02               	xorlw	2
 15848  009F  1D03               	skipz
 15849  00A0  28A3               	goto	i1l6552
 15850                           
 15851                           ;Dimmer_B1.c: 246: RB4 = 0;
 15852  00A1  0020               	movlb	0	; select bank0
 15853  00A2  120D               	bcf	13,4	;volatile
 15854  00A3                     i1l6552:	
 15855                           
 15856                           ;Dimmer_B1.c: 247: }
 15857                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MosfetClose) {
 15858  00A3  087A               	movf	_DimmerLightsIntr,w
 15859  00A4  3E08               	addlw	8
 15860  00A5  0086               	movwf	6
 15861  00A6  3001               	movlw	1	; select bank2/3
 15862  00A7  0087               	movwf	7
 15863  00A8  1F81               	btfss	1,7
 15864  00A9  2981               	goto	i1l765
 15865                           
 15866                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MosfetClose = 0;
 15867  00AA  087A               	movf	_DimmerLightsIntr,w
 15868  00AB  3E08               	addlw	8
 15869  00AC  0086               	movwf	6
 15870  00AD  3001               	movlw	1	; select bank2/3
 15871  00AE  0087               	movwf	7
 15872  00AF  1381               	bcf	1,7
 15873                           
 15874                           ;Dimmer_B1.c: 251: DimmerLightsIntr->StatusFlag = 0;
 15875  00B0  087A               	movf	_DimmerLightsIntr,w
 15876  00B1  0086               	movwf	6
 15877  00B2  3001               	movlw	1	; select bank2/3
 15878  00B3  0087               	movwf	7
 15879  00B4  1301               	bcf	1,6
 15880                           
 15881                           ;Dimmer_B1.c: 252: DimmerLightsIntr->Clear = 1;
 15882  00B5  087A               	movf	_DimmerLightsIntr,w
 15883  00B6  3E09               	addlw	9
 15884  00B7  0086               	movwf	6
 15885  00B8  3001               	movlw	1	; select bank2/3
 15886  00B9  0087               	movwf	7
 15887  00BA  1501               	bsf	1,2
 15888                           
 15889                           ;Dimmer_B1.c: 254: if (lights == 1) {
 15890  00BB  0876               	movf	setDimmerLights_IntrControl@lights,w
 15891  00BC  3A01               	xorlw	1
 15892  00BD  1D03               	skipz
 15893  00BE  28C1               	goto	i1l6560
 15894                           
 15895                           ;Dimmer_B1.c: 255: RA3 = 0;
 15896  00BF  0020               	movlb	0	; select bank0
 15897  00C0  118C               	bcf	12,3	;volatile
 15898  00C1                     i1l6560:	
 15899                           
 15900                           ;Dimmer_B1.c: 257: }
 15901                           ;Dimmer_B1.c: 260: if (lights == 2) {
 15902  00C1  0876               	movf	setDimmerLights_IntrControl@lights,w
 15903  00C2  3A02               	xorlw	2
 15904  00C3  1D03               	skipz
 15905  00C4  28C7               	goto	i1l6564
 15906                           
 15907                           ;Dimmer_B1.c: 261: RC7 = 0;
 15908  00C5  0020               	movlb	0	; select bank0
 15909  00C6  138E               	bcf	14,7	;volatile
 15910  00C7                     i1l6564:	
 15911                           
 15912                           ;Dimmer_B1.c: 262: }
 15913                           ;Dimmer_B1.c: 264: Dimmer->Detect = 1;
 15914  00C7  0021               	movlb	1	; select bank1
 15915  00C8  0855               	movf	_Dimmer^(0+128),w
 15916  00C9  0086               	movwf	6
 15917  00CA  0187               	clrf	7
 15918  00CB  1401               	bsf	1,0
 15919                           
 15920                           ;Dimmer_B1.c: 266: }
 15921                           ;Dimmer_B1.c: 267: }
 15922                           ;Dimmer_B1.c: 268: }
 15923                           ;Dimmer_B1.c: 269: } else {
 15924                           
 15925                           ;Dimmer_B1.c: 265: ;;
 15926  00CC  2981               	goto	i1l765
 15927  00CD                     i1l6566:	
 15928                           
 15929                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->Flag == 1) {
 15930  00CD  087A               	movf	_DimmerLightsIntr,w
 15931  00CE  3E08               	addlw	8
 15932  00CF  0086               	movwf	6
 15933  00D0  3001               	movlw	1	; select bank2/3
 15934  00D1  0087               	movwf	7
 15935  00D2  1C01               	btfss	1,0
 15936  00D3  2981               	goto	i1l765
 15937                           
 15938                           ;Dimmer_B1.c: 271: DimmerLightsIntr->Flag = 0;
 15939  00D4  087A               	movf	_DimmerLightsIntr,w
 15940  00D5  3E08               	addlw	8
 15941  00D6  0086               	movwf	6
 15942  00D7  3001               	movlw	1	; select bank2/3
 15943  00D8  0087               	movwf	7
 15944  00D9  1001               	bcf	1,0
 15945                           
 15946                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->Signal) {
 15947  00DA  087A               	movf	_DimmerLightsIntr,w
 15948  00DB  0086               	movwf	6
 15949  00DC  3001               	movlw	1	; select bank2/3
 15950  00DD  0087               	movwf	7
 15951  00DE  1C81               	btfss	1,1
 15952  00DF  2981               	goto	i1l765
 15953                           
 15954                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingTime++;
 15955  00E0  3001               	movlw	1
 15956  00E1  00F2               	movwf	??_setDimmerLights_IntrControl
 15957  00E2  0A7A               	incf	_DimmerLightsIntr,w
 15958  00E3  0086               	movwf	6
 15959  00E4  3001               	movlw	1	; select bank2/3
 15960  00E5  0087               	movwf	7
 15961  00E6  0872               	movf	??_setDimmerLights_IntrControl,w
 15962  00E7  0781               	addwf	1,f
 15963                           
 15964                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 15965  00E8  0A7A               	incf	_DimmerLightsIntr,w
 15966  00E9  0086               	movwf	6
 15967  00EA  3001               	movlw	1	; select bank2/3
 15968  00EB  0087               	movwf	7
 15969  00EC  087A               	movf	_DimmerLightsIntr,w
 15970  00ED  3E02               	addlw	2
 15971  00EE  0084               	movwf	4
 15972  00EF  3001               	movlw	1	; select bank2/3
 15973  00F0  0085               	movwf	5
 15974  00F1  0800               	movf	0,w
 15975  00F2  0201               	subwf	1,w
 15976  00F3  1C03               	skipc
 15977  00F4  2981               	goto	i1l765
 15978                           
 15979                           ;Dimmer_B1.c: 275: DimmerLightsIntr->DimmingTime = 0;
 15980  00F5  0A7A               	incf	_DimmerLightsIntr,w
 15981  00F6  0086               	movwf	6
 15982  00F7  3001               	movlw	1	; select bank2/3
 15983  00F8  0087               	movwf	7
 15984  00F9  0181               	clrf	1
 15985                           
 15986                           ;Dimmer_B1.c: 276: if (DimmerLightsIntr->AdjFlag) {
 15987  00FA  087A               	movf	_DimmerLightsIntr,w
 15988  00FB  0086               	movwf	6
 15989  00FC  3001               	movlw	1	; select bank2/3
 15990  00FD  0087               	movwf	7
 15991  00FE  1D81               	btfss	1,3
 15992  00FF  2936               	goto	i1l6592
 15993                           
 15994                           ;Dimmer_B1.c: 277: if (DimmerLightsIntr->AdjStatus == 0) {
 15995  0100  087A               	movf	_DimmerLightsIntr,w
 15996  0101  0086               	movwf	6
 15997  0102  3001               	movlw	1	; select bank2/3
 15998  0103  0087               	movwf	7
 15999  0104  1A01               	btfsc	1,4
 16000  0105  291F               	goto	i1l6586
 16001                           
 16002                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue < ((char)(65*0.8))) {
 16003  0106  087A               	movf	_DimmerLightsIntr,w
 16004  0107  3E04               	addlw	4
 16005  0108  0086               	movwf	6
 16006  0109  3001               	movlw	1	; select bank2/3
 16007  010A  0087               	movwf	7
 16008  010B  3034               	movlw	52
 16009  010C  0201               	subwf	1,w
 16010  010D  1803               	skipnc
 16011  010E  2919               	goto	i1l6584
 16012                           
 16013                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue++;
 16014  010F  3001               	movlw	1
 16015  0110  00F2               	movwf	??_setDimmerLights_IntrControl
 16016  0111  087A               	movf	_DimmerLightsIntr,w
 16017  0112  3E04               	addlw	4
 16018  0113  0086               	movwf	6
 16019  0114  3001               	movlw	1	; select bank2/3
 16020  0115  0087               	movwf	7
 16021  0116  0872               	movf	??_setDimmerLights_IntrControl,w
 16022  0117  0781               	addwf	1,f
 16023                           
 16024                           ;Dimmer_B1.c: 280: } else {
 16025  0118  2981               	goto	i1l765
 16026  0119                     i1l6584:	
 16027                           
 16028                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 1;
 16029  0119  087A               	movf	_DimmerLightsIntr,w
 16030  011A  0086               	movwf	6
 16031  011B  3001               	movlw	1	; select bank2/3
 16032  011C  0087               	movwf	7
 16033  011D  1601               	bsf	1,4
 16034                           
 16035                           ;Dimmer_B1.c: 282: }
 16036                           ;Dimmer_B1.c: 283: } else {
 16037  011E  2981               	goto	i1l765
 16038  011F                     i1l6586:	
 16039                           
 16040                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue > ((char)(25*0.8))) {
 16041  011F  087A               	movf	_DimmerLightsIntr,w
 16042  0120  3E04               	addlw	4
 16043  0121  0086               	movwf	6
 16044  0122  3001               	movlw	1	; select bank2/3
 16045  0123  0087               	movwf	7
 16046  0124  3015               	movlw	21
 16047  0125  0201               	subwf	1,w
 16048  0126  1C03               	skipc
 16049  0127  2930               	goto	i1l6590
 16050                           
 16051                           ;Dimmer_B1.c: 285: DimmerLightsIntr->DimmingValue--;
 16052  0128  087A               	movf	_DimmerLightsIntr,w
 16053  0129  3E04               	addlw	4
 16054  012A  0086               	movwf	6
 16055  012B  3001               	movlw	1	; select bank2/3
 16056  012C  0087               	movwf	7
 16057  012D  3001               	movlw	1
 16058  012E  0281               	subwf	1,f
 16059                           
 16060                           ;Dimmer_B1.c: 286: } else {
 16061  012F  2981               	goto	i1l765
 16062  0130                     i1l6590:	
 16063                           
 16064                           ;Dimmer_B1.c: 287: DimmerLightsIntr->AdjStatus = 0;
 16065  0130  087A               	movf	_DimmerLightsIntr,w
 16066  0131  0086               	movwf	6
 16067  0132  3001               	movlw	1	; select bank2/3
 16068  0133  0087               	movwf	7
 16069  0134  1201               	bcf	1,4
 16070                           
 16071                           ;Dimmer_B1.c: 288: }
 16072                           ;Dimmer_B1.c: 289: }
 16073                           ;Dimmer_B1.c: 290: } else if (DimmerLightsIntr->AdjRF) {
 16074  0135  2981               	goto	i1l765
 16075  0136                     i1l6592:	
 16076  0136  087A               	movf	_DimmerLightsIntr,w
 16077  0137  0086               	movwf	6
 16078  0138  3001               	movlw	1	; select bank2/3
 16079  0139  0087               	movwf	7
 16080  013A  1D01               	btfss	1,2
 16081  013B  297C               	goto	i1l6606
 16082                           
 16083                           ;Dimmer_B1.c: 291: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 16084  013C  087A               	movf	_DimmerLightsIntr,w
 16085  013D  3E04               	addlw	4
 16086  013E  0086               	movwf	6
 16087  013F  3001               	movlw	1	; select bank2/3
 16088  0140  0087               	movwf	7
 16089  0141  087A               	movf	_DimmerLightsIntr,w
 16090  0142  3E05               	addlw	5
 16091  0143  0084               	movwf	4
 16092  0144  3001               	movlw	1	; select bank2/3
 16093  0145  0085               	movwf	5
 16094  0146  0800               	movf	0,w
 16095  0147  0201               	subwf	1,w
 16096  0148  1803               	skipnc
 16097  0149  2954               	goto	i1l6598
 16098                           
 16099                           ;Dimmer_B1.c: 292: DimmerLightsIntr->DimmingValue++;
 16100  014A  3001               	movlw	1
 16101  014B  00F2               	movwf	??_setDimmerLights_IntrControl
 16102  014C  087A               	movf	_DimmerLightsIntr,w
 16103  014D  3E04               	addlw	4
 16104  014E  0086               	movwf	6
 16105  014F  3001               	movlw	1	; select bank2/3
 16106  0150  0087               	movwf	7
 16107  0151  0872               	movf	??_setDimmerLights_IntrControl,w
 16108  0152  0781               	addwf	1,f
 16109                           
 16110                           ;Dimmer_B1.c: 293: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 16111  0153  2969               	goto	i1l6602
 16112  0154                     i1l6598:	
 16113  0154  087A               	movf	_DimmerLightsIntr,w
 16114  0155  3E05               	addlw	5
 16115  0156  0086               	movwf	6
 16116  0157  3001               	movlw	1	; select bank2/3
 16117  0158  0087               	movwf	7
 16118  0159  087A               	movf	_DimmerLightsIntr,w
 16119  015A  3E04               	addlw	4
 16120  015B  0084               	movwf	4
 16121  015C  3001               	movlw	1	; select bank2/3
 16122  015D  0085               	movwf	5
 16123  015E  0800               	movf	0,w
 16124  015F  0201               	subwf	1,w
 16125  0160  1803               	skipnc
 16126  0161  2969               	goto	i1l6602
 16127                           
 16128                           ;Dimmer_B1.c: 294: DimmerLightsIntr->DimmingValue--;
 16129  0162  087A               	movf	_DimmerLightsIntr,w
 16130  0163  3E04               	addlw	4
 16131  0164  0086               	movwf	6
 16132  0165  3001               	movlw	1	; select bank2/3
 16133  0166  0087               	movwf	7
 16134  0167  3001               	movlw	1
 16135  0168  0281               	subwf	1,f
 16136  0169                     i1l6602:	
 16137                           
 16138                           ;Dimmer_B1.c: 295: }
 16139                           ;Dimmer_B1.c: 296: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16140  0169  087A               	movf	_DimmerLightsIntr,w
 16141  016A  3E05               	addlw	5
 16142  016B  0086               	movwf	6
 16143  016C  3001               	movlw	1	; select bank2/3
 16144  016D  0087               	movwf	7
 16145  016E  087A               	movf	_DimmerLightsIntr,w
 16146  016F  3E04               	addlw	4
 16147  0170  0084               	movwf	4
 16148  0171  3001               	movlw	1	; select bank2/3
 16149  0172  0085               	movwf	5
 16150  0173  0800               	movf	0,w
 16151  0174  0601               	xorwf	1,w
 16152  0175  1D03               	skipz
 16153  0176  2981               	goto	i1l765
 16154                           
 16155                           ;Dimmer_B1.c: 297: DimmerLightsIntr->AdjRF = 0;
 16156  0177  087A               	movf	_DimmerLightsIntr,w
 16157  0178  0086               	movwf	6
 16158  0179  3001               	movlw	1	; select bank2/3
 16159  017A  0087               	movwf	7
 16160  017B  1101               	bcf	1,2
 16161  017C                     i1l6606:	
 16162                           ;Dimmer_B1.c: 299: }
 16163                           ;Dimmer_B1.c: 300: } else {
 16164                           
 16165                           ;Dimmer_B1.c: 298: DimmerLightsIntr->Signal = 0;
 16166                           
 16167                           
 16168                           ;Dimmer_B1.c: 301: DimmerLightsIntr->Signal = 0;
 16169  017C  087A               	movf	_DimmerLightsIntr,w
 16170  017D  0086               	movwf	6
 16171  017E  3001               	movlw	1	; select bank2/3
 16172  017F  0087               	movwf	7
 16173  0180  1081               	bcf	1,1
 16174  0181                     i1l765:	
 16175                           
 16176                           ;Dimmer_B1.c: 302: }
 16177                           ;Dimmer_B1.c: 303: }
 16178                           ;Dimmer_B1.c: 304: }
 16179                           ;Dimmer_B1.c: 305: }
 16180                           ;Dimmer_B1.c: 306: }
 16181                           ;Dimmer_B1.c: 307: if (DimmerLightsIntr->MosfetSignal == 1) {
 16182  0181  087A               	movf	_DimmerLightsIntr,w
 16183  0182  3E09               	addlw	9
 16184  0183  0086               	movwf	6
 16185  0184  3001               	movlw	1	; select bank2/3
 16186  0185  0087               	movwf	7
 16187  0186  1D81               	btfss	1,3
 16188  0187  0008               	return
 16189                           
 16190                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignalCount++;
 16191  0188  3001               	movlw	1
 16192  0189  00F2               	movwf	??_setDimmerLights_IntrControl
 16193  018A  087A               	movf	_DimmerLightsIntr,w
 16194  018B  3E0C               	addlw	12
 16195  018C  0086               	movwf	6
 16196  018D  3001               	movlw	1	; select bank2/3
 16197  018E  0087               	movwf	7
 16198  018F  0872               	movf	??_setDimmerLights_IntrControl,w
 16199  0190  0781               	addwf	1,f
 16200                           
 16201                           ;Dimmer_B1.c: 309: if (DimmerLightsIntr->MosfetSignalCount == 110) {
 16202  0191  087A               	movf	_DimmerLightsIntr,w
 16203  0192  3E0C               	addlw	12
 16204  0193  0086               	movwf	6
 16205  0194  3001               	movlw	1	; select bank2/3
 16206  0195  0087               	movwf	7
 16207  0196  0801               	movf	1,w
 16208  0197  3A6E               	xorlw	110
 16209  0198  1D03               	skipz
 16210  0199  0008               	return
 16211                           
 16212                           ;Dimmer_B1.c: 311: DimmerLightsIntr->MosfetSignalCount = 0;
 16213  019A  087A               	movf	_DimmerLightsIntr,w
 16214  019B  3E0C               	addlw	12
 16215  019C  0086               	movwf	6
 16216  019D  3001               	movlw	1	; select bank2/3
 16217  019E  0087               	movwf	7
 16218  019F  0181               	clrf	1
 16219                           
 16220                           ;Dimmer_B1.c: 312: DimmerLightsIntr->MosfetSignal = 0;
 16221  01A0  087A               	movf	_DimmerLightsIntr,w
 16222  01A1  3E09               	addlw	9
 16223  01A2  0086               	movwf	6
 16224  01A3  3001               	movlw	1	; select bank2/3
 16225  01A4  0087               	movwf	7
 16226  01A5  1181               	bcf	1,3
 16227  01A6  0008               	return
 16228  01A7                     __end_of_setDimmerLights_IntrControl:	
 16229                           
 16230                           	psect	text111
 16231  118F                     __ptext111:	
 16232 ;; *************** function _DimmerIntrPointSelect *****************
 16233 ;; Defined at:
 16234 ;;		line 72 in file "../src/Dimmer_B1.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;  lights          1    wreg     unsigned char 
 16237 ;; Auto vars:     Size  Location     Type
 16238 ;;  lights          1    1[COMMON] unsigned char 
 16239 ;; Return value:  Size  Location     Type
 16240 ;;		None               void
 16241 ;; Registers used:
 16242 ;;		wreg
 16243 ;; Tracked objects:
 16244 ;;		On entry : 0/0
 16245 ;;		On exit  : 0/0
 16246 ;;		Unchanged: 0/0
 16247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;Total ram usage:        2 bytes
 16253 ;; Hardware stack levels used:    1
 16254 ;; This function calls:
 16255 ;;		Nothing
 16256 ;; This function is called by:
 16257 ;;		_setDimmerLights_IntrControl
 16258 ;; This function uses a non-reentrant model
 16259 ;;
 16260                           
 16261                           
 16262                           ;psect for function _DimmerIntrPointSelect
 16263  118F                     _DimmerIntrPointSelect:	
 16264                           
 16265                           ;incstack = 0
 16266                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16267                           ;DimmerIntrPointSelect@lights stored from wreg
 16268  118F  00F1               	movwf	DimmerIntrPointSelect@lights
 16269                           
 16270                           ;Dimmer_B1.c: 74: if (lights == 1) {
 16271  1190  0871               	movf	DimmerIntrPointSelect@lights,w
 16272  1191  3A01               	xorlw	1
 16273  1192  1D03               	skipz
 16274  1193  2998               	goto	i1l752
 16275                           
 16276                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 16277  1194  3035               	movlw	_DimmerLights1& (0+255)
 16278  1195  00F0               	movwf	??_DimmerIntrPointSelect
 16279  1196  0870               	movf	??_DimmerIntrPointSelect,w
 16280  1197  00FA               	movwf	_DimmerLightsIntr
 16281  1198                     i1l752:	
 16282                           
 16283                           ;Dimmer_B1.c: 76: }
 16284                           ;Dimmer_B1.c: 79: if (lights == 2) {
 16285  1198  0871               	movf	DimmerIntrPointSelect@lights,w
 16286  1199  3A02               	xorlw	2
 16287  119A  1D03               	skipz
 16288  119B  0008               	return
 16289                           
 16290                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 16291  119C  3044               	movlw	_DimmerLights2& (0+255)
 16292  119D  00F0               	movwf	??_DimmerIntrPointSelect
 16293  119E  0870               	movf	??_DimmerIntrPointSelect,w
 16294  119F  00FA               	movwf	_DimmerLightsIntr
 16295  11A0  0008               	return
 16296  11A1                     __end_of_DimmerIntrPointSelect:	
 16297                           
 16298                           	psect	text112
 16299  10BC                     __ptext112:	
 16300 ;; *************** function _IOC_ISR *****************
 16301 ;; Defined at:
 16302 ;;		line 401 in file "../src/MCU_B1.c"
 16303 ;; Parameters:    Size  Location     Type
 16304 ;;		None
 16305 ;; Auto vars:     Size  Location     Type
 16306 ;;		None
 16307 ;; Return value:  Size  Location     Type
 16308 ;;		None               void
 16309 ;; Registers used:
 16310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16311 ;; Tracked objects:
 16312 ;;		On entry : 0/0
 16313 ;;		On exit  : 0/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;Total ram usage:        0 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    3
 16323 ;; This function calls:
 16324 ;;		_setDimmerReClock
 16325 ;; This function is called by:
 16326 ;;		_ISR
 16327 ;; This function uses a non-reentrant model
 16328 ;;
 16329                           
 16330                           
 16331                           ;psect for function _IOC_ISR
 16332  10BC                     _IOC_ISR:	
 16333                           
 16334                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCBF2 == 1) {
 16335                           
 16336                           ;incstack = 0
 16337                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16338  10BC  1D8B               	btfss	11,3	;volatile
 16339  10BD  0008               	return
 16340  10BE  0027               	movlb	7	; select bank7
 16341  10BF  1D16               	btfss	22,2	;volatile
 16342  10C0  0008               	return
 16343                           
 16344                           ;MCU_B1.c: 403: IOCBF2 = 0;
 16345  10C1  1116               	bcf	22,2	;volatile
 16346                           
 16347                           ;MCU_B1.c: 404: IOCIF = 0;
 16348  10C2  100B               	bcf	11,0	;volatile
 16349                           
 16350                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 16351  10C3  0021               	movlb	1	; select bank1
 16352  10C4  1C20               	btfss	_myMain^(0+128),0
 16353  10C5  0008               	return
 16354                           
 16355                           ;MCU_B1.c: 407: setDimmerReClock();
 16356  10C6  319F  279E         	fcall	_setDimmerReClock
 16357  10C8  0008               	return
 16358  10C9                     __end_of_IOC_ISR:	
 16359                           
 16360                           	psect	text113
 16361  1F9E                     __ptext113:	
 16362 ;; *************** function _setDimmerReClock *****************
 16363 ;; Defined at:
 16364 ;;		line 244 in file "../src/MCU_B1.c"
 16365 ;; Parameters:    Size  Location     Type
 16366 ;;		None
 16367 ;; Auto vars:     Size  Location     Type
 16368 ;;		None
 16369 ;; Return value:  Size  Location     Type
 16370 ;;		None               void
 16371 ;; Registers used:
 16372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16373 ;; Tracked objects:
 16374 ;;		On entry : 0/0
 16375 ;;		On exit  : 0/0
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;Total ram usage:        0 bytes
 16383 ;; Hardware stack levels used:    1
 16384 ;; Hardware stack levels required when called:    2
 16385 ;; This function calls:
 16386 ;;		_setDimmerLights_IntrIOC_GO
 16387 ;; This function is called by:
 16388 ;;		_IOC_ISR
 16389 ;; This function uses a non-reentrant model
 16390 ;;
 16391                           
 16392                           
 16393                           ;psect for function _setDimmerReClock
 16394  1F9E                     _setDimmerReClock:	
 16395                           
 16396                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 16397                           
 16398                           ;incstack = 0
 16399                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16400  1F9E  3001               	movlw	1
 16401  1F9F  3194  24F9  319F   	fcall	_setDimmerLights_IntrIOC_GO
 16402                           
 16403                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 16404  1FA2  3002               	movlw	2
 16405  1FA3  3194  24F9         	fcall	_setDimmerLights_IntrIOC_GO
 16406  1FA5  0008               	return
 16407  1FA6                     __end_of_setDimmerReClock:	
 16408                           
 16409                           	psect	text114
 16410  14F9                     __ptext114:	
 16411 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16412 ;; Defined at:
 16413 ;;		line 28 in file "../src/Dimmer_B1.c"
 16414 ;; Parameters:    Size  Location     Type
 16415 ;;  lights          1    wreg     unsigned char 
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;  lights          1    2[COMMON] unsigned char 
 16418 ;; Return value:  Size  Location     Type
 16419 ;;		None               void
 16420 ;; Registers used:
 16421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16422 ;; Tracked objects:
 16423 ;;		On entry : 0/0
 16424 ;;		On exit  : 0/0
 16425 ;;		Unchanged: 0/0
 16426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;Total ram usage:        1 bytes
 16432 ;; Hardware stack levels used:    1
 16433 ;; Hardware stack levels required when called:    1
 16434 ;; This function calls:
 16435 ;;		_DimmerIntrIOCPointSelect
 16436 ;; This function is called by:
 16437 ;;		_setDimmerReClock
 16438 ;; This function uses a non-reentrant model
 16439 ;;
 16440                           
 16441                           
 16442                           ;psect for function _setDimmerLights_IntrIOC_GO
 16443  14F9                     _setDimmerLights_IntrIOC_GO:	
 16444                           
 16445                           ;incstack = 0
 16446                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16447                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16448  14F9  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16449                           
 16450                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16451  14FA  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16452  14FB  3191  21EA  3194   	fcall	_DimmerIntrIOCPointSelect
 16453                           
 16454                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->MosfetSignal == 0) {
 16455  14FE  0021               	movlb	1	; select bank1
 16456  14FF  0858               	movf	_DimmerLightsIntrIOC^(0+128),w
 16457  1500  3E09               	addlw	9
 16458  1501  0086               	movwf	6
 16459  1502  3001               	movlw	1	; select bank2/3
 16460  1503  0087               	movwf	7
 16461  1504  1981               	btfsc	1,3
 16462  1505  0008               	return
 16463                           
 16464                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 16465  1506  0858               	movf	_DimmerLightsIntrIOC^(0+128),w
 16466  1507  3E09               	addlw	9
 16467  1508  0086               	movwf	6
 16468  1509  3001               	movlw	1	; select bank2/3
 16469  150A  0087               	movwf	7
 16470  150B  1581               	bsf	1,3
 16471                           
 16472                           ;Dimmer_B1.c: 50: DimmerLightsIntrIOC->GO = 1;
 16473  150C  0858               	movf	_DimmerLightsIntrIOC^(0+128),w
 16474  150D  0086               	movwf	6
 16475  150E  3001               	movlw	1	; select bank2/3
 16476  150F  0087               	movwf	7
 16477  1510  1401               	bsf	1,0
 16478                           
 16479                           ;Dimmer_B1.c: 51: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 16480  1511  0858               	movf	_DimmerLightsIntrIOC^(0+128),w
 16481  1512  0086               	movwf	6
 16482  1513  3001               	movlw	1	; select bank2/3
 16483  1514  0087               	movwf	7
 16484  1515  1F01               	btfss	1,6
 16485  1516  0008               	return
 16486                           
 16487                           ;Dimmer_B1.c: 54: if (lights == 1) {
 16488  1517  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16489  1518  3A01               	xorlw	1
 16490  1519  1D03               	skipz
 16491  151A  2D1D               	goto	i1l6194
 16492                           
 16493                           ;Dimmer_B1.c: 55: RA7 = 1;
 16494  151B  0020               	movlb	0	; select bank0
 16495  151C  178C               	bsf	12,7	;volatile
 16496  151D                     i1l6194:	
 16497                           ;Dimmer_B1.c: 56: ;;
 16498                           
 16499                           
 16500                           ;Dimmer_B1.c: 57: }
 16501                           ;Dimmer_B1.c: 60: if (lights == 2) {
 16502  151D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16503  151E  3A02               	xorlw	2
 16504  151F  1D03               	skipz
 16505  1520  0008               	return
 16506                           
 16507                           ;Dimmer_B1.c: 62: RB4 = 1;
 16508  1521  0020               	movlb	0	; select bank0
 16509  1522  160D               	bsf	13,4	;volatile
 16510  1523  0008               	return
 16511  1524                     __end_of_setDimmerLights_IntrIOC_GO:	
 16512                           
 16513                           	psect	text115
 16514  11EA                     __ptext115:	
 16515 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16516 ;; Defined at:
 16517 ;;		line 8 in file "../src/Dimmer_B1.c"
 16518 ;; Parameters:    Size  Location     Type
 16519 ;;  lights          1    wreg     unsigned char 
 16520 ;; Auto vars:     Size  Location     Type
 16521 ;;  lights          1    1[COMMON] unsigned char 
 16522 ;; Return value:  Size  Location     Type
 16523 ;;		None               void
 16524 ;; Registers used:
 16525 ;;		wreg
 16526 ;; Tracked objects:
 16527 ;;		On entry : 0/0
 16528 ;;		On exit  : 0/0
 16529 ;;		Unchanged: 0/0
 16530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;Total ram usage:        2 bytes
 16536 ;; Hardware stack levels used:    1
 16537 ;; This function calls:
 16538 ;;		Nothing
 16539 ;; This function is called by:
 16540 ;;		_setDimmerLights_IntrIOC_GO
 16541 ;; This function uses a non-reentrant model
 16542 ;;
 16543                           
 16544                           
 16545                           ;psect for function _DimmerIntrIOCPointSelect
 16546  11EA                     _DimmerIntrIOCPointSelect:	
 16547                           
 16548                           ;incstack = 0
 16549                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16550                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16551  11EA  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16552                           
 16553                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16554  11EB  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16555  11EC  3A01               	xorlw	1
 16556  11ED  1D03               	skipz
 16557  11EE  29F4               	goto	i1l740
 16558                           
 16559                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16560  11EF  3035               	movlw	_DimmerLights1& (0+255)
 16561  11F0  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16562  11F1  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16563  11F2  0021               	movlb	1	; select bank1
 16564  11F3  00D8               	movwf	_DimmerLightsIntrIOC^(0+128)
 16565  11F4                     i1l740:	
 16566                           
 16567                           ;Dimmer_B1.c: 12: }
 16568                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16569  11F4  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16570  11F5  3A02               	xorlw	2
 16571  11F6  1D03               	skipz
 16572  11F7  0008               	return
 16573                           
 16574                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16575  11F8  3044               	movlw	_DimmerLights2& (0+255)
 16576  11F9  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16577  11FA  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16578  11FB  0021               	movlb	1	; select bank1
 16579  11FC  00D8               	movwf	_DimmerLightsIntrIOC^(0+128)
 16580  11FD  0008               	return
 16581  11FE                     __end_of_DimmerIntrIOCPointSelect:	
 16582                           
 16583                           	psect	text116
 16584  1FCE                     __ptext116:	
 16585 ;; *************** function _INT_ISR *****************
 16586 ;; Defined at:
 16587 ;;		line 348 in file "../src/MCU_B1.c"
 16588 ;; Parameters:    Size  Location     Type
 16589 ;;		None
 16590 ;; Auto vars:     Size  Location     Type
 16591 ;;		None
 16592 ;; Return value:  Size  Location     Type
 16593 ;;		None               void
 16594 ;; Registers used:
 16595 ;;		wreg, status,2, status,0, pclath, cstack
 16596 ;; Tracked objects:
 16597 ;;		On entry : 0/0
 16598 ;;		On exit  : 0/0
 16599 ;;		Unchanged: 0/0
 16600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;Total ram usage:        0 bytes
 16606 ;; Hardware stack levels used:    1
 16607 ;; Hardware stack levels required when called:    1
 16608 ;; This function calls:
 16609 ;;		_setRF_ReceiveGO
 16610 ;; This function is called by:
 16611 ;;		_ISR
 16612 ;; This function uses a non-reentrant model
 16613 ;;
 16614                           
 16615                           
 16616                           ;psect for function _INT_ISR
 16617  1FCE                     _INT_ISR:	
 16618                           
 16619                           ;MCU_B1.c: 349: if (INTE == 1 && INTF == 1) {
 16620                           
 16621                           ;incstack = 0
 16622                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 16623  1FCE  1E0B               	btfss	11,4	;volatile
 16624  1FCF  0008               	return
 16625  1FD0  1C8B               	btfss	11,1	;volatile
 16626  1FD1  0008               	return
 16627                           
 16628                           ;MCU_B1.c: 350: INTF = 0;
 16629  1FD2  108B               	bcf	11,1	;volatile
 16630                           
 16631                           ;MCU_B1.c: 352: setRF_ReceiveGO(1);
 16632  1FD3  3001               	movlw	1
 16633  1FD4  319F  27EA         	fcall	_setRF_ReceiveGO
 16634  1FD6  0008               	return
 16635  1FD7                     __end_of_INT_ISR:	
 16636                           
 16637                           	psect	text117
 16638  1FEA                     __ptext117:	
 16639 ;; *************** function _setRF_ReceiveGO *****************
 16640 ;; Defined at:
 16641 ;;		line 28 in file "../src/RF_Control_B1.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  command         1    wreg     unsigned char 
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;  command         1    0[COMMON] unsigned char 
 16646 ;; Return value:  Size  Location     Type
 16647 ;;		None               void
 16648 ;; Registers used:
 16649 ;;		wreg
 16650 ;; Tracked objects:
 16651 ;;		On entry : 0/0
 16652 ;;		On exit  : 0/0
 16653 ;;		Unchanged: 0/0
 16654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;Total ram usage:        1 bytes
 16660 ;; Hardware stack levels used:    1
 16661 ;; This function calls:
 16662 ;;		Nothing
 16663 ;; This function is called by:
 16664 ;;		_INT_ISR
 16665 ;; This function uses a non-reentrant model
 16666 ;;
 16667                           
 16668                           
 16669                           ;psect for function _setRF_ReceiveGO
 16670  1FEA                     _setRF_ReceiveGO:	
 16671                           
 16672                           ;incstack = 0
 16673                           ; Regs used in _setRF_ReceiveGO: [wreg]
 16674                           ;setRF_ReceiveGO@command stored from wreg
 16675  1FEA  00F0               	movwf	setRF_ReceiveGO@command
 16676                           
 16677                           ;RF_Control_B1.c: 29: if (RF1.RxStatus == 1) {
 16678  1FEB  0021               	movlb	1	; select bank1
 16679  1FEC  1DBF               	btfss	_RF1^(0+128),3
 16680  1FED  0008               	return
 16681                           
 16682                           ;RF_Control_B1.c: 30: RF1.RxStatus = 0;
 16683  1FEE  11BF               	bcf	_RF1^(0+128),3
 16684                           
 16685                           ;RF_Control_B1.c: 31: RF1.Run = 1;
 16686  1FEF  14C0               	bsf	(_RF1^(0+128)+1),1
 16687                           
 16688                           ;RF_Control_B1.c: 32: RF1.ReceiveGO = command;
 16689  1FF0  0870               	movf	setRF_ReceiveGO@command,w
 16690  1FF1  10BF               	bcf	_RF1^(0+128),1
 16691  1FF2  1D03               	skipz
 16692  1FF3  14BF               	bsf	_RF1^(0+128),1
 16693  1FF4  0008               	return
 16694  1FF5                     __end_of_setRF_ReceiveGO:	
 16695  007E                     btemp	set	126	;btemp
 16696  007E                     pic14e$flags	set	126
 16697  007E                     wtemp	set	126
 16698  007E                     wtemp0	set	126
 16699  0080                     wtemp1	set	128
 16700  0082                     wtemp2	set	130
 16701  0084                     wtemp3	set	132
 16702  0086                     wtemp4	set	134
 16703  0088                     wtemp5	set	136
 16704  007F                     wtemp6	set	127
 16705  007E                     ttemp	set	126
 16706  007E                     ttemp0	set	126
 16707  0081                     ttemp1	set	129
 16708  0084                     ttemp2	set	132
 16709  0087                     ttemp3	set	135
 16710  007F                     ttemp4	set	127
 16711  007E                     ltemp	set	126
 16712  007E                     ltemp0	set	126
 16713  0082                     ltemp1	set	130
 16714  0086                     ltemp2	set	134
 16715  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         196
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     78      80
    BANK1            80      0      77
    BANK2            80      0      77
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   99151
                                             74 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    1633
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   26173
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   26173
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   11696
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   11330
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1378
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     266
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     266
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     974
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     974
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   34734
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   34734
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   34080
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   32557
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   13097
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1339
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15011
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   14879
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14813
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14747
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1098
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1098
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7601
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   12067
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   11953
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8505
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1593
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     943
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   12315
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   12315
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     622
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8217
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7327
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     711
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     533
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     533
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     286
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     154
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     154
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0      22
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 29 15:18:31 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l98 07D8  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 13CE  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006F       __end_of_getDimmerLights_StatusFlag 117E  
             _getDimmerLights_StatusFlag 116D                   __end_of_setDelayOff_GO 09AE  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0C85  
                           ___ftadd@sign 0048                                      l100 07EC  
                                    l110 082D                                      l112 083D  
                                    l108 0843                                      l109 083F  
                                    l334 1208                                      l335 1209  
                                    l259 0AAA                                      l284 0D1D  
                                    l285 0D60                                      l378 145C  
                                    l788 11E1                                      _GIE 005F  
                                    _CRC 00D4                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00CE                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BF  
                                    _ISR 0004                                      _WDT 00D2  
                                    _Sw1 0153                                      _Sw2 015C  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1212  
                  _Buzzer_Initialization 1F64                          __end_of_ADC_Set 1F9E  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0DD8  
                  _setDimmerLights_AdjRF 1434                    _setDimmerLights_AdjGo 114D  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 10C9                             ___ftdiv@sign 003D  
                                   l1340 1579                                     l1327 138B  
               ?_DimmerLightsPointSelect 0070                                     l1349 171F  
                        __end_of_IOC_Set 10D6                                     l2605 08DF  
                                   l2288 1110                                     l1933 15AF  
                                   l5230 09B7                                     l6110 0D02  
                                   l5310 0371                                     l1918 0AE6  
                                   l2590 167D                                     l1951 1298  
                                   l2815 0392                                     l6104 0CF9  
                                   l6112 0D05                                     l5304 035E  
                                   l1928 0B3C                                     l5234 09BE  
                                   l6122 0D1A                                     l6106 0CFC  
                                   l5322 03A4                                     l5306 0368  
                                   l5410 06BA                                     l5244 09E6  
                                   l5236 09C8                                     l6140 0D46  
                                   l6124 0D14                                     l6052 0A78  
                                   l5316 0384                                     l5308 036D  
                                   l1884 0442                                     l1965 160D  
                                   l1885 043E                                     l5510 121D  
                                   l5246 09EE                                     l5238 09CD  
                                   l6214 1177                                     l6054 0A7B  
                                   l5326 03B6                                     l5318 038E  
                                   l5422 06D6                                     l5406 06B2  
                                   l1887 047E                                     l1879 040A  
                                   l2792 09F8                                     l5264 13D9  
                                   l5352 072B                                     l6152 0D62  
                                   l6072 0A92                                     l5336 03D1  
                                   l5280 0322                                     l6162 146D  
                                   l6170 13B5                                     l5602 088F  
                                   l2786 09E1                                     l5346 0715  
                                   l6226 1638                                     l6138 0D2E  
                                   l6090 0AC6                                     l6082 0AB9  
                                   l6058 0A81                                     l5418 06CE  
                                   l7036 0817                                     l6164 1478  
                                   l6172 13B8                                     l6084 0ABD  
                                   l6076 0AB0                                     l5276 031B  
                                   l6420 0C61                                     l5606 0897  
                                   l5374 0785                                     l5366 076C  
                                   l5438 0E77                                     l6086 0AC0  
                                   l6078 0AB3                                     l5286 0331  
                                   l5526 14F7                                     l7230 08C8  
                                   l6176 13BE                                     l6440 16CD  
                                   l5472 0EDC                                     l5464 0EC2  
                                   l5456 0EA7                                     l6272 1561  
                                   l7144 0538                                     l6352 0D78  
                                   l7240 08E0                                     l6450 16DD  
                                   l6434 16C4                                     l5466 0ECB  
                                   l5458 0EB5                                     l5562 1231  
                                   l5298 034B                                     l5394 0677  
                                   l5730 0997                                     l6444 16D4  
                                   l6436 16C7                                     l5580 0860  
                                   l5468 0ECE                                     l5388 0661  
                                   l5804 15BF                                     l5492 11B6  
                                   l5724 0984                                     l6356 0D85  
                                   l6446 16D7                                     l5590 0868  
                                   l5574 0855                                     l5734 09A3  
                                   l5910 0FC8                                     l6390 17D3  
                                   l5592 0874                                     l5496 11BC  
                                   l5728 098A                                     l6376 0DC6  
                                   l5658 0C06                                     l7434 13FC  
                                   l7450 0A1F                                     l5906 0FB2  
                                   l6386 17C6                                     l7516 0E2C  
                                   l7620 0CC1                                     l7612 0CA3  
                                   l5852 12DD                                     l7540 0F4C  
                                   l5942 12EF                                     l5598 0886  
                                   l7438 1407                                     l7454 0A25  
                                   l7622 0CC7                                     l5854 12E1  
                                   l5934 15FB                                     l7534 0F31  
                                   l5944 12F2                                     l7480 0A5A  
                                   l7464 0A35                                     l7472 0A41  
                                   l7632 0CEF                                     l7608 0C99  
                                   l5960 141E                                     l7552 0F67  
                                   l7544 0F55                                     l7458 0A2B  
                                   l6762 16EA                                     l6914 1115  
                                   l5948 12F8                                     l7484 0A60  
                                   l7468 0A3B                                     l5964 1424  
                                   l7548 0F5E                                     l7654 17A6  
                                   l5958 141B                                     l7566 0AE9  
                                   l7734 0463                                     l6918 111B  
                                   l6934 01BE                                     l7488 0A66  
                                   l6768 16FF                                     l5896 0F8E  
                                   l7736 0465                                     l7752 0493  
                                   l6960 0203                                     l6944 01CE  
                                   l6936 01C4                                     l7658 17AD  
                                   l7594 0B32                                     l7578 0B01  
                                   l6970 0230                                     l6946 01D6  
                                   l7588 0B27                                     l7764 04B4  
                                   l7676 03FD                    _myMain_Initialization 111E  
                                   l6984 026E                                     l7698 0421  
                                   l6994 02A0                                     _CFGS 0CAE  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1FD7                                     _LATC 010E  
                                   u4015 06BB                                     u4025 06C1  
                                   u4125 0EA8                                     u4055 06D7  
                                   u4065 06DD                                     u4155 0EC3  
                                   u4095 0E7E                                     u4255 14E3  
                                   u4345 086B                                     u3625 09FF  
                                   u4450 0BB4                                     u5155 1462  
                                   u3555 09C3                                     _PEIE 005E  
                                   u4365 0875                                     u3805 0372  
                                   _INTE 005C                                     _INTF 0059  
                                   u4375 087F                                     u3575 09DC  
                                   u4455 0BB2                                     u4385 0887  
                                   u3905 073D                                     u3745 034C  
                                   u4715 125D                                     u3595 09E9  
                                   u3915 074D                                     u3835 0385  
                                   u3925 076D                                     u3935 077C  
                                   u3775 035F                                     u3945 0786  
                                   u3985 0683                                     u3995 0693  
                                   u6565 080D                                     u6805 08AF  
                                   u6815 08D7                                     u6835 08EF  
                                   u6765 1382                                     u7655 041B  
                                   u7785 04A4                                     _LWLO 0CAD  
                                   _RFSW 00D9                          __end_of_INT_Set 1F84  
                                   _RSSI 00DA                                     _WREN 0CAA  
                                   _Buz1 00B3                                     _main 165F  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0BAA  
                        __end_of_RF_Main 1F6D                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1075                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1F9E  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1622                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 10B0            __end_of_DimmerIntrPointSelect 11A1  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                                  ?_main 006A                          __end_of___awdiv 089E  
                        __end_of___ftadd 03E9                          __end_of___ftdiv 07A7  
                        __end_of___ftmul 06FE                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0EE5  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l740 11F4                                    i1l752 1198  
                                  i1l765 0181                   _setDimmerLights_Switch 112D  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EB                                    _RFSW2 00EC  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 1263  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1524  
             _setDimmerLights_IntrIOC_GO 14F9                         __end_of_TMR1_ISR 14A5  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 10BC  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 11D7  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0012  
          __end_of_setLED_Initialization 11B3                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0BAA  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0008                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 08F4                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 16A0                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 106A                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E5E  
                   _setSw_Initialization 1FB6                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0EE5                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 11EA                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0071                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0024  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0B3F  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 13F0                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0A0F                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 113D                                   i1l6194 151D  
                                 i1l6602 0169                                   i1l6606 017C  
                                 i1l6560 00C1                                   i1l6552 00A3  
                                 i1l6564 00C7                                   i1l6548 009D  
                                 i1l6590 0130                                   i1l6566 00CD  
                                 i1l6584 0119                                   i1l6592 0136  
                                 i1l6586 011F                                   i1l6598 0154  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u568_25 007E  
                                 u667_25 149F                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1300  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1F90           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1278                                   _Dimmer 00D5  
                                 _DlySw1 00E7                                   _DlySw2 00E9  
             __end_of_Mcu_Initialization 128D                      __end_of_Buzzer_Main 084A  
                                 _Memory 01A0                                   _Timer1 00CB  
     __end_of_setDimmerLights_TriggerAdj 116D               _setDimmerLights_TriggerAdj 115D  
                                 ___bmul 11B3            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DE                                   _s_data 00DF  
                                 _setLED 0A0F                                   _myMain 00A0  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 07A7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 01A7  
            _setDimmerLights_IntrControl 0045                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 123A                            ?_setRF_Enable 0070  
                        _RfSWPointSelect 128D             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 110F  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 094F  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0041  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 138D  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1098  
              ??_setControl_Lights_Table 0067                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000B                         ?_setDimmerLights 0023  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1F7E                 __end_of_setDimmerReClock 1FA6  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0070  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D6                           _DimmerLights22 00D7  
                   __size_of_setLED_Main 0047                ??_setDimmerLights_Trigger 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 0800  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0024  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1FA6                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 0079  
                      LedPointSelect@led 0020                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 165F                      _CC2500_WriteCommand 12E7  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0056  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0023                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00BD                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0021  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1F97  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1080                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 15E7                  __end_of_RfSWPointSelect 12A3  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 10BC  
                                _IOC_Set 10C9                     __size_of_setLog_Code 0032  
                                _INT_ISR 1FCE                                  _INT_Set 1F7E  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 136E  
                      _Flash_Memory_Read 1319              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1F6A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 106A  
        __end_of_setControl_Lights_Table 0F70                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0D66  
                        _setPercentValue 1727                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 108C                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 118F                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0165  
                                _VarLED2 0169                        __end_of_getRxData 0B3F  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 11FE  
        __end_of_setDimmerLights_Trigger 114D                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 113D  
                                ___awdiv 084A                                  ___ftadd 02F3  
                         ??_setSw_Enable 0022                                  ___ftdiv 06FE  
                                ___ftmul 064A                                  ___fttol 0E5E  
                    __end_of_Switch_Main 1FCE                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0062                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 089E                                  __ptext2 1333  
                                __ptext3 10E3                                  __ptext4 111E  
                                __ptext5 11C5                                  __ptext6 0002  
                                __ptext7 1FC6                                  __ptext8 01A7  
                                __ptext9 1FBE                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 118F  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 138D  
              __end_of_Flash_Memory_Read 1333                               _setRF_Main 03E9  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1FAE  
                      _DimmerLights_Main 1FF5           __size_of_DlyOff_Initialization 000A  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1FEA  
                      ??_setRF_ReceiveGO 0070               __end_of_CC2500_ClearRXFIFO 1F71  
             __end_of_CC2500_ClearTXFIFO 1F75            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 13F0  
                    _DelayOffPointSelect 1212                                  clrloop0 1F8B  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 10E3  
                   end_of_initialization 0041                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 14A5                            _DelayTime_1us 1457  
                      __end_of_setTxData 064A               __end_of_Flash_Memory_Write 1580  
                                init_ram 1F84                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1F85                               _setSw_Main 01A7  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1412  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 11A1  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0CF5                            _CC2500_TxData 0A71  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 10F1  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 16E3  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1FD7  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0023                   setSw_Initialization@sw 0023  
              __end_of_DimmerLights_Main 2000                       _Mcu_Initialization 1278  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$5462 0067  
                        _setSw_Main$5463 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1412                  __end_of_Sw_DimmerOnFunc 0DD8  
                __end_of_setPercentValue 176D                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 14CF                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1622  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1434  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1319  
                   _setRF_Initialization 1075                              _Switch_Main 1FC6  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 11D7  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1263  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 11C5                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 11EA  
                      __size_of_TMR1_ISR 0028                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C                     __end_of_setMemory_GO 12B9  
          __size_of_setDimmerLights_Main 0070                           __end_of_setLED 0A71  
                         __end_of_setBuz 0800          _getDimmerLights_StatusFlag$2255 0022  
                   _CC2500_FrequencyCabr 1080                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0F70  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 15B2  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 124E  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 136E                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setSw_Enable 134F  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1F79  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00E0                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 110F                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00DB                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00DC  
                            __pdataBANK3 01C5                                 ??_setLED 0022  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1F75               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 15E7                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4530 0068                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0086  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0135  
                          _DimmerLights2 0144                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 00DD  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                              _getBuz_GO 117E      __end_of_Flash_Memory_Initialization 058D  
            _Flash_Memory_Initialization 04C6                                 ?___awdiv 0020  
                              __ptext100 1F71                                __ptext101 1F6D  
                              __ptext110 0045                                __ptext102 12E7  
                              __ptext111 118F                                __ptext103 1F79  
                              __ptext112 10BC                                __ptext104 124E  
                              __ptext113 1F9E                                __ptext105 11FE  
                              __ptext114 14F9                                __ptext106 0800  
                              __ptext115 11EA                                __ptext107 1F64  
                              __ptext116 1FCE                                __ptext117 1FEA  
                              __ptext109 147D                                 ?___ftadd 003E  
                              _getRxData 0AD6                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 1000                          _setRF_ReceiveGO 1FEA  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1F67                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 111E                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1457  
          __end_of_setDimmerLights_AdjGo 115D                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00DD           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 112D  
                           _setRF_Enable 10E3                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1226                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 17B4                      _DimmerLightsIntrIOC 00D8  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 10A4                          SwPointSelect@sw 0021  
                              clear_ram0 1F8A                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 058D      __end_of_DimmerLights_Initialization 12D0  
            _DimmerLights_Initialization 12B9                       _CC2500_ClearRXFIFO 1F6D  
                     _CC2500_ClearTXFIFO 1F71           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1FC6                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0070  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 1551                               ?_getRxData 0070  
                               _TMR1_ISR 147D                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 10B0  
                       _Sw_DimmerAdjFunc 17B4                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                      __end_of_my_MainTime 08F4  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00D0  
            __end_of_CC2500_WriteCommand 1300                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 11C5                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0C16  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 001C  
                               _DelayOff 0078                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1098                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 0009                           setLED_Main@led 0023  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 15B2                    _DlyOff_Initialization 1FE0  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1066  
                       __size_of_WDT_Set 000B                    _Switch_Initialization 10D6  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 10F1                             _setMemory_GO 12A3  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 11FE             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1FF5                        setRFSW_Control@sw 0063  
                              setLED@led 0022                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1333                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 13CE  
                       ??_LedPointSelect 0020                                 ___ftpack 09AE  
                           _setSw_Status 1100                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 176D  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0C16  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                               __ptext10 0D66                                 __ptext11 0C16  
                               __ptext20 0AD6                                 __ptext12 17B4  
                               __ptext21 1580                                 __ptext13 115D  
                               __ptext30 08F4                                 __ptext22 0EE5  
                               __ptext14 114D                                 __ptext31 064A  
                               __ptext23 0F70                                 __ptext15 10D6  
                               __ptext40 1278                                 __ptext32 02F3  
                               __ptext24 094F                                 __ptext16 1FB6  
                               __ptext41 106A                                 __ptext33 117E  
                               __ptext25 14CF                                 __ptext17 110F  
                               __ptext50 1098                                 __ptext42 10B0  
                               __ptext34 0A71                                 __ptext26 11B3  
                               __ptext18 1F6A                                 __ptext51 11A1  
                               __ptext43 1300                                 __ptext35 0CF5  
                               __ptext27 15E7                                 __ptext19 03E9  
                               __ptext60 0C85                                 __ptext52 136E  
                               __ptext44 10C9                                 __ptext36 1412  
                               __ptext28 15B2                                 __ptext61 1622  
                               __ptext53 16E3                                 __ptext45 1F7E  
                               __ptext37 12D0                                 __ptext29 1434  
                               __ptext70 1F90                                 __ptext62 0DD8  
                               __ptext54 108C                                 __ptext46 1066  
                               __ptext38 1F67                                 __ptext71 1FAE  
                               __ptext63 0A0F                                 __ptext55 04C6  
                               __ptext47 1F97                                 __ptext39 1075  
                               __ptext80 13CE                                 __ptext72 0B3F  
                               __ptext64 13F0                                 __ptext56 1551  
                               __ptext48 10A4                                 __ptext81 09AE  
                               __ptext73 058D                                 __ptext65 123A  
                               __ptext57 1FD7                                 __ptext49 176D  
                               __ptext90 1FE0                                 __ptext82 10F1  
                               __ptext74 1100                                 __ptext66 12A3  
                               __ptext58 1319                                 __ptext91 1212  
                               __ptext83 128D                                 __ptext75 1226  
                               __ptext67 116D                                 __ptext59 1FF5  
                               __ptext92 1263                                 __ptext84 113D  
                               __ptext76 0BAA                                 __ptext68 12B9  
                               __ptext93 1F75                                 __ptext85 112D  
                               __ptext77 1727                                 __ptext69 1524  
                               __ptext94 16A0                                 __ptext86 11D7  
                               __ptext78 0E5E                                 __ptext95 14A5  
                               __ptext87 07A7                                 __ptext79 06FE  
                               __ptext96 134F                                 __ptext88 084A  
                               __ptext97 13AD                                 __ptext89 1FA6  
                               __ptext98 1080                                 __ptext99 1457  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1100  
          __end_of_Dimmer_Initialization 1F97             __end_of_setDimmerLights_Main 0CF5  
                           ??_setSw_Main 0065                            setLED@command 0021  
                          __size_of_main 0041                              _setRF_Learn 1FBE  
               __end_of_CC2500_SIDLEMode 1F79               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1226               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 123A                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                          _CC2500_ReadByte 12D0  
                            _my_MainTime 089E                       _CC2500_InitPATable 134F  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 04C6                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0015                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006A  
                               main@argv 006C                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 16A0              __end_of_Flash_Memory_Modify 1727  
                      ??_getPercentValue 0059                              _setLog_Code 1580  
            __end_of_Flash_Memory_Unlock 1FE0                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 13AD                       __end_of_setSw_Main 02F3  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 14CF                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1551  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1524  
            __end_of_setDimmerLights_Adj 165F                              ??_setTxData 0020  
                       ?_setRF_ReceiveGO 0070                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1F67     __size_of_setDimmerLights_IntrControl 0162  
                   _Flash_Memory_Erasing 108C                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1FAE  
    __size_of_setDimmerLights_IntrIOC_GO 002B                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1FB6                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 094F         __size_of_setControl_Lights_Table 008B  
                 __end_of_DelayTimejudge 14F9     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 147D                 __end_of_Sw_DimmerAdjFunc 1800  
                __end_of_CC2500_ReadByte 12E7             __end_of_setSw_Initialization 1FBE  
                        _Timeout_Counter 124E                     getPercentValue@value 005B  
             __end_of_LED_Initialization 10A4         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1F6A  
               __end_of_Sw_DimmerOffFunc 0C85          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0D66  
                  __end_of_CC2500_TxData 0AD6                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 16E3  
