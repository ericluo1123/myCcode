

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 01 16:20:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	intentry,global,class=CODE,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	dabs	1,0x7E,2
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0008                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  011D                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0194                     	;# 
   215  0195                     	;# 
   216  0196                     	;# 
   217  0197                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019C                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  020D                     	;# 
   230  0210                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0216                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0217                     	;# 
   246  0291                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0293                     	;# 
   250  0298                     	;# 
   251  0298                     	;# 
   252  0299                     	;# 
   253  029A                     	;# 
   254  0394                     	;# 
   255  0395                     	;# 
   256  0396                     	;# 
   257  0FE4                     	;# 
   258  0FE5                     	;# 
   259  0FE6                     	;# 
   260  0FE7                     	;# 
   261  0FE8                     	;# 
   262  0FE9                     	;# 
   263  0FEA                     	;# 
   264  0FEB                     	;# 
   265  0FED                     	;# 
   266  0FEE                     	;# 
   267  0FEF                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0095                     	;# 
   302  0096                     	;# 
   303  0097                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  011D                     	;# 
   317  018C                     	;# 
   318  018D                     	;# 
   319  018E                     	;# 
   320  0191                     	;# 
   321  0191                     	;# 
   322  0192                     	;# 
   323  0193                     	;# 
   324  0193                     	;# 
   325  0194                     	;# 
   326  0195                     	;# 
   327  0196                     	;# 
   328  0197                     	;# 
   329  0199                     	;# 
   330  019A                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020D                     	;# 
   341  0210                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0298                     	;# 
   362  0298                     	;# 
   363  0299                     	;# 
   364  029A                     	;# 
   365  0394                     	;# 
   366  0395                     	;# 
   367  0396                     	;# 
   368  0FE4                     	;# 
   369  0FE5                     	;# 
   370  0FE6                     	;# 
   371  0FE7                     	;# 
   372  0FE8                     	;# 
   373  0FE9                     	;# 
   374  0FEA                     	;# 
   375  0FEB                     	;# 
   376  0FED                     	;# 
   377  0FEE                     	;# 
   378  0FEF                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0095                     	;# 
   413  0096                     	;# 
   414  0097                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009B                     	;# 
   419  009C                     	;# 
   420  009D                     	;# 
   421  009E                     	;# 
   422  010C                     	;# 
   423  010D                     	;# 
   424  010E                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  011D                     	;# 
   428  018C                     	;# 
   429  018D                     	;# 
   430  018E                     	;# 
   431  0191                     	;# 
   432  0191                     	;# 
   433  0192                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0194                     	;# 
   437  0195                     	;# 
   438  0196                     	;# 
   439  0197                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020D                     	;# 
   452  0210                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0291                     	;# 
   469  0291                     	;# 
   470  0292                     	;# 
   471  0293                     	;# 
   472  0298                     	;# 
   473  0298                     	;# 
   474  0299                     	;# 
   475  029A                     	;# 
   476  0394                     	;# 
   477  0395                     	;# 
   478  0396                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  0010                     	;# 
   506  0011                     	;# 
   507  0012                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  0090                     	;# 
   521  0091                     	;# 
   522  0092                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0099                     	;# 
   527  009A                     	;# 
   528  009B                     	;# 
   529  009B                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  010C                     	;# 
   534  010D                     	;# 
   535  010E                     	;# 
   536  0116                     	;# 
   537  0117                     	;# 
   538  011D                     	;# 
   539  018C                     	;# 
   540  018D                     	;# 
   541  018E                     	;# 
   542  0191                     	;# 
   543  0191                     	;# 
   544  0192                     	;# 
   545  0193                     	;# 
   546  0193                     	;# 
   547  0194                     	;# 
   548  0195                     	;# 
   549  0196                     	;# 
   550  0197                     	;# 
   551  0199                     	;# 
   552  019A                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019C                     	;# 
   558  019C                     	;# 
   559  019D                     	;# 
   560  019E                     	;# 
   561  019F                     	;# 
   562  020D                     	;# 
   563  0210                     	;# 
   564  0211                     	;# 
   565  0211                     	;# 
   566  0212                     	;# 
   567  0212                     	;# 
   568  0213                     	;# 
   569  0213                     	;# 
   570  0214                     	;# 
   571  0214                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0216                     	;# 
   576  0216                     	;# 
   577  0217                     	;# 
   578  0217                     	;# 
   579  0291                     	;# 
   580  0291                     	;# 
   581  0292                     	;# 
   582  0293                     	;# 
   583  0298                     	;# 
   584  0298                     	;# 
   585  0299                     	;# 
   586  029A                     	;# 
   587  0394                     	;# 
   588  0395                     	;# 
   589  0396                     	;# 
   590  0FE4                     	;# 
   591  0FE5                     	;# 
   592  0FE6                     	;# 
   593  0FE7                     	;# 
   594  0FE8                     	;# 
   595  0FE9                     	;# 
   596  0FEA                     	;# 
   597  0FEB                     	;# 
   598  0FED                     	;# 
   599  0FEE                     	;# 
   600  0FEF                     	;# 
   601  0000                     	;# 
   602  0001                     	;# 
   603  0002                     	;# 
   604  0003                     	;# 
   605  0004                     	;# 
   606  0005                     	;# 
   607  0006                     	;# 
   608  0007                     	;# 
   609  0008                     	;# 
   610  0009                     	;# 
   611  000A                     	;# 
   612  000B                     	;# 
   613  000C                     	;# 
   614  000D                     	;# 
   615  000E                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0015                     	;# 
   620  0016                     	;# 
   621  0016                     	;# 
   622  0017                     	;# 
   623  0018                     	;# 
   624  0019                     	;# 
   625  001A                     	;# 
   626  001B                     	;# 
   627  001C                     	;# 
   628  008C                     	;# 
   629  008D                     	;# 
   630  008E                     	;# 
   631  0090                     	;# 
   632  0091                     	;# 
   633  0092                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  0199                     	;# 
   663  019A                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019C                     	;# 
   669  019C                     	;# 
   670  019D                     	;# 
   671  019E                     	;# 
   672  019F                     	;# 
   673  020D                     	;# 
   674  0210                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0216                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0217                     	;# 
   690  0291                     	;# 
   691  0291                     	;# 
   692  0292                     	;# 
   693  0293                     	;# 
   694  0298                     	;# 
   695  0298                     	;# 
   696  0299                     	;# 
   697  029A                     	;# 
   698  0394                     	;# 
   699  0395                     	;# 
   700  0396                     	;# 
   701  0FE4                     	;# 
   702  0FE5                     	;# 
   703  0FE6                     	;# 
   704  0FE7                     	;# 
   705  0FE8                     	;# 
   706  0FE9                     	;# 
   707  0FEA                     	;# 
   708  0FEB                     	;# 
   709  0FED                     	;# 
   710  0FEE                     	;# 
   711  0FEF                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  0010                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0095                     	;# 
   746  0096                     	;# 
   747  0097                     	;# 
   748  0099                     	;# 
   749  009A                     	;# 
   750  009B                     	;# 
   751  009B                     	;# 
   752  009C                     	;# 
   753  009D                     	;# 
   754  009E                     	;# 
   755  010C                     	;# 
   756  010D                     	;# 
   757  010E                     	;# 
   758  0116                     	;# 
   759  0117                     	;# 
   760  011D                     	;# 
   761  018C                     	;# 
   762  018D                     	;# 
   763  018E                     	;# 
   764  0191                     	;# 
   765  0191                     	;# 
   766  0192                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0194                     	;# 
   770  0195                     	;# 
   771  0196                     	;# 
   772  0197                     	;# 
   773  0199                     	;# 
   774  019A                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019C                     	;# 
   780  019C                     	;# 
   781  019D                     	;# 
   782  019E                     	;# 
   783  019F                     	;# 
   784  020D                     	;# 
   785  0210                     	;# 
   786  0211                     	;# 
   787  0211                     	;# 
   788  0212                     	;# 
   789  0212                     	;# 
   790  0213                     	;# 
   791  0213                     	;# 
   792  0214                     	;# 
   793  0214                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0216                     	;# 
   798  0216                     	;# 
   799  0217                     	;# 
   800  0217                     	;# 
   801  0291                     	;# 
   802  0291                     	;# 
   803  0292                     	;# 
   804  0293                     	;# 
   805  0298                     	;# 
   806  0298                     	;# 
   807  0299                     	;# 
   808  029A                     	;# 
   809  0394                     	;# 
   810  0395                     	;# 
   811  0396                     	;# 
   812  0FE4                     	;# 
   813  0FE5                     	;# 
   814  0FE6                     	;# 
   815  0FE7                     	;# 
   816  0FE8                     	;# 
   817  0FE9                     	;# 
   818  0FEA                     	;# 
   819  0FEB                     	;# 
   820  0FED                     	;# 
   821  0FEE                     	;# 
   822  0FEF                     	;# 
   823  0000                     	;# 
   824  0001                     	;# 
   825  0002                     	;# 
   826  0003                     	;# 
   827  0004                     	;# 
   828  0005                     	;# 
   829  0006                     	;# 
   830  0007                     	;# 
   831  0008                     	;# 
   832  0009                     	;# 
   833  000A                     	;# 
   834  000B                     	;# 
   835  000C                     	;# 
   836  000D                     	;# 
   837  000E                     	;# 
   838  0010                     	;# 
   839  0011                     	;# 
   840  0012                     	;# 
   841  0015                     	;# 
   842  0016                     	;# 
   843  0016                     	;# 
   844  0017                     	;# 
   845  0018                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  0090                     	;# 
   854  0091                     	;# 
   855  0092                     	;# 
   856  0095                     	;# 
   857  0096                     	;# 
   858  0097                     	;# 
   859  0099                     	;# 
   860  009A                     	;# 
   861  009B                     	;# 
   862  009B                     	;# 
   863  009C                     	;# 
   864  009D                     	;# 
   865  009E                     	;# 
   866  010C                     	;# 
   867  010D                     	;# 
   868  010E                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  011D                     	;# 
   872  018C                     	;# 
   873  018D                     	;# 
   874  018E                     	;# 
   875  0191                     	;# 
   876  0191                     	;# 
   877  0192                     	;# 
   878  0193                     	;# 
   879  0193                     	;# 
   880  0194                     	;# 
   881  0195                     	;# 
   882  0196                     	;# 
   883  0197                     	;# 
   884  0199                     	;# 
   885  019A                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019C                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019F                     	;# 
   895  020D                     	;# 
   896  0210                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  0291                     	;# 
   913  0291                     	;# 
   914  0292                     	;# 
   915  0293                     	;# 
   916  0298                     	;# 
   917  0298                     	;# 
   918  0299                     	;# 
   919  029A                     	;# 
   920  0394                     	;# 
   921  0395                     	;# 
   922  0396                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0010                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0090                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  010C                     	;# 
   978  010D                     	;# 
   979  010E                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  011D                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  018E                     	;# 
   986  0191                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0197                     	;# 
   995  0199                     	;# 
   996  019A                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019C                     	;# 
  1002  019C                     	;# 
  1003  019D                     	;# 
  1004  019E                     	;# 
  1005  019F                     	;# 
  1006  020D                     	;# 
  1007  0210                     	;# 
  1008  0211                     	;# 
  1009  0211                     	;# 
  1010  0212                     	;# 
  1011  0212                     	;# 
  1012  0213                     	;# 
  1013  0213                     	;# 
  1014  0214                     	;# 
  1015  0214                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0216                     	;# 
  1020  0216                     	;# 
  1021  0217                     	;# 
  1022  0217                     	;# 
  1023  0291                     	;# 
  1024  0291                     	;# 
  1025  0292                     	;# 
  1026  0293                     	;# 
  1027  0298                     	;# 
  1028  0298                     	;# 
  1029  0299                     	;# 
  1030  029A                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  008E                     	;# 
  1075  0090                     	;# 
  1076  0091                     	;# 
  1077  0092                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  010E                     	;# 
  1091  0116                     	;# 
  1092  0117                     	;# 
  1093  011D                     	;# 
  1094  018C                     	;# 
  1095  018D                     	;# 
  1096  018E                     	;# 
  1097  0191                     	;# 
  1098  0191                     	;# 
  1099  0192                     	;# 
  1100  0193                     	;# 
  1101  0193                     	;# 
  1102  0194                     	;# 
  1103  0195                     	;# 
  1104  0196                     	;# 
  1105  0197                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019C                     	;# 
  1113  019C                     	;# 
  1114  019D                     	;# 
  1115  019E                     	;# 
  1116  019F                     	;# 
  1117  020D                     	;# 
  1118  0210                     	;# 
  1119  0211                     	;# 
  1120  0211                     	;# 
  1121  0212                     	;# 
  1122  0212                     	;# 
  1123  0213                     	;# 
  1124  0213                     	;# 
  1125  0214                     	;# 
  1126  0214                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0216                     	;# 
  1131  0216                     	;# 
  1132  0217                     	;# 
  1133  0217                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0298                     	;# 
  1139  0298                     	;# 
  1140  0299                     	;# 
  1141  029A                     	;# 
  1142  0394                     	;# 
  1143  0395                     	;# 
  1144  0396                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156  0000                     	;# 
  1157  0001                     	;# 
  1158  0002                     	;# 
  1159  0003                     	;# 
  1160  0004                     	;# 
  1161  0005                     	;# 
  1162  0006                     	;# 
  1163  0007                     	;# 
  1164  0008                     	;# 
  1165  0009                     	;# 
  1166  000A                     	;# 
  1167  000B                     	;# 
  1168  000C                     	;# 
  1169  000D                     	;# 
  1170  000E                     	;# 
  1171  0010                     	;# 
  1172  0011                     	;# 
  1173  0012                     	;# 
  1174  0015                     	;# 
  1175  0016                     	;# 
  1176  0016                     	;# 
  1177  0017                     	;# 
  1178  0018                     	;# 
  1179  0019                     	;# 
  1180  001A                     	;# 
  1181  001B                     	;# 
  1182  001C                     	;# 
  1183  008C                     	;# 
  1184  008D                     	;# 
  1185  008E                     	;# 
  1186  0090                     	;# 
  1187  0091                     	;# 
  1188  0092                     	;# 
  1189  0095                     	;# 
  1190  0096                     	;# 
  1191  0097                     	;# 
  1192  0099                     	;# 
  1193  009A                     	;# 
  1194  009B                     	;# 
  1195  009B                     	;# 
  1196  009C                     	;# 
  1197  009D                     	;# 
  1198  009E                     	;# 
  1199  010C                     	;# 
  1200  010D                     	;# 
  1201  010E                     	;# 
  1202  0116                     	;# 
  1203  0117                     	;# 
  1204  011D                     	;# 
  1205  018C                     	;# 
  1206  018D                     	;# 
  1207  018E                     	;# 
  1208  0191                     	;# 
  1209  0191                     	;# 
  1210  0192                     	;# 
  1211  0193                     	;# 
  1212  0193                     	;# 
  1213  0194                     	;# 
  1214  0195                     	;# 
  1215  0196                     	;# 
  1216  0197                     	;# 
  1217  0199                     	;# 
  1218  019A                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019C                     	;# 
  1224  019C                     	;# 
  1225  019D                     	;# 
  1226  019E                     	;# 
  1227  019F                     	;# 
  1228  020D                     	;# 
  1229  0210                     	;# 
  1230  0211                     	;# 
  1231  0211                     	;# 
  1232  0212                     	;# 
  1233  0212                     	;# 
  1234  0213                     	;# 
  1235  0213                     	;# 
  1236  0214                     	;# 
  1237  0214                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  0394                     	;# 
  1254  0395                     	;# 
  1255  0396                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  0010                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0015                     	;# 
  1286  0016                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001C                     	;# 
  1294  008C                     	;# 
  1295  008D                     	;# 
  1296  008E                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0095                     	;# 
  1301  0096                     	;# 
  1302  0097                     	;# 
  1303  0099                     	;# 
  1304  009A                     	;# 
  1305  009B                     	;# 
  1306  009B                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009E                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010E                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  011D                     	;# 
  1316  018C                     	;# 
  1317  018D                     	;# 
  1318  018E                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0194                     	;# 
  1325  0195                     	;# 
  1326  0196                     	;# 
  1327  0197                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019C                     	;# 
  1335  019C                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  020D                     	;# 
  1340  0210                     	;# 
  1341  0211                     	;# 
  1342  0211                     	;# 
  1343  0212                     	;# 
  1344  0212                     	;# 
  1345  0213                     	;# 
  1346  0213                     	;# 
  1347  0214                     	;# 
  1348  0214                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0216                     	;# 
  1353  0216                     	;# 
  1354  0217                     	;# 
  1355  0217                     	;# 
  1356  0291                     	;# 
  1357  0291                     	;# 
  1358  0292                     	;# 
  1359  0293                     	;# 
  1360  0298                     	;# 
  1361  0298                     	;# 
  1362  0299                     	;# 
  1363  029A                     	;# 
  1364  0394                     	;# 
  1365  0395                     	;# 
  1366  0396                     	;# 
  1367  0FE4                     	;# 
  1368  0FE5                     	;# 
  1369  0FE6                     	;# 
  1370  0FE7                     	;# 
  1371  0FE8                     	;# 
  1372  0FE9                     	;# 
  1373  0FEA                     	;# 
  1374  0FEB                     	;# 
  1375  0FED                     	;# 
  1376  0FEE                     	;# 
  1377  0FEF                     	;# 
  1378  0000                     	;# 
  1379  0001                     	;# 
  1380  0002                     	;# 
  1381  0003                     	;# 
  1382  0004                     	;# 
  1383  0005                     	;# 
  1384  0006                     	;# 
  1385  0007                     	;# 
  1386  0008                     	;# 
  1387  0009                     	;# 
  1388  000A                     	;# 
  1389  000B                     	;# 
  1390  000C                     	;# 
  1391  000D                     	;# 
  1392  000E                     	;# 
  1393  0010                     	;# 
  1394  0011                     	;# 
  1395  0012                     	;# 
  1396  0015                     	;# 
  1397  0016                     	;# 
  1398  0016                     	;# 
  1399  0017                     	;# 
  1400  0018                     	;# 
  1401  0019                     	;# 
  1402  001A                     	;# 
  1403  001B                     	;# 
  1404  001C                     	;# 
  1405  008C                     	;# 
  1406  008D                     	;# 
  1407  008E                     	;# 
  1408  0090                     	;# 
  1409  0091                     	;# 
  1410  0092                     	;# 
  1411  0095                     	;# 
  1412  0096                     	;# 
  1413  0097                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  010C                     	;# 
  1422  010D                     	;# 
  1423  010E                     	;# 
  1424  0116                     	;# 
  1425  0117                     	;# 
  1426  011D                     	;# 
  1427  018C                     	;# 
  1428  018D                     	;# 
  1429  018E                     	;# 
  1430  0191                     	;# 
  1431  0191                     	;# 
  1432  0192                     	;# 
  1433  0193                     	;# 
  1434  0193                     	;# 
  1435  0194                     	;# 
  1436  0195                     	;# 
  1437  0196                     	;# 
  1438  0197                     	;# 
  1439  0199                     	;# 
  1440  019A                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019C                     	;# 
  1446  019C                     	;# 
  1447  019D                     	;# 
  1448  019E                     	;# 
  1449  019F                     	;# 
  1450  020D                     	;# 
  1451  0210                     	;# 
  1452  0211                     	;# 
  1453  0211                     	;# 
  1454  0212                     	;# 
  1455  0212                     	;# 
  1456  0213                     	;# 
  1457  0213                     	;# 
  1458  0214                     	;# 
  1459  0214                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0216                     	;# 
  1464  0216                     	;# 
  1465  0217                     	;# 
  1466  0217                     	;# 
  1467  0291                     	;# 
  1468  0291                     	;# 
  1469  0292                     	;# 
  1470  0293                     	;# 
  1471  0298                     	;# 
  1472  0298                     	;# 
  1473  0299                     	;# 
  1474  029A                     	;# 
  1475  0394                     	;# 
  1476  0395                     	;# 
  1477  0396                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  0090                     	;# 
  1520  0091                     	;# 
  1521  0092                     	;# 
  1522  0095                     	;# 
  1523  0096                     	;# 
  1524  0097                     	;# 
  1525  0099                     	;# 
  1526  009A                     	;# 
  1527  009B                     	;# 
  1528  009B                     	;# 
  1529  009C                     	;# 
  1530  009D                     	;# 
  1531  009E                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0197                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020D                     	;# 
  1562  0210                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0298                     	;# 
  1583  0298                     	;# 
  1584  0299                     	;# 
  1585  029A                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0011                     	;# 
  1617  0012                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  008C                     	;# 
  1628  008D                     	;# 
  1629  008E                     	;# 
  1630  0090                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0095                     	;# 
  1634  0096                     	;# 
  1635  0097                     	;# 
  1636  0099                     	;# 
  1637  009A                     	;# 
  1638  009B                     	;# 
  1639  009B                     	;# 
  1640  009C                     	;# 
  1641  009D                     	;# 
  1642  009E                     	;# 
  1643  010C                     	;# 
  1644  010D                     	;# 
  1645  010E                     	;# 
  1646  0116                     	;# 
  1647  0117                     	;# 
  1648  011D                     	;# 
  1649  018C                     	;# 
  1650  018D                     	;# 
  1651  018E                     	;# 
  1652  0191                     	;# 
  1653  0191                     	;# 
  1654  0192                     	;# 
  1655  0193                     	;# 
  1656  0193                     	;# 
  1657  0194                     	;# 
  1658  0195                     	;# 
  1659  0196                     	;# 
  1660  0197                     	;# 
  1661  0199                     	;# 
  1662  019A                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  019C                     	;# 
  1669  019D                     	;# 
  1670  019E                     	;# 
  1671  019F                     	;# 
  1672  020D                     	;# 
  1673  0210                     	;# 
  1674  0211                     	;# 
  1675  0211                     	;# 
  1676  0212                     	;# 
  1677  0212                     	;# 
  1678  0213                     	;# 
  1679  0213                     	;# 
  1680  0214                     	;# 
  1681  0214                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0216                     	;# 
  1686  0216                     	;# 
  1687  0217                     	;# 
  1688  0217                     	;# 
  1689  0291                     	;# 
  1690  0291                     	;# 
  1691  0292                     	;# 
  1692  0293                     	;# 
  1693  0298                     	;# 
  1694  0298                     	;# 
  1695  0299                     	;# 
  1696  029A                     	;# 
  1697  0394                     	;# 
  1698  0395                     	;# 
  1699  0396                     	;# 
  1700  0FE4                     	;# 
  1701  0FE5                     	;# 
  1702  0FE6                     	;# 
  1703  0FE7                     	;# 
  1704  0FE8                     	;# 
  1705  0FE9                     	;# 
  1706  0FEA                     	;# 
  1707  0FEB                     	;# 
  1708  0FED                     	;# 
  1709  0FEE                     	;# 
  1710  0FEF                     	;# 
  1711  0000                     	;# 
  1712  0001                     	;# 
  1713  0002                     	;# 
  1714  0003                     	;# 
  1715  0004                     	;# 
  1716  0005                     	;# 
  1717  0006                     	;# 
  1718  0007                     	;# 
  1719  0008                     	;# 
  1720  0009                     	;# 
  1721  000A                     	;# 
  1722  000B                     	;# 
  1723  000C                     	;# 
  1724  000D                     	;# 
  1725  000E                     	;# 
  1726  0010                     	;# 
  1727  0011                     	;# 
  1728  0012                     	;# 
  1729  0015                     	;# 
  1730  0016                     	;# 
  1731  0016                     	;# 
  1732  0017                     	;# 
  1733  0018                     	;# 
  1734  0019                     	;# 
  1735  001A                     	;# 
  1736  001B                     	;# 
  1737  001C                     	;# 
  1738  008C                     	;# 
  1739  008D                     	;# 
  1740  008E                     	;# 
  1741  0090                     	;# 
  1742  0091                     	;# 
  1743  0092                     	;# 
  1744  0095                     	;# 
  1745  0096                     	;# 
  1746  0097                     	;# 
  1747  0099                     	;# 
  1748  009A                     	;# 
  1749  009B                     	;# 
  1750  009B                     	;# 
  1751  009C                     	;# 
  1752  009D                     	;# 
  1753  009E                     	;# 
  1754  010C                     	;# 
  1755  010D                     	;# 
  1756  010E                     	;# 
  1757  0116                     	;# 
  1758  0117                     	;# 
  1759  011D                     	;# 
  1760  018C                     	;# 
  1761  018D                     	;# 
  1762  018E                     	;# 
  1763  0191                     	;# 
  1764  0191                     	;# 
  1765  0192                     	;# 
  1766  0193                     	;# 
  1767  0193                     	;# 
  1768  0194                     	;# 
  1769  0195                     	;# 
  1770  0196                     	;# 
  1771  0197                     	;# 
  1772  0199                     	;# 
  1773  019A                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019C                     	;# 
  1779  019C                     	;# 
  1780  019D                     	;# 
  1781  019E                     	;# 
  1782  019F                     	;# 
  1783  020D                     	;# 
  1784  0210                     	;# 
  1785  0211                     	;# 
  1786  0211                     	;# 
  1787  0212                     	;# 
  1788  0212                     	;# 
  1789  0213                     	;# 
  1790  0213                     	;# 
  1791  0214                     	;# 
  1792  0214                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0216                     	;# 
  1797  0216                     	;# 
  1798  0217                     	;# 
  1799  0217                     	;# 
  1800  0291                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0298                     	;# 
  1805  0298                     	;# 
  1806  0299                     	;# 
  1807  029A                     	;# 
  1808  0394                     	;# 
  1809  0395                     	;# 
  1810  0396                     	;# 
  1811  0FE4                     	;# 
  1812  0FE5                     	;# 
  1813  0FE6                     	;# 
  1814  0FE7                     	;# 
  1815  0FE8                     	;# 
  1816  0FE9                     	;# 
  1817  0FEA                     	;# 
  1818  0FEB                     	;# 
  1819  0FED                     	;# 
  1820  0FEE                     	;# 
  1821  0FEF                     	;# 
  1822  0000                     	;# 
  1823  0001                     	;# 
  1824  0002                     	;# 
  1825  0003                     	;# 
  1826  0004                     	;# 
  1827  0005                     	;# 
  1828  0006                     	;# 
  1829  0007                     	;# 
  1830  0008                     	;# 
  1831  0009                     	;# 
  1832  000A                     	;# 
  1833  000B                     	;# 
  1834  000C                     	;# 
  1835  000D                     	;# 
  1836  000E                     	;# 
  1837  0010                     	;# 
  1838  0011                     	;# 
  1839  0012                     	;# 
  1840  0015                     	;# 
  1841  0016                     	;# 
  1842  0016                     	;# 
  1843  0017                     	;# 
  1844  0018                     	;# 
  1845  0019                     	;# 
  1846  001A                     	;# 
  1847  001B                     	;# 
  1848  001C                     	;# 
  1849  008C                     	;# 
  1850  008D                     	;# 
  1851  008E                     	;# 
  1852  0090                     	;# 
  1853  0091                     	;# 
  1854  0092                     	;# 
  1855  0095                     	;# 
  1856  0096                     	;# 
  1857  0097                     	;# 
  1858  0099                     	;# 
  1859  009A                     	;# 
  1860  009B                     	;# 
  1861  009B                     	;# 
  1862  009C                     	;# 
  1863  009D                     	;# 
  1864  009E                     	;# 
  1865  010C                     	;# 
  1866  010D                     	;# 
  1867  010E                     	;# 
  1868  0116                     	;# 
  1869  0117                     	;# 
  1870  011D                     	;# 
  1871  018C                     	;# 
  1872  018D                     	;# 
  1873  018E                     	;# 
  1874  0191                     	;# 
  1875  0191                     	;# 
  1876  0192                     	;# 
  1877  0193                     	;# 
  1878  0193                     	;# 
  1879  0194                     	;# 
  1880  0195                     	;# 
  1881  0196                     	;# 
  1882  0197                     	;# 
  1883  0199                     	;# 
  1884  019A                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019C                     	;# 
  1890  019C                     	;# 
  1891  019D                     	;# 
  1892  019E                     	;# 
  1893  019F                     	;# 
  1894  020D                     	;# 
  1895  0210                     	;# 
  1896  0211                     	;# 
  1897  0211                     	;# 
  1898  0212                     	;# 
  1899  0212                     	;# 
  1900  0213                     	;# 
  1901  0213                     	;# 
  1902  0214                     	;# 
  1903  0214                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0216                     	;# 
  1908  0216                     	;# 
  1909  0217                     	;# 
  1910  0217                     	;# 
  1911  0291                     	;# 
  1912  0291                     	;# 
  1913  0292                     	;# 
  1914  0293                     	;# 
  1915  0298                     	;# 
  1916  0298                     	;# 
  1917  0299                     	;# 
  1918  029A                     	;# 
  1919  0394                     	;# 
  1920  0395                     	;# 
  1921  0396                     	;# 
  1922  0FE4                     	;# 
  1923  0FE5                     	;# 
  1924  0FE6                     	;# 
  1925  0FE7                     	;# 
  1926  0FE8                     	;# 
  1927  0FE9                     	;# 
  1928  0FEA                     	;# 
  1929  0FEB                     	;# 
  1930  0FED                     	;# 
  1931  0FEE                     	;# 
  1932  0FEF                     	;# 
  1933  0000                     	;# 
  1934  0001                     	;# 
  1935  0002                     	;# 
  1936  0003                     	;# 
  1937  0004                     	;# 
  1938  0005                     	;# 
  1939  0006                     	;# 
  1940  0007                     	;# 
  1941  0008                     	;# 
  1942  0009                     	;# 
  1943  000A                     	;# 
  1944  000B                     	;# 
  1945  000C                     	;# 
  1946  000D                     	;# 
  1947  000E                     	;# 
  1948  0010                     	;# 
  1949  0011                     	;# 
  1950  0012                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  0090                     	;# 
  1964  0091                     	;# 
  1965  0092                     	;# 
  1966  0095                     	;# 
  1967  0096                     	;# 
  1968  0097                     	;# 
  1969  0099                     	;# 
  1970  009A                     	;# 
  1971  009B                     	;# 
  1972  009B                     	;# 
  1973  009C                     	;# 
  1974  009D                     	;# 
  1975  009E                     	;# 
  1976  010C                     	;# 
  1977  010D                     	;# 
  1978  010E                     	;# 
  1979  0116                     	;# 
  1980  0117                     	;# 
  1981  011D                     	;# 
  1982  018C                     	;# 
  1983  018D                     	;# 
  1984  018E                     	;# 
  1985  0191                     	;# 
  1986  0191                     	;# 
  1987  0192                     	;# 
  1988  0193                     	;# 
  1989  0193                     	;# 
  1990  0194                     	;# 
  1991  0195                     	;# 
  1992  0196                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  019A                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019C                     	;# 
  2001  019C                     	;# 
  2002  019D                     	;# 
  2003  019E                     	;# 
  2004  019F                     	;# 
  2005  020D                     	;# 
  2006  0210                     	;# 
  2007  0211                     	;# 
  2008  0211                     	;# 
  2009  0212                     	;# 
  2010  0212                     	;# 
  2011  0213                     	;# 
  2012  0213                     	;# 
  2013  0214                     	;# 
  2014  0214                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0216                     	;# 
  2019  0216                     	;# 
  2020  0217                     	;# 
  2021  0217                     	;# 
  2022  0291                     	;# 
  2023  0291                     	;# 
  2024  0292                     	;# 
  2025  0293                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  0394                     	;# 
  2031  0395                     	;# 
  2032  0396                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;# 
  2044  0000                     	;# 
  2045  0001                     	;# 
  2046  0002                     	;# 
  2047  0003                     	;# 
  2048  0004                     	;# 
  2049  0005                     	;# 
  2050  0006                     	;# 
  2051  0007                     	;# 
  2052  0008                     	;# 
  2053  0009                     	;# 
  2054  000A                     	;# 
  2055  000B                     	;# 
  2056  000C                     	;# 
  2057  000D                     	;# 
  2058  000E                     	;# 
  2059  0010                     	;# 
  2060  0011                     	;# 
  2061  0012                     	;# 
  2062  0015                     	;# 
  2063  0016                     	;# 
  2064  0016                     	;# 
  2065  0017                     	;# 
  2066  0018                     	;# 
  2067  0019                     	;# 
  2068  001A                     	;# 
  2069  001B                     	;# 
  2070  001C                     	;# 
  2071  008C                     	;# 
  2072  008D                     	;# 
  2073  008E                     	;# 
  2074  0090                     	;# 
  2075  0091                     	;# 
  2076  0092                     	;# 
  2077  0095                     	;# 
  2078  0096                     	;# 
  2079  0097                     	;# 
  2080  0099                     	;# 
  2081  009A                     	;# 
  2082  009B                     	;# 
  2083  009B                     	;# 
  2084  009C                     	;# 
  2085  009D                     	;# 
  2086  009E                     	;# 
  2087  010C                     	;# 
  2088  010D                     	;# 
  2089  010E                     	;# 
  2090  0116                     	;# 
  2091  0117                     	;# 
  2092  011D                     	;# 
  2093  018C                     	;# 
  2094  018D                     	;# 
  2095  018E                     	;# 
  2096  0191                     	;# 
  2097  0191                     	;# 
  2098  0192                     	;# 
  2099  0193                     	;# 
  2100  0193                     	;# 
  2101  0194                     	;# 
  2102  0195                     	;# 
  2103  0196                     	;# 
  2104  0197                     	;# 
  2105  0199                     	;# 
  2106  019A                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019C                     	;# 
  2112  019C                     	;# 
  2113  019D                     	;# 
  2114  019E                     	;# 
  2115  019F                     	;# 
  2116  020D                     	;# 
  2117  0210                     	;# 
  2118  0211                     	;# 
  2119  0211                     	;# 
  2120  0212                     	;# 
  2121  0212                     	;# 
  2122  0213                     	;# 
  2123  0213                     	;# 
  2124  0214                     	;# 
  2125  0214                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0216                     	;# 
  2130  0216                     	;# 
  2131  0217                     	;# 
  2132  0217                     	;# 
  2133  0291                     	;# 
  2134  0291                     	;# 
  2135  0292                     	;# 
  2136  0293                     	;# 
  2137  0298                     	;# 
  2138  0298                     	;# 
  2139  0299                     	;# 
  2140  029A                     	;# 
  2141  0394                     	;# 
  2142  0395                     	;# 
  2143  0396                     	;# 
  2144  0FE4                     	;# 
  2145  0FE5                     	;# 
  2146  0FE6                     	;# 
  2147  0FE7                     	;# 
  2148  0FE8                     	;# 
  2149  0FE9                     	;# 
  2150  0FEA                     	;# 
  2151  0FEB                     	;# 
  2152  0FED                     	;# 
  2153  0FEE                     	;# 
  2154  0FEF                     	;# 
  2155                           
  2156                           	psect	idataBANK4
  2157  1F34                     __pidataBANK4:	
  2158                           
  2159                           ;initializer for __product
  2160  1F34  3463               	retlw	99
  2161  1F35  3402               	retlw	2
  2162  1F36  3400               	retlw	0
  2163  1F37  3400               	retlw	0
  2164  1F38  3400               	retlw	0
  2165  1F39  3400               	retlw	0
  2166  1F3A  3400               	retlw	0
  2167  1F3B  3400               	retlw	0
  2168  1F3C  3400               	retlw	0
  2169  1F3D  3400               	retlw	0
  2170  1F3E  3400               	retlw	0
  2171  1F3F  3400               	retlw	0
  2172  1F40  34FF               	retlw	255
  2173  1F41  34FF               	retlw	255
  2174  1F42  34FF               	retlw	255
  2175  1F43  3400               	retlw	0
  2176  1F44  3400               	retlw	0
  2177  1F45  3400               	retlw	0
  2178  1F46  3400               	retlw	0
  2179  1F47  3400               	retlw	0
  2180  1F48  3400               	retlw	0
  2181  1F49  3400               	retlw	0
  2182  1F4A  3400               	retlw	0
  2183  1F4B  3400               	retlw	0
  2184  1F4C  3400               	retlw	0
  2185  1F4D  3400               	retlw	0
  2186  1F4E  3400               	retlw	0
  2187  1F4F  3400               	retlw	0
  2188  1F50  3400               	retlw	0
  2189  1F51  3400               	retlw	0
  2190  1F52  3400               	retlw	0
  2191  1F53  3400               	retlw	0
  2192                           
  2193                           	psect	stringtext
  2194  1000                     __pstringtext:	
  2195  1000                     _CC2500_registers_address:	
  2196  1000  3403               	retlw	3
  2197  1001  3416               	retlw	22
  2198  1002  3417               	retlw	23
  2199  1003  341E               	retlw	30
  2200  1004  341F               	retlw	31
  2201  1005  3420               	retlw	32
  2202  1006  342A               	retlw	42
  2203  1007  342B               	retlw	43
  2204  1008  340B               	retlw	11
  2205  1009  340C               	retlw	12
  2206  100A  340D               	retlw	13
  2207  100B  340E               	retlw	14
  2208  100C  340F               	retlw	15
  2209  100D  3410               	retlw	16
  2210  100E  3411               	retlw	17
  2211  100F  3412               	retlw	18
  2212  1010  3413               	retlw	19
  2213  1011  3414               	retlw	20
  2214  1012  340A               	retlw	10
  2215  1013  3415               	retlw	21
  2216  1014  3421               	retlw	33
  2217  1015  3422               	retlw	34
  2218  1016  3418               	retlw	24
  2219  1017  3419               	retlw	25
  2220  1018  341A               	retlw	26
  2221  1019  341B               	retlw	27
  2222  101A  341C               	retlw	28
  2223  101B  341D               	retlw	29
  2224  101C  3423               	retlw	35
  2225  101D  3424               	retlw	36
  2226  101E  3425               	retlw	37
  2227  101F  3426               	retlw	38
  2228  1020  3429               	retlw	41
  2229  1021  342C               	retlw	44
  2230  1022  342D               	retlw	45
  2231  1023  342E               	retlw	46
  2232  1024  3400               	retlw	0
  2233  1025  3401               	retlw	1
  2234  1026  3402               	retlw	2
  2235  1027  3407               	retlw	7
  2236  1028  3408               	retlw	8
  2237  1029  3409               	retlw	9
  2238  102A  3406               	retlw	6
  2239  102B  3404               	retlw	4
  2240  102C  3405               	retlw	5
  2241  102D  3427               	retlw	39
  2242  102E  3428               	retlw	40
  2243  102F                     __end_of_CC2500_registers_address:	
  2244  102F                     _CC2500_rfSettings:	
  2245  102F  3407               	retlw	7
  2246  1030  3407               	retlw	7
  2247  1031  3430               	retlw	48
  2248  1032  3487               	retlw	135
  2249  1033  346B               	retlw	107
  2250  1034  34F8               	retlw	248
  2251  1035  347F               	retlw	127
  2252  1036  343F               	retlw	63
  2253  1037  3409               	retlw	9
  2254  1038  3400               	retlw	0
  2255  1039  345C               	retlw	92
  2256  103A  34A7               	retlw	167
  2257  103B  3462               	retlw	98
  2258  103C  3486               	retlw	134
  2259  103D  3483               	retlw	131
  2260  103E  3403               	retlw	3
  2261  103F  3422               	retlw	34
  2262  1040  34F8               	retlw	248
  2263  1041  3400               	retlw	0
  2264  1042  3444               	retlw	68
  2265  1043  34B6               	retlw	182
  2266  1044  3410               	retlw	16
  2267  1045  3418               	retlw	24
  2268  1046  341D               	retlw	29
  2269  1047  341C               	retlw	28
  2270  1048  34C7               	retlw	199
  2271  1049  3400               	retlw	0
  2272  104A  34B2               	retlw	178
  2273  104B  34EA               	retlw	234
  2274  104C  340A               	retlw	10
  2275  104D  3400               	retlw	0
  2276  104E  3411               	retlw	17
  2277  104F  3459               	retlw	89
  2278  1050  3488               	retlw	136
  2279  1051  3431               	retlw	49
  2280  1052  340B               	retlw	11
  2281  1053  342F               	retlw	47
  2282  1054  342E               	retlw	46
  2283  1055  3406               	retlw	6
  2284  1056  3404               	retlw	4
  2285  1057  3405               	retlw	5
  2286  1058  3400               	retlw	0
  2287  1059  3430               	retlw	48
  2288  105A  34D3               	retlw	211
  2289  105B  3491               	retlw	145
  2290  105C  3441               	retlw	65
  2291  105D  3400               	retlw	0
  2292  105E                     __end_of_CC2500_rfSettings:	
  2293  105E                     _CC2500_patable_vaule:	
  2294  105E  34FE               	retlw	254
  2295  105F  34FE               	retlw	254
  2296  1060  34FE               	retlw	254
  2297  1061  34FE               	retlw	254
  2298  1062  34FE               	retlw	254
  2299  1063  34FE               	retlw	254
  2300  1064  34FE               	retlw	254
  2301  1065  34FE               	retlw	254
  2302  1066                     __end_of_CC2500_patable_vaule:	
  2303                           
  2304                           	psect	nvBANK0
  2305  006E                     __pnvBANK0:	
  2306  006E                     _product:	
  2307  006E                     	ds	1
  2308  000C                     _PORTA	set	12
  2309  000D                     _PORTB	set	13
  2310  000E                     _PORTC	set	14
  2311  0018                     _T1CON	set	24
  2312  0017                     _TMR1H	set	23
  2313  0016                     _TMR1L	set	22
  2314  005F                     _GIE	set	95
  2315  005B                     _IOCIE	set	91
  2316  0058                     _IOCIF	set	88
  2317  005E                     _PEIE	set	94
  2318  0060                     _RA0	set	96
  2319  0063                     _RA3	set	99
  2320  0064                     _RA4	set	100
  2321  0066                     _RA6	set	102
  2322  0067                     _RA7	set	103
  2323  0068                     _RB0	set	104
  2324  0069                     _RB1	set	105
  2325  006B                     _RB3	set	107
  2326  006C                     _RB4	set	108
  2327  006D                     _RB5	set	109
  2328  0070                     _RC0	set	112
  2329  0071                     _RC1	set	113
  2330  0072                     _RC2	set	114
  2331  0074                     _RC4	set	116
  2332  0075                     _RC5	set	117
  2333  0077                     _RC7	set	119
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  1069                     _WPUB1	set	4201
  2365  106A                     _WPUB2	set	4202
  2366  0396                     _IOCBF	set	918
  2367  0395                     _IOCBN	set	917
  2368  0394                     _IOCBP	set	916
  2369  1CB2                     _IOCBF2	set	7346
  2370                           
  2371                           ; #config settings
  2372  0000                     
  2373                           	psect	cinit
  2374  0015                     start_initialization:	
  2375  0015                     __initialization:	
  2376                           
  2377                           ; Clear objects allocated to BITCOMMON
  2378  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2379                           
  2380                           ; Clear objects allocated to COMMON
  2381  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2382  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2383  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2384  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2385  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BANK0
  2388  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  001C  30A0               	movlw	low __pbssBANK1
  2392  001D  0084               	movwf	4
  2393  001E  3000               	movlw	high __pbssBANK1
  2394  001F  0085               	movwf	5
  2395  0020  3049               	movlw	73
  2396  0021  319B  233F  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  0024  3020               	movlw	low __pbssBANK2
  2400  0025  0084               	movwf	4
  2401  0026  3001               	movlw	high __pbssBANK2
  2402  0027  0085               	movwf	5
  2403  0028  3050               	movlw	80
  2404  0029  319B  233F  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  002C  30A0               	movlw	low __pbssBANK3
  2408  002D  0084               	movwf	4
  2409  002E  3001               	movlw	high __pbssBANK3
  2410  002F  0085               	movwf	5
  2411  0030  3046               	movlw	70
  2412  0031  319B  233F  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK4
  2415  0034  3020               	movlw	low __pbssBANK4
  2416  0035  0084               	movwf	4
  2417  0036  3002               	movlw	high __pbssBANK4
  2418  0037  0085               	movwf	5
  2419  0038  3025               	movlw	37
  2420  0039  319B  233F  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Initialize objects allocated to BANK4
  2423  003C  3034               	movlw	low __pidataBANK4
  2424  003D  0084               	movwf	4
  2425  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2426  003F  0085               	movwf	5
  2427  0040  3045               	movlw	low __pdataBANK4
  2428  0041  0086               	movwf	6
  2429  0042  3002               	movlw	high __pdataBANK4
  2430  0043  0087               	movwf	7
  2431  0044  3020               	movlw	32
  2432  0045  319B  2339         	fcall	init_ram
  2433  0047                     end_of_initialization:	
  2434                           ;End of C runtime variable initialization code
  2435                           
  2436  0047                     __end_of__initialization:	
  2437  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2438  0048  0020               	movlb	0
  2439  0049  3195  2DE4         	ljmp	_main	;jump to C main() function
  2440                           
  2441                           	psect	bitbssCOMMON
  2442  03E8                     __pbitbssCOMMON:	
  2443  03E8                     _Receive_OK:	
  2444  03E8                     	ds	1
  2445  03E9                     _Transceive_OK:	
  2446  03E9                     	ds	1
  2447                           
  2448                           	psect	bssCOMMON
  2449  0078                     __pbssCOMMON:	
  2450  0078                     _DelayOff:	
  2451  0078                     	ds	1
  2452  0079                     _DimmerLightsIntr:	
  2453  0079                     	ds	1
  2454  007A                     _LED:	
  2455  007A                     	ds	1
  2456  007B                     _SPI0Buffer:	
  2457  007B                     	ds	1
  2458  007C                     _Sw:	
  2459  007C                     	ds	1
  2460                           
  2461                           	psect	bssBANK0
  2462  006F                     __pbssBANK0:	
  2463  006F                     _DimmerLights:	
  2464  006F                     	ds	1
  2465                           
  2466                           	psect	bssBANK1
  2467  00A0                     __pbssBANK1:	
  2468  00A0                     _myMain:	
  2469  00A0                     	ds	15
  2470  00AF                     _Buz1:	
  2471  00AF                     	ds	12
  2472  00BB                     _RF1:	
  2473  00BB                     	ds	12
  2474  00C7                     _Timer1:	
  2475  00C7                     	ds	3
  2476  00CA                     _WDT:	
  2477  00CA                     	ds	2
  2478  00CC                     _CRC:	
  2479  00CC                     	ds	1
  2480  00CD                     _DimmerLights11:	
  2481  00CD                     	ds	1
  2482  00CE                     _DimmerLights22:	
  2483  00CE                     	ds	1
  2484  00CF                     _DimmerLightsIntrIOC:	
  2485  00CF                     	ds	1
  2486  00D0                     _RSSI:	
  2487  00D0                     	ds	1
  2488  00D1                     _Rx_Length:	
  2489  00D1                     	ds	1
  2490  00D2                     _SwDetect:	
  2491  00D2                     	ds	1
  2492  00D3                     _Tx_Length:	
  2493  00D3                     	ds	1
  2494  00D4                     _r_address:	
  2495  00D4                     	ds	1
  2496  00D5                     _r_data:	
  2497  00D5                     	ds	1
  2498  00D6                     _s_data:	
  2499  00D6                     	ds	1
  2500  00D7                     _Temp:	
  2501  00D7                     	ds	18
  2502                           
  2503                           	psect	bssBANK2
  2504  0120                     __pbssBANK2:	
  2505  0120                     _RF_Data:	
  2506  0120                     	ds	30
  2507  013E                     _Dimmer:	
  2508  013E                     	ds	3
  2509  0141                     _RF_Count:	
  2510  0141                     	ds	2
  2511  0143                     _Load:	
  2512  0143                     	ds	45
  2513                           
  2514                           	psect	bssBANK3
  2515  01A0                     __pbssBANK3:	
  2516  01A0                     _DimmerLights1:	
  2517  01A0                     	ds	15
  2518  01AF                     _DimmerLights2:	
  2519  01AF                     	ds	15
  2520  01BE                     _Sw1:	
  2521  01BE                     	ds	9
  2522  01C7                     _Sw2:	
  2523  01C7                     	ds	9
  2524  01D0                     _DlySw1:	
  2525  01D0                     	ds	5
  2526  01D5                     _DlySw2:	
  2527  01D5                     	ds	5
  2528  01DA                     _VarErrLED:	
  2529  01DA                     	ds	4
  2530  01DE                     _VarLED1:	
  2531  01DE                     	ds	4
  2532  01E2                     _VarLED2:	
  2533  01E2                     	ds	4
  2534                           
  2535                           	psect	bssBANK4
  2536  0220                     __pbssBANK4:	
  2537  0220                     _Memory:	
  2538  0220                     	ds	37
  2539                           
  2540                           	psect	dataBANK4
  2541  0245                     __pdataBANK4:	
  2542  0245                     __product:	
  2543  0245                     	ds	32
  2544                           
  2545                           	psect	clrtext
  2546  1B3F                     clear_ram0:	
  2547                           ;	Called with FSR0 containing the base address, and
  2548                           ;	WREG with the size to clear
  2549                           
  2550  1B3F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2551  1B40                     clrloop0:	
  2552  1B40  0180               	clrf	0	;clear RAM location pointed to by FSR
  2553  1B41  3101               	addfsr 0,1
  2554  1B42  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2555  1B43  2B40               	goto	clrloop0	;have we reached the end yet?
  2556  1B44  3400               	retlw	0	;all done for this memory range, return
  2557                           
  2558                           	psect	inittext
  2559  1B39                     init_ram:	
  2560  1B39  00FE               	movwf	126
  2561  1B3A                     initloop:	
  2562  1B3A  0012               	moviw fsr0++
  2563  1B3B  001E               	movwi fsr1++
  2564  1B3C  0BFE               	decfsz	126,f
  2565  1B3D  2B3A               	goto	initloop
  2566  1B3E  3400               	retlw	0
  2567                           
  2568                           	psect	cstackBANK1
  2569  00E9                     __pcstackBANK1:	
  2570  00E9                     setRF_Main@loop_f:	
  2571                           
  2572                           ; 1 bytes @ 0x0
  2573  00E9                     	ds	1
  2574  00EA                     setRF_Main@Receive_OK:	
  2575                           
  2576                           ; 1 bytes @ 0x1
  2577  00EA                     	ds	1
  2578  00EB                     setRF_Main@error:	
  2579                           
  2580                           ; 1 bytes @ 0x2
  2581  00EB                     	ds	1
  2582  00EC                     ?_main:	
  2583  00EC                     main@argc:	
  2584                           ; 2 bytes @ 0x3
  2585                           
  2586                           
  2587                           ; 2 bytes @ 0x3
  2588  00EC                     	ds	2
  2589  00EE                     main@argv:	
  2590                           
  2591                           ; 2 bytes @ 0x5
  2592  00EE                     	ds	2
  2593                           
  2594                           	psect	cstackCOMMON
  2595  0070                     __pcstackCOMMON:	
  2596  0070                     ?_Timeout_Counter:	
  2597  0070                     ?_set_TimeoutCleared:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_WriteByte:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_WriteCommand:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_ReadStatus:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ReadByte:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_PowerRST:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_InitSetREG:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_InitPATable:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_ClearTXFIFO:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_ClearRXFIFO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_FrequencyCabr:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_SIDLEMode:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DlyOff_Initialization:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DlyOff_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_ErrorClose:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_Initialization:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_Dimmer_Initialization:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_Main:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_Line:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setTxData:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setLED_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setLED_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_Fosc_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_IO_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_TMR1_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_ADC_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_IOC_Set:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_WDT_Set:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_IOC_ISR:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_TMR1_ISR:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Write:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Modify:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_WDT_Clearing:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setLoad_AH_AL_Restore:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_setTemp_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_setTemp_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setRF_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setRF_Main:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_RF_RxDisable:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getRxData:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_setLog_Code:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setControl_Lights_Table:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setRFSW_Control:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setRFSW_AdjControl:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setRF_DimmerValue:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setSw_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setMain_Exception:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setSw_Main:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_myMain_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_my_MainTimer:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Buzzer_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Buzzer_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_CC2500_TxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_CC2500_RxData:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_CC2500_PowerOnInitial:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_DelayOffPointSelect:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_DelayOff_Initialization:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DelayOff_Main:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DimmerIntrIOCPointSelect:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ??_DimmerIntrIOCPointSelect:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_DimmerIntrPointSelect:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ??_DimmerIntrPointSelect:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setDimmerLights_IntrControl:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_DimmerLightsPointSelect:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DimmerLights_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DimmerLights_Main:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setDimmerLights_SwOn:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setDimmerLights_SwOff:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setDimmerLights_AdjControl:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setDimmerLights_AdjRF:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_LedPointSelect:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_LED_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_LED_Main:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_Mcu_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_ISR:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_setDimmerReClock:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_Flash_Memory_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_Flash_Memory_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Flash_Memory_Unlock:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Flash_Memory_Erasing:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_setMemory_Modify:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_setMemory_LoopSave:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_WDT_Main:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Load_Initialization:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_getLoad_AD:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Load_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_Temp_Initialization:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_getTemp_AD:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_Temp_Main:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_RF_Initialization:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_RF_Main:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_setRF_Learn:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_TouchPower:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_SwPointSelect:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_Switch_Initialization:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_Switch_Main:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_DelayTimejudge:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_getMain_All_Error_Status:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getLoad_OK:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getMain_LightsStatus:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_setPercentValue:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getPercentValue:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_Flash_Memory_Read:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getMain_LoadOK:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getMain_Lights_Count:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getRF_KeyStatus:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getSw_KeyStatus:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getDelayOff_GO:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmerLights_Status:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getAll_DimmerLights_AdjGO:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDimmer_LoadOK:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getDimmerLights_Line:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936                           
  2937                           ; 1 bytes @ 0x0
  2938  0070                     	ds	1
  2939  0071                     DimmerIntrIOCPointSelect@lights:	
  2940  0071                     DimmerIntrPointSelect@lights:	
  2941                           ; 1 bytes @ 0x1
  2942                           
  2943                           
  2944                           ; 1 bytes @ 0x1
  2945  0071                     	ds	1
  2946  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2947  0072                     ??_setDimmerLights_IntrControl:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953                           
  2954                           ; 1 bytes @ 0x2
  2955  0072                     	ds	1
  2956  0073                     ??_IOC_ISR:	
  2957  0073                     ??_setDimmerReClock:	
  2958                           ; 0 bytes @ 0x3
  2959                           
  2960                           
  2961                           ; 0 bytes @ 0x3
  2962  0073                     	ds	3
  2963  0076                     setDimmerLights_IntrControl@lights:	
  2964                           
  2965                           ; 1 bytes @ 0x6
  2966  0076                     	ds	1
  2967  0077                     ??_TMR1_ISR:	
  2968  0077                     ??_ISR:	
  2969                           ; 0 bytes @ 0x7
  2970                           
  2971                           
  2972                           ; 0 bytes @ 0x7
  2973  0077                     	ds	1
  2974                           
  2975                           	psect	cstackBANK0
  2976  0020                     __pcstackBANK0:	
  2977  0020                     ??_Timeout_Counter:	
  2978  0020                     ??_set_TimeoutCleared:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_CC2500_WriteByte:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ??_CC2500_ReadByte:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ?_DelayTime_1us:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ??_Dimmer_Initialization:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ??_getMain_All_Error_Status:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0020                     ??_getLoad_OK:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_setDimmerLights_Line:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ?_setRF_DimmerLights:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ??_setTxData:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ??_Fosc_Set:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ??_IO_Set:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_TMR1_Set:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_ADC_Set:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_IOC_Set:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_WDT_Set:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_Flash_Memory_Read:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ?_setMemory_Data:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_Flash_Memory_Write:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_WDT_Clearing:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setLoad_AH_AL_Restore:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_getMain_Lights_Count:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_setTemp_Initialization:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_setRF_Initialization:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_getRF_KeyStatus:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_getSw_KeyStatus:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_myMain_Initialization:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_Buzzer_Initialization:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_Buzzer_Main:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_DelayOffPointSelect:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_DimmerLightsPointSelect:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_getAll_DimmerLights_AdjGO:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_getDimmer_LoadOK:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_getDimmerLights_Line:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_LedPointSelect:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_Flash_Memory_Unlock:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_Flash_Memory_Erasing:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_setMemory_Modify:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_setMemory_LoopSave:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_WDT_Main:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Temp_Initialization:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_setRF_Learn:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_TouchPower:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_SwPointSelect:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ?___bmul:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ?_getBuz_GO:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0020                     ?_getAD:	
  3117                           ; 2 bytes @ 0x0
  3118                           
  3119  0020                     ?___awdiv:	
  3120                           ; 2 bytes @ 0x0
  3121                           
  3122  0020                     ?___ftpack:	
  3123                           ; 2 bytes @ 0x0
  3124                           
  3125  0020                     getDimmer_LoadOK@status:	
  3126                           ; 3 bytes @ 0x0
  3127                           
  3128  0020                     setDimmerLights_Line@lights:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0020                     getAD@adcon1:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0020                     setMemory_Data@data:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0020                     getLoad_OK@ok:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0020                     setRF_DimmerLights@on:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0020                     getMain_Lights_Count@count:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146  0020                     ___bmul@multiplicand:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149  0020                     DelayTime_1us@count:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     ___awdiv@divisor:	
  3153                           ; 2 bytes @ 0x0
  3154                           
  3155  0020                     ___ftpack@arg:	
  3156                           ; 2 bytes @ 0x0
  3157                           
  3158                           
  3159                           ; 3 bytes @ 0x0
  3160  0020                     	ds	1
  3161  0021                     ??_setRF_DimmerLights:	
  3162  0021                     ??_setMemory_Data:	
  3163                           ; 0 bytes @ 0x1
  3164                           
  3165  0021                     ??_getMain_LoadOK:	
  3166                           ; 0 bytes @ 0x1
  3167                           
  3168  0021                     ??_Mcu_Initialization:	
  3169                           ; 0 bytes @ 0x1
  3170                           
  3171  0021                     ??_RF_Initialization:	
  3172                           ; 0 bytes @ 0x1
  3173                           
  3174  0021                     ??___bmul:	
  3175                           ; 0 bytes @ 0x1
  3176                           
  3177  0021                     CC2500_WriteByte@loop_a:	
  3178                           ; 0 bytes @ 0x1
  3179                           
  3180  0021                     CC2500_ReadByte@loop_b:	
  3181                           ; 1 bytes @ 0x1
  3182                           
  3183  0021                     DelayOffPointSelect@sw:	
  3184                           ; 1 bytes @ 0x1
  3185                           
  3186  0021                     DimmerLightsPointSelect@lights:	
  3187                           ; 1 bytes @ 0x1
  3188                           
  3189  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3190                           ; 1 bytes @ 0x1
  3191                           
  3192  0021                     getDimmerLights_Line@line:	
  3193                           ; 1 bytes @ 0x1
  3194                           
  3195  0021                     LedPointSelect@led:	
  3196                           ; 1 bytes @ 0x1
  3197                           
  3198  0021                     Flash_Memory_Read@i:	
  3199                           ; 1 bytes @ 0x1
  3200                           
  3201  0021                     Flash_Memory_Write@i:	
  3202                           ; 1 bytes @ 0x1
  3203                           
  3204  0021                     setMemory_Modify@command:	
  3205                           ; 1 bytes @ 0x1
  3206                           
  3207  0021                     setMemory_LoopSave@command:	
  3208                           ; 1 bytes @ 0x1
  3209                           
  3210  0021                     setLoad_AH_AL_Restore@i:	
  3211                           ; 1 bytes @ 0x1
  3212                           
  3213  0021                     setRF_Learn@command:	
  3214                           ; 1 bytes @ 0x1
  3215                           
  3216  0021                     getRF_KeyStatus@key:	
  3217                           ; 1 bytes @ 0x1
  3218                           
  3219  0021                     SwPointSelect@sw:	
  3220                           ; 1 bytes @ 0x1
  3221                           
  3222  0021                     _getSw_KeyStatus$6349:	
  3223                           ; 1 bytes @ 0x1
  3224                           
  3225  0021                     getMain_Lights_Count@status3:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228  0021                     _getMain_All_Error_Status$7096:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231                           
  3232                           ; 2 bytes @ 0x1
  3233  0021                     	ds	1
  3234  0022                     ??_CC2500_WriteCommand:	
  3235  0022                     ??_CC2500_ReadStatus:	
  3236                           ; 0 bytes @ 0x2
  3237                           
  3238  0022                     ??_DelayTime_1us:	
  3239                           ; 0 bytes @ 0x2
  3240                           
  3241  0022                     ?_CC2500_WriteREG:	
  3242                           ; 0 bytes @ 0x2
  3243                           
  3244  0022                     ??_DlyOff_Initialization:	
  3245                           ; 0 bytes @ 0x2
  3246                           
  3247  0022                     ??_setDimmerLights_Initialization:	
  3248                           ; 0 bytes @ 0x2
  3249                           
  3250  0022                     ?_setDimmerLights_Trigger:	
  3251                           ; 0 bytes @ 0x2
  3252                           
  3253  0022                     ?_setDimmerLights_TriggerAdj:	
  3254                           ; 0 bytes @ 0x2
  3255                           
  3256  0022                     ?_setLED:	
  3257                           ; 0 bytes @ 0x2
  3258                           
  3259  0022                     ??_setLED_Main:	
  3260                           ; 0 bytes @ 0x2
  3261                           
  3262  0022                     ??_getBuz_GO:	
  3263                           ; 0 bytes @ 0x2
  3264                           
  3265  0022                     ??_getDelayOff_GO:	
  3266                           ; 0 bytes @ 0x2
  3267                           
  3268  0022                     ??_getDimmerLights_Status:	
  3269                           ; 0 bytes @ 0x2
  3270                           
  3271  0022                     ??_Load_Initialization:	
  3272                           ; 0 bytes @ 0x2
  3273                           
  3274  0022                     CC2500_WriteREG@value:	
  3275                           ; 0 bytes @ 0x2
  3276                           
  3277  0022                     DlyOff_Initialization@sw:	
  3278                           ; 1 bytes @ 0x2
  3279                           
  3280  0022                     getDelayOff_GO@sw:	
  3281                           ; 1 bytes @ 0x2
  3282                           
  3283  0022                     getDimmerLights_Status@lights:	
  3284                           ; 1 bytes @ 0x2
  3285                           
  3286  0022                     _getAll_DimmerLights_AdjGO$2562:	
  3287                           ; 1 bytes @ 0x2
  3288                           
  3289  0022                     setDimmerLights_Trigger@command:	
  3290                           ; 1 bytes @ 0x2
  3291                           
  3292  0022                     setDimmerLights_TriggerAdj@command:	
  3293                           ; 1 bytes @ 0x2
  3294                           
  3295  0022                     setLED@command:	
  3296                           ; 1 bytes @ 0x2
  3297                           
  3298  0022                     Flash_Memory_Read@address:	
  3299                           ; 1 bytes @ 0x2
  3300                           
  3301  0022                     setMemory_Data@address:	
  3302                           ; 1 bytes @ 0x2
  3303                           
  3304  0022                     _getRF_KeyStatus$5272:	
  3305                           ; 1 bytes @ 0x2
  3306                           
  3307  0022                     _getSw_KeyStatus$6350:	
  3308                           ; 1 bytes @ 0x2
  3309                           
  3310  0022                     getMain_Lights_Count@status1:	
  3311                           ; 1 bytes @ 0x2
  3312                           
  3313  0022                     getMain_LoadOK@ok:	
  3314                           ; 1 bytes @ 0x2
  3315                           
  3316  0022                     ___bmul@product:	
  3317                           ; 1 bytes @ 0x2
  3318                           
  3319  0022                     DelayTime_1us@i:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     ___awdiv@dividend:	
  3323                           ; 2 bytes @ 0x2
  3324                           
  3325                           
  3326                           ; 2 bytes @ 0x2
  3327  0022                     	ds	1
  3328  0023                     ??_CC2500_WriteREG:	
  3329  0023                     ??_setDimmerLights_Trigger:	
  3330                           ; 0 bytes @ 0x3
  3331                           
  3332  0023                     ??_setDimmerLights_TriggerAdj:	
  3333                           ; 0 bytes @ 0x3
  3334                           
  3335  0023                     ??_setLED:	
  3336                           ; 0 bytes @ 0x3
  3337                           
  3338  0023                     ??_DelayOff_Initialization:	
  3339                           ; 0 bytes @ 0x3
  3340                           
  3341  0023                     ??_getAD:	
  3342                           ; 0 bytes @ 0x3
  3343                           
  3344  0023                     CC2500_WriteCommand@command:	
  3345                           ; 0 bytes @ 0x3
  3346                           
  3347  0023                     CC2500_ReadStatus@status_addr:	
  3348                           ; 1 bytes @ 0x3
  3349                           
  3350  0023                     getDelayOff_GO@go:	
  3351                           ; 1 bytes @ 0x3
  3352                           
  3353  0023                     setDimmerLights_Initialization@lights:	
  3354                           ; 1 bytes @ 0x3
  3355                           
  3356  0023                     getDimmerLights_Status@status:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359  0023                     setLED@led:	
  3360                           ; 1 bytes @ 0x3
  3361                           
  3362  0023                     getAD@adcon0:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0023                     Flash_Memory_Read@ret:	
  3366                           ; 1 bytes @ 0x3
  3367                           
  3368  0023                     setRF_DimmerLights@status:	
  3369                           ; 1 bytes @ 0x3
  3370                           
  3371  0023                     getSw_KeyStatus@status:	
  3372                           ; 1 bytes @ 0x3
  3373                           
  3374  0023                     getMain_Lights_Count@status2:	
  3375                           ; 1 bytes @ 0x3
  3376                           
  3377  0023                     ___bmul@multiplier:	
  3378                           ; 1 bytes @ 0x3
  3379                           
  3380  0023                     ___ftpack@exp:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     _getMain_All_Error_Status$7097:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386                           
  3387                           ; 2 bytes @ 0x3
  3388  0023                     	ds	1
  3389  0024                     ??_CC2500_ClearTXFIFO:	
  3390  0024                     ??_CC2500_ClearRXFIFO:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0024                     ??_CC2500_SIDLEMode:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0024                     ??_DelayTimejudge:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0024                     ??_getMain_LightsStatus:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0024                     ??_setLED_Initialization:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0024                     ??_Flash_Memory_Modify:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0024                     ??_RF_RxDisable:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0024                     ??_setSw_Initialization:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0024                     ??_CC2500_TxData:	
  3415                           ; 0 bytes @ 0x4
  3416                           
  3417  0024                     ??_CC2500_RxData:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     ??_DimmerLights_Initialization:	
  3421                           ; 0 bytes @ 0x4
  3422                           
  3423  0024                     ??_getLoad_AD:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_getTemp_AD:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??___awdiv:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     CC2500_WriteREG@w_addr:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     setDimmerLights_Trigger@lights:	
  3436                           ; 1 bytes @ 0x4
  3437                           
  3438  0024                     setDimmerLights_TriggerAdj@lights:	
  3439                           ; 1 bytes @ 0x4
  3440                           
  3441  0024                     setLED_Initialization@led:	
  3442                           ; 1 bytes @ 0x4
  3443                           
  3444  0024                     setLED_Main@led:	
  3445                           ; 1 bytes @ 0x4
  3446                           
  3447  0024                     setRF_DimmerLights@lights:	
  3448                           ; 1 bytes @ 0x4
  3449                           
  3450  0024                     setSw_Initialization@sw:	
  3451                           ; 1 bytes @ 0x4
  3452                           
  3453  0024                     getSw_KeyStatus@sw:	
  3454                           ; 1 bytes @ 0x4
  3455                           
  3456  0024                     ___ftpack@sign:	
  3457                           ; 1 bytes @ 0x4
  3458                           
  3459  0024                     getBuz_GO@i:	
  3460                           ; 1 bytes @ 0x4
  3461                           
  3462  0024                     DelayTime_1us@j:	
  3463                           ; 2 bytes @ 0x4
  3464                           
  3465                           
  3466                           ; 2 bytes @ 0x4
  3467  0024                     	ds	1
  3468  0025                     ??_CC2500_InitSetREG:	
  3469  0025                     ??_CC2500_InitPATable:	
  3470                           ; 0 bytes @ 0x5
  3471                           
  3472  0025                     ??___ftpack:	
  3473                           ; 0 bytes @ 0x5
  3474                           
  3475  0025                     ??_setDimmerLights_AdjControl:	
  3476                           ; 0 bytes @ 0x5
  3477                           
  3478  0025                     ??_LED_Initialization:	
  3479                           ; 0 bytes @ 0x5
  3480                           
  3481  0025                     ??_LED_Main:	
  3482                           ; 0 bytes @ 0x5
  3483                           
  3484  0025                     ??_Switch_Initialization:	
  3485                           ; 0 bytes @ 0x5
  3486                           
  3487  0025                     CC2500_TxData@loop_e:	
  3488                           ; 0 bytes @ 0x5
  3489                           
  3490  0025                     CC2500_RxData@loop_f:	
  3491                           ; 1 bytes @ 0x5
  3492                           
  3493  0025                     Flash_Memory_Modify@i:	
  3494                           ; 1 bytes @ 0x5
  3495                           
  3496  0025                     getTemp_AD@channel:	
  3497                           ; 1 bytes @ 0x5
  3498                           
  3499  0025                     getMain_LightsStatus@count:	
  3500                           ; 1 bytes @ 0x5
  3501                           
  3502  0025                     getMain_All_Error_Status@command:	
  3503                           ; 1 bytes @ 0x5
  3504                           
  3505  0025                     ___awdiv@counter:	
  3506                           ; 1 bytes @ 0x5
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0x5
  3510  0025                     	ds	1
  3511  0026                     ??_CC2500_PowerRST:	
  3512  0026                     ??_CC2500_FrequencyCabr:	
  3513                           ; 0 bytes @ 0x6
  3514                           
  3515  0026                     CC2500_InitSetREG@temp1:	
  3516                           ; 0 bytes @ 0x6
  3517                           
  3518  0026                     CC2500_InitPATable@temp:	
  3519                           ; 1 bytes @ 0x6
  3520                           
  3521  0026                     DelayTimejudge@i:	
  3522                           ; 1 bytes @ 0x6
  3523                           
  3524  0026                     setDimmerLights_AdjControl@idle:	
  3525                           ; 1 bytes @ 0x6
  3526                           
  3527  0026                     getLoad_AD@channel:	
  3528                           ; 1 bytes @ 0x6
  3529                           
  3530  0026                     getMain_All_Error_Status@status:	
  3531                           ; 1 bytes @ 0x6
  3532                           
  3533  0026                     ___awdiv@sign:	
  3534                           ; 1 bytes @ 0x6
  3535                           
  3536  0026                     getMain_LightsStatus@i:	
  3537                           ; 1 bytes @ 0x6
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x6
  3541  0026                     	ds	1
  3542  0027                     CC2500_InitSetREG@temp2:	
  3543  0027                     CC2500_InitPATable@loop_d:	
  3544                           ; 1 bytes @ 0x7
  3545                           
  3546  0027                     DelayTimejudge@j:	
  3547                           ; 1 bytes @ 0x7
  3548                           
  3549  0027                     _setDimmerLights_AdjControl$2583:	
  3550                           ; 1 bytes @ 0x7
  3551                           
  3552  0027                     getLoad_AD@k:	
  3553                           ; 1 bytes @ 0x7
  3554                           
  3555  0027                     ___awdiv@quotient:	
  3556                           ; 1 bytes @ 0x7
  3557                           
  3558                           
  3559                           ; 2 bytes @ 0x7
  3560  0027                     	ds	1
  3561  0028                     ?___awtoft:	
  3562  0028                     CC2500_InitSetREG@loop_c:	
  3563                           ; 3 bytes @ 0x8
  3564                           
  3565  0028                     DelayTimejudge@k:	
  3566                           ; 1 bytes @ 0x8
  3567                           
  3568  0028                     setDimmerLights_AdjControl@sw:	
  3569                           ; 1 bytes @ 0x8
  3570                           
  3571  0028                     getLoad_AD@j:	
  3572                           ; 1 bytes @ 0x8
  3573                           
  3574  0028                     getMain_LightsStatus@status:	
  3575                           ; 1 bytes @ 0x8
  3576                           
  3577  0028                     ___awtoft@c:	
  3578                           ; 1 bytes @ 0x8
  3579                           
  3580                           
  3581                           ; 2 bytes @ 0x8
  3582  0028                     	ds	1
  3583  0029                     ?_setBuz:	
  3584  0029                     ??_CC2500_PowerOnInitial:	
  3585                           ; 0 bytes @ 0x9
  3586                           
  3587  0029                     ??_Flash_Memory_Main:	
  3588                           ; 0 bytes @ 0x9
  3589                           
  3590  0029                     ??_Load_Main:	
  3591                           ; 0 bytes @ 0x9
  3592                           
  3593  0029                     DelayTimejudge@value:	
  3594                           ; 0 bytes @ 0x9
  3595                           
  3596  0029                     getLoad_AD@i:	
  3597                           ; 1 bytes @ 0x9
  3598                           
  3599  0029                     setBuz@time:	
  3600                           ; 1 bytes @ 0x9
  3601                           
  3602                           
  3603                           ; 2 bytes @ 0x9
  3604  0029                     	ds	1
  3605  002A                     ?_setDelayOff_GO:	
  3606  002A                     setDelayOff_GO@command:	
  3607                           ; 0 bytes @ 0xA
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0xA
  3611  002A                     	ds	1
  3612  002B                     ??_setBuz:	
  3613  002B                     ??___awtoft:	
  3614                           ; 0 bytes @ 0xB
  3615                           
  3616  002B                     setDelayOff_GO@value:	
  3617                           ; 0 bytes @ 0xB
  3618                           
  3619  002B                     Load_Main@j:	
  3620                           ; 1 bytes @ 0xB
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0xB
  3624  002B                     	ds	1
  3625  002C                     ??_setDelayOff_GO:	
  3626  002C                     setBuz@count:	
  3627                           ; 0 bytes @ 0xC
  3628                           
  3629  002C                     Load_Main@adjgo:	
  3630                           ; 1 bytes @ 0xC
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0xC
  3634  002C                     	ds	1
  3635  002D                     ??_setTemp_Main:	
  3636  002D                     ??_setLog_Code:	
  3637                           ; 0 bytes @ 0xD
  3638                           
  3639  002D                     ??_my_MainTimer:	
  3640                           ; 0 bytes @ 0xD
  3641                           
  3642  002D                     ??_setDimmerLights_SwOn:	
  3643                           ; 0 bytes @ 0xD
  3644                           
  3645  002D                     _Load_Main$3859:	
  3646                           ; 0 bytes @ 0xD
  3647                           
  3648  002D                     ___awtoft@sign:	
  3649                           ; 1 bytes @ 0xD
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0xD
  3653  002D                     	ds	1
  3654  002E                     ?___ftdiv:	
  3655  002E                     ?___ftmul:	
  3656                           ; 3 bytes @ 0xE
  3657                           
  3658  002E                     setDelayOff_GO@sw:	
  3659                           ; 3 bytes @ 0xE
  3660                           
  3661  002E                     setDimmerLights_SwOn@idle:	
  3662                           ; 1 bytes @ 0xE
  3663                           
  3664  002E                     Load_Main@error:	
  3665                           ; 1 bytes @ 0xE
  3666                           
  3667  002E                     ___ftdiv@f2:	
  3668                           ; 1 bytes @ 0xE
  3669                           
  3670  002E                     ___ftmul@f1:	
  3671                           ; 3 bytes @ 0xE
  3672                           
  3673                           
  3674                           ; 3 bytes @ 0xE
  3675  002E                     	ds	1
  3676  002F                     ??_setDimmerLights_SwOff:	
  3677  002F                     ??_Temp_Main:	
  3678                           ; 0 bytes @ 0xF
  3679                           
  3680  002F                     setDimmerLights_SwOn@sw:	
  3681                           ; 0 bytes @ 0xF
  3682                           
  3683  002F                     setDimmerLights_SwOff@command:	
  3684                           ; 1 bytes @ 0xF
  3685                           
  3686  002F                     Load_Main@i:	
  3687                           ; 1 bytes @ 0xF
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0xF
  3691  002F                     	ds	1
  3692  0030                     setDimmerLights_SwOff@sw:	
  3693                           
  3694                           ; 1 bytes @ 0x10
  3695  0030                     	ds	1
  3696  0031                     ??_setDimmerLights_ErrorClose:	
  3697  0031                     ??_setRFSW_Control:	
  3698                           ; 0 bytes @ 0x11
  3699                           
  3700  0031                     ??_setSw_Main:	
  3701                           ; 0 bytes @ 0x11
  3702                           
  3703  0031                     ___ftdiv@f1:	
  3704                           ; 0 bytes @ 0x11
  3705                           
  3706  0031                     ___ftmul@f2:	
  3707                           ; 3 bytes @ 0x11
  3708                           
  3709                           
  3710                           ; 3 bytes @ 0x11
  3711  0031                     	ds	1
  3712  0032                     setDimmerLights_ErrorClose@count:	
  3713  0032                     setRFSW_Control@status:	
  3714                           ; 1 bytes @ 0x12
  3715                           
  3716                           
  3717                           ; 1 bytes @ 0x12
  3718  0032                     	ds	1
  3719  0033                     setDimmerLights_ErrorClose@lights:	
  3720  0033                     setRFSW_Control@sw:	
  3721                           ; 1 bytes @ 0x13
  3722                           
  3723  0033                     setSw_Main@sw:	
  3724                           ; 1 bytes @ 0x13
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x13
  3728  0033                     	ds	1
  3729  0034                     ??___ftdiv:	
  3730  0034                     ??___ftmul:	
  3731                           ; 0 bytes @ 0x14
  3732                           
  3733  0034                     setDimmerLights_ErrorClose@i:	
  3734                           ; 0 bytes @ 0x14
  3735                           
  3736                           
  3737                           ; 2 bytes @ 0x14
  3738  0034                     	ds	2
  3739  0036                     ??_DlyOff_Main:	
  3740  0036                     ??_setMain_Exception:	
  3741                           ; 0 bytes @ 0x16
  3742                           
  3743                           
  3744                           ; 0 bytes @ 0x16
  3745  0036                     	ds	2
  3746  0038                     DlyOff_Main@sw:	
  3747  0038                     setMain_Exception@buz:	
  3748                           ; 1 bytes @ 0x18
  3749                           
  3750  0038                     ___ftdiv@cntr:	
  3751                           ; 1 bytes @ 0x18
  3752                           
  3753  0038                     ___ftmul@exp:	
  3754                           ; 1 bytes @ 0x18
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x18
  3758  0038                     	ds	1
  3759  0039                     ??_DelayOff_Main:	
  3760  0039                     _setMain_Exception$7086:	
  3761                           ; 0 bytes @ 0x19
  3762                           
  3763  0039                     ___ftdiv@f3:	
  3764                           ; 2 bytes @ 0x19
  3765                           
  3766  0039                     ___ftmul@f3_as_product:	
  3767                           ; 3 bytes @ 0x19
  3768                           
  3769                           
  3770                           ; 3 bytes @ 0x19
  3771  0039                     	ds	2
  3772  003B                     setMain_Exception@status:	
  3773                           
  3774                           ; 1 bytes @ 0x1B
  3775  003B                     	ds	1
  3776  003C                     setMain_Exception@command:	
  3777  003C                     ___ftdiv@exp:	
  3778                           ; 1 bytes @ 0x1C
  3779                           
  3780  003C                     ___ftmul@cntr:	
  3781                           ; 1 bytes @ 0x1C
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x1C
  3785  003C                     	ds	1
  3786  003D                     ??_Switch_Main:	
  3787  003D                     ___ftdiv@sign:	
  3788                           ; 0 bytes @ 0x1D
  3789                           
  3790  003D                     ___ftmul@sign:	
  3791                           ; 1 bytes @ 0x1D
  3792                           
  3793                           
  3794                           ; 1 bytes @ 0x1D
  3795  003D                     	ds	1
  3796  003E                     ?___ftneg:	
  3797  003E                     Switch_Main@error:	
  3798                           ; 3 bytes @ 0x1E
  3799                           
  3800  003E                     ___ftneg@f1:	
  3801                           ; 1 bytes @ 0x1E
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0x1E
  3805  003E                     	ds	3
  3806  0041                     ??___ftneg:	
  3807  0041                     ?___ftadd:	
  3808                           ; 0 bytes @ 0x21
  3809                           
  3810  0041                     ___ftadd@f1:	
  3811                           ; 3 bytes @ 0x21
  3812                           
  3813                           
  3814                           ; 3 bytes @ 0x21
  3815  0041                     	ds	3
  3816  0044                     ___ftadd@f2:	
  3817                           
  3818                           ; 3 bytes @ 0x24
  3819  0044                     	ds	3
  3820  0047                     ??___ftadd:	
  3821                           
  3822                           ; 0 bytes @ 0x27
  3823  0047                     	ds	4
  3824  004B                     ___ftadd@sign:	
  3825                           
  3826                           ; 1 bytes @ 0x2B
  3827  004B                     	ds	1
  3828  004C                     ___ftadd@exp2:	
  3829                           
  3830                           ; 1 bytes @ 0x2C
  3831  004C                     	ds	1
  3832  004D                     ___ftadd@exp1:	
  3833                           
  3834                           ; 1 bytes @ 0x2D
  3835  004D                     	ds	1
  3836  004E                     ?___fttol:	
  3837  004E                     ___fttol@f1:	
  3838                           ; 4 bytes @ 0x2E
  3839                           
  3840                           
  3841                           ; 3 bytes @ 0x2E
  3842  004E                     	ds	4
  3843  0052                     ??___fttol:	
  3844                           
  3845                           ; 0 bytes @ 0x32
  3846  0052                     	ds	4
  3847  0056                     ___fttol@sign1:	
  3848                           
  3849                           ; 1 bytes @ 0x36
  3850  0056                     	ds	1
  3851  0057                     ___fttol@lval:	
  3852                           
  3853                           ; 4 bytes @ 0x37
  3854  0057                     	ds	4
  3855  005B                     ___fttol@exp1:	
  3856                           
  3857                           ; 1 bytes @ 0x3B
  3858  005B                     	ds	1
  3859  005C                     ??_setPercentValue:	
  3860  005C                     ??_getPercentValue:	
  3861                           ; 0 bytes @ 0x3C
  3862                           
  3863                           
  3864                           ; 0 bytes @ 0x3C
  3865  005C                     	ds	2
  3866  005E                     getPercentValue@value:	
  3867  005E                     setPercentValue@value:	
  3868                           ; 1 bytes @ 0x3E
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0x3E
  3872  005E                     	ds	1
  3873  005F                     getPercentValue@i:	
  3874  005F                     setPercentValue@i:	
  3875                           ; 3 bytes @ 0x3F
  3876                           
  3877                           
  3878                           ; 3 bytes @ 0x3F
  3879  005F                     	ds	3
  3880  0062                     ?_setDimmerLights:	
  3881  0062                     ?_setDimmerLights_Adj:	
  3882                           ; 0 bytes @ 0x42
  3883                           
  3884  0062                     ??_setDimmerLights_AdjRF:	
  3885                           ; 0 bytes @ 0x42
  3886                           
  3887  0062                     ??_Flash_Memory_Initialization:	
  3888                           ; 0 bytes @ 0x42
  3889                           
  3890  0062                     setDimmerLights@status:	
  3891                           ; 0 bytes @ 0x42
  3892                           
  3893  0062                     setDimmerLights_Adj@status:	
  3894                           ; 1 bytes @ 0x42
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x42
  3898  0062                     	ds	1
  3899  0063                     ??_setDimmerLights:	
  3900  0063                     ??_setDimmerLights_Adj:	
  3901                           ; 0 bytes @ 0x43
  3902                           
  3903  0063                     setDimmerLights_AdjRF@lights:	
  3904                           ; 0 bytes @ 0x43
  3905                           
  3906  0063                     Flash_Memory_Initialization@i:	
  3907                           ; 1 bytes @ 0x43
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x43
  3911  0063                     	ds	1
  3912  0064                     ??_setRF_DimmerValue:	
  3913                           
  3914                           ; 0 bytes @ 0x44
  3915  0064                     	ds	1
  3916  0065                     setDimmerLights@lights:	
  3917  0065                     setDimmerLights_Adj@lights:	
  3918                           ; 1 bytes @ 0x45
  3919                           
  3920                           
  3921                           ; 1 bytes @ 0x45
  3922  0065                     	ds	1
  3923  0066                     ??_setDimmerLights_Main:	
  3924  0066                     setDimmerLights_Main@lights:	
  3925                           ; 0 bytes @ 0x46
  3926                           
  3927  0066                     setRF_DimmerValue@lights:	
  3928                           ; 1 bytes @ 0x46
  3929                           
  3930                           
  3931                           ; 1 bytes @ 0x46
  3932  0066                     	ds	1
  3933  0067                     ??_setRFSW_AdjControl:	
  3934  0067                     ??_DimmerLights_Main:	
  3935                           ; 0 bytes @ 0x47
  3936                           
  3937                           
  3938                           ; 0 bytes @ 0x47
  3939  0067                     	ds	2
  3940  0069                     setRFSW_AdjControl@status:	
  3941  0069                     _DimmerLights_Main$2500:	
  3942                           ; 1 bytes @ 0x49
  3943                           
  3944                           
  3945                           ; 2 bytes @ 0x49
  3946  0069                     	ds	1
  3947  006A                     setRFSW_AdjControl@sw:	
  3948                           
  3949                           ; 1 bytes @ 0x4A
  3950  006A                     	ds	1
  3951  006B                     ??_getRxData:	
  3952  006B                     ??_setControl_Lights_Table:	
  3953                           ; 0 bytes @ 0x4B
  3954                           
  3955                           
  3956                           ; 0 bytes @ 0x4B
  3957  006B                     	ds	1
  3958  006C                     getRxData@error:	
  3959                           
  3960                           ; 1 bytes @ 0x4C
  3961  006C                     	ds	1
  3962  006D                     ??_setRF_Main:	
  3963                           
  3964                           ; 0 bytes @ 0x4D
  3965  006D                     	ds	1
  3966  006E                     ??_RF_Main:	
  3967  006E                     ??_main:	
  3968                           ; 0 bytes @ 0x4E
  3969                           
  3970                           
  3971                           	psect	maintext
  3972  15E4                     __pmaintext:	
  3973                           ; 0 bytes @ 0x4E
  3974 ;;
  3975 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3976 ;;
  3977 ;; *************** function _main *****************
  3978 ;; Defined at:
  3979 ;;		line 7 in file "../src/main_B1.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  argc            2    3[BANK1 ] int 
  3982 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  2    3[BANK1 ] int 
  3987 ;; Registers used:
  3988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 17F/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3994 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;Total ram usage:        4 bytes
  3999 ;; Hardware stack levels required when called:   15
  4000 ;; This function calls:
  4001 ;;		_Buzzer_Initialization
  4002 ;;		_Buzzer_Main
  4003 ;;		_CC2500_PowerOnInitial
  4004 ;;		_DelayOff_Initialization
  4005 ;;		_DelayOff_Main
  4006 ;;		_DimmerLights_Initialization
  4007 ;;		_DimmerLights_Main
  4008 ;;		_Flash_Memory_Initialization
  4009 ;;		_Flash_Memory_Main
  4010 ;;		_LED_Initialization
  4011 ;;		_LED_Main
  4012 ;;		_Load_Initialization
  4013 ;;		_Load_Main
  4014 ;;		_Mcu_Initialization
  4015 ;;		_RF_Initialization
  4016 ;;		_RF_Main
  4017 ;;		_Switch_Initialization
  4018 ;;		_Switch_Main
  4019 ;;		_Temp_Initialization
  4020 ;;		_Temp_Main
  4021 ;;		_WDT_Main
  4022 ;;		_getLoad_AD
  4023 ;;		_getTemp_AD
  4024 ;;		_myMain_Initialization
  4025 ;;		_my_MainTimer
  4026 ;; This function is called by:
  4027 ;;		Startup code after reset
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function _main
  4033  15E4                     _main:	
  4034                           
  4035                           ;main_B1.c: 8: myMain_Initialization();
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4039  15E4  319C  2431  3195   	fcall	_myMain_Initialization
  4040                           
  4041                           ;main_B1.c: 9: Mcu_Initialization();
  4042  15E7  319C  24C8  3195   	fcall	_Mcu_Initialization
  4043                           
  4044                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4045  15EA  3186  261F  3195   	fcall	_Flash_Memory_Initialization
  4046                           
  4047                           ;main_B1.c: 11: LED_Initialization();
  4048  15ED  319B  23C8  3195   	fcall	_LED_Initialization
  4049                           
  4050                           ;main_B1.c: 12: Buzzer_Initialization();
  4051  15F0  319B  230D  3195   	fcall	_Buzzer_Initialization
  4052                           
  4053                           ;main_B1.c: 14: ;;
  4054                           ;main_B1.c: 15: Temp_Initialization();
  4055  15F3  319B  2316  3195   	fcall	_Temp_Initialization
  4056                           
  4057                           ;main_B1.c: 16: Load_Initialization();
  4058  15F6  319B  232E  3195   	fcall	_Load_Initialization
  4059                           
  4060                           ;main_B1.c: 17: ;;
  4061                           ;main_B1.c: 18: DelayOff_Initialization();
  4062  15F9  319B  2354  3195   	fcall	_DelayOff_Initialization
  4063                           
  4064                           ;main_B1.c: 20: DimmerLights_Initialization();
  4065  15FC  319E  2606  3195   	fcall	_DimmerLights_Initialization
  4066                           
  4067                           ;main_B1.c: 21: ;;
  4068                           ;main_B1.c: 22: ;;
  4069                           ;main_B1.c: 23: ;;
  4070                           ;main_B1.c: 24: Switch_Initialization();
  4071  15FF  319B  23F8  3195   	fcall	_Switch_Initialization
  4072                           
  4073                           ;main_B1.c: 25: RF_Initialization();
  4074  1602  319B  2310  3195   	fcall	_RF_Initialization
  4075                           
  4076                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4077  1605  319D  25B1  3195   	fcall	_CC2500_PowerOnInitial
  4078  1608                     l8403:	
  4079                           ;main_B1.c: 27: ;;
  4080                           ;main_B1.c: 28: ;;
  4081                           ;main_B1.c: 30: while (1) {
  4082                           
  4083                           
  4084                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4085  1608  0021               	movlb	1	; select bank1
  4086  1609  1C20               	btfss	_myMain^(0+128),0
  4087  160A  2E13               	goto	l8407
  4088                           
  4089                           ;main_B1.c: 38: getLoad_AD(0x05);
  4090  160B  3005               	movlw	5
  4091  160C  318B  23DD  3195   	fcall	_getLoad_AD
  4092                           
  4093                           ;main_B1.c: 42: getTemp_AD(0x09);
  4094  160F  3009               	movlw	9
  4095  1610  3192  22E4  3195   	fcall	_getTemp_AD
  4096  1613                     l8407:	
  4097                           
  4098                           ;main_B1.c: 57: }
  4099                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4100  1613  0021               	movlb	1	; select bank1
  4101  1614  1C47               	btfss	_Timer1^(0+128),0
  4102  1615  2E08               	goto	l8403
  4103                           
  4104                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4105  1616  1047               	bcf	_Timer1^(0+128),0
  4106                           
  4107                           ;main_B1.c: 95: my_MainTimer();
  4108  1617  3188  20BB  3195   	fcall	_my_MainTimer
  4109                           
  4110                           ;main_B1.c: 96: WDT_Main();
  4111  161A  319C  24DA  3195   	fcall	_WDT_Main
  4112                           
  4113                           ;main_B1.c: 97: ;;
  4114                           ;main_B1.c: 98: ;;
  4115                           ;main_B1.c: 99: if (myMain.PowerON == 1) {
  4116  161D  0021               	movlb	1	; select bank1
  4117  161E  1C20               	btfss	_myMain^(0+128),0
  4118  161F  2E08               	goto	l8403
  4119                           
  4120                           ;main_B1.c: 100: Flash_Memory_Main();
  4121  1620  3192  2278  3195   	fcall	_Flash_Memory_Main
  4122                           
  4123                           ;main_B1.c: 102: LED_Main();
  4124  1623  319B  23D4  3195   	fcall	_LED_Main
  4125                           
  4126                           ;main_B1.c: 103: Buzzer_Main();
  4127  1626  3194  2459  3195   	fcall	_Buzzer_Main
  4128                           
  4129                           ;main_B1.c: 105: ;;
  4130                           ;main_B1.c: 106: Temp_Main();
  4131  1629  3187  27FD  3195   	fcall	_Temp_Main
  4132                           
  4133                           ;main_B1.c: 107: Load_Main();
  4134  162C  3183  2306  3195   	fcall	_Load_Main
  4135                           
  4136                           ;main_B1.c: 108: ;;
  4137                           ;main_B1.c: 110: ;;
  4138                           ;main_B1.c: 111: DimmerLights_Main();
  4139  162F  3192  220F  3195   	fcall	_DimmerLights_Main
  4140                           
  4141                           ;main_B1.c: 112: Switch_Main();
  4142  1632  319F  27DC  3195   	fcall	_Switch_Main
  4143                           
  4144                           ;main_B1.c: 113: ;;
  4145                           ;main_B1.c: 114: ;;
  4146                           ;main_B1.c: 116: RF_Main();
  4147  1635  319B  2313  3195   	fcall	_RF_Main
  4148                           
  4149                           ;main_B1.c: 117: DelayOff_Main();
  4150  1638  319B  235C  3195   	fcall	_DelayOff_Main
  4151                           
  4152                           ;main_B1.c: 118: ;;
  4153                           ;main_B1.c: 119: ;;
  4154  163B  2E08               	goto	l8403
  4155  163C                     __end_of_main:	
  4156                           ;main_B1.c: 126: }
  4157                           ;main_B1.c: 127: }
  4158                           ;main_B1.c: 161: }
  4159                           ;main_B1.c: 162: return (0);
  4160                           ;	Return value of _main is never used
  4161                           
  4162                           
  4163                           	psect	text1
  4164  08BB                     __ptext1:	
  4165 ;; *************** function _my_MainTimer *****************
  4166 ;; Defined at:
  4167 ;;		line 181 in file "../src/main_B1.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;		None               void
  4174 ;; Registers used:
  4175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;Total ram usage:        0 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    7
  4188 ;; This function calls:
  4189 ;;		_setBuz
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _my_MainTimer
  4197  08BB                     _my_MainTimer:	
  4198                           
  4199                           ;main_B1.c: 183: if (myMain.PowerON == 0) {
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4203  08BB  0021               	movlb	1	; select bank1
  4204  08BC  1820               	btfsc	_myMain^(0+128),0
  4205  08BD  28DD               	goto	l8265
  4206                           
  4207                           ;main_B1.c: 184: myMain.PowerCount++;
  4208  08BE  3001               	movlw	1
  4209  08BF  07A1               	addwf	(_myMain^(0+128)+1),f
  4210  08C0  3000               	movlw	0
  4211  08C1  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4212                           
  4213                           ;main_B1.c: 185: if (myMain.PowerCount == 150)
  4214  08C2  3001               	movlw	1
  4215  08C3  3EA0               	addlw	_myMain& (0+255)
  4216  08C4  0086               	movwf	6
  4217  08C5  0187               	clrf	7
  4218  08C6  3F40               	moviw [0]fsr1
  4219  08C7  3A96               	xorlw	150
  4220  08C8  1D03               	skipz
  4221  08C9  28CC               	goto	u8345
  4222  08CA  3F41               	moviw [1]fsr1
  4223  08CB  3A00               	xorlw	0
  4224  08CC                     u8345:	
  4225  08CC  1D03               	skipz
  4226  08CD  2906               	goto	l8281
  4227                           
  4228                           ;main_B1.c: 186: {
  4229                           ;main_B1.c: 187: myMain.PowerCount = 0;
  4230  08CE  01A1               	clrf	(_myMain^(0+128)+1)
  4231  08CF  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4232                           
  4233                           ;main_B1.c: 188: myMain.PowerON = 1;
  4234  08D0  1420               	bsf	_myMain^(0+128),0
  4235                           
  4236                           ;main_B1.c: 193: setBuz(3, 50);
  4237  08D1  3032               	movlw	50
  4238  08D2  0020               	movlb	0	; select bank0
  4239  08D3  00A9               	movwf	setBuz@time
  4240  08D4  3000               	movlw	0
  4241  08D5  00AA               	movwf	setBuz@time+1
  4242  08D6  3003               	movlw	3
  4243  08D7  3196  263C  3188   	fcall	_setBuz
  4244                           
  4245                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4246  08DA  0021               	movlb	1	; select bank1
  4247  08DB  1620               	bsf	_myMain^(0+128),4
  4248                           
  4249                           ;main_B1.c: 203: }
  4250                           ;main_B1.c: 204: } else {
  4251  08DC  2906               	goto	l8281
  4252  08DD                     l8265:	
  4253                           
  4254                           ;main_B1.c: 205: myMain.PowerCount++;
  4255  08DD  3001               	movlw	1
  4256  08DE  07A1               	addwf	(_myMain^(0+128)+1),f
  4257  08DF  3000               	movlw	0
  4258  08E0  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4259                           
  4260                           ;main_B1.c: 206: if (myMain.PowerCount == 100) {
  4261  08E1  3001               	movlw	1
  4262  08E2  3EA0               	addlw	_myMain& (0+255)
  4263  08E3  0086               	movwf	6
  4264  08E4  0187               	clrf	7
  4265  08E5  3F40               	moviw [0]fsr1
  4266  08E6  3A64               	xorlw	100
  4267  08E7  1D03               	skipz
  4268  08E8  28EB               	goto	u8355
  4269  08E9  3F41               	moviw [1]fsr1
  4270  08EA  3A00               	xorlw	0
  4271  08EB                     u8355:	
  4272  08EB  1D03               	skipz
  4273  08EC  28EF               	goto	l8271
  4274                           
  4275                           ;main_B1.c: 207: myMain.PowerCount = 0;
  4276  08ED  01A1               	clrf	(_myMain^(0+128)+1)
  4277  08EE  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4278  08EF                     l8271:	
  4279                           
  4280                           ;main_B1.c: 215: }
  4281                           ;main_B1.c: 223: myMain.Count1++;
  4282  08EF  3001               	movlw	1
  4283  08F0  07A5               	addwf	(_myMain^(0+128)+5),f
  4284  08F1  3000               	movlw	0
  4285  08F2  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4286                           
  4287                           ;main_B1.c: 224: if (myMain.Count1 == 100)
  4288  08F3  3005               	movlw	5
  4289  08F4  3EA0               	addlw	_myMain& (0+255)
  4290  08F5  0086               	movwf	6
  4291  08F6  0187               	clrf	7
  4292  08F7  3F40               	moviw [0]fsr1
  4293  08F8  3A64               	xorlw	100
  4294  08F9  1D03               	skipz
  4295  08FA  28FD               	goto	u8365
  4296  08FB  3F41               	moviw [1]fsr1
  4297  08FC  3A00               	xorlw	0
  4298  08FD                     u8365:	
  4299  08FD  1D03               	skipz
  4300  08FE  2906               	goto	l8281
  4301                           
  4302                           ;main_B1.c: 225: {
  4303                           ;main_B1.c: 226: myMain.Count1 = 0;
  4304  08FF  01A5               	clrf	(_myMain^(0+128)+5)
  4305  0900  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4306                           
  4307                           ;main_B1.c: 238: if (myMain.Flag) {
  4308  0901  1CA0               	btfss	_myMain^(0+128),1
  4309  0902  2905               	goto	l2680
  4310                           
  4311                           ;main_B1.c: 239: myMain.Flag = 0;
  4312  0903  10A0               	bcf	_myMain^(0+128),1
  4313                           
  4314                           ;main_B1.c: 248: } else {
  4315  0904  2906               	goto	l8281
  4316  0905                     l2680:	
  4317                           
  4318                           ;main_B1.c: 249: myMain.Flag = 1;
  4319  0905  14A0               	bsf	_myMain^(0+128),1
  4320  0906                     l8281:	
  4321                           
  4322                           ;main_B1.c: 258: }
  4323                           ;main_B1.c: 259: }
  4324                           ;main_B1.c: 261: }
  4325                           ;main_B1.c: 263: myMain.Count2++;
  4326  0906  3001               	movlw	1
  4327  0907  07A7               	addwf	(_myMain^(0+128)+7),f
  4328  0908  3000               	movlw	0
  4329  0909  3DA8               	addwfc	((_myMain+1)^(0+128)+7),f
  4330                           
  4331                           ;main_B1.c: 264: if (myMain.Count2 == 100) {
  4332  090A  3007               	movlw	7
  4333  090B  3EA0               	addlw	_myMain& (0+255)
  4334  090C  0086               	movwf	6
  4335  090D  0187               	clrf	7
  4336  090E  3F40               	moviw [0]fsr1
  4337  090F  3A64               	xorlw	100
  4338  0910  1D03               	skipz
  4339  0911  2914               	goto	u8385
  4340  0912  3F41               	moviw [1]fsr1
  4341  0913  3A00               	xorlw	0
  4342  0914                     u8385:	
  4343  0914  1D03               	skipz
  4344  0915  0008               	return
  4345                           
  4346                           ;main_B1.c: 265: myMain.Count2 = 0;
  4347  0916  01A7               	clrf	(_myMain^(0+128)+7)
  4348  0917  01A8               	clrf	((_myMain+1)^(0+128)+7)
  4349  0918  0008               	return
  4350  0919                     __end_of_my_MainTimer:	
  4351                           
  4352                           	psect	text2
  4353  1C31                     __ptext2:	
  4354 ;; *************** function _myMain_Initialization *****************
  4355 ;; Defined at:
  4356 ;;		line 168 in file "../src/main_B1.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;		None
  4361 ;; Return value:  Size  Location     Type
  4362 ;;		None               void
  4363 ;; Registers used:
  4364 ;;		wreg, fsr1l, fsr1h
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;Total ram usage:        1 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    5
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_main
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           
  4385                           ;psect for function _myMain_Initialization
  4386  1C31                     _myMain_Initialization:	
  4387                           
  4388                           ;main_B1.c: 170: product = &_product;
  4389                           
  4390                           ;incstack = 0
  4391                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4392  1C31  3045               	movlw	__product& (0+255)
  4393  1C32  0020               	movlb	0	; select bank0
  4394  1C33  00A0               	movwf	??_myMain_Initialization
  4395  1C34  0820               	movf	??_myMain_Initialization,w
  4396  1C35  00EE               	movwf	_product
  4397                           
  4398                           ;main_B1.c: 171: product->Data[20] = 210;
  4399  1C36  30D2               	movlw	210
  4400  1C37  00A0               	movwf	??_myMain_Initialization
  4401  1C38  086E               	movf	_product,w
  4402  1C39  3E14               	addlw	20
  4403  1C3A  0086               	movwf	6
  4404  1C3B  3002               	movlw	2	; select bank4/5
  4405  1C3C  0087               	movwf	7
  4406  1C3D  0820               	movf	??_myMain_Initialization,w
  4407  1C3E  0081               	movwf	1
  4408  1C3F  0008               	return
  4409  1C40                     __end_of_myMain_Initialization:	
  4410                           
  4411                           	psect	text3
  4412  12E4                     __ptext3:	
  4413 ;; *************** function _getTemp_AD *****************
  4414 ;; Defined at:
  4415 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  channel         1    wreg     unsigned char 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  channel         1    5[BANK0 ] unsigned char 
  4420 ;; Return value:  Size  Location     Type
  4421 ;;		None               void
  4422 ;; Registers used:
  4423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;Total ram usage:        2 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    7
  4436 ;; This function calls:
  4437 ;;		_getAD
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _getTemp_AD
  4445  12E4                     _getTemp_AD:	
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4449                           ;getTemp_AD@channel stored from wreg
  4450  12E4  0020               	movlb	0	; select bank0
  4451  12E5  00A5               	movwf	getTemp_AD@channel
  4452                           
  4453                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4454  12E6  0021               	movlb	1	; select bank1
  4455  12E7  1D57               	btfss	_Temp^(0+128),2
  4456  12E8  0008               	return
  4457                           
  4458                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4459  12E9  1657               	bsf	_Temp^(0+128),4
  4460                           
  4461                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4462  12EA  30F0               	movlw	240
  4463  12EB  0020               	movlb	0	; select bank0
  4464  12EC  00A4               	movwf	??_getTemp_AD
  4465  12ED  0824               	movf	??_getTemp_AD,w
  4466  12EE  00A0               	movwf	getAD@adcon1
  4467  12EF  0825               	movf	getTemp_AD@channel,w
  4468  12F0  319F  2714  3192   	fcall	_getAD
  4469  12F3  0020               	movlb	0	; select bank0
  4470  12F4  0821               	movf	?_getAD+1,w
  4471  12F5  0021               	movlb	1	; select bank1
  4472  12F6  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4473  12F7  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4474  12F8  0020               	movlb	0	; select bank0
  4475  12F9  0820               	movf	?_getAD,w
  4476  12FA  0021               	movlb	1	; select bank1
  4477  12FB  01E3               	clrf	(_Temp^(0+128)+12)
  4478  12FC  07E3               	addwf	(_Temp^(0+128)+12),f
  4479                           
  4480                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4481  12FD  0864               	movf	((_Temp+1)^(0+128)+12),w
  4482  12FE  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4483  12FF  1D03               	skipz
  4484  1300  2B03               	goto	u8285
  4485  1301  0863               	movf	(_Temp^(0+128)+12),w
  4486  1302  025F               	subwf	(_Temp^(0+128)+8),w
  4487  1303                     u8285:	
  4488  1303  1803               	skipnc
  4489  1304  2B0C               	goto	l8213
  4490                           
  4491                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4492  1305  0864               	movf	((_Temp+1)^(0+128)+12),w
  4493  1306  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4494  1307  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4495  1308  0863               	movf	(_Temp^(0+128)+12),w
  4496  1309  01DF               	clrf	(_Temp^(0+128)+8)
  4497  130A  07DF               	addwf	(_Temp^(0+128)+8),f
  4498                           
  4499                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4500  130B  0008               	return
  4501  130C                     l8213:	
  4502  130C  0864               	movf	((_Temp+1)^(0+128)+12),w
  4503  130D  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4504  130E  1D03               	skipz
  4505  130F  2B12               	goto	u8295
  4506  1310  0863               	movf	(_Temp^(0+128)+12),w
  4507  1311  0261               	subwf	(_Temp^(0+128)+10),w
  4508  1312                     u8295:	
  4509  1312  1803               	skipnc
  4510  1313  0008               	return
  4511                           
  4512                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4513  1314  0864               	movf	((_Temp+1)^(0+128)+12),w
  4514  1315  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4515  1316  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4516  1317  0863               	movf	(_Temp^(0+128)+12),w
  4517  1318  01E1               	clrf	(_Temp^(0+128)+10)
  4518  1319  07E1               	addwf	(_Temp^(0+128)+10),f
  4519  131A  0008               	return
  4520  131B                     __end_of_getTemp_AD:	
  4521                           
  4522                           	psect	text4
  4523  0BDD                     __ptext4:	
  4524 ;; *************** function _getLoad_AD *****************
  4525 ;; Defined at:
  4526 ;;		line 15 in file "../src/OverLoad_B1.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  channel         1    wreg     unsigned char 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;  channel         1    6[BANK0 ] unsigned char 
  4531 ;;  i               1    9[BANK0 ] unsigned char 
  4532 ;;  j               1    8[BANK0 ] unsigned char 
  4533 ;;  k               1    7[BANK0 ] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;		None               void
  4536 ;; Registers used:
  4537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;Total ram usage:        6 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    7
  4550 ;; This function calls:
  4551 ;;		_getAD
  4552 ;; This function is called by:
  4553 ;;		_main
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _getLoad_AD
  4559  0BDD                     _getLoad_AD:	
  4560                           
  4561                           ;incstack = 0
  4562                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4563                           ;getLoad_AD@channel stored from wreg
  4564  0BDD  0020               	movlb	0	; select bank0
  4565  0BDE  00A6               	movwf	getLoad_AD@channel
  4566                           
  4567                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4568  0BDF  01A9               	clrf	getLoad_AD@i
  4569  0BE0  01A8               	clrf	getLoad_AD@j
  4570  0BE1  01A7               	clrf	getLoad_AD@k
  4571                           
  4572                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4573  0BE2  0022               	movlb	2	; select bank2
  4574  0BE3  1E43               	btfss	_Load^(0+256),4
  4575  0BE4  0008               	return
  4576                           
  4577                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4578  0BE5  30F3               	movlw	243
  4579  0BE6  0020               	movlb	0	; select bank0
  4580  0BE7  00A4               	movwf	??_getLoad_AD
  4581  0BE8  0824               	movf	??_getLoad_AD,w
  4582  0BE9  00A0               	movwf	getAD@adcon1
  4583  0BEA  0826               	movf	getLoad_AD@channel,w
  4584  0BEB  319F  2714  318B   	fcall	_getAD
  4585  0BEE  0020               	movlb	0	; select bank0
  4586  0BEF  0821               	movf	?_getAD+1,w
  4587  0BF0  0022               	movlb	2	; select bank2
  4588  0BF1  01E5               	clrf	((_Load+1)^(0+256)+33)
  4589  0BF2  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4590  0BF3  0020               	movlb	0	; select bank0
  4591  0BF4  0820               	movf	?_getAD,w
  4592  0BF5  0022               	movlb	2	; select bank2
  4593  0BF6  01E4               	clrf	(_Load^(0+256)+33)
  4594  0BF7  07E4               	addwf	(_Load^(0+256)+33),f
  4595                           
  4596                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4597  0BF8  0020               	movlb	0	; select bank0
  4598  0BF9  01A9               	clrf	getLoad_AD@i
  4599  0BFA  3004               	movlw	4
  4600  0BFB  0229               	subwf	getLoad_AD@i,w
  4601  0BFC  1803               	btfsc	3,0
  4602  0BFD  2C2B               	goto	l8035
  4603  0BFE                     l8023:	
  4604                           
  4605                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4606  0BFE  3529               	lslf	getLoad_AD@i,w
  4607  0BFF  3E4E               	addlw	(_Load+11)& (0+255)
  4608  0C00  0086               	movwf	6
  4609  0C01  3001               	movlw	1	; select bank2/3
  4610  0C02  0087               	movwf	7
  4611  0C03  3F40               	moviw [0]fsr1
  4612  0C04  00A4               	movwf	??_getLoad_AD
  4613  0C05  3F41               	moviw [1]fsr1
  4614  0C06  00A5               	movwf	??_getLoad_AD+1
  4615  0C07  0022               	movlb	2	; select bank2
  4616  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4617  0C09  0020               	movlb	0	; select bank0
  4618  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4619  0C0B  1D03               	skipz
  4620  0C0C  2C11               	goto	u7905
  4621  0C0D  0022               	movlb	2	; select bank2
  4622  0C0E  0864               	movf	(_Load^(0+256)+33),w
  4623  0C0F  0020               	movlb	0	; select bank0
  4624  0C10  0224               	subwf	??_getLoad_AD,w
  4625  0C11                     u7905:	
  4626  0C11  1803               	skipnc
  4627  0C12  2C23               	goto	l8031
  4628  0C13  08A8               	movf	getLoad_AD@j,f
  4629  0C14  1D03               	skipz
  4630  0C15  2C23               	goto	l8031
  4631                           
  4632                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4633  0C16  3529               	lslf	getLoad_AD@i,w
  4634  0C17  3E4E               	addlw	(_Load+11)& (0+255)
  4635  0C18  0086               	movwf	6
  4636  0C19  3001               	movlw	1	; select bank2/3
  4637  0C1A  0087               	movwf	7
  4638  0C1B  0022               	movlb	2	; select bank2
  4639  0C1C  0864               	movf	(_Load^(0+256)+33),w
  4640  0C1D  3FC0               	movwi [0]fsr1
  4641  0C1E  0865               	movf	((_Load+1)^(0+256)+33),w
  4642  0C1F  3FC1               	movwi [1]fsr1
  4643                           
  4644                           ;OverLoad_B1.c: 24: j = 1;
  4645  0C20  0020               	movlb	0	; select bank0
  4646  0C21  01A8               	clrf	getLoad_AD@j
  4647  0C22  0AA8               	incf	getLoad_AD@j,f
  4648  0C23                     l8031:	
  4649  0C23  3001               	movlw	1
  4650  0C24  00A4               	movwf	??_getLoad_AD
  4651  0C25  0824               	movf	??_getLoad_AD,w
  4652  0C26  07A9               	addwf	getLoad_AD@i,f
  4653  0C27  3004               	movlw	4
  4654  0C28  0229               	subwf	getLoad_AD@i,w
  4655  0C29  1C03               	skipc
  4656  0C2A  2BFE               	goto	l8023
  4657  0C2B                     l8035:	
  4658                           
  4659                           ;OverLoad_B1.c: 25: }
  4660                           ;OverLoad_B1.c: 26: }
  4661                           ;OverLoad_B1.c: 27: if (j == 0) {
  4662  0C2B  08A8               	movf	getLoad_AD@j,f
  4663  0C2C  1D03               	skipz
  4664  0C2D  0008               	return
  4665                           
  4666                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4667  0C2E  01A9               	clrf	getLoad_AD@i
  4668  0C2F                     L1:	
  4669  0C2F  3004               	movlw	4
  4670  0C30  0229               	subwf	getLoad_AD@i,w
  4671  0C31  1803               	btfsc	3,0
  4672  0C32  0008               	return
  4673                           
  4674                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4675  0C33  3529               	lslf	getLoad_AD@i,w
  4676  0C34  3E58               	addlw	(_Load+21)& (0+255)
  4677  0C35  0086               	movwf	6
  4678  0C36  3001               	movlw	1	; select bank2/3
  4679  0C37  0087               	movwf	7
  4680  0C38  3F40               	moviw [0]fsr1
  4681  0C39  00A4               	movwf	??_getLoad_AD
  4682  0C3A  3F41               	moviw [1]fsr1
  4683  0C3B  00A5               	movwf	??_getLoad_AD+1
  4684  0C3C  0825               	movf	??_getLoad_AD+1,w
  4685  0C3D  0022               	movlb	2	; select bank2
  4686  0C3E  0265               	subwf	((_Load+1)^(0+256)+33),w
  4687  0C3F  1D03               	skipz
  4688  0C40  2C45               	goto	u7955
  4689  0C41  0020               	movlb	0	; select bank0
  4690  0C42  0824               	movf	??_getLoad_AD,w
  4691  0C43  0022               	movlb	2	; select bank2
  4692  0C44  0264               	subwf	(_Load^(0+256)+33),w
  4693  0C45                     u7955:	
  4694  0C45  1803               	skipnc
  4695  0C46  2C58               	goto	l8051
  4696  0C47  0020               	movlb	0	; select bank0
  4697  0C48  08A7               	movf	getLoad_AD@k,f
  4698  0C49  1D03               	skipz
  4699  0C4A  2C58               	goto	l8051
  4700                           
  4701                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4702  0C4B  3529               	lslf	getLoad_AD@i,w
  4703  0C4C  3E58               	addlw	(_Load+21)& (0+255)
  4704  0C4D  0086               	movwf	6
  4705  0C4E  3001               	movlw	1	; select bank2/3
  4706  0C4F  0087               	movwf	7
  4707  0C50  0022               	movlb	2	; select bank2
  4708  0C51  0864               	movf	(_Load^(0+256)+33),w
  4709  0C52  3FC0               	movwi [0]fsr1
  4710  0C53  0865               	movf	((_Load+1)^(0+256)+33),w
  4711  0C54  3FC1               	movwi [1]fsr1
  4712                           
  4713                           ;OverLoad_B1.c: 31: k = 1;
  4714  0C55  0020               	movlb	0	; select bank0
  4715  0C56  01A7               	clrf	getLoad_AD@k
  4716  0C57  0AA7               	incf	getLoad_AD@k,f
  4717  0C58                     l8051:	
  4718  0C58  3001               	movlw	1
  4719  0C59  0020               	movlb	0	; select bank0
  4720  0C5A  00A4               	movwf	??_getLoad_AD
  4721  0C5B  0824               	movf	??_getLoad_AD,w
  4722  0C5C  07A9               	addwf	getLoad_AD@i,f
  4723  0C5D  2C2F               	goto	L1
  4724  0C5E                     __end_of_getLoad_AD:	
  4725                           
  4726                           	psect	text5
  4727  1F14                     __ptext5:	
  4728 ;; *************** function _getAD *****************
  4729 ;; Defined at:
  4730 ;;		line 454 in file "../src/MCU_B1.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  adcon0          1    wreg     unsigned char 
  4733 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  2    0[BANK0 ] int 
  4738 ;; Registers used:
  4739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4745 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;Total ram usage:        4 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    6
  4752 ;; This function calls:
  4753 ;;		_Timeout_Counter
  4754 ;;		_set_TimeoutCleared
  4755 ;; This function is called by:
  4756 ;;		_getLoad_AD
  4757 ;;		_getTemp_AD
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           
  4762                           ;psect for function _getAD
  4763  1F14                     _getAD:	
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4767                           ;getAD@adcon0 stored from wreg
  4768  1F14  0020               	movlb	0	; select bank0
  4769  1F15  00A3               	movwf	getAD@adcon0
  4770                           
  4771                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4772  1F16  0823               	movf	getAD@adcon0,w
  4773  1F17  0021               	movlb	1	; select bank1
  4774  1F18  009D               	movwf	29	;volatile
  4775                           
  4776                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4777  1F19  0020               	movlb	0	; select bank0
  4778  1F1A  0820               	movf	getAD@adcon1,w
  4779  1F1B  0021               	movlb	1	; select bank1
  4780  1F1C  009E               	movwf	30	;volatile
  4781                           
  4782                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4783  1F1D  149D               	bsf	29,1	;volatile
  4784                           
  4785                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4786  1F1E  2F22               	goto	l7449
  4787  1F1F                     l7447:	
  4788                           
  4789                           ;MCU_B1.c: 459: Timeout_Counter();
  4790  1F1F  319D  259C  319F   	fcall	_Timeout_Counter
  4791  1F22                     l7449:	
  4792  1F22  0021               	movlb	1	; select bank1
  4793  1F23  1C9D               	btfss	29,1	;volatile
  4794  1F24  2F27               	goto	l7453
  4795  1F25  1D2C               	btfss	(_myMain^(0+128)+12),2
  4796  1F26  2F1F               	goto	l7447
  4797  1F27                     l7453:	
  4798                           
  4799                           ;MCU_B1.c: 460: };
  4800                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4801  1F27  319B  2329         	fcall	_set_TimeoutCleared
  4802                           
  4803                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4804  1F29  0021               	movlb	1	; select bank1
  4805  1F2A  081C               	movf	28,w	;volatile
  4806  1F2B  0020               	movlb	0	; select bank0
  4807  1F2C  01A1               	clrf	?_getAD+1
  4808  1F2D  07A1               	addwf	?_getAD+1,f
  4809  1F2E  0021               	movlb	1	; select bank1
  4810  1F2F  081B               	movf	27,w	;volatile
  4811  1F30  0020               	movlb	0	; select bank0
  4812  1F31  01A0               	clrf	?_getAD
  4813  1F32  07A0               	addwf	?_getAD,f
  4814  1F33  0008               	return
  4815  1F34                     __end_of_getAD:	
  4816                           
  4817                           	psect	text6
  4818  1CDA                     __ptext6:	
  4819 ;; *************** function _WDT_Main *****************
  4820 ;; Defined at:
  4821 ;;		line 1044 in file "../src/MCU_B1.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;		None
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;		None               void
  4828 ;; Registers used:
  4829 ;;		wreg, status,2, status,0, pclath, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;Total ram usage:        1 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    6
  4842 ;; This function calls:
  4843 ;;		_WDT_Clearing
  4844 ;; This function is called by:
  4845 ;;		_main
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           
  4850                           ;psect for function _WDT_Main
  4851  1CDA                     _WDT_Main:	
  4852                           
  4853                           ;MCU_B1.c: 1045: if (WDT.Enable == 1) {
  4854                           
  4855                           ;incstack = 0
  4856                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4857  1CDA  0021               	movlb	1	; select bank1
  4858  1CDB  1C4A               	btfss	_WDT^(0+128),0
  4859  1CDC  0008               	return
  4860                           
  4861                           ;MCU_B1.c: 1046: if (WDT.Timer-- > 0) {
  4862  1CDD  3001               	movlw	1
  4863  1CDE  02CB               	subwf	(_WDT^(0+128)+1),f
  4864  1CDF  084B               	movf	(_WDT^(0+128)+1),w
  4865  1CE0  3AFF               	xorlw	255
  4866  1CE1  1903               	skipnz
  4867  1CE2  0008               	return
  4868                           
  4869                           ;MCU_B1.c: 1047: WDT.Timer = 100;
  4870  1CE3  3064               	movlw	100
  4871  1CE4  0020               	movlb	0	; select bank0
  4872  1CE5  00A0               	movwf	??_WDT_Main
  4873  1CE6  0820               	movf	??_WDT_Main,w
  4874  1CE7  0021               	movlb	1	; select bank1
  4875  1CE8  00CB               	movwf	(_WDT^(0+128)+1)
  4876                           
  4877                           ;MCU_B1.c: 1048: WDT_Clearing();
  4878  1CE9  3180  2002         	fcall	_WDT_Clearing
  4879  1CEB  0008               	return
  4880  1CEC                     __end_of_WDT_Main:	
  4881                           
  4882                           	psect	text7
  4883  0002                     __ptext7:	
  4884 ;; *************** function _WDT_Clearing *****************
  4885 ;; Defined at:
  4886 ;;		line 1054 in file "../src/MCU_B1.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;		None
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;		None               void
  4893 ;; Registers used:
  4894 ;;		None
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;Total ram usage:        0 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    5
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_WDT_Main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _WDT_Clearing
  4916  0002                     _WDT_Clearing:	
  4917                           
  4918                           ;incstack = 0
  4919                           ; Regs used in _WDT_Clearing: []
  4920  0002  0064               	clrwdt	;# 
  4921  0003  0008               	return
  4922  0004                     __end_of_WDT_Clearing:	
  4923                           
  4924                           	psect	text8
  4925  07FD                     __ptext8:	
  4926 ;; *************** function _Temp_Main *****************
  4927 ;; Defined at:
  4928 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4946 ;;Total ram usage:        0 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    8
  4949 ;; This function calls:
  4950 ;;		_setTemp_Main
  4951 ;; This function is called by:
  4952 ;;		_main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _Temp_Main
  4958  07FD                     _Temp_Main:	
  4959                           
  4960                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4964  07FD  318D  25FE         	fcall	_setTemp_Main
  4965  07FF  0008               	return
  4966  0800                     __end_of_Temp_Main:	
  4967                           
  4968                           	psect	text9
  4969  0DFE                     __ptext9:	
  4970 ;; *************** function _setTemp_Main *****************
  4971 ;; Defined at:
  4972 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;		None               void
  4979 ;; Registers used:
  4980 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;Total ram usage:        2 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    7
  4993 ;; This function calls:
  4994 ;;		_getMain_All_Error_Status
  4995 ;;		_setBuz
  4996 ;; This function is called by:
  4997 ;;		_Temp_Main
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _setTemp_Main
  5003  0DFE                     _setTemp_Main:	
  5004                           
  5005                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5009  0DFE  0021               	movlb	1	; select bank1
  5010  0DFF  1C57               	btfss	_Temp^(0+128),0
  5011  0E00  2E9F               	goto	l1615
  5012                           
  5013                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  5014  0E01  1957               	btfsc	_Temp^(0+128),2
  5015  0E02  2E12               	goto	l7525
  5016                           
  5017                           ;OverTemperature_B1.c: 60: Temp.Time++;
  5018  0E03  3001               	movlw	1
  5019  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  5020  0E05  3000               	movlw	0
  5021  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5022                           
  5023                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  5024  0E07  3001               	movlw	1
  5025  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5026  0E09  30F4               	movlw	244
  5027  0E0A  1903               	skipnz
  5028  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  5029  0E0C  1C03               	skipc
  5030  0E0D  0008               	return
  5031                           
  5032                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  5033  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  5034  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5035                           
  5036                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  5037  0E10  1557               	bsf	_Temp^(0+128),2
  5038                           
  5039                           ;OverTemperature_B1.c: 64: }
  5040                           ;OverTemperature_B1.c: 65: } else {
  5041  0E11  0008               	return
  5042  0E12                     l7525:	
  5043                           
  5044                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5045  0E12  3002               	movlw	2
  5046  0E13  3191  21DC  318D   	fcall	_getMain_All_Error_Status
  5047  0E16  3800               	iorlw	0
  5048  0E17  1D03               	skipz
  5049  0E18  0008               	return
  5050                           
  5051                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5052  0E19  3001               	movlw	1
  5053  0E1A  0021               	movlb	1	; select bank1
  5054  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  5055  0E1C  3000               	movlw	0
  5056  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5057                           
  5058                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5059  0E1E  3000               	movlw	0
  5060  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5061  0E20  3005               	movlw	5
  5062  0E21  1903               	skipnz
  5063  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  5064  0E23  1C03               	skipc
  5065  0E24  0008               	return
  5066                           
  5067                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5068  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  5069  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5070                           
  5071                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5072  0E27  1E57               	btfss	_Temp^(0+128),4
  5073  0E28  0008               	return
  5074                           
  5075                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5076  0E29  1157               	bcf	_Temp^(0+128),2
  5077                           
  5078                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5079  0E2A  300A               	movlw	10
  5080  0E2B  3ED7               	addlw	_Temp& (0+255)
  5081  0E2C  0086               	movwf	6
  5082  0E2D  0187               	clrf	7
  5083  0E2E  3008               	movlw	8
  5084  0E2F  3ED7               	addlw	_Temp& (0+255)
  5085  0E30  0084               	movwf	4
  5086  0E31  0185               	clrf	5
  5087  0E32  3F40               	moviw [0]fsr1
  5088  0E33  0700               	addwf	0,w
  5089  0E34  0020               	movlb	0	; select bank0
  5090  0E35  00AD               	movwf	??_setTemp_Main
  5091  0E36  3101               	addfsr 0,1
  5092  0E37  3F41               	moviw [1]fsr1
  5093  0E38  3D00               	addwfc	0,w
  5094  0E39  00AE               	movwf	??_setTemp_Main+1
  5095  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5096  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5097  0E3C  082D               	movf	??_setTemp_Main,w
  5098  0E3D  0021               	movlb	1	; select bank1
  5099  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  5100  0E3F  0020               	movlb	0	; select bank0
  5101  0E40  082E               	movf	??_setTemp_Main+1,w
  5102  0E41  0021               	movlb	1	; select bank1
  5103  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5104                           
  5105                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5106  0E43  30C7               	movlw	199
  5107  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  5108  0E45  3001               	movlw	1
  5109  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  5110                           
  5111                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5112  0E47  309F               	movlw	159
  5113  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  5114  0E49  3001               	movlw	1
  5115  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  5116                           
  5117                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5118  0E4B  1CD7               	btfss	_Temp^(0+128),1
  5119  0E4C  2E6D               	goto	l7557
  5120                           
  5121                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5122  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  5123  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5124  0E4F  1D03               	skipz
  5125  0E50  2E53               	goto	u7055
  5126  0E51  0865               	movf	(_Temp^(0+128)+14),w
  5127  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  5128  0E53                     u7055:	
  5129  0E53  1C03               	skipc
  5130  0E54  2E6B               	goto	l7555
  5131                           
  5132                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5133  0E55  3001               	movlw	1
  5134  0E56  0020               	movlb	0	; select bank0
  5135  0E57  00AD               	movwf	??_setTemp_Main
  5136  0E58  082D               	movf	??_setTemp_Main,w
  5137  0E59  0021               	movlb	1	; select bank1
  5138  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  5139                           
  5140                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5141  0E5B  3003               	movlw	3
  5142  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  5143  0E5D  1C03               	skipc
  5144  0E5E  2E83               	goto	l7569
  5145                           
  5146                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5147  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  5148                           
  5149                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5150  0E60  10D7               	bcf	_Temp^(0+128),1
  5151                           
  5152                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5153  0E61  3064               	movlw	100
  5154  0E62  0020               	movlb	0	; select bank0
  5155  0E63  00A9               	movwf	setBuz@time
  5156  0E64  3000               	movlw	0
  5157  0E65  00AA               	movwf	setBuz@time+1
  5158  0E66  3002               	movlw	2
  5159  0E67  3196  263C  318D   	fcall	_setBuz
  5160                           
  5161                           ;OverTemperature_B1.c: 96: }
  5162                           ;OverTemperature_B1.c: 97: } else {
  5163  0E6A  2E83               	goto	l7569
  5164  0E6B                     l7555:	
  5165                           
  5166                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5167  0E6B  0021               	movlb	1	; select bank1
  5168  0E6C  2E82               	goto	l7567
  5169  0E6D                     l7557:	
  5170                           ;OverTemperature_B1.c: 99: }
  5171                           ;OverTemperature_B1.c: 100: } else {
  5172                           
  5173                           
  5174                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5175  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5176  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5177  0E6F  1D03               	skipz
  5178  0E70  2E73               	goto	u7075
  5179  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5180  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5181  0E73                     u7075:	
  5182  0E73  1C03               	skipc
  5183  0E74  2E82               	goto	l7567
  5184                           
  5185                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5186  0E75  3001               	movlw	1
  5187  0E76  0020               	movlb	0	; select bank0
  5188  0E77  00AD               	movwf	??_setTemp_Main
  5189  0E78  082D               	movf	??_setTemp_Main,w
  5190  0E79  0021               	movlb	1	; select bank1
  5191  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5192                           
  5193                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5194  0E7B  3003               	movlw	3
  5195  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5196  0E7D  1C03               	skipc
  5197  0E7E  2E83               	goto	l7569
  5198                           
  5199                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5200  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5201                           
  5202                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5203  0E80  14D7               	bsf	_Temp^(0+128),1
  5204                           
  5205                           ;OverTemperature_B1.c: 106: }
  5206                           ;OverTemperature_B1.c: 107: } else {
  5207  0E81  2E83               	goto	l7569
  5208  0E82                     l7567:	
  5209                           
  5210                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5211  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5212  0E83                     l7569:	
  5213                           
  5214                           ;OverTemperature_B1.c: 109: }
  5215                           ;OverTemperature_B1.c: 110: }
  5216                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5217  0E83  0021               	movlb	1	; select bank1
  5218  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5219  0E85  0020               	movlb	0	; select bank0
  5220  0E86  00AD               	movwf	??_setTemp_Main
  5221  0E87  086E               	movf	_product,w
  5222  0E88  3E18               	addlw	24
  5223  0E89  0086               	movwf	6
  5224  0E8A  3002               	movlw	2	; select bank4/5
  5225  0E8B  0087               	movwf	7
  5226  0E8C  082D               	movf	??_setTemp_Main,w
  5227  0E8D  0081               	movwf	1
  5228                           
  5229                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5230  0E8E  0021               	movlb	1	; select bank1
  5231  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5232  0E90  0020               	movlb	0	; select bank0
  5233  0E91  00AD               	movwf	??_setTemp_Main
  5234  0E92  086E               	movf	_product,w
  5235  0E93  3E19               	addlw	25
  5236  0E94  0086               	movwf	6
  5237  0E95  3002               	movlw	2	; select bank4/5
  5238  0E96  0087               	movwf	7
  5239  0E97  082D               	movf	??_setTemp_Main,w
  5240  0E98  0081               	movwf	1
  5241                           
  5242                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5243  0E99  0021               	movlb	1	; select bank1
  5244  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5245  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5246                           
  5247                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5248  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5249  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5250                           
  5251                           ;OverTemperature_B1.c: 120: }
  5252                           ;OverTemperature_B1.c: 121: }
  5253                           ;OverTemperature_B1.c: 122: }
  5254                           ;OverTemperature_B1.c: 123: }
  5255                           ;OverTemperature_B1.c: 124: } else {
  5256  0E9E  0008               	return
  5257  0E9F                     l1615:	
  5258                           
  5259                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5260  0E9F  1C20               	btfss	_myMain^(0+128),0
  5261  0EA0  0008               	return
  5262                           
  5263                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5264  0EA1  1457               	bsf	_Temp^(0+128),0
  5265  0EA2  0008               	return
  5266  0EA3                     __end_of_setTemp_Main:	
  5267                           
  5268                           	psect	text10
  5269  1B16                     __ptext10:	
  5270 ;; *************** function _Temp_Initialization *****************
  5271 ;; Defined at:
  5272 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;		None
  5277 ;; Return value:  Size  Location     Type
  5278 ;;		None               void
  5279 ;; Registers used:
  5280 ;;		status,2, status,0, pclath, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;Total ram usage:        0 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    6
  5293 ;; This function calls:
  5294 ;;		_setTemp_Initialization
  5295 ;; This function is called by:
  5296 ;;		_main
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _Temp_Initialization
  5302  1B16                     _Temp_Initialization:	
  5303                           
  5304                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5308  1B16  3188  2000         	fcall	_setTemp_Initialization
  5309  1B18  0008               	return
  5310  1B19                     __end_of_Temp_Initialization:	
  5311                           
  5312                           	psect	text11
  5313  0800                     __ptext11:	
  5314 ;; *************** function _setTemp_Initialization *****************
  5315 ;; Defined at:
  5316 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;		None               void
  5323 ;; Registers used:
  5324 ;;		None
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    5
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_Temp_Initialization
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _setTemp_Initialization
  5346  0800                     _setTemp_Initialization:	
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _setTemp_Initialization: []
  5350  0800  0008               	return
  5351  0801                     __end_of_setTemp_Initialization:	
  5352                           
  5353                           	psect	text12
  5354  1FDC                     __ptext12:	
  5355 ;; *************** function _Switch_Main *****************
  5356 ;; Defined at:
  5357 ;;		line 72 in file "../src/Switch_B1.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;		None
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  error           1   30[BANK0 ] unsigned char 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;		None               void
  5364 ;; Registers used:
  5365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;Total ram usage:        2 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:   11
  5378 ;; This function calls:
  5379 ;;		_TouchPower
  5380 ;;		_getMain_All_Error_Status
  5381 ;;		_setMain_Exception
  5382 ;;		_setSw_Main
  5383 ;; This function is called by:
  5384 ;;		_main
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           
  5389                           ;psect for function _Switch_Main
  5390  1FDC                     _Switch_Main:	
  5391                           
  5392                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5396  1FDC  3000               	movlw	0
  5397  1FDD  3191  21DC  319F   	fcall	_getMain_All_Error_Status
  5398  1FE0  0020               	movlb	0	; select bank0
  5399  1FE1  00BD               	movwf	??_Switch_Main
  5400  1FE2  083D               	movf	??_Switch_Main,w
  5401  1FE3  00BE               	movwf	Switch_Main@error
  5402                           
  5403                           ;Switch_B1.c: 74: if (error != 0) {
  5404  1FE4  083E               	movf	Switch_Main@error,w
  5405  1FE5  1903               	btfsc	3,2
  5406  1FE6  2FEC               	goto	l2385
  5407                           
  5408                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5409  1FE7  0021               	movlb	1	; select bank1
  5410  1FE8  1852               	btfsc	_SwDetect^(0+128),0
  5411  1FE9  2FF5               	goto	l8241
  5412                           
  5413                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5414  1FEA  1452               	bsf	_SwDetect^(0+128),0
  5415  1FEB  2FF0               	goto	L2
  5416  1FEC                     l2385:	
  5417                           ;Switch_B1.c: 80: }
  5418                           ;Switch_B1.c: 81: } else {
  5419                           
  5420                           ;Switch_B1.c: 78: setMain_Exception(error);
  5421                           
  5422                           
  5423                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5424  1FEC  0021               	movlb	1	; select bank1
  5425  1FED  1C52               	btfss	_SwDetect^(0+128),0
  5426  1FEE  2FF5               	goto	l8241
  5427                           
  5428                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5429  1FEF  1052               	bcf	_SwDetect^(0+128),0
  5430  1FF0                     L2:	
  5431                           
  5432                           ;Switch_B1.c: 85: setMain_Exception(error);
  5433  1FF0  0020               	movlb	0	; select bank0
  5434  1FF1  083E               	movf	Switch_Main@error,w
  5435  1FF2  3197  27A4  319F   	fcall	_setMain_Exception
  5436  1FF5                     l8241:	
  5437                           
  5438                           ;Switch_B1.c: 87: }
  5439                           ;Switch_B1.c: 88: }
  5440                           ;Switch_B1.c: 91: setSw_Main(1);
  5441  1FF5  3001               	movlw	1
  5442  1FF6  3180  204B  319F   	fcall	_setSw_Main
  5443                           
  5444                           ;Switch_B1.c: 95: setSw_Main(2);
  5445  1FF9  3002               	movlw	2
  5446  1FFA  3180  204B  319F   	fcall	_setSw_Main
  5447                           
  5448                           ;Switch_B1.c: 103: TouchPower();
  5449  1FFD  319D  25DB         	fcall	_TouchPower
  5450  1FFF  0008               	return
  5451  2000                     __end_of_Switch_Main:	
  5452                           
  5453                           	psect	text13
  5454  004B                     __ptext13:	
  5455 ;; *************** function _setSw_Main *****************
  5456 ;; Defined at:
  5457 ;;		line 137 in file "../src/Switch_B1.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  sw              1    wreg     unsigned char 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  sw              1   19[BANK0 ] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;		None               void
  5464 ;; Registers used:
  5465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;Total ram usage:        3 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    9
  5478 ;; This function calls:
  5479 ;;		_SwPointSelect
  5480 ;;		_getSw_KeyStatus
  5481 ;;		_setBuz
  5482 ;;		_setDimmerLights_AdjControl
  5483 ;;		_setDimmerLights_SwOff
  5484 ;;		_setDimmerLights_SwOn
  5485 ;;		_setRF_Learn
  5486 ;; This function is called by:
  5487 ;;		_Switch_Main
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           
  5492                           ;psect for function _setSw_Main
  5493  004B                     _setSw_Main:	
  5494                           
  5495                           ;incstack = 0
  5496                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5497                           ;setSw_Main@sw stored from wreg
  5498  004B  0020               	movlb	0	; select bank0
  5499  004C  00B3               	movwf	setSw_Main@sw
  5500                           
  5501                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5502  004D  0833               	movf	setSw_Main@sw,w
  5503  004E  319D  2574  3180   	fcall	_SwPointSelect
  5504                           
  5505                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5506  0051  087C               	movf	_Sw,w
  5507  0052  0086               	movwf	6
  5508  0053  3001               	movlw	1	; select bank2/3
  5509  0054  0087               	movwf	7
  5510  0055  1C01               	btfss	1,0
  5511  0056  29B1               	goto	l2395
  5512                           
  5513                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5514  0057  0021               	movlb	1	; select bank1
  5515  0058  1852               	btfsc	_SwDetect^(0+128),0
  5516  0059  2875               	goto	l7743
  5517                           
  5518                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5519  005A  0A7C               	incf	_Sw,w
  5520  005B  0086               	movwf	6
  5521  005C  3001               	movlw	1	; select bank2/3
  5522  005D  0087               	movwf	7
  5523  005E  1081               	bcf	1,1
  5524                           
  5525                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5526  005F  0020               	movlb	0	; select bank0
  5527  0060  0833               	movf	setSw_Main@sw,w
  5528  0061  3190  2066  3180   	fcall	_getSw_KeyStatus
  5529  0064  3A01               	xorlw	1
  5530  0065  3000               	movlw	0
  5531  0066  1903               	skipnz
  5532  0067  3001               	movlw	1
  5533  0068  0020               	movlb	0	; select bank0
  5534  0069  00B1               	movwf	??_setSw_Main
  5535  006A  087C               	movf	_Sw,w
  5536  006B  0086               	movwf	6
  5537  006C  3001               	movlw	1	; select bank2/3
  5538  006D  0087               	movwf	7
  5539  006E  0DB1               	rlf	??_setSw_Main,f
  5540  006F  0801               	movf	1,w
  5541  0070  0631               	xorwf	??_setSw_Main,w
  5542  0071  39FD               	andlw	-3
  5543  0072  0631               	xorwf	??_setSw_Main,w
  5544  0073  0081               	movwf	1
  5545                           
  5546                           ;Switch_B1.c: 143: } else {
  5547  0074  288A               	goto	l2397
  5548  0075                     l7743:	
  5549                           
  5550                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5551  0075  0A7C               	incf	_Sw,w
  5552  0076  0086               	movwf	6
  5553  0077  3001               	movlw	1	; select bank2/3
  5554  0078  0087               	movwf	7
  5555  0079  1881               	btfsc	1,1
  5556  007A  288A               	goto	l2397
  5557                           
  5558                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5559  007B  0A7C               	incf	_Sw,w
  5560  007C  0086               	movwf	6
  5561  007D  3001               	movlw	1	; select bank2/3
  5562  007E  0087               	movwf	7
  5563  007F  1481               	bsf	1,1
  5564                           
  5565                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5566  0080  087C               	movf	_Sw,w
  5567  0081  0086               	movwf	6
  5568  0082  3001               	movlw	1	; select bank2/3
  5569  0083  0087               	movwf	7
  5570  0084  1081               	bcf	1,1
  5571                           
  5572                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5573  0085  087C               	movf	_Sw,w
  5574  0086  0086               	movwf	6
  5575  0087  3001               	movlw	1	; select bank2/3
  5576  0088  0087               	movwf	7
  5577  0089  1501               	bsf	1,2
  5578  008A                     l2397:	
  5579                           
  5580                           ;Switch_B1.c: 148: }
  5581                           ;Switch_B1.c: 149: }
  5582                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5583  008A  087C               	movf	_Sw,w
  5584  008B  0086               	movwf	6
  5585  008C  3001               	movlw	1	; select bank2/3
  5586  008D  0087               	movwf	7
  5587  008E  1C81               	btfss	1,1
  5588  008F  295A               	goto	l7793
  5589                           
  5590                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5591  0090  087C               	movf	_Sw,w
  5592  0091  0086               	movwf	6
  5593  0092  3001               	movlw	1	; select bank2/3
  5594  0093  0087               	movwf	7
  5595  0094  1901               	btfsc	1,2
  5596  0095  28B8               	goto	l7759
  5597                           
  5598                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5599  0096  3001               	movlw	1
  5600  0097  0020               	movlb	0	; select bank0
  5601  0098  00B1               	movwf	??_setSw_Main
  5602  0099  087C               	movf	_Sw,w
  5603  009A  3E02               	addlw	2
  5604  009B  0086               	movwf	6
  5605  009C  3001               	movlw	1	; select bank2/3
  5606  009D  0087               	movwf	7
  5607  009E  0831               	movf	??_setSw_Main,w
  5608  009F  0781               	addwf	1,f
  5609                           
  5610                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5611  00A0  087C               	movf	_Sw,w
  5612  00A1  3E02               	addlw	2
  5613  00A2  0086               	movwf	6
  5614  00A3  3001               	movlw	1	; select bank2/3
  5615  00A4  0087               	movwf	7
  5616  00A5  3005               	movlw	5
  5617  00A6  0201               	subwf	1,w
  5618  00A7  1C03               	skipc
  5619  00A8  0008               	return
  5620                           
  5621                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5622  00A9  087C               	movf	_Sw,w
  5623  00AA  3E02               	addlw	2
  5624  00AB  0086               	movwf	6
  5625  00AC  3001               	movlw	1	; select bank2/3
  5626  00AD  0087               	movwf	7
  5627  00AE  0181               	clrf	1
  5628                           
  5629                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5630  00AF  087C               	movf	_Sw,w
  5631  00B0  0086               	movwf	6
  5632  00B1  3001               	movlw	1	; select bank2/3
  5633  00B2  0087               	movwf	7
  5634  00B3  1501               	bsf	1,2
  5635                           
  5636                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5637  00B4  0833               	movf	setSw_Main@sw,w
  5638  00B5  3193  2355         	fcall	_setDimmerLights_SwOn
  5639                           
  5640                           ;Switch_B1.c: 162: }
  5641                           ;Switch_B1.c: 163: } else {
  5642  00B7  0008               	return
  5643  00B8                     l7759:	
  5644                           
  5645                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5646  00B8  087C               	movf	_Sw,w
  5647  00B9  0086               	movwf	6
  5648  00BA  3001               	movlw	1	; select bank2/3
  5649  00BB  0087               	movwf	7
  5650  00BC  1981               	btfsc	1,3
  5651  00BD  28EA               	goto	l7769
  5652                           
  5653                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5654  00BE  087C               	movf	_Sw,w
  5655  00BF  3E03               	addlw	3
  5656  00C0  0086               	movwf	6
  5657  00C1  3001               	movlw	1	; select bank2/3
  5658  00C2  0087               	movwf	7
  5659  00C3  3001               	movlw	1
  5660  00C4  0781               	addwf	1,f
  5661  00C5  3141               	addfsr 1,1
  5662  00C6  1803               	skipnc
  5663  00C7  0A81               	incf	1,f
  5664                           
  5665                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5666  00C8  087C               	movf	_Sw,w
  5667  00C9  3E03               	addlw	3
  5668  00CA  0086               	movwf	6
  5669  00CB  3001               	movlw	1	; select bank2/3
  5670  00CC  0087               	movwf	7
  5671  00CD  3F40               	moviw [0]fsr1
  5672  00CE  0020               	movlb	0	; select bank0
  5673  00CF  00B1               	movwf	??_setSw_Main
  5674  00D0  3F41               	moviw [1]fsr1
  5675  00D1  00B2               	movwf	??_setSw_Main+1
  5676  00D2  3000               	movlw	0
  5677  00D3  0232               	subwf	??_setSw_Main+1,w
  5678  00D4  3096               	movlw	150
  5679  00D5  1903               	skipnz
  5680  00D6  0231               	subwf	??_setSw_Main,w
  5681  00D7  1C03               	skipc
  5682  00D8  0008               	return
  5683                           
  5684                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5685  00D9  087C               	movf	_Sw,w
  5686  00DA  3E03               	addlw	3
  5687  00DB  0086               	movwf	6
  5688  00DC  3001               	movlw	1	; select bank2/3
  5689  00DD  0087               	movwf	7
  5690  00DE  3000               	movlw	0
  5691  00DF  3FC0               	movwi [0]fsr1
  5692  00E0  3FC1               	movwi [1]fsr1
  5693                           
  5694                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5695  00E1  087C               	movf	_Sw,w
  5696  00E2  0086               	movwf	6
  5697  00E3  3001               	movlw	1	; select bank2/3
  5698  00E4  0087               	movwf	7
  5699  00E5  1581               	bsf	1,3
  5700                           
  5701                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5702  00E6  0833               	movf	setSw_Main@sw,w
  5703  00E7  3192  2243         	fcall	_setDimmerLights_AdjControl
  5704                           
  5705                           ;Switch_B1.c: 174: }
  5706                           ;Switch_B1.c: 175: } else {
  5707  00E9  0008               	return
  5708  00EA                     l7769:	
  5709                           
  5710                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5711  00EA  087C               	movf	_Sw,w
  5712  00EB  0086               	movwf	6
  5713  00EC  3001               	movlw	1	; select bank2/3
  5714  00ED  0087               	movwf	7
  5715  00EE  1A01               	btfsc	1,4
  5716  00EF  2928               	goto	l7783
  5717                           
  5718                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5719  00F0  087C               	movf	_Sw,w
  5720  00F1  3E05               	addlw	5
  5721  00F2  0086               	movwf	6
  5722  00F3  3001               	movlw	1	; select bank2/3
  5723  00F4  0087               	movwf	7
  5724  00F5  3001               	movlw	1
  5725  00F6  0781               	addwf	1,f
  5726  00F7  3141               	addfsr 1,1
  5727  00F8  1803               	skipnc
  5728  00F9  0A81               	incf	1,f
  5729                           
  5730                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5731  00FA  087C               	movf	_Sw,w
  5732  00FB  3E05               	addlw	5
  5733  00FC  0086               	movwf	6
  5734  00FD  3001               	movlw	1	; select bank2/3
  5735  00FE  0087               	movwf	7
  5736  00FF  3F40               	moviw [0]fsr1
  5737  0100  0020               	movlb	0	; select bank0
  5738  0101  00B1               	movwf	??_setSw_Main
  5739  0102  3F41               	moviw [1]fsr1
  5740  0103  00B2               	movwf	??_setSw_Main+1
  5741  0104  3000               	movlw	0
  5742  0105  0232               	subwf	??_setSw_Main+1,w
  5743  0106  3096               	movlw	150
  5744  0107  1903               	skipnz
  5745  0108  0231               	subwf	??_setSw_Main,w
  5746  0109  1C03               	skipc
  5747  010A  0008               	return
  5748                           
  5749                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5750  010B  087C               	movf	_Sw,w
  5751  010C  3E05               	addlw	5
  5752  010D  0086               	movwf	6
  5753  010E  3001               	movlw	1	; select bank2/3
  5754  010F  0087               	movwf	7
  5755  0110  3000               	movlw	0
  5756  0111  3FC0               	movwi [0]fsr1
  5757  0112  3FC1               	movwi [1]fsr1
  5758                           
  5759                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5760  0113  087C               	movf	_Sw,w
  5761  0114  0086               	movwf	6
  5762  0115  3001               	movlw	1	; select bank2/3
  5763  0116  0087               	movwf	7
  5764  0117  1601               	bsf	1,4
  5765                           
  5766                           ;Switch_B1.c: 183: setRF_Learn(1);
  5767  0118  3001               	movlw	1
  5768  0119  319D  2588  3180   	fcall	_setRF_Learn
  5769                           
  5770                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5771  011C  0021               	movlb	1	; select bank1
  5772  011D  1EA0               	btfss	_myMain^(0+128),5
  5773  011E  0008               	return
  5774                           
  5775                           ;Switch_B1.c: 186: setBuz(2, 100);
  5776  011F  3064               	movlw	100
  5777  0120  0020               	movlb	0	; select bank0
  5778  0121  00A9               	movwf	setBuz@time
  5779  0122  3000               	movlw	0
  5780  0123  00AA               	movwf	setBuz@time+1
  5781  0124  3002               	movlw	2
  5782  0125  3196  263C         	fcall	_setBuz
  5783                           
  5784                           ;Switch_B1.c: 187: }
  5785                           ;Switch_B1.c: 189: }
  5786                           ;Switch_B1.c: 190: } else {
  5787  0127  0008               	return
  5788  0128                     l7783:	
  5789                           
  5790                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5791  0128  087C               	movf	_Sw,w
  5792  0129  0086               	movwf	6
  5793  012A  3001               	movlw	1	; select bank2/3
  5794  012B  0087               	movwf	7
  5795  012C  1A81               	btfsc	1,5
  5796  012D  0008               	return
  5797                           
  5798                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5799  012E  087C               	movf	_Sw,w
  5800  012F  3E07               	addlw	7
  5801  0130  0086               	movwf	6
  5802  0131  3001               	movlw	1	; select bank2/3
  5803  0132  0087               	movwf	7
  5804  0133  3001               	movlw	1
  5805  0134  0781               	addwf	1,f
  5806  0135  3141               	addfsr 1,1
  5807  0136  1803               	skipnc
  5808  0137  0A81               	incf	1,f
  5809                           
  5810                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5811  0138  087C               	movf	_Sw,w
  5812  0139  3E07               	addlw	7
  5813  013A  0086               	movwf	6
  5814  013B  3001               	movlw	1	; select bank2/3
  5815  013C  0087               	movwf	7
  5816  013D  3F40               	moviw [0]fsr1
  5817  013E  0020               	movlb	0	; select bank0
  5818  013F  00B1               	movwf	??_setSw_Main
  5819  0140  3F41               	moviw [1]fsr1
  5820  0141  00B2               	movwf	??_setSw_Main+1
  5821  0142  3001               	movlw	1
  5822  0143  0232               	subwf	??_setSw_Main+1,w
  5823  0144  302C               	movlw	44
  5824  0145  1903               	skipnz
  5825  0146  0231               	subwf	??_setSw_Main,w
  5826  0147  1C03               	skipc
  5827  0148  0008               	return
  5828                           
  5829                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5830  0149  087C               	movf	_Sw,w
  5831  014A  3E07               	addlw	7
  5832  014B  0086               	movwf	6
  5833  014C  3001               	movlw	1	; select bank2/3
  5834  014D  0087               	movwf	7
  5835  014E  3000               	movlw	0
  5836  014F  3FC0               	movwi [0]fsr1
  5837  0150  3FC1               	movwi [1]fsr1
  5838                           
  5839                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5840  0151  087C               	movf	_Sw,w
  5841  0152  0086               	movwf	6
  5842  0153  3001               	movlw	1	; select bank2/3
  5843  0154  0087               	movwf	7
  5844  0155  1681               	bsf	1,5
  5845                           
  5846                           ;Switch_B1.c: 198: setRF_Learn(0);
  5847  0156  3000               	movlw	0
  5848  0157  319D  2588         	fcall	_setRF_Learn
  5849                           
  5850                           ;Switch_B1.c: 201: }
  5851                           ;Switch_B1.c: 202: }
  5852                           ;Switch_B1.c: 203: }
  5853                           ;Switch_B1.c: 204: }
  5854                           ;Switch_B1.c: 205: }
  5855                           ;Switch_B1.c: 206: } else {
  5856  0159  0008               	return
  5857  015A                     l7793:	
  5858                           
  5859                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5860  015A  087C               	movf	_Sw,w
  5861  015B  0086               	movwf	6
  5862  015C  3001               	movlw	1	; select bank2/3
  5863  015D  0087               	movwf	7
  5864  015E  1D01               	btfss	1,2
  5865  015F  0008               	return
  5866                           
  5867                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5868  0160  3001               	movlw	1
  5869  0161  0020               	movlb	0	; select bank0
  5870  0162  00B1               	movwf	??_setSw_Main
  5871  0163  087C               	movf	_Sw,w
  5872  0164  3E02               	addlw	2
  5873  0165  0086               	movwf	6
  5874  0166  3001               	movlw	1	; select bank2/3
  5875  0167  0087               	movwf	7
  5876  0168  0831               	movf	??_setSw_Main,w
  5877  0169  0781               	addwf	1,f
  5878                           
  5879                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5880  016A  087C               	movf	_Sw,w
  5881  016B  3E02               	addlw	2
  5882  016C  0086               	movwf	6
  5883  016D  3001               	movlw	1	; select bank2/3
  5884  016E  0087               	movwf	7
  5885  016F  3005               	movlw	5
  5886  0170  0201               	subwf	1,w
  5887  0171  1C03               	skipc
  5888  0172  0008               	return
  5889                           
  5890                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5891  0173  087C               	movf	_Sw,w
  5892  0174  3E02               	addlw	2
  5893  0175  0086               	movwf	6
  5894  0176  3001               	movlw	1	; select bank2/3
  5895  0177  0087               	movwf	7
  5896  0178  0181               	clrf	1
  5897                           
  5898                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5899  0179  087C               	movf	_Sw,w
  5900  017A  0086               	movwf	6
  5901  017B  3001               	movlw	1	; select bank2/3
  5902  017C  0087               	movwf	7
  5903  017D  1101               	bcf	1,2
  5904                           
  5905                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5906  017E  087C               	movf	_Sw,w
  5907  017F  3E03               	addlw	3
  5908  0180  0086               	movwf	6
  5909  0181  3001               	movlw	1	; select bank2/3
  5910  0182  0087               	movwf	7
  5911  0183  3000               	movlw	0
  5912  0184  3FC0               	movwi [0]fsr1
  5913  0185  3FC1               	movwi [1]fsr1
  5914                           
  5915                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5916  0186  087C               	movf	_Sw,w
  5917  0187  0086               	movwf	6
  5918  0188  3001               	movlw	1	; select bank2/3
  5919  0189  0087               	movwf	7
  5920  018A  1181               	bcf	1,3
  5921                           
  5922                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5923  018B  087C               	movf	_Sw,w
  5924  018C  3E05               	addlw	5
  5925  018D  0086               	movwf	6
  5926  018E  3001               	movlw	1	; select bank2/3
  5927  018F  0087               	movwf	7
  5928  0190  3000               	movlw	0
  5929  0191  3FC0               	movwi [0]fsr1
  5930  0192  3FC1               	movwi [1]fsr1
  5931                           
  5932                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5933  0193  087C               	movf	_Sw,w
  5934  0194  0086               	movwf	6
  5935  0195  3001               	movlw	1	; select bank2/3
  5936  0196  0087               	movwf	7
  5937  0197  1201               	bcf	1,4
  5938                           
  5939                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5940  0198  087C               	movf	_Sw,w
  5941  0199  3E07               	addlw	7
  5942  019A  0086               	movwf	6
  5943  019B  3001               	movlw	1	; select bank2/3
  5944  019C  0087               	movwf	7
  5945  019D  3000               	movlw	0
  5946  019E  3FC0               	movwi [0]fsr1
  5947  019F  3FC1               	movwi [1]fsr1
  5948                           
  5949                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5950  01A0  087C               	movf	_Sw,w
  5951  01A1  0086               	movwf	6
  5952  01A2  3001               	movlw	1	; select bank2/3
  5953  01A3  0087               	movwf	7
  5954  01A4  1281               	bcf	1,5
  5955                           
  5956                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5957  01A5  0021               	movlb	1	; select bank1
  5958  01A6  1852               	btfsc	_SwDetect^(0+128),0
  5959  01A7  29AD               	goto	l7819
  5960                           
  5961                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5962  01A8  0020               	movlb	0	; select bank0
  5963  01A9  0833               	movf	setSw_Main@sw,w
  5964  01AA  3194  2410  3180   	fcall	_setDimmerLights_SwOff
  5965  01AD                     l7819:	
  5966                           
  5967                           ;Switch_B1.c: 221: }
  5968                           ;Switch_B1.c: 224: setRF_Learn(0);
  5969  01AD  3000               	movlw	0
  5970  01AE  319D  2588         	fcall	_setRF_Learn
  5971                           
  5972                           ;Switch_B1.c: 226: }
  5973                           ;Switch_B1.c: 227: }
  5974                           ;Switch_B1.c: 228: }
  5975                           ;Switch_B1.c: 229: } else {
  5976  01B0  0008               	return
  5977  01B1                     l2395:	
  5978                           
  5979                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5980  01B1  0021               	movlb	1	; select bank1
  5981  01B2  1C20               	btfss	_myMain^(0+128),0
  5982  01B3  0008               	return
  5983                           
  5984                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5985  01B4  087C               	movf	_Sw,w
  5986  01B5  0086               	movwf	6
  5987  01B6  3001               	movlw	1	; select bank2/3
  5988  01B7  0087               	movwf	7
  5989  01B8  1401               	bsf	1,0
  5990  01B9  0008               	return
  5991  01BA                     __end_of_setSw_Main:	
  5992                           
  5993                           	psect	text14
  5994  1D88                     __ptext14:	
  5995 ;; *************** function _setRF_Learn *****************
  5996 ;; Defined at:
  5997 ;;		line 23 in file "../src/RF_Control_B1.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  command         1    wreg     unsigned char 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  command         1    1[BANK0 ] unsigned char 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;		None               void
  6004 ;; Registers used:
  6005 ;;		wreg, status,2, status,0
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;Total ram usage:        2 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    5
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_setSw_Main
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _setRF_Learn
  6027  1D88                     _setRF_Learn:	
  6028                           
  6029                           ;incstack = 0
  6030                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6031                           ;setRF_Learn@command stored from wreg
  6032  1D88  0020               	movlb	0	; select bank0
  6033  1D89  00A1               	movwf	setRF_Learn@command
  6034                           
  6035                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6036  1D8A  0821               	movf	setRF_Learn@command,w
  6037  1D8B  3A01               	xorlw	1
  6038  1D8C  3000               	movlw	0
  6039  1D8D  1903               	skipnz
  6040  1D8E  3001               	movlw	1
  6041  1D8F  00A0               	movwf	??_setRF_Learn
  6042  1D90  0EA0               	swapf	??_setRF_Learn,f
  6043  1D91  0DA0               	rlf	??_setRF_Learn,f
  6044  1D92  0DA0               	rlf	??_setRF_Learn,f
  6045  1D93  0021               	movlb	1	; select bank1
  6046  1D94  083B               	movf	_RF1^(0+128),w
  6047  1D95  0020               	movlb	0	; select bank0
  6048  1D96  0620               	xorwf	??_setRF_Learn,w
  6049  1D97  39BF               	andlw	-65
  6050  1D98  0620               	xorwf	??_setRF_Learn,w
  6051  1D99  0021               	movlb	1	; select bank1
  6052  1D9A  00BB               	movwf	_RF1^(0+128)
  6053  1D9B  0008               	return
  6054  1D9C                     __end_of_setRF_Learn:	
  6055                           
  6056                           	psect	text15
  6057  1243                     __ptext15:	
  6058 ;; *************** function _setDimmerLights_AdjControl *****************
  6059 ;; Defined at:
  6060 ;;		line 562 in file "../src/Dimmer_B1.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  sw              1    wreg     unsigned char 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  sw              1    8[BANK0 ] unsigned char 
  6065 ;;  idle            1    6[BANK0 ] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;		None               void
  6068 ;; Registers used:
  6069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;Total ram usage:        4 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    7
  6082 ;; This function calls:
  6083 ;;		_DimmerLightsPointSelect
  6084 ;;		_getAll_DimmerLights_AdjGO
  6085 ;;		_setDimmerLights_TriggerAdj
  6086 ;; This function is called by:
  6087 ;;		_setSw_Main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function _setDimmerLights_AdjControl
  6093  1243                     _setDimmerLights_AdjControl:	
  6094                           
  6095                           ;incstack = 0
  6096                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6097                           ;setDimmerLights_AdjControl@sw stored from wreg
  6098  1243  0020               	movlb	0	; select bank0
  6099  1244  00A8               	movwf	setDimmerLights_AdjControl@sw
  6100                           
  6101                           ;Dimmer_B1.c: 563: DimmerLightsPointSelect(sw);
  6102  1245  0828               	movf	setDimmerLights_AdjControl@sw,w
  6103  1246  319C  24EC  3192   	fcall	_DimmerLightsPointSelect
  6104                           
  6105                           ;Dimmer_B1.c: 564: char idle = 0;
  6106  1249  0020               	movlb	0	; select bank0
  6107  124A  01A6               	clrf	setDimmerLights_AdjControl@idle
  6108                           
  6109                           ;Dimmer_B1.c: 566: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6110  124B  01A7               	clrf	_setDimmerLights_AdjControl$2583
  6111  124C  319C  2471  3192   	fcall	_getAll_DimmerLights_AdjGO
  6112  124F  3A01               	xorlw	1
  6113  1250  1D03               	skipz
  6114  1251  2A58               	goto	l6943
  6115  1252  0022               	movlb	2	; select bank2
  6116  1253  1CBE               	btfss	_Dimmer^(0+256),1
  6117  1254  2A58               	goto	l6943
  6118  1255  0020               	movlb	0	; select bank0
  6119  1256  01A7               	clrf	_setDimmerLights_AdjControl$2583
  6120  1257  0AA7               	incf	_setDimmerLights_AdjControl$2583,f
  6121  1258                     l6943:	
  6122  1258  0020               	movlb	0	; select bank0
  6123  1259  0827               	movf	_setDimmerLights_AdjControl$2583,w
  6124  125A  00A5               	movwf	??_setDimmerLights_AdjControl
  6125  125B  0825               	movf	??_setDimmerLights_AdjControl,w
  6126  125C  00A6               	movwf	setDimmerLights_AdjControl@idle
  6127                           
  6128                           ;Dimmer_B1.c: 568: if (idle == 0) {
  6129  125D  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6130  125E  1D03               	skipz
  6131  125F  0008               	return
  6132                           
  6133                           ;Dimmer_B1.c: 569: if (DimmerLights->SwFlag == 1) {
  6134  1260  086F               	movf	_DimmerLights,w
  6135  1261  3E09               	addlw	9
  6136  1262  0086               	movwf	6
  6137  1263  3001               	movlw	1	; select bank2/3
  6138  1264  0087               	movwf	7
  6139  1265  1F01               	btfss	1,6
  6140  1266  0008               	return
  6141                           
  6142                           ;Dimmer_B1.c: 570: DimmerLights->SwAdj = 1;
  6143  1267  086F               	movf	_DimmerLights,w
  6144  1268  3E09               	addlw	9
  6145  1269  0086               	movwf	6
  6146  126A  3001               	movlw	1	; select bank2/3
  6147  126B  0087               	movwf	7
  6148  126C  1781               	bsf	1,7
  6149                           
  6150                           ;Dimmer_B1.c: 571: DimmerLights->Status = 1;
  6151  126D  086F               	movf	_DimmerLights,w
  6152  126E  0086               	movwf	6
  6153  126F  3001               	movlw	1	; select bank2/3
  6154  1270  0087               	movwf	7
  6155  1271  1681               	bsf	1,5
  6156                           
  6157                           ;Dimmer_B1.c: 572: setDimmerLights_TriggerAdj(sw, 1);
  6158  1272  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6159  1273  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6160  1274  0828               	movf	setDimmerLights_AdjControl@sw,w
  6161  1275  319E  26F4         	fcall	_setDimmerLights_TriggerAdj
  6162  1277  0008               	return
  6163  1278                     __end_of_setDimmerLights_AdjControl:	
  6164                           
  6165                           	psect	text16
  6166  1066                     __ptext16:	
  6167 ;; *************** function _getSw_KeyStatus *****************
  6168 ;; Defined at:
  6169 ;;		line 237 in file "../src/Switch_B1.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  sw              1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  sw              1    4[BANK0 ] unsigned char 
  6174 ;;  status          1    3[BANK0 ] unsigned char 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      unsigned char 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;Total ram usage:        5 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    5
  6191 ;; This function calls:
  6192 ;;		Nothing
  6193 ;; This function is called by:
  6194 ;;		_setSw_Main
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           
  6199                           ;psect for function _getSw_KeyStatus
  6200  1066                     _getSw_KeyStatus:	
  6201                           
  6202                           ;incstack = 0
  6203                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6204                           ;getSw_KeyStatus@sw stored from wreg
  6205  1066  0020               	movlb	0	; select bank0
  6206  1067  00A4               	movwf	getSw_KeyStatus@sw
  6207                           
  6208                           ;Switch_B1.c: 238: char status = 0;
  6209  1068  01A3               	clrf	getSw_KeyStatus@status
  6210                           
  6211                           ;Switch_B1.c: 250: if (sw == 1) {
  6212  1069  0824               	movf	getSw_KeyStatus@sw,w
  6213  106A  3A01               	xorlw	1
  6214  106B  1D03               	skipz
  6215  106C  2875               	goto	l7143
  6216                           
  6217                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6218  106D  01A1               	clrf	_getSw_KeyStatus$6349
  6219  106E  0AA1               	incf	_getSw_KeyStatus$6349,f
  6220  106F  1F0C               	btfss	12,6	;volatile
  6221  1070  1A0C               	btfsc	12,4	;volatile
  6222  1071  2873               	goto	l7141
  6223  1072  01A1               	clrf	_getSw_KeyStatus$6349
  6224  1073                     l7141:	
  6225  1073  0821               	movf	_getSw_KeyStatus$6349,w
  6226  1074  2880               	goto	L3
  6227  1075                     l7143:	
  6228                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6229                           
  6230  1075  0824               	movf	getSw_KeyStatus@sw,w
  6231  1076  3A02               	xorlw	2
  6232  1077  1D03               	skipz
  6233  1078  2883               	goto	l7153
  6234                           
  6235                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6236  1079  01A2               	clrf	_getSw_KeyStatus$6350
  6237  107A  0AA2               	incf	_getSw_KeyStatus$6350,f
  6238  107B  1C0C               	btfss	12,0	;volatile
  6239  107C  188D               	btfsc	13,1	;volatile
  6240  107D  287F               	goto	l7151
  6241  107E  01A2               	clrf	_getSw_KeyStatus$6350
  6242  107F                     l7151:	
  6243  107F  0822               	movf	_getSw_KeyStatus$6350,w
  6244  1080                     L3:	
  6245  1080  00A0               	movwf	??_getSw_KeyStatus
  6246  1081  0820               	movf	??_getSw_KeyStatus,w
  6247  1082  00A3               	movwf	getSw_KeyStatus@status
  6248  1083                     l7153:	
  6249                           
  6250                           ;Switch_B1.c: 254: }
  6251                           ;Switch_B1.c: 261: return status;
  6252  1083  0823               	movf	getSw_KeyStatus@status,w
  6253  1084  0008               	return
  6254  1085                     __end_of_getSw_KeyStatus:	
  6255                           
  6256                           	psect	text17
  6257  1D74                     __ptext17:	
  6258 ;; *************** function _SwPointSelect *****************
  6259 ;; Defined at:
  6260 ;;		line 25 in file "../src/Switch_B1.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;  sw              1    wreg     unsigned char 
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;  sw              1    1[BANK0 ] unsigned char 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;		None               void
  6267 ;; Registers used:
  6268 ;;		wreg
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;Total ram usage:        2 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    5
  6281 ;; This function calls:
  6282 ;;		Nothing
  6283 ;; This function is called by:
  6284 ;;		_setSw_Main
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           
  6289                           ;psect for function _SwPointSelect
  6290  1D74                     _SwPointSelect:	
  6291                           
  6292                           ;incstack = 0
  6293                           ; Regs used in _SwPointSelect: [wreg]
  6294                           ;SwPointSelect@sw stored from wreg
  6295  1D74  0020               	movlb	0	; select bank0
  6296  1D75  00A1               	movwf	SwPointSelect@sw
  6297                           
  6298                           ;Switch_B1.c: 28: if (sw == 1) {
  6299  1D76  0821               	movf	SwPointSelect@sw,w
  6300  1D77  3A01               	xorlw	1
  6301  1D78  1D03               	skipz
  6302  1D79  2D7F               	goto	l7127
  6303                           
  6304                           ;Switch_B1.c: 29: Sw = &Sw1;
  6305  1D7A  30BE               	movlw	_Sw1& (0+255)
  6306  1D7B  00A0               	movwf	??_SwPointSelect
  6307  1D7C  0820               	movf	??_SwPointSelect,w
  6308  1D7D  00FC               	movwf	_Sw
  6309                           
  6310                           ;Switch_B1.c: 30: }
  6311  1D7E  0008               	return
  6312  1D7F                     l7127:	
  6313                           
  6314                           ;Switch_B1.c: 33: else if (sw == 2) {
  6315  1D7F  0821               	movf	SwPointSelect@sw,w
  6316  1D80  3A02               	xorlw	2
  6317  1D81  1D03               	skipz
  6318  1D82  0008               	return
  6319                           
  6320                           ;Switch_B1.c: 34: Sw = &Sw2;
  6321  1D83  30C7               	movlw	_Sw2& (0+255)
  6322  1D84  00A0               	movwf	??_SwPointSelect
  6323  1D85  0820               	movf	??_SwPointSelect,w
  6324  1D86  00FC               	movwf	_Sw
  6325  1D87  0008               	return
  6326  1D88                     __end_of_SwPointSelect:	
  6327                           
  6328                           	psect	text18
  6329  17A4                     __ptext18:	
  6330 ;; *************** function _setMain_Exception *****************
  6331 ;; Defined at:
  6332 ;;		line 289 in file "../src/main_B1.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  command         1    wreg     unsigned char 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  command         1   28[BANK0 ] unsigned char 
  6337 ;;  status          1   27[BANK0 ] unsigned char 
  6338 ;;  buz             1   24[BANK0 ] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;		None               void
  6341 ;; Registers used:
  6342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;Total ram usage:        7 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:   10
  6355 ;; This function calls:
  6356 ;;		_getDimmerLights_Line
  6357 ;;		_getMain_LightsStatus
  6358 ;;		_setBuz
  6359 ;;		_setDimmerLights_ErrorClose
  6360 ;;		_setLED
  6361 ;; This function is called by:
  6362 ;;		_Switch_Main
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _setMain_Exception
  6368  17A4                     _setMain_Exception:	
  6369                           
  6370                           ;incstack = 0
  6371                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6372                           ;setMain_Exception@command stored from wreg
  6373  17A4  0020               	movlb	0	; select bank0
  6374  17A5  00BC               	movwf	setMain_Exception@command
  6375                           
  6376                           ;main_B1.c: 290: char status = 0, buz = 0;
  6377  17A6  01BB               	clrf	setMain_Exception@status
  6378  17A7  01B8               	clrf	setMain_Exception@buz
  6379                           
  6380                           ;main_B1.c: 307: status = command == 3 ? getDimmerLights_Line() : 255;
  6381  17A8  083C               	movf	setMain_Exception@command,w
  6382  17A9  3A03               	xorlw	3
  6383  17AA  1903               	skipnz
  6384  17AB  2FB0               	goto	l7705
  6385  17AC  30FF               	movlw	255
  6386  17AD  00B9               	movwf	_setMain_Exception$7086
  6387  17AE  3000               	movlw	0
  6388  17AF  2FB9               	goto	L4
  6389  17B0                     l7705:	
  6390  17B0  319D  2525  3197   	fcall	_getDimmerLights_Line
  6391  17B3  0020               	movlb	0	; select bank0
  6392  17B4  00B6               	movwf	??_setMain_Exception
  6393  17B5  01B7               	clrf	??_setMain_Exception+1
  6394  17B6  0836               	movf	??_setMain_Exception,w
  6395  17B7  00B9               	movwf	_setMain_Exception$7086
  6396  17B8  0837               	movf	??_setMain_Exception+1,w
  6397  17B9                     L4:	
  6398  17B9  00BA               	movwf	_setMain_Exception$7086+1
  6399  17BA  0839               	movf	_setMain_Exception$7086,w
  6400  17BB  00B6               	movwf	??_setMain_Exception
  6401  17BC  0836               	movf	??_setMain_Exception,w
  6402  17BD  00BB               	movwf	setMain_Exception@status
  6403                           
  6404                           ;main_B1.c: 309: if (command == 0) {
  6405  17BE  08BC               	movf	setMain_Exception@command,f
  6406  17BF  1D03               	skipz
  6407  17C0  2FC3               	goto	l7713
  6408                           
  6409                           ;main_B1.c: 310: setLED(99, 10);
  6410  17C1  300A               	movlw	10
  6411  17C2  2FC5               	goto	L5
  6412  17C3                     l7713:	
  6413                           ;main_B1.c: 311: } else {
  6414                           
  6415                           
  6416                           ;main_B1.c: 312: setLED(99, 11);
  6417  17C3  300B               	movlw	11
  6418  17C4  0020               	movlb	0	; select bank0
  6419  17C5                     L5:	
  6420  17C5  00B6               	movwf	??_setMain_Exception
  6421  17C6  0836               	movf	??_setMain_Exception,w
  6422  17C7  00A2               	movwf	setLED@command
  6423  17C8  3063               	movlw	99
  6424  17C9  3195  2540  3197   	fcall	_setLED
  6425                           
  6426                           ;main_B1.c: 313: }
  6427                           ;main_B1.c: 315: if (command != 0) {
  6428  17CC  0020               	movlb	0	; select bank0
  6429  17CD  083C               	movf	setMain_Exception@command,w
  6430  17CE  1903               	btfsc	3,2
  6431  17CF  0008               	return
  6432                           
  6433                           ;main_B1.c: 316: switch (command) {
  6434  17D0  2FF1               	goto	l7729
  6435  17D1                     l7719:	
  6436                           ;main_B1.c: 317: case 2:
  6437                           
  6438                           
  6439                           ;main_B1.c: 318: if (getMain_LightsStatus() == 1) {
  6440  17D1  3191  214E  3197   	fcall	_getMain_LightsStatus
  6441  17D4  3A01               	xorlw	1
  6442  17D5  1D03               	skipz
  6443  17D6  2FFA               	goto	l7731
  6444                           
  6445                           ;main_B1.c: 319: setBuz(10, 300);
  6446  17D7  302C               	movlw	44
  6447  17D8  0020               	movlb	0	; select bank0
  6448  17D9  00A9               	movwf	setBuz@time
  6449  17DA  3001               	movlw	1
  6450  17DB  00AA               	movwf	setBuz@time+1
  6451  17DC  300A               	movlw	10
  6452  17DD  3196  263C  3197   	fcall	_setBuz
  6453                           
  6454                           ;main_B1.c: 320: }
  6455                           ;main_B1.c: 321: break;
  6456  17E0  2FFA               	goto	l7731
  6457  17E1                     l7723:	
  6458                           ;main_B1.c: 322: case 3:
  6459                           
  6460                           
  6461                           ;main_B1.c: 323: if (getMain_LightsStatus() == 1) {
  6462  17E1  3191  214E  3197   	fcall	_getMain_LightsStatus
  6463  17E4  3A01               	xorlw	1
  6464  17E5  1D03               	skipz
  6465  17E6  2FFA               	goto	l7731
  6466                           
  6467                           ;main_B1.c: 324: setBuz(5, 300);
  6468  17E7  302C               	movlw	44
  6469  17E8  0020               	movlb	0	; select bank0
  6470  17E9  00A9               	movwf	setBuz@time
  6471  17EA  3001               	movlw	1
  6472  17EB  00AA               	movwf	setBuz@time+1
  6473  17EC  3005               	movlw	5
  6474  17ED  3196  263C  3197   	fcall	_setBuz
  6475                           
  6476                           ;main_B1.c: 327: }
  6477                           
  6478                           ;main_B1.c: 325: }
  6479                           ;main_B1.c: 326: break;
  6480  17F0  2FFA               	goto	l7731
  6481  17F1                     l7729:	
  6482  17F1  0020               	movlb	0	; select bank0
  6483  17F2  083C               	movf	setMain_Exception@command,w
  6484                           
  6485                           ; Switch size 1, requested type "space"
  6486                           ; Number of cases is 2, Range of values is 2 to 3
  6487                           ; switch strategies available:
  6488                           ; Name         Instructions Cycles
  6489                           ; simple_byte            7     4 (average)
  6490                           ; direct_byte           13     9 (fixed)
  6491                           ; jumptable            263     9 (fixed)
  6492                           ;	Chosen strategy is simple_byte
  6493  17F3  3A02               	xorlw	2	; case 2
  6494  17F4  1903               	skipnz
  6495  17F5  2FD1               	goto	l7719
  6496  17F6  3A01               	xorlw	1	; case 3
  6497  17F7  1903               	skipnz
  6498  17F8  2FE1               	goto	l7723
  6499  17F9  2FFA               	goto	l7731
  6500  17FA                     l7731:	
  6501                           
  6502                           ;main_B1.c: 328: setDimmerLights_ErrorClose(status);
  6503  17FA  0020               	movlb	0	; select bank0
  6504  17FB  083B               	movf	setMain_Exception@status,w
  6505  17FC  3196  26EE         	fcall	_setDimmerLights_ErrorClose
  6506  17FE  0020               	movlb	0	; select bank0
  6507  17FF  0008               	return
  6508  1800                     __end_of_setMain_Exception:	
  6509                           
  6510                           	psect	text19
  6511  1D25                     __ptext19:	
  6512 ;; *************** function _getDimmerLights_Line *****************
  6513 ;; Defined at:
  6514 ;;		line 711 in file "../src/Dimmer_B1.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  line            1    1[BANK0 ] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      unsigned char 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;Total ram usage:        2 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    5
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_setMain_Exception
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _getDimmerLights_Line
  6544  1D25                     _getDimmerLights_Line:	
  6545                           
  6546                           ;Dimmer_B1.c: 712: char line = 0;
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6550  1D25  0020               	movlb	0	; select bank0
  6551  1D26  01A1               	clrf	getDimmerLights_Line@line
  6552                           
  6553                           ;Dimmer_B1.c: 714: if (DimmerLights1.Line == 1) {
  6554  1D27  0023               	movlb	3	; select bank3
  6555  1D28  1C29               	btfss	(_DimmerLights1^(0+384)+9),0
  6556  1D29  2D2E               	goto	l864
  6557                           
  6558                           ;Dimmer_B1.c: 715: line = 1;
  6559  1D2A  0020               	movlb	0	; select bank0
  6560  1D2B  01A1               	clrf	getDimmerLights_Line@line
  6561  1D2C  0AA1               	incf	getDimmerLights_Line@line,f
  6562                           
  6563                           ;Dimmer_B1.c: 716: }
  6564  1D2D  2D35               	goto	l865
  6565  1D2E                     l864:	
  6566                           
  6567                           ;Dimmer_B1.c: 719: else if (DimmerLights2.Line == 1) {
  6568  1D2E  1C38               	btfss	(_DimmerLights2^(0+384)+9),0
  6569  1D2F  2D35               	goto	l865
  6570                           
  6571                           ;Dimmer_B1.c: 720: line = 2;
  6572  1D30  3002               	movlw	2
  6573  1D31  0020               	movlb	0	; select bank0
  6574  1D32  00A0               	movwf	??_getDimmerLights_Line
  6575  1D33  0820               	movf	??_getDimmerLights_Line,w
  6576  1D34  00A1               	movwf	getDimmerLights_Line@line
  6577  1D35                     l865:	
  6578                           
  6579                           ;Dimmer_B1.c: 721: }
  6580                           ;Dimmer_B1.c: 728: return line;
  6581  1D35  0020               	movlb	0	; select bank0
  6582  1D36  0821               	movf	getDimmerLights_Line@line,w
  6583  1D37  0008               	return
  6584  1D38                     __end_of_getDimmerLights_Line:	
  6585                           
  6586                           	psect	text20
  6587  1BF8                     __ptext20:	
  6588 ;; *************** function _Switch_Initialization *****************
  6589 ;; Defined at:
  6590 ;;		line 46 in file "../src/Switch_B1.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;		None               void
  6597 ;; Registers used:
  6598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    8
  6611 ;; This function calls:
  6612 ;;		_TouchPower
  6613 ;;		_setSw_Initialization
  6614 ;; This function is called by:
  6615 ;;		_main
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           
  6620                           ;psect for function _Switch_Initialization
  6621  1BF8                     _Switch_Initialization:	
  6622                           
  6623                           ;Switch_B1.c: 47: TouchPower();
  6624                           
  6625                           ;incstack = 0
  6626                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6627  1BF8  319D  25DB  319B   	fcall	_TouchPower
  6628                           
  6629                           ;Switch_B1.c: 49: WPUB1 = 0;
  6630  1BFB  0024               	movlb	4	; select bank4
  6631  1BFC  108D               	bcf	13,1	;volatile
  6632                           
  6633                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6634  1BFD  3001               	movlw	1
  6635  1BFE  319B  2374  319B   	fcall	_setSw_Initialization
  6636                           
  6637                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6638  1C01  3002               	movlw	2
  6639  1C02  319B  2374         	fcall	_setSw_Initialization
  6640  1C04  0008               	return
  6641  1C05                     __end_of_Switch_Initialization:	
  6642                           
  6643                           	psect	text21
  6644  1B74                     __ptext21:	
  6645 ;; *************** function _setSw_Initialization *****************
  6646 ;; Defined at:
  6647 ;;		line 109 in file "../src/Switch_B1.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  sw              1    wreg     unsigned char 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  sw              1    4[BANK0 ] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;Total ram usage:        1 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    7
  6668 ;; This function calls:
  6669 ;;		_setLED
  6670 ;; This function is called by:
  6671 ;;		_Switch_Initialization
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _setSw_Initialization
  6677  1B74                     _setSw_Initialization:	
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6681                           ;setSw_Initialization@sw stored from wreg
  6682  1B74  0020               	movlb	0	; select bank0
  6683  1B75  00A4               	movwf	setSw_Initialization@sw
  6684                           
  6685                           ;Switch_B1.c: 110: setLED(sw, 1);
  6686  1B76  01A2               	clrf	setLED@command
  6687  1B77  0AA2               	incf	setLED@command,f
  6688  1B78  0824               	movf	setSw_Initialization@sw,w
  6689  1B79  3195  2540         	fcall	_setLED
  6690  1B7B  0008               	return
  6691  1B7C                     __end_of_setSw_Initialization:	
  6692                           
  6693                           	psect	text22
  6694  1DDB                     __ptext22:	
  6695 ;; *************** function _TouchPower *****************
  6696 ;; Defined at:
  6697 ;;		line 10 in file "../src/Switch_B1.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;		None               void
  6704 ;; Registers used:
  6705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;Total ram usage:        0 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    6
  6718 ;; This function calls:
  6719 ;;		_Timeout_Counter
  6720 ;;		_set_TimeoutCleared
  6721 ;; This function is called by:
  6722 ;;		_Switch_Initialization
  6723 ;;		_Switch_Main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function _TouchPower
  6729  1DDB                     _TouchPower:	
  6730                           
  6731                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6735  1DDB  0020               	movlb	0	; select bank0
  6736  1DDC  1A8E               	btfsc	14,5	;volatile
  6737  1DDD  0008               	return
  6738                           
  6739                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6740  1DDE  0021               	movlb	1	; select bank1
  6741  1DDF  1C20               	btfss	_myMain^(0+128),0
  6742  1DE0  0008               	return
  6743  1DE1  2DE7               	goto	l7691
  6744  1DE2                     l2369:	
  6745                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6746                           
  6747                           
  6748                           ;Switch_B1.c: 14: RC5 = 1;
  6749  1DE2  0020               	movlb	0	; select bank0
  6750  1DE3  168E               	bsf	14,5	;volatile
  6751                           
  6752                           ;Switch_B1.c: 15: Timeout_Counter();
  6753  1DE4  319D  259C  319D   	fcall	_Timeout_Counter
  6754  1DE7                     l7691:	
  6755  1DE7  0020               	movlb	0	; select bank0
  6756  1DE8  1A8E               	btfsc	14,5	;volatile
  6757  1DE9  2DED               	goto	l7695
  6758  1DEA  0021               	movlb	1	; select bank1
  6759  1DEB  1D2C               	btfss	(_myMain^(0+128)+12),2
  6760  1DEC  2DE2               	goto	l2369
  6761  1DED                     l7695:	
  6762                           
  6763                           ;Switch_B1.c: 16: }
  6764                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6765  1DED  319B  2329         	fcall	_set_TimeoutCleared
  6766  1DEF  0008               	return
  6767  1DF0                     __end_of_TouchPower:	
  6768                           
  6769                           	psect	text23
  6770  1B13                     __ptext23:	
  6771 ;; *************** function _RF_Main *****************
  6772 ;; Defined at:
  6773 ;;		line 16 in file "../src/RF_Control_B1.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;		None               void
  6780 ;; Registers used:
  6781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:   14
  6794 ;; This function calls:
  6795 ;;		_setRF_Main
  6796 ;; This function is called by:
  6797 ;;		_main
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _RF_Main
  6803  1B13                     _RF_Main:	
  6804                           
  6805                           ;RF_Control_B1.c: 18: setRF_Main();
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6809  1B13  3185  2540         	fcall	_setRF_Main
  6810  1B15  0008               	return
  6811  1B16                     __end_of_RF_Main:	
  6812                           
  6813                           	psect	text24
  6814  0540                     __ptext24:	
  6815 ;; *************** function _setRF_Main *****************
  6816 ;; Defined at:
  6817 ;;		line 52 in file "../src/RF_Control_B1.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  error           1    2[BANK1 ] unsigned char 
  6822 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6823 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;		None               void
  6826 ;; Registers used:
  6827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;Total ram usage:        4 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:   13
  6840 ;; This function calls:
  6841 ;;		_CC2500_RxData
  6842 ;;		_CC2500_TxData
  6843 ;;		_CC2500_WriteCommand
  6844 ;;		_RF_RxDisable
  6845 ;;		_getBuz_GO
  6846 ;;		_getMain_All_Error_Status
  6847 ;;		_getRF_KeyStatus
  6848 ;;		_getRxData
  6849 ;; This function is called by:
  6850 ;;		_RF_Main
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _setRF_Main
  6856  0540                     _setRF_Main:	
  6857                           
  6858                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6859                           
  6860                           ;incstack = 0
  6861                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6862  0540  0021               	movlb	1	; select bank1
  6863  0541  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6864  0542  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6865  0543  01EB               	clrf	setRF_Main@error^(0+128)
  6866                           
  6867                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6868  0544  1C3B               	btfss	_RF1^(0+128),0
  6869  0545  2E1B               	goto	l1968
  6870                           
  6871                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6872  0546  319C  2482  3185   	fcall	_getBuz_GO
  6873  0549  0020               	movlb	0	; select bank0
  6874  054A  0821               	movf	?_getBuz_GO+1,w
  6875  054B  0420               	iorwf	?_getBuz_GO,w
  6876  054C  1D03               	skipz
  6877  054D  0008               	return
  6878                           
  6879                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6880  054E  3000               	movlw	0
  6881  054F  3191  21DC  3185   	fcall	_getMain_All_Error_Status
  6882  0552  3800               	iorlw	0
  6883  0553  1D03               	skipz
  6884  0554  2D69               	goto	l1970
  6885                           
  6886                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6887  0555  319C  2493  3185   	fcall	_getRF_KeyStatus
  6888  0558  3A01               	xorlw	1
  6889  0559  3000               	movlw	0
  6890  055A  1903               	skipnz
  6891  055B  3001               	movlw	1
  6892  055C  0020               	movlb	0	; select bank0
  6893  055D  00ED               	movwf	??_setRF_Main
  6894  055E  0CED               	rrf	??_setRF_Main,f
  6895  055F  0CED               	rrf	??_setRF_Main,f
  6896  0560  0021               	movlb	1	; select bank1
  6897  0561  083B               	movf	_RF1^(0+128),w
  6898  0562  0020               	movlb	0	; select bank0
  6899  0563  066D               	xorwf	??_setRF_Main,w
  6900  0564  397F               	andlw	-129
  6901  0565  066D               	xorwf	??_setRF_Main,w
  6902  0566  0021               	movlb	1	; select bank1
  6903  0567  00BB               	movwf	_RF1^(0+128)
  6904                           
  6905                           ;RF_Control_B1.c: 65: } else {
  6906  0568  2D6B               	goto	l1971
  6907  0569                     l1970:	
  6908                           
  6909                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6910  0569  0021               	movlb	1	; select bank1
  6911  056A  13BB               	bcf	_RF1^(0+128),7
  6912  056B                     l1971:	
  6913                           
  6914                           ;RF_Control_B1.c: 70: }
  6915                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6916  056B  1BBB               	btfsc	_RF1^(0+128),7
  6917  056C  1B3B               	btfsc	_RF1^(0+128),6
  6918  056D  2D73               	goto	l1972
  6919                           
  6920                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6921  056E  01BD               	clrf	(_RF1^(0+128)+2)
  6922  056F  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6923                           
  6924                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6925  0570  14BC               	bsf	(_RF1^(0+128)+1),1
  6926                           
  6927                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6928  0571  11BB               	bcf	_RF1^(0+128),3
  6929                           
  6930                           ;RF_Control_B1.c: 76: } else {
  6931  0572  0008               	return
  6932  0573                     l1972:	
  6933                           
  6934                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6935  0573  18BC               	btfsc	(_RF1^(0+128)+1),1
  6936  0574  1B3B               	btfsc	_RF1^(0+128),6
  6937  0575  2D8A               	goto	l7607
  6938                           
  6939                           ;RF_Control_B1.c: 78: RF1.Count++;
  6940  0576  3001               	movlw	1
  6941  0577  07BD               	addwf	(_RF1^(0+128)+2),f
  6942  0578  3000               	movlw	0
  6943  0579  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6944                           
  6945                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6946  057A  3002               	movlw	2
  6947  057B  3EBB               	addlw	_RF1& (0+255)
  6948  057C  0086               	movwf	6
  6949  057D  0187               	clrf	7
  6950  057E  3F40               	moviw [0]fsr1
  6951  057F  0642               	xorwf	(_RF1^(0+128)+7),w
  6952  0580  1D03               	skipz
  6953  0581  2D84               	goto	u7175
  6954  0582  3F41               	moviw [1]fsr1
  6955  0583  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6956  0584                     u7175:	
  6957  0584  1D03               	skipz
  6958  0585  2DE8               	goto	l7659
  6959                           
  6960                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6961  0586  01BD               	clrf	(_RF1^(0+128)+2)
  6962  0587  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6963                           
  6964                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6965  0588  10BC               	bcf	(_RF1^(0+128)+1),1
  6966                           
  6967                           ;RF_Control_B1.c: 82: }
  6968                           ;RF_Control_B1.c: 83: } else {
  6969  0589  2DE8               	goto	l7659
  6970  058A                     l7607:	
  6971                           
  6972                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6973  058A  01BD               	clrf	(_RF1^(0+128)+2)
  6974  058B  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6975                           
  6976                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6977  058C  10BC               	bcf	(_RF1^(0+128)+1),1
  6978                           
  6979                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6980  058D  193B               	btfsc	_RF1^(0+128),2
  6981  058E  1B3B               	btfsc	_RF1^(0+128),6
  6982  058F  2D9E               	goto	l1977
  6983                           
  6984                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6985  0590  113B               	bcf	_RF1^(0+128),2
  6986                           
  6987                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6988  0591  11BB               	bcf	_RF1^(0+128),3
  6989                           
  6990                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6991  0592  10BB               	bcf	_RF1^(0+128),1
  6992                           
  6993                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6994  0593  300A               	movlw	10
  6995  0594  00C2               	movwf	(_RF1^(0+128)+7)
  6996  0595  3000               	movlw	0
  6997  0596  00C3               	movwf	(_RF1^(0+128)+8)
  6998                           
  6999                           ;RF_Control_B1.c: 97: RF_RxDisable();
  7000  0597  319C  2422  3185   	fcall	_RF_RxDisable
  7001                           
  7002                           ;RF_Control_B1.c: 104: CC2500_TxData();
  7003  059A  3189  217A  3185   	fcall	_CC2500_TxData
  7004                           
  7005                           ;RF_Control_B1.c: 106: } else {
  7006  059D  2DE8               	goto	l7659
  7007  059E                     l1977:	
  7008                           
  7009                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  7010  059E  1DBB               	btfss	_RF1^(0+128),3
  7011  059F  2DD7               	goto	l1979
  7012                           
  7013                           ;RF_Control_B1.c: 110: CC2500_RxData();
  7014  05A0  318B  2373  3185   	fcall	_CC2500_RxData
  7015                           
  7016                           ;RF_Control_B1.c: 111: if (RF1.ReceiveGO == 1) {
  7017  05A3  0021               	movlb	1	; select bank1
  7018  05A4  1CBB               	btfss	_RF1^(0+128),1
  7019  05A5  2DE8               	goto	l7659
  7020                           
  7021                           ;RF_Control_B1.c: 112: RF1.ReceiveGO = 0;
  7022  05A6  10BB               	bcf	_RF1^(0+128),1
  7023                           
  7024                           ;RF_Control_B1.c: 113: RF1.Correction = 0;
  7025  05A7  12BC               	bcf	(_RF1^(0+128)+1),5
  7026                           
  7027                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  7028  05A8  01C5               	clrf	(_RF1^(0+128)+10)
  7029  05A9  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7030                           
  7031                           ;RF_Control_B1.c: 125: getRxData();
  7032  05AA  318D  256E  3185   	fcall	_getRxData
  7033                           
  7034                           ;RF_Control_B1.c: 126: RF1.Run = 1;
  7035  05AD  0021               	movlb	1	; select bank1
  7036  05AE  14BC               	bsf	(_RF1^(0+128)+1),1
  7037                           
  7038                           ;RF_Control_B1.c: 128: if (RF1.Checked == 1) {
  7039  05AF  1DBC               	btfss	(_RF1^(0+128)+1),3
  7040  05B0  2DBE               	goto	l7643
  7041                           
  7042                           ;RF_Control_B1.c: 129: if (RF1.RunTime > 10) {
  7043  05B1  3000               	movlw	0
  7044  05B2  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7045  05B3  300B               	movlw	11
  7046  05B4  1903               	skipnz
  7047  05B5  0242               	subwf	(_RF1^(0+128)+7),w
  7048  05B6  1C03               	skipc
  7049  05B7  2DBC               	goto	l7641
  7050                           
  7051                           ;RF_Control_B1.c: 130: RF1.RunTime = 10;
  7052  05B8  300A               	movlw	10
  7053  05B9  00C2               	movwf	(_RF1^(0+128)+7)
  7054  05BA  3000               	movlw	0
  7055  05BB  00C3               	movwf	(_RF1^(0+128)+8)
  7056  05BC                     l7641:	
  7057                           
  7058                           ;RF_Control_B1.c: 131: }
  7059                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  7060  05BC  01BF               	clrf	(_RF1^(0+128)+4)
  7061                           
  7062                           ;RF_Control_B1.c: 133: } else {
  7063  05BD  2DE8               	goto	l7659
  7064  05BE                     l7643:	
  7065                           
  7066                           ;RF_Control_B1.c: 134: RF1.CheckCount++;
  7067  05BE  3001               	movlw	1
  7068  05BF  0020               	movlb	0	; select bank0
  7069  05C0  00ED               	movwf	??_setRF_Main
  7070  05C1  086D               	movf	??_setRF_Main,w
  7071  05C2  0021               	movlb	1	; select bank1
  7072  05C3  07BF               	addwf	(_RF1^(0+128)+4),f
  7073                           
  7074                           ;RF_Control_B1.c: 135: if (RF1.CheckCount == 2) {
  7075  05C4  083F               	movf	(_RF1^(0+128)+4),w
  7076  05C5  3A02               	xorlw	2
  7077  05C6  1D03               	skipz
  7078  05C7  2DE8               	goto	l7659
  7079                           
  7080                           ;RF_Control_B1.c: 136: RF1.CheckCount = 0;
  7081  05C8  01BF               	clrf	(_RF1^(0+128)+4)
  7082                           
  7083                           ;RF_Control_B1.c: 137: RF1.CheckedCounter = 0;
  7084  05C9  01C0               	clrf	(_RF1^(0+128)+5)
  7085  05CA  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7086                           
  7087                           ;RF_Control_B1.c: 138: if (RF1.RunTime < 200) {
  7088  05CB  3000               	movlw	0
  7089  05CC  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7090  05CD  30C8               	movlw	200
  7091  05CE  1903               	skipnz
  7092  05CF  0242               	subwf	(_RF1^(0+128)+7),w
  7093  05D0  1803               	skipnc
  7094  05D1  2DE8               	goto	l7659
  7095                           
  7096                           ;RF_Control_B1.c: 139: RF1.RunTime += 10;
  7097  05D2  300A               	movlw	10
  7098  05D3  07C2               	addwf	(_RF1^(0+128)+7),f
  7099  05D4  3000               	movlw	0
  7100  05D5  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7101                           
  7102                           ;RF_Control_B1.c: 140: }
  7103                           ;RF_Control_B1.c: 141: }
  7104                           ;RF_Control_B1.c: 142: }
  7105                           ;RF_Control_B1.c: 143: }
  7106                           ;RF_Control_B1.c: 144: } else {
  7107  05D6  2DE8               	goto	l7659
  7108  05D7                     l1979:	
  7109                           
  7110                           ;RF_Control_B1.c: 146: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7111  05D7  1DBB               	btfss	_RF1^(0+128),3
  7112  05D8  18BB               	btfsc	_RF1^(0+128),1
  7113  05D9  2DE8               	goto	l7659
  7114                           
  7115                           ;RF_Control_B1.c: 147: RF1.RxStatus = 1;
  7116  05DA  15BB               	bsf	_RF1^(0+128),3
  7117                           
  7118                           ;RF_Control_B1.c: 148: RF1.Correction = 1;
  7119  05DB  16BC               	bsf	(_RF1^(0+128)+1),5
  7120                           
  7121                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x36);
  7122  05DC  3036               	movlw	54
  7123  05DD  319E  2634  3185   	fcall	_CC2500_WriteCommand
  7124                           
  7125                           ;RF_Control_B1.c: 152: CC2500_WriteCommand(0x3A);
  7126  05E0  303A               	movlw	58
  7127  05E1  319E  2634  3185   	fcall	_CC2500_WriteCommand
  7128                           
  7129                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x34);
  7130  05E4  3034               	movlw	52
  7131  05E5  319E  2634  3185   	fcall	_CC2500_WriteCommand
  7132  05E8                     l7659:	
  7133                           
  7134                           ;RF_Control_B1.c: 154: }
  7135                           ;RF_Control_B1.c: 156: }
  7136                           ;RF_Control_B1.c: 157: }
  7137                           ;RF_Control_B1.c: 158: }
  7138                           ;RF_Control_B1.c: 159: if (RF1.RxStatus == 1) {
  7139  05E8  0021               	movlb	1	; select bank1
  7140  05E9  1DBB               	btfss	_RF1^(0+128),3
  7141  05EA  2E09               	goto	l7671
  7142                           
  7143                           ;RF_Control_B1.c: 160: RF1.CheckedCounter++;
  7144  05EB  3001               	movlw	1
  7145  05EC  07C0               	addwf	(_RF1^(0+128)+5),f
  7146  05ED  3000               	movlw	0
  7147  05EE  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7148                           
  7149                           ;RF_Control_B1.c: 161: if (RF1.CheckedCounter == 100) {
  7150  05EF  3005               	movlw	5
  7151  05F0  3EBB               	addlw	_RF1& (0+255)
  7152  05F1  0086               	movwf	6
  7153  05F2  0187               	clrf	7
  7154  05F3  3F40               	moviw [0]fsr1
  7155  05F4  3A64               	xorlw	100
  7156  05F5  1D03               	skipz
  7157  05F6  2DF9               	goto	u7295
  7158  05F7  3F41               	moviw [1]fsr1
  7159  05F8  3A00               	xorlw	0
  7160  05F9                     u7295:	
  7161  05F9  1D03               	skipz
  7162  05FA  2E09               	goto	l7671
  7163                           
  7164                           ;RF_Control_B1.c: 162: RF1.CheckedCounter = 0;
  7165  05FB  01C0               	clrf	(_RF1^(0+128)+5)
  7166  05FC  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7167                           
  7168                           ;RF_Control_B1.c: 163: RF1.CheckCount = 0;
  7169  05FD  01BF               	clrf	(_RF1^(0+128)+4)
  7170                           
  7171                           ;RF_Control_B1.c: 164: if (RF1.RunTime > 10) {
  7172  05FE  3000               	movlw	0
  7173  05FF  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7174  0600  300B               	movlw	11
  7175  0601  1903               	skipnz
  7176  0602  0242               	subwf	(_RF1^(0+128)+7),w
  7177  0603  1C03               	skipc
  7178  0604  2E09               	goto	l7671
  7179                           
  7180                           ;RF_Control_B1.c: 165: RF1.RunTime -= 10;
  7181  0605  300A               	movlw	10
  7182  0606  02C2               	subwf	(_RF1^(0+128)+7),f
  7183  0607  3000               	movlw	0
  7184  0608  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7185  0609                     l7671:	
  7186                           
  7187                           ;RF_Control_B1.c: 166: }
  7188                           ;RF_Control_B1.c: 167: }
  7189                           ;RF_Control_B1.c: 168: }
  7190                           ;RF_Control_B1.c: 169: if (RF1.Correction == 1) {
  7191  0609  1EBC               	btfss	(_RF1^(0+128)+1),5
  7192  060A  0008               	return
  7193                           
  7194                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter++;
  7195  060B  3001               	movlw	1
  7196  060C  07C5               	addwf	(_RF1^(0+128)+10),f
  7197  060D  3000               	movlw	0
  7198  060E  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7199                           
  7200                           ;RF_Control_B1.c: 171: if (RF1.CorrectionCounter >= 30000) {
  7201  060F  3075               	movlw	117
  7202  0610  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7203  0611  3030               	movlw	48
  7204  0612  1903               	skipnz
  7205  0613  0245               	subwf	(_RF1^(0+128)+10),w
  7206  0614  1C03               	skipc
  7207  0615  0008               	return
  7208                           
  7209                           ;RF_Control_B1.c: 172: RF1.CorrectionCounter = 0;
  7210  0616  01C5               	clrf	(_RF1^(0+128)+10)
  7211  0617  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7212                           
  7213                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  7214  0618  11BB               	bcf	_RF1^(0+128),3
  7215                           
  7216                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  7217  0619  10BB               	bcf	_RF1^(0+128),1
  7218                           
  7219                           ;RF_Control_B1.c: 175: }
  7220                           ;RF_Control_B1.c: 176: }
  7221                           ;RF_Control_B1.c: 177: }
  7222                           ;RF_Control_B1.c: 178: }
  7223                           ;RF_Control_B1.c: 185: } else {
  7224  061A  0008               	return
  7225  061B                     l1968:	
  7226                           
  7227                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7228  061B  1C20               	btfss	_myMain^(0+128),0
  7229  061C  0008               	return
  7230                           
  7231                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7232  061D  143B               	bsf	_RF1^(0+128),0
  7233  061E  0008               	return
  7234  061F                     __end_of_setRF_Main:	
  7235                           
  7236                           	psect	text25
  7237  0D6E                     __ptext25:	
  7238 ;; *************** function _getRxData *****************
  7239 ;; Defined at:
  7240 ;;		line 277 in file "../src/RF_Control_B1.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;		None
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  error           1   76[BANK0 ] unsigned char 
  7245 ;; Return value:  Size  Location     Type
  7246 ;;		None               void
  7247 ;; Registers used:
  7248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;Total ram usage:        2 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:   12
  7261 ;; This function calls:
  7262 ;;		_getMain_All_Error_Status
  7263 ;;		_setControl_Lights_Table
  7264 ;;		_setLog_Code
  7265 ;;		_setTxData
  7266 ;; This function is called by:
  7267 ;;		_setRF_Main
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _getRxData
  7273  0D6E                     _getRxData:	
  7274                           
  7275                           ;RF_Control_B1.c: 278: char error = getMain_All_Error_Status(0);
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7279  0D6E  3000               	movlw	0
  7280  0D6F  3191  21DC  318D   	fcall	_getMain_All_Error_Status
  7281  0D72  0020               	movlb	0	; select bank0
  7282  0D73  00EB               	movwf	??_getRxData
  7283  0D74  086B               	movf	??_getRxData,w
  7284  0D75  00EC               	movwf	getRxData@error
  7285                           
  7286                           ;RF_Control_B1.c: 279: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7287  0D76  0022               	movlb	2	; select bank2
  7288  0D77  0820               	movf	_RF_Data^(0+256),w
  7289  0D78  3AAA               	xorlw	170
  7290  0D79  1D03               	skipz
  7291  0D7A  2D91               	goto	l7077
  7292  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7293  0D7C  3A01               	xorlw	1
  7294  0D7D  1D03               	skipz
  7295  0D7E  2D91               	goto	l7077
  7296                           
  7297                           ;RF_Control_B1.c: 281: product->Data[2] = 0x55;
  7298  0D7F  3055               	movlw	85
  7299  0D80  0020               	movlb	0	; select bank0
  7300  0D81  00EB               	movwf	??_getRxData
  7301  0D82  086E               	movf	_product,w
  7302  0D83  3E02               	addlw	2
  7303  0D84  0086               	movwf	6
  7304  0D85  3002               	movlw	2	; select bank4/5
  7305  0D86  0087               	movwf	7
  7306  0D87  086B               	movf	??_getRxData,w
  7307  0D88  0081               	movwf	1
  7308                           
  7309                           ;RF_Control_B1.c: 282: setTxData();
  7310  0D89  3186  26FB         	fcall	_setTxData
  7311                           
  7312                           ;RF_Control_B1.c: 283: RF1.RunTime = 10;
  7313  0D8B  300A               	movlw	10
  7314  0D8C  0021               	movlb	1	; select bank1
  7315  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7316  0D8E  3000               	movlw	0
  7317  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7318                           
  7319                           ;RF_Control_B1.c: 289: } else {
  7320  0D90  0008               	return
  7321  0D91                     l7077:	
  7322                           
  7323                           ;RF_Control_B1.c: 291: if (error == 0) {
  7324  0D91  0020               	movlb	0	; select bank0
  7325  0D92  08EC               	movf	getRxData@error,f
  7326  0D93  1D03               	skipz
  7327  0D94  0008               	return
  7328                           
  7329                           ;RF_Control_B1.c: 292: if (RF1.Learn == 1) {
  7330  0D95  0021               	movlb	1	; select bank1
  7331  0D96  1F3B               	btfss	_RF1^(0+128),6
  7332  0D97  2DA8               	goto	l7089
  7333                           
  7334                           ;RF_Control_B1.c: 293: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7335  0D98  0022               	movlb	2	; select bank2
  7336  0D99  08A0               	movf	_RF_Data^(0+256),f
  7337  0D9A  1D03               	skipz
  7338  0D9B  2DA5               	goto	l2021
  7339  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7340  0D9D  3A64               	xorlw	100
  7341  0D9E  1D03               	skipz
  7342  0D9F  2DA5               	goto	l2021
  7343                           
  7344                           ;RF_Control_B1.c: 294: setLog_Code();
  7345  0DA0  3192  22AE         	fcall	_setLog_Code
  7346                           
  7347                           ;RF_Control_B1.c: 295: RF1.Checked = 1;
  7348  0DA2  0021               	movlb	1	; select bank1
  7349  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7350                           
  7351                           ;RF_Control_B1.c: 296: } else {
  7352  0DA4  0008               	return
  7353  0DA5                     l2021:	
  7354                           
  7355                           ;RF_Control_B1.c: 297: RF1.Checked = 0;
  7356  0DA5  0021               	movlb	1	; select bank1
  7357  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7358                           
  7359                           ;RF_Control_B1.c: 298: }
  7360                           ;RF_Control_B1.c: 299: } else {
  7361  0DA7  0008               	return
  7362  0DA8                     l7089:	
  7363                           
  7364                           ;RF_Control_B1.c: 300: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7365  0DA8  0022               	movlb	2	; select bank2
  7366  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7367  0DAA  1D03               	skipz
  7368  0DAB  2DE6               	goto	l7111
  7369  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7370  0DAD  3A02               	xorlw	2
  7371  0DAE  1D03               	skipz
  7372  0DAF  2DE6               	goto	l7111
  7373                           
  7374                           ;RF_Control_B1.c: 302: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7375  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7376  0DB1  3AFF               	xorlw	255
  7377  0DB2  1D03               	skipz
  7378  0DB3  2DC0               	goto	l7101
  7379  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7380  0DB5  3AFF               	xorlw	255
  7381  0DB6  1D03               	skipz
  7382  0DB7  2DC0               	goto	l7101
  7383  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7384  0DB9  3AFF               	xorlw	255
  7385  0DBA  1D03               	skipz
  7386  0DBB  2DC0               	goto	l7101
  7387                           
  7388                           ;RF_Control_B1.c: 303: __nop();
  7389  0DBC  0000               	nop
  7390                           
  7391                           ;RF_Control_B1.c: 304: RF1.Checked = 0;
  7392  0DBD  0021               	movlb	1	; select bank1
  7393  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7394                           
  7395                           ;RF_Control_B1.c: 305: } else {
  7396  0DBF  0008               	return
  7397  0DC0                     l7101:	
  7398                           
  7399                           ;RF_Control_B1.c: 306: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7400  0DC0  0020               	movlb	0	; select bank0
  7401  0DC1  086E               	movf	_product,w
  7402  0DC2  3E0C               	addlw	12
  7403  0DC3  0086               	movwf	6
  7404  0DC4  3002               	movlw	2	; select bank4/5
  7405  0DC5  0087               	movwf	7
  7406  0DC6  0022               	movlb	2	; select bank2
  7407  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7408  0DC8  0601               	xorwf	1,w
  7409  0DC9  1D03               	skipz
  7410  0DCA  0008               	return
  7411  0DCB  0020               	movlb	0	; select bank0
  7412  0DCC  086E               	movf	_product,w
  7413  0DCD  3E0D               	addlw	13
  7414  0DCE  0086               	movwf	6
  7415  0DCF  3002               	movlw	2	; select bank4/5
  7416  0DD0  0087               	movwf	7
  7417  0DD1  0022               	movlb	2	; select bank2
  7418  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7419  0DD3  0601               	xorwf	1,w
  7420  0DD4  1D03               	skipz
  7421  0DD5  0008               	return
  7422  0DD6  0020               	movlb	0	; select bank0
  7423  0DD7  086E               	movf	_product,w
  7424  0DD8  3E0E               	addlw	14
  7425  0DD9  0086               	movwf	6
  7426  0DDA  3002               	movlw	2	; select bank4/5
  7427  0DDB  0087               	movwf	7
  7428  0DDC  0022               	movlb	2	; select bank2
  7429  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7430  0DDE  0601               	xorwf	1,w
  7431  0DDF  1D03               	skipz
  7432  0DE0  0008               	return
  7433                           
  7434                           ;RF_Control_B1.c: 307: setControl_Lights_Table();
  7435  0DE1  318B  230B         	fcall	_setControl_Lights_Table
  7436                           
  7437                           ;RF_Control_B1.c: 308: RF1.Checked = 1;
  7438  0DE3  0021               	movlb	1	; select bank1
  7439  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7440                           
  7441                           ;RF_Control_B1.c: 309: }
  7442                           ;RF_Control_B1.c: 310: }
  7443                           ;RF_Control_B1.c: 311: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7444  0DE5  0008               	return
  7445  0DE6                     l7111:	
  7446  0DE6  0022               	movlb	2	; select bank2
  7447  0DE7  0820               	movf	_RF_Data^(0+256),w
  7448  0DE8  3AFF               	xorlw	255
  7449  0DE9  1D03               	skipz
  7450  0DEA  2DF1               	goto	l7117
  7451  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7452  0DEC  3A02               	xorlw	2
  7453  0DED  1D03               	skipz
  7454  0DEE  2DF1               	goto	l7117
  7455                           
  7456                           ;RF_Control_B1.c: 312: __nop();
  7457  0DEF  0000               	nop
  7458                           
  7459                           ;RF_Control_B1.c: 313: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7460  0DF0  0008               	return
  7461  0DF1                     l7117:	
  7462  0DF1  0022               	movlb	2	; select bank2
  7463  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7464  0DF3  1D03               	skipz
  7465  0DF4  2DFB               	goto	l2031
  7466  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7467  0DF6  3A65               	xorlw	101
  7468  0DF7  1D03               	skipz
  7469  0DF8  2DFB               	goto	l2031
  7470                           
  7471                           ;RF_Control_B1.c: 314: __nop();
  7472  0DF9  0000               	nop
  7473                           
  7474                           ;RF_Control_B1.c: 315: } else {
  7475  0DFA  0008               	return
  7476  0DFB                     l2031:	
  7477                           
  7478                           ;RF_Control_B1.c: 316: RF1.Checked = 0;
  7479  0DFB  0021               	movlb	1	; select bank1
  7480  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7481                           
  7482                           ;RF_Control_B1.c: 324: ;
  7483                           
  7484                           ;RF_Control_B1.c: 317: }
  7485                           ;RF_Control_B1.c: 322: }
  7486                           ;RF_Control_B1.c: 323: } else {
  7487  0DFD  0008               	return
  7488  0DFE                     __end_of_getRxData:	
  7489                           
  7490                           	psect	text26
  7491  12AE                     __ptext26:	
  7492 ;; *************** function _setLog_Code *****************
  7493 ;; Defined at:
  7494 ;;		line 330 in file "../src/RF_Control_B1.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;		None
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;		None
  7499 ;; Return value:  Size  Location     Type
  7500 ;;		None               void
  7501 ;; Registers used:
  7502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;Total ram usage:        1 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    7
  7515 ;; This function calls:
  7516 ;;		_setBuz
  7517 ;;		_setMemory_LoopSave
  7518 ;;		_setMemory_Modify
  7519 ;; This function is called by:
  7520 ;;		_getRxData
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function _setLog_Code
  7526  12AE                     _setLog_Code:	
  7527                           
  7528                           ;RF_Control_B1.c: 331: RF1.Learn = 0;
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7532  12AE  0021               	movlb	1	; select bank1
  7533  12AF  133B               	bcf	_RF1^(0+128),6
  7534                           
  7535                           ;RF_Control_B1.c: 332: product->Data[12]=RF_Data[12];
  7536  12B0  0022               	movlb	2	; select bank2
  7537  12B1  082C               	movf	(_RF_Data^(0+256)+12),w
  7538  12B2  0020               	movlb	0	; select bank0
  7539  12B3  00AD               	movwf	??_setLog_Code
  7540  12B4  086E               	movf	_product,w
  7541  12B5  3E0C               	addlw	12
  7542  12B6  0086               	movwf	6
  7543  12B7  3002               	movlw	2	; select bank4/5
  7544  12B8  0087               	movwf	7
  7545  12B9  082D               	movf	??_setLog_Code,w
  7546  12BA  0081               	movwf	1
  7547                           
  7548                           ;RF_Control_B1.c: 333: product->Data[13]=RF_Data[13];
  7549  12BB  0022               	movlb	2	; select bank2
  7550  12BC  082D               	movf	(_RF_Data^(0+256)+13),w
  7551  12BD  0020               	movlb	0	; select bank0
  7552  12BE  00AD               	movwf	??_setLog_Code
  7553  12BF  086E               	movf	_product,w
  7554  12C0  3E0D               	addlw	13
  7555  12C1  0086               	movwf	6
  7556  12C2  3002               	movlw	2	; select bank4/5
  7557  12C3  0087               	movwf	7
  7558  12C4  082D               	movf	??_setLog_Code,w
  7559  12C5  0081               	movwf	1
  7560                           
  7561                           ;RF_Control_B1.c: 334: product->Data[14]=RF_Data[14];
  7562  12C6  0022               	movlb	2	; select bank2
  7563  12C7  082E               	movf	(_RF_Data^(0+256)+14),w
  7564  12C8  0020               	movlb	0	; select bank0
  7565  12C9  00AD               	movwf	??_setLog_Code
  7566  12CA  086E               	movf	_product,w
  7567  12CB  3E0E               	addlw	14
  7568  12CC  0086               	movwf	6
  7569  12CD  3002               	movlw	2	; select bank4/5
  7570  12CE  0087               	movwf	7
  7571  12CF  082D               	movf	??_setLog_Code,w
  7572  12D0  0081               	movwf	1
  7573                           
  7574                           ;RF_Control_B1.c: 335: setBuz(1, 100);
  7575  12D1  3064               	movlw	100
  7576  12D2  00A9               	movwf	setBuz@time
  7577  12D3  3000               	movlw	0
  7578  12D4  00AA               	movwf	setBuz@time+1
  7579  12D5  3001               	movlw	1
  7580  12D6  3196  263C  3192   	fcall	_setBuz
  7581                           
  7582                           ;RF_Control_B1.c: 336: if (myMain.First == 1) {
  7583  12D9  0021               	movlb	1	; select bank1
  7584  12DA  1EA0               	btfss	_myMain^(0+128),5
  7585  12DB  2AE0               	goto	l2037
  7586                           
  7587                           ;RF_Control_B1.c: 337: setMemory_LoopSave(1);
  7588  12DC  3001               	movlw	1
  7589  12DD  319D  2512  3192   	fcall	_setMemory_LoopSave
  7590  12E0                     l2037:	
  7591                           
  7592                           ;RF_Control_B1.c: 338: }
  7593                           ;RF_Control_B1.c: 339: setMemory_Modify(1);
  7594  12E0  3001               	movlw	1
  7595  12E1  319C  24FF         	fcall	_setMemory_Modify
  7596  12E3  0008               	return
  7597  12E4                     __end_of_setLog_Code:	
  7598                           
  7599                           	psect	text27
  7600  1D12                     __ptext27:	
  7601 ;; *************** function _setMemory_LoopSave *****************
  7602 ;; Defined at:
  7603 ;;		line 1017 in file "../src/MCU_B1.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;  command         1    wreg     unsigned char 
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  command         1    1[BANK0 ] unsigned char 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;		None               void
  7610 ;; Registers used:
  7611 ;;		wreg, status,2, status,0
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;Total ram usage:        2 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    5
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_setLog_Code
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           
  7632                           ;psect for function _setMemory_LoopSave
  7633  1D12                     _setMemory_LoopSave:	
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7637                           ;setMemory_LoopSave@command stored from wreg
  7638  1D12  0020               	movlb	0	; select bank0
  7639  1D13  00A1               	movwf	setMemory_LoopSave@command
  7640                           
  7641                           ;MCU_B1.c: 1018: Memory.LoopSave = command == 1 ? 1 : 0;
  7642  1D14  0821               	movf	setMemory_LoopSave@command,w
  7643  1D15  3A01               	xorlw	1
  7644  1D16  3000               	movlw	0
  7645  1D17  1903               	skipnz
  7646  1D18  3001               	movlw	1
  7647  1D19  00A0               	movwf	??_setMemory_LoopSave
  7648  1D1A  0DA0               	rlf	??_setMemory_LoopSave,f
  7649  1D1B  0DA0               	rlf	??_setMemory_LoopSave,f
  7650  1D1C  0024               	movlb	4	; select bank4
  7651  1D1D  0844               	movf	(_Memory^(0+512)+36),w
  7652  1D1E  0020               	movlb	0	; select bank0
  7653  1D1F  0620               	xorwf	??_setMemory_LoopSave,w
  7654  1D20  39FB               	andlw	-5
  7655  1D21  0620               	xorwf	??_setMemory_LoopSave,w
  7656  1D22  0024               	movlb	4	; select bank4
  7657  1D23  00C4               	movwf	(_Memory^(0+512)+36)
  7658  1D24  0008               	return
  7659  1D25                     __end_of_setMemory_LoopSave:	
  7660                           
  7661                           	psect	text28
  7662  0B0B                     __ptext28:	
  7663 ;; *************** function _setControl_Lights_Table *****************
  7664 ;; Defined at:
  7665 ;;		line 343 in file "../src/RF_Control_B1.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;		None
  7670 ;; Return value:  Size  Location     Type
  7671 ;;		None               void
  7672 ;; Registers used:
  7673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:        0 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:   11
  7686 ;; This function calls:
  7687 ;;		_setBuz
  7688 ;;		_setDimmerLights_ErrorClose
  7689 ;;		_setRFSW_AdjControl
  7690 ;;		_setRFSW_Control
  7691 ;;		_setTxData
  7692 ;; This function is called by:
  7693 ;;		_getRxData
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _setControl_Lights_Table
  7699  0B0B                     _setControl_Lights_Table:	
  7700                           
  7701                           ;RF_Control_B1.c: 344: switch (RF_Data[15]) {
  7702                           
  7703                           ;incstack = 0
  7704                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7705  0B0B  2B57               	goto	l6693
  7706  0B0C                     l6667:	
  7707                           ;RF_Control_B1.c: 345: case 0x00:
  7708                           
  7709                           
  7710                           ;RF_Control_B1.c: 347: setDimmerLights_ErrorClose(255);
  7711  0B0C  30FF               	movlw	255
  7712  0B0D  3196  26EE  318B   	fcall	_setDimmerLights_ErrorClose
  7713                           
  7714                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  7715  0B10  0020               	movlb	0	; select bank0
  7716  0B11  086E               	movf	_product,w
  7717  0B12  3E09               	addlw	9
  7718  0B13  0086               	movwf	6
  7719  0B14  3002               	movlw	2	; select bank4/5
  7720  0B15  0087               	movwf	7
  7721  0B16  0181               	clrf	1
  7722                           
  7723                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  7724  0B17  086E               	movf	_product,w
  7725  0B18  3E0B               	addlw	11
  7726  0B19  0086               	movwf	6
  7727  0B1A  3002               	movlw	2	; select bank4/5
  7728  0B1B  0087               	movwf	7
  7729  0B1C  0181               	clrf	1
  7730                           
  7731                           ;RF_Control_B1.c: 351: product->Data[15]=0;
  7732  0B1D  086E               	movf	_product,w
  7733  0B1E  3E0F               	addlw	15
  7734  0B1F  0086               	movwf	6
  7735  0B20  3002               	movlw	2	; select bank4/5
  7736  0B21  0087               	movwf	7
  7737  0B22  0181               	clrf	1
  7738                           
  7739                           ;RF_Control_B1.c: 352: product->Data[17]=0;
  7740  0B23  086E               	movf	_product,w
  7741  0B24  3E11               	addlw	17
  7742  0B25  0086               	movwf	6
  7743  0B26  3002               	movlw	2	; select bank4/5
  7744  0B27  0087               	movwf	7
  7745  0B28  0181               	clrf	1
  7746                           
  7747                           ;RF_Control_B1.c: 353: setBuz(1, 100);
  7748  0B29  3064               	movlw	100
  7749  0B2A  00A9               	movwf	setBuz@time
  7750  0B2B  3000               	movlw	0
  7751  0B2C  00AA               	movwf	setBuz@time+1
  7752  0B2D  3001               	movlw	1
  7753  0B2E  3196  263C         	fcall	_setBuz
  7754                           
  7755                           ;RF_Control_B1.c: 355: break;
  7756  0B30  0008               	return
  7757  0B31                     l6679:	
  7758                           ;RF_Control_B1.c: 356: case 0x20:
  7759                           
  7760                           
  7761                           ;RF_Control_B1.c: 357: product->Data[9]=0;
  7762  0B31  0020               	movlb	0	; select bank0
  7763  0B32  086E               	movf	_product,w
  7764  0B33  3E09               	addlw	9
  7765  0B34  0086               	movwf	6
  7766  0B35  3002               	movlw	2	; select bank4/5
  7767  0B36  0087               	movwf	7
  7768  0B37  0181               	clrf	1
  7769                           
  7770                           ;RF_Control_B1.c: 358: product->Data[11]=0;
  7771  0B38  086E               	movf	_product,w
  7772  0B39  3E0B               	addlw	11
  7773  0B3A  0086               	movwf	6
  7774  0B3B  3002               	movlw	2	; select bank4/5
  7775  0B3C  0087               	movwf	7
  7776  0B3D  0181               	clrf	1
  7777                           
  7778                           ;RF_Control_B1.c: 359: product->Data[17]=0;
  7779  0B3E  086E               	movf	_product,w
  7780  0B3F  3E11               	addlw	17
  7781  0B40  0086               	movwf	6
  7782  0B41  3002               	movlw	2	; select bank4/5
  7783  0B42  0087               	movwf	7
  7784  0B43  0181               	clrf	1
  7785                           
  7786                           ;RF_Control_B1.c: 360: setTxData();
  7787  0B44  3186  26FB         	fcall	_setTxData
  7788                           
  7789                           ;RF_Control_B1.c: 361: break;
  7790  0B46  0008               	return
  7791  0B47                     l6683:	
  7792                           ;RF_Control_B1.c: 362: case 0x01:
  7793                           
  7794                           
  7795                           ;RF_Control_B1.c: 364: setRFSW_Control(1);
  7796  0B47  3001               	movlw	1
  7797  0B48  3194  24F1         	fcall	_setRFSW_Control
  7798                           
  7799                           ;RF_Control_B1.c: 366: break;
  7800  0B4A  0008               	return
  7801  0B4B                     l6685:	
  7802                           ;RF_Control_B1.c: 367: case 0x02:
  7803                           
  7804                           
  7805                           ;RF_Control_B1.c: 369: setRFSW_Control(2);
  7806  0B4B  3002               	movlw	2
  7807  0B4C  3194  24F1         	fcall	_setRFSW_Control
  7808                           
  7809                           ;RF_Control_B1.c: 376: break;
  7810                           
  7811                           ;RF_Control_B1.c: 372: case 0x03:
  7812                           
  7813                           ;RF_Control_B1.c: 371: break;
  7814  0B4E  0008               	return
  7815  0B4F                     l6687:	
  7816                           ;RF_Control_B1.c: 377: case 0x11:
  7817                           
  7818                           
  7819                           ;RF_Control_B1.c: 380: setRFSW_AdjControl(1);
  7820  0B4F  3001               	movlw	1
  7821  0B50  3193  23D0         	fcall	_setRFSW_AdjControl
  7822                           
  7823                           ;RF_Control_B1.c: 383: break;
  7824  0B52  0008               	return
  7825  0B53                     l6689:	
  7826                           ;RF_Control_B1.c: 384: case 0x21:
  7827                           
  7828                           
  7829                           ;RF_Control_B1.c: 387: setRFSW_AdjControl(2);
  7830  0B53  3002               	movlw	2
  7831  0B54  3193  23D0         	fcall	_setRFSW_AdjControl
  7832                           
  7833                           ;RF_Control_B1.c: 398: }
  7834                           
  7835                           ;RF_Control_B1.c: 397: break;
  7836                           
  7837                           ;RF_Control_B1.c: 391: case 0x31:
  7838                           
  7839                           ;RF_Control_B1.c: 390: break;
  7840  0B56  0008               	return
  7841  0B57                     l6693:	
  7842  0B57  0022               	movlb	2	; select bank2
  7843  0B58  082F               	movf	(_RF_Data^(0+256)+15),w
  7844                           
  7845                           ; Switch size 1, requested type "space"
  7846                           ; Number of cases is 8, Range of values is 0 to 49
  7847                           ; switch strategies available:
  7848                           ; Name         Instructions Cycles
  7849                           ; simple_byte           25    13 (average)
  7850                           ; direct_byte          106     6 (fixed)
  7851                           ; jumptable            260     6 (fixed)
  7852                           ;	Chosen strategy is simple_byte
  7853  0B59  3A00               	xorlw	0	; case 0
  7854  0B5A  1903               	skipnz
  7855  0B5B  2B0C               	goto	l6667
  7856  0B5C  3A01               	xorlw	1	; case 1
  7857  0B5D  1903               	skipnz
  7858  0B5E  2B47               	goto	l6683
  7859  0B5F  3A03               	xorlw	3	; case 2
  7860  0B60  1903               	skipnz
  7861  0B61  2B4B               	goto	l6685
  7862  0B62  3A01               	xorlw	1	; case 3
  7863  0B63  1903               	skipnz
  7864  0B64  2B72               	goto	l2051
  7865  0B65  3A12               	xorlw	18	; case 17
  7866  0B66  1903               	skipnz
  7867  0B67  2B4F               	goto	l6687
  7868  0B68  3A31               	xorlw	49	; case 32
  7869  0B69  1903               	skipnz
  7870  0B6A  2B31               	goto	l6679
  7871  0B6B  3A01               	xorlw	1	; case 33
  7872  0B6C  1903               	skipnz
  7873  0B6D  2B53               	goto	l6689
  7874  0B6E  3A10               	xorlw	16	; case 49
  7875  0B6F  1903               	skipnz
  7876  0B70  2B72               	goto	l2051
  7877  0B71  2B72               	goto	l2051
  7878  0B72                     l2051:	
  7879  0B72  0008               	return
  7880  0B73                     __end_of_setControl_Lights_Table:	
  7881                           
  7882                           	psect	text29
  7883  14F1                     __ptext29:	
  7884 ;; *************** function _setRFSW_Control *****************
  7885 ;; Defined at:
  7886 ;;		line 425 in file "../src/RF_Control_B1.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  sw              1    wreg     unsigned char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  sw              1   19[BANK0 ] unsigned char 
  7891 ;;  status          1   18[BANK0 ] unsigned char 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;		None               void
  7894 ;; Registers used:
  7895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;Total ram usage:        3 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    9
  7908 ;; This function calls:
  7909 ;;		_getDelayOff_GO
  7910 ;;		_getDimmerLights_Status
  7911 ;;		_setBuz
  7912 ;;		_setDelayOff_GO
  7913 ;;		_setDimmerLights_SwOff
  7914 ;;		_setDimmerLights_SwOn
  7915 ;;		_setRF_DimmerLights
  7916 ;;		_setTxData
  7917 ;; This function is called by:
  7918 ;;		_setControl_Lights_Table
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function _setRFSW_Control
  7924  14F1                     _setRFSW_Control:	
  7925                           
  7926                           ;incstack = 0
  7927                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7928                           ;setRFSW_Control@sw stored from wreg
  7929  14F1  0020               	movlb	0	; select bank0
  7930  14F2  00B3               	movwf	setRFSW_Control@sw
  7931                           
  7932                           ;RF_Control_B1.c: 426: char status = 0;
  7933  14F3  01B2               	clrf	setRFSW_Control@status
  7934                           
  7935                           ;RF_Control_B1.c: 429: if (RF_Data[16] == 0x80) {
  7936  14F4  0022               	movlb	2	; select bank2
  7937  14F5  0830               	movf	(_RF_Data^(0+256)+16),w
  7938  14F6  3A80               	xorlw	128
  7939  14F7  1D03               	skipz
  7940  14F8  2D24               	goto	l6491
  7941                           
  7942                           ;RF_Control_B1.c: 430: setDelayOff_GO(sw, 1, RF_Data[17]);
  7943  14F9  0020               	movlb	0	; select bank0
  7944  14FA  01AA               	clrf	setDelayOff_GO@command
  7945  14FB  0AAA               	incf	setDelayOff_GO@command,f
  7946  14FC  0022               	movlb	2	; select bank2
  7947  14FD  0831               	movf	(_RF_Data^(0+256)+17),w
  7948  14FE  0020               	movlb	0	; select bank0
  7949  14FF  00B1               	movwf	??_setRFSW_Control
  7950  1500  0831               	movf	??_setRFSW_Control,w
  7951  1501  00AB               	movwf	setDelayOff_GO@value
  7952  1502  0833               	movf	setRFSW_Control@sw,w
  7953  1503  3188  2001  3194   	fcall	_setDelayOff_GO
  7954                           
  7955                           ;RF_Control_B1.c: 431: if (getDimmerLights_Status(sw) == 1) {
  7956  1506  0020               	movlb	0	; select bank0
  7957  1507  0833               	movf	setRFSW_Control@sw,w
  7958  1508  319C  2440  3194   	fcall	_getDimmerLights_Status
  7959  150B  3A01               	xorlw	1
  7960  150C  1D03               	skipz
  7961  150D  2D33               	goto	l6495
  7962                           
  7963                           ;RF_Control_B1.c: 432: setBuz(1, 100);
  7964  150E  3064               	movlw	100
  7965  150F  0020               	movlb	0	; select bank0
  7966  1510  00A9               	movwf	setBuz@time
  7967  1511  3000               	movlw	0
  7968  1512  00AA               	movwf	setBuz@time+1
  7969  1513  3001               	movlw	1
  7970  1514  3196  263C  3194   	fcall	_setBuz
  7971                           
  7972                           ;RF_Control_B1.c: 433: status = 1;
  7973  1517  0020               	movlb	0	; select bank0
  7974  1518  01B2               	clrf	setRFSW_Control@status
  7975  1519  0AB2               	incf	setRFSW_Control@status,f
  7976                           
  7977                           ;RF_Control_B1.c: 434: setRF_DimmerLights(sw, 1);
  7978  151A  01A0               	clrf	setRF_DimmerLights@on
  7979  151B  0AA0               	incf	setRF_DimmerLights@on,f
  7980  151C  0833               	movf	setRFSW_Control@sw,w
  7981  151D  3197  2748  3194   	fcall	_setRF_DimmerLights
  7982                           
  7983                           ;RF_Control_B1.c: 435: setTxData();
  7984  1520  3186  26FB  3194   	fcall	_setTxData
  7985                           
  7986                           ;RF_Control_B1.c: 437: }
  7987                           ;RF_Control_B1.c: 438: } else {
  7988  1523  2D33               	goto	l6495
  7989  1524                     l6491:	
  7990                           
  7991                           ;RF_Control_B1.c: 440: if (getDelayOff_GO(sw) == 1) {
  7992  1524  0020               	movlb	0	; select bank0
  7993  1525  0833               	movf	setRFSW_Control@sw,w
  7994  1526  319C  2450  3194   	fcall	_getDelayOff_GO
  7995  1529  3A01               	xorlw	1
  7996  152A  1D03               	skipz
  7997  152B  2D33               	goto	l6495
  7998                           
  7999                           ;RF_Control_B1.c: 441: setDelayOff_GO(sw, 0, 0);
  8000  152C  0020               	movlb	0	; select bank0
  8001  152D  01AA               	clrf	setDelayOff_GO@command
  8002  152E  01AB               	clrf	setDelayOff_GO@value
  8003  152F  0833               	movf	setRFSW_Control@sw,w
  8004  1530  3188  2001  3194   	fcall	_setDelayOff_GO
  8005  1533                     l6495:	
  8006                           
  8007                           ;RF_Control_B1.c: 442: }
  8008                           ;RF_Control_B1.c: 444: }
  8009                           ;RF_Control_B1.c: 445: if (status == 0) {
  8010  1533  0020               	movlb	0	; select bank0
  8011  1534  08B2               	movf	setRFSW_Control@status,f
  8012  1535  1D03               	skipz
  8013  1536  0008               	return
  8014                           
  8015                           ;RF_Control_B1.c: 447: setDimmerLights_SwOn(sw);
  8016  1537  0833               	movf	setRFSW_Control@sw,w
  8017  1538  3193  2355  3194   	fcall	_setDimmerLights_SwOn
  8018                           
  8019                           ;RF_Control_B1.c: 448: setDimmerLights_SwOff(sw);
  8020  153B  0020               	movlb	0	; select bank0
  8021  153C  0833               	movf	setRFSW_Control@sw,w
  8022  153D  3194  2410         	fcall	_setDimmerLights_SwOff
  8023  153F  0008               	return
  8024  1540                     __end_of_setRFSW_Control:	
  8025                           
  8026                           	psect	text30
  8027  1355                     __ptext30:	
  8028 ;; *************** function _setDimmerLights_SwOn *****************
  8029 ;; Defined at:
  8030 ;;		line 521 in file "../src/Dimmer_B1.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  sw              1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  sw              1   15[BANK0 ] unsigned char 
  8035 ;;  idle            1   14[BANK0 ] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;		None               void
  8038 ;; Registers used:
  8039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        3 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    7
  8052 ;; This function calls:
  8053 ;;		_DimmerLightsPointSelect
  8054 ;;		_getAll_DimmerLights_AdjGO
  8055 ;;		_setBuz
  8056 ;;		_setDimmerLights_Trigger
  8057 ;; This function is called by:
  8058 ;;		_setRFSW_Control
  8059 ;;		_setSw_Main
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function _setDimmerLights_SwOn
  8065  1355                     _setDimmerLights_SwOn:	
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8069                           ;setDimmerLights_SwOn@sw stored from wreg
  8070  1355  0020               	movlb	0	; select bank0
  8071  1356  00AF               	movwf	setDimmerLights_SwOn@sw
  8072                           
  8073                           ;Dimmer_B1.c: 522: DimmerLightsPointSelect(sw);
  8074  1357  082F               	movf	setDimmerLights_SwOn@sw,w
  8075  1358  319C  24EC  3193   	fcall	_DimmerLightsPointSelect
  8076                           
  8077                           ;Dimmer_B1.c: 523: char idle = 0;
  8078  135B  0020               	movlb	0	; select bank0
  8079  135C  01AE               	clrf	setDimmerLights_SwOn@idle
  8080                           
  8081                           ;Dimmer_B1.c: 525: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  8082  135D  319C  2471  3193   	fcall	_getAll_DimmerLights_AdjGO
  8083  1360  3A01               	xorlw	1
  8084  1361  3000               	movlw	0
  8085  1362  1903               	skipnz
  8086  1363  3001               	movlw	1
  8087  1364  0020               	movlb	0	; select bank0
  8088  1365  00AD               	movwf	??_setDimmerLights_SwOn
  8089  1366  082D               	movf	??_setDimmerLights_SwOn,w
  8090  1367  00AE               	movwf	setDimmerLights_SwOn@idle
  8091                           
  8092                           ;Dimmer_B1.c: 527: if (idle == 0) {
  8093  1368  08AE               	movf	setDimmerLights_SwOn@idle,f
  8094  1369  1D03               	skipz
  8095  136A  0008               	return
  8096                           
  8097                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 1;
  8098  136B  086F               	movf	_DimmerLights,w
  8099  136C  3E09               	addlw	9
  8100  136D  0086               	movwf	6
  8101  136E  3001               	movlw	1	; select bank2/3
  8102  136F  0087               	movwf	7
  8103  1370  1701               	bsf	1,6
  8104                           
  8105                           ;Dimmer_B1.c: 529: setBuz(1, 100);
  8106  1371  3064               	movlw	100
  8107  1372  00A9               	movwf	setBuz@time
  8108  1373  3000               	movlw	0
  8109  1374  00AA               	movwf	setBuz@time+1
  8110  1375  3001               	movlw	1
  8111  1376  3196  263C  3193   	fcall	_setBuz
  8112                           
  8113                           ;Dimmer_B1.c: 530: if (DimmerLights->Status == 0) {
  8114  1379  0020               	movlb	0	; select bank0
  8115  137A  086F               	movf	_DimmerLights,w
  8116  137B  0086               	movwf	6
  8117  137C  3001               	movlw	1	; select bank2/3
  8118  137D  0087               	movwf	7
  8119  137E  1A81               	btfsc	1,5
  8120  137F  2B8B               	goto	l6299
  8121                           
  8122                           ;Dimmer_B1.c: 531: DimmerLights->Status = 1;
  8123  1380  086F               	movf	_DimmerLights,w
  8124  1381  0086               	movwf	6
  8125  1382  3001               	movlw	1	; select bank2/3
  8126  1383  0087               	movwf	7
  8127  1384  1681               	bsf	1,5
  8128                           
  8129                           ;Dimmer_B1.c: 532: setDimmerLights_Trigger(sw, 1);
  8130  1385  01A2               	clrf	setDimmerLights_Trigger@command
  8131  1386  0AA2               	incf	setDimmerLights_Trigger@command,f
  8132  1387  082F               	movf	setDimmerLights_SwOn@sw,w
  8133  1388  319E  26B7         	fcall	_setDimmerLights_Trigger
  8134                           
  8135                           ;Dimmer_B1.c: 533: } else {
  8136  138A  0008               	return
  8137  138B                     l6299:	
  8138                           
  8139                           ;Dimmer_B1.c: 534: DimmerLights->Status = 0;
  8140  138B  0020               	movlb	0	; select bank0
  8141  138C  086F               	movf	_DimmerLights,w
  8142  138D  0086               	movwf	6
  8143  138E  3001               	movlw	1	; select bank2/3
  8144  138F  0087               	movwf	7
  8145  1390  1281               	bcf	1,5
  8146  1391  0008               	return
  8147  1392                     __end_of_setDimmerLights_SwOn:	
  8148                           
  8149                           	psect	text31
  8150  13D0                     __ptext31:	
  8151 ;; *************** function _setRFSW_AdjControl *****************
  8152 ;; Defined at:
  8153 ;;		line 454 in file "../src/RF_Control_B1.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  sw              1    wreg     unsigned char 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  sw              1   74[BANK0 ] unsigned char 
  8158 ;;  status          1   73[BANK0 ] unsigned char 
  8159 ;; Return value:  Size  Location     Type
  8160 ;;		None               void
  8161 ;; Registers used:
  8162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;Total ram usage:        4 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:   10
  8175 ;; This function calls:
  8176 ;;		_getDimmerLights_Status
  8177 ;;		_setMemory_Modify
  8178 ;;		_setRF_DimmerValue
  8179 ;;		_setTxData
  8180 ;; This function is called by:
  8181 ;;		_setControl_Lights_Table
  8182 ;; This function uses a non-reentrant model
  8183 ;;
  8184                           
  8185                           
  8186                           ;psect for function _setRFSW_AdjControl
  8187  13D0                     _setRFSW_AdjControl:	
  8188                           
  8189                           ;incstack = 0
  8190                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8191                           ;setRFSW_AdjControl@sw stored from wreg
  8192  13D0  0020               	movlb	0	; select bank0
  8193  13D1  00EA               	movwf	setRFSW_AdjControl@sw
  8194                           
  8195                           ;RF_Control_B1.c: 455: char status = 0;
  8196  13D2  01E9               	clrf	setRFSW_AdjControl@status
  8197                           
  8198                           ;RF_Control_B1.c: 457: status = getDimmerLights_Status(sw);
  8199  13D3  086A               	movf	setRFSW_AdjControl@sw,w
  8200  13D4  319C  2440  3193   	fcall	_getDimmerLights_Status
  8201  13D7  0020               	movlb	0	; select bank0
  8202  13D8  00E7               	movwf	??_setRFSW_AdjControl
  8203  13D9  0867               	movf	??_setRFSW_AdjControl,w
  8204  13DA  00E9               	movwf	setRFSW_AdjControl@status
  8205                           
  8206                           ;RF_Control_B1.c: 460: if (status == 1) {
  8207  13DB  0869               	movf	setRFSW_AdjControl@status,w
  8208  13DC  3A01               	xorlw	1
  8209  13DD  1D03               	skipz
  8210  13DE  2BE9               	goto	l6509
  8211                           
  8212                           ;RF_Control_B1.c: 461: setMemory_Modify(1);
  8213  13DF  3001               	movlw	1
  8214  13E0  319C  24FF  3193   	fcall	_setMemory_Modify
  8215                           
  8216                           ;RF_Control_B1.c: 462: setRF_DimmerValue(sw);
  8217  13E3  0020               	movlb	0	; select bank0
  8218  13E4  086A               	movf	setRFSW_AdjControl@sw,w
  8219  13E5  3191  21AA  3193   	fcall	_setRF_DimmerValue
  8220                           
  8221                           ;RF_Control_B1.c: 463: } else {
  8222  13E8  2BFB               	goto	l2063
  8223  13E9                     l6509:	
  8224                           
  8225                           ;RF_Control_B1.c: 464: product->Data[9]=product->Data[20 + sw];
  8226  13E9  0020               	movlb	0	; select bank0
  8227  13EA  086A               	movf	setRFSW_AdjControl@sw,w
  8228  13EB  3E14               	addlw	20
  8229  13EC  076E               	addwf	_product,w
  8230  13ED  00E7               	movwf	??_setRFSW_AdjControl
  8231  13EE  0867               	movf	??_setRFSW_AdjControl,w
  8232  13EF  0086               	movwf	6
  8233  13F0  3002               	movlw	2	; select bank4/5
  8234  13F1  0087               	movwf	7
  8235  13F2  0801               	movf	1,w
  8236  13F3  00E8               	movwf	??_setRFSW_AdjControl+1
  8237  13F4  086E               	movf	_product,w
  8238  13F5  3E09               	addlw	9
  8239  13F6  0086               	movwf	6
  8240  13F7  3002               	movlw	2	; select bank4/5
  8241  13F8  0087               	movwf	7
  8242  13F9  0868               	movf	??_setRFSW_AdjControl+1,w
  8243  13FA  0081               	movwf	1
  8244  13FB                     l2063:	
  8245                           
  8246                           ;RF_Control_B1.c: 465: }
  8247                           ;RF_Control_B1.c: 466: product->Data[17]=product->Data[26 + sw];
  8248  13FB  0020               	movlb	0	; select bank0
  8249  13FC  086A               	movf	setRFSW_AdjControl@sw,w
  8250  13FD  3E1A               	addlw	26
  8251  13FE  076E               	addwf	_product,w
  8252  13FF  00E7               	movwf	??_setRFSW_AdjControl
  8253  1400  0867               	movf	??_setRFSW_AdjControl,w
  8254  1401  0086               	movwf	6
  8255  1402  3002               	movlw	2	; select bank4/5
  8256  1403  0087               	movwf	7
  8257  1404  0801               	movf	1,w
  8258  1405  00E8               	movwf	??_setRFSW_AdjControl+1
  8259  1406  086E               	movf	_product,w
  8260  1407  3E11               	addlw	17
  8261  1408  0086               	movwf	6
  8262  1409  3002               	movlw	2	; select bank4/5
  8263  140A  0087               	movwf	7
  8264  140B  0868               	movf	??_setRFSW_AdjControl+1,w
  8265  140C  0081               	movwf	1
  8266                           
  8267                           ;RF_Control_B1.c: 467: setTxData();
  8268  140D  3186  26FB         	fcall	_setTxData
  8269  140F  0008               	return
  8270  1410                     __end_of_setRFSW_AdjControl:	
  8271                           
  8272                           	psect	text32
  8273  11AA                     __ptext32:	
  8274 ;; *************** function _setRF_DimmerValue *****************
  8275 ;; Defined at:
  8276 ;;		line 472 in file "../src/RF_Control_B1.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  lights          1    wreg     unsigned char 
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;  lights          1   70[BANK0 ] unsigned char 
  8281 ;; Return value:  Size  Location     Type
  8282 ;;		None               void
  8283 ;; Registers used:
  8284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;Total ram usage:        3 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    9
  8297 ;; This function calls:
  8298 ;;		_setDimmerLights_AdjRF
  8299 ;; This function is called by:
  8300 ;;		_setRFSW_AdjControl
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           
  8305                           ;psect for function _setRF_DimmerValue
  8306  11AA                     _setRF_DimmerValue:	
  8307                           
  8308                           ;incstack = 0
  8309                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8310                           ;setRF_DimmerValue@lights stored from wreg
  8311  11AA  0020               	movlb	0	; select bank0
  8312  11AB  00E6               	movwf	setRF_DimmerValue@lights
  8313                           
  8314                           ;RF_Control_B1.c: 473: if (RF_Data[9] > 0x64) {
  8315  11AC  3065               	movlw	101
  8316  11AD  0022               	movlb	2	; select bank2
  8317  11AE  0229               	subwf	(_RF_Data^(0+256)+9),w
  8318  11AF  1C03               	skipc
  8319  11B0  29B7               	goto	l6387
  8320                           
  8321                           ;RF_Control_B1.c: 474: RF_Data[9] = 0x64;
  8322  11B1  3064               	movlw	100
  8323  11B2  0020               	movlb	0	; select bank0
  8324  11B3  00E4               	movwf	??_setRF_DimmerValue
  8325  11B4  0864               	movf	??_setRF_DimmerValue,w
  8326  11B5  0022               	movlb	2	; select bank2
  8327  11B6  00A9               	movwf	(_RF_Data^(0+256)+9)
  8328  11B7                     l6387:	
  8329                           
  8330                           ;RF_Control_B1.c: 475: }
  8331                           ;RF_Control_B1.c: 476: product->Data[9]=RF_Data[9];
  8332  11B7  0829               	movf	(_RF_Data^(0+256)+9),w
  8333  11B8  0020               	movlb	0	; select bank0
  8334  11B9  00E4               	movwf	??_setRF_DimmerValue
  8335  11BA  086E               	movf	_product,w
  8336  11BB  3E09               	addlw	9
  8337  11BC  0086               	movwf	6
  8338  11BD  3002               	movlw	2	; select bank4/5
  8339  11BE  0087               	movwf	7
  8340  11BF  0864               	movf	??_setRF_DimmerValue,w
  8341  11C0  0081               	movwf	1
  8342                           
  8343                           ;RF_Control_B1.c: 477: product->Data[11]=lights;
  8344  11C1  0866               	movf	setRF_DimmerValue@lights,w
  8345  11C2  00E4               	movwf	??_setRF_DimmerValue
  8346  11C3  086E               	movf	_product,w
  8347  11C4  3E0B               	addlw	11
  8348  11C5  0086               	movwf	6
  8349  11C6  3002               	movlw	2	; select bank4/5
  8350  11C7  0087               	movwf	7
  8351  11C8  0864               	movf	??_setRF_DimmerValue,w
  8352  11C9  0081               	movwf	1
  8353                           
  8354                           ;RF_Control_B1.c: 478: product->Data[(20 + lights)]=RF_Data[9];
  8355  11CA  0022               	movlb	2	; select bank2
  8356  11CB  0829               	movf	(_RF_Data^(0+256)+9),w
  8357  11CC  0020               	movlb	0	; select bank0
  8358  11CD  00E4               	movwf	??_setRF_DimmerValue
  8359  11CE  0866               	movf	setRF_DimmerValue@lights,w
  8360  11CF  3E14               	addlw	20
  8361  11D0  076E               	addwf	_product,w
  8362  11D1  00E5               	movwf	??_setRF_DimmerValue+1
  8363  11D2  0865               	movf	??_setRF_DimmerValue+1,w
  8364  11D3  0086               	movwf	6
  8365  11D4  3002               	movlw	2	; select bank4/5
  8366  11D5  0087               	movwf	7
  8367  11D6  0864               	movf	??_setRF_DimmerValue,w
  8368  11D7  0081               	movwf	1
  8369                           
  8370                           ;RF_Control_B1.c: 479: setDimmerLights_AdjRF(lights);
  8371  11D8  0866               	movf	setRF_DimmerValue@lights,w
  8372  11D9  319F  27B9         	fcall	_setDimmerLights_AdjRF
  8373  11DB  0008               	return
  8374  11DC                     __end_of_setRF_DimmerValue:	
  8375                           
  8376                           	psect	text33
  8377  1FB9                     __ptext33:	
  8378 ;; *************** function _setDimmerLights_AdjRF *****************
  8379 ;; Defined at:
  8380 ;;		line 762 in file "../src/Dimmer_B1.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  lights          1    wreg     unsigned char 
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;  lights          1   67[BANK0 ] unsigned char 
  8385 ;; Return value:  Size  Location     Type
  8386 ;;		None               void
  8387 ;; Registers used:
  8388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;Total ram usage:        2 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    8
  8401 ;; This function calls:
  8402 ;;		_DimmerLightsPointSelect
  8403 ;;		_getPercentValue
  8404 ;; This function is called by:
  8405 ;;		_setRF_DimmerValue
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           
  8410                           ;psect for function _setDimmerLights_AdjRF
  8411  1FB9                     _setDimmerLights_AdjRF:	
  8412                           
  8413                           ;incstack = 0
  8414                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8415                           ;setDimmerLights_AdjRF@lights stored from wreg
  8416  1FB9  0020               	movlb	0	; select bank0
  8417  1FBA  00E3               	movwf	setDimmerLights_AdjRF@lights
  8418                           
  8419                           ;Dimmer_B1.c: 763: DimmerLightsPointSelect(lights);
  8420  1FBB  0863               	movf	setDimmerLights_AdjRF@lights,w
  8421  1FBC  319C  24EC  319F   	fcall	_DimmerLightsPointSelect
  8422                           
  8423                           ;Dimmer_B1.c: 764: DimmerLights->AdjRF = 1;
  8424  1FBF  0020               	movlb	0	; select bank0
  8425  1FC0  086F               	movf	_DimmerLights,w
  8426  1FC1  0086               	movwf	6
  8427  1FC2  3001               	movlw	1	; select bank2/3
  8428  1FC3  0087               	movwf	7
  8429  1FC4  1501               	bsf	1,2
  8430                           
  8431                           ;Dimmer_B1.c: 765: DimmerLights->Signal = 1;
  8432  1FC5  086F               	movf	_DimmerLights,w
  8433  1FC6  0086               	movwf	6
  8434  1FC7  3001               	movlw	1	; select bank2/3
  8435  1FC8  0087               	movwf	7
  8436  1FC9  1481               	bsf	1,1
  8437                           
  8438                           ;Dimmer_B1.c: 766: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8439  1FCA  086E               	movf	_product,w
  8440  1FCB  3E09               	addlw	9
  8441  1FCC  0086               	movwf	6
  8442  1FCD  3002               	movlw	2	; select bank4/5
  8443  1FCE  0087               	movwf	7
  8444  1FCF  0801               	movf	1,w
  8445  1FD0  318A  2240         	fcall	_getPercentValue
  8446  1FD2  0020               	movlb	0	; select bank0
  8447  1FD3  00E2               	movwf	??_setDimmerLights_AdjRF
  8448  1FD4  086F               	movf	_DimmerLights,w
  8449  1FD5  3E05               	addlw	5
  8450  1FD6  0086               	movwf	6
  8451  1FD7  3001               	movlw	1	; select bank2/3
  8452  1FD8  0087               	movwf	7
  8453  1FD9  0862               	movf	??_setDimmerLights_AdjRF,w
  8454  1FDA  0081               	movwf	1
  8455  1FDB  0008               	return
  8456  1FDC                     __end_of_setDimmerLights_AdjRF:	
  8457                           
  8458                           	psect	text34
  8459  0A40                     __ptext34:	
  8460 ;; *************** function _getPercentValue *****************
  8461 ;; Defined at:
  8462 ;;		line 874 in file "../src/Dimmer_B1.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  value           1    wreg     unsigned char 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  value           1   62[BANK0 ] unsigned char 
  8467 ;;  i               3   63[BANK0 ] float 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      unsigned char 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0, pclath, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;Total ram usage:        6 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    7
  8484 ;; This function calls:
  8485 ;;		___awtoft
  8486 ;;		___ftadd
  8487 ;;		___ftdiv
  8488 ;;		___ftmul
  8489 ;;		___ftneg
  8490 ;;		___fttol
  8491 ;; This function is called by:
  8492 ;;		_setDimmerLights_AdjRF
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _getPercentValue
  8498  0A40                     _getPercentValue:	
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8502                           ;getPercentValue@value stored from wreg
  8503  0A40  0020               	movlb	0	; select bank0
  8504  0A41  00DE               	movwf	getPercentValue@value
  8505                           
  8506                           ;Dimmer_B1.c: 882: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8507  0A42  3000               	movlw	0
  8508  0A43  00DF               	movwf	getPercentValue@i
  8509  0A44  3050               	movlw	80
  8510  0A45  00E0               	movwf	getPercentValue@i+1
  8511  0A46  3042               	movlw	66
  8512  0A47  00E1               	movwf	getPercentValue@i+2
  8513                           
  8514                           ;Dimmer_B1.c: 883: i /= 100;
  8515  0A48  3000               	movlw	0
  8516  0A49  00AE               	movwf	___ftdiv@f2
  8517  0A4A  30C8               	movlw	200
  8518  0A4B  00AF               	movwf	___ftdiv@f2+1
  8519  0A4C  3042               	movlw	66
  8520  0A4D  00B0               	movwf	___ftdiv@f2+2
  8521  0A4E  085F               	movf	getPercentValue@i,w
  8522  0A4F  00B1               	movwf	___ftdiv@f1
  8523  0A50  0860               	movf	getPercentValue@i+1,w
  8524  0A51  00B2               	movwf	___ftdiv@f1+1
  8525  0A52  0861               	movf	getPercentValue@i+2,w
  8526  0A53  00B3               	movwf	___ftdiv@f1+2
  8527  0A54  318E  26A3  318A   	fcall	___ftdiv
  8528  0A57  0020               	movlb	0	; select bank0
  8529  0A58  082E               	movf	?___ftdiv,w
  8530  0A59  00DF               	movwf	getPercentValue@i
  8531  0A5A  082F               	movf	?___ftdiv+1,w
  8532  0A5B  00E0               	movwf	getPercentValue@i+1
  8533  0A5C  0830               	movf	?___ftdiv+2,w
  8534  0A5D  00E1               	movwf	getPercentValue@i+2
  8535                           
  8536                           ;Dimmer_B1.c: 885: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8537  0A5E  085E               	movf	getPercentValue@value,w
  8538  0A5F  00DC               	movwf	??_getPercentValue
  8539  0A60  01DD               	clrf	??_getPercentValue+1
  8540  0A61  09DC               	comf	??_getPercentValue,f
  8541  0A62  09DD               	comf	??_getPercentValue+1,f
  8542  0A63  0ADC               	incf	??_getPercentValue,f
  8543  0A64  1903               	skipnz
  8544  0A65  0ADD               	incf	??_getPercentValue+1,f
  8545  0A66  085C               	movf	??_getPercentValue,w
  8546  0A67  3E64               	addlw	100
  8547  0A68  00A8               	movwf	___awtoft@c
  8548  0A69  3000               	movlw	0
  8549  0A6A  3D5D               	addwfc	??_getPercentValue+1,w
  8550  0A6B  00A9               	movwf	___awtoft@c+1
  8551  0A6C  319F  2775  318A   	fcall	___awtoft
  8552  0A6F  0020               	movlb	0	; select bank0
  8553  0A70  0828               	movf	?___awtoft,w
  8554  0A71  00B1               	movwf	___ftmul@f2
  8555  0A72  0829               	movf	?___awtoft+1,w
  8556  0A73  00B2               	movwf	___ftmul@f2+1
  8557  0A74  082A               	movf	?___awtoft+2,w
  8558  0A75  00B3               	movwf	___ftmul@f2+2
  8559  0A76  085F               	movf	getPercentValue@i,w
  8560  0A77  00AE               	movwf	___ftmul@f1
  8561  0A78  0860               	movf	getPercentValue@i+1,w
  8562  0A79  00AF               	movwf	___ftmul@f1+1
  8563  0A7A  0861               	movf	getPercentValue@i+2,w
  8564  0A7B  00B0               	movwf	___ftmul@f1+2
  8565  0A7C  318F  274C  318A   	fcall	___ftmul
  8566  0A7F  0020               	movlb	0	; select bank0
  8567  0A80  082E               	movf	?___ftmul,w
  8568  0A81  00BE               	movwf	___ftneg@f1
  8569  0A82  082F               	movf	?___ftmul+1,w
  8570  0A83  00BF               	movwf	___ftneg@f1+1
  8571  0A84  0830               	movf	?___ftmul+2,w
  8572  0A85  00C0               	movwf	___ftneg@f1+2
  8573  0A86  319B  237C  318A   	fcall	___ftneg
  8574  0A89  0020               	movlb	0	; select bank0
  8575  0A8A  083E               	movf	?___ftneg,w
  8576  0A8B  00C4               	movwf	___ftadd@f2
  8577  0A8C  083F               	movf	?___ftneg+1,w
  8578  0A8D  00C5               	movwf	___ftadd@f2+1
  8579  0A8E  0840               	movf	?___ftneg+2,w
  8580  0A8F  00C6               	movwf	___ftadd@f2+2
  8581  0A90  3000               	movlw	0
  8582  0A91  00C1               	movwf	___ftadd@f1
  8583  0A92  3080               	movlw	128
  8584  0A93  00C2               	movwf	___ftadd@f1+1
  8585  0A94  3042               	movlw	66
  8586  0A95  00C3               	movwf	___ftadd@f1+2
  8587  0A96  3184  244A  318A   	fcall	___ftadd
  8588  0A99  0020               	movlb	0	; select bank0
  8589  0A9A  0841               	movf	?___ftadd,w
  8590  0A9B  00CE               	movwf	___fttol@f1
  8591  0A9C  0842               	movf	?___ftadd+1,w
  8592  0A9D  00CF               	movwf	___fttol@f1+1
  8593  0A9E  0843               	movf	?___ftadd+2,w
  8594  0A9F  00D0               	movwf	___fttol@f1+2
  8595  0AA0  318C  245E         	fcall	___fttol
  8596  0AA2  0020               	movlb	0	; select bank0
  8597  0AA3  084E               	movf	?___fttol,w
  8598  0AA4  0008               	return
  8599  0AA5                     __end_of_getPercentValue:	
  8600                           
  8601                           	psect	text35
  8602  0F4C                     __ptext35:	
  8603 ;; *************** function ___ftmul *****************
  8604 ;; Defined at:
  8605 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  f1              3   14[BANK0 ] float 
  8608 ;;  f2              3   17[BANK0 ] float 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8611 ;;  sign            1   29[BANK0 ] unsigned char 
  8612 ;;  cntr            1   28[BANK0 ] unsigned char 
  8613 ;;  exp             1   24[BANK0 ] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  3   14[BANK0 ] float 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0, pclath, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8623 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;Total ram usage:       16 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    6
  8630 ;; This function calls:
  8631 ;;		___ftpack
  8632 ;; This function is called by:
  8633 ;;		_getPercentValue
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           
  8638                           ;psect for function ___ftmul
  8639  0F4C                     ___ftmul:	
  8640                           
  8641                           ;incstack = 0
  8642                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8643  0F4C  0020               	movlb	0	; select bank0
  8644  0F4D  082E               	movf	___ftmul@f1,w
  8645  0F4E  00B4               	movwf	??___ftmul
  8646  0F4F  082F               	movf	___ftmul@f1+1,w
  8647  0F50  00B5               	movwf	??___ftmul+1
  8648  0F51  0830               	movf	___ftmul@f1+2,w
  8649  0F52  00B6               	movwf	??___ftmul+2
  8650  0F53  1003               	clrc
  8651  0F54  0D35               	rlf	??___ftmul+1,w
  8652  0F55  0D36               	rlf	??___ftmul+2,w
  8653  0F56  00B7               	movwf	??___ftmul+3
  8654  0F57  0837               	movf	??___ftmul+3,w
  8655  0F58  00B8               	movwf	___ftmul@exp
  8656  0F59  08B8               	movf	___ftmul@exp,f
  8657  0F5A  1D03               	skipz
  8658  0F5B  2F63               	goto	l6001
  8659  0F5C  3000               	movlw	0
  8660  0F5D  00AE               	movwf	?___ftmul
  8661  0F5E  3000               	movlw	0
  8662  0F5F  00AF               	movwf	?___ftmul+1
  8663  0F60  3000               	movlw	0
  8664  0F61  00B0               	movwf	?___ftmul+2
  8665  0F62  0008               	return
  8666  0F63                     l6001:	
  8667  0F63  0831               	movf	___ftmul@f2,w
  8668  0F64  00B4               	movwf	??___ftmul
  8669  0F65  0832               	movf	___ftmul@f2+1,w
  8670  0F66  00B5               	movwf	??___ftmul+1
  8671  0F67  0833               	movf	___ftmul@f2+2,w
  8672  0F68  00B6               	movwf	??___ftmul+2
  8673  0F69  1003               	clrc
  8674  0F6A  0D35               	rlf	??___ftmul+1,w
  8675  0F6B  0D36               	rlf	??___ftmul+2,w
  8676  0F6C  00B7               	movwf	??___ftmul+3
  8677  0F6D  0837               	movf	??___ftmul+3,w
  8678  0F6E  00BD               	movwf	___ftmul@sign
  8679  0F6F  08BD               	movf	___ftmul@sign,f
  8680  0F70  1D03               	skipz
  8681  0F71  2F79               	goto	l6007
  8682  0F72  3000               	movlw	0
  8683  0F73  00AE               	movwf	?___ftmul
  8684  0F74  3000               	movlw	0
  8685  0F75  00AF               	movwf	?___ftmul+1
  8686  0F76  3000               	movlw	0
  8687  0F77  00B0               	movwf	?___ftmul+2
  8688  0F78  0008               	return
  8689  0F79                     l6007:	
  8690  0F79  083D               	movf	___ftmul@sign,w
  8691  0F7A  3E7B               	addlw	123
  8692  0F7B  00B4               	movwf	??___ftmul
  8693  0F7C  0834               	movf	??___ftmul,w
  8694  0F7D  07B8               	addwf	___ftmul@exp,f
  8695  0F7E  082E               	movf	___ftmul@f1,w
  8696  0F7F  00B4               	movwf	??___ftmul
  8697  0F80  082F               	movf	___ftmul@f1+1,w
  8698  0F81  00B5               	movwf	??___ftmul+1
  8699  0F82  0830               	movf	___ftmul@f1+2,w
  8700  0F83  00B6               	movwf	??___ftmul+2
  8701  0F84  3010               	movlw	16
  8702  0F85                     u4725:	
  8703  0F85  36B6               	lsrf	??___ftmul+2,f
  8704  0F86  0CB5               	rrf	??___ftmul+1,f
  8705  0F87  0CB4               	rrf	??___ftmul,f
  8706  0F88  0B89               	decfsz	9,f
  8707  0F89  2F85               	goto	u4725
  8708  0F8A  0834               	movf	??___ftmul,w
  8709  0F8B  00B7               	movwf	??___ftmul+3
  8710  0F8C  0837               	movf	??___ftmul+3,w
  8711  0F8D  00BD               	movwf	___ftmul@sign
  8712  0F8E  0831               	movf	___ftmul@f2,w
  8713  0F8F  00B4               	movwf	??___ftmul
  8714  0F90  0832               	movf	___ftmul@f2+1,w
  8715  0F91  00B5               	movwf	??___ftmul+1
  8716  0F92  0833               	movf	___ftmul@f2+2,w
  8717  0F93  00B6               	movwf	??___ftmul+2
  8718  0F94  3010               	movlw	16
  8719  0F95                     u4735:	
  8720  0F95  36B6               	lsrf	??___ftmul+2,f
  8721  0F96  0CB5               	rrf	??___ftmul+1,f
  8722  0F97  0CB4               	rrf	??___ftmul,f
  8723  0F98  0B89               	decfsz	9,f
  8724  0F99  2F95               	goto	u4735
  8725  0F9A  0834               	movf	??___ftmul,w
  8726  0F9B  00B7               	movwf	??___ftmul+3
  8727  0F9C  0837               	movf	??___ftmul+3,w
  8728  0F9D  06BD               	xorwf	___ftmul@sign,f
  8729  0F9E  3080               	movlw	128
  8730  0F9F  00B4               	movwf	??___ftmul
  8731  0FA0  0834               	movf	??___ftmul,w
  8732  0FA1  05BD               	andwf	___ftmul@sign,f
  8733  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8734  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8735  0FA4  30FF               	movlw	255
  8736  0FA5  05B1               	andwf	___ftmul@f2,f
  8737  0FA6  30FF               	movlw	255
  8738  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8739  0FA8  3000               	movlw	0
  8740  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8741  0FAA  3000               	movlw	0
  8742  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8743  0FAC  3000               	movlw	0
  8744  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8745  0FAE  3000               	movlw	0
  8746  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8747  0FB0  3007               	movlw	7
  8748  0FB1  00B4               	movwf	??___ftmul
  8749  0FB2  0834               	movf	??___ftmul,w
  8750  0FB3  00BC               	movwf	___ftmul@cntr
  8751  0FB4                     l6019:	
  8752  0FB4  1C2E               	btfss	___ftmul@f1,0
  8753  0FB5  2FBC               	goto	l6023
  8754  0FB6  0831               	movf	___ftmul@f2,w
  8755  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8756  0FB8  0832               	movf	___ftmul@f2+1,w
  8757  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8758  0FBA  0833               	movf	___ftmul@f2+2,w
  8759  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8760  0FBC                     l6023:	
  8761  0FBC  3001               	movlw	1
  8762  0FBD                     u4755:	
  8763  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8764  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8765  0FBF  0CAE               	rrf	___ftmul@f1,f
  8766  0FC0  0B89               	decfsz	9,f
  8767  0FC1  2FBD               	goto	u4755
  8768  0FC2  3001               	movlw	1
  8769  0FC3                     u4765:	
  8770  0FC3  35B1               	lslf	___ftmul@f2,f
  8771  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8772  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8773  0FC6  0B89               	decfsz	9,f
  8774  0FC7  2FC3               	goto	u4765
  8775  0FC8  3001               	movlw	1
  8776  0FC9  02BC               	subwf	___ftmul@cntr,f
  8777  0FCA  1D03               	btfss	3,2
  8778  0FCB  2FB4               	goto	l6019
  8779  0FCC  3009               	movlw	9
  8780  0FCD  00B4               	movwf	??___ftmul
  8781  0FCE  0834               	movf	??___ftmul,w
  8782  0FCF  00BC               	movwf	___ftmul@cntr
  8783  0FD0                     l6031:	
  8784  0FD0  1C2E               	btfss	___ftmul@f1,0
  8785  0FD1  2FD8               	goto	l6035
  8786  0FD2  0831               	movf	___ftmul@f2,w
  8787  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8788  0FD4  0832               	movf	___ftmul@f2+1,w
  8789  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8790  0FD6  0833               	movf	___ftmul@f2+2,w
  8791  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8792  0FD8                     l6035:	
  8793  0FD8  3001               	movlw	1
  8794  0FD9                     u4795:	
  8795  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8796  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8797  0FDB  0CAE               	rrf	___ftmul@f1,f
  8798  0FDC  0B89               	decfsz	9,f
  8799  0FDD  2FD9               	goto	u4795
  8800  0FDE  3001               	movlw	1
  8801  0FDF                     u4805:	
  8802  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8803  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8804  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8805  0FE2  0B89               	decfsz	9,f
  8806  0FE3  2FDF               	goto	u4805
  8807  0FE4  3001               	movlw	1
  8808  0FE5  02BC               	subwf	___ftmul@cntr,f
  8809  0FE6  1D03               	btfss	3,2
  8810  0FE7  2FD0               	goto	l6031
  8811  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8812  0FE9  00A0               	movwf	___ftpack@arg
  8813  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8814  0FEB  00A1               	movwf	___ftpack@arg+1
  8815  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8816  0FED  00A2               	movwf	___ftpack@arg+2
  8817  0FEE  0838               	movf	___ftmul@exp,w
  8818  0FEF  00B4               	movwf	??___ftmul
  8819  0FF0  0834               	movf	??___ftmul,w
  8820  0FF1  00A3               	movwf	___ftpack@exp
  8821  0FF2  083D               	movf	___ftmul@sign,w
  8822  0FF3  00B5               	movwf	??___ftmul+1
  8823  0FF4  0835               	movf	??___ftmul+1,w
  8824  0FF5  00A4               	movwf	___ftpack@sign
  8825  0FF6  3189  2119         	fcall	___ftpack
  8826  0FF8  0020               	movlb	0	; select bank0
  8827  0FF9  0820               	movf	?___ftpack,w
  8828  0FFA  00AE               	movwf	?___ftmul
  8829  0FFB  0821               	movf	?___ftpack+1,w
  8830  0FFC  00AF               	movwf	?___ftmul+1
  8831  0FFD  0822               	movf	?___ftpack+2,w
  8832  0FFE  00B0               	movwf	?___ftmul+2
  8833  0FFF  0008               	return
  8834  1000                     __end_of___ftmul:	
  8835                           
  8836                           	psect	text36
  8837  1CFF                     __ptext36:	
  8838 ;; *************** function _setMemory_Modify *****************
  8839 ;; Defined at:
  8840 ;;		line 1011 in file "../src/MCU_B1.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  command         1    wreg     unsigned char 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  command         1    1[BANK0 ] unsigned char 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;		None               void
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;Total ram usage:        2 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    5
  8861 ;; This function calls:
  8862 ;;		Nothing
  8863 ;; This function is called by:
  8864 ;;		_setLog_Code
  8865 ;;		_setRFSW_AdjControl
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _setMemory_Modify
  8871  1CFF                     _setMemory_Modify:	
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8875                           ;setMemory_Modify@command stored from wreg
  8876  1CFF  0020               	movlb	0	; select bank0
  8877  1D00  00A1               	movwf	setMemory_Modify@command
  8878                           
  8879                           ;MCU_B1.c: 1012: Memory.Modify = command == 1 ? 1 : 0;
  8880  1D01  0821               	movf	setMemory_Modify@command,w
  8881  1D02  3A01               	xorlw	1
  8882  1D03  3000               	movlw	0
  8883  1D04  1903               	skipnz
  8884  1D05  3001               	movlw	1
  8885  1D06  00A0               	movwf	??_setMemory_Modify
  8886  1D07  0024               	movlb	4	; select bank4
  8887  1D08  0844               	movf	(_Memory^(0+512)+36),w
  8888  1D09  0020               	movlb	0	; select bank0
  8889  1D0A  0620               	xorwf	??_setMemory_Modify,w
  8890  1D0B  39FE               	andlw	-2
  8891  1D0C  0620               	xorwf	??_setMemory_Modify,w
  8892  1D0D  0024               	movlb	4	; select bank4
  8893  1D0E  00C4               	movwf	(_Memory^(0+512)+36)
  8894                           
  8895                           ;MCU_B1.c: 1013: Memory.Time = 0;
  8896  1D0F  01C2               	clrf	(_Memory^(0+512)+34)
  8897  1D10  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8898  1D11  0008               	return
  8899  1D12                     __end_of_setMemory_Modify:	
  8900                           
  8901                           	psect	text37
  8902  1C93                     __ptext37:	
  8903 ;; *************** function _getRF_KeyStatus *****************
  8904 ;; Defined at:
  8905 ;;		line 193 in file "../src/RF_Control_B1.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;		None
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;  key             1    1[BANK0 ] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  1    wreg      unsigned char 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;Total ram usage:        3 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    5
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_setRF_Main
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function _getRF_KeyStatus
  8935  1C93                     _getRF_KeyStatus:	
  8936                           
  8937                           ;RF_Control_B1.c: 194: char key = 0;
  8938                           
  8939                           ;incstack = 0
  8940                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8941  1C93  0020               	movlb	0	; select bank0
  8942  1C94  01A1               	clrf	getRF_KeyStatus@key
  8943                           
  8944                           ;RF_Control_B1.c: 200: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8945  1C95  01A2               	clrf	_getRF_KeyStatus$5272
  8946  1C96  0AA2               	incf	_getRF_KeyStatus$5272,f
  8947  1C97  1F0C               	btfss	12,6	;volatile
  8948  1C98  1A0C               	btfsc	12,4	;volatile
  8949  1C99  2C9E               	goto	l7053
  8950  1C9A  1C0C               	btfss	12,0	;volatile
  8951  1C9B  188D               	btfsc	13,1	;volatile
  8952  1C9C  2C9E               	goto	l7053
  8953  1C9D  01A2               	clrf	_getRF_KeyStatus$5272
  8954  1C9E                     l7053:	
  8955  1C9E  0822               	movf	_getRF_KeyStatus$5272,w
  8956  1C9F  00A0               	movwf	??_getRF_KeyStatus
  8957  1CA0  0820               	movf	??_getRF_KeyStatus,w
  8958  1CA1  00A1               	movwf	getRF_KeyStatus@key
  8959                           
  8960                           ;RF_Control_B1.c: 206: return key;
  8961  1CA2  0821               	movf	getRF_KeyStatus@key,w
  8962  1CA3  0008               	return
  8963  1CA4                     __end_of_getRF_KeyStatus:	
  8964                           
  8965                           	psect	text38
  8966  1C82                     __ptext38:	
  8967 ;; *************** function _getBuz_GO *****************
  8968 ;; Defined at:
  8969 ;;		line 82 in file "../src/Buzzer_B1.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  i               2    4[BANK0 ] int 
  8974 ;; Return value:  Size  Location     Type
  8975 ;;                  2    0[BANK0 ] int 
  8976 ;; Registers used:
  8977 ;;		wreg, status,2, status,0
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        6 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    5
  8990 ;; This function calls:
  8991 ;;		Nothing
  8992 ;; This function is called by:
  8993 ;;		_setRF_Main
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _getBuz_GO
  8999  1C82                     _getBuz_GO:	
  9000                           
  9001                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9005  1C82  0021               	movlb	1	; select bank1
  9006  1C83  0C2F               	rrf	_Buz1^(0+128),w
  9007  1C84  3901               	andlw	1
  9008  1C85  0020               	movlb	0	; select bank0
  9009  1C86  00A2               	movwf	??_getBuz_GO
  9010  1C87  01A3               	clrf	??_getBuz_GO+1
  9011  1C88  0822               	movf	??_getBuz_GO,w
  9012  1C89  00A4               	movwf	getBuz_GO@i
  9013  1C8A  0823               	movf	??_getBuz_GO+1,w
  9014  1C8B  00A5               	movwf	getBuz_GO@i+1
  9015                           
  9016                           ;Buzzer_B1.c: 84: return i;
  9017  1C8C  0825               	movf	getBuz_GO@i+1,w
  9018  1C8D  01A1               	clrf	?_getBuz_GO+1
  9019  1C8E  07A1               	addwf	?_getBuz_GO+1,f
  9020  1C8F  0824               	movf	getBuz_GO@i,w
  9021  1C90  01A0               	clrf	?_getBuz_GO
  9022  1C91  07A0               	addwf	?_getBuz_GO,f
  9023  1C92  0008               	return
  9024  1C93                     __end_of_getBuz_GO:	
  9025                           
  9026                           	psect	text39
  9027  1C22                     __ptext39:	
  9028 ;; *************** function _RF_RxDisable *****************
  9029 ;; Defined at:
  9030 ;;		line 264 in file "../src/RF_Control_B1.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;		None
  9035 ;; Return value:  Size  Location     Type
  9036 ;;		None               void
  9037 ;; Registers used:
  9038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;Total ram usage:        0 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    7
  9051 ;; This function calls:
  9052 ;;		_CC2500_WriteCommand
  9053 ;; This function is called by:
  9054 ;;		_setRF_Main
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _RF_RxDisable
  9060  1C22                     _RF_RxDisable:	
  9061                           
  9062                           ;RF_Control_B1.c: 265: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9063                           
  9064                           ;incstack = 0
  9065                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9066  1C22  0021               	movlb	1	; select bank1
  9067  1C23  18BB               	btfsc	_RF1^(0+128),1
  9068  1C24  2C27               	goto	l2013
  9069  1C25  1DBB               	btfss	_RF1^(0+128),3
  9070  1C26  0008               	return
  9071  1C27                     l2013:	
  9072                           
  9073                           ;RF_Control_B1.c: 266: RF1.RxStatus = 0;
  9074  1C27  11BB               	bcf	_RF1^(0+128),3
  9075                           
  9076                           ;RF_Control_B1.c: 267: RF1.ReceiveGO = 0;
  9077  1C28  10BB               	bcf	_RF1^(0+128),1
  9078                           
  9079                           ;RF_Control_B1.c: 268: CC2500_WriteCommand(0x36);
  9080  1C29  3036               	movlw	54
  9081  1C2A  319E  2634  319C   	fcall	_CC2500_WriteCommand
  9082                           
  9083                           ;RF_Control_B1.c: 270: CC2500_WriteCommand(0x3A);
  9084  1C2D  303A               	movlw	58
  9085  1C2E  319E  2634         	fcall	_CC2500_WriteCommand
  9086  1C30  0008               	return
  9087  1C31                     __end_of_RF_RxDisable:	
  9088                           
  9089                           	psect	text40
  9090  097A                     __ptext40:	
  9091 ;; *************** function _CC2500_TxData *****************
  9092 ;; Defined at:
  9093 ;;		line 32 in file "../src/CC2500_B1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;		None               void
  9100 ;; Registers used:
  9101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:        2 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    7
  9114 ;; This function calls:
  9115 ;;		_CC2500_WriteByte
  9116 ;;		_CC2500_WriteCommand
  9117 ;;		_Timeout_Counter
  9118 ;;		_set_TimeoutCleared
  9119 ;; This function is called by:
  9120 ;;		_setRF_Main
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function _CC2500_TxData
  9126  097A                     _CC2500_TxData:	
  9127                           
  9128                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9129                           ;CC2500_B1.c: 35: RC4 = 0;
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9133  097A  0020               	movlb	0	; select bank0
  9134  097B  120E               	bcf	14,4	;volatile
  9135                           
  9136                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9137  097C  307F               	movlw	127
  9138  097D  00A4               	movwf	??_CC2500_TxData
  9139  097E  0824               	movf	??_CC2500_TxData,w
  9140  097F  00FB               	movwf	_SPI0Buffer
  9141                           
  9142                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9143  0980  2984               	goto	l6705
  9144  0981                     l6703:	
  9145                           
  9146                           ;CC2500_B1.c: 38: Timeout_Counter();
  9147  0981  319D  259C  3189   	fcall	_Timeout_Counter
  9148  0984                     l6705:	
  9149  0984  0020               	movlb	0	; select bank0
  9150  0985  1D0E               	btfss	14,2	;volatile
  9151  0986  298A               	goto	l6709
  9152  0987  0021               	movlb	1	; select bank1
  9153  0988  1D2C               	btfss	(_myMain^(0+128)+12),2
  9154  0989  2981               	goto	l6703
  9155  098A                     l6709:	
  9156                           
  9157                           ;CC2500_B1.c: 39: };
  9158                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9159  098A  319B  2329  3189   	fcall	_set_TimeoutCleared
  9160                           
  9161                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9162  098D  319D  254C  3189   	fcall	_CC2500_WriteByte
  9163                           
  9164                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9165  0990  0021               	movlb	1	; select bank1
  9166  0991  0853               	movf	_Tx_Length^(0+128),w
  9167  0992  0020               	movlb	0	; select bank0
  9168  0993  00A4               	movwf	??_CC2500_TxData
  9169  0994  0824               	movf	??_CC2500_TxData,w
  9170  0995  00FB               	movwf	_SPI0Buffer
  9171                           
  9172                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9173  0996  319D  254C  3189   	fcall	_CC2500_WriteByte
  9174                           
  9175                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9176  0999  0020               	movlb	0	; select bank0
  9177  099A  01A5               	clrf	CC2500_TxData@loop_e
  9178  099B                     l6723:	
  9179  099B  0021               	movlb	1	; select bank1
  9180  099C  0853               	movf	_Tx_Length^(0+128),w
  9181  099D  0020               	movlb	0	; select bank0
  9182  099E  0225               	subwf	CC2500_TxData@loop_e,w
  9183  099F  1803               	btfsc	3,0
  9184  09A0  29B3               	goto	l255
  9185                           
  9186                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9187  09A1  0825               	movf	CC2500_TxData@loop_e,w
  9188  09A2  3E20               	addlw	_RF_Data& (0+255)
  9189  09A3  0086               	movwf	6
  9190  09A4  3001               	movlw	1	; select bank2/3
  9191  09A5  0087               	movwf	7
  9192  09A6  0801               	movf	1,w
  9193  09A7  00A4               	movwf	??_CC2500_TxData
  9194  09A8  0824               	movf	??_CC2500_TxData,w
  9195  09A9  00FB               	movwf	_SPI0Buffer
  9196                           
  9197                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9198  09AA  319D  254C  3189   	fcall	_CC2500_WriteByte
  9199  09AD  3001               	movlw	1
  9200  09AE  0020               	movlb	0	; select bank0
  9201  09AF  00A4               	movwf	??_CC2500_TxData
  9202  09B0  0824               	movf	??_CC2500_TxData,w
  9203  09B1  07A5               	addwf	CC2500_TxData@loop_e,f
  9204  09B2  299B               	goto	l6723
  9205  09B3                     l255:	
  9206                           
  9207                           ;CC2500_B1.c: 48: }
  9208                           ;CC2500_B1.c: 49: RC4 = 1;
  9209  09B3  160E               	bsf	14,4	;volatile
  9210                           
  9211                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9212  09B4  3035               	movlw	53
  9213  09B5  319E  2634  3189   	fcall	_CC2500_WriteCommand
  9214                           
  9215                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9216  09B8  29BC               	goto	l6729
  9217  09B9                     l6727:	
  9218                           
  9219                           ;CC2500_B1.c: 52: Timeout_Counter();
  9220  09B9  319D  259C  3189   	fcall	_Timeout_Counter
  9221  09BC                     l6729:	
  9222  09BC  0020               	movlb	0	; select bank0
  9223  09BD  180D               	btfsc	13,0	;volatile
  9224  09BE  29C2               	goto	l6733
  9225  09BF  0021               	movlb	1	; select bank1
  9226  09C0  1D2C               	btfss	(_myMain^(0+128)+12),2
  9227  09C1  29B9               	goto	l6727
  9228  09C2                     l6733:	
  9229                           
  9230                           ;CC2500_B1.c: 53: };
  9231                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9232  09C2  319B  2329  3189   	fcall	_set_TimeoutCleared
  9233                           
  9234                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9235  09C5  29C9               	goto	l6737
  9236  09C6                     l6735:	
  9237                           
  9238                           ;CC2500_B1.c: 57: Timeout_Counter();
  9239  09C6  319D  259C  3189   	fcall	_Timeout_Counter
  9240  09C9                     l6737:	
  9241  09C9  0020               	movlb	0	; select bank0
  9242  09CA  1C0D               	btfss	13,0	;volatile
  9243  09CB  29CF               	goto	l6741
  9244  09CC  0021               	movlb	1	; select bank1
  9245  09CD  1D2C               	btfss	(_myMain^(0+128)+12),2
  9246  09CE  29C6               	goto	l6735
  9247  09CF                     l6741:	
  9248                           
  9249                           ;CC2500_B1.c: 58: };
  9250                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9251  09CF  319B  2329  3189   	fcall	_set_TimeoutCleared
  9252                           
  9253                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9254  09D2  3036               	movlw	54
  9255  09D3  319E  2634  3189   	fcall	_CC2500_WriteCommand
  9256                           
  9257                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9258  09D6  303B               	movlw	59
  9259  09D7  319E  2634         	fcall	_CC2500_WriteCommand
  9260                           
  9261                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9262  09D9  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9263  09DA  0008               	return
  9264  09DB                     __end_of_CC2500_TxData:	
  9265                           
  9266                           	psect	text41
  9267  0B73                     __ptext41:	
  9268 ;; *************** function _CC2500_RxData *****************
  9269 ;; Defined at:
  9270 ;;		line 70 in file "../src/CC2500_B1.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;		None               void
  9277 ;; Registers used:
  9278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;Total ram usage:        2 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    7
  9291 ;; This function calls:
  9292 ;;		_CC2500_ReadByte
  9293 ;;		_CC2500_ReadStatus
  9294 ;;		_CC2500_WriteByte
  9295 ;;		_Timeout_Counter
  9296 ;;		_set_TimeoutCleared
  9297 ;; This function is called by:
  9298 ;;		_setRF_Main
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function _CC2500_RxData
  9304  0B73                     _CC2500_RxData:	
  9305                           
  9306                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9307                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9311  0B73  0020               	movlb	0	; select bank0
  9312  0B74  180D               	btfsc	13,0	;volatile
  9313  0B75  2B7A               	goto	l6755
  9314  0B76  2B83               	goto	l6761
  9315  0B77                     l6753:	
  9316                           ;CC2500_B1.c: 76: {
  9317                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9318                           
  9319                           
  9320                           ;CC2500_B1.c: 78: Timeout_Counter();
  9321  0B77  319D  259C  318B   	fcall	_Timeout_Counter
  9322  0B7A                     l6755:	
  9323  0B7A  0020               	movlb	0	; select bank0
  9324  0B7B  1C0D               	btfss	13,0	;volatile
  9325  0B7C  2B80               	goto	l6759
  9326  0B7D  0021               	movlb	1	; select bank1
  9327  0B7E  1D2C               	btfss	(_myMain^(0+128)+12),2
  9328  0B7F  2B77               	goto	l6753
  9329  0B80                     l6759:	
  9330                           
  9331                           ;CC2500_B1.c: 79: };
  9332                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9333  0B80  319B  2329  318B   	fcall	_set_TimeoutCleared
  9334  0B83                     l6761:	
  9335                           
  9336                           ;CC2500_B1.c: 81: }
  9337                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9338  0B83  303B               	movlw	59
  9339  0B84  319F  2797  318B   	fcall	_CC2500_ReadStatus
  9340                           
  9341                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9342  0B87  0021               	movlb	1	; select bank1
  9343  0B88  0856               	movf	_s_data^(0+128),w
  9344  0B89  1903               	btfsc	3,2
  9345  0B8A  0008               	return
  9346                           
  9347                           ;CC2500_B1.c: 86: RC4 = 0;
  9348  0B8B  0020               	movlb	0	; select bank0
  9349  0B8C  120E               	bcf	14,4	;volatile
  9350                           
  9351                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9352  0B8D  30FF               	movlw	255
  9353  0B8E  00A4               	movwf	??_CC2500_RxData
  9354  0B8F  0824               	movf	??_CC2500_RxData,w
  9355  0B90  00FB               	movwf	_SPI0Buffer
  9356                           
  9357                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9358  0B91  2B95               	goto	l6771
  9359  0B92                     l6769:	
  9360                           
  9361                           ;CC2500_B1.c: 89: Timeout_Counter();
  9362  0B92  319D  259C  318B   	fcall	_Timeout_Counter
  9363  0B95                     l6771:	
  9364  0B95  0020               	movlb	0	; select bank0
  9365  0B96  1D0E               	btfss	14,2	;volatile
  9366  0B97  2B9B               	goto	l6775
  9367  0B98  0021               	movlb	1	; select bank1
  9368  0B99  1D2C               	btfss	(_myMain^(0+128)+12),2
  9369  0B9A  2B92               	goto	l6769
  9370  0B9B                     l6775:	
  9371                           
  9372                           ;CC2500_B1.c: 90: };
  9373                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9374  0B9B  319B  2329  318B   	fcall	_set_TimeoutCleared
  9375                           
  9376                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9377  0B9E  319D  254C  318B   	fcall	_CC2500_WriteByte
  9378                           
  9379                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9380  0BA1  319E  261D  318B   	fcall	_CC2500_ReadByte
  9381                           
  9382                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9383  0BA4  087B               	movf	_SPI0Buffer,w
  9384  0BA5  0020               	movlb	0	; select bank0
  9385  0BA6  00A4               	movwf	??_CC2500_RxData
  9386  0BA7  0824               	movf	??_CC2500_RxData,w
  9387  0BA8  0021               	movlb	1	; select bank1
  9388  0BA9  00D1               	movwf	_Rx_Length^(0+128)
  9389                           
  9390                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9391  0BAA  0020               	movlb	0	; select bank0
  9392  0BAB  01A5               	clrf	CC2500_RxData@loop_f
  9393  0BAC                     l6791:	
  9394  0BAC  0021               	movlb	1	; select bank1
  9395  0BAD  0851               	movf	_Rx_Length^(0+128),w
  9396  0BAE  0020               	movlb	0	; select bank0
  9397  0BAF  0225               	subwf	CC2500_RxData@loop_f,w
  9398  0BB0  1803               	btfsc	3,0
  9399  0BB1  2BC4               	goto	l6793
  9400                           
  9401                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9402  0BB2  319E  261D  318B   	fcall	_CC2500_ReadByte
  9403                           
  9404                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9405  0BB5  087B               	movf	_SPI0Buffer,w
  9406  0BB6  0020               	movlb	0	; select bank0
  9407  0BB7  00A4               	movwf	??_CC2500_RxData
  9408  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9409  0BB9  3E20               	addlw	_RF_Data& (0+255)
  9410  0BBA  0086               	movwf	6
  9411  0BBB  3001               	movlw	1	; select bank2/3
  9412  0BBC  0087               	movwf	7
  9413  0BBD  0824               	movf	??_CC2500_RxData,w
  9414  0BBE  0081               	movwf	1
  9415  0BBF  3001               	movlw	1
  9416  0BC0  00A4               	movwf	??_CC2500_RxData
  9417  0BC1  0824               	movf	??_CC2500_RxData,w
  9418  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9419  0BC3  2BAC               	goto	l6791
  9420  0BC4                     l6793:	
  9421                           
  9422                           ;CC2500_B1.c: 99: }
  9423                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9424  0BC4  319E  261D  318B   	fcall	_CC2500_ReadByte
  9425                           
  9426                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9427  0BC7  087B               	movf	_SPI0Buffer,w
  9428  0BC8  0020               	movlb	0	; select bank0
  9429  0BC9  00A4               	movwf	??_CC2500_RxData
  9430  0BCA  0824               	movf	??_CC2500_RxData,w
  9431  0BCB  0021               	movlb	1	; select bank1
  9432  0BCC  00D0               	movwf	_RSSI^(0+128)
  9433                           
  9434                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9435  0BCD  319E  261D         	fcall	_CC2500_ReadByte
  9436                           
  9437                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9438  0BCF  087B               	movf	_SPI0Buffer,w
  9439  0BD0  0020               	movlb	0	; select bank0
  9440  0BD1  00A4               	movwf	??_CC2500_RxData
  9441  0BD2  0824               	movf	??_CC2500_RxData,w
  9442  0BD3  0021               	movlb	1	; select bank1
  9443  0BD4  00CC               	movwf	_CRC^(0+128)
  9444                           
  9445                           ;CC2500_B1.c: 104: RC4 = 1;
  9446  0BD5  0020               	movlb	0	; select bank0
  9447  0BD6  160E               	bsf	14,4	;volatile
  9448                           
  9449                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9450  0BD7  0021               	movlb	1	; select bank1
  9451  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9452                           
  9453                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9454  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9455                           
  9456                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9457  0BDA  11BB               	bcf	_RF1^(0+128),3
  9458                           
  9459                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9460  0BDB  14BB               	bsf	_RF1^(0+128),1
  9461  0BDC  0008               	return
  9462  0BDD                     __end_of_CC2500_RxData:	
  9463                           
  9464                           	psect	text42
  9465  1F97                     __ptext42:	
  9466 ;; *************** function _CC2500_ReadStatus *****************
  9467 ;; Defined at:
  9468 ;;		line 301 in file "../src/CC2500_B1.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  status_addr     1    wreg     unsigned char 
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9473 ;; Return value:  Size  Location     Type
  9474 ;;		None               void
  9475 ;; Registers used:
  9476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;Total ram usage:        2 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    6
  9489 ;; This function calls:
  9490 ;;		_CC2500_ReadByte
  9491 ;;		_CC2500_WriteByte
  9492 ;;		_Timeout_Counter
  9493 ;;		_set_TimeoutCleared
  9494 ;; This function is called by:
  9495 ;;		_CC2500_RxData
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           
  9500                           ;psect for function _CC2500_ReadStatus
  9501  1F97                     _CC2500_ReadStatus:	
  9502                           
  9503                           ;incstack = 0
  9504                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9505                           ;CC2500_ReadStatus@status_addr stored from wreg
  9506  1F97  0020               	movlb	0	; select bank0
  9507  1F98  00A3               	movwf	CC2500_ReadStatus@status_addr
  9508                           
  9509                           ;CC2500_B1.c: 302: RC4 = 0;
  9510  1F99  120E               	bcf	14,4	;volatile
  9511                           
  9512                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9513  1F9A  0823               	movf	CC2500_ReadStatus@status_addr,w
  9514  1F9B  3EC0               	addlw	192
  9515  1F9C  00A2               	movwf	??_CC2500_ReadStatus
  9516  1F9D  0822               	movf	??_CC2500_ReadStatus,w
  9517  1F9E  00FB               	movwf	_SPI0Buffer
  9518                           
  9519                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9520  1F9F  2FA3               	goto	l6535
  9521  1FA0                     l6533:	
  9522                           
  9523                           ;CC2500_B1.c: 306: Timeout_Counter();
  9524  1FA0  319D  259C  319F   	fcall	_Timeout_Counter
  9525  1FA3                     l6535:	
  9526  1FA3  0020               	movlb	0	; select bank0
  9527  1FA4  1D0E               	btfss	14,2	;volatile
  9528  1FA5  2FA9               	goto	l6539
  9529  1FA6  0021               	movlb	1	; select bank1
  9530  1FA7  1D2C               	btfss	(_myMain^(0+128)+12),2
  9531  1FA8  2FA0               	goto	l6533
  9532  1FA9                     l6539:	
  9533                           
  9534                           ;CC2500_B1.c: 307: };
  9535                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9536  1FA9  319B  2329  319F   	fcall	_set_TimeoutCleared
  9537                           
  9538                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9539  1FAC  319D  254C  319F   	fcall	_CC2500_WriteByte
  9540                           
  9541                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9542  1FAF  319E  261D         	fcall	_CC2500_ReadByte
  9543                           
  9544                           ;CC2500_B1.c: 312: RC4 = 1;
  9545  1FB1  0020               	movlb	0	; select bank0
  9546  1FB2  160E               	bsf	14,4	;volatile
  9547                           
  9548                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9549  1FB3  087B               	movf	_SPI0Buffer,w
  9550  1FB4  00A2               	movwf	??_CC2500_ReadStatus
  9551  1FB5  0822               	movf	??_CC2500_ReadStatus,w
  9552  1FB6  0021               	movlb	1	; select bank1
  9553  1FB7  00D6               	movwf	_s_data^(0+128)
  9554  1FB8  0008               	return
  9555  1FB9                     __end_of_CC2500_ReadStatus:	
  9556                           
  9557                           	psect	text43
  9558  1E1D                     __ptext43:	
  9559 ;; *************** function _CC2500_ReadByte *****************
  9560 ;; Defined at:
  9561 ;;		line 235 in file "../src/CC2500_B1.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;		None               void
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;Total ram usage:        2 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    5
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_CC2500_RxData
  9586 ;;		_CC2500_ReadStatus
  9587 ;;		_CC2500_ReadREG
  9588 ;; This function uses a non-reentrant model
  9589 ;;
  9590                           
  9591                           
  9592                           ;psect for function _CC2500_ReadByte
  9593  1E1D                     _CC2500_ReadByte:	
  9594                           
  9595                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9596                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9600  1E1D  0020               	movlb	0	; select bank0
  9601  1E1E  01A1               	clrf	CC2500_ReadByte@loop_b
  9602  1E1F                     L6:	
  9603  1E1F  3008               	movlw	8
  9604  1E20  0221               	subwf	CC2500_ReadByte@loop_b,w
  9605  1E21  1803               	btfsc	3,0
  9606  1E22  0008               	return
  9607                           
  9608                           ;CC2500_B1.c: 238: RC1 = 1;
  9609  1E23  148E               	bsf	14,1	;volatile
  9610                           
  9611                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9612  1E24  1003               	clrc
  9613  1E25  0DFB               	rlf	_SPI0Buffer,f
  9614                           
  9615                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9616  1E26  1D0E               	btfss	14,2	;volatile
  9617  1E27  2E2A               	goto	l6435
  9618                           
  9619                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9620  1E28  147B               	bsf	_SPI0Buffer,0
  9621  1E29  2E2E               	goto	l6437
  9622  1E2A                     l6435:	
  9623                           
  9624                           ;CC2500_B1.c: 242: else
  9625                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9626  1E2A  30FE               	movlw	254
  9627  1E2B  00A0               	movwf	??_CC2500_ReadByte
  9628  1E2C  0820               	movf	??_CC2500_ReadByte,w
  9629  1E2D  05FB               	andwf	_SPI0Buffer,f
  9630  1E2E                     l6437:	
  9631                           
  9632                           ;CC2500_B1.c: 244: RC1 = 0;
  9633  1E2E  108E               	bcf	14,1	;volatile
  9634  1E2F  3001               	movlw	1
  9635  1E30  00A0               	movwf	??_CC2500_ReadByte
  9636  1E31  0820               	movf	??_CC2500_ReadByte,w
  9637  1E32  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9638  1E33  2E1F               	goto	L6
  9639  1E34                     __end_of_CC2500_ReadByte:	
  9640                           
  9641                           	psect	text44
  9642  1B10                     __ptext44:	
  9643 ;; *************** function _RF_Initialization *****************
  9644 ;; Defined at:
  9645 ;;		line 9 in file "../src/RF_Control_B1.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;		None
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;		None
  9650 ;; Return value:  Size  Location     Type
  9651 ;;		None               void
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0, pclath, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        0 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    6
  9666 ;; This function calls:
  9667 ;;		_setRF_Initialization
  9668 ;; This function is called by:
  9669 ;;		_main
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _RF_Initialization
  9675  1B10                     _RF_Initialization:	
  9676                           
  9677                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9678                           
  9679                           ;incstack = 0
  9680                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9681  1B10  319B  2399         	fcall	_setRF_Initialization
  9682  1B12  0008               	return
  9683  1B13                     __end_of_RF_Initialization:	
  9684                           
  9685                           	psect	text45
  9686  1B99                     __ptext45:	
  9687 ;; *************** function _setRF_Initialization *****************
  9688 ;; Defined at:
  9689 ;;		line 43 in file "../src/RF_Control_B1.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;		None
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;		None
  9694 ;; Return value:  Size  Location     Type
  9695 ;;		None               void
  9696 ;; Registers used:
  9697 ;;		wreg
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;Total ram usage:        1 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    5
  9710 ;; This function calls:
  9711 ;;		Nothing
  9712 ;; This function is called by:
  9713 ;;		_RF_Initialization
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           
  9718                           ;psect for function _setRF_Initialization
  9719  1B99                     _setRF_Initialization:	
  9720                           
  9721                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9722                           
  9723                           ;incstack = 0
  9724                           ; Regs used in _setRF_Initialization: [wreg]
  9725  1B99  3015               	movlw	21
  9726  1B9A  0020               	movlb	0	; select bank0
  9727  1B9B  00A0               	movwf	??_setRF_Initialization
  9728  1B9C  0820               	movf	??_setRF_Initialization,w
  9729  1B9D  0021               	movlb	1	; select bank1
  9730  1B9E  00D3               	movwf	_Tx_Length^(0+128)
  9731                           
  9732                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9733  1B9F  300A               	movlw	10
  9734  1BA0  00C2               	movwf	(_RF1^(0+128)+7)
  9735  1BA1  3000               	movlw	0
  9736  1BA2  00C3               	movwf	(_RF1^(0+128)+8)
  9737  1BA3  0008               	return
  9738  1BA4                     __end_of_setRF_Initialization:	
  9739                           
  9740                           	psect	text46
  9741  1CC8                     __ptext46:	
  9742 ;; *************** function _Mcu_Initialization *****************
  9743 ;; Defined at:
  9744 ;;		line 30 in file "../src/MCU_B1.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;		None               void
  9751 ;; Registers used:
  9752 ;;		wreg, status,2, status,0, pclath, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:        0 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    6
  9765 ;; This function calls:
  9766 ;;		_ADC_Set
  9767 ;;		_Fosc_Set
  9768 ;;		_IOC_Set
  9769 ;;		_IO_Set
  9770 ;;		_TMR1_Set
  9771 ;;		_WDT_Set
  9772 ;; This function is called by:
  9773 ;;		_main
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           
  9778                           ;psect for function _Mcu_Initialization
  9779  1CC8                     _Mcu_Initialization:	
  9780                           
  9781                           ;MCU_B1.c: 32: Fosc_Set();
  9782                           
  9783                           ;incstack = 0
  9784                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9785  1CC8  319B  2325  319C   	fcall	_Fosc_Set
  9786                           
  9787                           ;MCU_B1.c: 34: IO_Set();
  9788  1CCB  319E  264D  319C   	fcall	_IO_Set
  9789                           
  9790                           ;MCU_B1.c: 36: ;;
  9791                           ;MCU_B1.c: 38: TMR1_Set();
  9792  1CCE  319B  23EC  319C   	fcall	_TMR1_Set
  9793                           
  9794                           ;MCU_B1.c: 40: ADC_Set();
  9795  1CD1  319B  2345  319C   	fcall	_ADC_Set
  9796                           
  9797                           ;MCU_B1.c: 42: ;;
  9798                           ;MCU_B1.c: 44: ;;
  9799                           ;MCU_B1.c: 46: IOC_Set();
  9800  1CD4  319B  23E0  319C   	fcall	_IOC_Set
  9801                           
  9802                           ;MCU_B1.c: 48: ;;
  9803                           ;MCU_B1.c: 50: ;;
  9804                           ;MCU_B1.c: 52: WDT_Set();
  9805  1CD7  319B  238E         	fcall	_WDT_Set
  9806  1CD9  0008               	return
  9807  1CDA                     __end_of_Mcu_Initialization:	
  9808                           
  9809                           	psect	text47
  9810  1B8E                     __ptext47:	
  9811 ;; *************** function _WDT_Set *****************
  9812 ;; Defined at:
  9813 ;;		line 1030 in file "../src/MCU_B1.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;		None
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;		None
  9818 ;; Return value:  Size  Location     Type
  9819 ;;		None               void
  9820 ;; Registers used:
  9821 ;;		wreg
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;Total ram usage:        1 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    5
  9834 ;; This function calls:
  9835 ;;		Nothing
  9836 ;; This function is called by:
  9837 ;;		_Mcu_Initialization
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function _WDT_Set
  9843  1B8E                     _WDT_Set:	
  9844                           
  9845                           ;MCU_B1.c: 1037: WDTCON = 0b00010111;;
  9846                           
  9847                           ;incstack = 0
  9848                           ; Regs used in _WDT_Set: [wreg]
  9849  1B8E  3017               	movlw	23
  9850  1B8F  0021               	movlb	1	; select bank1
  9851  1B90  0097               	movwf	23	;volatile
  9852                           
  9853                           ;MCU_B1.c: 1039: WDT.Enable = 1;
  9854  1B91  144A               	bsf	_WDT^(0+128),0
  9855                           
  9856                           ;MCU_B1.c: 1040: WDT.Timer = 10;
  9857  1B92  300A               	movlw	10
  9858  1B93  0020               	movlb	0	; select bank0
  9859  1B94  00A0               	movwf	??_WDT_Set
  9860  1B95  0820               	movf	??_WDT_Set,w
  9861  1B96  0021               	movlb	1	; select bank1
  9862  1B97  00CB               	movwf	(_WDT^(0+128)+1)
  9863  1B98  0008               	return
  9864  1B99                     __end_of_WDT_Set:	
  9865                           
  9866                           	psect	text48
  9867  1BEC                     __ptext48:	
  9868 ;; *************** function _TMR1_Set *****************
  9869 ;; Defined at:
  9870 ;;		line 199 in file "../src/MCU_B1.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;		None               void
  9877 ;; Registers used:
  9878 ;;		wreg
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    5
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_Mcu_Initialization
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           
  9899                           ;psect for function _TMR1_Set
  9900  1BEC                     _TMR1_Set:	
  9901                           
  9902                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _TMR1_Set: [wreg]
  9906  1BEC  3041               	movlw	65
  9907  1BED  0020               	movlb	0	; select bank0
  9908  1BEE  0098               	movwf	24	;volatile
  9909                           
  9910                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9911  1BEF  30FA               	movlw	250
  9912  1BF0  0097               	movwf	23	;volatile
  9913                           
  9914                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9915  1BF1  3038               	movlw	56
  9916  1BF2  0096               	movwf	22	;volatile
  9917                           
  9918                           ;MCU_B1.c: 203: TMR1IE = 1;
  9919  1BF3  0021               	movlb	1	; select bank1
  9920  1BF4  1411               	bsf	17,0	;volatile
  9921                           
  9922                           ;MCU_B1.c: 204: PEIE = 1;
  9923  1BF5  170B               	bsf	11,6	;volatile
  9924                           
  9925                           ;MCU_B1.c: 205: GIE = 1;
  9926  1BF6  178B               	bsf	11,7	;volatile
  9927  1BF7  0008               	return
  9928  1BF8                     __end_of_TMR1_Set:	
  9929                           
  9930                           	psect	text49
  9931  1E4D                     __ptext49:	
  9932 ;; *************** function _IO_Set *****************
  9933 ;; Defined at:
  9934 ;;		line 60 in file "../src/MCU_B1.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg, status,2
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;Total ram usage:        0 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    5
  9955 ;; This function calls:
  9956 ;;		Nothing
  9957 ;; This function is called by:
  9958 ;;		_Mcu_Initialization
  9959 ;; This function uses a non-reentrant model
  9960 ;;
  9961                           
  9962                           
  9963                           ;psect for function _IO_Set
  9964  1E4D                     _IO_Set:	
  9965                           
  9966                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9967                           
  9968                           ;incstack = 0
  9969                           ; Regs used in _IO_Set: [wreg+status,2]
  9970  1E4D  3077               	movlw	119
  9971  1E4E  0021               	movlb	1	; select bank1
  9972  1E4F  008C               	movwf	12	;volatile
  9973                           
  9974                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9975  1E50  3007               	movlw	7
  9976  1E51  008D               	movwf	13	;volatile
  9977                           
  9978                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9979  1E52  300C               	movlw	12
  9980  1E53  008E               	movwf	14	;volatile
  9981                           
  9982                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9983  1E54  0022               	movlb	2	; select bank2
  9984  1E55  018C               	clrf	12	;volatile
  9985                           
  9986                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9987  1E56  3002               	movlw	2
  9988  1E57  008D               	movwf	13	;volatile
  9989                           
  9990                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9991  1E58  018E               	clrf	14	;volatile
  9992                           
  9993                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9994  1E59  3022               	movlw	34
  9995  1E5A  0023               	movlb	3	; select bank3
  9996  1E5B  008C               	movwf	12	;volatile
  9997                           
  9998                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9999  1E5C  018D               	clrf	13	;volatile
 10000                           
 10001                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10002  1E5D  018E               	clrf	14	;volatile
 10003                           
 10004                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10005  1E5E  3077               	movlw	119
 10006  1E5F  0020               	movlb	0	; select bank0
 10007  1E60  008C               	movwf	12	;volatile
 10008                           
 10009                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10010  1E61  3007               	movlw	7
 10011  1E62  008D               	movwf	13	;volatile
 10012                           
 10013                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10014  1E63  300C               	movlw	12
 10015  1E64  008E               	movwf	14	;volatile
 10016  1E65  0008               	return
 10017  1E66                     __end_of_IO_Set:	
 10018                           
 10019                           	psect	text50
 10020  1BE0                     __ptext50:	
 10021 ;; *************** function _IOC_Set *****************
 10022 ;; Defined at:
 10023 ;;		line 366 in file "../src/MCU_B1.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;		None
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;		None
 10028 ;; Return value:  Size  Location     Type
 10029 ;;		None               void
 10030 ;; Registers used:
 10031 ;;		wreg, status,2
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;Total ram usage:        0 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    5
 10044 ;; This function calls:
 10045 ;;		Nothing
 10046 ;; This function is called by:
 10047 ;;		_Mcu_Initialization
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           
 10052                           ;psect for function _IOC_Set
 10053  1BE0                     _IOC_Set:	
 10054                           
 10055                           ;MCU_B1.c: 367: WPUB2 = 0;
 10056                           
 10057                           ;incstack = 0
 10058                           ; Regs used in _IOC_Set: [wreg+status,2]
 10059  1BE0  0024               	movlb	4	; select bank4
 10060  1BE1  110D               	bcf	13,2	;volatile
 10061                           
 10062                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
 10063  1BE2  0027               	movlb	7	; select bank7
 10064  1BE3  0194               	clrf	20	;volatile
 10065                           
 10066                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
 10067  1BE4  3004               	movlw	4
 10068  1BE5  0095               	movwf	21	;volatile
 10069                           
 10070                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10071  1BE6  0196               	clrf	22	;volatile
 10072                           
 10073                           ;MCU_B1.c: 394: IOCIE = 1;
 10074  1BE7  158B               	bsf	11,3	;volatile
 10075                           
 10076                           ;MCU_B1.c: 395: IOCIF = 0;
 10077  1BE8  100B               	bcf	11,0	;volatile
 10078                           
 10079                           ;MCU_B1.c: 396: PEIE = 1;
 10080  1BE9  170B               	bsf	11,6	;volatile
 10081                           
 10082                           ;MCU_B1.c: 397: GIE = 1;
 10083  1BEA  178B               	bsf	11,7	;volatile
 10084  1BEB  0008               	return
 10085  1BEC                     __end_of_IOC_Set:	
 10086                           
 10087                           	psect	text51
 10088  1B25                     __ptext51:	
 10089 ;; *************** function _Fosc_Set *****************
 10090 ;; Defined at:
 10091 ;;		line 56 in file "../src/MCU_B1.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;		None
 10096 ;; Return value:  Size  Location     Type
 10097 ;;		None               void
 10098 ;; Registers used:
 10099 ;;		wreg
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;Total ram usage:        0 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    5
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_Mcu_Initialization
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _Fosc_Set
 10121  1B25                     _Fosc_Set:	
 10122                           
 10123                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _Fosc_Set: [wreg]
 10127  1B25  3078               	movlw	120
 10128  1B26  0021               	movlb	1	; select bank1
 10129  1B27  0099               	movwf	25	;volatile
 10130  1B28  0008               	return
 10131  1B29                     __end_of_Fosc_Set:	
 10132                           
 10133                           	psect	text52
 10134  1B45                     __ptext52:	
 10135 ;; *************** function _ADC_Set *****************
 10136 ;; Defined at:
 10137 ;;		line 420 in file "../src/MCU_B1.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        0 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    5
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		_Mcu_Initialization
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _ADC_Set
 10167  1B45                     _ADC_Set:	
 10168                           
 10169                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10170                           
 10171                           ;incstack = 0
 10172                           ; Regs used in _ADC_Set: [wreg]
 10173  1B45  30F3               	movlw	243
 10174  1B46  0021               	movlb	1	; select bank1
 10175  1B47  009E               	movwf	30	;volatile
 10176                           
 10177                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10178  1B48  30C1               	movlw	193
 10179  1B49  0022               	movlb	2	; select bank2
 10180  1B4A  0097               	movwf	23	;volatile
 10181  1B4B  0008               	return
 10182  1B4C                     __end_of_ADC_Set:	
 10183                           
 10184                           	psect	text53
 10185  0306                     __ptext53:	
 10186 ;; *************** function _Load_Main *****************
 10187 ;; Defined at:
 10188 ;;		line 39 in file "../src/OverLoad_B1.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;		None
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;  i               1   15[BANK0 ] unsigned char 
 10193 ;;  error           1   14[BANK0 ] unsigned char 
 10194 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10195 ;;  j               1   11[BANK0 ] unsigned char 
 10196 ;; Return value:  Size  Location     Type
 10197 ;;		None               void
 10198 ;; Registers used:
 10199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        7 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    8
 10212 ;; This function calls:
 10213 ;;		_getAll_DimmerLights_AdjGO
 10214 ;;		_getMain_All_Error_Status
 10215 ;;		_getMain_LightsStatus
 10216 ;;		_getMain_Lights_Count
 10217 ;;		_getMain_LoadOK
 10218 ;;		_setLoad_AH_AL_Restore
 10219 ;; This function is called by:
 10220 ;;		_main
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           
 10225                           ;psect for function _Load_Main
 10226  0306                     _Load_Main:	
 10227                           
 10228                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10229                           
 10230                           ;incstack = 0
 10231                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10232  0306  0020               	movlb	0	; select bank0
 10233  0307  01AF               	clrf	Load_Main@i
 10234  0308  01AB               	clrf	Load_Main@j
 10235  0309  3000               	movlw	0
 10236  030A  3191  21DC  3183   	fcall	_getMain_All_Error_Status
 10237  030D  0020               	movlb	0	; select bank0
 10238  030E  00A9               	movwf	??_Load_Main
 10239  030F  0829               	movf	??_Load_Main,w
 10240  0310  00AE               	movwf	Load_Main@error
 10241  0311  01AC               	clrf	Load_Main@adjgo
 10242                           
 10243                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10244  0312  0022               	movlb	2	; select bank2
 10245  0313  1C43               	btfss	_Load^(0+256),0
 10246  0314  2C44               	goto	l1458
 10247                           
 10248                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10249  0315  319C  2471  3183   	fcall	_getAll_DimmerLights_AdjGO
 10250  0318  0020               	movlb	0	; select bank0
 10251  0319  00A9               	movwf	??_Load_Main
 10252  031A  0829               	movf	??_Load_Main,w
 10253  031B  00AC               	movwf	Load_Main@adjgo
 10254                           
 10255                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10256  031C  01AD               	clrf	_Load_Main$3859
 10257  031D  3191  214E  3183   	fcall	_getMain_LightsStatus
 10258  0320  3A01               	xorlw	1
 10259  0321  1D03               	skipz
 10260  0322  2B2C               	goto	l8075
 10261  0323  0020               	movlb	0	; select bank0
 10262  0324  08AE               	movf	Load_Main@error,f
 10263  0325  1D03               	skipz
 10264  0326  2B2C               	goto	l8075
 10265  0327  08AC               	movf	Load_Main@adjgo,f
 10266  0328  1D03               	skipz
 10267  0329  2B2C               	goto	l8075
 10268  032A  01AD               	clrf	_Load_Main$3859
 10269  032B  0AAD               	incf	_Load_Main$3859,f
 10270  032C                     l8075:	
 10271  032C  0020               	movlb	0	; select bank0
 10272  032D  082D               	movf	_Load_Main$3859,w
 10273  032E  0022               	movlb	2	; select bank2
 10274  032F  10C3               	bcf	_Load^(0+256),1
 10275  0330  1D03               	skipz
 10276  0331  14C3               	bsf	_Load^(0+256),1
 10277                           
 10278                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10279  0332  319C  2405  3183   	fcall	_getMain_LoadOK
 10280  0335  3A01               	xorlw	1
 10281  0336  1D03               	skipz
 10282  0337  2B3D               	goto	l1461
 10283  0338  0022               	movlb	2	; select bank2
 10284  0339  19C3               	btfsc	_Load^(0+256),3
 10285  033A  2B3D               	goto	l1461
 10286                           
 10287                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10288  033B  15C3               	bsf	_Load^(0+256),3
 10289                           
 10290                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10291  033C  13C3               	bcf	_Load^(0+256),7
 10292  033D                     l1461:	
 10293                           
 10294                           ;OverLoad_B1.c: 51: }
 10295                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10296  033D  0022               	movlb	2	; select bank2
 10297  033E  1CC3               	btfss	_Load^(0+256),1
 10298  033F  2C14               	goto	l1462
 10299                           
 10300                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10301  0340  1543               	bsf	_Load^(0+256),2
 10302                           
 10303                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10304  0341  1E43               	btfss	_Load^(0+256),4
 10305  0342  2C12               	goto	l1463
 10306                           
 10307                           ;OverLoad_B1.c: 58: Load.Time++;
 10308  0343  3001               	movlw	1
 10309  0344  07C4               	addwf	(_Load^(0+256)+1),f
 10310  0345  3000               	movlw	0
 10311  0346  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
 10312                           
 10313                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10314  0347  3000               	movlw	0
 10315  0348  0245               	subwf	((_Load+1)^(0+256)+1),w
 10316  0349  3005               	movlw	5
 10317  034A  1903               	skipnz
 10318  034B  0244               	subwf	(_Load^(0+256)+1),w
 10319  034C  1C03               	skipc
 10320  034D  0008               	return
 10321                           
 10322                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10323  034E  01C4               	clrf	(_Load^(0+256)+1)
 10324  034F  01C5               	clrf	((_Load+1)^(0+256)+1)
 10325                           
 10326                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10327  0350  1243               	bcf	_Load^(0+256),4
 10328                           
 10329                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10330  0351  0020               	movlb	0	; select bank0
 10331  0352  01AF               	clrf	Load_Main@i
 10332  0353  3004               	movlw	4
 10333  0354  022F               	subwf	Load_Main@i,w
 10334  0355  1803               	btfsc	3,0
 10335  0356  2B81               	goto	l8101
 10336  0357                     l8095:	
 10337                           
 10338                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10339  0357  352F               	lslf	Load_Main@i,w
 10340  0358  3E4E               	addlw	(_Load+11)& (0+255)
 10341  0359  0086               	movwf	6
 10342  035A  3001               	movlw	1	; select bank2/3
 10343  035B  0087               	movwf	7
 10344  035C  3F40               	moviw [0]fsr1
 10345  035D  00A9               	movwf	??_Load_Main
 10346  035E  3F41               	moviw [1]fsr1
 10347  035F  00AA               	movwf	??_Load_Main+1
 10348  0360  0829               	movf	??_Load_Main,w
 10349  0361  0022               	movlb	2	; select bank2
 10350  0362  07C8               	addwf	(_Load^(0+256)+5),f
 10351  0363  0020               	movlb	0	; select bank0
 10352  0364  082A               	movf	??_Load_Main+1,w
 10353  0365  0022               	movlb	2	; select bank2
 10354  0366  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
 10355                           
 10356                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10357  0367  0020               	movlb	0	; select bank0
 10358  0368  352F               	lslf	Load_Main@i,w
 10359  0369  3E58               	addlw	(_Load+21)& (0+255)
 10360  036A  0086               	movwf	6
 10361  036B  3001               	movlw	1	; select bank2/3
 10362  036C  0087               	movwf	7
 10363  036D  3F40               	moviw [0]fsr1
 10364  036E  00A9               	movwf	??_Load_Main
 10365  036F  3F41               	moviw [1]fsr1
 10366  0370  00AA               	movwf	??_Load_Main+1
 10367  0371  0829               	movf	??_Load_Main,w
 10368  0372  0022               	movlb	2	; select bank2
 10369  0373  07CA               	addwf	(_Load^(0+256)+7),f
 10370  0374  0020               	movlb	0	; select bank0
 10371  0375  082A               	movf	??_Load_Main+1,w
 10372  0376  0022               	movlb	2	; select bank2
 10373  0377  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
 10374  0378  3001               	movlw	1
 10375  0379  0020               	movlb	0	; select bank0
 10376  037A  00A9               	movwf	??_Load_Main
 10377  037B  0829               	movf	??_Load_Main,w
 10378  037C  07AF               	addwf	Load_Main@i,f
 10379  037D  3004               	movlw	4
 10380  037E  022F               	subwf	Load_Main@i,w
 10381  037F  1C03               	skipc
 10382  0380  2B57               	goto	l8095
 10383  0381                     l8101:	
 10384                           
 10385                           ;OverLoad_B1.c: 66: }
 10386                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10387  0381  3002               	movlw	2
 10388  0382  0022               	movlb	2	; select bank2
 10389  0383                     u8095:	
 10390  0383  36C9               	lsrf	((_Load+1)^(0+256)+5),f
 10391  0384  0CC8               	rrf	(_Load^(0+256)+5),f
 10392  0385  0B89               	decfsz	9,f
 10393  0386  2B83               	goto	u8095
 10394                           
 10395                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10396  0387  3002               	movlw	2
 10397  0388                     u8105:	
 10398  0388  36CB               	lsrf	((_Load+1)^(0+256)+7),f
 10399  0389  0CCA               	rrf	(_Load^(0+256)+7),f
 10400  038A  0B89               	decfsz	9,f
 10401  038B  2B88               	goto	u8105
 10402                           
 10403                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10404  038C  319E  269B  3183   	fcall	_setLoad_AH_AL_Restore
 10405                           
 10406                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10407  038F  0022               	movlb	2	; select bank2
 10408  0390  0849               	movf	((_Load+1)^(0+256)+5),w
 10409  0391  024B               	subwf	((_Load+1)^(0+256)+7),w
 10410  0392  1D03               	skipz
 10411  0393  2B96               	goto	u8115
 10412  0394  0848               	movf	(_Load^(0+256)+5),w
 10413  0395  024A               	subwf	(_Load^(0+256)+7),w
 10414  0396                     u8115:	
 10415  0396  1803               	skipnc
 10416  0397  0008               	return
 10417                           
 10418                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10419  0398  3005               	movlw	5
 10420  0399  3E43               	addlw	_Load& (0+255)
 10421  039A  0086               	movwf	6
 10422  039B  3001               	movlw	1	; select bank2/3
 10423  039C  0087               	movwf	7
 10424  039D  094A               	comf	(_Load^(0+256)+7),w
 10425  039E  0020               	movlb	0	; select bank0
 10426  039F  00A9               	movwf	??_Load_Main
 10427  03A0  0022               	movlb	2	; select bank2
 10428  03A1  094B               	comf	((_Load+1)^(0+256)+7),w
 10429  03A2  0020               	movlb	0	; select bank0
 10430  03A3  00AA               	movwf	??_Load_Main+1
 10431  03A4  0AA9               	incf	??_Load_Main,f
 10432  03A5  1903               	skipnz
 10433  03A6  0AAA               	incf	??_Load_Main+1,f
 10434  03A7  3F40               	moviw [0]fsr1
 10435  03A8  0729               	addwf	??_Load_Main,w
 10436  03A9  0022               	movlb	2	; select bank2
 10437  03AA  00E2               	movwf	(_Load^(0+256)+31)
 10438  03AB  3F41               	moviw [1]fsr1
 10439  03AC  0020               	movlb	0	; select bank0
 10440  03AD  3D2A               	addwfc	??_Load_Main+1,w
 10441  03AE  0022               	movlb	2	; select bank2
 10442  03AF  00E3               	movwf	(_Load^(0+256)+32)
 10443                           
 10444                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10445  03B0  01C8               	clrf	(_Load^(0+256)+5)
 10446  03B1  01C9               	clrf	((_Load+1)^(0+256)+5)
 10447                           
 10448                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10449  03B2  01CA               	clrf	(_Load^(0+256)+7)
 10450  03B3  01CB               	clrf	((_Load+1)^(0+256)+7)
 10451                           
 10452                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10453  03B4  319D  25F0  3183   	fcall	_getMain_Lights_Count
 10454  03B7  0020               	movlb	0	; select bank0
 10455  03B8  00A9               	movwf	??_Load_Main
 10456  03B9  0829               	movf	??_Load_Main,w
 10457  03BA  0022               	movlb	2	; select bank2
 10458  03BB  00EE               	movwf	(_Load^(0+256)+43)
 10459                           
 10460                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10461  03BC  1DC3               	btfss	_Load^(0+256),3
 10462  03BD  2BE3               	goto	l8133
 10463                           
 10464                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10465  03BE  3002               	movlw	2
 10466  03BF  026C               	subwf	(_Load^(0+256)+41),w
 10467  03C0  1803               	skipnc
 10468  03C1  2BE3               	goto	l8133
 10469                           
 10470                           ;OverLoad_B1.c: 79: Load.Count++;
 10471  03C2  3001               	movlw	1
 10472  03C3  0020               	movlb	0	; select bank0
 10473  03C4  00A9               	movwf	??_Load_Main
 10474  03C5  0829               	movf	??_Load_Main,w
 10475  03C6  0022               	movlb	2	; select bank2
 10476  03C7  07EC               	addwf	(_Load^(0+256)+41),f
 10477                           
 10478                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10479  03C8  086C               	movf	(_Load^(0+256)+41),w
 10480  03C9  3A01               	xorlw	1
 10481  03CA  1D03               	skipz
 10482  03CB  2BD0               	goto	l8125
 10483                           
 10484                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*50);
 10485  03CC  30E8               	movlw	232
 10486  03CD  00E8               	movwf	(_Load^(0+256)+37)
 10487  03CE  3003               	movlw	3
 10488  03CF  2BDB               	goto	L7
 10489  03D0                     l8125:	
 10490                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10491                           
 10492  03D0  086C               	movf	(_Load^(0+256)+41),w
 10493  03D1  3A02               	xorlw	2
 10494  03D2  1D03               	skipz
 10495  03D3  2BE3               	goto	l8133
 10496                           
 10497                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10498  03D4  086E               	movf	(_Load^(0+256)+43),w
 10499  03D5  3A01               	xorlw	1
 10500  03D6  1D03               	skipz
 10501  03D7  2BDD               	goto	l8131
 10502                           
 10503                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.1*50);
 10504  03D8  3037               	movlw	55
 10505  03D9  00E8               	movwf	(_Load^(0+256)+37)
 10506  03DA  3000               	movlw	0
 10507  03DB                     L7:	
 10508  03DB  00E9               	movwf	(_Load^(0+256)+38)
 10509                           
 10510                           ;OverLoad_B1.c: 85: } else {
 10511  03DC  2BE3               	goto	l8133
 10512  03DD                     l8131:	
 10513                           
 10514                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10515  03DD  084C               	movf	(_Load^(0+256)+9),w
 10516  03DE  3E37               	addlw	55
 10517  03DF  00E8               	movwf	(_Load^(0+256)+37)
 10518  03E0  3000               	movlw	0
 10519  03E1  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10520  03E2  00E9               	movwf	((_Load+1)^(0+256)+37)
 10521  03E3                     l8133:	
 10522                           
 10523                           ;OverLoad_B1.c: 87: }
 10524                           ;OverLoad_B1.c: 88: }
 10525                           ;OverLoad_B1.c: 89: }
 10526                           ;OverLoad_B1.c: 90: }
 10527                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10528  03E3  0869               	movf	((_Load+1)^(0+256)+37),w
 10529  03E4  0263               	subwf	((_Load+1)^(0+256)+31),w
 10530  03E5  1D03               	skipz
 10531  03E6  2BE9               	goto	u8175
 10532  03E7  0868               	movf	(_Load^(0+256)+37),w
 10533  03E8  0262               	subwf	(_Load^(0+256)+31),w
 10534  03E9                     u8175:	
 10535  03E9  1C03               	skipc
 10536  03EA  2BF8               	goto	l8143
 10537                           
 10538                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10539  03EB  3001               	movlw	1
 10540  03EC  0020               	movlb	0	; select bank0
 10541  03ED  00A9               	movwf	??_Load_Main
 10542  03EE  0829               	movf	??_Load_Main,w
 10543  03EF  0022               	movlb	2	; select bank2
 10544  03F0  07ED               	addwf	(_Load^(0+256)+42),f
 10545                           
 10546                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10547  03F1  3003               	movlw	3
 10548  03F2  026D               	subwf	(_Load^(0+256)+42),w
 10549  03F3  1C03               	skipc
 10550  03F4  0008               	return
 10551                           
 10552                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10553  03F5  01ED               	clrf	(_Load^(0+256)+42)
 10554                           
 10555                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10556  03F6  16C3               	bsf	_Load^(0+256),5
 10557                           
 10558                           ;OverLoad_B1.c: 109: }
 10559                           ;OverLoad_B1.c: 110: } else {
 10560  03F7  0008               	return
 10561  03F8                     l8143:	
 10562                           
 10563                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
 10564  03F8  01ED               	clrf	(_Load^(0+256)+42)
 10565                           
 10566                           ;OverLoad_B1.c: 112: if (Load.Run == 1) {
 10567  03F9  1DC3               	btfss	_Load^(0+256),3
 10568  03FA  0008               	return
 10569                           
 10570                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10571  03FB  1BC3               	btfsc	_Load^(0+256),7
 10572  03FC  0008               	return
 10573                           
 10574                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10575  03FD  3001               	movlw	1
 10576  03FE  0020               	movlb	0	; select bank0
 10577  03FF  00A9               	movwf	??_Load_Main
 10578  0400  0829               	movf	??_Load_Main,w
 10579  0401  0022               	movlb	2	; select bank2
 10580  0402  07EF               	addwf	(_Load^(0+256)+44),f
 10581                           
 10582                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 3) {
 10583  0403  3003               	movlw	3
 10584  0404  026F               	subwf	(_Load^(0+256)+44),w
 10585  0405  1C03               	skipc
 10586  0406  0008               	return
 10587                           
 10588                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10589  0407  01EF               	clrf	(_Load^(0+256)+44)
 10590                           
 10591                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10592  0408  17C3               	bsf	_Load^(0+256),7
 10593                           
 10594                           ;OverLoad_B1.c: 118: Load.Run = 0;
 10595  0409  11C3               	bcf	_Load^(0+256),3
 10596                           
 10597                           ;OverLoad_B1.c: 119: Load.Count = 0;
 10598  040A  01EC               	clrf	(_Load^(0+256)+41)
 10599                           
 10600                           ;OverLoad_B1.c: 120: Load.TotalLoad = Load.AD;
 10601  040B  0863               	movf	((_Load+1)^(0+256)+31),w
 10602  040C  01CD               	clrf	((_Load+1)^(0+256)+9)
 10603  040D  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10604  040E  0862               	movf	(_Load^(0+256)+31),w
 10605  040F  01CC               	clrf	(_Load^(0+256)+9)
 10606  0410  07CC               	addwf	(_Load^(0+256)+9),f
 10607                           
 10608                           ;OverLoad_B1.c: 130: }
 10609                           ;OverLoad_B1.c: 131: }
 10610                           ;OverLoad_B1.c: 132: }
 10611                           ;OverLoad_B1.c: 133: }
 10612                           ;OverLoad_B1.c: 134: }
 10613                           ;OverLoad_B1.c: 135: }
 10614                           ;OverLoad_B1.c: 136: } else {
 10615  0411  0008               	return
 10616  0412                     l1463:	
 10617                           
 10618                           ;OverLoad_B1.c: 137: Load.ADtoGO = 1;
 10619  0412  1643               	bsf	_Load^(0+256),4
 10620                           
 10621                           ;OverLoad_B1.c: 138: }
 10622                           ;OverLoad_B1.c: 139: } else {
 10623  0413  0008               	return
 10624  0414                     l1462:	
 10625                           
 10626                           ;OverLoad_B1.c: 140: if (Load.LightsON == 1 && error != 3) {
 10627  0414  1D43               	btfss	_Load^(0+256),2
 10628  0415  2C32               	goto	l8191
 10629  0416  0020               	movlb	0	; select bank0
 10630  0417  082E               	movf	Load_Main@error,w
 10631  0418  3A03               	xorlw	3
 10632  0419  1903               	skipnz
 10633  041A  2C32               	goto	l8191
 10634                           
 10635                           ;OverLoad_B1.c: 141: Load.LightsON = 0;
 10636  041B  0022               	movlb	2	; select bank2
 10637  041C  1143               	bcf	_Load^(0+256),2
 10638                           
 10639                           ;OverLoad_B1.c: 143: Load.Time = 0;
 10640  041D  01C4               	clrf	(_Load^(0+256)+1)
 10641  041E  01C5               	clrf	((_Load+1)^(0+256)+1)
 10642                           
 10643                           ;OverLoad_B1.c: 144: Load.ADtoGO = 0;
 10644  041F  1243               	bcf	_Load^(0+256),4
 10645                           
 10646                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10647  0420  319E  269B  3183   	fcall	_setLoad_AH_AL_Restore
 10648                           
 10649                           ;OverLoad_B1.c: 146: Load.Count = 0;
 10650  0423  0022               	movlb	2	; select bank2
 10651  0424  01EC               	clrf	(_Load^(0+256)+41)
 10652                           
 10653                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 10654  0425  01ED               	clrf	(_Load^(0+256)+42)
 10655                           
 10656                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10657  0426  01EF               	clrf	(_Load^(0+256)+44)
 10658                           
 10659                           ;OverLoad_B1.c: 150: Load.ADH = 0;
 10660  0427  01C8               	clrf	(_Load^(0+256)+5)
 10661  0428  01C9               	clrf	((_Load+1)^(0+256)+5)
 10662                           
 10663                           ;OverLoad_B1.c: 151: Load.ADL = 0;
 10664  0429  01CA               	clrf	(_Load^(0+256)+7)
 10665  042A  01CB               	clrf	((_Load+1)^(0+256)+7)
 10666                           
 10667                           ;OverLoad_B1.c: 152: Load.AD = 0;
 10668  042B  01E2               	clrf	(_Load^(0+256)+31)
 10669  042C  01E3               	clrf	((_Load+1)^(0+256)+31)
 10670                           
 10671                           ;OverLoad_B1.c: 153: Load.JudgeValue = 0;
 10672  042D  01E8               	clrf	(_Load^(0+256)+37)
 10673  042E  01E9               	clrf	((_Load+1)^(0+256)+37)
 10674                           
 10675                           ;OverLoad_B1.c: 154: Load.LightsCount = 0;
 10676  042F  01EE               	clrf	(_Load^(0+256)+43)
 10677                           
 10678                           ;OverLoad_B1.c: 155: Load.Run = 0;
 10679  0430  11C3               	bcf	_Load^(0+256),3
 10680                           
 10681                           ;OverLoad_B1.c: 156: Load.OK = 1;
 10682  0431  17C3               	bsf	_Load^(0+256),7
 10683  0432                     l8191:	
 10684                           
 10685                           ;OverLoad_B1.c: 164: }
 10686                           ;OverLoad_B1.c: 165: if (Load.ERROR == 1) {
 10687  0432  0022               	movlb	2	; select bank2
 10688  0433  1EC3               	btfss	_Load^(0+256),5
 10689  0434  0008               	return
 10690                           
 10691                           ;OverLoad_B1.c: 166: Load.ErrorTime++;
 10692  0435  3001               	movlw	1
 10693  0436  07C6               	addwf	(_Load^(0+256)+3),f
 10694  0437  3000               	movlw	0
 10695  0438  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10696                           
 10697                           ;OverLoad_B1.c: 167: if (Load.ErrorTime >= 1000) {
 10698  0439  3003               	movlw	3
 10699  043A  0247               	subwf	((_Load+1)^(0+256)+3),w
 10700  043B  30E8               	movlw	232
 10701  043C  1903               	skipnz
 10702  043D  0246               	subwf	(_Load^(0+256)+3),w
 10703  043E  1C03               	skipc
 10704  043F  0008               	return
 10705                           
 10706                           ;OverLoad_B1.c: 168: Load.ErrorTime = 0;
 10707  0440  01C6               	clrf	(_Load^(0+256)+3)
 10708  0441  01C7               	clrf	((_Load+1)^(0+256)+3)
 10709                           
 10710                           ;OverLoad_B1.c: 175: Load.ERROR = 0;
 10711  0442  12C3               	bcf	_Load^(0+256),5
 10712                           
 10713                           ;OverLoad_B1.c: 176: }
 10714                           ;OverLoad_B1.c: 177: }
 10715                           ;OverLoad_B1.c: 178: }
 10716                           ;OverLoad_B1.c: 179: } else {
 10717  0443  0008               	return
 10718  0444                     l1458:	
 10719                           
 10720                           ;OverLoad_B1.c: 180: if (myMain.PowerON == 1) {
 10721  0444  0021               	movlb	1	; select bank1
 10722  0445  1C20               	btfss	_myMain^(0+128),0
 10723  0446  0008               	return
 10724                           
 10725                           ;OverLoad_B1.c: 181: Load.Enable = 1;
 10726  0447  0022               	movlb	2	; select bank2
 10727  0448  1443               	bsf	_Load^(0+256),0
 10728  0449  0008               	return
 10729  044A                     __end_of_Load_Main:	
 10730                           
 10731                           	psect	text54
 10732  1C05                     __ptext54:	
 10733 ;; *************** function _getMain_LoadOK *****************
 10734 ;; Defined at:
 10735 ;;		line 447 in file "../src/main_B1.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;		None
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;  ok              1    2[BANK0 ] unsigned char 
 10740 ;; Return value:  Size  Location     Type
 10741 ;;                  1    wreg      unsigned char 
 10742 ;; Registers used:
 10743 ;;		wreg, status,2, pclath, cstack
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;Total ram usage:        2 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; Hardware stack levels required when called:    6
 10756 ;; This function calls:
 10757 ;;		_getDimmer_LoadOK
 10758 ;; This function is called by:
 10759 ;;		_Load_Main
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function _getMain_LoadOK
 10765  1C05                     _getMain_LoadOK:	
 10766                           
 10767                           ;main_B1.c: 448: char ok = 0;
 10768                           
 10769                           ;incstack = 0
 10770                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10771  1C05  0020               	movlb	0	; select bank0
 10772  1C06  01A2               	clrf	getMain_LoadOK@ok
 10773                           
 10774                           ;main_B1.c: 454: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10775  1C07  319B  236C         	fcall	_getDimmer_LoadOK
 10776  1C09  3A01               	xorlw	1
 10777  1C0A  3000               	movlw	0
 10778  1C0B  1903               	skipnz
 10779  1C0C  3001               	movlw	1
 10780  1C0D  0020               	movlb	0	; select bank0
 10781  1C0E  00A1               	movwf	??_getMain_LoadOK
 10782  1C0F  0821               	movf	??_getMain_LoadOK,w
 10783  1C10  00A2               	movwf	getMain_LoadOK@ok
 10784                           
 10785                           ;main_B1.c: 456: return ok;
 10786  1C11  0822               	movf	getMain_LoadOK@ok,w
 10787  1C12  0008               	return
 10788  1C13                     __end_of_getMain_LoadOK:	
 10789                           
 10790                           	psect	text55
 10791  1B6C                     __ptext55:	
 10792 ;; *************** function _getDimmer_LoadOK *****************
 10793 ;; Defined at:
 10794 ;;		line 615 in file "../src/Dimmer_B1.c"
 10795 ;; Parameters:    Size  Location     Type
 10796 ;;		None
 10797 ;; Auto vars:     Size  Location     Type
 10798 ;;  status          1    0[BANK0 ] unsigned char 
 10799 ;; Return value:  Size  Location     Type
 10800 ;;                  1    wreg      unsigned char 
 10801 ;; Registers used:
 10802 ;;		wreg, status,2
 10803 ;; Tracked objects:
 10804 ;;		On entry : 0/0
 10805 ;;		On exit  : 0/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;Total ram usage:        1 bytes
 10813 ;; Hardware stack levels used:    1
 10814 ;; Hardware stack levels required when called:    5
 10815 ;; This function calls:
 10816 ;;		Nothing
 10817 ;; This function is called by:
 10818 ;;		_getMain_LoadOK
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           
 10823                           ;psect for function _getDimmer_LoadOK
 10824  1B6C                     _getDimmer_LoadOK:	
 10825                           
 10826                           ;Dimmer_B1.c: 616: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10827                           
 10828                           ;incstack = 0
 10829                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10830  1B6C  3000               	movlw	0
 10831  1B6D  0022               	movlb	2	; select bank2
 10832  1B6E  18BE               	btfsc	_Dimmer^(0+256),1
 10833  1B6F  3001               	movlw	1
 10834  1B70  0020               	movlb	0	; select bank0
 10835  1B71  00A0               	movwf	getDimmer_LoadOK@status
 10836                           
 10837                           ;Dimmer_B1.c: 617: return status;
 10838  1B72  0820               	movf	getDimmer_LoadOK@status,w
 10839  1B73  0008               	return
 10840  1B74                     __end_of_getDimmer_LoadOK:	
 10841                           
 10842                           	psect	text56
 10843  1DF0                     __ptext56:	
 10844 ;; *************** function _getMain_Lights_Count *****************
 10845 ;; Defined at:
 10846 ;;		line 417 in file "../src/main_B1.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;		None
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;  status2         1    3[BANK0 ] unsigned char 
 10851 ;;  status1         1    2[BANK0 ] unsigned char 
 10852 ;;  status3         1    1[BANK0 ] unsigned char 
 10853 ;;  count           1    0[BANK0 ] unsigned char 
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  1    wreg      unsigned char 
 10856 ;; Registers used:
 10857 ;;		wreg, status,2, status,0
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;Total ram usage:        4 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; Hardware stack levels required when called:    5
 10870 ;; This function calls:
 10871 ;;		Nothing
 10872 ;; This function is called by:
 10873 ;;		_Load_Main
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           
 10878                           ;psect for function _getMain_Lights_Count
 10879  1DF0                     _getMain_Lights_Count:	
 10880                           
 10881                           ;main_B1.c: 418: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10882                           
 10883                           ;incstack = 0
 10884                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10885  1DF0  0020               	movlb	0	; select bank0
 10886  1DF1  01A2               	clrf	getMain_Lights_Count@status1
 10887  1DF2  01A3               	clrf	getMain_Lights_Count@status2
 10888  1DF3  01A1               	clrf	getMain_Lights_Count@status3
 10889  1DF4  01A0               	clrf	getMain_Lights_Count@count
 10890                           
 10891                           ;main_B1.c: 422: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10892  1DF5  3000               	movlw	0
 10893  1DF6  0023               	movlb	3	; select bank3
 10894  1DF7  18A9               	btfsc	(_DimmerLights1^(0+384)+9),1
 10895  1DF8  3001               	movlw	1
 10896  1DF9  0020               	movlb	0	; select bank0
 10897  1DFA  00A2               	movwf	getMain_Lights_Count@status1
 10898                           
 10899                           ;main_B1.c: 425: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10900  1DFB  3000               	movlw	0
 10901  1DFC  0023               	movlb	3	; select bank3
 10902  1DFD  18B8               	btfsc	(_DimmerLights2^(0+384)+9),1
 10903  1DFE  3001               	movlw	1
 10904  1DFF  0020               	movlb	0	; select bank0
 10905  1E00  00A3               	movwf	getMain_Lights_Count@status2
 10906                           
 10907                           ;main_B1.c: 443: return count = (status1 + status2 + status3);
 10908  1E01  0822               	movf	getMain_Lights_Count@status1,w
 10909  1E02  0723               	addwf	getMain_Lights_Count@status2,w
 10910  1E03  0721               	addwf	getMain_Lights_Count@status3,w
 10911  1E04  00A0               	movwf	getMain_Lights_Count@count
 10912  1E05  0008               	return
 10913  1E06                     __end_of_getMain_Lights_Count:	
 10914                           
 10915                           	psect	text57
 10916  1C71                     __ptext57:	
 10917 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10918 ;; Defined at:
 10919 ;;		line 506 in file "../src/Dimmer_B1.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      unsigned char 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;Total ram usage:        3 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    5
 10940 ;; This function calls:
 10941 ;;		Nothing
 10942 ;; This function is called by:
 10943 ;;		_setDimmerLights_SwOn
 10944 ;;		_setDimmerLights_AdjControl
 10945 ;;		_Load_Main
 10946 ;; This function uses a non-reentrant model
 10947 ;;
 10948                           
 10949                           
 10950                           ;psect for function _getAll_DimmerLights_AdjGO
 10951  1C71                     _getAll_DimmerLights_AdjGO:	
 10952                           
 10953                           ;Dimmer_B1.c: 507: char adjgo = 0;
 10954                           
 10955                           ;incstack = 0
 10956                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10957  1C71  0020               	movlb	0	; select bank0
 10958  1C72  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10959                           
 10960                           ;Dimmer_B1.c: 512: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10961  1C73  01A2               	clrf	_getAll_DimmerLights_AdjGO$2562
 10962  1C74  0AA2               	incf	_getAll_DimmerLights_AdjGO$2562,f
 10963  1C75  0023               	movlb	3	; select bank3
 10964  1C76  1DA8               	btfss	(_DimmerLights1^(0+384)+8),3
 10965  1C77  19B7               	btfsc	(_DimmerLights2^(0+384)+8),3
 10966  1C78  2C7B               	goto	l6249
 10967  1C79  0020               	movlb	0	; select bank0
 10968  1C7A  01A2               	clrf	_getAll_DimmerLights_AdjGO$2562
 10969  1C7B                     l6249:	
 10970  1C7B  0020               	movlb	0	; select bank0
 10971  1C7C  0822               	movf	_getAll_DimmerLights_AdjGO$2562,w
 10972  1C7D  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 10973  1C7E  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 10974  1C7F  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10975                           
 10976                           ;Dimmer_B1.c: 517: return adjgo;
 10977  1C80  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10978  1C81  0008               	return
 10979  1C82                     __end_of_getAll_DimmerLights_AdjGO:	
 10980                           
 10981                           	psect	text58
 10982  1B2E                     __ptext58:	
 10983 ;; *************** function _Load_Initialization *****************
 10984 ;; Defined at:
 10985 ;;		line 9 in file "../src/OverLoad_B1.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;		None
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;		None
 10990 ;; Return value:  Size  Location     Type
 10991 ;;		None               void
 10992 ;; Registers used:
 10993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;Total ram usage:        0 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    6
 11006 ;; This function calls:
 11007 ;;		_setLoad_AH_AL_Restore
 11008 ;; This function is called by:
 11009 ;;		_main
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           
 11014                           ;psect for function _Load_Initialization
 11015  1B2E                     _Load_Initialization:	
 11016                           
 11017                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11018                           
 11019                           ;incstack = 0
 11020                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11021  1B2E  0022               	movlb	2	; select bank2
 11022  1B2F  17C3               	bsf	_Load^(0+256),7
 11023                           
 11024                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11025  1B30  319E  269B         	fcall	_setLoad_AH_AL_Restore
 11026  1B32  0008               	return
 11027  1B33                     __end_of_Load_Initialization:	
 11028                           
 11029                           	psect	text59
 11030  1E9B                     __ptext59:	
 11031 ;; *************** function _setLoad_AH_AL_Restore *****************
 11032 ;; Defined at:
 11033 ;;		line 207 in file "../src/OverLoad_B1.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  i               1    1[BANK0 ] unsigned char 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;		None               void
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        2 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    5
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_Load_Initialization
 11058 ;;		_Load_Main
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           
 11063                           ;psect for function _setLoad_AH_AL_Restore
 11064  1E9B                     _setLoad_AH_AL_Restore:	
 11065                           
 11066                           ;OverLoad_B1.c: 208: char i;
 11067                           ;OverLoad_B1.c: 209: for (i = 0; i < 5; i++) {
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11071  1E9B  0020               	movlb	0	; select bank0
 11072  1E9C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11073  1E9D                     L8:	
 11074  1E9D  3005               	movlw	5
 11075  1E9E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11076  1E9F  1803               	btfsc	3,0
 11077  1EA0  0008               	return
 11078                           
 11079                           ;OverLoad_B1.c: 210: Load.AH[i] = 0;
 11080  1EA1  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11081  1EA2  3E4E               	addlw	(_Load+11)& (0+255)
 11082  1EA3  0086               	movwf	6
 11083  1EA4  3001               	movlw	1	; select bank2/3
 11084  1EA5  0087               	movwf	7
 11085  1EA6  3000               	movlw	0
 11086  1EA7  3FC0               	movwi [0]fsr1
 11087  1EA8  3FC1               	movwi [1]fsr1
 11088                           
 11089                           ;OverLoad_B1.c: 211: Load.AL[i] = 0xffff;
 11090  1EA9  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11091  1EAA  3E58               	addlw	(_Load+21)& (0+255)
 11092  1EAB  0086               	movwf	6
 11093  1EAC  3001               	movlw	1	; select bank2/3
 11094  1EAD  0087               	movwf	7
 11095  1EAE  30FF               	movlw	255
 11096  1EAF  3FC0               	movwi [0]fsr1
 11097  1EB0  30FF               	movlw	255
 11098  1EB1  3FC1               	movwi [1]fsr1
 11099  1EB2  3001               	movlw	1
 11100  1EB3  00A0               	movwf	??_setLoad_AH_AL_Restore
 11101  1EB4  0820               	movf	??_setLoad_AH_AL_Restore,w
 11102  1EB5  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11103  1EB6  2E9D               	goto	L8
 11104  1EB7                     __end_of_setLoad_AH_AL_Restore:	
 11105                           
 11106                           	psect	text60
 11107  1BD4                     __ptext60:	
 11108 ;; *************** function _LED_Main *****************
 11109 ;; Defined at:
 11110 ;;		line 47 in file "../src/LED_B1.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;		None               void
 11117 ;; Registers used:
 11118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;Total ram usage:        0 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    7
 11131 ;; This function calls:
 11132 ;;		_setLED_Main
 11133 ;; This function is called by:
 11134 ;;		_main
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function _LED_Main
 11140  1BD4                     _LED_Main:	
 11141                           
 11142                           ;LED_B1.c: 53: setLED_Main(1);
 11143                           
 11144                           ;incstack = 0
 11145                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11146  1BD4  3001               	movlw	1
 11147  1BD5  3193  2392  319B   	fcall	_setLED_Main
 11148                           
 11149                           ;LED_B1.c: 56: setLED_Main(2);
 11150  1BD8  3002               	movlw	2
 11151  1BD9  3193  2392  319B   	fcall	_setLED_Main
 11152                           
 11153                           ;LED_B1.c: 62: setLED_Main(99);
 11154  1BDC  3063               	movlw	99
 11155  1BDD  3193  2392         	fcall	_setLED_Main
 11156  1BDF  0008               	return
 11157  1BE0                     __end_of_LED_Main:	
 11158                           
 11159                           	psect	text61
 11160  1392                     __ptext61:	
 11161 ;; *************** function _setLED_Main *****************
 11162 ;; Defined at:
 11163 ;;		line 221 in file "../src/LED_B1.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  led             1    wreg     unsigned char 
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;  led             1    4[BANK0 ] unsigned char 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;		None               void
 11170 ;; Registers used:
 11171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        3 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; Hardware stack levels required when called:    6
 11184 ;; This function calls:
 11185 ;;		_LedPointSelect
 11186 ;; This function is called by:
 11187 ;;		_LED_Main
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           
 11192                           ;psect for function _setLED_Main
 11193  1392                     _setLED_Main:	
 11194                           
 11195                           ;incstack = 0
 11196                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11197                           ;setLED_Main@led stored from wreg
 11198  1392  0020               	movlb	0	; select bank0
 11199  1393  00A4               	movwf	setLED_Main@led
 11200                           
 11201                           ;LED_B1.c: 222: LedPointSelect(led);
 11202  1394  0824               	movf	setLED_Main@led,w
 11203  1395  319E  2680  3193   	fcall	_LedPointSelect
 11204                           
 11205                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11206  1398  087A               	movf	_LED,w
 11207  1399  0086               	movwf	6
 11208  139A  3001               	movlw	1	; select bank2/3
 11209  139B  0087               	movwf	7
 11210  139C  1C81               	btfss	1,1
 11211  139D  0008               	return
 11212                           
 11213                           ;LED_B1.c: 224: LED->Time++;
 11214  139E  0A7A               	incf	_LED,w
 11215  139F  0086               	movwf	6
 11216  13A0  3001               	movlw	1	; select bank2/3
 11217  13A1  0087               	movwf	7
 11218  13A2  3001               	movlw	1
 11219  13A3  0781               	addwf	1,f
 11220  13A4  3141               	addfsr 1,1
 11221  13A5  1803               	skipnc
 11222  13A6  0A81               	incf	1,f
 11223                           
 11224                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11225  13A7  0A7A               	incf	_LED,w
 11226  13A8  0086               	movwf	6
 11227  13A9  3001               	movlw	1	; select bank2/3
 11228  13AA  0087               	movwf	7
 11229  13AB  3F40               	moviw [0]fsr1
 11230  13AC  0020               	movlb	0	; select bank0
 11231  13AD  00A2               	movwf	??_setLED_Main
 11232  13AE  3F41               	moviw [1]fsr1
 11233  13AF  00A3               	movwf	??_setLED_Main+1
 11234  13B0  3000               	movlw	0
 11235  13B1  0223               	subwf	??_setLED_Main+1,w
 11236  13B2  3032               	movlw	50
 11237  13B3  1903               	skipnz
 11238  13B4  0222               	subwf	??_setLED_Main,w
 11239  13B5  1C03               	skipc
 11240  13B6  0008               	return
 11241                           
 11242                           ;LED_B1.c: 226: LED->Time = 0;
 11243  13B7  0A7A               	incf	_LED,w
 11244  13B8  0086               	movwf	6
 11245  13B9  3001               	movlw	1	; select bank2/3
 11246  13BA  0087               	movwf	7
 11247  13BB  3000               	movlw	0
 11248  13BC  3FC0               	movwi [0]fsr1
 11249  13BD  3FC1               	movwi [1]fsr1
 11250                           
 11251                           ;LED_B1.c: 228: if (led == 1) {
 11252  13BE  0824               	movf	setLED_Main@led,w
 11253  13BF  3A01               	xorlw	1
 11254                           
 11255                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11256  13C0  3008               	movlw	8
 11257  13C1  1903               	btfsc	3,2
 11258  13C2  068C               	xorwf	12,f
 11259                           
 11260                           ;LED_B1.c: 230: }
 11261                           ;LED_B1.c: 233: if (led == 2) {
 11262  13C3  0824               	movf	setLED_Main@led,w
 11263  13C4  3A02               	xorlw	2
 11264  13C5  1D03               	skipz
 11265  13C6  2BC9               	goto	l1031
 11266                           
 11267                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11268  13C7  3080               	movlw	128
 11269  13C8  068E               	xorwf	14,f
 11270  13C9                     l1031:	
 11271                           
 11272                           ;LED_B1.c: 235: }
 11273                           ;LED_B1.c: 243: if (led == 99) {
 11274  13C9  0824               	movf	setLED_Main@led,w
 11275  13CA  3A63               	xorlw	99
 11276  13CB  1D03               	skipz
 11277  13CC  0008               	return
 11278                           
 11279                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11280  13CD  3020               	movlw	32
 11281  13CE  068D               	xorwf	13,f
 11282  13CF  0008               	return
 11283  13D0                     __end_of_setLED_Main:	
 11284                           
 11285                           	psect	text62
 11286  1BC8                     __ptext62:	
 11287 ;; *************** function _LED_Initialization *****************
 11288 ;; Defined at:
 11289 ;;		line 31 in file "../src/LED_B1.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;		None
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;		None
 11294 ;; Return value:  Size  Location     Type
 11295 ;;		None               void
 11296 ;; Registers used:
 11297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;Total ram usage:        0 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    8
 11310 ;; This function calls:
 11311 ;;		_setLED_Initialization
 11312 ;; This function is called by:
 11313 ;;		_main
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           
 11318                           ;psect for function _LED_Initialization
 11319  1BC8                     _LED_Initialization:	
 11320                           
 11321                           ;LED_B1.c: 33: setLED_Initialization(1);
 11322                           
 11323                           ;incstack = 0
 11324                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11325  1BC8  3001               	movlw	1
 11326  1BC9  319C  2460  319B   	fcall	_setLED_Initialization
 11327                           
 11328                           ;LED_B1.c: 36: setLED_Initialization(2);
 11329  1BCC  3002               	movlw	2
 11330  1BCD  319C  2460  319B   	fcall	_setLED_Initialization
 11331                           
 11332                           ;LED_B1.c: 42: setLED_Initialization(99);
 11333  1BD0  3063               	movlw	99
 11334  1BD1  319C  2460         	fcall	_setLED_Initialization
 11335  1BD3  0008               	return
 11336  1BD4                     __end_of_LED_Initialization:	
 11337                           
 11338                           	psect	text63
 11339  1C60                     __ptext63:	
 11340 ;; *************** function _setLED_Initialization *****************
 11341 ;; Defined at:
 11342 ;;		line 69 in file "../src/LED_B1.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;  led             1    wreg     unsigned char 
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;  led             1    4[BANK0 ] unsigned char 
 11347 ;; Return value:  Size  Location     Type
 11348 ;;		None               void
 11349 ;; Registers used:
 11350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;Total ram usage:        1 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    7
 11363 ;; This function calls:
 11364 ;;		_LedPointSelect
 11365 ;;		_setLED
 11366 ;; This function is called by:
 11367 ;;		_LED_Initialization
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _setLED_Initialization
 11373  1C60                     _setLED_Initialization:	
 11374                           
 11375                           ;incstack = 0
 11376                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11377                           ;setLED_Initialization@led stored from wreg
 11378  1C60  0020               	movlb	0	; select bank0
 11379  1C61  00A4               	movwf	setLED_Initialization@led
 11380                           
 11381                           ;LED_B1.c: 70: LedPointSelect(led);
 11382  1C62  0824               	movf	setLED_Initialization@led,w
 11383  1C63  319E  2680  319C   	fcall	_LedPointSelect
 11384                           
 11385                           ;LED_B1.c: 71: LED->Enable = 1;
 11386  1C66  087A               	movf	_LED,w
 11387  1C67  0086               	movwf	6
 11388  1C68  3001               	movlw	1	; select bank2/3
 11389  1C69  0087               	movwf	7
 11390  1C6A  1401               	bsf	1,0
 11391                           
 11392                           ;LED_B1.c: 72: setLED(led, 0);
 11393  1C6B  0020               	movlb	0	; select bank0
 11394  1C6C  01A2               	clrf	setLED@command
 11395  1C6D  0824               	movf	setLED_Initialization@led,w
 11396  1C6E  3195  2540         	fcall	_setLED
 11397  1C70  0008               	return
 11398  1C71                     __end_of_setLED_Initialization:	
 11399                           
 11400                           	psect	text64
 11401  1278                     __ptext64:	
 11402 ;; *************** function _Flash_Memory_Main *****************
 11403 ;; Defined at:
 11404 ;;		line 912 in file "../src/MCU_B1.c"
 11405 ;; Parameters:    Size  Location     Type
 11406 ;;		None
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;		None
 11409 ;; Return value:  Size  Location     Type
 11410 ;;		None               void
 11411 ;; Registers used:
 11412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;Total ram usage:        1 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    8
 11425 ;; This function calls:
 11426 ;;		_Flash_Memory_Modify
 11427 ;;		_getMain_LightsStatus
 11428 ;; This function is called by:
 11429 ;;		_main
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           
 11434                           ;psect for function _Flash_Memory_Main
 11435  1278                     _Flash_Memory_Main:	
 11436                           
 11437                           ;MCU_B1.c: 913: if (Memory.Modify == 1) {
 11438                           
 11439                           ;incstack = 0
 11440                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11441  1278  0024               	movlb	4	; select bank4
 11442  1279  1C44               	btfss	(_Memory^(0+512)+36),0
 11443  127A  0008               	return
 11444                           
 11445                           ;MCU_B1.c: 914: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11446  127B  3191  214E  3192   	fcall	_getMain_LightsStatus
 11447  127E  3A00               	xorlw	0
 11448  127F  3000               	movlw	0
 11449  1280  1903               	skipnz
 11450  1281  3001               	movlw	1
 11451  1282  0020               	movlb	0	; select bank0
 11452  1283  00A9               	movwf	??_Flash_Memory_Main
 11453  1284  0DA9               	rlf	??_Flash_Memory_Main,f
 11454  1285  0024               	movlb	4	; select bank4
 11455  1286  0844               	movf	(_Memory^(0+512)+36),w
 11456  1287  0020               	movlb	0	; select bank0
 11457  1288  0629               	xorwf	??_Flash_Memory_Main,w
 11458  1289  39FD               	andlw	-3
 11459  128A  0629               	xorwf	??_Flash_Memory_Main,w
 11460  128B  0024               	movlb	4	; select bank4
 11461  128C  00C4               	movwf	(_Memory^(0+512)+36)
 11462                           
 11463                           ;MCU_B1.c: 915: if (Memory.GO == 1) {
 11464  128D  1CC4               	btfss	(_Memory^(0+512)+36),1
 11465  128E  2AA8               	goto	l1299
 11466                           
 11467                           ;MCU_B1.c: 916: Memory.Runtime = 1;
 11468  128F  15C4               	bsf	(_Memory^(0+512)+36),3
 11469                           
 11470                           ;MCU_B1.c: 917: Memory.Time++;
 11471  1290  3001               	movlw	1
 11472  1291  07C2               	addwf	(_Memory^(0+512)+34),f
 11473  1292  3000               	movlw	0
 11474  1293  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11475                           
 11476                           ;MCU_B1.c: 918: if (Memory.Time == 25) {
 11477  1294  3022               	movlw	34
 11478  1295  3E20               	addlw	_Memory& (0+255)
 11479  1296  0086               	movwf	6
 11480  1297  3002               	movlw	2	; select bank4/5
 11481  1298  0087               	movwf	7
 11482  1299  3F40               	moviw [0]fsr1
 11483  129A  3A19               	xorlw	25
 11484  129B  1D03               	skipz
 11485  129C  2A9F               	goto	u7845
 11486  129D  3F41               	moviw [1]fsr1
 11487  129E  3A00               	xorlw	0
 11488  129F                     u7845:	
 11489  129F  1D03               	skipz
 11490  12A0  0008               	return
 11491                           
 11492                           ;MCU_B1.c: 919: Memory.Time = 0;
 11493  12A1  01C2               	clrf	(_Memory^(0+512)+34)
 11494  12A2  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11495                           
 11496                           ;MCU_B1.c: 920: Memory.Modify = 0;
 11497  12A3  1044               	bcf	(_Memory^(0+512)+36),0
 11498                           
 11499                           ;MCU_B1.c: 921: Memory.GO = 0;
 11500  12A4  10C4               	bcf	(_Memory^(0+512)+36),1
 11501                           
 11502                           ;MCU_B1.c: 922: Flash_Memory_Modify();
 11503  12A5  3194  24A3         	fcall	_Flash_Memory_Modify
 11504                           
 11505                           ;MCU_B1.c: 923: }
 11506                           ;MCU_B1.c: 924: } else {
 11507  12A7  0008               	return
 11508  12A8                     l1299:	
 11509                           
 11510                           ;MCU_B1.c: 925: if (Memory.Runtime == 1) {
 11511  12A8  1DC4               	btfss	(_Memory^(0+512)+36),3
 11512  12A9  0008               	return
 11513                           
 11514                           ;MCU_B1.c: 926: Memory.Runtime = 0;
 11515  12AA  11C4               	bcf	(_Memory^(0+512)+36),3
 11516                           
 11517                           ;MCU_B1.c: 927: Memory.Time = 0;
 11518  12AB  01C2               	clrf	(_Memory^(0+512)+34)
 11519  12AC  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11520  12AD  0008               	return
 11521  12AE                     __end_of_Flash_Memory_Main:	
 11522                           
 11523                           	psect	text65
 11524  14A3                     __ptext65:	
 11525 ;; *************** function _Flash_Memory_Modify *****************
 11526 ;; Defined at:
 11527 ;;		line 985 in file "../src/MCU_B1.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;		None
 11530 ;; Auto vars:     Size  Location     Type
 11531 ;;  i               1    5[BANK0 ] unsigned char 
 11532 ;; Return value:  Size  Location     Type
 11533 ;;		None               void
 11534 ;; Registers used:
 11535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11536 ;; Tracked objects:
 11537 ;;		On entry : 0/0
 11538 ;;		On exit  : 0/0
 11539 ;;		Unchanged: 0/0
 11540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;Total ram usage:        2 bytes
 11546 ;; Hardware stack levels used:    1
 11547 ;; Hardware stack levels required when called:    7
 11548 ;; This function calls:
 11549 ;;		_Flash_Memory_Erasing
 11550 ;;		_Flash_Memory_Read
 11551 ;;		_Flash_Memory_Write
 11552 ;;		_setMemory_Data
 11553 ;; This function is called by:
 11554 ;;		_Flash_Memory_Main
 11555 ;; This function uses a non-reentrant model
 11556 ;;
 11557                           
 11558                           
 11559                           ;psect for function _Flash_Memory_Modify
 11560  14A3                     _Flash_Memory_Modify:	
 11561                           
 11562                           ;MCU_B1.c: 986: char i = 0;
 11563                           
 11564                           ;incstack = 0
 11565                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11566  14A3  0020               	movlb	0	; select bank0
 11567  14A4  01A5               	clrf	Flash_Memory_Modify@i
 11568                           
 11569                           ;MCU_B1.c: 987: for (i = 0; i < 32; i++) {
 11570  14A5  01A5               	clrf	Flash_Memory_Modify@i
 11571  14A6  3020               	movlw	32
 11572  14A7  0225               	subwf	Flash_Memory_Modify@i,w
 11573  14A8  1803               	btfsc	3,0
 11574  14A9  2CBF               	goto	l7471
 11575  14AA                     l7465:	
 11576                           
 11577                           ;MCU_B1.c: 988: Memory.Data[i] = Flash_Memory_Read(i);
 11578  14AA  0825               	movf	Flash_Memory_Modify@i,w
 11579  14AB  319E  2666  3194   	fcall	_Flash_Memory_Read
 11580  14AE  0020               	movlb	0	; select bank0
 11581  14AF  00A4               	movwf	??_Flash_Memory_Modify
 11582  14B0  0825               	movf	Flash_Memory_Modify@i,w
 11583  14B1  3E20               	addlw	_Memory& (0+255)
 11584  14B2  0086               	movwf	6
 11585  14B3  3002               	movlw	2	; select bank4/5
 11586  14B4  0087               	movwf	7
 11587  14B5  0824               	movf	??_Flash_Memory_Modify,w
 11588  14B6  0081               	movwf	1
 11589  14B7  3001               	movlw	1
 11590  14B8  00A4               	movwf	??_Flash_Memory_Modify
 11591  14B9  0824               	movf	??_Flash_Memory_Modify,w
 11592  14BA  07A5               	addwf	Flash_Memory_Modify@i,f
 11593  14BB  3020               	movlw	32
 11594  14BC  0225               	subwf	Flash_Memory_Modify@i,w
 11595  14BD  1C03               	skipc
 11596  14BE  2CAA               	goto	l7465
 11597  14BF                     l7471:	
 11598                           
 11599                           ;MCU_B1.c: 989: }
 11600                           ;MCU_B1.c: 990: setMemory_Data(0, product->Data[12]);
 11601  14BF  086E               	movf	_product,w
 11602  14C0  0086               	movwf	6
 11603  14C1  3002               	movlw	2	; select bank4/5
 11604  14C2  0087               	movwf	7
 11605  14C3  3002               	movlw	2	; select bank4/5
 11606  14C4  3F4C               	moviw [12]fsr1
 11607  14C5  00A0               	movwf	setMemory_Data@data
 11608  14C6  3000               	movlw	0
 11609  14C7  319B  23B0  3194   	fcall	_setMemory_Data
 11610                           
 11611                           ;MCU_B1.c: 991: setMemory_Data(1, product->Data[13]);
 11612  14CA  0020               	movlb	0	; select bank0
 11613  14CB  086E               	movf	_product,w
 11614  14CC  0086               	movwf	6
 11615  14CD  3002               	movlw	2	; select bank4/5
 11616  14CE  0087               	movwf	7
 11617  14CF  3002               	movlw	2	; select bank4/5
 11618  14D0  3F4D               	moviw [13]fsr1
 11619  14D1  00A0               	movwf	setMemory_Data@data
 11620  14D2  3001               	movlw	1
 11621  14D3  319B  23B0  3194   	fcall	_setMemory_Data
 11622                           
 11623                           ;MCU_B1.c: 992: setMemory_Data(2, product->Data[14]);
 11624  14D6  0020               	movlb	0	; select bank0
 11625  14D7  086E               	movf	_product,w
 11626  14D8  0086               	movwf	6
 11627  14D9  3002               	movlw	2	; select bank4/5
 11628  14DA  0087               	movwf	7
 11629  14DB  3002               	movlw	2	; select bank4/5
 11630  14DC  3F4E               	moviw [14]fsr1
 11631  14DD  00A0               	movwf	setMemory_Data@data
 11632  14DE  3002               	movlw	2
 11633  14DF  319B  23B0  3194   	fcall	_setMemory_Data
 11634                           
 11635                           ;MCU_B1.c: 998: if (Memory.LoopSave == 1) {
 11636  14E2  0024               	movlb	4	; select bank4
 11637  14E3  1D44               	btfss	(_Memory^(0+512)+36),2
 11638  14E4  2CE9               	goto	l1322
 11639                           
 11640                           ;MCU_B1.c: 999: Memory.LoopSave = 0;
 11641  14E5  1144               	bcf	(_Memory^(0+512)+36),2
 11642                           
 11643                           ;MCU_B1.c: 1000: myMain.FirstOpen = 0;
 11644  14E6  0021               	movlb	1	; select bank1
 11645  14E7  11A0               	bcf	_myMain^(0+128),3
 11646                           
 11647                           ;MCU_B1.c: 1001: myMain.First = 0;
 11648  14E8  12A0               	bcf	_myMain^(0+128),5
 11649  14E9                     l1322:	
 11650                           
 11651                           ;MCU_B1.c: 1003: }
 11652                           ;MCU_B1.c: 1004: GIE = 0;
 11653  14E9  138B               	bcf	11,7	;volatile
 11654                           
 11655                           ;MCU_B1.c: 1005: Flash_Memory_Erasing();
 11656  14EA  319B  23BC  3194   	fcall	_Flash_Memory_Erasing
 11657                           
 11658                           ;MCU_B1.c: 1006: Flash_Memory_Write();
 11659  14ED  3191  217B         	fcall	_Flash_Memory_Write
 11660                           
 11661                           ;MCU_B1.c: 1007: GIE = 1;
 11662  14EF  178B               	bsf	11,7	;volatile
 11663  14F0  0008               	return
 11664  14F1                     __end_of_Flash_Memory_Modify:	
 11665                           
 11666                           	psect	text66
 11667  1BBC                     __ptext66:	
 11668 ;; *************** function _Flash_Memory_Erasing *****************
 11669 ;; Defined at:
 11670 ;;		line 974 in file "../src/MCU_B1.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;		None
 11675 ;; Return value:  Size  Location     Type
 11676 ;;		None               void
 11677 ;; Registers used:
 11678 ;;		wreg, status,2, status,0, pclath, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;Total ram usage:        0 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    6
 11691 ;; This function calls:
 11692 ;;		_Flash_Memory_Unlock
 11693 ;; This function is called by:
 11694 ;;		_Flash_Memory_Modify
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           
 11699                           ;psect for function _Flash_Memory_Erasing
 11700  1BBC                     _Flash_Memory_Erasing:	
 11701                           
 11702                           ;MCU_B1.c: 975: CFGS = 0;
 11703                           
 11704                           ;incstack = 0
 11705                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11706  1BBC  0023               	movlb	3	; select bank3
 11707  1BBD  1315               	bcf	21,6	;volatile
 11708                           
 11709                           ;MCU_B1.c: 976: PMADRH = 0x30;
 11710  1BBE  3030               	movlw	48
 11711  1BBF  0092               	movwf	18	;volatile
 11712                           
 11713                           ;MCU_B1.c: 977: PMADRL = 0x00;
 11714  1BC0  0191               	clrf	17	;volatile
 11715                           
 11716                           ;MCU_B1.c: 978: FREE = 1;
 11717  1BC1  1615               	bsf	21,4	;volatile
 11718                           
 11719                           ;MCU_B1.c: 979: WREN = 1;
 11720  1BC2  1515               	bsf	21,2	;volatile
 11721                           
 11722                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 11723  1BC3  319B  2385         	fcall	_Flash_Memory_Unlock
 11724                           
 11725                           ;MCU_B1.c: 981: WREN = 0;
 11726  1BC5  0023               	movlb	3	; select bank3
 11727  1BC6  1115               	bcf	21,2	;volatile
 11728  1BC7  0008               	return
 11729  1BC8                     __end_of_Flash_Memory_Erasing:	
 11730                           
 11731                           	psect	text67
 11732  061F                     __ptext67:	
 11733 ;; *************** function _Flash_Memory_Initialization *****************
 11734 ;; Defined at:
 11735 ;;		line 871 in file "../src/MCU_B1.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  i               1   67[BANK0 ] unsigned char 
 11740 ;; Return value:  Size  Location     Type
 11741 ;;		None               void
 11742 ;; Registers used:
 11743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11744 ;; Tracked objects:
 11745 ;;		On entry : 0/0
 11746 ;;		On exit  : 0/0
 11747 ;;		Unchanged: 0/0
 11748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;Total ram usage:        2 bytes
 11754 ;; Hardware stack levels used:    1
 11755 ;; Hardware stack levels required when called:    8
 11756 ;; This function calls:
 11757 ;;		_Flash_Memory_Read
 11758 ;;		_Flash_Memory_Write
 11759 ;;		_setMemory_Data
 11760 ;;		_setPercentValue
 11761 ;; This function is called by:
 11762 ;;		_main
 11763 ;; This function uses a non-reentrant model
 11764 ;;
 11765                           
 11766                           
 11767                           ;psect for function _Flash_Memory_Initialization
 11768  061F                     _Flash_Memory_Initialization:	
 11769                           
 11770                           ;MCU_B1.c: 872: char i = 0;
 11771                           
 11772                           ;incstack = 0
 11773                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11774  061F  0020               	movlb	0	; select bank0
 11775  0620  01E3               	clrf	Flash_Memory_Initialization@i
 11776                           
 11777                           ;MCU_B1.c: 873: if (Flash_Memory_Read(31) == 0xaa) {
 11778  0621  301F               	movlw	31
 11779  0622  319E  2666  3186   	fcall	_Flash_Memory_Read
 11780  0625  3AAA               	xorlw	170
 11781  0626  1D03               	skipz
 11782  0627  2E91               	goto	l7943
 11783                           
 11784                           ;MCU_B1.c: 874: product->Data[12] = Flash_Memory_Read(0);
 11785  0628  3000               	movlw	0
 11786  0629  319E  2666  3186   	fcall	_Flash_Memory_Read
 11787  062C  0020               	movlb	0	; select bank0
 11788  062D  00E2               	movwf	??_Flash_Memory_Initialization
 11789  062E  086E               	movf	_product,w
 11790  062F  3E0C               	addlw	12
 11791  0630  0086               	movwf	6
 11792  0631  3002               	movlw	2	; select bank4/5
 11793  0632  0087               	movwf	7
 11794  0633  0862               	movf	??_Flash_Memory_Initialization,w
 11795  0634  0081               	movwf	1
 11796                           
 11797                           ;MCU_B1.c: 875: product->Data[13] = Flash_Memory_Read(1);
 11798  0635  3001               	movlw	1
 11799  0636  319E  2666  3186   	fcall	_Flash_Memory_Read
 11800  0639  0020               	movlb	0	; select bank0
 11801  063A  00E2               	movwf	??_Flash_Memory_Initialization
 11802  063B  086E               	movf	_product,w
 11803  063C  3E0D               	addlw	13
 11804  063D  0086               	movwf	6
 11805  063E  3002               	movlw	2	; select bank4/5
 11806  063F  0087               	movwf	7
 11807  0640  0862               	movf	??_Flash_Memory_Initialization,w
 11808  0641  0081               	movwf	1
 11809                           
 11810                           ;MCU_B1.c: 876: product->Data[14] = Flash_Memory_Read(2);
 11811  0642  3002               	movlw	2
 11812  0643  319E  2666  3186   	fcall	_Flash_Memory_Read
 11813  0646  0020               	movlb	0	; select bank0
 11814  0647  00E2               	movwf	??_Flash_Memory_Initialization
 11815  0648  086E               	movf	_product,w
 11816  0649  3E0E               	addlw	14
 11817  064A  0086               	movwf	6
 11818  064B  3002               	movlw	2	; select bank4/5
 11819  064C  0087               	movwf	7
 11820  064D  0862               	movf	??_Flash_Memory_Initialization,w
 11821  064E  0081               	movwf	1
 11822                           
 11823                           ;MCU_B1.c: 882: i = setPercentValue(((char)(80*0.8)));
 11824  064F  3040               	movlw	64
 11825  0650  3189  21DB  3186   	fcall	_setPercentValue
 11826  0653  0020               	movlb	0	; select bank0
 11827  0654  00E2               	movwf	??_Flash_Memory_Initialization
 11828  0655  0862               	movf	??_Flash_Memory_Initialization,w
 11829  0656  00E3               	movwf	Flash_Memory_Initialization@i
 11830                           
 11831                           ;MCU_B1.c: 883: product->Data[21] = i;
 11832  0657  0863               	movf	Flash_Memory_Initialization@i,w
 11833  0658  00E2               	movwf	??_Flash_Memory_Initialization
 11834  0659  086E               	movf	_product,w
 11835  065A  3E15               	addlw	21
 11836  065B  0086               	movwf	6
 11837  065C  3002               	movlw	2	; select bank4/5
 11838  065D  0087               	movwf	7
 11839  065E  0862               	movf	??_Flash_Memory_Initialization,w
 11840  065F  0081               	movwf	1
 11841                           
 11842                           ;MCU_B1.c: 884: product->Data[22] = i;
 11843  0660  0863               	movf	Flash_Memory_Initialization@i,w
 11844  0661  00E2               	movwf	??_Flash_Memory_Initialization
 11845  0662  086E               	movf	_product,w
 11846  0663  3E16               	addlw	22
 11847  0664  0086               	movwf	6
 11848  0665  3002               	movlw	2	; select bank4/5
 11849  0666  0087               	movwf	7
 11850  0667  0862               	movf	??_Flash_Memory_Initialization,w
 11851  0668  0081               	movwf	1
 11852                           
 11853                           ;MCU_B1.c: 885: product->Data[23] = i;
 11854  0669  0863               	movf	Flash_Memory_Initialization@i,w
 11855  066A  00E2               	movwf	??_Flash_Memory_Initialization
 11856  066B  086E               	movf	_product,w
 11857  066C  3E17               	addlw	23
 11858  066D  0086               	movwf	6
 11859  066E  3002               	movlw	2	; select bank4/5
 11860  066F  0087               	movwf	7
 11861  0670  0862               	movf	??_Flash_Memory_Initialization,w
 11862  0671  0081               	movwf	1
 11863                           
 11864                           ;MCU_B1.c: 887: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11865  0672  086E               	movf	_product,w
 11866  0673  3E0C               	addlw	12
 11867  0674  0086               	movwf	6
 11868  0675  3002               	movlw	2	; select bank4/5
 11869  0676  0087               	movwf	7
 11870  0677  0801               	movf	1,w
 11871  0678  3AFF               	xorlw	255
 11872  0679  1D03               	skipz
 11873  067A  0008               	return
 11874  067B  086E               	movf	_product,w
 11875  067C  3E0D               	addlw	13
 11876  067D  0086               	movwf	6
 11877  067E  3002               	movlw	2	; select bank4/5
 11878  067F  0087               	movwf	7
 11879  0680  0801               	movf	1,w
 11880  0681  3AFF               	xorlw	255
 11881  0682  1D03               	skipz
 11882  0683  0008               	return
 11883  0684  086E               	movf	_product,w
 11884  0685  3E0E               	addlw	14
 11885  0686  0086               	movwf	6
 11886  0687  3002               	movlw	2	; select bank4/5
 11887  0688  0087               	movwf	7
 11888  0689  0801               	movf	1,w
 11889  068A  3AFF               	xorlw	255
 11890  068B  1D03               	skipz
 11891  068C  0008               	return
 11892                           
 11893                           ;MCU_B1.c: 888: myMain.FirstOpen = 1;
 11894  068D  0021               	movlb	1	; select bank1
 11895  068E  15A0               	bsf	_myMain^(0+128),3
 11896                           
 11897                           ;MCU_B1.c: 889: myMain.First = 1;
 11898  068F  16A0               	bsf	_myMain^(0+128),5
 11899                           
 11900                           ;MCU_B1.c: 890: }
 11901                           ;MCU_B1.c: 891: } else {
 11902  0690  0008               	return
 11903  0691                     l7943:	
 11904                           
 11905                           ;MCU_B1.c: 892: i = setPercentValue(((char)(80*0.8)));
 11906  0691  3040               	movlw	64
 11907  0692  3189  21DB  3186   	fcall	_setPercentValue
 11908  0695  0020               	movlb	0	; select bank0
 11909  0696  00E2               	movwf	??_Flash_Memory_Initialization
 11910  0697  0862               	movf	??_Flash_Memory_Initialization,w
 11911  0698  00E3               	movwf	Flash_Memory_Initialization@i
 11912                           
 11913                           ;MCU_B1.c: 893: setMemory_Data(0, 0xff);
 11914  0699  30FF               	movlw	255
 11915  069A  00E2               	movwf	??_Flash_Memory_Initialization
 11916  069B  0862               	movf	??_Flash_Memory_Initialization,w
 11917  069C  00A0               	movwf	setMemory_Data@data
 11918  069D  3000               	movlw	0
 11919  069E  319B  23B0  3186   	fcall	_setMemory_Data
 11920                           
 11921                           ;MCU_B1.c: 894: setMemory_Data(1, 0xff);
 11922  06A1  30FF               	movlw	255
 11923  06A2  0020               	movlb	0	; select bank0
 11924  06A3  00E2               	movwf	??_Flash_Memory_Initialization
 11925  06A4  0862               	movf	??_Flash_Memory_Initialization,w
 11926  06A5  00A0               	movwf	setMemory_Data@data
 11927  06A6  3001               	movlw	1
 11928  06A7  319B  23B0  3186   	fcall	_setMemory_Data
 11929                           
 11930                           ;MCU_B1.c: 895: setMemory_Data(2, 0xff);
 11931  06AA  30FF               	movlw	255
 11932  06AB  0020               	movlb	0	; select bank0
 11933  06AC  00E2               	movwf	??_Flash_Memory_Initialization
 11934  06AD  0862               	movf	??_Flash_Memory_Initialization,w
 11935  06AE  00A0               	movwf	setMemory_Data@data
 11936  06AF  3002               	movlw	2
 11937  06B0  319B  23B0  3186   	fcall	_setMemory_Data
 11938                           
 11939                           ;MCU_B1.c: 896: setMemory_Data(3, 0xff);
 11940  06B3  30FF               	movlw	255
 11941  06B4  0020               	movlb	0	; select bank0
 11942  06B5  00E2               	movwf	??_Flash_Memory_Initialization
 11943  06B6  0862               	movf	??_Flash_Memory_Initialization,w
 11944  06B7  00A0               	movwf	setMemory_Data@data
 11945  06B8  3003               	movlw	3
 11946  06B9  319B  23B0  3186   	fcall	_setMemory_Data
 11947                           
 11948                           ;MCU_B1.c: 897: setMemory_Data(4, 0xff);
 11949  06BC  30FF               	movlw	255
 11950  06BD  0020               	movlb	0	; select bank0
 11951  06BE  00E2               	movwf	??_Flash_Memory_Initialization
 11952  06BF  0862               	movf	??_Flash_Memory_Initialization,w
 11953  06C0  00A0               	movwf	setMemory_Data@data
 11954  06C1  3004               	movlw	4
 11955  06C2  319B  23B0  3186   	fcall	_setMemory_Data
 11956                           
 11957                           ;MCU_B1.c: 898: setMemory_Data(5, 0xff);
 11958  06C5  30FF               	movlw	255
 11959  06C6  0020               	movlb	0	; select bank0
 11960  06C7  00E2               	movwf	??_Flash_Memory_Initialization
 11961  06C8  0862               	movf	??_Flash_Memory_Initialization,w
 11962  06C9  00A0               	movwf	setMemory_Data@data
 11963  06CA  3005               	movlw	5
 11964  06CB  319B  23B0  3186   	fcall	_setMemory_Data
 11965                           
 11966                           ;MCU_B1.c: 899: setMemory_Data(31, 0xaa);
 11967  06CE  30AA               	movlw	170
 11968  06CF  0020               	movlb	0	; select bank0
 11969  06D0  00E2               	movwf	??_Flash_Memory_Initialization
 11970  06D1  0862               	movf	??_Flash_Memory_Initialization,w
 11971  06D2  00A0               	movwf	setMemory_Data@data
 11972  06D3  301F               	movlw	31
 11973  06D4  319B  23B0  3186   	fcall	_setMemory_Data
 11974                           
 11975                           ;MCU_B1.c: 900: product->Data[21] = i;
 11976  06D7  0020               	movlb	0	; select bank0
 11977  06D8  0863               	movf	Flash_Memory_Initialization@i,w
 11978  06D9  00E2               	movwf	??_Flash_Memory_Initialization
 11979  06DA  086E               	movf	_product,w
 11980  06DB  3E15               	addlw	21
 11981  06DC  0086               	movwf	6
 11982  06DD  3002               	movlw	2	; select bank4/5
 11983  06DE  0087               	movwf	7
 11984  06DF  0862               	movf	??_Flash_Memory_Initialization,w
 11985  06E0  0081               	movwf	1
 11986                           
 11987                           ;MCU_B1.c: 901: product->Data[22] = i;
 11988  06E1  0863               	movf	Flash_Memory_Initialization@i,w
 11989  06E2  00E2               	movwf	??_Flash_Memory_Initialization
 11990  06E3  086E               	movf	_product,w
 11991  06E4  3E16               	addlw	22
 11992  06E5  0086               	movwf	6
 11993  06E6  3002               	movlw	2	; select bank4/5
 11994  06E7  0087               	movwf	7
 11995  06E8  0862               	movf	??_Flash_Memory_Initialization,w
 11996  06E9  0081               	movwf	1
 11997                           
 11998                           ;MCU_B1.c: 902: product->Data[23] = i;
 11999  06EA  0863               	movf	Flash_Memory_Initialization@i,w
 12000  06EB  00E2               	movwf	??_Flash_Memory_Initialization
 12001  06EC  086E               	movf	_product,w
 12002  06ED  3E17               	addlw	23
 12003  06EE  0086               	movwf	6
 12004  06EF  3002               	movlw	2	; select bank4/5
 12005  06F0  0087               	movwf	7
 12006  06F1  0862               	movf	??_Flash_Memory_Initialization,w
 12007  06F2  0081               	movwf	1
 12008                           
 12009                           ;MCU_B1.c: 903: GIE = 0;
 12010  06F3  138B               	bcf	11,7	;volatile
 12011                           
 12012                           ;MCU_B1.c: 904: Flash_Memory_Write();
 12013  06F4  3191  217B         	fcall	_Flash_Memory_Write
 12014                           
 12015                           ;MCU_B1.c: 905: GIE = 1;
 12016  06F6  178B               	bsf	11,7	;volatile
 12017                           
 12018                           ;MCU_B1.c: 906: myMain.FirstOpen = 1;
 12019  06F7  0021               	movlb	1	; select bank1
 12020  06F8  15A0               	bsf	_myMain^(0+128),3
 12021                           
 12022                           ;MCU_B1.c: 907: myMain.First = 1;
 12023  06F9  16A0               	bsf	_myMain^(0+128),5
 12024  06FA  0008               	return
 12025  06FB                     __end_of_Flash_Memory_Initialization:	
 12026                           
 12027                           	psect	text68
 12028  1BB0                     __ptext68:	
 12029 ;; *************** function _setMemory_Data *****************
 12030 ;; Defined at:
 12031 ;;		line 1022 in file "../src/MCU_B1.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  address         1    wreg     unsigned char 
 12034 ;;  data            1    0[BANK0 ] unsigned char 
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;  address         1    2[BANK0 ] unsigned char 
 12037 ;; Return value:  Size  Location     Type
 12038 ;;		None               void
 12039 ;; Registers used:
 12040 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12041 ;; Tracked objects:
 12042 ;;		On entry : 0/0
 12043 ;;		On exit  : 0/0
 12044 ;;		Unchanged: 0/0
 12045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12046 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;Total ram usage:        3 bytes
 12051 ;; Hardware stack levels used:    1
 12052 ;; Hardware stack levels required when called:    5
 12053 ;; This function calls:
 12054 ;;		Nothing
 12055 ;; This function is called by:
 12056 ;;		_Flash_Memory_Initialization
 12057 ;;		_Flash_Memory_Modify
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           
 12062                           ;psect for function _setMemory_Data
 12063  1BB0                     _setMemory_Data:	
 12064                           
 12065                           ;incstack = 0
 12066                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12067                           ;setMemory_Data@address stored from wreg
 12068  1BB0  0020               	movlb	0	; select bank0
 12069  1BB1  00A2               	movwf	setMemory_Data@address
 12070                           
 12071                           ;MCU_B1.c: 1023: Memory.Data[address] = data;
 12072  1BB2  0820               	movf	setMemory_Data@data,w
 12073  1BB3  00A1               	movwf	??_setMemory_Data
 12074  1BB4  0822               	movf	setMemory_Data@address,w
 12075  1BB5  3E20               	addlw	_Memory& (0+255)
 12076  1BB6  0086               	movwf	6
 12077  1BB7  3002               	movlw	2	; select bank4/5
 12078  1BB8  0087               	movwf	7
 12079  1BB9  0821               	movf	??_setMemory_Data,w
 12080  1BBA  0081               	movwf	1
 12081  1BBB  0008               	return
 12082  1BBC                     __end_of_setMemory_Data:	
 12083                           
 12084                           	psect	text69
 12085  117B                     __ptext69:	
 12086 ;; *************** function _Flash_Memory_Write *****************
 12087 ;; Defined at:
 12088 ;;		line 955 in file "../src/MCU_B1.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;		None
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;  i               1    1[BANK0 ] unsigned char 
 12093 ;; Return value:  Size  Location     Type
 12094 ;;		None               void
 12095 ;; Registers used:
 12096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12097 ;; Tracked objects:
 12098 ;;		On entry : 0/0
 12099 ;;		On exit  : 0/0
 12100 ;;		Unchanged: 0/0
 12101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;Total ram usage:        2 bytes
 12107 ;; Hardware stack levels used:    1
 12108 ;; Hardware stack levels required when called:    6
 12109 ;; This function calls:
 12110 ;;		_Flash_Memory_Unlock
 12111 ;; This function is called by:
 12112 ;;		_Flash_Memory_Initialization
 12113 ;;		_Flash_Memory_Modify
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function _Flash_Memory_Write
 12119  117B                     _Flash_Memory_Write:	
 12120                           
 12121                           ;MCU_B1.c: 956: char i = 0;
 12122                           
 12123                           ;incstack = 0
 12124                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12125  117B  0020               	movlb	0	; select bank0
 12126  117C  01A1               	clrf	Flash_Memory_Write@i
 12127                           
 12128                           ;MCU_B1.c: 957: CFGS = 0;
 12129  117D  0023               	movlb	3	; select bank3
 12130  117E  1315               	bcf	21,6	;volatile
 12131                           
 12132                           ;MCU_B1.c: 958: PMADRH = 0x30;
 12133  117F  3030               	movlw	48
 12134  1180  0092               	movwf	18	;volatile
 12135                           
 12136                           ;MCU_B1.c: 959: PMDATH = 0;
 12137  1181  0194               	clrf	20	;volatile
 12138                           
 12139                           ;MCU_B1.c: 960: FREE = 0;
 12140  1182  1215               	bcf	21,4	;volatile
 12141                           
 12142                           ;MCU_B1.c: 961: LWLO = 1;
 12143  1183  1695               	bsf	21,5	;volatile
 12144                           
 12145                           ;MCU_B1.c: 962: WREN = 1;
 12146  1184  1515               	bsf	21,2	;volatile
 12147                           
 12148                           ;MCU_B1.c: 963: for (i = 0; i < 32; i++) {
 12149  1185  0020               	movlb	0	; select bank0
 12150  1186  01A1               	clrf	Flash_Memory_Write@i
 12151  1187  3020               	movlw	32
 12152  1188  0221               	subwf	Flash_Memory_Write@i,w
 12153  1189  1803               	btfsc	3,0
 12154  118A  29A3               	goto	l1313
 12155  118B                     l7009:	
 12156                           
 12157                           ;MCU_B1.c: 964: PMADRL = i;
 12158  118B  0821               	movf	Flash_Memory_Write@i,w
 12159  118C  0023               	movlb	3	; select bank3
 12160  118D  0091               	movwf	17	;volatile
 12161                           
 12162                           ;MCU_B1.c: 965: PMDATL = Memory.Data[i];
 12163  118E  0020               	movlb	0	; select bank0
 12164  118F  0821               	movf	Flash_Memory_Write@i,w
 12165  1190  3E20               	addlw	_Memory& (0+255)
 12166  1191  0086               	movwf	6
 12167  1192  3002               	movlw	2	; select bank4/5
 12168  1193  0087               	movwf	7
 12169  1194  0801               	movf	1,w
 12170  1195  0023               	movlb	3	; select bank3
 12171  1196  0093               	movwf	19	;volatile
 12172                           
 12173                           ;MCU_B1.c: 966: Flash_Memory_Unlock();
 12174  1197  319B  2385  3191   	fcall	_Flash_Memory_Unlock
 12175  119A  3001               	movlw	1
 12176  119B  0020               	movlb	0	; select bank0
 12177  119C  00A0               	movwf	??_Flash_Memory_Write
 12178  119D  0820               	movf	??_Flash_Memory_Write,w
 12179  119E  07A1               	addwf	Flash_Memory_Write@i,f
 12180  119F  3020               	movlw	32
 12181  11A0  0221               	subwf	Flash_Memory_Write@i,w
 12182  11A1  1C03               	skipc
 12183  11A2  298B               	goto	l7009
 12184  11A3                     l1313:	
 12185                           
 12186                           ;MCU_B1.c: 967: }
 12187                           ;MCU_B1.c: 968: LWLO = 0;
 12188  11A3  0023               	movlb	3	; select bank3
 12189  11A4  1295               	bcf	21,5	;volatile
 12190                           
 12191                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 12192  11A5  319B  2385         	fcall	_Flash_Memory_Unlock
 12193                           
 12194                           ;MCU_B1.c: 970: WREN = 0;
 12195  11A7  0023               	movlb	3	; select bank3
 12196  11A8  1115               	bcf	21,2	;volatile
 12197  11A9  0008               	return
 12198  11AA                     __end_of_Flash_Memory_Write:	
 12199                           
 12200                           	psect	text70
 12201  1B85                     __ptext70:	
 12202 ;; *************** function _Flash_Memory_Unlock *****************
 12203 ;; Defined at:
 12204 ;;		line 934 in file "../src/MCU_B1.c"
 12205 ;; Parameters:    Size  Location     Type
 12206 ;;		None
 12207 ;; Auto vars:     Size  Location     Type
 12208 ;;		None
 12209 ;; Return value:  Size  Location     Type
 12210 ;;		None               void
 12211 ;; Registers used:
 12212 ;;		wreg
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;Total ram usage:        0 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; Hardware stack levels required when called:    5
 12225 ;; This function calls:
 12226 ;;		Nothing
 12227 ;; This function is called by:
 12228 ;;		_Flash_Memory_Write
 12229 ;;		_Flash_Memory_Erasing
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           
 12234                           ;psect for function _Flash_Memory_Unlock
 12235  1B85                     _Flash_Memory_Unlock:	
 12236                           
 12237                           ;MCU_B1.c: 935: PMCON2 = 0x55;
 12238                           
 12239                           ;incstack = 0
 12240                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12241  1B85  3055               	movlw	85
 12242  1B86  0023               	movlb	3	; select bank3
 12243  1B87  0096               	movwf	22	;volatile
 12244                           
 12245                           ;MCU_B1.c: 936: PMCON2 = 0xaa;
 12246  1B88  30AA               	movlw	170
 12247  1B89  0096               	movwf	22	;volatile
 12248                           
 12249                           ;MCU_B1.c: 937: WR = 1;
 12250  1B8A  1495               	bsf	21,1	;volatile
 12251                           
 12252                           ;MCU_B1.c: 938: __nop();
 12253  1B8B  0000               	nop
 12254                           
 12255                           ;MCU_B1.c: 939: __nop();
 12256  1B8C  0000               	nop
 12257  1B8D  0008               	return
 12258  1B8E                     __end_of_Flash_Memory_Unlock:	
 12259                           
 12260                           	psect	text71
 12261  1E66                     __ptext71:	
 12262 ;; *************** function _Flash_Memory_Read *****************
 12263 ;; Defined at:
 12264 ;;		line 943 in file "../src/MCU_B1.c"
 12265 ;; Parameters:    Size  Location     Type
 12266 ;;  address         1    wreg     unsigned char 
 12267 ;; Auto vars:     Size  Location     Type
 12268 ;;  address         1    2[BANK0 ] unsigned char 
 12269 ;;  ret             1    3[BANK0 ] unsigned char 
 12270 ;;  i               1    1[BANK0 ] unsigned char 
 12271 ;; Return value:  Size  Location     Type
 12272 ;;                  1    wreg      unsigned char 
 12273 ;; Registers used:
 12274 ;;		wreg, status,2
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12283 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12284 ;;Total ram usage:        4 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; Hardware stack levels required when called:    5
 12287 ;; This function calls:
 12288 ;;		Nothing
 12289 ;; This function is called by:
 12290 ;;		_Flash_Memory_Initialization
 12291 ;;		_Flash_Memory_Modify
 12292 ;; This function uses a non-reentrant model
 12293 ;;
 12294                           
 12295                           
 12296                           ;psect for function _Flash_Memory_Read
 12297  1E66                     _Flash_Memory_Read:	
 12298                           
 12299                           ;incstack = 0
 12300                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12301                           ;Flash_Memory_Read@address stored from wreg
 12302  1E66  0020               	movlb	0	; select bank0
 12303  1E67  00A2               	movwf	Flash_Memory_Read@address
 12304                           
 12305                           ;MCU_B1.c: 944: char i = 0, ret = 0;
 12306  1E68  01A1               	clrf	Flash_Memory_Read@i
 12307  1E69  01A3               	clrf	Flash_Memory_Read@ret
 12308                           
 12309                           ;MCU_B1.c: 945: PMADRH = 0x30;
 12310  1E6A  3030               	movlw	48
 12311  1E6B  0023               	movlb	3	; select bank3
 12312  1E6C  0092               	movwf	18	;volatile
 12313                           
 12314                           ;MCU_B1.c: 946: PMADRL = address;
 12315  1E6D  0020               	movlb	0	; select bank0
 12316  1E6E  0822               	movf	Flash_Memory_Read@address,w
 12317  1E6F  0023               	movlb	3	; select bank3
 12318  1E70  0091               	movwf	17	;volatile
 12319                           
 12320                           ;MCU_B1.c: 947: CFGS = 0;
 12321  1E71  1315               	bcf	21,6	;volatile
 12322                           
 12323                           ;MCU_B1.c: 948: RD = 1;
 12324  1E72  1415               	bsf	21,0	;volatile
 12325                           
 12326                           ;MCU_B1.c: 949: i = PMDATH;
 12327  1E73  0814               	movf	20,w	;volatile
 12328  1E74  0020               	movlb	0	; select bank0
 12329  1E75  00A0               	movwf	??_Flash_Memory_Read
 12330  1E76  0820               	movf	??_Flash_Memory_Read,w
 12331  1E77  00A1               	movwf	Flash_Memory_Read@i
 12332                           
 12333                           ;MCU_B1.c: 950: ret = PMDATL;
 12334  1E78  0023               	movlb	3	; select bank3
 12335  1E79  0813               	movf	19,w	;volatile
 12336  1E7A  0020               	movlb	0	; select bank0
 12337  1E7B  00A0               	movwf	??_Flash_Memory_Read
 12338  1E7C  0820               	movf	??_Flash_Memory_Read,w
 12339  1E7D  00A3               	movwf	Flash_Memory_Read@ret
 12340                           
 12341                           ;MCU_B1.c: 951: return ret;
 12342  1E7E  0823               	movf	Flash_Memory_Read@ret,w
 12343  1E7F  0008               	return
 12344  1E80                     __end_of_Flash_Memory_Read:	
 12345                           
 12346                           	psect	text72
 12347  120F                     __ptext72:	
 12348 ;; *************** function _DimmerLights_Main *****************
 12349 ;; Defined at:
 12350 ;;		line 406 in file "../src/Dimmer_B1.c"
 12351 ;; Parameters:    Size  Location     Type
 12352 ;;		None
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;		None
 12355 ;; Return value:  Size  Location     Type
 12356 ;;		None               void
 12357 ;; Registers used:
 12358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12359 ;; Tracked objects:
 12360 ;;		On entry : 0/0
 12361 ;;		On exit  : 0/0
 12362 ;;		Unchanged: 0/0
 12363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;Total ram usage:        4 bytes
 12369 ;; Hardware stack levels used:    1
 12370 ;; Hardware stack levels required when called:   10
 12371 ;; This function calls:
 12372 ;;		_getLoad_OK
 12373 ;;		_getMain_All_Error_Status
 12374 ;;		_getMain_LightsStatus
 12375 ;;		_setDimmerLights_Main
 12376 ;; This function is called by:
 12377 ;;		_main
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           
 12382                           ;psect for function _DimmerLights_Main
 12383  120F                     _DimmerLights_Main:	
 12384                           
 12385                           ;Dimmer_B1.c: 408: if (getMain_All_Error_Status(0) == 0) {
 12386                           
 12387                           ;incstack = 0
 12388                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12389  120F  3000               	movlw	0
 12390  1210  3191  21DC  3192   	fcall	_getMain_All_Error_Status
 12391  1213  3800               	iorlw	0
 12392  1214  1D03               	skipz
 12393  1215  2A39               	goto	l776
 12394                           
 12395                           ;Dimmer_B1.c: 409: if (Dimmer.LoadOK == 1) {
 12396  1216  0022               	movlb	2	; select bank2
 12397  1217  1CBE               	btfss	_Dimmer^(0+256),1
 12398  1218  2A3B               	goto	l7885
 12399                           
 12400                           ;Dimmer_B1.c: 410: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12401  1219  319B  2364  3192   	fcall	_getLoad_OK
 12402  121C  3A01               	xorlw	1
 12403  121D  1903               	skipnz
 12404  121E  2A30               	goto	l7881
 12405  121F  3191  214E  3192   	fcall	_getMain_LightsStatus
 12406  1222  3A00               	xorlw	0
 12407  1223  1903               	skipnz
 12408  1224  2A30               	goto	l7881
 12409  1225  0022               	movlb	2	; select bank2
 12410  1226  0C3E               	rrf	_Dimmer^(0+256),w
 12411  1227  3901               	andlw	1
 12412  1228  0020               	movlb	0	; select bank0
 12413  1229  00E7               	movwf	??_DimmerLights_Main
 12414  122A  01E8               	clrf	??_DimmerLights_Main+1
 12415  122B  0867               	movf	??_DimmerLights_Main,w
 12416  122C  00E9               	movwf	_DimmerLights_Main$2500
 12417  122D  0868               	movf	??_DimmerLights_Main+1,w
 12418  122E  00EA               	movwf	_DimmerLights_Main$2500+1
 12419  122F  2A33               	goto	l7883
 12420  1230                     l7881:	
 12421  1230  0020               	movlb	0	; select bank0
 12422  1231  01E9               	clrf	_DimmerLights_Main$2500
 12423  1232  01EA               	clrf	_DimmerLights_Main$2500+1
 12424  1233                     l7883:	
 12425  1233  0869               	movf	_DimmerLights_Main$2500,w
 12426  1234  0022               	movlb	2	; select bank2
 12427  1235  10BE               	bcf	_Dimmer^(0+256),1
 12428  1236  1D03               	skipz
 12429  1237  14BE               	bsf	_Dimmer^(0+256),1
 12430                           
 12431                           ;Dimmer_B1.c: 411: }
 12432                           ;Dimmer_B1.c: 412: } else {
 12433  1238  2A3B               	goto	l7885
 12434  1239                     l776:	
 12435                           
 12436                           ;Dimmer_B1.c: 413: Dimmer.LoadOK = 0;
 12437  1239  0022               	movlb	2	; select bank2
 12438  123A  10BE               	bcf	_Dimmer^(0+256),1
 12439  123B                     l7885:	
 12440                           
 12441                           ;Dimmer_B1.c: 414: }
 12442                           ;Dimmer_B1.c: 418: setDimmerLights_Main(1);
 12443  123B  3001               	movlw	1
 12444  123C  3196  2695  3192   	fcall	_setDimmerLights_Main
 12445                           
 12446                           ;Dimmer_B1.c: 422: setDimmerLights_Main(2);
 12447  123F  3002               	movlw	2
 12448  1240  3196  2695         	fcall	_setDimmerLights_Main
 12449  1242  0008               	return
 12450  1243                     __end_of_DimmerLights_Main:	
 12451                           
 12452                           	psect	text73
 12453  1695                     __ptext73:	
 12454 ;; *************** function _setDimmerLights_Main *****************
 12455 ;; Defined at:
 12456 ;;		line 432 in file "../src/Dimmer_B1.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;  lights          1    wreg     unsigned char 
 12459 ;; Auto vars:     Size  Location     Type
 12460 ;;  lights          1   70[BANK0 ] unsigned char 
 12461 ;; Return value:  Size  Location     Type
 12462 ;;		None               void
 12463 ;; Registers used:
 12464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12465 ;; Tracked objects:
 12466 ;;		On entry : 0/0
 12467 ;;		On exit  : 0/0
 12468 ;;		Unchanged: 0/0
 12469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;Total ram usage:        1 bytes
 12475 ;; Hardware stack levels used:    1
 12476 ;; Hardware stack levels required when called:    9
 12477 ;; This function calls:
 12478 ;;		_DimmerLightsPointSelect
 12479 ;;		_setBuz
 12480 ;;		_setDimmerLights
 12481 ;;		_setDimmerLights_Adj
 12482 ;; This function is called by:
 12483 ;;		_DimmerLights_Main
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           
 12488                           ;psect for function _setDimmerLights_Main
 12489  1695                     _setDimmerLights_Main:	
 12490                           
 12491                           ;incstack = 0
 12492                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12493                           ;setDimmerLights_Main@lights stored from wreg
 12494  1695  0020               	movlb	0	; select bank0
 12495  1696  00E6               	movwf	setDimmerLights_Main@lights
 12496                           
 12497                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
 12498  1697  0866               	movf	setDimmerLights_Main@lights,w
 12499  1698  319C  24EC  3196   	fcall	_DimmerLightsPointSelect
 12500                           
 12501                           ;Dimmer_B1.c: 434: if (DimmerLights->Trigger == 1) {
 12502  169B  0020               	movlb	0	; select bank0
 12503  169C  086F               	movf	_DimmerLights,w
 12504  169D  3E08               	addlw	8
 12505  169E  0086               	movwf	6
 12506  169F  3001               	movlw	1	; select bank2/3
 12507  16A0  0087               	movwf	7
 12508  16A1  1D01               	btfss	1,2
 12509  16A2  2EC0               	goto	l7355
 12510                           
 12511                           ;Dimmer_B1.c: 436: if (Dimmer.LoadOK == 0) {
 12512  16A3  0022               	movlb	2	; select bank2
 12513  16A4  18BE               	btfsc	_Dimmer^(0+256),1
 12514  16A5  0008               	return
 12515                           
 12516                           ;Dimmer_B1.c: 437: DimmerLights->Trigger = 0;
 12517  16A6  0020               	movlb	0	; select bank0
 12518  16A7  086F               	movf	_DimmerLights,w
 12519  16A8  3E08               	addlw	8
 12520  16A9  0086               	movwf	6
 12521  16AA  3001               	movlw	1	; select bank2/3
 12522  16AB  0087               	movwf	7
 12523  16AC  1101               	bcf	1,2
 12524                           
 12525                           ;Dimmer_B1.c: 439: if (DimmerLights->Switch == 1) {
 12526  16AD  086F               	movf	_DimmerLights,w
 12527  16AE  3E08               	addlw	8
 12528  16AF  0086               	movwf	6
 12529  16B0  3001               	movlw	1	; select bank2/3
 12530  16B1  0087               	movwf	7
 12531  16B2  1C81               	btfss	1,1
 12532  16B3  2EBA               	goto	l7353
 12533                           
 12534                           ;Dimmer_B1.c: 440: setDimmerLights(lights, 1);
 12535  16B4  01E2               	clrf	setDimmerLights@status
 12536  16B5  0AE2               	incf	setDimmerLights@status,f
 12537  16B6  0866               	movf	setDimmerLights_Main@lights,w
 12538  16B7  318C  24E5         	fcall	_setDimmerLights
 12539                           
 12540                           ;Dimmer_B1.c: 441: } else {
 12541  16B9  0008               	return
 12542  16BA                     l7353:	
 12543                           
 12544                           ;Dimmer_B1.c: 442: setDimmerLights(lights, 0);
 12545  16BA  0020               	movlb	0	; select bank0
 12546  16BB  01E2               	clrf	setDimmerLights@status
 12547  16BC  0866               	movf	setDimmerLights_Main@lights,w
 12548  16BD  318C  24E5         	fcall	_setDimmerLights
 12549                           
 12550                           ;Dimmer_B1.c: 443: }
 12551                           ;Dimmer_B1.c: 444: }
 12552                           ;Dimmer_B1.c: 445: } else {
 12553  16BF  0008               	return
 12554  16C0                     l7355:	
 12555                           
 12556                           ;Dimmer_B1.c: 446: if (DimmerLights->TriggerAdj == 1) {
 12557  16C0  0020               	movlb	0	; select bank0
 12558  16C1  086F               	movf	_DimmerLights,w
 12559  16C2  3E08               	addlw	8
 12560  16C3  0086               	movwf	6
 12561  16C4  3001               	movlw	1	; select bank2/3
 12562  16C5  0087               	movwf	7
 12563  16C6  1E01               	btfss	1,4
 12564  16C7  0008               	return
 12565                           
 12566                           ;Dimmer_B1.c: 447: if (Dimmer.LoadOK == 0) {
 12567  16C8  0022               	movlb	2	; select bank2
 12568  16C9  18BE               	btfsc	_Dimmer^(0+256),1
 12569  16CA  0008               	return
 12570                           
 12571                           ;Dimmer_B1.c: 448: DimmerLights->TriggerAdj = 0;
 12572  16CB  0020               	movlb	0	; select bank0
 12573  16CC  086F               	movf	_DimmerLights,w
 12574  16CD  3E08               	addlw	8
 12575  16CE  0086               	movwf	6
 12576  16CF  3001               	movlw	1	; select bank2/3
 12577  16D0  0087               	movwf	7
 12578  16D1  1201               	bcf	1,4
 12579                           
 12580                           ;Dimmer_B1.c: 449: if (DimmerLights->AdjGo == 1) {
 12581  16D2  086F               	movf	_DimmerLights,w
 12582  16D3  3E08               	addlw	8
 12583  16D4  0086               	movwf	6
 12584  16D5  3001               	movlw	1	; select bank2/3
 12585  16D6  0087               	movwf	7
 12586  16D7  1D81               	btfss	1,3
 12587  16D8  2EE8               	goto	l7365
 12588                           
 12589                           ;Dimmer_B1.c: 450: setDimmerLights_Adj(lights, 1);
 12590  16D9  01E2               	clrf	setDimmerLights_Adj@status
 12591  16DA  0AE2               	incf	setDimmerLights_Adj@status,f
 12592  16DB  0866               	movf	setDimmerLights_Main@lights,w
 12593  16DC  318A  22A5  3196   	fcall	_setDimmerLights_Adj
 12594                           
 12595                           ;Dimmer_B1.c: 451: setBuz(1, 100);
 12596  16DF  3064               	movlw	100
 12597  16E0  0020               	movlb	0	; select bank0
 12598  16E1  00A9               	movwf	setBuz@time
 12599  16E2  3000               	movlw	0
 12600  16E3  00AA               	movwf	setBuz@time+1
 12601  16E4  3001               	movlw	1
 12602  16E5  3196  263C         	fcall	_setBuz
 12603                           
 12604                           ;Dimmer_B1.c: 452: } else {
 12605  16E7  0008               	return
 12606  16E8                     l7365:	
 12607                           
 12608                           ;Dimmer_B1.c: 453: setDimmerLights_Adj(lights, 0);
 12609  16E8  0020               	movlb	0	; select bank0
 12610  16E9  01E2               	clrf	setDimmerLights_Adj@status
 12611  16EA  0866               	movf	setDimmerLights_Main@lights,w
 12612  16EB  318A  22A5         	fcall	_setDimmerLights_Adj
 12613  16ED  0008               	return
 12614  16EE                     __end_of_setDimmerLights_Main:	
 12615                           
 12616                           	psect	text74
 12617  0AA5                     __ptext74:	
 12618 ;; *************** function _setDimmerLights_Adj *****************
 12619 ;; Defined at:
 12620 ;;		line 732 in file "../src/Dimmer_B1.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;  lights          1    wreg     unsigned char 
 12623 ;;  status          1   66[BANK0 ] unsigned char 
 12624 ;; Auto vars:     Size  Location     Type
 12625 ;;  lights          1   69[BANK0 ] unsigned char 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;		None               void
 12628 ;; Registers used:
 12629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12635 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;Total ram usage:        4 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:    8
 12642 ;; This function calls:
 12643 ;;		_DimmerLightsPointSelect
 12644 ;;		_getMain_All_Error_Status
 12645 ;;		_setPercentValue
 12646 ;;		_setRF_DimmerLights
 12647 ;;		_setTxData
 12648 ;; This function is called by:
 12649 ;;		_setDimmerLights_Main
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           
 12654                           ;psect for function _setDimmerLights_Adj
 12655  0AA5                     _setDimmerLights_Adj:	
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12659                           ;setDimmerLights_Adj@lights stored from wreg
 12660  0AA5  0020               	movlb	0	; select bank0
 12661  0AA6  00E5               	movwf	setDimmerLights_Adj@lights
 12662                           
 12663                           ;Dimmer_B1.c: 733: DimmerLightsPointSelect(lights);
 12664  0AA7  0865               	movf	setDimmerLights_Adj@lights,w
 12665  0AA8  319C  24EC  318A   	fcall	_DimmerLightsPointSelect
 12666                           
 12667                           ;Dimmer_B1.c: 734: if (status == 1) {
 12668  0AAB  0020               	movlb	0	; select bank0
 12669  0AAC  0862               	movf	setDimmerLights_Adj@status,w
 12670  0AAD  3A01               	xorlw	1
 12671  0AAE  1D03               	skipz
 12672  0AAF  2ABB               	goto	l6919
 12673                           
 12674                           ;Dimmer_B1.c: 735: DimmerLights->AdjFlag = 1;
 12675  0AB0  086F               	movf	_DimmerLights,w
 12676  0AB1  0086               	movwf	6
 12677  0AB2  3001               	movlw	1	; select bank2/3
 12678  0AB3  0087               	movwf	7
 12679  0AB4  1581               	bsf	1,3
 12680                           
 12681                           ;Dimmer_B1.c: 736: DimmerLights->Signal = 1;
 12682  0AB5  086F               	movf	_DimmerLights,w
 12683  0AB6  0086               	movwf	6
 12684  0AB7  3001               	movlw	1	; select bank2/3
 12685  0AB8  0087               	movwf	7
 12686  0AB9  1481               	bsf	1,1
 12687                           
 12688                           ;Dimmer_B1.c: 737: } else {
 12689  0ABA  0008               	return
 12690  0ABB                     l6919:	
 12691                           
 12692                           ;Dimmer_B1.c: 738: if (DimmerLights->AdjFlag == 1) {
 12693  0ABB  086F               	movf	_DimmerLights,w
 12694  0ABC  0086               	movwf	6
 12695  0ABD  3001               	movlw	1	; select bank2/3
 12696  0ABE  0087               	movwf	7
 12697  0ABF  1D81               	btfss	1,3
 12698  0AC0  0008               	return
 12699                           
 12700                           ;Dimmer_B1.c: 739: DimmerLights->Signal = 0;
 12701  0AC1  086F               	movf	_DimmerLights,w
 12702  0AC2  0086               	movwf	6
 12703  0AC3  3001               	movlw	1	; select bank2/3
 12704  0AC4  0087               	movwf	7
 12705  0AC5  1081               	bcf	1,1
 12706                           
 12707                           ;Dimmer_B1.c: 740: DimmerLights->AdjFlag = 0;
 12708  0AC6  086F               	movf	_DimmerLights,w
 12709  0AC7  0086               	movwf	6
 12710  0AC8  3001               	movlw	1	; select bank2/3
 12711  0AC9  0087               	movwf	7
 12712  0ACA  1181               	bcf	1,3
 12713                           
 12714                           ;Dimmer_B1.c: 741: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12715  0ACB  086F               	movf	_DimmerLights,w
 12716  0ACC  3E04               	addlw	4
 12717  0ACD  0086               	movwf	6
 12718  0ACE  3001               	movlw	1	; select bank2/3
 12719  0ACF  0087               	movwf	7
 12720  0AD0  0801               	movf	1,w
 12721  0AD1  00E3               	movwf	??_setDimmerLights_Adj
 12722  0AD2  086F               	movf	_DimmerLights,w
 12723  0AD3  3E05               	addlw	5
 12724  0AD4  0086               	movwf	6
 12725  0AD5  3001               	movlw	1	; select bank2/3
 12726  0AD6  0087               	movwf	7
 12727  0AD7  0863               	movf	??_setDimmerLights_Adj,w
 12728  0AD8  0081               	movwf	1
 12729                           
 12730                           ;Dimmer_B1.c: 742: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12731  0AD9  086F               	movf	_DimmerLights,w
 12732  0ADA  3E04               	addlw	4
 12733  0ADB  0086               	movwf	6
 12734  0ADC  3001               	movlw	1	; select bank2/3
 12735  0ADD  0087               	movwf	7
 12736  0ADE  0801               	movf	1,w
 12737  0ADF  3189  21DB  318A   	fcall	_setPercentValue
 12738  0AE2  0020               	movlb	0	; select bank0
 12739  0AE3  00E3               	movwf	??_setDimmerLights_Adj
 12740  0AE4  0865               	movf	setDimmerLights_Adj@lights,w
 12741  0AE5  3E14               	addlw	20
 12742  0AE6  076E               	addwf	_product,w
 12743  0AE7  00E4               	movwf	??_setDimmerLights_Adj+1
 12744  0AE8  0864               	movf	??_setDimmerLights_Adj+1,w
 12745  0AE9  0086               	movwf	6
 12746  0AEA  3002               	movlw	2	; select bank4/5
 12747  0AEB  0087               	movwf	7
 12748  0AEC  0863               	movf	??_setDimmerLights_Adj,w
 12749  0AED  0081               	movwf	1
 12750                           
 12751                           ;Dimmer_B1.c: 752: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12752  0AEE  3000               	movlw	0
 12753  0AEF  3191  21DC  318A   	fcall	_getMain_All_Error_Status
 12754  0AF2  3A00               	xorlw	0
 12755  0AF3  3000               	movlw	0
 12756  0AF4  1903               	skipnz
 12757  0AF5  3001               	movlw	1
 12758  0AF6  0020               	movlb	0	; select bank0
 12759  0AF7  00E3               	movwf	??_setDimmerLights_Adj
 12760  0AF8  0DE3               	rlf	??_setDimmerLights_Adj,f
 12761  0AF9  0022               	movlb	2	; select bank2
 12762  0AFA  083E               	movf	_Dimmer^(0+256),w
 12763  0AFB  0020               	movlb	0	; select bank0
 12764  0AFC  0663               	xorwf	??_setDimmerLights_Adj,w
 12765  0AFD  39FD               	andlw	-3
 12766  0AFE  0663               	xorwf	??_setDimmerLights_Adj,w
 12767  0AFF  0022               	movlb	2	; select bank2
 12768  0B00  00BE               	movwf	_Dimmer^(0+256)
 12769                           
 12770                           ;Dimmer_B1.c: 755: setRF_DimmerLights(lights, 1);
 12771  0B01  0020               	movlb	0	; select bank0
 12772  0B02  01A0               	clrf	setRF_DimmerLights@on
 12773  0B03  0AA0               	incf	setRF_DimmerLights@on,f
 12774  0B04  0865               	movf	setDimmerLights_Adj@lights,w
 12775  0B05  3197  2748  318A   	fcall	_setRF_DimmerLights
 12776                           
 12777                           ;Dimmer_B1.c: 756: setTxData();
 12778  0B08  3186  26FB         	fcall	_setTxData
 12779  0B0A  0008               	return
 12780  0B0B                     __end_of_setDimmerLights_Adj:	
 12781                           
 12782                           	psect	text75
 12783  0CE5                     __ptext75:	
 12784 ;; *************** function _setDimmerLights *****************
 12785 ;; Defined at:
 12786 ;;		line 627 in file "../src/Dimmer_B1.c"
 12787 ;; Parameters:    Size  Location     Type
 12788 ;;  lights          1    wreg     unsigned char 
 12789 ;;  status          1   66[BANK0 ] unsigned char 
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;  lights          1   69[BANK0 ] unsigned char 
 12792 ;; Return value:  Size  Location     Type
 12793 ;;		None               void
 12794 ;; Registers used:
 12795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12796 ;; Tracked objects:
 12797 ;;		On entry : 0/0
 12798 ;;		On exit  : 0/0
 12799 ;;		Unchanged: 0/0
 12800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12801 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;Total ram usage:        4 bytes
 12806 ;; Hardware stack levels used:    1
 12807 ;; Hardware stack levels required when called:    8
 12808 ;; This function calls:
 12809 ;;		_DimmerLightsPointSelect
 12810 ;;		_getMain_All_Error_Status
 12811 ;;		_setDimmerLights_Line
 12812 ;;		_setLED
 12813 ;;		_setPercentValue
 12814 ;;		_setRF_DimmerLights
 12815 ;;		_setTxData
 12816 ;; This function is called by:
 12817 ;;		_setDimmerLights_Main
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           
 12822                           ;psect for function _setDimmerLights
 12823  0CE5                     _setDimmerLights:	
 12824                           
 12825                           ;incstack = 0
 12826                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12827                           ;setDimmerLights@lights stored from wreg
 12828  0CE5  0020               	movlb	0	; select bank0
 12829  0CE6  00E5               	movwf	setDimmerLights@lights
 12830                           
 12831                           ;Dimmer_B1.c: 628: DimmerLightsPointSelect(lights);
 12832  0CE7  0865               	movf	setDimmerLights@lights,w
 12833  0CE8  319C  24EC  318C   	fcall	_DimmerLightsPointSelect
 12834                           
 12835                           ;Dimmer_B1.c: 631: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12836  0CEB  3000               	movlw	0
 12837  0CEC  3191  21DC  318C   	fcall	_getMain_All_Error_Status
 12838  0CEF  3A00               	xorlw	0
 12839  0CF0  3000               	movlw	0
 12840  0CF1  1903               	skipnz
 12841  0CF2  3001               	movlw	1
 12842  0CF3  0020               	movlb	0	; select bank0
 12843  0CF4  00E3               	movwf	??_setDimmerLights
 12844  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12845  0CF6  0022               	movlb	2	; select bank2
 12846  0CF7  083E               	movf	_Dimmer^(0+256),w
 12847  0CF8  0020               	movlb	0	; select bank0
 12848  0CF9  0663               	xorwf	??_setDimmerLights,w
 12849  0CFA  39FD               	andlw	-3
 12850  0CFB  0663               	xorwf	??_setDimmerLights,w
 12851  0CFC  0022               	movlb	2	; select bank2
 12852  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12853                           
 12854                           ;Dimmer_B1.c: 635: if (status == 1) {
 12855  0CFE  0020               	movlb	0	; select bank0
 12856  0CFF  0862               	movf	setDimmerLights@status,w
 12857  0D00  3A01               	xorlw	1
 12858  0D01  1D03               	skipz
 12859  0D02  2D33               	goto	l6899
 12860                           
 12861                           ;Dimmer_B1.c: 636: DimmerLights->Loop = 1;
 12862  0D03  086F               	movf	_DimmerLights,w
 12863  0D04  3E09               	addlw	9
 12864  0D05  0086               	movwf	6
 12865  0D06  3001               	movlw	1	; select bank2/3
 12866  0D07  0087               	movwf	7
 12867  0D08  1481               	bsf	1,1
 12868                           
 12869                           ;Dimmer_B1.c: 637: setLED(lights, 0);
 12870  0D09  01A2               	clrf	setLED@command
 12871  0D0A  0865               	movf	setDimmerLights@lights,w
 12872  0D0B  3195  2540  318C   	fcall	_setLED
 12873                           
 12874                           ;Dimmer_B1.c: 639: setDimmerLights_Line(lights);
 12875  0D0E  0020               	movlb	0	; select bank0
 12876  0D0F  0865               	movf	setDimmerLights@lights,w
 12877  0D10  319D  25C6  318C   	fcall	_setDimmerLights_Line
 12878                           
 12879                           ;Dimmer_B1.c: 640: DimmerLights->StatusFlag = 1;
 12880  0D13  0020               	movlb	0	; select bank0
 12881  0D14  086F               	movf	_DimmerLights,w
 12882  0D15  0086               	movwf	6
 12883  0D16  3001               	movlw	1	; select bank2/3
 12884  0D17  0087               	movwf	7
 12885  0D18  1701               	bsf	1,6
 12886                           
 12887                           ;Dimmer_B1.c: 647: DimmerLights->DimmingValue = ((char)(80*0.8));
 12888  0D19  3040               	movlw	64
 12889  0D1A  00E3               	movwf	??_setDimmerLights
 12890  0D1B  086F               	movf	_DimmerLights,w
 12891  0D1C  3E04               	addlw	4
 12892  0D1D  0086               	movwf	6
 12893  0D1E  3001               	movlw	1	; select bank2/3
 12894  0D1F  0087               	movwf	7
 12895  0D20  0863               	movf	??_setDimmerLights,w
 12896  0D21  0081               	movwf	1
 12897                           
 12898                           ;Dimmer_B1.c: 648: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12899  0D22  3040               	movlw	64
 12900  0D23  3189  21DB  318C   	fcall	_setPercentValue
 12901  0D26  0020               	movlb	0	; select bank0
 12902  0D27  00E3               	movwf	??_setDimmerLights
 12903  0D28  0865               	movf	setDimmerLights@lights,w
 12904  0D29  3E14               	addlw	20
 12905  0D2A  076E               	addwf	_product,w
 12906  0D2B  00E4               	movwf	??_setDimmerLights+1
 12907  0D2C  0864               	movf	??_setDimmerLights+1,w
 12908  0D2D  0086               	movwf	6
 12909  0D2E  3002               	movlw	2	; select bank4/5
 12910  0D2F  0087               	movwf	7
 12911  0D30  0863               	movf	??_setDimmerLights,w
 12912  0D31  0081               	movwf	1
 12913  0D32  2D5A               	goto	l6911
 12914  0D33                     l6899:	
 12915                           ;Dimmer_B1.c: 658: } else {
 12916                           
 12917                           ;Dimmer_B1.c: 656: DimmerLights->DimmingTimeValue = 7;
 12918                           
 12919                           
 12920                           ;Dimmer_B1.c: 659: DimmerLights->StatusFlag = 0;
 12921  0D33  086F               	movf	_DimmerLights,w
 12922  0D34  0086               	movwf	6
 12923  0D35  3001               	movlw	1	; select bank2/3
 12924  0D36  0087               	movwf	7
 12925  0D37  1301               	bcf	1,6
 12926                           
 12927                           ;Dimmer_B1.c: 660: DimmerLights->Loop = 0;
 12928  0D38  086F               	movf	_DimmerLights,w
 12929  0D39  3E09               	addlw	9
 12930  0D3A  0086               	movwf	6
 12931  0D3B  3001               	movlw	1	; select bank2/3
 12932  0D3C  0087               	movwf	7
 12933  0D3D  1081               	bcf	1,1
 12934                           
 12935                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12936  0D3E  01A2               	clrf	setLED@command
 12937  0D3F  0AA2               	incf	setLED@command,f
 12938  0D40  0865               	movf	setDimmerLights@lights,w
 12939  0D41  3195  2540  318C   	fcall	_setLED
 12940                           
 12941                           ;Dimmer_B1.c: 669: DimmerLights->MosfetClose = 1;
 12942  0D44  0020               	movlb	0	; select bank0
 12943  0D45  086F               	movf	_DimmerLights,w
 12944  0D46  3E08               	addlw	8
 12945  0D47  0086               	movwf	6
 12946  0D48  3001               	movlw	1	; select bank2/3
 12947  0D49  0087               	movwf	7
 12948  0D4A  1781               	bsf	1,7
 12949                           
 12950                           ;Dimmer_B1.c: 672: DimmerLights->AdjFlag = 0;
 12951  0D4B  086F               	movf	_DimmerLights,w
 12952  0D4C  0086               	movwf	6
 12953  0D4D  3001               	movlw	1	; select bank2/3
 12954  0D4E  0087               	movwf	7
 12955  0D4F  1181               	bcf	1,3
 12956                           
 12957                           ;Dimmer_B1.c: 673: DimmerLights->AdjStatus = 0;
 12958  0D50  086F               	movf	_DimmerLights,w
 12959  0D51  0086               	movwf	6
 12960  0D52  3001               	movlw	1	; select bank2/3
 12961  0D53  0087               	movwf	7
 12962  0D54  1201               	bcf	1,4
 12963                           
 12964                           ;Dimmer_B1.c: 674: DimmerLights->AdjRF = 0;
 12965  0D55  086F               	movf	_DimmerLights,w
 12966  0D56  0086               	movwf	6
 12967  0D57  3001               	movlw	1	; select bank2/3
 12968  0D58  0087               	movwf	7
 12969  0D59  1101               	bcf	1,2
 12970  0D5A                     l6911:	
 12971                           
 12972                           ;Dimmer_B1.c: 675: DimmerLights->DimmingTimeValue = 7;
 12973  0D5A  3007               	movlw	7
 12974  0D5B  00E3               	movwf	??_setDimmerLights
 12975  0D5C  086F               	movf	_DimmerLights,w
 12976  0D5D  3E02               	addlw	2
 12977  0D5E  0086               	movwf	6
 12978  0D5F  3001               	movlw	1	; select bank2/3
 12979  0D60  0087               	movwf	7
 12980  0D61  0863               	movf	??_setDimmerLights,w
 12981  0D62  0081               	movwf	1
 12982                           
 12983                           ;Dimmer_B1.c: 677: }
 12984                           ;Dimmer_B1.c: 678: setRF_DimmerLights(lights, status);
 12985  0D63  0862               	movf	setDimmerLights@status,w
 12986  0D64  00E3               	movwf	??_setDimmerLights
 12987  0D65  0863               	movf	??_setDimmerLights,w
 12988  0D66  00A0               	movwf	setRF_DimmerLights@on
 12989  0D67  0865               	movf	setDimmerLights@lights,w
 12990  0D68  3197  2748  318C   	fcall	_setRF_DimmerLights
 12991                           
 12992                           ;Dimmer_B1.c: 679: setTxData();
 12993  0D6B  3186  26FB         	fcall	_setTxData
 12994  0D6D  0008               	return
 12995  0D6E                     __end_of_setDimmerLights:	
 12996                           
 12997                           	psect	text76
 12998  06FB                     __ptext76:	
 12999 ;; *************** function _setTxData *****************
 13000 ;; Defined at:
 13001 ;;		line 210 in file "../src/RF_Control_B1.c"
 13002 ;; Parameters:    Size  Location     Type
 13003 ;;		None
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;  i               1    0        unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;		None               void
 13008 ;; Registers used:
 13009 ;;		wreg, fsr1l, fsr1h
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;Total ram usage:        1 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    5
 13022 ;; This function calls:
 13023 ;;		Nothing
 13024 ;; This function is called by:
 13025 ;;		_setDimmerLights
 13026 ;;		_setDimmerLights_Adj
 13027 ;;		_getRxData
 13028 ;;		_setControl_Lights_Table
 13029 ;;		_setRFSW_Control
 13030 ;;		_setRFSW_AdjControl
 13031 ;; This function uses a non-reentrant model
 13032 ;;
 13033                           
 13034                           
 13035                           ;psect for function _setTxData
 13036  06FB                     _setTxData:	
 13037                           
 13038                           ;RF_Control_B1.c: 211: char i;
 13039                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 13040                           
 13041                           ;incstack = 0
 13042                           ; Regs used in _setTxData: [wregfsr1]
 13043  06FB  0021               	movlb	1	; select bank1
 13044  06FC  1C3B               	btfss	_RF1^(0+128),0
 13045  06FD  0008               	return
 13046                           
 13047                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 13048  06FE  193B               	btfsc	_RF1^(0+128),2
 13049  06FF  0008               	return
 13050                           
 13051                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 13052  0700  153B               	bsf	_RF1^(0+128),2
 13053                           
 13054                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 13055  0701  3014               	movlw	20
 13056  0702  00C2               	movwf	(_RF1^(0+128)+7)
 13057  0703  3000               	movlw	0
 13058  0704  00C3               	movwf	(_RF1^(0+128)+8)
 13059                           
 13060                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 13061  0705  3063               	movlw	99
 13062  0706  0020               	movlb	0	; select bank0
 13063  0707  00A0               	movwf	??_setTxData
 13064  0708  0820               	movf	??_setTxData,w
 13065  0709  0022               	movlb	2	; select bank2
 13066  070A  00A0               	movwf	_RF_Data^(0+256)
 13067                           
 13068                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 13069  070B  3002               	movlw	2
 13070  070C  0020               	movlb	0	; select bank0
 13071  070D  00A0               	movwf	??_setTxData
 13072  070E  0820               	movf	??_setTxData,w
 13073  070F  0022               	movlb	2	; select bank2
 13074  0710  00A1               	movwf	(_RF_Data^(0+256)+1)
 13075                           
 13076                           ;RF_Control_B1.c: 227: RF_Data[2] = product->Data[2];
 13077  0711  0020               	movlb	0	; select bank0
 13078  0712  086E               	movf	_product,w
 13079  0713  0086               	movwf	6
 13080  0714  3002               	movlw	2	; select bank4/5
 13081  0715  0087               	movwf	7
 13082  0716  3002               	movlw	2	; select bank4/5
 13083  0717  3F42               	moviw [2]fsr1
 13084  0718  0022               	movlb	2	; select bank2
 13085  0719  00A2               	movwf	(_RF_Data^(0+256)+2)
 13086                           
 13087                           ;RF_Control_B1.c: 228: RF_Data[3] = product->Data[3];
 13088  071A  0020               	movlb	0	; select bank0
 13089  071B  086E               	movf	_product,w
 13090  071C  0086               	movwf	6
 13091  071D  3002               	movlw	2	; select bank4/5
 13092  071E  0087               	movwf	7
 13093  071F  3002               	movlw	2	; select bank4/5
 13094  0720  3F43               	moviw [3]fsr1
 13095  0721  0022               	movlb	2	; select bank2
 13096  0722  00A3               	movwf	(_RF_Data^(0+256)+3)
 13097                           
 13098                           ;RF_Control_B1.c: 229: RF_Data[4] = product->Data[4];
 13099  0723  0020               	movlb	0	; select bank0
 13100  0724  086E               	movf	_product,w
 13101  0725  0086               	movwf	6
 13102  0726  3002               	movlw	2	; select bank4/5
 13103  0727  0087               	movwf	7
 13104  0728  3002               	movlw	2	; select bank4/5
 13105  0729  3F44               	moviw [4]fsr1
 13106  072A  0022               	movlb	2	; select bank2
 13107  072B  00A4               	movwf	(_RF_Data^(0+256)+4)
 13108                           
 13109                           ;RF_Control_B1.c: 230: RF_Data[5] = product->Data[5];
 13110  072C  0020               	movlb	0	; select bank0
 13111  072D  086E               	movf	_product,w
 13112  072E  0086               	movwf	6
 13113  072F  3002               	movlw	2	; select bank4/5
 13114  0730  0087               	movwf	7
 13115  0731  3002               	movlw	2	; select bank4/5
 13116  0732  3F45               	moviw [5]fsr1
 13117  0733  0022               	movlb	2	; select bank2
 13118  0734  00A5               	movwf	(_RF_Data^(0+256)+5)
 13119                           
 13120                           ;RF_Control_B1.c: 231: RF_Data[6] = product->Data[6];
 13121  0735  0020               	movlb	0	; select bank0
 13122  0736  086E               	movf	_product,w
 13123  0737  0086               	movwf	6
 13124  0738  3002               	movlw	2	; select bank4/5
 13125  0739  0087               	movwf	7
 13126  073A  3002               	movlw	2	; select bank4/5
 13127  073B  3F46               	moviw [6]fsr1
 13128  073C  0022               	movlb	2	; select bank2
 13129  073D  00A6               	movwf	(_RF_Data^(0+256)+6)
 13130                           
 13131                           ;RF_Control_B1.c: 232: RF_Data[7] = product->Data[7];
 13132  073E  0020               	movlb	0	; select bank0
 13133  073F  086E               	movf	_product,w
 13134  0740  0086               	movwf	6
 13135  0741  3002               	movlw	2	; select bank4/5
 13136  0742  0087               	movwf	7
 13137  0743  3002               	movlw	2	; select bank4/5
 13138  0744  3F47               	moviw [7]fsr1
 13139  0745  0022               	movlb	2	; select bank2
 13140  0746  00A7               	movwf	(_RF_Data^(0+256)+7)
 13141                           
 13142                           ;RF_Control_B1.c: 233: RF_Data[8] = product->Data[8];
 13143  0747  0020               	movlb	0	; select bank0
 13144  0748  086E               	movf	_product,w
 13145  0749  0086               	movwf	6
 13146  074A  3002               	movlw	2	; select bank4/5
 13147  074B  0087               	movwf	7
 13148  074C  3002               	movlw	2	; select bank4/5
 13149  074D  3F48               	moviw [8]fsr1
 13150  074E  0022               	movlb	2	; select bank2
 13151  074F  00A8               	movwf	(_RF_Data^(0+256)+8)
 13152                           
 13153                           ;RF_Control_B1.c: 234: RF_Data[9] = product->Data[9];
 13154  0750  0020               	movlb	0	; select bank0
 13155  0751  086E               	movf	_product,w
 13156  0752  0086               	movwf	6
 13157  0753  3002               	movlw	2	; select bank4/5
 13158  0754  0087               	movwf	7
 13159  0755  3002               	movlw	2	; select bank4/5
 13160  0756  3F49               	moviw [9]fsr1
 13161  0757  0022               	movlb	2	; select bank2
 13162  0758  00A9               	movwf	(_RF_Data^(0+256)+9)
 13163                           
 13164                           ;RF_Control_B1.c: 235: RF_Data[10] = product->Data[10];
 13165  0759  0020               	movlb	0	; select bank0
 13166  075A  086E               	movf	_product,w
 13167  075B  0086               	movwf	6
 13168  075C  3002               	movlw	2	; select bank4/5
 13169  075D  0087               	movwf	7
 13170  075E  3002               	movlw	2	; select bank4/5
 13171  075F  3F4A               	moviw [10]fsr1
 13172  0760  0022               	movlb	2	; select bank2
 13173  0761  00AA               	movwf	(_RF_Data^(0+256)+10)
 13174                           
 13175                           ;RF_Control_B1.c: 236: RF_Data[11] = product->Data[11];
 13176  0762  0020               	movlb	0	; select bank0
 13177  0763  086E               	movf	_product,w
 13178  0764  0086               	movwf	6
 13179  0765  3002               	movlw	2	; select bank4/5
 13180  0766  0087               	movwf	7
 13181  0767  3002               	movlw	2	; select bank4/5
 13182  0768  3F4B               	moviw [11]fsr1
 13183  0769  0022               	movlb	2	; select bank2
 13184  076A  00AB               	movwf	(_RF_Data^(0+256)+11)
 13185                           
 13186                           ;RF_Control_B1.c: 237: RF_Data[12] = product->Data[12];
 13187  076B  0020               	movlb	0	; select bank0
 13188  076C  086E               	movf	_product,w
 13189  076D  0086               	movwf	6
 13190  076E  3002               	movlw	2	; select bank4/5
 13191  076F  0087               	movwf	7
 13192  0770  3002               	movlw	2	; select bank4/5
 13193  0771  3F4C               	moviw [12]fsr1
 13194  0772  0022               	movlb	2	; select bank2
 13195  0773  00AC               	movwf	(_RF_Data^(0+256)+12)
 13196                           
 13197                           ;RF_Control_B1.c: 238: RF_Data[13] = product->Data[13];
 13198  0774  0020               	movlb	0	; select bank0
 13199  0775  086E               	movf	_product,w
 13200  0776  0086               	movwf	6
 13201  0777  3002               	movlw	2	; select bank4/5
 13202  0778  0087               	movwf	7
 13203  0779  3002               	movlw	2	; select bank4/5
 13204  077A  3F4D               	moviw [13]fsr1
 13205  077B  0022               	movlb	2	; select bank2
 13206  077C  00AD               	movwf	(_RF_Data^(0+256)+13)
 13207                           
 13208                           ;RF_Control_B1.c: 239: RF_Data[14] = product->Data[14];
 13209  077D  0020               	movlb	0	; select bank0
 13210  077E  086E               	movf	_product,w
 13211  077F  0086               	movwf	6
 13212  0780  3002               	movlw	2	; select bank4/5
 13213  0781  0087               	movwf	7
 13214  0782  3002               	movlw	2	; select bank4/5
 13215  0783  3F4E               	moviw [14]fsr1
 13216  0784  0022               	movlb	2	; select bank2
 13217  0785  00AE               	movwf	(_RF_Data^(0+256)+14)
 13218                           
 13219                           ;RF_Control_B1.c: 240: RF_Data[15] = product->Data[15];
 13220  0786  0020               	movlb	0	; select bank0
 13221  0787  086E               	movf	_product,w
 13222  0788  0086               	movwf	6
 13223  0789  3002               	movlw	2	; select bank4/5
 13224  078A  0087               	movwf	7
 13225  078B  3002               	movlw	2	; select bank4/5
 13226  078C  3F4F               	moviw [15]fsr1
 13227  078D  0022               	movlb	2	; select bank2
 13228  078E  00AF               	movwf	(_RF_Data^(0+256)+15)
 13229                           
 13230                           ;RF_Control_B1.c: 241: RF_Data[16] = product->Data[16];
 13231  078F  0020               	movlb	0	; select bank0
 13232  0790  086E               	movf	_product,w
 13233  0791  0086               	movwf	6
 13234  0792  3002               	movlw	2	; select bank4/5
 13235  0793  0087               	movwf	7
 13236  0794  3002               	movlw	2	; select bank4/5
 13237  0795  3F50               	moviw [16]fsr1
 13238  0796  0022               	movlb	2	; select bank2
 13239  0797  00B0               	movwf	(_RF_Data^(0+256)+16)
 13240                           
 13241                           ;RF_Control_B1.c: 242: RF_Data[17] = product->Data[17];
 13242  0798  0020               	movlb	0	; select bank0
 13243  0799  086E               	movf	_product,w
 13244  079A  0086               	movwf	6
 13245  079B  3002               	movlw	2	; select bank4/5
 13246  079C  0087               	movwf	7
 13247  079D  3002               	movlw	2	; select bank4/5
 13248  079E  3F51               	moviw [17]fsr1
 13249  079F  0022               	movlb	2	; select bank2
 13250  07A0  00B1               	movwf	(_RF_Data^(0+256)+17)
 13251                           
 13252                           ;RF_Control_B1.c: 243: RF_Data[18] = product->Data[18];
 13253  07A1  0020               	movlb	0	; select bank0
 13254  07A2  086E               	movf	_product,w
 13255  07A3  0086               	movwf	6
 13256  07A4  3002               	movlw	2	; select bank4/5
 13257  07A5  0087               	movwf	7
 13258  07A6  3002               	movlw	2	; select bank4/5
 13259  07A7  3F52               	moviw [18]fsr1
 13260  07A8  0022               	movlb	2	; select bank2
 13261  07A9  00B2               	movwf	(_RF_Data^(0+256)+18)
 13262                           
 13263                           ;RF_Control_B1.c: 244: RF_Data[19] = product->Data[19];
 13264  07AA  0020               	movlb	0	; select bank0
 13265  07AB  086E               	movf	_product,w
 13266  07AC  0086               	movwf	6
 13267  07AD  3002               	movlw	2	; select bank4/5
 13268  07AE  0087               	movwf	7
 13269  07AF  3002               	movlw	2	; select bank4/5
 13270  07B0  3F53               	moviw [19]fsr1
 13271  07B1  0022               	movlb	2	; select bank2
 13272  07B2  00B3               	movwf	(_RF_Data^(0+256)+19)
 13273                           
 13274                           ;RF_Control_B1.c: 245: RF_Data[20] = 210;
 13275  07B3  30D2               	movlw	210
 13276  07B4  0020               	movlb	0	; select bank0
 13277  07B5  00A0               	movwf	??_setTxData
 13278  07B6  0820               	movf	??_setTxData,w
 13279  07B7  0022               	movlb	2	; select bank2
 13280  07B8  00B4               	movwf	(_RF_Data^(0+256)+20)
 13281  07B9  0008               	return
 13282  07BA                     __end_of_setTxData:	
 13283                           
 13284                           	psect	text77
 13285  1748                     __ptext77:	
 13286 ;; *************** function _setRF_DimmerLights *****************
 13287 ;; Defined at:
 13288 ;;		line 483 in file "../src/RF_Control_B1.c"
 13289 ;; Parameters:    Size  Location     Type
 13290 ;;  lights          1    wreg     unsigned char 
 13291 ;;  on              1    0[BANK0 ] unsigned char 
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;  lights          1    4[BANK0 ] unsigned char 
 13294 ;;  status          1    3[BANK0 ] unsigned char 
 13295 ;; Return value:  Size  Location     Type
 13296 ;;		None               void
 13297 ;; Registers used:
 13298 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13299 ;; Tracked objects:
 13300 ;;		On entry : 0/0
 13301 ;;		On exit  : 0/0
 13302 ;;		Unchanged: 0/0
 13303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13304 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;Total ram usage:        5 bytes
 13309 ;; Hardware stack levels used:    1
 13310 ;; Hardware stack levels required when called:    5
 13311 ;; This function calls:
 13312 ;;		Nothing
 13313 ;; This function is called by:
 13314 ;;		_setDimmerLights
 13315 ;;		_setDimmerLights_Adj
 13316 ;;		_setRFSW_Control
 13317 ;; This function uses a non-reentrant model
 13318 ;;
 13319                           
 13320                           
 13321                           ;psect for function _setRF_DimmerLights
 13322  1748                     _setRF_DimmerLights:	
 13323                           
 13324                           ;incstack = 0
 13325                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13326                           ;setRF_DimmerLights@lights stored from wreg
 13327  1748  0020               	movlb	0	; select bank0
 13328  1749  00A4               	movwf	setRF_DimmerLights@lights
 13329                           
 13330                           ;RF_Control_B1.c: 484: char status = 1;
 13331  174A  01A3               	clrf	setRF_DimmerLights@status
 13332  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13333                           
 13334                           ;RF_Control_B1.c: 485: status <<= (lights - 1);
 13335  174C  0824               	movf	setRF_DimmerLights@lights,w
 13336  174D  3EFF               	addlw	-1
 13337  174E  0A89               	incf	9,f
 13338  174F  2F52               	goto	u5250
 13339  1750                     u5255:	
 13340  1750  1003               	clrc
 13341  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13342  1752                     u5250:	
 13343  1752  3EFF               	addlw	-1
 13344  1753  1D03               	skipz
 13345  1754  2F50               	goto	u5255
 13346                           
 13347                           ;RF_Control_B1.c: 486: product->Data[11]=lights;
 13348  1755  0824               	movf	setRF_DimmerLights@lights,w
 13349  1756  00A1               	movwf	??_setRF_DimmerLights
 13350  1757  086E               	movf	_product,w
 13351  1758  3E0B               	addlw	11
 13352  1759  0086               	movwf	6
 13353  175A  3002               	movlw	2	; select bank4/5
 13354  175B  0087               	movwf	7
 13355  175C  0821               	movf	??_setRF_DimmerLights,w
 13356  175D  0081               	movwf	1
 13357                           
 13358                           ;RF_Control_B1.c: 494: product->Data[9]=product->Data[20 + lights];
 13359  175E  0824               	movf	setRF_DimmerLights@lights,w
 13360  175F  3E14               	addlw	20
 13361  1760  076E               	addwf	_product,w
 13362  1761  00A1               	movwf	??_setRF_DimmerLights
 13363  1762  0821               	movf	??_setRF_DimmerLights,w
 13364  1763  0086               	movwf	6
 13365  1764  3002               	movlw	2	; select bank4/5
 13366  1765  0087               	movwf	7
 13367  1766  0801               	movf	1,w
 13368  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13369  1768  086E               	movf	_product,w
 13370  1769  3E09               	addlw	9
 13371  176A  0086               	movwf	6
 13372  176B  3002               	movlw	2	; select bank4/5
 13373  176C  0087               	movwf	7
 13374  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13375  176E  0081               	movwf	1
 13376                           
 13377                           ;RF_Control_B1.c: 495: product->Data[17]=product->Data[26 + lights];
 13378  176F  0824               	movf	setRF_DimmerLights@lights,w
 13379  1770  3E1A               	addlw	26
 13380  1771  076E               	addwf	_product,w
 13381  1772  00A1               	movwf	??_setRF_DimmerLights
 13382  1773  0821               	movf	??_setRF_DimmerLights,w
 13383  1774  0086               	movwf	6
 13384  1775  3002               	movlw	2	; select bank4/5
 13385  1776  0087               	movwf	7
 13386  1777  0801               	movf	1,w
 13387  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13388  1779  086E               	movf	_product,w
 13389  177A  3E11               	addlw	17
 13390  177B  0086               	movwf	6
 13391  177C  3002               	movlw	2	; select bank4/5
 13392  177D  0087               	movwf	7
 13393  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13394  177F  0081               	movwf	1
 13395                           
 13396                           ;RF_Control_B1.c: 496: if (on == 1) {
 13397  1780  0820               	movf	setRF_DimmerLights@on,w
 13398  1781  3A01               	xorlw	1
 13399  1782  1D03               	skipz
 13400  1783  2F94               	goto	l6333
 13401                           
 13402                           ;RF_Control_B1.c: 497: product->Data[15]=(product->Data[15] | status);
 13403  1784  086E               	movf	_product,w
 13404  1785  3E0F               	addlw	15
 13405  1786  0086               	movwf	6
 13406  1787  3002               	movlw	2	; select bank4/5
 13407  1788  0087               	movwf	7
 13408  1789  0801               	movf	1,w
 13409  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13410  178B  00A1               	movwf	??_setRF_DimmerLights
 13411  178C  086E               	movf	_product,w
 13412  178D  3E0F               	addlw	15
 13413  178E  0086               	movwf	6
 13414  178F  3002               	movlw	2	; select bank4/5
 13415  1790  0087               	movwf	7
 13416  1791  0821               	movf	??_setRF_DimmerLights,w
 13417  1792  0081               	movwf	1
 13418                           
 13419                           ;RF_Control_B1.c: 498: } else {
 13420  1793  0008               	return
 13421  1794                     l6333:	
 13422                           
 13423                           ;RF_Control_B1.c: 499: product->Data[15]=(product->Data[15]&(~status));
 13424  1794  086E               	movf	_product,w
 13425  1795  3E0F               	addlw	15
 13426  1796  0086               	movwf	6
 13427  1797  3002               	movlw	2	; select bank4/5
 13428  1798  0087               	movwf	7
 13429  1799  0923               	comf	setRF_DimmerLights@status,w
 13430  179A  0501               	andwf	1,w
 13431  179B  00A1               	movwf	??_setRF_DimmerLights
 13432  179C  086E               	movf	_product,w
 13433  179D  3E0F               	addlw	15
 13434  179E  0086               	movwf	6
 13435  179F  3002               	movlw	2	; select bank4/5
 13436  17A0  0087               	movwf	7
 13437  17A1  0821               	movf	??_setRF_DimmerLights,w
 13438  17A2  0081               	movwf	1
 13439  17A3  0008               	return
 13440  17A4                     __end_of_setRF_DimmerLights:	
 13441                           
 13442                           	psect	text78
 13443  09DB                     __ptext78:	
 13444 ;; *************** function _setPercentValue *****************
 13445 ;; Defined at:
 13446 ;;		line 890 in file "../src/Dimmer_B1.c"
 13447 ;; Parameters:    Size  Location     Type
 13448 ;;  value           1    wreg     unsigned char 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;  value           1   62[BANK0 ] unsigned char 
 13451 ;;  i               3   63[BANK0 ] float 
 13452 ;; Return value:  Size  Location     Type
 13453 ;;                  1    wreg      unsigned char 
 13454 ;; Registers used:
 13455 ;;		wreg, status,2, status,0, pclath, cstack
 13456 ;; Tracked objects:
 13457 ;;		On entry : 0/0
 13458 ;;		On exit  : 0/0
 13459 ;;		Unchanged: 0/0
 13460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;Total ram usage:        6 bytes
 13466 ;; Hardware stack levels used:    1
 13467 ;; Hardware stack levels required when called:    7
 13468 ;; This function calls:
 13469 ;;		___awtoft
 13470 ;;		___ftadd
 13471 ;;		___ftdiv
 13472 ;;		___ftneg
 13473 ;;		___fttol
 13474 ;; This function is called by:
 13475 ;;		_setDimmerLights
 13476 ;;		_setDimmerLights_Adj
 13477 ;;		_Flash_Memory_Initialization
 13478 ;; This function uses a non-reentrant model
 13479 ;;
 13480                           
 13481                           
 13482                           ;psect for function _setPercentValue
 13483  09DB                     _setPercentValue:	
 13484                           
 13485                           ;incstack = 0
 13486                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13487                           ;setPercentValue@value stored from wreg
 13488  09DB  0020               	movlb	0	; select bank0
 13489  09DC  00DE               	movwf	setPercentValue@value
 13490                           
 13491                           ;Dimmer_B1.c: 898: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13492  09DD  3000               	movlw	0
 13493  09DE  00DF               	movwf	setPercentValue@i
 13494  09DF  3050               	movlw	80
 13495  09E0  00E0               	movwf	setPercentValue@i+1
 13496  09E1  3042               	movlw	66
 13497  09E2  00E1               	movwf	setPercentValue@i+2
 13498                           
 13499                           ;Dimmer_B1.c: 899: i /= 100;
 13500  09E3  3000               	movlw	0
 13501  09E4  00AE               	movwf	___ftdiv@f2
 13502  09E5  30C8               	movlw	200
 13503  09E6  00AF               	movwf	___ftdiv@f2+1
 13504  09E7  3042               	movlw	66
 13505  09E8  00B0               	movwf	___ftdiv@f2+2
 13506  09E9  085F               	movf	setPercentValue@i,w
 13507  09EA  00B1               	movwf	___ftdiv@f1
 13508  09EB  0860               	movf	setPercentValue@i+1,w
 13509  09EC  00B2               	movwf	___ftdiv@f1+1
 13510  09ED  0861               	movf	setPercentValue@i+2,w
 13511  09EE  00B3               	movwf	___ftdiv@f1+2
 13512  09EF  318E  26A3  3189   	fcall	___ftdiv
 13513  09F2  0020               	movlb	0	; select bank0
 13514  09F3  082E               	movf	?___ftdiv,w
 13515  09F4  00DF               	movwf	setPercentValue@i
 13516  09F5  082F               	movf	?___ftdiv+1,w
 13517  09F6  00E0               	movwf	setPercentValue@i+1
 13518  09F7  0830               	movf	?___ftdiv+2,w
 13519  09F8  00E1               	movwf	setPercentValue@i+2
 13520                           
 13521                           ;Dimmer_B1.c: 901: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13522  09F9  085E               	movf	setPercentValue@value,w
 13523  09FA  00DC               	movwf	??_setPercentValue
 13524  09FB  01DD               	clrf	??_setPercentValue+1
 13525  09FC  09DC               	comf	??_setPercentValue,f
 13526  09FD  09DD               	comf	??_setPercentValue+1,f
 13527  09FE  0ADC               	incf	??_setPercentValue,f
 13528  09FF  1903               	skipnz
 13529  0A00  0ADD               	incf	??_setPercentValue+1,f
 13530  0A01  085C               	movf	??_setPercentValue,w
 13531  0A02  3E40               	addlw	64
 13532  0A03  00A8               	movwf	___awtoft@c
 13533  0A04  3000               	movlw	0
 13534  0A05  3D5D               	addwfc	??_setPercentValue+1,w
 13535  0A06  00A9               	movwf	___awtoft@c+1
 13536  0A07  319F  2775  3189   	fcall	___awtoft
 13537  0A0A  0020               	movlb	0	; select bank0
 13538  0A0B  0828               	movf	?___awtoft,w
 13539  0A0C  00B1               	movwf	___ftdiv@f1
 13540  0A0D  0829               	movf	?___awtoft+1,w
 13541  0A0E  00B2               	movwf	___ftdiv@f1+1
 13542  0A0F  082A               	movf	?___awtoft+2,w
 13543  0A10  00B3               	movwf	___ftdiv@f1+2
 13544  0A11  085F               	movf	setPercentValue@i,w
 13545  0A12  00AE               	movwf	___ftdiv@f2
 13546  0A13  0860               	movf	setPercentValue@i+1,w
 13547  0A14  00AF               	movwf	___ftdiv@f2+1
 13548  0A15  0861               	movf	setPercentValue@i+2,w
 13549  0A16  00B0               	movwf	___ftdiv@f2+2
 13550  0A17  318E  26A3  3189   	fcall	___ftdiv
 13551  0A1A  0020               	movlb	0	; select bank0
 13552  0A1B  082E               	movf	?___ftdiv,w
 13553  0A1C  00BE               	movwf	___ftneg@f1
 13554  0A1D  082F               	movf	?___ftdiv+1,w
 13555  0A1E  00BF               	movwf	___ftneg@f1+1
 13556  0A1F  0830               	movf	?___ftdiv+2,w
 13557  0A20  00C0               	movwf	___ftneg@f1+2
 13558  0A21  319B  237C  3189   	fcall	___ftneg
 13559  0A24  0020               	movlb	0	; select bank0
 13560  0A25  083E               	movf	?___ftneg,w
 13561  0A26  00C4               	movwf	___ftadd@f2
 13562  0A27  083F               	movf	?___ftneg+1,w
 13563  0A28  00C5               	movwf	___ftadd@f2+1
 13564  0A29  0840               	movf	?___ftneg+2,w
 13565  0A2A  00C6               	movwf	___ftadd@f2+2
 13566  0A2B  3000               	movlw	0
 13567  0A2C  00C1               	movwf	___ftadd@f1
 13568  0A2D  30C8               	movlw	200
 13569  0A2E  00C2               	movwf	___ftadd@f1+1
 13570  0A2F  3042               	movlw	66
 13571  0A30  00C3               	movwf	___ftadd@f1+2
 13572  0A31  3184  244A  3189   	fcall	___ftadd
 13573  0A34  0020               	movlb	0	; select bank0
 13574  0A35  0841               	movf	?___ftadd,w
 13575  0A36  00CE               	movwf	___fttol@f1
 13576  0A37  0842               	movf	?___ftadd+1,w
 13577  0A38  00CF               	movwf	___fttol@f1+1
 13578  0A39  0843               	movf	?___ftadd+2,w
 13579  0A3A  00D0               	movwf	___fttol@f1+2
 13580  0A3B  318C  245E         	fcall	___fttol
 13581  0A3D  0020               	movlb	0	; select bank0
 13582  0A3E  084E               	movf	?___fttol,w
 13583  0A3F  0008               	return
 13584  0A40                     __end_of_setPercentValue:	
 13585                           
 13586                           	psect	text79
 13587  0C5E                     __ptext79:	
 13588 ;; *************** function ___fttol *****************
 13589 ;; Defined at:
 13590 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;  f1              3   46[BANK0 ] float 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  lval            4   55[BANK0 ] unsigned long 
 13595 ;;  exp1            1   59[BANK0 ] unsigned char 
 13596 ;;  sign1           1   54[BANK0 ] unsigned char 
 13597 ;; Return value:  Size  Location     Type
 13598 ;;                  4   46[BANK0 ] long 
 13599 ;; Registers used:
 13600 ;;		wreg, status,2, status,0
 13601 ;; Tracked objects:
 13602 ;;		On entry : 0/0
 13603 ;;		On exit  : 0/0
 13604 ;;		Unchanged: 0/0
 13605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13606 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;Total ram usage:       14 bytes
 13611 ;; Hardware stack levels used:    1
 13612 ;; Hardware stack levels required when called:    5
 13613 ;; This function calls:
 13614 ;;		Nothing
 13615 ;; This function is called by:
 13616 ;;		_getPercentValue
 13617 ;;		_setPercentValue
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           
 13622                           ;psect for function ___fttol
 13623  0C5E                     ___fttol:	
 13624                           
 13625                           ;incstack = 0
 13626                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13627  0C5E  0020               	movlb	0	; select bank0
 13628  0C5F  084E               	movf	___fttol@f1,w
 13629  0C60  00D2               	movwf	??___fttol
 13630  0C61  084F               	movf	___fttol@f1+1,w
 13631  0C62  00D3               	movwf	??___fttol+1
 13632  0C63  0850               	movf	___fttol@f1+2,w
 13633  0C64  00D4               	movwf	??___fttol+2
 13634  0C65  1003               	clrc
 13635  0C66  0D53               	rlf	??___fttol+1,w
 13636  0C67  0D54               	rlf	??___fttol+2,w
 13637  0C68  00D5               	movwf	??___fttol+3
 13638  0C69  0855               	movf	??___fttol+3,w
 13639  0C6A  00DB               	movwf	___fttol@exp1
 13640  0C6B  08DB               	movf	___fttol@exp1,f
 13641  0C6C  1D03               	skipz
 13642  0C6D  2C77               	goto	l6059
 13643  0C6E  3000               	movlw	0
 13644  0C6F  00D1               	movwf	?___fttol+3
 13645  0C70  3000               	movlw	0
 13646  0C71  00D0               	movwf	?___fttol+2
 13647  0C72  3000               	movlw	0
 13648  0C73  00CF               	movwf	?___fttol+1
 13649  0C74  3000               	movlw	0
 13650  0C75  00CE               	movwf	?___fttol
 13651  0C76  0008               	return
 13652  0C77                     l6059:	
 13653  0C77  084E               	movf	___fttol@f1,w
 13654  0C78  00D2               	movwf	??___fttol
 13655  0C79  084F               	movf	___fttol@f1+1,w
 13656  0C7A  00D3               	movwf	??___fttol+1
 13657  0C7B  0850               	movf	___fttol@f1+2,w
 13658  0C7C  00D4               	movwf	??___fttol+2
 13659  0C7D  3017               	movlw	23
 13660  0C7E                     u4845:	
 13661  0C7E  36D4               	lsrf	??___fttol+2,f
 13662  0C7F  0CD3               	rrf	??___fttol+1,f
 13663  0C80  0CD2               	rrf	??___fttol,f
 13664  0C81  0B89               	decfsz	9,f
 13665  0C82  2C7E               	goto	u4845
 13666  0C83  0852               	movf	??___fttol,w
 13667  0C84  00D5               	movwf	??___fttol+3
 13668  0C85  0855               	movf	??___fttol+3,w
 13669  0C86  00D6               	movwf	___fttol@sign1
 13670  0C87  17CF               	bsf	___fttol@f1+1,7
 13671  0C88  30FF               	movlw	255
 13672  0C89  05CE               	andwf	___fttol@f1,f
 13673  0C8A  30FF               	movlw	255
 13674  0C8B  05CF               	andwf	___fttol@f1+1,f
 13675  0C8C  3000               	movlw	0
 13676  0C8D  05D0               	andwf	___fttol@f1+2,f
 13677  0C8E  084E               	movf	___fttol@f1,w
 13678  0C8F  00D7               	movwf	___fttol@lval
 13679  0C90  084F               	movf	___fttol@f1+1,w
 13680  0C91  00D8               	movwf	___fttol@lval+1
 13681  0C92  0850               	movf	___fttol@f1+2,w
 13682  0C93  00D9               	movwf	___fttol@lval+2
 13683  0C94  01DA               	clrf	___fttol@lval+3
 13684  0C95  308E               	movlw	142
 13685  0C96  02DB               	subwf	___fttol@exp1,f
 13686  0C97  1FDB               	btfss	___fttol@exp1,7
 13687  0C98  2CB5               	goto	l6079
 13688  0C99  085B               	movf	___fttol@exp1,w
 13689  0C9A  3A80               	xorlw	128
 13690  0C9B  3E8F               	addlw	143
 13691  0C9C  1803               	skipnc
 13692  0C9D  2CA7               	goto	l6077
 13693  0C9E  3000               	movlw	0
 13694  0C9F  00D1               	movwf	?___fttol+3
 13695  0CA0  3000               	movlw	0
 13696  0CA1  00D0               	movwf	?___fttol+2
 13697  0CA2  3000               	movlw	0
 13698  0CA3  00CF               	movwf	?___fttol+1
 13699  0CA4  3000               	movlw	0
 13700  0CA5  00CE               	movwf	?___fttol
 13701  0CA6  0008               	return
 13702  0CA7                     l6077:	
 13703  0CA7  3001               	movlw	1
 13704  0CA8                     u4875:	
 13705  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13706  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13707  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13708  0CAB  0CD7               	rrf	___fttol@lval,f
 13709  0CAC  0B89               	decfsz	9,f
 13710  0CAD  2CA8               	goto	u4875
 13711  0CAE  3001               	movlw	1
 13712  0CAF  00D2               	movwf	??___fttol
 13713  0CB0  0852               	movf	??___fttol,w
 13714  0CB1  07DB               	addwf	___fttol@exp1,f
 13715  0CB2  1903               	btfsc	3,2
 13716  0CB3  2CCE               	goto	l6089
 13717  0CB4  2CA7               	goto	l6077
 13718  0CB5                     l6079:	
 13719  0CB5  3018               	movlw	24
 13720  0CB6  025B               	subwf	___fttol@exp1,w
 13721  0CB7  1C03               	skipc
 13722  0CB8  2CCB               	goto	l6087
 13723  0CB9  3000               	movlw	0
 13724  0CBA  00D1               	movwf	?___fttol+3
 13725  0CBB  3000               	movlw	0
 13726  0CBC  00D0               	movwf	?___fttol+2
 13727  0CBD  3000               	movlw	0
 13728  0CBE  00CF               	movwf	?___fttol+1
 13729  0CBF  3000               	movlw	0
 13730  0CC0  00CE               	movwf	?___fttol
 13731  0CC1  0008               	return
 13732  0CC2                     l6085:	
 13733  0CC2  3001               	movlw	1
 13734  0CC3                     u4905:	
 13735  0CC3  35D7               	lslf	___fttol@lval,f
 13736  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13737  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13738  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13739  0CC7  0B89               	decfsz	9,f
 13740  0CC8  2CC3               	goto	u4905
 13741  0CC9  3001               	movlw	1
 13742  0CCA  02DB               	subwf	___fttol@exp1,f
 13743  0CCB                     l6087:	
 13744  0CCB  08DB               	movf	___fttol@exp1,f
 13745  0CCC  1D03               	skipz
 13746  0CCD  2CC2               	goto	l6085
 13747  0CCE                     l6089:	
 13748  0CCE  0856               	movf	___fttol@sign1,w
 13749  0CCF  1903               	btfsc	3,2
 13750  0CD0  2CDC               	goto	l6093
 13751  0CD1  09D7               	comf	___fttol@lval,f
 13752  0CD2  09D8               	comf	___fttol@lval+1,f
 13753  0CD3  09D9               	comf	___fttol@lval+2,f
 13754  0CD4  09DA               	comf	___fttol@lval+3,f
 13755  0CD5  0AD7               	incf	___fttol@lval,f
 13756  0CD6  1903               	skipnz
 13757  0CD7  0AD8               	incf	___fttol@lval+1,f
 13758  0CD8  1903               	skipnz
 13759  0CD9  0AD9               	incf	___fttol@lval+2,f
 13760  0CDA  1903               	skipnz
 13761  0CDB  0ADA               	incf	___fttol@lval+3,f
 13762  0CDC                     l6093:	
 13763  0CDC  085A               	movf	___fttol@lval+3,w
 13764  0CDD  00D1               	movwf	?___fttol+3
 13765  0CDE  0859               	movf	___fttol@lval+2,w
 13766  0CDF  00D0               	movwf	?___fttol+2
 13767  0CE0  0858               	movf	___fttol@lval+1,w
 13768  0CE1  00CF               	movwf	?___fttol+1
 13769  0CE2  0857               	movf	___fttol@lval,w
 13770  0CE3  00CE               	movwf	?___fttol
 13771  0CE4  0008               	return
 13772  0CE5                     __end_of___fttol:	
 13773                           
 13774                           	psect	text80
 13775  1B7C                     __ptext80:	
 13776 ;; *************** function ___ftneg *****************
 13777 ;; Defined at:
 13778 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13779 ;; Parameters:    Size  Location     Type
 13780 ;;  f1              3   30[BANK0 ] float 
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;		None
 13783 ;; Return value:  Size  Location     Type
 13784 ;;                  3   30[BANK0 ] float 
 13785 ;; Registers used:
 13786 ;;		wreg
 13787 ;; Tracked objects:
 13788 ;;		On entry : 0/0
 13789 ;;		On exit  : 0/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13792 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;Total ram usage:        3 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    5
 13799 ;; This function calls:
 13800 ;;		Nothing
 13801 ;; This function is called by:
 13802 ;;		_getPercentValue
 13803 ;;		_setPercentValue
 13804 ;; This function uses a non-reentrant model
 13805 ;;
 13806                           
 13807                           
 13808                           ;psect for function ___ftneg
 13809  1B7C                     ___ftneg:	
 13810                           
 13811                           ;incstack = 0
 13812                           ; Regs used in ___ftneg: [wreg]
 13813  1B7C  0020               	movlb	0	; select bank0
 13814  1B7D  0840               	movf	___ftneg@f1+2,w
 13815  1B7E  043F               	iorwf	___ftneg@f1+1,w
 13816  1B7F  043E               	iorwf	___ftneg@f1,w
 13817  1B80  1903               	skipnz
 13818  1B81  0008               	return
 13819  1B82  3080               	movlw	128
 13820  1B83  06C0               	xorwf	___ftneg@f1+2,f
 13821  1B84  0008               	return
 13822  1B85                     __end_of___ftneg:	
 13823                           
 13824                           	psect	text81
 13825  0EA3                     __ptext81:	
 13826 ;; *************** function ___ftdiv *****************
 13827 ;; Defined at:
 13828 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13829 ;; Parameters:    Size  Location     Type
 13830 ;;  f2              3   14[BANK0 ] float 
 13831 ;;  f1              3   17[BANK0 ] float 
 13832 ;; Auto vars:     Size  Location     Type
 13833 ;;  f3              3   25[BANK0 ] float 
 13834 ;;  sign            1   29[BANK0 ] unsigned char 
 13835 ;;  exp             1   28[BANK0 ] unsigned char 
 13836 ;;  cntr            1   24[BANK0 ] unsigned char 
 13837 ;; Return value:  Size  Location     Type
 13838 ;;                  3   14[BANK0 ] float 
 13839 ;; Registers used:
 13840 ;;		wreg, status,2, status,0, pclath, cstack
 13841 ;; Tracked objects:
 13842 ;;		On entry : 0/0
 13843 ;;		On exit  : 0/0
 13844 ;;		Unchanged: 0/0
 13845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13846 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;Total ram usage:       16 bytes
 13851 ;; Hardware stack levels used:    1
 13852 ;; Hardware stack levels required when called:    6
 13853 ;; This function calls:
 13854 ;;		___ftpack
 13855 ;; This function is called by:
 13856 ;;		_getPercentValue
 13857 ;;		_setPercentValue
 13858 ;; This function uses a non-reentrant model
 13859 ;;
 13860                           
 13861                           
 13862                           ;psect for function ___ftdiv
 13863  0EA3                     ___ftdiv:	
 13864                           
 13865                           ;incstack = 0
 13866                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13867  0EA3  0020               	movlb	0	; select bank0
 13868  0EA4  0831               	movf	___ftdiv@f1,w
 13869  0EA5  00B4               	movwf	??___ftdiv
 13870  0EA6  0832               	movf	___ftdiv@f1+1,w
 13871  0EA7  00B5               	movwf	??___ftdiv+1
 13872  0EA8  0833               	movf	___ftdiv@f1+2,w
 13873  0EA9  00B6               	movwf	??___ftdiv+2
 13874  0EAA  1003               	clrc
 13875  0EAB  0D35               	rlf	??___ftdiv+1,w
 13876  0EAC  0D36               	rlf	??___ftdiv+2,w
 13877  0EAD  00B7               	movwf	??___ftdiv+3
 13878  0EAE  0837               	movf	??___ftdiv+3,w
 13879  0EAF  00BC               	movwf	___ftdiv@exp
 13880  0EB0  08BC               	movf	___ftdiv@exp,f
 13881  0EB1  1D03               	skipz
 13882  0EB2  2EBA               	goto	l5959
 13883  0EB3  3000               	movlw	0
 13884  0EB4  00AE               	movwf	?___ftdiv
 13885  0EB5  3000               	movlw	0
 13886  0EB6  00AF               	movwf	?___ftdiv+1
 13887  0EB7  3000               	movlw	0
 13888  0EB8  00B0               	movwf	?___ftdiv+2
 13889  0EB9  0008               	return
 13890  0EBA                     l5959:	
 13891  0EBA  082E               	movf	___ftdiv@f2,w
 13892  0EBB  00B4               	movwf	??___ftdiv
 13893  0EBC  082F               	movf	___ftdiv@f2+1,w
 13894  0EBD  00B5               	movwf	??___ftdiv+1
 13895  0EBE  0830               	movf	___ftdiv@f2+2,w
 13896  0EBF  00B6               	movwf	??___ftdiv+2
 13897  0EC0  1003               	clrc
 13898  0EC1  0D35               	rlf	??___ftdiv+1,w
 13899  0EC2  0D36               	rlf	??___ftdiv+2,w
 13900  0EC3  00B7               	movwf	??___ftdiv+3
 13901  0EC4  0837               	movf	??___ftdiv+3,w
 13902  0EC5  00BD               	movwf	___ftdiv@sign
 13903  0EC6  08BD               	movf	___ftdiv@sign,f
 13904  0EC7  1D03               	skipz
 13905  0EC8  2ED0               	goto	l5965
 13906  0EC9  3000               	movlw	0
 13907  0ECA  00AE               	movwf	?___ftdiv
 13908  0ECB  3000               	movlw	0
 13909  0ECC  00AF               	movwf	?___ftdiv+1
 13910  0ECD  3000               	movlw	0
 13911  0ECE  00B0               	movwf	?___ftdiv+2
 13912  0ECF  0008               	return
 13913  0ED0                     l5965:	
 13914  0ED0  3000               	movlw	0
 13915  0ED1  00B9               	movwf	___ftdiv@f3
 13916  0ED2  3000               	movlw	0
 13917  0ED3  00BA               	movwf	___ftdiv@f3+1
 13918  0ED4  3000               	movlw	0
 13919  0ED5  00BB               	movwf	___ftdiv@f3+2
 13920  0ED6  3089               	movlw	137
 13921  0ED7  073D               	addwf	___ftdiv@sign,w
 13922  0ED8  00B4               	movwf	??___ftdiv
 13923  0ED9  0834               	movf	??___ftdiv,w
 13924  0EDA  02BC               	subwf	___ftdiv@exp,f
 13925  0EDB  0831               	movf	___ftdiv@f1,w
 13926  0EDC  00B4               	movwf	??___ftdiv
 13927  0EDD  0832               	movf	___ftdiv@f1+1,w
 13928  0EDE  00B5               	movwf	??___ftdiv+1
 13929  0EDF  0833               	movf	___ftdiv@f1+2,w
 13930  0EE0  00B6               	movwf	??___ftdiv+2
 13931  0EE1  3010               	movlw	16
 13932  0EE2                     u4645:	
 13933  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13934  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13935  0EE4  0CB4               	rrf	??___ftdiv,f
 13936  0EE5  0B89               	decfsz	9,f
 13937  0EE6  2EE2               	goto	u4645
 13938  0EE7  0834               	movf	??___ftdiv,w
 13939  0EE8  00B7               	movwf	??___ftdiv+3
 13940  0EE9  0837               	movf	??___ftdiv+3,w
 13941  0EEA  00BD               	movwf	___ftdiv@sign
 13942  0EEB  082E               	movf	___ftdiv@f2,w
 13943  0EEC  00B4               	movwf	??___ftdiv
 13944  0EED  082F               	movf	___ftdiv@f2+1,w
 13945  0EEE  00B5               	movwf	??___ftdiv+1
 13946  0EEF  0830               	movf	___ftdiv@f2+2,w
 13947  0EF0  00B6               	movwf	??___ftdiv+2
 13948  0EF1  3010               	movlw	16
 13949  0EF2                     u4655:	
 13950  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13951  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13952  0EF4  0CB4               	rrf	??___ftdiv,f
 13953  0EF5  0B89               	decfsz	9,f
 13954  0EF6  2EF2               	goto	u4655
 13955  0EF7  0834               	movf	??___ftdiv,w
 13956  0EF8  00B7               	movwf	??___ftdiv+3
 13957  0EF9  0837               	movf	??___ftdiv+3,w
 13958  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13959  0EFB  3080               	movlw	128
 13960  0EFC  00B4               	movwf	??___ftdiv
 13961  0EFD  0834               	movf	??___ftdiv,w
 13962  0EFE  05BD               	andwf	___ftdiv@sign,f
 13963  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13964  0F00  30FF               	movlw	255
 13965  0F01  05B1               	andwf	___ftdiv@f1,f
 13966  0F02  30FF               	movlw	255
 13967  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13968  0F04  3000               	movlw	0
 13969  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13970  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13971  0F07  30FF               	movlw	255
 13972  0F08  05AE               	andwf	___ftdiv@f2,f
 13973  0F09  30FF               	movlw	255
 13974  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13975  0F0B  3000               	movlw	0
 13976  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13977  0F0D  3018               	movlw	24
 13978  0F0E  00B4               	movwf	??___ftdiv
 13979  0F0F  0834               	movf	??___ftdiv,w
 13980  0F10  00B8               	movwf	___ftdiv@cntr
 13981  0F11                     l5979:	
 13982  0F11  3001               	movlw	1
 13983  0F12                     u4665:	
 13984  0F12  35B9               	lslf	___ftdiv@f3,f
 13985  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13986  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13987  0F15  0B89               	decfsz	9,f
 13988  0F16  2F12               	goto	u4665
 13989  0F17  0830               	movf	___ftdiv@f2+2,w
 13990  0F18  0233               	subwf	___ftdiv@f1+2,w
 13991  0F19  1D03               	skipz
 13992  0F1A  2F21               	goto	u4675
 13993  0F1B  082F               	movf	___ftdiv@f2+1,w
 13994  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13995  0F1D  1D03               	skipz
 13996  0F1E  2F21               	goto	u4675
 13997  0F1F  082E               	movf	___ftdiv@f2,w
 13998  0F20  0231               	subwf	___ftdiv@f1,w
 13999  0F21                     u4675:	
 14000  0F21  1C03               	skipc
 14001  0F22  2F2A               	goto	l5987
 14002  0F23  082E               	movf	___ftdiv@f2,w
 14003  0F24  02B1               	subwf	___ftdiv@f1,f
 14004  0F25  082F               	movf	___ftdiv@f2+1,w
 14005  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 14006  0F27  0830               	movf	___ftdiv@f2+2,w
 14007  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 14008  0F29  1439               	bsf	___ftdiv@f3,0
 14009  0F2A                     l5987:	
 14010  0F2A  3001               	movlw	1
 14011  0F2B                     u4685:	
 14012  0F2B  35B1               	lslf	___ftdiv@f1,f
 14013  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 14014  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 14015  0F2E  0B89               	decfsz	9,f
 14016  0F2F  2F2B               	goto	u4685
 14017  0F30  3001               	movlw	1
 14018  0F31  02B8               	subwf	___ftdiv@cntr,f
 14019  0F32  1D03               	btfss	3,2
 14020  0F33  2F11               	goto	l5979
 14021  0F34  0839               	movf	___ftdiv@f3,w
 14022  0F35  00A0               	movwf	___ftpack@arg
 14023  0F36  083A               	movf	___ftdiv@f3+1,w
 14024  0F37  00A1               	movwf	___ftpack@arg+1
 14025  0F38  083B               	movf	___ftdiv@f3+2,w
 14026  0F39  00A2               	movwf	___ftpack@arg+2
 14027  0F3A  083C               	movf	___ftdiv@exp,w
 14028  0F3B  00B4               	movwf	??___ftdiv
 14029  0F3C  0834               	movf	??___ftdiv,w
 14030  0F3D  00A3               	movwf	___ftpack@exp
 14031  0F3E  083D               	movf	___ftdiv@sign,w
 14032  0F3F  00B5               	movwf	??___ftdiv+1
 14033  0F40  0835               	movf	??___ftdiv+1,w
 14034  0F41  00A4               	movwf	___ftpack@sign
 14035  0F42  3189  2119         	fcall	___ftpack
 14036  0F44  0020               	movlb	0	; select bank0
 14037  0F45  0820               	movf	?___ftpack,w
 14038  0F46  00AE               	movwf	?___ftdiv
 14039  0F47  0821               	movf	?___ftpack+1,w
 14040  0F48  00AF               	movwf	?___ftdiv+1
 14041  0F49  0822               	movf	?___ftpack+2,w
 14042  0F4A  00B0               	movwf	?___ftdiv+2
 14043  0F4B  0008               	return
 14044  0F4C                     __end_of___ftdiv:	
 14045                           
 14046                           	psect	text82
 14047  044A                     __ptext82:	
 14048 ;; *************** function ___ftadd *****************
 14049 ;; Defined at:
 14050 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;  f1              3   33[BANK0 ] float 
 14053 ;;  f2              3   36[BANK0 ] float 
 14054 ;; Auto vars:     Size  Location     Type
 14055 ;;  exp1            1   45[BANK0 ] unsigned char 
 14056 ;;  exp2            1   44[BANK0 ] unsigned char 
 14057 ;;  sign            1   43[BANK0 ] unsigned char 
 14058 ;; Return value:  Size  Location     Type
 14059 ;;                  3   33[BANK0 ] float 
 14060 ;; Registers used:
 14061 ;;		wreg, status,2, status,0, pclath, cstack
 14062 ;; Tracked objects:
 14063 ;;		On entry : 0/0
 14064 ;;		On exit  : 0/0
 14065 ;;		Unchanged: 0/0
 14066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14067 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14071 ;;Total ram usage:       13 bytes
 14072 ;; Hardware stack levels used:    1
 14073 ;; Hardware stack levels required when called:    6
 14074 ;; This function calls:
 14075 ;;		___ftpack
 14076 ;; This function is called by:
 14077 ;;		_getPercentValue
 14078 ;;		_setPercentValue
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           
 14083                           ;psect for function ___ftadd
 14084  044A                     ___ftadd:	
 14085                           
 14086                           ;incstack = 0
 14087                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14088  044A  0020               	movlb	0	; select bank0
 14089  044B  0841               	movf	___ftadd@f1,w
 14090  044C  00C7               	movwf	??___ftadd
 14091  044D  0842               	movf	___ftadd@f1+1,w
 14092  044E  00C8               	movwf	??___ftadd+1
 14093  044F  0843               	movf	___ftadd@f1+2,w
 14094  0450  00C9               	movwf	??___ftadd+2
 14095  0451  1003               	clrc
 14096  0452  0D48               	rlf	??___ftadd+1,w
 14097  0453  0D49               	rlf	??___ftadd+2,w
 14098  0454  00CA               	movwf	??___ftadd+3
 14099  0455  084A               	movf	??___ftadd+3,w
 14100  0456  00CD               	movwf	___ftadd@exp1
 14101  0457  0844               	movf	___ftadd@f2,w
 14102  0458  00C7               	movwf	??___ftadd
 14103  0459  0845               	movf	___ftadd@f2+1,w
 14104  045A  00C8               	movwf	??___ftadd+1
 14105  045B  0846               	movf	___ftadd@f2+2,w
 14106  045C  00C9               	movwf	??___ftadd+2
 14107  045D  1003               	clrc
 14108  045E  0D48               	rlf	??___ftadd+1,w
 14109  045F  0D49               	rlf	??___ftadd+2,w
 14110  0460  00CA               	movwf	??___ftadd+3
 14111  0461  084A               	movf	??___ftadd+3,w
 14112  0462  00CC               	movwf	___ftadd@exp2
 14113  0463  084D               	movf	___ftadd@exp1,w
 14114  0464  1903               	btfsc	3,2
 14115  0465  2C72               	goto	l5889
 14116  0466  084C               	movf	___ftadd@exp2,w
 14117  0467  024D               	subwf	___ftadd@exp1,w
 14118  0468  1803               	skipnc
 14119  0469  2C79               	goto	l5893
 14120  046A  034D               	decf	___ftadd@exp1,w
 14121  046B  3AFF               	xorlw	255
 14122  046C  074C               	addwf	___ftadd@exp2,w
 14123  046D  00C7               	movwf	??___ftadd
 14124  046E  3019               	movlw	25
 14125  046F  0247               	subwf	??___ftadd,w
 14126  0470  1C03               	skipc
 14127  0471  2C79               	goto	l5893
 14128  0472                     l5889:	
 14129  0472  0844               	movf	___ftadd@f2,w
 14130  0473  00C1               	movwf	?___ftadd
 14131  0474  0845               	movf	___ftadd@f2+1,w
 14132  0475  00C2               	movwf	?___ftadd+1
 14133  0476  0846               	movf	___ftadd@f2+2,w
 14134  0477  00C3               	movwf	?___ftadd+2
 14135  0478  0008               	return
 14136  0479                     l5893:	
 14137  0479  084C               	movf	___ftadd@exp2,w
 14138  047A  1903               	btfsc	3,2
 14139  047B  0008               	return
 14140  047C  084D               	movf	___ftadd@exp1,w
 14141  047D  024C               	subwf	___ftadd@exp2,w
 14142  047E  1803               	skipnc
 14143  047F  2C88               	goto	l5899
 14144  0480  034C               	decf	___ftadd@exp2,w
 14145  0481  3AFF               	xorlw	255
 14146  0482  074D               	addwf	___ftadd@exp1,w
 14147  0483  00C7               	movwf	??___ftadd
 14148  0484  3019               	movlw	25
 14149  0485  0247               	subwf	??___ftadd,w
 14150  0486  1803               	btfsc	3,0
 14151  0487  0008               	return
 14152  0488                     l5899:	
 14153  0488  3006               	movlw	6
 14154  0489  00C7               	movwf	??___ftadd
 14155  048A  0847               	movf	??___ftadd,w
 14156  048B  00CB               	movwf	___ftadd@sign
 14157  048C  1BC3               	btfsc	___ftadd@f1+2,7
 14158  048D  17CB               	bsf	___ftadd@sign,7
 14159  048E  1BC6               	btfsc	___ftadd@f2+2,7
 14160  048F  174B               	bsf	___ftadd@sign,6
 14161  0490  17C2               	bsf	___ftadd@f1+1,7
 14162  0491  30FF               	movlw	255
 14163  0492  05C1               	andwf	___ftadd@f1,f
 14164  0493  30FF               	movlw	255
 14165  0494  05C2               	andwf	___ftadd@f1+1,f
 14166  0495  3000               	movlw	0
 14167  0496  05C3               	andwf	___ftadd@f1+2,f
 14168  0497  17C5               	bsf	___ftadd@f2+1,7
 14169  0498  30FF               	movlw	255
 14170  0499  05C4               	andwf	___ftadd@f2,f
 14171  049A  30FF               	movlw	255
 14172  049B  05C5               	andwf	___ftadd@f2+1,f
 14173  049C  3000               	movlw	0
 14174  049D  05C6               	andwf	___ftadd@f2+2,f
 14175  049E  084C               	movf	___ftadd@exp2,w
 14176  049F  024D               	subwf	___ftadd@exp1,w
 14177  04A0  1803               	skipnc
 14178  04A1  2CC4               	goto	l5921
 14179  04A2                     l5911:	
 14180  04A2  3001               	movlw	1
 14181  04A3                     u4485:	
 14182  04A3  35C4               	lslf	___ftadd@f2,f
 14183  04A4  0DC5               	rlf	___ftadd@f2+1,f
 14184  04A5  0DC6               	rlf	___ftadd@f2+2,f
 14185  04A6  0B89               	decfsz	9,f
 14186  04A7  2CA3               	goto	u4485
 14187  04A8  3001               	movlw	1
 14188  04A9  02CC               	subwf	___ftadd@exp2,f
 14189  04AA  084C               	movf	___ftadd@exp2,w
 14190  04AB  064D               	xorwf	___ftadd@exp1,w
 14191  04AC  1903               	skipnz
 14192  04AD  2CBF               	goto	l5919
 14193  04AE  3001               	movlw	1
 14194  04AF  02CB               	subwf	___ftadd@sign,f
 14195  04B0  084B               	movf	___ftadd@sign,w
 14196  04B1  3907               	andlw	7
 14197  04B2  1903               	btfsc	3,2
 14198  04B3  2CBF               	goto	l5919
 14199  04B4  2CA2               	goto	l5911
 14200  04B5                     l5917:	
 14201  04B5  3001               	movlw	1
 14202  04B6                     u4515:	
 14203  04B6  36C3               	lsrf	___ftadd@f1+2,f
 14204  04B7  0CC2               	rrf	___ftadd@f1+1,f
 14205  04B8  0CC1               	rrf	___ftadd@f1,f
 14206  04B9  0B89               	decfsz	9,f
 14207  04BA  2CB6               	goto	u4515
 14208  04BB  3001               	movlw	1
 14209  04BC  00C7               	movwf	??___ftadd
 14210  04BD  0847               	movf	??___ftadd,w
 14211  04BE  07CD               	addwf	___ftadd@exp1,f
 14212  04BF                     l5919:	
 14213  04BF  084D               	movf	___ftadd@exp1,w
 14214  04C0  064C               	xorwf	___ftadd@exp2,w
 14215  04C1  1903               	btfsc	3,2
 14216  04C2  2CE9               	goto	l3014
 14217  04C3  2CB5               	goto	l5917
 14218  04C4                     l5921:	
 14219  04C4  084D               	movf	___ftadd@exp1,w
 14220  04C5  024C               	subwf	___ftadd@exp2,w
 14221  04C6  1803               	skipnc
 14222  04C7  2CE9               	goto	l3014
 14223  04C8                     l5923:	
 14224  04C8  3001               	movlw	1
 14225  04C9                     u4545:	
 14226  04C9  35C1               	lslf	___ftadd@f1,f
 14227  04CA  0DC2               	rlf	___ftadd@f1+1,f
 14228  04CB  0DC3               	rlf	___ftadd@f1+2,f
 14229  04CC  0B89               	decfsz	9,f
 14230  04CD  2CC9               	goto	u4545
 14231  04CE  3001               	movlw	1
 14232  04CF  02CD               	subwf	___ftadd@exp1,f
 14233  04D0  084C               	movf	___ftadd@exp2,w
 14234  04D1  064D               	xorwf	___ftadd@exp1,w
 14235  04D2  1903               	skipnz
 14236  04D3  2CE5               	goto	l5931
 14237  04D4  3001               	movlw	1
 14238  04D5  02CB               	subwf	___ftadd@sign,f
 14239  04D6  084B               	movf	___ftadd@sign,w
 14240  04D7  3907               	andlw	7
 14241  04D8  1903               	btfsc	3,2
 14242  04D9  2CE5               	goto	l5931
 14243  04DA  2CC8               	goto	l5923
 14244  04DB                     l5929:	
 14245  04DB  3001               	movlw	1
 14246  04DC                     u4575:	
 14247  04DC  36C6               	lsrf	___ftadd@f2+2,f
 14248  04DD  0CC5               	rrf	___ftadd@f2+1,f
 14249  04DE  0CC4               	rrf	___ftadd@f2,f
 14250  04DF  0B89               	decfsz	9,f
 14251  04E0  2CDC               	goto	u4575
 14252  04E1  3001               	movlw	1
 14253  04E2  00C7               	movwf	??___ftadd
 14254  04E3  0847               	movf	??___ftadd,w
 14255  04E4  07CC               	addwf	___ftadd@exp2,f
 14256  04E5                     l5931:	
 14257  04E5  084D               	movf	___ftadd@exp1,w
 14258  04E6  064C               	xorwf	___ftadd@exp2,w
 14259  04E7  1D03               	skipz
 14260  04E8  2CDB               	goto	l5929
 14261  04E9                     l3014:	
 14262  04E9  1FCB               	btfss	___ftadd@sign,7
 14263  04EA  2CFB               	goto	l5935
 14264  04EB  30FF               	movlw	255
 14265  04EC  06C1               	xorwf	___ftadd@f1,f
 14266  04ED  30FF               	movlw	255
 14267  04EE  06C2               	xorwf	___ftadd@f1+1,f
 14268  04EF  30FF               	movlw	255
 14269  04F0  06C3               	xorwf	___ftadd@f1+2,f
 14270  04F1  3001               	movlw	1
 14271  04F2  07C1               	addwf	___ftadd@f1,f
 14272  04F3  3000               	movlw	0
 14273  04F4  1803               	skipnc
 14274  04F5  3001               	movlw	1
 14275  04F6  07C2               	addwf	___ftadd@f1+1,f
 14276  04F7  3000               	movlw	0
 14277  04F8  1803               	skipnc
 14278  04F9  3001               	movlw	1
 14279  04FA  07C3               	addwf	___ftadd@f1+2,f
 14280  04FB                     l5935:	
 14281  04FB  1F4B               	btfss	___ftadd@sign,6
 14282  04FC  2D0D               	goto	l5939
 14283  04FD  30FF               	movlw	255
 14284  04FE  06C4               	xorwf	___ftadd@f2,f
 14285  04FF  30FF               	movlw	255
 14286  0500  06C5               	xorwf	___ftadd@f2+1,f
 14287  0501  30FF               	movlw	255
 14288  0502  06C6               	xorwf	___ftadd@f2+2,f
 14289  0503  3001               	movlw	1
 14290  0504  07C4               	addwf	___ftadd@f2,f
 14291  0505  3000               	movlw	0
 14292  0506  1803               	skipnc
 14293  0507  3001               	movlw	1
 14294  0508  07C5               	addwf	___ftadd@f2+1,f
 14295  0509  3000               	movlw	0
 14296  050A  1803               	skipnc
 14297  050B  3001               	movlw	1
 14298  050C  07C6               	addwf	___ftadd@f2+2,f
 14299  050D                     l5939:	
 14300  050D  01CB               	clrf	___ftadd@sign
 14301  050E  0841               	movf	___ftadd@f1,w
 14302  050F  07C4               	addwf	___ftadd@f2,f
 14303  0510  0842               	movf	___ftadd@f1+1,w
 14304  0511  3DC5               	addwfc	___ftadd@f2+1,f
 14305  0512  0843               	movf	___ftadd@f1+2,w
 14306  0513  3DC6               	addwfc	___ftadd@f2+2,f
 14307  0514  1FC6               	btfss	___ftadd@f2+2,7
 14308  0515  2D28               	goto	l5949
 14309  0516  30FF               	movlw	255
 14310  0517  06C4               	xorwf	___ftadd@f2,f
 14311  0518  30FF               	movlw	255
 14312  0519  06C5               	xorwf	___ftadd@f2+1,f
 14313  051A  30FF               	movlw	255
 14314  051B  06C6               	xorwf	___ftadd@f2+2,f
 14315  051C  3001               	movlw	1
 14316  051D  07C4               	addwf	___ftadd@f2,f
 14317  051E  3000               	movlw	0
 14318  051F  1803               	skipnc
 14319  0520  3001               	movlw	1
 14320  0521  07C5               	addwf	___ftadd@f2+1,f
 14321  0522  3000               	movlw	0
 14322  0523  1803               	skipnc
 14323  0524  3001               	movlw	1
 14324  0525  07C6               	addwf	___ftadd@f2+2,f
 14325  0526  01CB               	clrf	___ftadd@sign
 14326  0527  0ACB               	incf	___ftadd@sign,f
 14327  0528                     l5949:	
 14328  0528  0844               	movf	___ftadd@f2,w
 14329  0529  00A0               	movwf	___ftpack@arg
 14330  052A  0845               	movf	___ftadd@f2+1,w
 14331  052B  00A1               	movwf	___ftpack@arg+1
 14332  052C  0846               	movf	___ftadd@f2+2,w
 14333  052D  00A2               	movwf	___ftpack@arg+2
 14334  052E  084D               	movf	___ftadd@exp1,w
 14335  052F  00C7               	movwf	??___ftadd
 14336  0530  0847               	movf	??___ftadd,w
 14337  0531  00A3               	movwf	___ftpack@exp
 14338  0532  084B               	movf	___ftadd@sign,w
 14339  0533  00C8               	movwf	??___ftadd+1
 14340  0534  0848               	movf	??___ftadd+1,w
 14341  0535  00A4               	movwf	___ftpack@sign
 14342  0536  3189  2119         	fcall	___ftpack
 14343  0538  0020               	movlb	0	; select bank0
 14344  0539  0820               	movf	?___ftpack,w
 14345  053A  00C1               	movwf	?___ftadd
 14346  053B  0821               	movf	?___ftpack+1,w
 14347  053C  00C2               	movwf	?___ftadd+1
 14348  053D  0822               	movf	?___ftpack+2,w
 14349  053E  00C3               	movwf	?___ftadd+2
 14350  053F  0008               	return
 14351  0540                     __end_of___ftadd:	
 14352                           
 14353                           	psect	text83
 14354  1F75                     __ptext83:	
 14355 ;; *************** function ___awtoft *****************
 14356 ;; Defined at:
 14357 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14358 ;; Parameters:    Size  Location     Type
 14359 ;;  c               2    8[BANK0 ] int 
 14360 ;; Auto vars:     Size  Location     Type
 14361 ;;  sign            1   13[BANK0 ] unsigned char 
 14362 ;; Return value:  Size  Location     Type
 14363 ;;                  3    8[BANK0 ] float 
 14364 ;; Registers used:
 14365 ;;		wreg, status,2, status,0, pclath, cstack
 14366 ;; Tracked objects:
 14367 ;;		On entry : 0/0
 14368 ;;		On exit  : 0/0
 14369 ;;		Unchanged: 0/0
 14370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14371 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;Total ram usage:        6 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; Hardware stack levels required when called:    6
 14378 ;; This function calls:
 14379 ;;		___ftpack
 14380 ;; This function is called by:
 14381 ;;		_getPercentValue
 14382 ;;		_setPercentValue
 14383 ;; This function uses a non-reentrant model
 14384 ;;
 14385                           
 14386                           
 14387                           ;psect for function ___awtoft
 14388  1F75                     ___awtoft:	
 14389                           
 14390                           ;incstack = 0
 14391                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14392  1F75  0020               	movlb	0	; select bank0
 14393  1F76  01AD               	clrf	___awtoft@sign
 14394  1F77  1FA9               	btfss	___awtoft@c+1,7
 14395  1F78  2F80               	goto	l5877
 14396  1F79  09A8               	comf	___awtoft@c,f
 14397  1F7A  09A9               	comf	___awtoft@c+1,f
 14398  1F7B  0AA8               	incf	___awtoft@c,f
 14399  1F7C  1903               	skipnz
 14400  1F7D  0AA9               	incf	___awtoft@c+1,f
 14401  1F7E  01AD               	clrf	___awtoft@sign
 14402  1F7F  0AAD               	incf	___awtoft@sign,f
 14403  1F80                     l5877:	
 14404  1F80  0828               	movf	___awtoft@c,w
 14405  1F81  00A0               	movwf	___ftpack@arg
 14406  1F82  0829               	movf	___awtoft@c+1,w
 14407  1F83  00A1               	movwf	___ftpack@arg+1
 14408  1F84  01A2               	clrf	___ftpack@arg+2
 14409  1F85  308E               	movlw	142
 14410  1F86  00AB               	movwf	??___awtoft
 14411  1F87  082B               	movf	??___awtoft,w
 14412  1F88  00A3               	movwf	___ftpack@exp
 14413  1F89  082D               	movf	___awtoft@sign,w
 14414  1F8A  00AC               	movwf	??___awtoft+1
 14415  1F8B  082C               	movf	??___awtoft+1,w
 14416  1F8C  00A4               	movwf	___ftpack@sign
 14417  1F8D  3189  2119         	fcall	___ftpack
 14418  1F8F  0020               	movlb	0	; select bank0
 14419  1F90  0820               	movf	?___ftpack,w
 14420  1F91  00A8               	movwf	?___awtoft
 14421  1F92  0821               	movf	?___ftpack+1,w
 14422  1F93  00A9               	movwf	?___awtoft+1
 14423  1F94  0822               	movf	?___ftpack+2,w
 14424  1F95  00AA               	movwf	?___awtoft+2
 14425  1F96  0008               	return
 14426  1F97                     __end_of___awtoft:	
 14427                           
 14428                           	psect	text84
 14429  0919                     __ptext84:	
 14430 ;; *************** function ___ftpack *****************
 14431 ;; Defined at:
 14432 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;  arg             3    0[BANK0 ] unsigned um
 14435 ;;  exp             1    3[BANK0 ] unsigned char 
 14436 ;;  sign            1    4[BANK0 ] unsigned char 
 14437 ;; Auto vars:     Size  Location     Type
 14438 ;;		None
 14439 ;; Return value:  Size  Location     Type
 14440 ;;                  3    0[BANK0 ] float 
 14441 ;; Registers used:
 14442 ;;		wreg, status,2, status,0
 14443 ;; Tracked objects:
 14444 ;;		On entry : 0/0
 14445 ;;		On exit  : 0/0
 14446 ;;		Unchanged: 0/0
 14447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14448 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;Total ram usage:        8 bytes
 14453 ;; Hardware stack levels used:    1
 14454 ;; Hardware stack levels required when called:    5
 14455 ;; This function calls:
 14456 ;;		Nothing
 14457 ;; This function is called by:
 14458 ;;		___awtoft
 14459 ;;		___ftadd
 14460 ;;		___ftdiv
 14461 ;;		___ftmul
 14462 ;; This function uses a non-reentrant model
 14463 ;;
 14464                           
 14465                           
 14466                           ;psect for function ___ftpack
 14467  0919                     ___ftpack:	
 14468                           
 14469                           ;incstack = 0
 14470                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14471  0919  0020               	movlb	0	; select bank0
 14472  091A  0823               	movf	___ftpack@exp,w
 14473  091B  1903               	btfsc	3,2
 14474  091C  2922               	goto	l5827
 14475  091D  0822               	movf	___ftpack@arg+2,w
 14476  091E  0421               	iorwf	___ftpack@arg+1,w
 14477  091F  0420               	iorwf	___ftpack@arg,w
 14478  0920  1D03               	skipz
 14479  0921  2933               	goto	l5833
 14480  0922                     l5827:	
 14481  0922  3000               	movlw	0
 14482  0923  00A0               	movwf	?___ftpack
 14483  0924  3000               	movlw	0
 14484  0925  00A1               	movwf	?___ftpack+1
 14485  0926  3000               	movlw	0
 14486  0927  00A2               	movwf	?___ftpack+2
 14487  0928  0008               	return
 14488  0929                     l5831:	
 14489  0929  3001               	movlw	1
 14490  092A  00A5               	movwf	??___ftpack
 14491  092B  0825               	movf	??___ftpack,w
 14492  092C  07A3               	addwf	___ftpack@exp,f
 14493  092D  3001               	movlw	1
 14494  092E                     u4275:	
 14495  092E  36A2               	lsrf	___ftpack@arg+2,f
 14496  092F  0CA1               	rrf	___ftpack@arg+1,f
 14497  0930  0CA0               	rrf	___ftpack@arg,f
 14498  0931  0B89               	decfsz	9,f
 14499  0932  292E               	goto	u4275
 14500  0933                     l5833:	
 14501  0933  30FE               	movlw	254
 14502  0934  0522               	andwf	___ftpack@arg+2,w
 14503  0935  1903               	btfsc	3,2
 14504  0936  294C               	goto	l2985
 14505  0937  2929               	goto	l5831
 14506  0938                     l5835:	
 14507  0938  3001               	movlw	1
 14508  0939  00A5               	movwf	??___ftpack
 14509  093A  0825               	movf	??___ftpack,w
 14510  093B  07A3               	addwf	___ftpack@exp,f
 14511  093C  3001               	movlw	1
 14512  093D  07A0               	addwf	___ftpack@arg,f
 14513  093E  3000               	movlw	0
 14514  093F  1803               	skipnc
 14515  0940  3001               	movlw	1
 14516  0941  07A1               	addwf	___ftpack@arg+1,f
 14517  0942  3000               	movlw	0
 14518  0943  1803               	skipnc
 14519  0944  3001               	movlw	1
 14520  0945  07A2               	addwf	___ftpack@arg+2,f
 14521  0946  3001               	movlw	1
 14522  0947                     u4295:	
 14523  0947  36A2               	lsrf	___ftpack@arg+2,f
 14524  0948  0CA1               	rrf	___ftpack@arg+1,f
 14525  0949  0CA0               	rrf	___ftpack@arg,f
 14526  094A  0B89               	decfsz	9,f
 14527  094B  2947               	goto	u4295
 14528  094C                     l2985:	
 14529  094C  30FF               	movlw	255
 14530  094D  0522               	andwf	___ftpack@arg+2,w
 14531  094E  1903               	btfsc	3,2
 14532  094F  2959               	goto	l5843
 14533  0950  2938               	goto	l5835
 14534  0951                     l5841:	
 14535  0951  3001               	movlw	1
 14536  0952  02A3               	subwf	___ftpack@exp,f
 14537  0953  3001               	movlw	1
 14538  0954                     u4315:	
 14539  0954  35A0               	lslf	___ftpack@arg,f
 14540  0955  0DA1               	rlf	___ftpack@arg+1,f
 14541  0956  0DA2               	rlf	___ftpack@arg+2,f
 14542  0957  0B89               	decfsz	9,f
 14543  0958  2954               	goto	u4315
 14544  0959                     l5843:	
 14545  0959  1FA1               	btfss	___ftpack@arg+1,7
 14546  095A  2951               	goto	l5841
 14547  095B  1823               	btfsc	___ftpack@exp,0
 14548  095C  2963               	goto	l2991
 14549  095D  30FF               	movlw	255
 14550  095E  05A0               	andwf	___ftpack@arg,f
 14551  095F  307F               	movlw	127
 14552  0960  05A1               	andwf	___ftpack@arg+1,f
 14553  0961  30FF               	movlw	255
 14554  0962  05A2               	andwf	___ftpack@arg+2,f
 14555  0963                     l2991:	
 14556  0963  1003               	clrc
 14557  0964  0CA3               	rrf	___ftpack@exp,f
 14558  0965  0823               	movf	___ftpack@exp,w
 14559  0966  00A5               	movwf	??___ftpack
 14560  0967  01A6               	clrf	??___ftpack+1
 14561  0968  01A7               	clrf	??___ftpack+2
 14562  0969  3010               	movlw	16
 14563  096A                     u4345:	
 14564  096A  35A5               	lslf	??___ftpack,f
 14565  096B  0DA6               	rlf	??___ftpack+1,f
 14566  096C  0DA7               	rlf	??___ftpack+2,f
 14567  096D  0B89               	decfsz	9,f
 14568  096E  296A               	goto	u4345
 14569  096F  0825               	movf	??___ftpack,w
 14570  0970  04A0               	iorwf	___ftpack@arg,f
 14571  0971  0826               	movf	??___ftpack+1,w
 14572  0972  04A1               	iorwf	___ftpack@arg+1,f
 14573  0973  0827               	movf	??___ftpack+2,w
 14574  0974  04A2               	iorwf	___ftpack@arg+2,f
 14575  0975  0824               	movf	___ftpack@sign,w
 14576  0976  1903               	btfsc	3,2
 14577  0977  0008               	return
 14578  0978  17A2               	bsf	___ftpack@arg+2,7
 14579  0979  0008               	return
 14580  097A                     __end_of___ftpack:	
 14581                           
 14582                           	psect	text85
 14583  1540                     __ptext85:	
 14584 ;; *************** function _setLED *****************
 14585 ;; Defined at:
 14586 ;;		line 76 in file "../src/LED_B1.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  led             1    wreg     unsigned char 
 14589 ;;  command         1    2[BANK0 ] unsigned char 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;  led             1    3[BANK0 ] unsigned char 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;		None               void
 14594 ;; Registers used:
 14595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;Total ram usage:        2 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    6
 14608 ;; This function calls:
 14609 ;;		_LedPointSelect
 14610 ;; This function is called by:
 14611 ;;		_setDimmerLights
 14612 ;;		_setLED_Initialization
 14613 ;;		_setSw_Initialization
 14614 ;;		_setMain_Exception
 14615 ;; This function uses a non-reentrant model
 14616 ;;
 14617                           
 14618                           
 14619                           ;psect for function _setLED
 14620  1540                     _setLED:	
 14621                           
 14622                           ;incstack = 0
 14623                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14624                           ;setLED@led stored from wreg
 14625  1540  0020               	movlb	0	; select bank0
 14626  1541  00A3               	movwf	setLED@led
 14627                           
 14628                           ;LED_B1.c: 77: LedPointSelect(led);
 14629  1542  0823               	movf	setLED@led,w
 14630  1543  319E  2680  3195   	fcall	_LedPointSelect
 14631                           
 14632                           ;LED_B1.c: 78: if (command == 0) {
 14633  1546  0020               	movlb	0	; select bank0
 14634  1547  08A2               	movf	setLED@command,f
 14635  1548  1D03               	skipz
 14636  1549  2D57               	goto	l6595
 14637                           
 14638                           ;LED_B1.c: 80: if (led == 1) {
 14639  154A  0823               	movf	setLED@led,w
 14640  154B  3A01               	xorlw	1
 14641  154C  1D03               	skipz
 14642  154D  2D4F               	goto	l6587
 14643                           
 14644                           ;LED_B1.c: 84: RA3 = 1;
 14645  154E  158C               	bsf	12,3	;volatile
 14646  154F                     l6587:	
 14647                           
 14648                           ;LED_B1.c: 86: }
 14649                           ;LED_B1.c: 89: if (led == 2) {
 14650  154F  0823               	movf	setLED@led,w
 14651  1550  3A02               	xorlw	2
 14652  1551  1903               	btfsc	3,2
 14653                           
 14654                           ;LED_B1.c: 93: RC7 = 1;
 14655  1552  178E               	bsf	14,7	;volatile
 14656                           
 14657                           ;LED_B1.c: 95: }
 14658                           ;LED_B1.c: 107: if (led == 99) {
 14659  1553  0823               	movf	setLED@led,w
 14660  1554  3A63               	xorlw	99
 14661  1555  1903               	btfsc	3,2
 14662                           
 14663                           ;LED_B1.c: 111: RB5 = 1;
 14664  1556  168D               	bsf	13,5	;volatile
 14665  1557                     l6595:	
 14666                           
 14667                           ;LED_B1.c: 113: }
 14668                           ;LED_B1.c: 115: }
 14669                           ;LED_B1.c: 116: if (command == 1) {
 14670  1557  0822               	movf	setLED@command,w
 14671  1558  3A01               	xorlw	1
 14672  1559  1D03               	skipz
 14673  155A  2D68               	goto	l6609
 14674                           
 14675                           ;LED_B1.c: 118: if (led == 1) {
 14676  155B  0823               	movf	setLED@led,w
 14677  155C  3A01               	xorlw	1
 14678  155D  1D03               	skipz
 14679  155E  2D60               	goto	l6601
 14680                           
 14681                           ;LED_B1.c: 122: RA3 = 0;
 14682  155F  118C               	bcf	12,3	;volatile
 14683  1560                     l6601:	
 14684                           
 14685                           ;LED_B1.c: 124: }
 14686                           ;LED_B1.c: 127: if (led == 2) {
 14687  1560  0823               	movf	setLED@led,w
 14688  1561  3A02               	xorlw	2
 14689  1562  1903               	btfsc	3,2
 14690                           
 14691                           ;LED_B1.c: 131: RC7 = 0;
 14692  1563  138E               	bcf	14,7	;volatile
 14693                           
 14694                           ;LED_B1.c: 133: }
 14695                           ;LED_B1.c: 145: if (led == 99) {
 14696  1564  0823               	movf	setLED@led,w
 14697  1565  3A63               	xorlw	99
 14698  1566  1903               	btfsc	3,2
 14699                           
 14700                           ;LED_B1.c: 149: RB5 = 0;
 14701  1567  128D               	bcf	13,5	;volatile
 14702  1568                     l6609:	
 14703                           
 14704                           ;LED_B1.c: 151: }
 14705                           ;LED_B1.c: 153: }
 14706                           ;LED_B1.c: 154: if (command == 10) {
 14707  1568  0822               	movf	setLED@command,w
 14708  1569  3A0A               	xorlw	10
 14709  156A  1D03               	skipz
 14710  156B  2D86               	goto	l6625
 14711                           
 14712                           ;LED_B1.c: 155: LED->GO = 0;
 14713  156C  087A               	movf	_LED,w
 14714  156D  0086               	movwf	6
 14715  156E  3001               	movlw	1	; select bank2/3
 14716  156F  0087               	movwf	7
 14717  1570  1081               	bcf	1,1
 14718                           
 14719                           ;LED_B1.c: 156: LED->Time = 0;
 14720  1571  0A7A               	incf	_LED,w
 14721  1572  0086               	movwf	6
 14722  1573  3001               	movlw	1	; select bank2/3
 14723  1574  0087               	movwf	7
 14724  1575  3000               	movlw	0
 14725  1576  3FC0               	movwi [0]fsr1
 14726  1577  3FC1               	movwi [1]fsr1
 14727                           
 14728                           ;LED_B1.c: 158: if (led == 1) {
 14729  1578  0823               	movf	setLED@led,w
 14730  1579  3A01               	xorlw	1
 14731  157A  1D03               	skipz
 14732  157B  2D7E               	goto	l6617
 14733                           
 14734                           ;LED_B1.c: 162: RA3 = 1;
 14735  157C  158C               	bsf	12,3	;volatile
 14736                           
 14737                           ;LED_B1.c: 164: }
 14738  157D  2D82               	goto	l6621
 14739  157E                     l6617:	
 14740                           
 14741                           ;LED_B1.c: 167: else if (led == 2) {
 14742  157E  0823               	movf	setLED@led,w
 14743  157F  3A02               	xorlw	2
 14744  1580  1903               	btfsc	3,2
 14745                           
 14746                           ;LED_B1.c: 171: RC7 = 1;
 14747  1581  178E               	bsf	14,7	;volatile
 14748  1582                     l6621:	
 14749                           
 14750                           ;LED_B1.c: 173: }
 14751                           ;LED_B1.c: 185: if (led == 99) {
 14752  1582  0823               	movf	setLED@led,w
 14753  1583  3A63               	xorlw	99
 14754  1584  1903               	btfsc	3,2
 14755                           
 14756                           ;LED_B1.c: 189: RB5 = 1;
 14757  1585  168D               	bsf	13,5	;volatile
 14758  1586                     l6625:	
 14759                           
 14760                           ;LED_B1.c: 191: }
 14761                           ;LED_B1.c: 193: }
 14762                           ;LED_B1.c: 194: if (command == 11) {
 14763  1586  0822               	movf	setLED@command,w
 14764  1587  3A0B               	xorlw	11
 14765  1588  1D03               	skipz
 14766  1589  0008               	return
 14767                           
 14768                           ;LED_B1.c: 195: LED->GO = 1;
 14769  158A  087A               	movf	_LED,w
 14770  158B  0086               	movwf	6
 14771  158C  3001               	movlw	1	; select bank2/3
 14772  158D  0087               	movwf	7
 14773  158E  1481               	bsf	1,1
 14774  158F  0008               	return
 14775  1590                     __end_of_setLED:	
 14776                           
 14777                           	psect	text86
 14778  1E80                     __ptext86:	
 14779 ;; *************** function _LedPointSelect *****************
 14780 ;; Defined at:
 14781 ;;		line 7 in file "../src/LED_B1.c"
 14782 ;; Parameters:    Size  Location     Type
 14783 ;;  led             1    wreg     unsigned char 
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;  led             1    1[BANK0 ] unsigned char 
 14786 ;; Return value:  Size  Location     Type
 14787 ;;		None               void
 14788 ;; Registers used:
 14789 ;;		wreg
 14790 ;; Tracked objects:
 14791 ;;		On entry : 0/0
 14792 ;;		On exit  : 0/0
 14793 ;;		Unchanged: 0/0
 14794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;Total ram usage:        2 bytes
 14800 ;; Hardware stack levels used:    1
 14801 ;; Hardware stack levels required when called:    5
 14802 ;; This function calls:
 14803 ;;		Nothing
 14804 ;; This function is called by:
 14805 ;;		_setLED_Initialization
 14806 ;;		_setLED
 14807 ;;		_setLED_Main
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811                           
 14812                           ;psect for function _LedPointSelect
 14813  1E80                     _LedPointSelect:	
 14814                           
 14815                           ;incstack = 0
 14816                           ; Regs used in _LedPointSelect: [wreg]
 14817                           ;LedPointSelect@led stored from wreg
 14818  1E80  0020               	movlb	0	; select bank0
 14819  1E81  00A1               	movwf	LedPointSelect@led
 14820                           
 14821                           ;LED_B1.c: 9: if (led == 1) {
 14822  1E82  0821               	movf	LedPointSelect@led,w
 14823  1E83  3A01               	xorlw	1
 14824  1E84  1D03               	skipz
 14825  1E85  2E8A               	goto	l996
 14826                           
 14827                           ;LED_B1.c: 10: LED = &VarLED1;
 14828  1E86  30DE               	movlw	_VarLED1& (0+255)
 14829  1E87  00A0               	movwf	??_LedPointSelect
 14830  1E88  0820               	movf	??_LedPointSelect,w
 14831  1E89  00FA               	movwf	_LED
 14832  1E8A                     l996:	
 14833                           
 14834                           ;LED_B1.c: 11: }
 14835                           ;LED_B1.c: 14: if (led == 2) {
 14836  1E8A  0821               	movf	LedPointSelect@led,w
 14837  1E8B  3A02               	xorlw	2
 14838  1E8C  1D03               	skipz
 14839  1E8D  2E92               	goto	l997
 14840                           
 14841                           ;LED_B1.c: 15: LED = &VarLED2;
 14842  1E8E  30E2               	movlw	_VarLED2& (0+255)
 14843  1E8F  00A0               	movwf	??_LedPointSelect
 14844  1E90  0820               	movf	??_LedPointSelect,w
 14845  1E91  00FA               	movwf	_LED
 14846  1E92                     l997:	
 14847                           
 14848                           ;LED_B1.c: 16: }
 14849                           ;LED_B1.c: 24: if (led == 99) {
 14850  1E92  0821               	movf	LedPointSelect@led,w
 14851  1E93  3A63               	xorlw	99
 14852  1E94  1D03               	skipz
 14853  1E95  0008               	return
 14854                           
 14855                           ;LED_B1.c: 25: LED = &VarErrLED;
 14856  1E96  30DA               	movlw	_VarErrLED& (0+255)
 14857  1E97  00A0               	movwf	??_LedPointSelect
 14858  1E98  0820               	movf	??_LedPointSelect,w
 14859  1E99  00FA               	movwf	_LED
 14860  1E9A  0008               	return
 14861  1E9B                     __end_of_LedPointSelect:	
 14862                           
 14863                           	psect	text87
 14864  1DC6                     __ptext87:	
 14865 ;; *************** function _setDimmerLights_Line *****************
 14866 ;; Defined at:
 14867 ;;		line 683 in file "../src/Dimmer_B1.c"
 14868 ;; Parameters:    Size  Location     Type
 14869 ;;  lights          1    wreg     unsigned char 
 14870 ;; Auto vars:     Size  Location     Type
 14871 ;;  lights          1    0[BANK0 ] unsigned char 
 14872 ;; Return value:  Size  Location     Type
 14873 ;;		None               void
 14874 ;; Registers used:
 14875 ;;		wreg
 14876 ;; Tracked objects:
 14877 ;;		On entry : 0/0
 14878 ;;		On exit  : 0/0
 14879 ;;		Unchanged: 0/0
 14880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;Total ram usage:        1 bytes
 14886 ;; Hardware stack levels used:    1
 14887 ;; Hardware stack levels required when called:    5
 14888 ;; This function calls:
 14889 ;;		Nothing
 14890 ;; This function is called by:
 14891 ;;		_setDimmerLights
 14892 ;; This function uses a non-reentrant model
 14893 ;;
 14894                           
 14895                           
 14896                           ;psect for function _setDimmerLights_Line
 14897  1DC6                     _setDimmerLights_Line:	
 14898                           
 14899                           ;incstack = 0
 14900                           ; Regs used in _setDimmerLights_Line: [wreg]
 14901                           ;setDimmerLights_Line@lights stored from wreg
 14902  1DC6  0020               	movlb	0	; select bank0
 14903  1DC7  00A0               	movwf	setDimmerLights_Line@lights
 14904                           
 14905                           ;Dimmer_B1.c: 685: DimmerLights1.Line = 0;
 14906  1DC8  0023               	movlb	3	; select bank3
 14907  1DC9  1029               	bcf	(_DimmerLights1^(0+384)+9),0
 14908                           
 14909                           ;Dimmer_B1.c: 688: DimmerLights2.Line = 0;
 14910  1DCA  1038               	bcf	(_DimmerLights2^(0+384)+9),0
 14911                           
 14912                           ;Dimmer_B1.c: 694: if (lights == 1) {
 14913  1DCB  0020               	movlb	0	; select bank0
 14914  1DCC  0820               	movf	setDimmerLights_Line@lights,w
 14915  1DCD  3A01               	xorlw	1
 14916  1DCE  1D03               	skipz
 14917  1DCF  2DD3               	goto	l6635
 14918                           
 14919                           ;Dimmer_B1.c: 695: DimmerLights1.Line = 1;
 14920  1DD0  0023               	movlb	3	; select bank3
 14921  1DD1  1429               	bsf	(_DimmerLights1^(0+384)+9),0
 14922                           
 14923                           ;Dimmer_B1.c: 696: }
 14924  1DD2  0008               	return
 14925  1DD3                     l6635:	
 14926                           
 14927                           ;Dimmer_B1.c: 699: else if (lights == 2) {
 14928  1DD3  0020               	movlb	0	; select bank0
 14929  1DD4  0820               	movf	setDimmerLights_Line@lights,w
 14930  1DD5  3A02               	xorlw	2
 14931  1DD6  1D03               	skipz
 14932  1DD7  0008               	return
 14933                           
 14934                           ;Dimmer_B1.c: 700: DimmerLights2.Line = 1;
 14935  1DD8  0023               	movlb	3	; select bank3
 14936  1DD9  1438               	bsf	(_DimmerLights2^(0+384)+9),0
 14937  1DDA  0008               	return
 14938  1DDB                     __end_of_setDimmerLights_Line:	
 14939                           
 14940                           	psect	text88
 14941  11DC                     __ptext88:	
 14942 ;; *************** function _getMain_All_Error_Status *****************
 14943 ;; Defined at:
 14944 ;;		line 376 in file "../src/main_B1.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;  command         1    wreg     unsigned char 
 14947 ;; Auto vars:     Size  Location     Type
 14948 ;;  command         1    5[BANK0 ] unsigned char 
 14949 ;;  status          1    6[BANK0 ] unsigned char 
 14950 ;; Return value:  Size  Location     Type
 14951 ;;                  1    wreg      unsigned char 
 14952 ;; Registers used:
 14953 ;;		wreg, status,2, status,0
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : 0/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14962 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14963 ;;Total ram usage:        7 bytes
 14964 ;; Hardware stack levels used:    1
 14965 ;; Hardware stack levels required when called:    5
 14966 ;; This function calls:
 14967 ;;		Nothing
 14968 ;; This function is called by:
 14969 ;;		_DimmerLights_Main
 14970 ;;		_setDimmerLights
 14971 ;;		_setDimmerLights_Adj
 14972 ;;		_Load_Main
 14973 ;;		_setTemp_Main
 14974 ;;		_setRF_Main
 14975 ;;		_getRxData
 14976 ;;		_Switch_Main
 14977 ;; This function uses a non-reentrant model
 14978 ;;
 14979                           
 14980                           
 14981                           ;psect for function _getMain_All_Error_Status
 14982  11DC                     _getMain_All_Error_Status:	
 14983                           
 14984                           ;incstack = 0
 14985                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14986                           ;getMain_All_Error_Status@command stored from wreg
 14987  11DC  0020               	movlb	0	; select bank0
 14988  11DD  00A5               	movwf	getMain_All_Error_Status@command
 14989                           
 14990                           ;main_B1.c: 377: char status = 0;
 14991  11DE  01A6               	clrf	getMain_All_Error_Status@status
 14992                           
 14993                           ;main_B1.c: 388: if (status == 0 && command != 2) {
 14994  11DF  08A6               	movf	getMain_All_Error_Status@status,f
 14995  11E0  1D03               	skipz
 14996  11E1  29F6               	goto	l6567
 14997  11E2  0825               	movf	getMain_All_Error_Status@command,w
 14998  11E3  3A02               	xorlw	2
 14999  11E4  1903               	skipnz
 15000  11E5  29F6               	goto	l6567
 15001                           
 15002                           ;main_B1.c: 389: status = Temp.ERROR == 1 ? 2 : 0;
 15003  11E6  0021               	movlb	1	; select bank1
 15004  11E7  18D7               	btfsc	_Temp^(0+128),1
 15005  11E8  29ED               	goto	l6565
 15006  11E9  0020               	movlb	0	; select bank0
 15007  11EA  01A1               	clrf	_getMain_All_Error_Status$7096
 15008  11EB  01A2               	clrf	_getMain_All_Error_Status$7096+1
 15009  11EC  29F2               	goto	l2724
 15010  11ED                     l6565:	
 15011  11ED  3002               	movlw	2
 15012  11EE  0020               	movlb	0	; select bank0
 15013  11EF  00A1               	movwf	_getMain_All_Error_Status$7096
 15014  11F0  3000               	movlw	0
 15015  11F1  00A2               	movwf	_getMain_All_Error_Status$7096+1
 15016  11F2                     l2724:	
 15017  11F2  0821               	movf	_getMain_All_Error_Status$7096,w
 15018  11F3  00A0               	movwf	??_getMain_All_Error_Status
 15019  11F4  0820               	movf	??_getMain_All_Error_Status,w
 15020  11F5  00A6               	movwf	getMain_All_Error_Status@status
 15021  11F6                     l6567:	
 15022                           
 15023                           ;main_B1.c: 390: }
 15024                           ;main_B1.c: 395: if (status == 0 && command != 3) {
 15025  11F6  08A6               	movf	getMain_All_Error_Status@status,f
 15026  11F7  1D03               	skipz
 15027  11F8  2A0D               	goto	l2725
 15028  11F9  0825               	movf	getMain_All_Error_Status@command,w
 15029  11FA  3A03               	xorlw	3
 15030  11FB  1903               	skipnz
 15031  11FC  2A0D               	goto	l2725
 15032                           
 15033                           ;main_B1.c: 396: status = Load.ERROR == 1 ? 3 : 0;
 15034  11FD  0022               	movlb	2	; select bank2
 15035  11FE  1AC3               	btfsc	_Load^(0+256),5
 15036  11FF  2A04               	goto	l6575
 15037  1200  0020               	movlb	0	; select bank0
 15038  1201  01A3               	clrf	_getMain_All_Error_Status$7097
 15039  1202  01A4               	clrf	_getMain_All_Error_Status$7097+1
 15040  1203  2A09               	goto	l2729
 15041  1204                     l6575:	
 15042  1204  3003               	movlw	3
 15043  1205  0020               	movlb	0	; select bank0
 15044  1206  00A3               	movwf	_getMain_All_Error_Status$7097
 15045  1207  3000               	movlw	0
 15046  1208  00A4               	movwf	_getMain_All_Error_Status$7097+1
 15047  1209                     l2729:	
 15048  1209  0823               	movf	_getMain_All_Error_Status$7097,w
 15049  120A  00A0               	movwf	??_getMain_All_Error_Status
 15050  120B  0820               	movf	??_getMain_All_Error_Status,w
 15051  120C  00A6               	movwf	getMain_All_Error_Status@status
 15052  120D                     l2725:	
 15053                           
 15054                           ;main_B1.c: 397: }
 15055                           ;main_B1.c: 413: return status;
 15056  120D  0826               	movf	getMain_All_Error_Status@status,w
 15057  120E  0008               	return
 15058  120F                     __end_of_getMain_All_Error_Status:	
 15059                           
 15060                           	psect	text89
 15061  114E                     __ptext89:	
 15062 ;; *************** function _getMain_LightsStatus *****************
 15063 ;; Defined at:
 15064 ;;		line 349 in file "../src/main_B1.c"
 15065 ;; Parameters:    Size  Location     Type
 15066 ;;		None
 15067 ;; Auto vars:     Size  Location     Type
 15068 ;;  i               2    6[BANK0 ] int 
 15069 ;;  status          1    8[BANK0 ] unsigned char 
 15070 ;;  count           1    5[BANK0 ] unsigned char 
 15071 ;; Return value:  Size  Location     Type
 15072 ;;                  1    wreg      unsigned char 
 15073 ;; Registers used:
 15074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;Total ram usage:        5 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    7
 15087 ;; This function calls:
 15088 ;;		_getDimmerLights_Status
 15089 ;; This function is called by:
 15090 ;;		_DimmerLights_Main
 15091 ;;		_Flash_Memory_Main
 15092 ;;		_Load_Main
 15093 ;;		_setMain_Exception
 15094 ;; This function uses a non-reentrant model
 15095 ;;
 15096                           
 15097                           
 15098                           ;psect for function _getMain_LightsStatus
 15099  114E                     _getMain_LightsStatus:	
 15100                           
 15101                           ;main_B1.c: 350: char status = 0, count = 0;
 15102                           
 15103                           ;incstack = 0
 15104                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15105  114E  0020               	movlb	0	; select bank0
 15106  114F  01A8               	clrf	getMain_LightsStatus@status
 15107  1150  01A5               	clrf	getMain_LightsStatus@count
 15108                           
 15109                           ;main_B1.c: 356: count = 2;
 15110  1151  3002               	movlw	2
 15111  1152  00A4               	movwf	??_getMain_LightsStatus
 15112  1153  0824               	movf	??_getMain_LightsStatus,w
 15113  1154  00A5               	movwf	getMain_LightsStatus@count
 15114                           
 15115                           ;main_B1.c: 362: for (int i = 0; i < count; i++) {
 15116  1155  01A6               	clrf	getMain_LightsStatus@i
 15117  1156  01A7               	clrf	getMain_LightsStatus@i+1
 15118  1157                     l6875:	
 15119  1157  0827               	movf	getMain_LightsStatus@i+1,w
 15120  1158  3A80               	xorlw	128
 15121  1159  00A4               	movwf	??_getMain_LightsStatus
 15122  115A  3080               	movlw	128
 15123  115B  0224               	subwf	??_getMain_LightsStatus,w
 15124  115C  1D03               	skipz
 15125  115D  2960               	goto	u6055
 15126  115E  0825               	movf	getMain_LightsStatus@count,w
 15127  115F  0226               	subwf	getMain_LightsStatus@i,w
 15128  1160                     u6055:	
 15129  1160  1803               	btfsc	3,0
 15130  1161  2978               	goto	l6877
 15131                           
 15132                           ;main_B1.c: 363: if (status == 0) {
 15133  1162  0020               	movlb	0	; select bank0
 15134  1163  08A8               	movf	getMain_LightsStatus@status,f
 15135  1164  1D03               	skipz
 15136  1165  2973               	goto	l6873
 15137                           
 15138                           ;main_B1.c: 368: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15139  1166  0826               	movf	getMain_LightsStatus@i,w
 15140  1167  3E01               	addlw	1
 15141  1168  319C  2440  3191   	fcall	_getDimmerLights_Status
 15142  116B  3A01               	xorlw	1
 15143  116C  3000               	movlw	0
 15144  116D  1903               	skipnz
 15145  116E  3001               	movlw	1
 15146  116F  0020               	movlb	0	; select bank0
 15147  1170  00A4               	movwf	??_getMain_LightsStatus
 15148  1171  0824               	movf	??_getMain_LightsStatus,w
 15149  1172  00A8               	movwf	getMain_LightsStatus@status
 15150  1173                     l6873:	
 15151  1173  3001               	movlw	1
 15152  1174  07A6               	addwf	getMain_LightsStatus@i,f
 15153  1175  3000               	movlw	0
 15154  1176  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15155  1177  2957               	goto	l6875
 15156  1178                     l6877:	
 15157                           
 15158                           ;main_B1.c: 370: }
 15159                           ;main_B1.c: 371: }
 15160                           ;main_B1.c: 372: return status;
 15161  1178  0020               	movlb	0	; select bank0
 15162  1179  0828               	movf	getMain_LightsStatus@status,w
 15163  117A  0008               	return
 15164  117B                     __end_of_getMain_LightsStatus:	
 15165                           
 15166                           	psect	text90
 15167  1B64                     __ptext90:	
 15168 ;; *************** function _getLoad_OK *****************
 15169 ;; Defined at:
 15170 ;;		line 188 in file "../src/OverLoad_B1.c"
 15171 ;; Parameters:    Size  Location     Type
 15172 ;;		None
 15173 ;; Auto vars:     Size  Location     Type
 15174 ;;  ok              1    0[BANK0 ] unsigned char 
 15175 ;; Return value:  Size  Location     Type
 15176 ;;                  1    wreg      unsigned char 
 15177 ;; Registers used:
 15178 ;;		wreg, status,2
 15179 ;; Tracked objects:
 15180 ;;		On entry : 0/0
 15181 ;;		On exit  : 0/0
 15182 ;;		Unchanged: 0/0
 15183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;Total ram usage:        1 bytes
 15189 ;; Hardware stack levels used:    1
 15190 ;; Hardware stack levels required when called:    5
 15191 ;; This function calls:
 15192 ;;		Nothing
 15193 ;; This function is called by:
 15194 ;;		_DimmerLights_Main
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           
 15199                           ;psect for function _getLoad_OK
 15200  1B64                     _getLoad_OK:	
 15201                           
 15202                           ;OverLoad_B1.c: 189: char ok = Load.OK == 1 ? 1 : 0;
 15203                           
 15204                           ;incstack = 0
 15205                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15206  1B64  3000               	movlw	0
 15207  1B65  0022               	movlb	2	; select bank2
 15208  1B66  1BC3               	btfsc	_Load^(0+256),7
 15209  1B67  3001               	movlw	1
 15210  1B68  0020               	movlb	0	; select bank0
 15211  1B69  00A0               	movwf	getLoad_OK@ok
 15212                           
 15213                           ;OverLoad_B1.c: 190: return ok;
 15214  1B6A  0820               	movf	getLoad_OK@ok,w
 15215  1B6B  0008               	return
 15216  1B6C                     __end_of_getLoad_OK:	
 15217                           
 15218                           	psect	text91
 15219  1E06                     __ptext91:	
 15220 ;; *************** function _DimmerLights_Initialization *****************
 15221 ;; Defined at:
 15222 ;;		line 345 in file "../src/Dimmer_B1.c"
 15223 ;; Parameters:    Size  Location     Type
 15224 ;;		None
 15225 ;; Auto vars:     Size  Location     Type
 15226 ;;		None
 15227 ;; Return value:  Size  Location     Type
 15228 ;;		None               void
 15229 ;; Registers used:
 15230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15231 ;; Tracked objects:
 15232 ;;		On entry : 0/0
 15233 ;;		On exit  : 0/0
 15234 ;;		Unchanged: 0/0
 15235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;Total ram usage:        1 bytes
 15241 ;; Hardware stack levels used:    1
 15242 ;; Hardware stack levels required when called:    7
 15243 ;; This function calls:
 15244 ;;		_Dimmer_Initialization
 15245 ;;		_setDimmerLights_Initialization
 15246 ;; This function is called by:
 15247 ;;		_main
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _DimmerLights_Initialization
 15253  1E06                     _DimmerLights_Initialization:	
 15254                           
 15255                           ;Dimmer_B1.c: 347: DimmerLights11 = &DimmerLights1;
 15256                           
 15257                           ;incstack = 0
 15258                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15259  1E06  30A0               	movlw	_DimmerLights1& (0+255)
 15260  1E07  0020               	movlb	0	; select bank0
 15261  1E08  00A4               	movwf	??_DimmerLights_Initialization
 15262  1E09  0824               	movf	??_DimmerLights_Initialization,w
 15263  1E0A  0021               	movlb	1	; select bank1
 15264  1E0B  00CD               	movwf	_DimmerLights11^(0+128)
 15265                           
 15266                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(1);
 15267  1E0C  3001               	movlw	1
 15268  1E0D  3190  20AB  319E   	fcall	_setDimmerLights_Initialization
 15269                           
 15270                           ;Dimmer_B1.c: 352: DimmerLights22 = &DimmerLights2;
 15271  1E10  30AF               	movlw	_DimmerLights2& (0+255)
 15272  1E11  0020               	movlb	0	; select bank0
 15273  1E12  00A4               	movwf	??_DimmerLights_Initialization
 15274  1E13  0824               	movf	??_DimmerLights_Initialization,w
 15275  1E14  0021               	movlb	1	; select bank1
 15276  1E15  00CE               	movwf	_DimmerLights22^(0+128)
 15277                           
 15278                           ;Dimmer_B1.c: 353: setDimmerLights_Initialization(2);
 15279  1E16  3002               	movlw	2
 15280  1E17  3190  20AB  319E   	fcall	_setDimmerLights_Initialization
 15281                           
 15282                           ;Dimmer_B1.c: 362: Dimmer_Initialization();
 15283  1E1A  319B  230C         	fcall	_Dimmer_Initialization
 15284  1E1C  0008               	return
 15285  1E1D                     __end_of_DimmerLights_Initialization:	
 15286                           
 15287                           	psect	text92
 15288  10AB                     __ptext92:	
 15289 ;; *************** function _setDimmerLights_Initialization *****************
 15290 ;; Defined at:
 15291 ;;		line 368 in file "../src/Dimmer_B1.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;  lights          1    wreg     unsigned char 
 15294 ;; Auto vars:     Size  Location     Type
 15295 ;;  lights          1    3[BANK0 ] unsigned char 
 15296 ;; Return value:  Size  Location     Type
 15297 ;;		None               void
 15298 ;; Registers used:
 15299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15300 ;; Tracked objects:
 15301 ;;		On entry : 0/0
 15302 ;;		On exit  : 0/0
 15303 ;;		Unchanged: 0/0
 15304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;Total ram usage:        2 bytes
 15310 ;; Hardware stack levels used:    1
 15311 ;; Hardware stack levels required when called:    6
 15312 ;; This function calls:
 15313 ;;		_DimmerLightsPointSelect
 15314 ;; This function is called by:
 15315 ;;		_DimmerLights_Initialization
 15316 ;; This function uses a non-reentrant model
 15317 ;;
 15318                           
 15319                           
 15320                           ;psect for function _setDimmerLights_Initialization
 15321  10AB                     _setDimmerLights_Initialization:	
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15325                           ;setDimmerLights_Initialization@lights stored from wreg
 15326  10AB  0020               	movlb	0	; select bank0
 15327  10AC  00A3               	movwf	setDimmerLights_Initialization@lights
 15328                           
 15329                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 15330  10AD  0823               	movf	setDimmerLights_Initialization@lights,w
 15331  10AE  319C  24EC         	fcall	_DimmerLightsPointSelect
 15332                           
 15333                           ;Dimmer_B1.c: 376: DimmerLights->MaxmumValue = ((char)(80*0.8));
 15334  10B0  3040               	movlw	64
 15335  10B1  0020               	movlb	0	; select bank0
 15336  10B2  00A2               	movwf	??_setDimmerLights_Initialization
 15337  10B3  086F               	movf	_DimmerLights,w
 15338  10B4  3E05               	addlw	5
 15339  10B5  0086               	movwf	6
 15340  10B6  3001               	movlw	1	; select bank2/3
 15341  10B7  0087               	movwf	7
 15342  10B8  0822               	movf	??_setDimmerLights_Initialization,w
 15343  10B9  0081               	movwf	1
 15344                           
 15345                           ;Dimmer_B1.c: 377: DimmerLights->MinimumValue = ((char)(15*0.8));
 15346  10BA  300C               	movlw	12
 15347  10BB  00A2               	movwf	??_setDimmerLights_Initialization
 15348  10BC  086F               	movf	_DimmerLights,w
 15349  10BD  3E06               	addlw	6
 15350  10BE  0086               	movwf	6
 15351  10BF  3001               	movlw	1	; select bank2/3
 15352  10C0  0087               	movwf	7
 15353  10C1  0822               	movf	??_setDimmerLights_Initialization,w
 15354  10C2  0081               	movwf	1
 15355                           
 15356                           ;Dimmer_B1.c: 391: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15357  10C3  086F               	movf	_DimmerLights,w
 15358  10C4  3E05               	addlw	5
 15359  10C5  0086               	movwf	6
 15360  10C6  3001               	movlw	1	; select bank2/3
 15361  10C7  0087               	movwf	7
 15362  10C8  0801               	movf	1,w
 15363  10C9  00A2               	movwf	??_setDimmerLights_Initialization
 15364  10CA  086F               	movf	_DimmerLights,w
 15365  10CB  3E04               	addlw	4
 15366  10CC  0086               	movwf	6
 15367  10CD  3001               	movlw	1	; select bank2/3
 15368  10CE  0087               	movwf	7
 15369  10CF  0822               	movf	??_setDimmerLights_Initialization,w
 15370  10D0  0081               	movwf	1
 15371  10D1  0008               	return
 15372  10D2                     __end_of_setDimmerLights_Initialization:	
 15373                           
 15374                           	psect	text93
 15375  1B0C                     __ptext93:	
 15376 ;; *************** function _Dimmer_Initialization *****************
 15377 ;; Defined at:
 15378 ;;		line 908 in file "../src/Dimmer_B1.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;		None
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;		None
 15383 ;; Return value:  Size  Location     Type
 15384 ;;		None               void
 15385 ;; Registers used:
 15386 ;;		None
 15387 ;; Tracked objects:
 15388 ;;		On entry : 0/0
 15389 ;;		On exit  : 0/0
 15390 ;;		Unchanged: 0/0
 15391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;Total ram usage:        0 bytes
 15397 ;; Hardware stack levels used:    1
 15398 ;; Hardware stack levels required when called:    5
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		_DimmerLights_Initialization
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           
 15407                           ;psect for function _Dimmer_Initialization
 15408  1B0C                     _Dimmer_Initialization:	
 15409                           
 15410                           ;incstack = 0
 15411                           ; Regs used in _Dimmer_Initialization: []
 15412  1B0C  0008               	return
 15413  1B0D                     __end_of_Dimmer_Initialization:	
 15414                           
 15415                           	psect	text94
 15416  1B5C                     __ptext94:	
 15417 ;; *************** function _DelayOff_Main *****************
 15418 ;; Defined at:
 15419 ;;		line 41 in file "../src/DelayOff_B1.c"
 15420 ;; Parameters:    Size  Location     Type
 15421 ;;		None
 15422 ;; Auto vars:     Size  Location     Type
 15423 ;;		None
 15424 ;; Return value:  Size  Location     Type
 15425 ;;		None               void
 15426 ;; Registers used:
 15427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15428 ;; Tracked objects:
 15429 ;;		On entry : 0/0
 15430 ;;		On exit  : 0/0
 15431 ;;		Unchanged: 0/0
 15432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15437 ;;Total ram usage:        0 bytes
 15438 ;; Hardware stack levels used:    1
 15439 ;; Hardware stack levels required when called:   11
 15440 ;; This function calls:
 15441 ;;		_DlyOff_Main
 15442 ;; This function is called by:
 15443 ;;		_main
 15444 ;; This function uses a non-reentrant model
 15445 ;;
 15446                           
 15447                           
 15448                           ;psect for function _DelayOff_Main
 15449  1B5C                     _DelayOff_Main:	
 15450                           
 15451                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15452                           
 15453                           ;incstack = 0
 15454                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15455  1B5C  3001               	movlw	1
 15456  1B5D  3188  205E  319B   	fcall	_DlyOff_Main
 15457                           
 15458                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15459  1B60  3002               	movlw	2
 15460  1B61  3188  205E         	fcall	_DlyOff_Main
 15461  1B63  0008               	return
 15462  1B64                     __end_of_DelayOff_Main:	
 15463                           
 15464                           	psect	text95
 15465  085E                     __ptext95:	
 15466 ;; *************** function _DlyOff_Main *****************
 15467 ;; Defined at:
 15468 ;;		line 61 in file "../src/DelayOff_B1.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;  sw              1    wreg     unsigned char 
 15471 ;; Auto vars:     Size  Location     Type
 15472 ;;  sw              1   24[BANK0 ] unsigned char 
 15473 ;; Return value:  Size  Location     Type
 15474 ;;		None               void
 15475 ;; Registers used:
 15476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15477 ;; Tracked objects:
 15478 ;;		On entry : 0/0
 15479 ;;		On exit  : 0/0
 15480 ;;		Unchanged: 0/0
 15481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;Total ram usage:        3 bytes
 15487 ;; Hardware stack levels used:    1
 15488 ;; Hardware stack levels required when called:   10
 15489 ;; This function calls:
 15490 ;;		_DelayOffPointSelect
 15491 ;;		_setBuz
 15492 ;;		_setDimmerLights_ErrorClose
 15493 ;; This function is called by:
 15494 ;;		_DelayOff_Main
 15495 ;; This function uses a non-reentrant model
 15496 ;;
 15497                           
 15498                           
 15499                           ;psect for function _DlyOff_Main
 15500  085E                     _DlyOff_Main:	
 15501                           
 15502                           ;incstack = 0
 15503                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15504                           ;DlyOff_Main@sw stored from wreg
 15505  085E  0020               	movlb	0	; select bank0
 15506  085F  00B8               	movwf	DlyOff_Main@sw
 15507                           
 15508                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15509  0860  0838               	movf	DlyOff_Main@sw,w
 15510  0861  319D  2560  3188   	fcall	_DelayOffPointSelect
 15511                           
 15512                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15513  0864  0878               	movf	_DelayOff,w
 15514  0865  0086               	movwf	6
 15515  0866  3001               	movlw	1	; select bank2/3
 15516  0867  0087               	movwf	7
 15517  0868  1C81               	btfss	1,1
 15518  0869  0008               	return
 15519                           
 15520                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15521  086A  0878               	movf	_DelayOff,w
 15522  086B  3E02               	addlw	2
 15523  086C  0086               	movwf	6
 15524  086D  3001               	movlw	1	; select bank2/3
 15525  086E  0087               	movwf	7
 15526  086F  3001               	movlw	1
 15527  0870  0781               	addwf	1,f
 15528  0871  3141               	addfsr 1,1
 15529  0872  1803               	skipnc
 15530  0873  0A81               	incf	1,f
 15531                           
 15532                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15533  0874  0878               	movf	_DelayOff,w
 15534  0875  3E02               	addlw	2
 15535  0876  0086               	movwf	6
 15536  0877  3001               	movlw	1	; select bank2/3
 15537  0878  0087               	movwf	7
 15538  0879  3F40               	moviw [0]fsr1
 15539  087A  0020               	movlb	0	; select bank0
 15540  087B  00B6               	movwf	??_DlyOff_Main
 15541  087C  3F41               	moviw [1]fsr1
 15542  087D  00B7               	movwf	??_DlyOff_Main+1
 15543  087E  3017               	movlw	23
 15544  087F  0237               	subwf	??_DlyOff_Main+1,w
 15545  0880  3070               	movlw	112
 15546  0881  1903               	skipnz
 15547  0882  0236               	subwf	??_DlyOff_Main,w
 15548  0883  1C03               	skipc
 15549  0884  0008               	return
 15550                           
 15551                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15552  0885  0878               	movf	_DelayOff,w
 15553  0886  3E02               	addlw	2
 15554  0887  0086               	movwf	6
 15555  0888  3001               	movlw	1	; select bank2/3
 15556  0889  0087               	movwf	7
 15557  088A  3000               	movlw	0
 15558  088B  3FC0               	movwi [0]fsr1
 15559  088C  3FC1               	movwi [1]fsr1
 15560                           
 15561                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15562  088D  3001               	movlw	1
 15563  088E  00B6               	movwf	??_DlyOff_Main
 15564  088F  0878               	movf	_DelayOff,w
 15565  0890  3E04               	addlw	4
 15566  0891  0086               	movwf	6
 15567  0892  3001               	movlw	1	; select bank2/3
 15568  0893  0087               	movwf	7
 15569  0894  0836               	movf	??_DlyOff_Main,w
 15570  0895  0781               	addwf	1,f
 15571                           
 15572                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15573  0896  0878               	movf	_DelayOff,w
 15574  0897  3E04               	addlw	4
 15575  0898  0086               	movwf	6
 15576  0899  3001               	movlw	1	; select bank2/3
 15577  089A  0087               	movwf	7
 15578  089B  0A78               	incf	_DelayOff,w
 15579  089C  0084               	movwf	4
 15580  089D  3001               	movlw	1	; select bank2/3
 15581  089E  0085               	movwf	5
 15582  089F  0800               	movf	0,w
 15583  08A0  0201               	subwf	1,w
 15584  08A1  1C03               	skipc
 15585  08A2  0008               	return
 15586                           
 15587                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15588  08A3  0878               	movf	_DelayOff,w
 15589  08A4  3E04               	addlw	4
 15590  08A5  0086               	movwf	6
 15591  08A6  3001               	movlw	1	; select bank2/3
 15592  08A7  0087               	movwf	7
 15593  08A8  0181               	clrf	1
 15594                           
 15595                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15596  08A9  0878               	movf	_DelayOff,w
 15597  08AA  0086               	movwf	6
 15598  08AB  3001               	movlw	1	; select bank2/3
 15599  08AC  0087               	movwf	7
 15600  08AD  1081               	bcf	1,1
 15601                           
 15602                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15603  08AE  3064               	movlw	100
 15604  08AF  00A9               	movwf	setBuz@time
 15605  08B0  3000               	movlw	0
 15606  08B1  00AA               	movwf	setBuz@time+1
 15607  08B2  3001               	movlw	1
 15608  08B3  3196  263C  3188   	fcall	_setBuz
 15609                           
 15610                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15611  08B6  0020               	movlb	0	; select bank0
 15612  08B7  0838               	movf	DlyOff_Main@sw,w
 15613  08B8  3196  26EE         	fcall	_setDimmerLights_ErrorClose
 15614  08BA  0008               	return
 15615  08BB                     __end_of_DlyOff_Main:	
 15616                           
 15617                           	psect	text96
 15618  16EE                     __ptext96:	
 15619 ;; *************** function _setDimmerLights_ErrorClose *****************
 15620 ;; Defined at:
 15621 ;;		line 578 in file "../src/Dimmer_B1.c"
 15622 ;; Parameters:    Size  Location     Type
 15623 ;;  lights          1    wreg     unsigned char 
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;  lights          1   19[BANK0 ] unsigned char 
 15626 ;;  i               2   20[BANK0 ] int 
 15627 ;;  count           1   18[BANK0 ] unsigned char 
 15628 ;; Return value:  Size  Location     Type
 15629 ;;		None               void
 15630 ;; Registers used:
 15631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15632 ;; Tracked objects:
 15633 ;;		On entry : 0/0
 15634 ;;		On exit  : 0/0
 15635 ;;		Unchanged: 0/0
 15636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15640 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;Total ram usage:        5 bytes
 15642 ;; Hardware stack levels used:    1
 15643 ;; Hardware stack levels required when called:    9
 15644 ;; This function calls:
 15645 ;;		_DimmerLightsPointSelect
 15646 ;;		_getDimmerLights_Status
 15647 ;;		_setDimmerLights_SwOff
 15648 ;; This function is called by:
 15649 ;;		_DlyOff_Main
 15650 ;;		_setControl_Lights_Table
 15651 ;;		_setMain_Exception
 15652 ;; This function uses a non-reentrant model
 15653 ;;
 15654                           
 15655                           
 15656                           ;psect for function _setDimmerLights_ErrorClose
 15657  16EE                     _setDimmerLights_ErrorClose:	
 15658                           
 15659                           ;incstack = 0
 15660                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15661                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15662  16EE  0020               	movlb	0	; select bank0
 15663  16EF  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15664                           
 15665                           ;Dimmer_B1.c: 579: if (lights == 255) {
 15666  16F0  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15667  16F1  3AFF               	xorlw	255
 15668  16F2  1D03               	skipz
 15669  16F3  2F2B               	goto	l6459
 15670                           
 15671                           ;Dimmer_B1.c: 584: char count = 2;
 15672  16F4  3002               	movlw	2
 15673  16F5  00B1               	movwf	??_setDimmerLights_ErrorClose
 15674  16F6  0831               	movf	??_setDimmerLights_ErrorClose,w
 15675  16F7  00B2               	movwf	setDimmerLights_ErrorClose@count
 15676                           
 15677                           ;Dimmer_B1.c: 589: for (int i = 0; i < count; i++) {
 15678  16F8  01B4               	clrf	setDimmerLights_ErrorClose@i
 15679  16F9  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15680  16FA                     l6457:	
 15681  16FA  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15682  16FB  3A80               	xorlw	128
 15683  16FC  00B1               	movwf	??_setDimmerLights_ErrorClose
 15684  16FD  3080               	movlw	128
 15685  16FE  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15686  16FF  1D03               	skipz
 15687  1700  2F03               	goto	u5395
 15688  1701  0832               	movf	setDimmerLights_ErrorClose@count,w
 15689  1702  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15690  1703                     u5395:	
 15691  1703  1803               	btfsc	3,0
 15692  1704  0008               	return
 15693                           
 15694                           ;Dimmer_B1.c: 590: DimmerLightsPointSelect(i + 1);
 15695  1705  0020               	movlb	0	; select bank0
 15696  1706  0834               	movf	setDimmerLights_ErrorClose@i,w
 15697  1707  3E01               	addlw	1
 15698  1708  319C  24EC  3196   	fcall	_DimmerLightsPointSelect
 15699                           
 15700                           ;Dimmer_B1.c: 591: if (getDimmerLights_Status(i + 1) == 1) {
 15701  170B  0020               	movlb	0	; select bank0
 15702  170C  0834               	movf	setDimmerLights_ErrorClose@i,w
 15703  170D  3E01               	addlw	1
 15704  170E  319C  2440  3196   	fcall	_getDimmerLights_Status
 15705  1711  3A01               	xorlw	1
 15706  1712  1D03               	skipz
 15707  1713  2F25               	goto	l6455
 15708                           
 15709                           ;Dimmer_B1.c: 592: DimmerLights->SwFlag = 1;
 15710  1714  0020               	movlb	0	; select bank0
 15711  1715  086F               	movf	_DimmerLights,w
 15712  1716  3E09               	addlw	9
 15713  1717  0086               	movwf	6
 15714  1718  3001               	movlw	1	; select bank2/3
 15715  1719  0087               	movwf	7
 15716  171A  1701               	bsf	1,6
 15717                           
 15718                           ;Dimmer_B1.c: 593: DimmerLights->Status = 0;
 15719  171B  086F               	movf	_DimmerLights,w
 15720  171C  0086               	movwf	6
 15721  171D  3001               	movlw	1	; select bank2/3
 15722  171E  0087               	movwf	7
 15723  171F  1281               	bcf	1,5
 15724                           
 15725                           ;Dimmer_B1.c: 594: setDimmerLights_SwOff(i + 1);
 15726  1720  0834               	movf	setDimmerLights_ErrorClose@i,w
 15727  1721  3E01               	addlw	1
 15728  1722  3194  2410  3196   	fcall	_setDimmerLights_SwOff
 15729  1725                     l6455:	
 15730  1725  3001               	movlw	1
 15731  1726  0020               	movlb	0	; select bank0
 15732  1727  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15733  1728  3000               	movlw	0
 15734  1729  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15735  172A  2EFA               	goto	l6457
 15736  172B                     l6459:	
 15737                           ;Dimmer_B1.c: 595: }
 15738                           ;Dimmer_B1.c: 596: }
 15739                           ;Dimmer_B1.c: 597: } else {
 15740                           
 15741                           
 15742                           ;Dimmer_B1.c: 598: DimmerLightsPointSelect(lights);
 15743  172B  0020               	movlb	0	; select bank0
 15744  172C  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15745  172D  319C  24EC  3196   	fcall	_DimmerLightsPointSelect
 15746                           
 15747                           ;Dimmer_B1.c: 599: if (getDimmerLights_Status(lights) == 1) {
 15748  1730  0020               	movlb	0	; select bank0
 15749  1731  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15750  1732  319C  2440  3196   	fcall	_getDimmerLights_Status
 15751  1735  3A01               	xorlw	1
 15752  1736  1D03               	skipz
 15753  1737  0008               	return
 15754                           
 15755                           ;Dimmer_B1.c: 600: DimmerLights->SwFlag = 1;
 15756  1738  0020               	movlb	0	; select bank0
 15757  1739  086F               	movf	_DimmerLights,w
 15758  173A  3E09               	addlw	9
 15759  173B  0086               	movwf	6
 15760  173C  3001               	movlw	1	; select bank2/3
 15761  173D  0087               	movwf	7
 15762  173E  1701               	bsf	1,6
 15763                           
 15764                           ;Dimmer_B1.c: 601: DimmerLights->Status = 0;
 15765  173F  086F               	movf	_DimmerLights,w
 15766  1740  0086               	movwf	6
 15767  1741  3001               	movlw	1	; select bank2/3
 15768  1742  0087               	movwf	7
 15769  1743  1281               	bcf	1,5
 15770                           
 15771                           ;Dimmer_B1.c: 602: setDimmerLights_SwOff(lights);
 15772  1744  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15773  1745  3194  2410         	fcall	_setDimmerLights_SwOff
 15774  1747  0008               	return
 15775  1748                     __end_of_setDimmerLights_ErrorClose:	
 15776                           
 15777                           	psect	text97
 15778  1410                     __ptext97:	
 15779 ;; *************** function _setDimmerLights_SwOff *****************
 15780 ;; Defined at:
 15781 ;;		line 540 in file "../src/Dimmer_B1.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;  sw              1    wreg     unsigned char 
 15784 ;; Auto vars:     Size  Location     Type
 15785 ;;  sw              1   16[BANK0 ] unsigned char 
 15786 ;;  command         1   15[BANK0 ] unsigned char 
 15787 ;; Return value:  Size  Location     Type
 15788 ;;		None               void
 15789 ;; Registers used:
 15790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15791 ;; Tracked objects:
 15792 ;;		On entry : 0/0
 15793 ;;		On exit  : 0/0
 15794 ;;		Unchanged: 0/0
 15795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;Total ram usage:        2 bytes
 15801 ;; Hardware stack levels used:    1
 15802 ;; Hardware stack levels required when called:    8
 15803 ;; This function calls:
 15804 ;;		_DimmerLightsPointSelect
 15805 ;;		_getDelayOff_GO
 15806 ;;		_setDelayOff_GO
 15807 ;;		_setDimmerLights_Trigger
 15808 ;;		_setDimmerLights_TriggerAdj
 15809 ;; This function is called by:
 15810 ;;		_setDimmerLights_ErrorClose
 15811 ;;		_setRFSW_Control
 15812 ;;		_setSw_Main
 15813 ;; This function uses a non-reentrant model
 15814 ;;
 15815                           
 15816                           
 15817                           ;psect for function _setDimmerLights_SwOff
 15818  1410                     _setDimmerLights_SwOff:	
 15819                           
 15820                           ;incstack = 0
 15821                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15822                           ;setDimmerLights_SwOff@sw stored from wreg
 15823  1410  0020               	movlb	0	; select bank0
 15824  1411  00B0               	movwf	setDimmerLights_SwOff@sw
 15825                           
 15826                           ;Dimmer_B1.c: 541: DimmerLightsPointSelect(sw);
 15827  1412  0830               	movf	setDimmerLights_SwOff@sw,w
 15828  1413  319C  24EC  3194   	fcall	_DimmerLightsPointSelect
 15829                           
 15830                           ;Dimmer_B1.c: 542: char command = DimmerLights->Status == 1 ? 1 : 0;
 15831  1416  0020               	movlb	0	; select bank0
 15832  1417  086F               	movf	_DimmerLights,w
 15833  1418  0086               	movwf	6
 15834  1419  3001               	movlw	1	; select bank2/3
 15835  141A  0087               	movwf	7
 15836  141B  3000               	movlw	0
 15837  141C  1A81               	btfsc	1,5
 15838  141D  3001               	movlw	1
 15839  141E  00AF               	movwf	setDimmerLights_SwOff@command
 15840                           
 15841                           ;Dimmer_B1.c: 543: if (DimmerLights->SwFlag == 1) {
 15842  141F  086F               	movf	_DimmerLights,w
 15843  1420  3E09               	addlw	9
 15844  1421  0086               	movwf	6
 15845  1422  3001               	movlw	1	; select bank2/3
 15846  1423  0087               	movwf	7
 15847  1424  1F01               	btfss	1,6
 15848  1425  0008               	return
 15849                           
 15850                           ;Dimmer_B1.c: 544: DimmerLights->SwFlag = 0;
 15851  1426  086F               	movf	_DimmerLights,w
 15852  1427  3E09               	addlw	9
 15853  1428  0086               	movwf	6
 15854  1429  3001               	movlw	1	; select bank2/3
 15855  142A  0087               	movwf	7
 15856  142B  1301               	bcf	1,6
 15857                           
 15858                           ;Dimmer_B1.c: 545: if (DimmerLights->Status == 1) {
 15859  142C  086F               	movf	_DimmerLights,w
 15860  142D  0086               	movwf	6
 15861  142E  3001               	movlw	1	; select bank2/3
 15862  142F  0087               	movwf	7
 15863  1430  1E81               	btfss	1,5
 15864  1431  2C44               	goto	l6315
 15865                           
 15866                           ;Dimmer_B1.c: 546: if (DimmerLights->SwAdj == 1) {
 15867  1432  086F               	movf	_DimmerLights,w
 15868  1433  3E09               	addlw	9
 15869  1434  0086               	movwf	6
 15870  1435  3001               	movlw	1	; select bank2/3
 15871  1436  0087               	movwf	7
 15872  1437  1F81               	btfss	1,7
 15873  1438  0008               	return
 15874                           
 15875                           ;Dimmer_B1.c: 547: DimmerLights->SwAdj = 0;
 15876  1439  086F               	movf	_DimmerLights,w
 15877  143A  3E09               	addlw	9
 15878  143B  0086               	movwf	6
 15879  143C  3001               	movlw	1	; select bank2/3
 15880  143D  0087               	movwf	7
 15881  143E  1381               	bcf	1,7
 15882                           
 15883                           ;Dimmer_B1.c: 548: setDimmerLights_TriggerAdj(sw, 0);
 15884  143F  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15885  1440  0830               	movf	setDimmerLights_SwOff@sw,w
 15886  1441  319E  26F4         	fcall	_setDimmerLights_TriggerAdj
 15887                           
 15888                           ;Dimmer_B1.c: 549: }
 15889                           ;Dimmer_B1.c: 550: } else {
 15890  1443  0008               	return
 15891  1444                     l6315:	
 15892                           
 15893                           ;Dimmer_B1.c: 551: setDimmerLights_Trigger(sw, 0);
 15894  1444  0020               	movlb	0	; select bank0
 15895  1445  01A2               	clrf	setDimmerLights_Trigger@command
 15896  1446  0830               	movf	setDimmerLights_SwOff@sw,w
 15897  1447  319E  26B7  3194   	fcall	_setDimmerLights_Trigger
 15898                           
 15899                           ;Dimmer_B1.c: 553: if (getDelayOff_GO(sw) == 1) {
 15900  144A  0020               	movlb	0	; select bank0
 15901  144B  0830               	movf	setDimmerLights_SwOff@sw,w
 15902  144C  319C  2450  3194   	fcall	_getDelayOff_GO
 15903  144F  3A01               	xorlw	1
 15904  1450  1D03               	skipz
 15905  1451  0008               	return
 15906                           
 15907                           ;Dimmer_B1.c: 554: setDelayOff_GO(sw, 0, 0);
 15908  1452  0020               	movlb	0	; select bank0
 15909  1453  01AA               	clrf	setDelayOff_GO@command
 15910  1454  01AB               	clrf	setDelayOff_GO@value
 15911  1455  0830               	movf	setDimmerLights_SwOff@sw,w
 15912  1456  3188  2001         	fcall	_setDelayOff_GO
 15913  1458  0008               	return
 15914  1459                     __end_of_setDimmerLights_SwOff:	
 15915                           
 15916                           	psect	text98
 15917  1EF4                     __ptext98:	
 15918 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15919 ;; Defined at:
 15920 ;;		line 789 in file "../src/Dimmer_B1.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  lights          1    wreg     unsigned char 
 15923 ;;  command         1    2[BANK0 ] unsigned char 
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;  lights          1    4[BANK0 ] unsigned char 
 15926 ;; Return value:  Size  Location     Type
 15927 ;;		None               void
 15928 ;; Registers used:
 15929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15935 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15939 ;;Total ram usage:        3 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; Hardware stack levels required when called:    6
 15942 ;; This function calls:
 15943 ;;		_DimmerLightsPointSelect
 15944 ;; This function is called by:
 15945 ;;		_setDimmerLights_SwOff
 15946 ;;		_setDimmerLights_AdjControl
 15947 ;; This function uses a non-reentrant model
 15948 ;;
 15949                           
 15950                           
 15951                           ;psect for function _setDimmerLights_TriggerAdj
 15952  1EF4                     _setDimmerLights_TriggerAdj:	
 15953                           
 15954                           ;incstack = 0
 15955                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15956                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15957  1EF4  0020               	movlb	0	; select bank0
 15958  1EF5  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15959                           
 15960                           ;Dimmer_B1.c: 790: DimmerLightsPointSelect(lights);
 15961  1EF6  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15962  1EF7  319C  24EC         	fcall	_DimmerLightsPointSelect
 15963                           
 15964                           ;Dimmer_B1.c: 791: DimmerLights->TriggerAdj = 1;
 15965  1EF9  0020               	movlb	0	; select bank0
 15966  1EFA  086F               	movf	_DimmerLights,w
 15967  1EFB  3E08               	addlw	8
 15968  1EFC  0086               	movwf	6
 15969  1EFD  3001               	movlw	1	; select bank2/3
 15970  1EFE  0087               	movwf	7
 15971  1EFF  1601               	bsf	1,4
 15972                           
 15973                           ;Dimmer_B1.c: 792: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15974  1F00  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15975  1F01  3A01               	xorlw	1
 15976  1F02  3000               	movlw	0
 15977  1F03  1903               	skipnz
 15978  1F04  3001               	movlw	1
 15979  1F05  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15980  1F06  086F               	movf	_DimmerLights,w
 15981  1F07  3E08               	addlw	8
 15982  1F08  0086               	movwf	6
 15983  1F09  3001               	movlw	1	; select bank2/3
 15984  1F0A  0087               	movwf	7
 15985  1F0B  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15986  1F0C  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15987  1F0D  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15988  1F0E  0801               	movf	1,w
 15989  1F0F  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15990  1F10  39F7               	andlw	-9
 15991  1F11  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15992  1F12  0081               	movwf	1
 15993  1F13  0008               	return
 15994  1F14                     __end_of_setDimmerLights_TriggerAdj:	
 15995                           
 15996                           	psect	text99
 15997  1EB7                     __ptext99:	
 15998 ;; *************** function _setDimmerLights_Trigger *****************
 15999 ;; Defined at:
 16000 ;;		line 783 in file "../src/Dimmer_B1.c"
 16001 ;; Parameters:    Size  Location     Type
 16002 ;;  lights          1    wreg     unsigned char 
 16003 ;;  command         1    2[BANK0 ] unsigned char 
 16004 ;; Auto vars:     Size  Location     Type
 16005 ;;  lights          1    4[BANK0 ] unsigned char 
 16006 ;; Return value:  Size  Location     Type
 16007 ;;		None               void
 16008 ;; Registers used:
 16009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16010 ;; Tracked objects:
 16011 ;;		On entry : 0/0
 16012 ;;		On exit  : 0/0
 16013 ;;		Unchanged: 0/0
 16014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16015 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;Total ram usage:        3 bytes
 16020 ;; Hardware stack levels used:    1
 16021 ;; Hardware stack levels required when called:    6
 16022 ;; This function calls:
 16023 ;;		_DimmerLightsPointSelect
 16024 ;; This function is called by:
 16025 ;;		_setDimmerLights_SwOn
 16026 ;;		_setDimmerLights_SwOff
 16027 ;; This function uses a non-reentrant model
 16028 ;;
 16029                           
 16030                           
 16031                           ;psect for function _setDimmerLights_Trigger
 16032  1EB7                     _setDimmerLights_Trigger:	
 16033                           
 16034                           ;incstack = 0
 16035                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16036                           ;setDimmerLights_Trigger@lights stored from wreg
 16037  1EB7  0020               	movlb	0	; select bank0
 16038  1EB8  00A4               	movwf	setDimmerLights_Trigger@lights
 16039                           
 16040                           ;Dimmer_B1.c: 784: DimmerLightsPointSelect(lights);
 16041  1EB9  0824               	movf	setDimmerLights_Trigger@lights,w
 16042  1EBA  319C  24EC         	fcall	_DimmerLightsPointSelect
 16043                           
 16044                           ;Dimmer_B1.c: 785: DimmerLights->Trigger = 1;
 16045  1EBC  0020               	movlb	0	; select bank0
 16046  1EBD  086F               	movf	_DimmerLights,w
 16047  1EBE  3E08               	addlw	8
 16048  1EBF  0086               	movwf	6
 16049  1EC0  3001               	movlw	1	; select bank2/3
 16050  1EC1  0087               	movwf	7
 16051  1EC2  1501               	bsf	1,2
 16052                           
 16053                           ;Dimmer_B1.c: 786: DimmerLights->Switch = command == 1 ? 1 : 0;
 16054  1EC3  0822               	movf	setDimmerLights_Trigger@command,w
 16055  1EC4  3A01               	xorlw	1
 16056  1EC5  3000               	movlw	0
 16057  1EC6  1903               	skipnz
 16058  1EC7  3001               	movlw	1
 16059  1EC8  00A3               	movwf	??_setDimmerLights_Trigger
 16060  1EC9  086F               	movf	_DimmerLights,w
 16061  1ECA  3E08               	addlw	8
 16062  1ECB  0086               	movwf	6
 16063  1ECC  3001               	movlw	1	; select bank2/3
 16064  1ECD  0087               	movwf	7
 16065  1ECE  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16066  1ECF  0801               	movf	1,w
 16067  1ED0  0623               	xorwf	??_setDimmerLights_Trigger,w
 16068  1ED1  39FD               	andlw	-3
 16069  1ED2  0623               	xorwf	??_setDimmerLights_Trigger,w
 16070  1ED3  0081               	movwf	1
 16071  1ED4  0008               	return
 16072  1ED5                     __end_of_setDimmerLights_Trigger:	
 16073                           
 16074                           	psect	text100
 16075  0801                     __ptext100:	
 16076 ;; *************** function _setDelayOff_GO *****************
 16077 ;; Defined at:
 16078 ;;		line 83 in file "../src/DelayOff_B1.c"
 16079 ;; Parameters:    Size  Location     Type
 16080 ;;  sw              1    wreg     unsigned char 
 16081 ;;  command         1   10[BANK0 ] unsigned char 
 16082 ;;  value           1   11[BANK0 ] unsigned char 
 16083 ;; Auto vars:     Size  Location     Type
 16084 ;;  sw              1   14[BANK0 ] unsigned char 
 16085 ;; Return value:  Size  Location     Type
 16086 ;;		None               void
 16087 ;; Registers used:
 16088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16089 ;; Tracked objects:
 16090 ;;		On entry : 0/0
 16091 ;;		On exit  : 0/0
 16092 ;;		Unchanged: 0/0
 16093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16094 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;Total ram usage:        5 bytes
 16099 ;; Hardware stack levels used:    1
 16100 ;; Hardware stack levels required when called:    7
 16101 ;; This function calls:
 16102 ;;		_DelayOffPointSelect
 16103 ;;		_DelayTimejudge
 16104 ;; This function is called by:
 16105 ;;		_setDimmerLights_SwOff
 16106 ;;		_setRFSW_Control
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           
 16111                           ;psect for function _setDelayOff_GO
 16112  0801                     _setDelayOff_GO:	
 16113                           
 16114                           ;incstack = 0
 16115                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16116                           ;setDelayOff_GO@sw stored from wreg
 16117  0801  0020               	movlb	0	; select bank0
 16118  0802  00AE               	movwf	setDelayOff_GO@sw
 16119                           
 16120                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16121  0803  082E               	movf	setDelayOff_GO@sw,w
 16122  0804  319D  2560  3188   	fcall	_DelayOffPointSelect
 16123                           
 16124                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16125  0807  0020               	movlb	0	; select bank0
 16126  0808  082A               	movf	setDelayOff_GO@command,w
 16127  0809  3A01               	xorlw	1
 16128  080A  3000               	movlw	0
 16129  080B  1903               	skipnz
 16130  080C  3001               	movlw	1
 16131  080D  00AC               	movwf	??_setDelayOff_GO
 16132  080E  0878               	movf	_DelayOff,w
 16133  080F  0086               	movwf	6
 16134  0810  3001               	movlw	1	; select bank2/3
 16135  0811  0087               	movwf	7
 16136  0812  0DAC               	rlf	??_setDelayOff_GO,f
 16137  0813  0801               	movf	1,w
 16138  0814  062C               	xorwf	??_setDelayOff_GO,w
 16139  0815  39FD               	andlw	-3
 16140  0816  062C               	xorwf	??_setDelayOff_GO,w
 16141  0817  0081               	movwf	1
 16142                           
 16143                           ;DelayOff_B1.c: 89: if (command == 1) {
 16144  0818  082A               	movf	setDelayOff_GO@command,w
 16145  0819  3A01               	xorlw	1
 16146  081A  1D03               	skipz
 16147  081B  2846               	goto	l6225
 16148                           
 16149                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16150  081C  082B               	movf	setDelayOff_GO@value,w
 16151  081D  3191  2124  3188   	fcall	_DelayTimejudge
 16152  0820  0020               	movlb	0	; select bank0
 16153  0821  00AC               	movwf	??_setDelayOff_GO
 16154  0822  0A78               	incf	_DelayOff,w
 16155  0823  0086               	movwf	6
 16156  0824  3001               	movlw	1	; select bank2/3
 16157  0825  0087               	movwf	7
 16158  0826  082C               	movf	??_setDelayOff_GO,w
 16159  0827  0081               	movwf	1
 16160                           
 16161                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16162  0828  300F               	movlw	15
 16163  0829  052B               	andwf	setDelayOff_GO@value,w
 16164  082A  00AC               	movwf	??_setDelayOff_GO
 16165  082B  082C               	movf	??_setDelayOff_GO,w
 16166  082C  3A05               	xorlw	5
 16167  082D  1903               	skipnz
 16168  082E  2833               	goto	l6219
 16169  082F  082B               	movf	setDelayOff_GO@value,w
 16170  0830  390F               	andlw	15
 16171  0831  1D03               	btfss	3,2
 16172  0832  2839               	goto	l6223
 16173  0833                     l6219:	
 16174  0833  3026               	movlw	38
 16175  0834  022B               	subwf	setDelayOff_GO@value,w
 16176  0835  1803               	skipnc
 16177  0836  2839               	goto	l6223
 16178                           
 16179                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16180  0837  082B               	movf	setDelayOff_GO@value,w
 16181  0838  283A               	goto	L9
 16182  0839                     l6223:	
 16183                           ;DelayOff_B1.c: 93: } else {
 16184                           
 16185                           
 16186                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16187  0839  3005               	movlw	5
 16188  083A                     L9:	
 16189  083A  00AC               	movwf	??_setDelayOff_GO
 16190  083B  082E               	movf	setDelayOff_GO@sw,w
 16191  083C  3E1A               	addlw	26
 16192  083D  076E               	addwf	_product,w
 16193  083E  00AD               	movwf	??_setDelayOff_GO+1
 16194  083F  082D               	movf	??_setDelayOff_GO+1,w
 16195  0840  0086               	movwf	6
 16196  0841  3002               	movlw	2	; select bank4/5
 16197  0842  0087               	movwf	7
 16198  0843  082C               	movf	??_setDelayOff_GO,w
 16199  0844  0081               	movwf	1
 16200                           
 16201                           ;DelayOff_B1.c: 95: }
 16202                           ;DelayOff_B1.c: 96: } else {
 16203  0845  284F               	goto	l6227
 16204  0846                     l6225:	
 16205                           
 16206                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16207  0846  082E               	movf	setDelayOff_GO@sw,w
 16208  0847  3E1A               	addlw	26
 16209  0848  076E               	addwf	_product,w
 16210  0849  00AC               	movwf	??_setDelayOff_GO
 16211  084A  082C               	movf	??_setDelayOff_GO,w
 16212  084B  0086               	movwf	6
 16213  084C  3002               	movlw	2	; select bank4/5
 16214  084D  0087               	movwf	7
 16215  084E  0181               	clrf	1
 16216  084F                     l6227:	
 16217                           
 16218                           ;DelayOff_B1.c: 98: }
 16219                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16220  084F  0878               	movf	_DelayOff,w
 16221  0850  3E02               	addlw	2
 16222  0851  0086               	movwf	6
 16223  0852  3001               	movlw	1	; select bank2/3
 16224  0853  0087               	movwf	7
 16225  0854  3000               	movlw	0
 16226  0855  3FC0               	movwi [0]fsr1
 16227  0856  3FC1               	movwi [1]fsr1
 16228                           
 16229                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16230  0857  0878               	movf	_DelayOff,w
 16231  0858  3E04               	addlw	4
 16232  0859  0086               	movwf	6
 16233  085A  3001               	movlw	1	; select bank2/3
 16234  085B  0087               	movwf	7
 16235  085C  0181               	clrf	1
 16236  085D  0008               	return
 16237  085E                     __end_of_setDelayOff_GO:	
 16238                           
 16239                           	psect	text101
 16240  1124                     __ptext101:	
 16241 ;; *************** function _DelayTimejudge *****************
 16242 ;; Defined at:
 16243 ;;		line 112 in file "../src/DelayOff_B1.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  value           1    wreg     unsigned char 
 16246 ;; Auto vars:     Size  Location     Type
 16247 ;;  value           1    9[BANK0 ] unsigned char 
 16248 ;;  k               1    8[BANK0 ] unsigned char 
 16249 ;;  j               1    7[BANK0 ] unsigned char 
 16250 ;;  i               1    6[BANK0 ] unsigned char 
 16251 ;; Return value:  Size  Location     Type
 16252 ;;                  1    wreg      unsigned char 
 16253 ;; Registers used:
 16254 ;;		wreg, status,2, status,0, pclath, cstack
 16255 ;; Tracked objects:
 16256 ;;		On entry : 0/0
 16257 ;;		On exit  : 0/0
 16258 ;;		Unchanged: 0/0
 16259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16264 ;;Total ram usage:        6 bytes
 16265 ;; Hardware stack levels used:    1
 16266 ;; Hardware stack levels required when called:    6
 16267 ;; This function calls:
 16268 ;;		___bmul
 16269 ;; This function is called by:
 16270 ;;		_setDelayOff_GO
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274                           
 16275                           ;psect for function _DelayTimejudge
 16276  1124                     _DelayTimejudge:	
 16277                           
 16278                           ;incstack = 0
 16279                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16280                           ;DelayTimejudge@value stored from wreg
 16281  1124  0020               	movlb	0	; select bank0
 16282  1125  00A9               	movwf	DelayTimejudge@value
 16283                           
 16284                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16285  1126  3005               	movlw	5
 16286  1127  00A4               	movwf	??_DelayTimejudge
 16287  1128  0824               	movf	??_DelayTimejudge,w
 16288  1129  00A6               	movwf	DelayTimejudge@i
 16289  112A  01A7               	clrf	DelayTimejudge@j
 16290  112B  01A8               	clrf	DelayTimejudge@k
 16291                           
 16292                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16293  112C  3031               	movlw	49
 16294  112D  0229               	subwf	DelayTimejudge@value,w
 16295  112E  1803               	skipnc
 16296  112F  294C               	goto	l6117
 16297                           
 16298                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16299  1130  0829               	movf	DelayTimejudge@value,w
 16300  1131  390F               	andlw	15
 16301  1132  00A4               	movwf	??_DelayTimejudge
 16302  1133  0824               	movf	??_DelayTimejudge,w
 16303  1134  00A7               	movwf	DelayTimejudge@j
 16304                           
 16305                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16306  1135  0829               	movf	DelayTimejudge@value,w
 16307  1136  00A4               	movwf	??_DelayTimejudge
 16308  1137  3004               	movlw	4
 16309  1138                     u4965:	
 16310  1138  36A4               	lsrf	??_DelayTimejudge,f
 16311  1139  0B89               	decfsz	9,f
 16312  113A  2938               	goto	u4965
 16313  113B  0824               	movf	??_DelayTimejudge,w
 16314  113C  390F               	andlw	15
 16315  113D  00A5               	movwf	??_DelayTimejudge+1
 16316  113E  0825               	movf	??_DelayTimejudge+1,w
 16317  113F  00A8               	movwf	DelayTimejudge@k
 16318                           
 16319                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16320  1140  300A               	movlw	10
 16321  1141  00A4               	movwf	??_DelayTimejudge
 16322  1142  0824               	movf	??_DelayTimejudge,w
 16323  1143  00A0               	movwf	___bmul@multiplicand
 16324  1144  0828               	movf	DelayTimejudge@k,w
 16325  1145  319C  24B6         	fcall	___bmul
 16326  1147  0020               	movlb	0	; select bank0
 16327  1148  0727               	addwf	DelayTimejudge@j,w
 16328  1149  00A5               	movwf	??_DelayTimejudge+1
 16329  114A  0825               	movf	??_DelayTimejudge+1,w
 16330  114B  00A6               	movwf	DelayTimejudge@i
 16331  114C                     l6117:	
 16332                           
 16333                           ;DelayOff_B1.c: 118: }
 16334                           ;DelayOff_B1.c: 139: return i;
 16335  114C  0826               	movf	DelayTimejudge@i,w
 16336  114D  0008               	return
 16337  114E                     __end_of_DelayTimejudge:	
 16338                           
 16339                           	psect	text102
 16340  1CB6                     __ptext102:	
 16341 ;; *************** function ___bmul *****************
 16342 ;; Defined at:
 16343 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16344 ;; Parameters:    Size  Location     Type
 16345 ;;  multiplier      1    wreg     unsigned char 
 16346 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16347 ;; Auto vars:     Size  Location     Type
 16348 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16349 ;;  product         1    2[BANK0 ] unsigned char 
 16350 ;; Return value:  Size  Location     Type
 16351 ;;                  1    wreg      unsigned char 
 16352 ;; Registers used:
 16353 ;;		wreg, status,2, status,0
 16354 ;; Tracked objects:
 16355 ;;		On entry : 0/0
 16356 ;;		On exit  : 0/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;Total ram usage:        4 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    5
 16366 ;; This function calls:
 16367 ;;		Nothing
 16368 ;; This function is called by:
 16369 ;;		_DelayTimejudge
 16370 ;; This function uses a non-reentrant model
 16371 ;;
 16372                           
 16373                           
 16374                           ;psect for function ___bmul
 16375  1CB6                     ___bmul:	
 16376                           
 16377                           ;incstack = 0
 16378                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16379                           ;___bmul@multiplier stored from wreg
 16380  1CB6  0020               	movlb	0	; select bank0
 16381  1CB7  00A3               	movwf	___bmul@multiplier
 16382  1CB8  01A2               	clrf	___bmul@product
 16383  1CB9                     l5855:	
 16384  1CB9  1C23               	btfss	___bmul@multiplier,0
 16385  1CBA  2CBF               	goto	l5859
 16386  1CBB  0820               	movf	___bmul@multiplicand,w
 16387  1CBC  00A1               	movwf	??___bmul
 16388  1CBD  0821               	movf	??___bmul,w
 16389  1CBE  07A2               	addwf	___bmul@product,f
 16390  1CBF                     l5859:	
 16391  1CBF  1003               	clrc
 16392  1CC0  0DA0               	rlf	___bmul@multiplicand,f
 16393  1CC1  1003               	clrc
 16394  1CC2  0CA3               	rrf	___bmul@multiplier,f
 16395  1CC3  08A3               	movf	___bmul@multiplier,f
 16396  1CC4  1D03               	skipz
 16397  1CC5  2CB9               	goto	l5855
 16398  1CC6  0822               	movf	___bmul@product,w
 16399  1CC7  0008               	return
 16400  1CC8                     __end_of___bmul:	
 16401                           
 16402                           	psect	text103
 16403  1C50                     __ptext103:	
 16404 ;; *************** function _getDelayOff_GO *****************
 16405 ;; Defined at:
 16406 ;;		line 105 in file "../src/DelayOff_B1.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;  sw              1    wreg     unsigned char 
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;  sw              1    2[BANK0 ] unsigned char 
 16411 ;;  go              1    3[BANK0 ] unsigned char 
 16412 ;; Return value:  Size  Location     Type
 16413 ;;                  1    wreg      unsigned char 
 16414 ;; Registers used:
 16415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16416 ;; Tracked objects:
 16417 ;;		On entry : 0/0
 16418 ;;		On exit  : 0/0
 16419 ;;		Unchanged: 0/0
 16420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;Total ram usage:        2 bytes
 16426 ;; Hardware stack levels used:    1
 16427 ;; Hardware stack levels required when called:    6
 16428 ;; This function calls:
 16429 ;;		_DelayOffPointSelect
 16430 ;; This function is called by:
 16431 ;;		_setDimmerLights_SwOff
 16432 ;;		_setRFSW_Control
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           
 16437                           ;psect for function _getDelayOff_GO
 16438  1C50                     _getDelayOff_GO:	
 16439                           
 16440                           ;incstack = 0
 16441                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16442                           ;getDelayOff_GO@sw stored from wreg
 16443  1C50  0020               	movlb	0	; select bank0
 16444  1C51  00A2               	movwf	getDelayOff_GO@sw
 16445                           
 16446                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16447  1C52  0822               	movf	getDelayOff_GO@sw,w
 16448  1C53  319D  2560         	fcall	_DelayOffPointSelect
 16449                           
 16450                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16451  1C55  0878               	movf	_DelayOff,w
 16452  1C56  0086               	movwf	6
 16453  1C57  3001               	movlw	1	; select bank2/3
 16454  1C58  0087               	movwf	7
 16455  1C59  3000               	movlw	0
 16456  1C5A  1881               	btfsc	1,1
 16457  1C5B  3001               	movlw	1
 16458  1C5C  0020               	movlb	0	; select bank0
 16459  1C5D  00A3               	movwf	getDelayOff_GO@go
 16460                           
 16461                           ;DelayOff_B1.c: 108: return go;
 16462  1C5E  0823               	movf	getDelayOff_GO@go,w
 16463  1C5F  0008               	return
 16464  1C60                     __end_of_getDelayOff_GO:	
 16465                           
 16466                           	psect	text104
 16467  1C40                     __ptext104:	
 16468 ;; *************** function _getDimmerLights_Status *****************
 16469 ;; Defined at:
 16470 ;;		line 461 in file "../src/Dimmer_B1.c"
 16471 ;; Parameters:    Size  Location     Type
 16472 ;;  lights          1    wreg     unsigned char 
 16473 ;; Auto vars:     Size  Location     Type
 16474 ;;  lights          1    2[BANK0 ] unsigned char 
 16475 ;;  status          1    3[BANK0 ] unsigned char 
 16476 ;; Return value:  Size  Location     Type
 16477 ;;                  1    wreg      unsigned char 
 16478 ;; Registers used:
 16479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16480 ;; Tracked objects:
 16481 ;;		On entry : 0/0
 16482 ;;		On exit  : 0/0
 16483 ;;		Unchanged: 0/0
 16484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16489 ;;Total ram usage:        2 bytes
 16490 ;; Hardware stack levels used:    1
 16491 ;; Hardware stack levels required when called:    6
 16492 ;; This function calls:
 16493 ;;		_DimmerLightsPointSelect
 16494 ;; This function is called by:
 16495 ;;		_setDimmerLights_ErrorClose
 16496 ;;		_setRFSW_Control
 16497 ;;		_setRFSW_AdjControl
 16498 ;;		_getMain_LightsStatus
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           
 16503                           ;psect for function _getDimmerLights_Status
 16504  1C40                     _getDimmerLights_Status:	
 16505                           
 16506                           ;incstack = 0
 16507                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16508                           ;getDimmerLights_Status@lights stored from wreg
 16509  1C40  0020               	movlb	0	; select bank0
 16510  1C41  00A2               	movwf	getDimmerLights_Status@lights
 16511                           
 16512                           ;Dimmer_B1.c: 462: DimmerLightsPointSelect(lights);
 16513  1C42  0822               	movf	getDimmerLights_Status@lights,w
 16514  1C43  319C  24EC         	fcall	_DimmerLightsPointSelect
 16515                           
 16516                           ;Dimmer_B1.c: 463: char status = DimmerLights->Status == 1 ? 1 : 0;
 16517  1C45  0020               	movlb	0	; select bank0
 16518  1C46  086F               	movf	_DimmerLights,w
 16519  1C47  0086               	movwf	6
 16520  1C48  3001               	movlw	1	; select bank2/3
 16521  1C49  0087               	movwf	7
 16522  1C4A  3000               	movlw	0
 16523  1C4B  1A81               	btfsc	1,5
 16524  1C4C  3001               	movlw	1
 16525  1C4D  00A3               	movwf	getDimmerLights_Status@status
 16526                           
 16527                           ;Dimmer_B1.c: 464: return status;
 16528  1C4E  0823               	movf	getDimmerLights_Status@status,w
 16529  1C4F  0008               	return
 16530  1C50                     __end_of_getDimmerLights_Status:	
 16531                           
 16532                           	psect	text105
 16533  1CEC                     __ptext105:	
 16534 ;; *************** function _DimmerLightsPointSelect *****************
 16535 ;; Defined at:
 16536 ;;		line 326 in file "../src/Dimmer_B1.c"
 16537 ;; Parameters:    Size  Location     Type
 16538 ;;  lights          1    wreg     unsigned char 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;  lights          1    1[BANK0 ] unsigned char 
 16541 ;; Return value:  Size  Location     Type
 16542 ;;		None               void
 16543 ;; Registers used:
 16544 ;;		wreg
 16545 ;; Tracked objects:
 16546 ;;		On entry : 0/0
 16547 ;;		On exit  : 0/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;Total ram usage:        2 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; Hardware stack levels required when called:    5
 16557 ;; This function calls:
 16558 ;;		Nothing
 16559 ;; This function is called by:
 16560 ;;		_setDimmerLights_Initialization
 16561 ;;		_setDimmerLights_Main
 16562 ;;		_getDimmerLights_Status
 16563 ;;		_setDimmerLights_SwOn
 16564 ;;		_setDimmerLights_SwOff
 16565 ;;		_setDimmerLights_AdjControl
 16566 ;;		_setDimmerLights_ErrorClose
 16567 ;;		_setDimmerLights
 16568 ;;		_setDimmerLights_Adj
 16569 ;;		_setDimmerLights_AdjRF
 16570 ;;		_setDimmerLights_Trigger
 16571 ;;		_setDimmerLights_TriggerAdj
 16572 ;;		_setDimmerLights_Status
 16573 ;;		_setDimmerLights_GO
 16574 ;;		_setDimmerLights_MaxmumValue
 16575 ;; This function uses a non-reentrant model
 16576 ;;
 16577                           
 16578                           
 16579                           ;psect for function _DimmerLightsPointSelect
 16580  1CEC                     _DimmerLightsPointSelect:	
 16581                           
 16582                           ;incstack = 0
 16583                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16584                           ;DimmerLightsPointSelect@lights stored from wreg
 16585  1CEC  0020               	movlb	0	; select bank0
 16586  1CED  00A1               	movwf	DimmerLightsPointSelect@lights
 16587                           
 16588                           ;Dimmer_B1.c: 328: if (lights == 1) {
 16589  1CEE  0821               	movf	DimmerLightsPointSelect@lights,w
 16590  1CEF  3A01               	xorlw	1
 16591  1CF0  1D03               	skipz
 16592  1CF1  2CF6               	goto	l765
 16593                           
 16594                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 16595  1CF2  30A0               	movlw	_DimmerLights1& (0+255)
 16596  1CF3  00A0               	movwf	??_DimmerLightsPointSelect
 16597  1CF4  0820               	movf	??_DimmerLightsPointSelect,w
 16598  1CF5  00EF               	movwf	_DimmerLights
 16599  1CF6                     l765:	
 16600                           
 16601                           ;Dimmer_B1.c: 330: }
 16602                           ;Dimmer_B1.c: 333: if (lights == 2) {
 16603  1CF6  0821               	movf	DimmerLightsPointSelect@lights,w
 16604  1CF7  3A02               	xorlw	2
 16605  1CF8  1D03               	skipz
 16606  1CF9  0008               	return
 16607                           
 16608                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 16609  1CFA  30AF               	movlw	_DimmerLights2& (0+255)
 16610  1CFB  00A0               	movwf	??_DimmerLightsPointSelect
 16611  1CFC  0820               	movf	??_DimmerLightsPointSelect,w
 16612  1CFD  00EF               	movwf	_DimmerLights
 16613  1CFE  0008               	return
 16614  1CFF                     __end_of_DimmerLightsPointSelect:	
 16615                           
 16616                           	psect	text106
 16617  163C                     __ptext106:	
 16618 ;; *************** function _setBuz *****************
 16619 ;; Defined at:
 16620 ;;		line 22 in file "../src/Buzzer_B1.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;  count           1    wreg     unsigned char 
 16623 ;;  time            2    9[BANK0 ] int 
 16624 ;; Auto vars:     Size  Location     Type
 16625 ;;  count           1   12[BANK0 ] unsigned char 
 16626 ;; Return value:  Size  Location     Type
 16627 ;;		None               void
 16628 ;; Registers used:
 16629 ;;		wreg, status,2, status,0, pclath, cstack
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16635 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;Total ram usage:        4 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    6
 16642 ;; This function calls:
 16643 ;;		___awdiv
 16644 ;; This function is called by:
 16645 ;;		_DlyOff_Main
 16646 ;;		_setDimmerLights_Main
 16647 ;;		_setDimmerLights_SwOn
 16648 ;;		_setTemp_Main
 16649 ;;		_setLog_Code
 16650 ;;		_setControl_Lights_Table
 16651 ;;		_setRFSW_Control
 16652 ;;		_setSw_Main
 16653 ;;		_my_MainTimer
 16654 ;;		_setMain_Exception
 16655 ;; This function uses a non-reentrant model
 16656 ;;
 16657                           
 16658                           
 16659                           ;psect for function _setBuz
 16660  163C                     _setBuz:	
 16661                           
 16662                           ;incstack = 0
 16663                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16664                           ;setBuz@count stored from wreg
 16665  163C  0020               	movlb	0	; select bank0
 16666  163D  00AC               	movwf	setBuz@count
 16667                           
 16668                           ;Buzzer_B1.c: 23: time /= 10;
 16669  163E  300A               	movlw	10
 16670  163F  00A0               	movwf	___awdiv@divisor
 16671  1640  3000               	movlw	0
 16672  1641  00A1               	movwf	___awdiv@divisor+1
 16673  1642  082A               	movf	setBuz@time+1,w
 16674  1643  01A3               	clrf	___awdiv@dividend+1
 16675  1644  07A3               	addwf	___awdiv@dividend+1,f
 16676  1645  0829               	movf	setBuz@time,w
 16677  1646  01A2               	clrf	___awdiv@dividend
 16678  1647  07A2               	addwf	___awdiv@dividend,f
 16679  1648  3195  2590  3196   	fcall	___awdiv
 16680  164B  0020               	movlb	0	; select bank0
 16681  164C  0821               	movf	?___awdiv+1,w
 16682  164D  01AA               	clrf	setBuz@time+1
 16683  164E  07AA               	addwf	setBuz@time+1,f
 16684  164F  0820               	movf	?___awdiv,w
 16685  1650  01A9               	clrf	setBuz@time
 16686  1651  07A9               	addwf	setBuz@time,f
 16687                           
 16688                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16689  1652  0021               	movlb	1	; select bank1
 16690  1653  1C2F               	btfss	_Buz1^(0+128),0
 16691  1654  0008               	return
 16692                           
 16693                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16694  1655  18AF               	btfsc	_Buz1^(0+128),1
 16695  1656  2E6D               	goto	l96
 16696                           
 16697                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16698  1657  14AF               	bsf	_Buz1^(0+128),1
 16699                           
 16700                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16701  1658  01B0               	clrf	(_Buz1^(0+128)+1)
 16702  1659  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16703                           
 16704                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16705  165A  0020               	movlb	0	; select bank0
 16706  165B  082C               	movf	setBuz@count,w
 16707  165C  00AB               	movwf	??_setBuz
 16708  165D  082B               	movf	??_setBuz,w
 16709  165E  0021               	movlb	1	; select bank1
 16710  165F  00B2               	movwf	(_Buz1^(0+128)+3)
 16711                           
 16712                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16713  1660  0020               	movlb	0	; select bank0
 16714  1661  082A               	movf	setBuz@time+1,w
 16715  1662  0021               	movlb	1	; select bank1
 16716  1663  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16717  1664  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16718  1665  0020               	movlb	0	; select bank0
 16719  1666  0829               	movf	setBuz@time,w
 16720  1667  0021               	movlb	1	; select bank1
 16721  1668  01B5               	clrf	(_Buz1^(0+128)+6)
 16722  1669  07B5               	addwf	(_Buz1^(0+128)+6),f
 16723                           
 16724                           ;Buzzer_B1.c: 30: RB3 = 1;
 16725  166A  0020               	movlb	0	; select bank0
 16726  166B  158D               	bsf	13,3	;volatile
 16727                           
 16728                           ;Buzzer_B1.c: 31: } else {
 16729  166C  0008               	return
 16730  166D                     l96:	
 16731                           
 16732                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16733  166D  19AF               	btfsc	_Buz1^(0+128),3
 16734  166E  2E81               	goto	l98
 16735                           
 16736                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16737  166F  15AF               	bsf	_Buz1^(0+128),3
 16738                           
 16739                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16740  1670  0020               	movlb	0	; select bank0
 16741  1671  082C               	movf	setBuz@count,w
 16742  1672  00AB               	movwf	??_setBuz
 16743  1673  082B               	movf	??_setBuz,w
 16744  1674  0021               	movlb	1	; select bank1
 16745  1675  00B3               	movwf	(_Buz1^(0+128)+4)
 16746                           
 16747                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16748  1676  0020               	movlb	0	; select bank0
 16749  1677  082A               	movf	setBuz@time+1,w
 16750  1678  0021               	movlb	1	; select bank1
 16751  1679  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16752  167A  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16753  167B  0020               	movlb	0	; select bank0
 16754  167C  0829               	movf	setBuz@time,w
 16755  167D  0021               	movlb	1	; select bank1
 16756  167E  01B7               	clrf	(_Buz1^(0+128)+8)
 16757  167F  07B7               	addwf	(_Buz1^(0+128)+8),f
 16758                           
 16759                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16760  1680  0008               	return
 16761  1681                     l98:	
 16762  1681  1A2F               	btfsc	_Buz1^(0+128),4
 16763  1682  0008               	return
 16764                           
 16765                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16766  1683  162F               	bsf	_Buz1^(0+128),4
 16767                           
 16768                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16769  1684  0020               	movlb	0	; select bank0
 16770  1685  082C               	movf	setBuz@count,w
 16771  1686  00AB               	movwf	??_setBuz
 16772  1687  082B               	movf	??_setBuz,w
 16773  1688  0021               	movlb	1	; select bank1
 16774  1689  00B4               	movwf	(_Buz1^(0+128)+5)
 16775                           
 16776                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16777  168A  0020               	movlb	0	; select bank0
 16778  168B  082A               	movf	setBuz@time+1,w
 16779  168C  0021               	movlb	1	; select bank1
 16780  168D  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16781  168E  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16782  168F  0020               	movlb	0	; select bank0
 16783  1690  0829               	movf	setBuz@time,w
 16784  1691  0021               	movlb	1	; select bank1
 16785  1692  01B9               	clrf	(_Buz1^(0+128)+10)
 16786  1693  07B9               	addwf	(_Buz1^(0+128)+10),f
 16787  1694  0008               	return
 16788  1695                     __end_of_setBuz:	
 16789                           
 16790                           	psect	text107
 16791  1590                     __ptext107:	
 16792 ;; *************** function ___awdiv *****************
 16793 ;; Defined at:
 16794 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;  divisor         2    0[BANK0 ] int 
 16797 ;;  dividend        2    2[BANK0 ] int 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  quotient        2    7[BANK0 ] int 
 16800 ;;  sign            1    6[BANK0 ] unsigned char 
 16801 ;;  counter         1    5[BANK0 ] unsigned char 
 16802 ;; Return value:  Size  Location     Type
 16803 ;;                  2    0[BANK0 ] int 
 16804 ;; Registers used:
 16805 ;;		wreg, status,2, status,0
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        9 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    5
 16818 ;; This function calls:
 16819 ;;		Nothing
 16820 ;; This function is called by:
 16821 ;;		_setBuz
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           
 16826                           ;psect for function ___awdiv
 16827  1590                     ___awdiv:	
 16828                           
 16829                           ;incstack = 0
 16830                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16831  1590  0020               	movlb	0	; select bank0
 16832  1591  01A6               	clrf	___awdiv@sign
 16833  1592  1FA1               	btfss	___awdiv@divisor+1,7
 16834  1593  2D9B               	goto	l6143
 16835  1594  09A0               	comf	___awdiv@divisor,f
 16836  1595  09A1               	comf	___awdiv@divisor+1,f
 16837  1596  0AA0               	incf	___awdiv@divisor,f
 16838  1597  1903               	skipnz
 16839  1598  0AA1               	incf	___awdiv@divisor+1,f
 16840  1599  01A6               	clrf	___awdiv@sign
 16841  159A  0AA6               	incf	___awdiv@sign,f
 16842  159B                     l6143:	
 16843  159B  1FA3               	btfss	___awdiv@dividend+1,7
 16844  159C  2DA6               	goto	l6149
 16845  159D  09A2               	comf	___awdiv@dividend,f
 16846  159E  09A3               	comf	___awdiv@dividend+1,f
 16847  159F  0AA2               	incf	___awdiv@dividend,f
 16848  15A0  1903               	skipnz
 16849  15A1  0AA3               	incf	___awdiv@dividend+1,f
 16850  15A2  3001               	movlw	1
 16851  15A3  00A4               	movwf	??___awdiv
 16852  15A4  0824               	movf	??___awdiv,w
 16853  15A5  06A6               	xorwf	___awdiv@sign,f
 16854  15A6                     l6149:	
 16855  15A6  01A7               	clrf	___awdiv@quotient
 16856  15A7  01A8               	clrf	___awdiv@quotient+1
 16857  15A8  0821               	movf	___awdiv@divisor+1,w
 16858  15A9  0420               	iorwf	___awdiv@divisor,w
 16859  15AA  1903               	skipnz
 16860  15AB  2DD5               	goto	l6171
 16861  15AC  01A5               	clrf	___awdiv@counter
 16862  15AD  0AA5               	incf	___awdiv@counter,f
 16863  15AE                     l6159:	
 16864  15AE  1BA1               	btfsc	___awdiv@divisor+1,7
 16865  15AF  2DBA               	goto	l6161
 16866  15B0  3001               	movlw	1
 16867  15B1                     u5025:	
 16868  15B1  35A0               	lslf	___awdiv@divisor,f
 16869  15B2  0DA1               	rlf	___awdiv@divisor+1,f
 16870  15B3  0B89               	decfsz	9,f
 16871  15B4  2DB1               	goto	u5025
 16872  15B5  3001               	movlw	1
 16873  15B6  00A4               	movwf	??___awdiv
 16874  15B7  0824               	movf	??___awdiv,w
 16875  15B8  07A5               	addwf	___awdiv@counter,f
 16876  15B9  2DAE               	goto	l6159
 16877  15BA                     l6161:	
 16878  15BA  3001               	movlw	1
 16879  15BB                     u5045:	
 16880  15BB  35A7               	lslf	___awdiv@quotient,f
 16881  15BC  0DA8               	rlf	___awdiv@quotient+1,f
 16882  15BD  0B89               	decfsz	9,f
 16883  15BE  2DBB               	goto	u5045
 16884  15BF  0821               	movf	___awdiv@divisor+1,w
 16885  15C0  0223               	subwf	___awdiv@dividend+1,w
 16886  15C1  1D03               	skipz
 16887  15C2  2DC5               	goto	u5055
 16888  15C3  0820               	movf	___awdiv@divisor,w
 16889  15C4  0222               	subwf	___awdiv@dividend,w
 16890  15C5                     u5055:	
 16891  15C5  1C03               	skipc
 16892  15C6  2DCC               	goto	l6167
 16893  15C7  0820               	movf	___awdiv@divisor,w
 16894  15C8  02A2               	subwf	___awdiv@dividend,f
 16895  15C9  0821               	movf	___awdiv@divisor+1,w
 16896  15CA  3BA3               	subwfb	___awdiv@dividend+1,f
 16897  15CB  1427               	bsf	___awdiv@quotient,0
 16898  15CC                     l6167:	
 16899  15CC  3001               	movlw	1
 16900  15CD                     u5065:	
 16901  15CD  36A1               	lsrf	___awdiv@divisor+1,f
 16902  15CE  0CA0               	rrf	___awdiv@divisor,f
 16903  15CF  0B89               	decfsz	9,f
 16904  15D0  2DCD               	goto	u5065
 16905  15D1  3001               	movlw	1
 16906  15D2  02A5               	subwf	___awdiv@counter,f
 16907  15D3  1D03               	btfss	3,2
 16908  15D4  2DBA               	goto	l6161
 16909  15D5                     l6171:	
 16910  15D5  0826               	movf	___awdiv@sign,w
 16911  15D6  1903               	btfsc	3,2
 16912  15D7  2DDD               	goto	l6175
 16913  15D8  09A7               	comf	___awdiv@quotient,f
 16914  15D9  09A8               	comf	___awdiv@quotient+1,f
 16915  15DA  0AA7               	incf	___awdiv@quotient,f
 16916  15DB  1903               	skipnz
 16917  15DC  0AA8               	incf	___awdiv@quotient+1,f
 16918  15DD                     l6175:	
 16919  15DD  0828               	movf	___awdiv@quotient+1,w
 16920  15DE  01A1               	clrf	?___awdiv+1
 16921  15DF  07A1               	addwf	?___awdiv+1,f
 16922  15E0  0827               	movf	___awdiv@quotient,w
 16923  15E1  01A0               	clrf	?___awdiv
 16924  15E2  07A0               	addwf	?___awdiv,f
 16925  15E3  0008               	return
 16926  15E4                     __end_of___awdiv:	
 16927                           
 16928                           	psect	text108
 16929  1B54                     __ptext108:	
 16930 ;; *************** function _DelayOff_Initialization *****************
 16931 ;; Defined at:
 16932 ;;		line 26 in file "../src/DelayOff_B1.c"
 16933 ;; Parameters:    Size  Location     Type
 16934 ;;		None
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;		None
 16937 ;; Return value:  Size  Location     Type
 16938 ;;		None               void
 16939 ;; Registers used:
 16940 ;;		wreg, status,2, status,0, pclath, cstack
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/0
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;Total ram usage:        0 bytes
 16951 ;; Hardware stack levels used:    1
 16952 ;; Hardware stack levels required when called:    7
 16953 ;; This function calls:
 16954 ;;		_DlyOff_Initialization
 16955 ;; This function is called by:
 16956 ;;		_main
 16957 ;; This function uses a non-reentrant model
 16958 ;;
 16959                           
 16960                           
 16961                           ;psect for function _DelayOff_Initialization
 16962  1B54                     _DelayOff_Initialization:	
 16963                           
 16964                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16965                           
 16966                           ;incstack = 0
 16967                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16968  1B54  3001               	movlw	1
 16969  1B55  319B  2333  319B   	fcall	_DlyOff_Initialization
 16970                           
 16971                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16972  1B58  3002               	movlw	2
 16973  1B59  319B  2333         	fcall	_DlyOff_Initialization
 16974  1B5B  0008               	return
 16975  1B5C                     __end_of_DelayOff_Initialization:	
 16976                           
 16977                           	psect	text109
 16978  1B33                     __ptext109:	
 16979 ;; *************** function _DlyOff_Initialization *****************
 16980 ;; Defined at:
 16981 ;;		line 56 in file "../src/DelayOff_B1.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  sw              1    wreg     unsigned char 
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;  sw              1    2[BANK0 ] unsigned char 
 16986 ;; Return value:  Size  Location     Type
 16987 ;;		None               void
 16988 ;; Registers used:
 16989 ;;		wreg, status,2, status,0, pclath, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;Total ram usage:        1 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    6
 17002 ;; This function calls:
 17003 ;;		_DelayOffPointSelect
 17004 ;; This function is called by:
 17005 ;;		_DelayOff_Initialization
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           
 17010                           ;psect for function _DlyOff_Initialization
 17011  1B33                     _DlyOff_Initialization:	
 17012                           
 17013                           ;incstack = 0
 17014                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17015                           ;DlyOff_Initialization@sw stored from wreg
 17016  1B33  0020               	movlb	0	; select bank0
 17017  1B34  00A2               	movwf	DlyOff_Initialization@sw
 17018                           
 17019                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17020  1B35  0822               	movf	DlyOff_Initialization@sw,w
 17021  1B36  319D  2560         	fcall	_DelayOffPointSelect
 17022  1B38  0008               	return
 17023  1B39                     __end_of_DlyOff_Initialization:	
 17024                           
 17025                           	psect	text110
 17026  1D60                     __ptext110:	
 17027 ;; *************** function _DelayOffPointSelect *****************
 17028 ;; Defined at:
 17029 ;;		line 7 in file "../src/DelayOff_B1.c"
 17030 ;; Parameters:    Size  Location     Type
 17031 ;;  sw              1    wreg     unsigned char 
 17032 ;; Auto vars:     Size  Location     Type
 17033 ;;  sw              1    1[BANK0 ] unsigned char 
 17034 ;; Return value:  Size  Location     Type
 17035 ;;		None               void
 17036 ;; Registers used:
 17037 ;;		wreg
 17038 ;; Tracked objects:
 17039 ;;		On entry : 0/0
 17040 ;;		On exit  : 0/0
 17041 ;;		Unchanged: 0/0
 17042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;Total ram usage:        2 bytes
 17048 ;; Hardware stack levels used:    1
 17049 ;; Hardware stack levels required when called:    5
 17050 ;; This function calls:
 17051 ;;		Nothing
 17052 ;; This function is called by:
 17053 ;;		_DlyOff_Initialization
 17054 ;;		_DlyOff_Main
 17055 ;;		_setDelayOff_GO
 17056 ;;		_getDelayOff_GO
 17057 ;; This function uses a non-reentrant model
 17058 ;;
 17059                           
 17060                           
 17061                           ;psect for function _DelayOffPointSelect
 17062  1D60                     _DelayOffPointSelect:	
 17063                           
 17064                           ;incstack = 0
 17065                           ; Regs used in _DelayOffPointSelect: [wreg]
 17066                           ;DelayOffPointSelect@sw stored from wreg
 17067  1D60  0020               	movlb	0	; select bank0
 17068  1D61  00A1               	movwf	DelayOffPointSelect@sw
 17069                           
 17070                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17071  1D62  0821               	movf	DelayOffPointSelect@sw,w
 17072  1D63  3A01               	xorlw	1
 17073  1D64  1D03               	skipz
 17074  1D65  2D6B               	goto	l6101
 17075                           
 17076                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17077  1D66  30D0               	movlw	_DlySw1& (0+255)
 17078  1D67  00A0               	movwf	??_DelayOffPointSelect
 17079  1D68  0820               	movf	??_DelayOffPointSelect,w
 17080  1D69  00F8               	movwf	_DelayOff
 17081                           
 17082                           ;DelayOff_B1.c: 11: }
 17083  1D6A  0008               	return
 17084  1D6B                     l6101:	
 17085                           
 17086                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17087  1D6B  0821               	movf	DelayOffPointSelect@sw,w
 17088  1D6C  3A02               	xorlw	2
 17089  1D6D  1D03               	skipz
 17090  1D6E  0008               	return
 17091                           
 17092                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17093  1D6F  30D5               	movlw	_DlySw2& (0+255)
 17094  1D70  00A0               	movwf	??_DelayOffPointSelect
 17095  1D71  0820               	movf	??_DelayOffPointSelect,w
 17096  1D72  00F8               	movwf	_DelayOff
 17097  1D73  0008               	return
 17098  1D74                     __end_of_DelayOffPointSelect:	
 17099                           
 17100                           	psect	text111
 17101  1DB1                     __ptext111:	
 17102 ;; *************** function _CC2500_PowerOnInitial *****************
 17103 ;; Defined at:
 17104 ;;		line 119 in file "../src/CC2500_B1.c"
 17105 ;; Parameters:    Size  Location     Type
 17106 ;;		None
 17107 ;; Auto vars:     Size  Location     Type
 17108 ;;		None
 17109 ;; Return value:  Size  Location     Type
 17110 ;;		None               void
 17111 ;; Registers used:
 17112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17113 ;; Tracked objects:
 17114 ;;		On entry : 0/0
 17115 ;;		On exit  : 0/0
 17116 ;;		Unchanged: 0/0
 17117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17122 ;;Total ram usage:        0 bytes
 17123 ;; Hardware stack levels used:    1
 17124 ;; Hardware stack levels required when called:    8
 17125 ;; This function calls:
 17126 ;;		_CC2500_ClearRXFIFO
 17127 ;;		_CC2500_ClearTXFIFO
 17128 ;;		_CC2500_FrequencyCabr
 17129 ;;		_CC2500_InitPATable
 17130 ;;		_CC2500_InitSetREG
 17131 ;;		_CC2500_PowerRST
 17132 ;;		_CC2500_SIDLEMode
 17133 ;; This function is called by:
 17134 ;;		_main
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           
 17139                           ;psect for function _CC2500_PowerOnInitial
 17140  1DB1                     _CC2500_PowerOnInitial:	
 17141                           
 17142                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17143                           
 17144                           ;incstack = 0
 17145                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17146  1DB1  3187  27BA  319D   	fcall	_CC2500_PowerRST
 17147                           
 17148                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17149  1DB4  3190  20FA  319D   	fcall	_CC2500_InitSetREG
 17150                           
 17151                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17152  1DB7  319E  26D5  319D   	fcall	_CC2500_InitPATable
 17153                           
 17154                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17155  1DBA  319B  231D  319D   	fcall	_CC2500_ClearTXFIFO
 17156                           
 17157                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17158  1DBD  319B  2319  319D   	fcall	_CC2500_ClearRXFIFO
 17159                           
 17160                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17161  1DC0  319B  23A4  319D   	fcall	_CC2500_FrequencyCabr
 17162                           
 17163                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17164  1DC3  319B  2321         	fcall	_CC2500_SIDLEMode
 17165  1DC5  0008               	return
 17166  1DC6                     __end_of_CC2500_PowerOnInitial:	
 17167                           
 17168                           	psect	text112
 17169  1B21                     __ptext112:	
 17170 ;; *************** function _CC2500_SIDLEMode *****************
 17171 ;; Defined at:
 17172 ;;		line 209 in file "../src/CC2500_B1.c"
 17173 ;; Parameters:    Size  Location     Type
 17174 ;;		None
 17175 ;; Auto vars:     Size  Location     Type
 17176 ;;		None
 17177 ;; Return value:  Size  Location     Type
 17178 ;;		None               void
 17179 ;; Registers used:
 17180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17181 ;; Tracked objects:
 17182 ;;		On entry : 0/0
 17183 ;;		On exit  : 0/0
 17184 ;;		Unchanged: 0/0
 17185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17190 ;;Total ram usage:        0 bytes
 17191 ;; Hardware stack levels used:    1
 17192 ;; Hardware stack levels required when called:    7
 17193 ;; This function calls:
 17194 ;;		_CC2500_WriteCommand
 17195 ;; This function is called by:
 17196 ;;		_CC2500_PowerOnInitial
 17197 ;; This function uses a non-reentrant model
 17198 ;;
 17199                           
 17200                           
 17201                           ;psect for function _CC2500_SIDLEMode
 17202  1B21                     _CC2500_SIDLEMode:	
 17203                           
 17204                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17205                           
 17206                           ;incstack = 0
 17207                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17208  1B21  3036               	movlw	54
 17209  1B22  319E  2634         	fcall	_CC2500_WriteCommand
 17210  1B24  0008               	return
 17211  1B25                     __end_of_CC2500_SIDLEMode:	
 17212                           
 17213                           	psect	text113
 17214  07BA                     __ptext113:	
 17215 ;; *************** function _CC2500_PowerRST *****************
 17216 ;; Defined at:
 17217 ;;		line 132 in file "../src/CC2500_B1.c"
 17218 ;; Parameters:    Size  Location     Type
 17219 ;;		None
 17220 ;; Auto vars:     Size  Location     Type
 17221 ;;		None
 17222 ;; Return value:  Size  Location     Type
 17223 ;;		None               void
 17224 ;; Registers used:
 17225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17226 ;; Tracked objects:
 17227 ;;		On entry : 0/0
 17228 ;;		On exit  : 0/0
 17229 ;;		Unchanged: 0/0
 17230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;Total ram usage:        1 bytes
 17236 ;; Hardware stack levels used:    1
 17237 ;; Hardware stack levels required when called:    6
 17238 ;; This function calls:
 17239 ;;		_CC2500_WriteByte
 17240 ;;		_DelayTime_1us
 17241 ;;		_Timeout_Counter
 17242 ;;		_set_TimeoutCleared
 17243 ;; This function is called by:
 17244 ;;		_CC2500_PowerOnInitial
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           
 17249                           ;psect for function _CC2500_PowerRST
 17250  07BA                     _CC2500_PowerRST:	
 17251                           
 17252                           ;CC2500_B1.c: 133: RC1 = 0;
 17253                           
 17254                           ;incstack = 0
 17255                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17256  07BA  0020               	movlb	0	; select bank0
 17257  07BB  108E               	bcf	14,1	;volatile
 17258                           
 17259                           ;CC2500_B1.c: 134: RC0 = 0;
 17260  07BC  100E               	bcf	14,0	;volatile
 17261                           
 17262                           ;CC2500_B1.c: 135: RC4 = 1;
 17263  07BD  160E               	bsf	14,4	;volatile
 17264                           
 17265                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17266  07BE  300A               	movlw	10
 17267  07BF  00A0               	movwf	DelayTime_1us@count
 17268  07C0  3000               	movlw	0
 17269  07C1  00A1               	movwf	DelayTime_1us@count+1
 17270  07C2  3190  2085  3187   	fcall	_DelayTime_1us
 17271                           
 17272                           ;CC2500_B1.c: 137: RC4 = 0;
 17273  07C5  0020               	movlb	0	; select bank0
 17274  07C6  120E               	bcf	14,4	;volatile
 17275                           
 17276                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17277  07C7  300A               	movlw	10
 17278  07C8  00A0               	movwf	DelayTime_1us@count
 17279  07C9  3000               	movlw	0
 17280  07CA  00A1               	movwf	DelayTime_1us@count+1
 17281  07CB  3190  2085  3187   	fcall	_DelayTime_1us
 17282                           
 17283                           ;CC2500_B1.c: 139: RC4 = 1;
 17284  07CE  0020               	movlb	0	; select bank0
 17285  07CF  160E               	bsf	14,4	;volatile
 17286                           
 17287                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17288  07D0  3028               	movlw	40
 17289  07D1  00A0               	movwf	DelayTime_1us@count
 17290  07D2  3000               	movlw	0
 17291  07D3  00A1               	movwf	DelayTime_1us@count+1
 17292  07D4  3190  2085  3187   	fcall	_DelayTime_1us
 17293                           
 17294                           ;CC2500_B1.c: 141: RC4 = 0;
 17295  07D7  0020               	movlb	0	; select bank0
 17296  07D8  120E               	bcf	14,4	;volatile
 17297                           
 17298                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17299  07D9  3030               	movlw	48
 17300  07DA  00A6               	movwf	??_CC2500_PowerRST
 17301  07DB  0826               	movf	??_CC2500_PowerRST,w
 17302  07DC  00FB               	movwf	_SPI0Buffer
 17303                           
 17304                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17305  07DD  2FE1               	goto	l7171
 17306  07DE                     l7169:	
 17307                           
 17308                           ;CC2500_B1.c: 144: Timeout_Counter();
 17309  07DE  319D  259C  3187   	fcall	_Timeout_Counter
 17310  07E1                     l7171:	
 17311  07E1  0020               	movlb	0	; select bank0
 17312  07E2  1D0E               	btfss	14,2	;volatile
 17313  07E3  2FE7               	goto	l7175
 17314  07E4  0021               	movlb	1	; select bank1
 17315  07E5  1D2C               	btfss	(_myMain^(0+128)+12),2
 17316  07E6  2FDE               	goto	l7169
 17317  07E7                     l7175:	
 17318                           
 17319                           ;CC2500_B1.c: 145: };
 17320                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17321  07E7  319B  2329  3187   	fcall	_set_TimeoutCleared
 17322                           
 17323                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17324  07EA  319D  254C  3187   	fcall	_CC2500_WriteByte
 17325                           
 17326                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17327  07ED  2FF1               	goto	l7181
 17328  07EE                     l7179:	
 17329                           
 17330                           ;CC2500_B1.c: 149: Timeout_Counter();
 17331  07EE  319D  259C  3187   	fcall	_Timeout_Counter
 17332  07F1                     l7181:	
 17333  07F1  0020               	movlb	0	; select bank0
 17334  07F2  1D0E               	btfss	14,2	;volatile
 17335  07F3  2FF7               	goto	l7185
 17336  07F4  0021               	movlb	1	; select bank1
 17337  07F5  1D2C               	btfss	(_myMain^(0+128)+12),2
 17338  07F6  2FEE               	goto	l7179
 17339  07F7                     l7185:	
 17340                           
 17341                           ;CC2500_B1.c: 150: };
 17342                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17343  07F7  319B  2329         	fcall	_set_TimeoutCleared
 17344                           
 17345                           ;CC2500_B1.c: 152: RC0 = 0;
 17346  07F9  0020               	movlb	0	; select bank0
 17347  07FA  100E               	bcf	14,0	;volatile
 17348                           
 17349                           ;CC2500_B1.c: 153: RC4 = 1;
 17350  07FB  160E               	bsf	14,4	;volatile
 17351  07FC  0008               	return
 17352  07FD                     __end_of_CC2500_PowerRST:	
 17353                           
 17354                           	psect	text114
 17355  10FA                     __ptext114:	
 17356 ;; *************** function _CC2500_InitSetREG *****************
 17357 ;; Defined at:
 17358 ;;		line 159 in file "../src/CC2500_B1.c"
 17359 ;; Parameters:    Size  Location     Type
 17360 ;;		None
 17361 ;; Auto vars:     Size  Location     Type
 17362 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17363 ;;  temp2           1    7[BANK0 ] unsigned char 
 17364 ;;  temp1           1    6[BANK0 ] unsigned char 
 17365 ;; Return value:  Size  Location     Type
 17366 ;;		None               void
 17367 ;; Registers used:
 17368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17369 ;; Tracked objects:
 17370 ;;		On entry : 0/0
 17371 ;;		On exit  : 0/0
 17372 ;;		Unchanged: 0/0
 17373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17375 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17377 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;Total ram usage:        4 bytes
 17379 ;; Hardware stack levels used:    1
 17380 ;; Hardware stack levels required when called:    7
 17381 ;; This function calls:
 17382 ;;		_CC2500_WriteREG
 17383 ;; This function is called by:
 17384 ;;		_CC2500_PowerOnInitial
 17385 ;; This function uses a non-reentrant model
 17386 ;;
 17387                           
 17388                           
 17389                           ;psect for function _CC2500_InitSetREG
 17390  10FA                     _CC2500_InitSetREG:	
 17391                           
 17392                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17393                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17394                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17395                           
 17396                           ;incstack = 0
 17397                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17398  10FA  0020               	movlb	0	; select bank0
 17399  10FB  01A8               	clrf	CC2500_InitSetREG@loop_c
 17400  10FC                     L10:	
 17401  10FC  302F               	movlw	47
 17402  10FD  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17403  10FE  1803               	btfsc	3,0
 17404  10FF  0008               	return
 17405                           
 17406                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17407  1100  0828               	movf	CC2500_InitSetREG@loop_c,w
 17408  1101  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17409  1102  0084               	movwf	4
 17410  1103  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17411  1104  1803               	skipnc
 17412  1105  3E01               	addlw	1
 17413  1106  0085               	movwf	5
 17414  1107  0800               	movf	0,w	;code access
 17415  1108  00A5               	movwf	??_CC2500_InitSetREG
 17416  1109  0825               	movf	??_CC2500_InitSetREG,w
 17417  110A  00A6               	movwf	CC2500_InitSetREG@temp1
 17418                           
 17419                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17420  110B  0828               	movf	CC2500_InitSetREG@loop_c,w
 17421  110C  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17422  110D  0084               	movwf	4
 17423  110E  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17424  110F  1803               	skipnc
 17425  1110  3E01               	addlw	1
 17426  1111  0085               	movwf	5
 17427  1112  0800               	movf	0,w	;code access
 17428  1113  00A5               	movwf	??_CC2500_InitSetREG
 17429  1114  0825               	movf	??_CC2500_InitSetREG,w
 17430  1115  00A7               	movwf	CC2500_InitSetREG@temp2
 17431                           
 17432                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17433  1116  0827               	movf	CC2500_InitSetREG@temp2,w
 17434  1117  00A5               	movwf	??_CC2500_InitSetREG
 17435  1118  0825               	movf	??_CC2500_InitSetREG,w
 17436  1119  00A2               	movwf	CC2500_WriteREG@value
 17437  111A  0826               	movf	CC2500_InitSetREG@temp1,w
 17438  111B  319F  2754  3190   	fcall	_CC2500_WriteREG
 17439  111E  3001               	movlw	1
 17440  111F  0020               	movlb	0	; select bank0
 17441  1120  00A5               	movwf	??_CC2500_InitSetREG
 17442  1121  0825               	movf	??_CC2500_InitSetREG,w
 17443  1122  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17444  1123  28FC               	goto	L10
 17445  1124                     __end_of_CC2500_InitSetREG:	
 17446                           
 17447                           	psect	text115
 17448  1ED5                     __ptext115:	
 17449 ;; *************** function _CC2500_InitPATable *****************
 17450 ;; Defined at:
 17451 ;;		line 174 in file "../src/CC2500_B1.c"
 17452 ;; Parameters:    Size  Location     Type
 17453 ;;		None
 17454 ;; Auto vars:     Size  Location     Type
 17455 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17456 ;;  temp            1    6[BANK0 ] unsigned char 
 17457 ;; Return value:  Size  Location     Type
 17458 ;;		None               void
 17459 ;; Registers used:
 17460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17461 ;; Tracked objects:
 17462 ;;		On entry : 0/0
 17463 ;;		On exit  : 0/0
 17464 ;;		Unchanged: 0/0
 17465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17469 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17470 ;;Total ram usage:        3 bytes
 17471 ;; Hardware stack levels used:    1
 17472 ;; Hardware stack levels required when called:    7
 17473 ;; This function calls:
 17474 ;;		_CC2500_WriteREG
 17475 ;; This function is called by:
 17476 ;;		_CC2500_PowerOnInitial
 17477 ;; This function uses a non-reentrant model
 17478 ;;
 17479                           
 17480                           
 17481                           ;psect for function _CC2500_InitPATable
 17482  1ED5                     _CC2500_InitPATable:	
 17483                           
 17484                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17485                           ;CC2500_B1.c: 176: unsigned char temp;
 17486                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17487                           
 17488                           ;incstack = 0
 17489                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17490  1ED5  0020               	movlb	0	; select bank0
 17491  1ED6  01A7               	clrf	CC2500_InitPATable@loop_d
 17492  1ED7                     L11:	
 17493  1ED7  3008               	movlw	8
 17494  1ED8  0227               	subwf	CC2500_InitPATable@loop_d,w
 17495  1ED9  1803               	btfsc	3,0
 17496  1EDA  0008               	return
 17497                           
 17498                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17499  1EDB  0827               	movf	CC2500_InitPATable@loop_d,w
 17500  1EDC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17501  1EDD  0084               	movwf	4
 17502  1EDE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17503  1EDF  1803               	skipnc
 17504  1EE0  3E01               	addlw	1
 17505  1EE1  0085               	movwf	5
 17506  1EE2  0800               	movf	0,w	;code access
 17507  1EE3  00A5               	movwf	??_CC2500_InitPATable
 17508  1EE4  0825               	movf	??_CC2500_InitPATable,w
 17509  1EE5  00A6               	movwf	CC2500_InitPATable@temp
 17510                           
 17511                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17512  1EE6  0826               	movf	CC2500_InitPATable@temp,w
 17513  1EE7  00A5               	movwf	??_CC2500_InitPATable
 17514  1EE8  0825               	movf	??_CC2500_InitPATable,w
 17515  1EE9  00A2               	movwf	CC2500_WriteREG@value
 17516  1EEA  303E               	movlw	62
 17517  1EEB  319F  2754  319E   	fcall	_CC2500_WriteREG
 17518  1EEE  3001               	movlw	1
 17519  1EEF  0020               	movlb	0	; select bank0
 17520  1EF0  00A5               	movwf	??_CC2500_InitPATable
 17521  1EF1  0825               	movf	??_CC2500_InitPATable,w
 17522  1EF2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17523  1EF3  2ED7               	goto	L11
 17524  1EF4                     __end_of_CC2500_InitPATable:	
 17525                           
 17526                           	psect	text116
 17527  1F54                     __ptext116:	
 17528 ;; *************** function _CC2500_WriteREG *****************
 17529 ;; Defined at:
 17530 ;;		line 251 in file "../src/CC2500_B1.c"
 17531 ;; Parameters:    Size  Location     Type
 17532 ;;  w_addr          1    wreg     unsigned char 
 17533 ;;  value           1    2[BANK0 ] unsigned char 
 17534 ;; Auto vars:     Size  Location     Type
 17535 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17536 ;; Return value:  Size  Location     Type
 17537 ;;		None               void
 17538 ;; Registers used:
 17539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17540 ;; Tracked objects:
 17541 ;;		On entry : 0/0
 17542 ;;		On exit  : 0/0
 17543 ;;		Unchanged: 0/0
 17544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17545 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17549 ;;Total ram usage:        3 bytes
 17550 ;; Hardware stack levels used:    1
 17551 ;; Hardware stack levels required when called:    6
 17552 ;; This function calls:
 17553 ;;		_CC2500_WriteByte
 17554 ;;		_Timeout_Counter
 17555 ;;		_set_TimeoutCleared
 17556 ;; This function is called by:
 17557 ;;		_CC2500_InitSetREG
 17558 ;;		_CC2500_InitPATable
 17559 ;; This function uses a non-reentrant model
 17560 ;;
 17561                           
 17562                           
 17563                           ;psect for function _CC2500_WriteREG
 17564  1F54                     _CC2500_WriteREG:	
 17565                           
 17566                           ;incstack = 0
 17567                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17568                           ;CC2500_WriteREG@w_addr stored from wreg
 17569  1F54  0020               	movlb	0	; select bank0
 17570  1F55  00A4               	movwf	CC2500_WriteREG@w_addr
 17571                           
 17572                           ;CC2500_B1.c: 252: RC4 = 0;
 17573  1F56  120E               	bcf	14,4	;volatile
 17574                           
 17575                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17576  1F57  0824               	movf	CC2500_WriteREG@w_addr,w
 17577  1F58  00A3               	movwf	??_CC2500_WriteREG
 17578  1F59  0823               	movf	??_CC2500_WriteREG,w
 17579  1F5A  00FB               	movwf	_SPI0Buffer
 17580                           
 17581                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17582  1F5B  2F5F               	goto	l6823
 17583  1F5C                     l6821:	
 17584                           
 17585                           ;CC2500_B1.c: 255: Timeout_Counter();
 17586  1F5C  319D  259C  319F   	fcall	_Timeout_Counter
 17587  1F5F                     l6823:	
 17588  1F5F  0020               	movlb	0	; select bank0
 17589  1F60  1D0E               	btfss	14,2	;volatile
 17590  1F61  2F65               	goto	l6827
 17591  1F62  0021               	movlb	1	; select bank1
 17592  1F63  1D2C               	btfss	(_myMain^(0+128)+12),2
 17593  1F64  2F5C               	goto	l6821
 17594  1F65                     l6827:	
 17595                           
 17596                           ;CC2500_B1.c: 256: };
 17597                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17598  1F65  319B  2329  319F   	fcall	_set_TimeoutCleared
 17599                           
 17600                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17601  1F68  319D  254C  319F   	fcall	_CC2500_WriteByte
 17602                           
 17603                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17604  1F6B  0020               	movlb	0	; select bank0
 17605  1F6C  0822               	movf	CC2500_WriteREG@value,w
 17606  1F6D  00A3               	movwf	??_CC2500_WriteREG
 17607  1F6E  0823               	movf	??_CC2500_WriteREG,w
 17608  1F6F  00FB               	movwf	_SPI0Buffer
 17609                           
 17610                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17611  1F70  319D  254C         	fcall	_CC2500_WriteByte
 17612                           
 17613                           ;CC2500_B1.c: 262: RC4 = 1;
 17614  1F72  0020               	movlb	0	; select bank0
 17615  1F73  160E               	bsf	14,4	;volatile
 17616  1F74  0008               	return
 17617  1F75                     __end_of_CC2500_WriteREG:	
 17618                           
 17619                           	psect	text117
 17620  1BA4                     __ptext117:	
 17621 ;; *************** function _CC2500_FrequencyCabr *****************
 17622 ;; Defined at:
 17623 ;;		line 201 in file "../src/CC2500_B1.c"
 17624 ;; Parameters:    Size  Location     Type
 17625 ;;		None
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;		None
 17628 ;; Return value:  Size  Location     Type
 17629 ;;		None               void
 17630 ;; Registers used:
 17631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;Total ram usage:        0 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    7
 17644 ;; This function calls:
 17645 ;;		_CC2500_WriteCommand
 17646 ;;		_DelayTime_1us
 17647 ;; This function is called by:
 17648 ;;		_CC2500_PowerOnInitial
 17649 ;; This function uses a non-reentrant model
 17650 ;;
 17651                           
 17652                           
 17653                           ;psect for function _CC2500_FrequencyCabr
 17654  1BA4                     _CC2500_FrequencyCabr:	
 17655                           
 17656                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17657                           
 17658                           ;incstack = 0
 17659                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17660  1BA4  3033               	movlw	51
 17661  1BA5  319E  2634  319B   	fcall	_CC2500_WriteCommand
 17662                           
 17663                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17664  1BA8  30E8               	movlw	232
 17665  1BA9  0020               	movlb	0	; select bank0
 17666  1BAA  00A0               	movwf	DelayTime_1us@count
 17667  1BAB  3003               	movlw	3
 17668  1BAC  00A1               	movwf	DelayTime_1us@count+1
 17669  1BAD  3190  2085         	fcall	_DelayTime_1us
 17670  1BAF  0008               	return
 17671  1BB0                     __end_of_CC2500_FrequencyCabr:	
 17672                           
 17673                           	psect	text118
 17674  1085                     __ptext118:	
 17675 ;; *************** function _DelayTime_1us *****************
 17676 ;; Defined at:
 17677 ;;		line 320 in file "../src/CC2500_B1.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  count           2    0[BANK0 ] int 
 17680 ;; Auto vars:     Size  Location     Type
 17681 ;;  j               2    4[BANK0 ] unsigned int 
 17682 ;;  i               2    2[BANK0 ] unsigned int 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;		None               void
 17685 ;; Registers used:
 17686 ;;		wreg, status,2
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17692 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;Total ram usage:        6 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    5
 17699 ;; This function calls:
 17700 ;;		Nothing
 17701 ;; This function is called by:
 17702 ;;		_CC2500_PowerRST
 17703 ;;		_CC2500_FrequencyCabr
 17704 ;; This function uses a non-reentrant model
 17705 ;;
 17706                           
 17707                           
 17708                           ;psect for function _DelayTime_1us
 17709  1085                     _DelayTime_1us:	
 17710                           
 17711                           ;CC2500_B1.c: 321: unsigned int i, j;
 17712                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17713                           
 17714                           ;incstack = 0
 17715                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17716  1085  3001               	movlw	1
 17717  1086  0020               	movlb	0	; select bank0
 17718  1087  00A2               	movwf	DelayTime_1us@i
 17719  1088  3000               	movlw	0
 17720  1089  00A3               	movwf	DelayTime_1us@i+1
 17721  108A                     l372:	
 17722  108A  0821               	movf	DelayTime_1us@count+1,w
 17723  108B  0223               	subwf	DelayTime_1us@i+1,w
 17724  108C  1D03               	skipz
 17725  108D  2890               	goto	u5945
 17726  108E  0820               	movf	DelayTime_1us@count,w
 17727  108F  0222               	subwf	DelayTime_1us@i,w
 17728  1090                     u5945:	
 17729  1090  1803               	btfsc	3,0
 17730  1091  0008               	return
 17731                           
 17732                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17733  1092  01A4               	clrf	DelayTime_1us@j
 17734  1093  01A5               	clrf	DelayTime_1us@j+1
 17735  1094  3000               	movlw	0
 17736  1095  0225               	subwf	DelayTime_1us@j+1,w
 17737  1096  3002               	movlw	2
 17738  1097  1903               	skipnz
 17739  1098  0224               	subwf	DelayTime_1us@j,w
 17740  1099  1803               	btfsc	3,0
 17741  109A  28A6               	goto	l6815
 17742  109B                     l6813:	
 17743  109B  3001               	movlw	1
 17744  109C  07A4               	addwf	DelayTime_1us@j,f
 17745  109D  3000               	movlw	0
 17746  109E  3DA5               	addwfc	DelayTime_1us@j+1,f
 17747  109F  3000               	movlw	0
 17748  10A0  0225               	subwf	DelayTime_1us@j+1,w
 17749  10A1  3002               	movlw	2
 17750  10A2  1903               	skipnz
 17751  10A3  0224               	subwf	DelayTime_1us@j,w
 17752  10A4  1C03               	skipc
 17753  10A5  289B               	goto	l6813
 17754  10A6                     l6815:	
 17755  10A6  3001               	movlw	1
 17756  10A7  07A2               	addwf	DelayTime_1us@i,f
 17757  10A8  3000               	movlw	0
 17758  10A9  3DA3               	addwfc	DelayTime_1us@i+1,f
 17759  10AA  288A               	goto	l372
 17760  10AB                     __end_of_DelayTime_1us:	
 17761                           
 17762                           	psect	text119
 17763  1B1D                     __ptext119:	
 17764 ;; *************** function _CC2500_ClearTXFIFO *****************
 17765 ;; Defined at:
 17766 ;;		line 187 in file "../src/CC2500_B1.c"
 17767 ;; Parameters:    Size  Location     Type
 17768 ;;		None
 17769 ;; Auto vars:     Size  Location     Type
 17770 ;;		None
 17771 ;; Return value:  Size  Location     Type
 17772 ;;		None               void
 17773 ;; Registers used:
 17774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17775 ;; Tracked objects:
 17776 ;;		On entry : 0/0
 17777 ;;		On exit  : 0/0
 17778 ;;		Unchanged: 0/0
 17779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;Total ram usage:        0 bytes
 17785 ;; Hardware stack levels used:    1
 17786 ;; Hardware stack levels required when called:    7
 17787 ;; This function calls:
 17788 ;;		_CC2500_WriteCommand
 17789 ;; This function is called by:
 17790 ;;		_CC2500_PowerOnInitial
 17791 ;; This function uses a non-reentrant model
 17792 ;;
 17793                           
 17794                           
 17795                           ;psect for function _CC2500_ClearTXFIFO
 17796  1B1D                     _CC2500_ClearTXFIFO:	
 17797                           
 17798                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17799                           
 17800                           ;incstack = 0
 17801                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17802  1B1D  303B               	movlw	59
 17803  1B1E  319E  2634         	fcall	_CC2500_WriteCommand
 17804  1B20  0008               	return
 17805  1B21                     __end_of_CC2500_ClearTXFIFO:	
 17806                           
 17807                           	psect	text120
 17808  1B19                     __ptext120:	
 17809 ;; *************** function _CC2500_ClearRXFIFO *****************
 17810 ;; Defined at:
 17811 ;;		line 194 in file "../src/CC2500_B1.c"
 17812 ;; Parameters:    Size  Location     Type
 17813 ;;		None
 17814 ;; Auto vars:     Size  Location     Type
 17815 ;;		None
 17816 ;; Return value:  Size  Location     Type
 17817 ;;		None               void
 17818 ;; Registers used:
 17819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17820 ;; Tracked objects:
 17821 ;;		On entry : 0/0
 17822 ;;		On exit  : 0/0
 17823 ;;		Unchanged: 0/0
 17824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17829 ;;Total ram usage:        0 bytes
 17830 ;; Hardware stack levels used:    1
 17831 ;; Hardware stack levels required when called:    7
 17832 ;; This function calls:
 17833 ;;		_CC2500_WriteCommand
 17834 ;; This function is called by:
 17835 ;;		_CC2500_PowerOnInitial
 17836 ;; This function uses a non-reentrant model
 17837 ;;
 17838                           
 17839                           
 17840                           ;psect for function _CC2500_ClearRXFIFO
 17841  1B19                     _CC2500_ClearRXFIFO:	
 17842                           
 17843                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17844                           
 17845                           ;incstack = 0
 17846                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17847  1B19  303A               	movlw	58
 17848  1B1A  319E  2634         	fcall	_CC2500_WriteCommand
 17849  1B1C  0008               	return
 17850  1B1D                     __end_of_CC2500_ClearRXFIFO:	
 17851                           
 17852                           	psect	text121
 17853  1E34                     __ptext121:	
 17854 ;; *************** function _CC2500_WriteCommand *****************
 17855 ;; Defined at:
 17856 ;;		line 285 in file "../src/CC2500_B1.c"
 17857 ;; Parameters:    Size  Location     Type
 17858 ;;  command         1    wreg     unsigned char 
 17859 ;; Auto vars:     Size  Location     Type
 17860 ;;  command         1    3[BANK0 ] unsigned char 
 17861 ;; Return value:  Size  Location     Type
 17862 ;;		None               void
 17863 ;; Registers used:
 17864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17874 ;;Total ram usage:        2 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; Hardware stack levels required when called:    6
 17877 ;; This function calls:
 17878 ;;		_CC2500_WriteByte
 17879 ;;		_Timeout_Counter
 17880 ;;		_set_TimeoutCleared
 17881 ;; This function is called by:
 17882 ;;		_CC2500_TxData
 17883 ;;		_CC2500_ClearTXFIFO
 17884 ;;		_CC2500_ClearRXFIFO
 17885 ;;		_CC2500_FrequencyCabr
 17886 ;;		_CC2500_SIDLEMode
 17887 ;;		_setRF_Main
 17888 ;;		_RF_RxDisable
 17889 ;; This function uses a non-reentrant model
 17890 ;;
 17891                           
 17892                           
 17893                           ;psect for function _CC2500_WriteCommand
 17894  1E34                     _CC2500_WriteCommand:	
 17895                           
 17896                           ;incstack = 0
 17897                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17898                           ;CC2500_WriteCommand@command stored from wreg
 17899  1E34  0020               	movlb	0	; select bank0
 17900  1E35  00A3               	movwf	CC2500_WriteCommand@command
 17901                           
 17902                           ;CC2500_B1.c: 286: RC4 = 0;
 17903  1E36  120E               	bcf	14,4	;volatile
 17904                           
 17905                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17906  1E37  0823               	movf	CC2500_WriteCommand@command,w
 17907  1E38  00A2               	movwf	??_CC2500_WriteCommand
 17908  1E39  0822               	movf	??_CC2500_WriteCommand,w
 17909  1E3A  00FB               	movwf	_SPI0Buffer
 17910                           
 17911                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 17912  1E3B  2E3F               	goto	l6519
 17913  1E3C                     l6517:	
 17914                           
 17915                           ;CC2500_B1.c: 290: Timeout_Counter();
 17916  1E3C  319D  259C  319E   	fcall	_Timeout_Counter
 17917  1E3F                     l6519:	
 17918  1E3F  0020               	movlb	0	; select bank0
 17919  1E40  1D0E               	btfss	14,2	;volatile
 17920  1E41  2E45               	goto	l6523
 17921  1E42  0021               	movlb	1	; select bank1
 17922  1E43  1D2C               	btfss	(_myMain^(0+128)+12),2
 17923  1E44  2E3C               	goto	l6517
 17924  1E45                     l6523:	
 17925                           
 17926                           ;CC2500_B1.c: 291: };
 17927                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17928  1E45  319B  2329  319E   	fcall	_set_TimeoutCleared
 17929                           
 17930                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17931  1E48  319D  254C         	fcall	_CC2500_WriteByte
 17932                           
 17933                           ;CC2500_B1.c: 295: RC4 = 1;
 17934  1E4A  0020               	movlb	0	; select bank0
 17935  1E4B  160E               	bsf	14,4	;volatile
 17936  1E4C  0008               	return
 17937  1E4D                     __end_of_CC2500_WriteCommand:	
 17938                           
 17939                           	psect	text122
 17940  1B29                     __ptext122:	
 17941 ;; *************** function _set_TimeoutCleared *****************
 17942 ;; Defined at:
 17943 ;;		line 283 in file "../src/main_B1.c"
 17944 ;; Parameters:    Size  Location     Type
 17945 ;;		None
 17946 ;; Auto vars:     Size  Location     Type
 17947 ;;		None
 17948 ;; Return value:  Size  Location     Type
 17949 ;;		None               void
 17950 ;; Registers used:
 17951 ;;		status,2
 17952 ;; Tracked objects:
 17953 ;;		On entry : 0/0
 17954 ;;		On exit  : 0/0
 17955 ;;		Unchanged: 0/0
 17956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;Total ram usage:        0 bytes
 17962 ;; Hardware stack levels used:    1
 17963 ;; Hardware stack levels required when called:    5
 17964 ;; This function calls:
 17965 ;;		Nothing
 17966 ;; This function is called by:
 17967 ;;		_CC2500_TxData
 17968 ;;		_CC2500_RxData
 17969 ;;		_CC2500_PowerRST
 17970 ;;		_CC2500_WriteREG
 17971 ;;		_CC2500_WriteCommand
 17972 ;;		_CC2500_ReadStatus
 17973 ;;		_getAD
 17974 ;;		_TouchPower
 17975 ;;		_CC2500_ReadREG
 17976 ;; This function uses a non-reentrant model
 17977 ;;
 17978                           
 17979                           
 17980                           ;psect for function _set_TimeoutCleared
 17981  1B29                     _set_TimeoutCleared:	
 17982                           
 17983                           ;main_B1.c: 284: myMain.Timeout = 0;
 17984                           
 17985                           ;incstack = 0
 17986                           ; Regs used in _set_TimeoutCleared: [status,2]
 17987  1B29  0021               	movlb	1	; select bank1
 17988  1B2A  112C               	bcf	(_myMain^(0+128)+12),2
 17989                           
 17990                           ;main_B1.c: 285: myMain.Timeout_Counter = 0;
 17991  1B2B  01AD               	clrf	(_myMain^(0+128)+13)
 17992  1B2C  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17993  1B2D  0008               	return
 17994  1B2E                     __end_of_set_TimeoutCleared:	
 17995                           
 17996                           	psect	text123
 17997  1D9C                     __ptext123:	
 17998 ;; *************** function _Timeout_Counter *****************
 17999 ;; Defined at:
 18000 ;;		line 274 in file "../src/main_B1.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;		None
 18003 ;; Auto vars:     Size  Location     Type
 18004 ;;		None
 18005 ;; Return value:  Size  Location     Type
 18006 ;;		None               void
 18007 ;; Registers used:
 18008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18009 ;; Tracked objects:
 18010 ;;		On entry : 0/0
 18011 ;;		On exit  : 0/0
 18012 ;;		Unchanged: 0/0
 18013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;Total ram usage:        0 bytes
 18019 ;; Hardware stack levels used:    1
 18020 ;; Hardware stack levels required when called:    5
 18021 ;; This function calls:
 18022 ;;		Nothing
 18023 ;; This function is called by:
 18024 ;;		_CC2500_TxData
 18025 ;;		_CC2500_RxData
 18026 ;;		_CC2500_PowerRST
 18027 ;;		_CC2500_WriteREG
 18028 ;;		_CC2500_WriteCommand
 18029 ;;		_CC2500_ReadStatus
 18030 ;;		_getAD
 18031 ;;		_TouchPower
 18032 ;;		_CC2500_ReadREG
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036                           
 18037                           ;psect for function _Timeout_Counter
 18038  1D9C                     _Timeout_Counter:	
 18039                           
 18040                           ;main_B1.c: 275: myMain.Timeout_Counter++;
 18041                           
 18042                           ;incstack = 0
 18043                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18044  1D9C  3001               	movlw	1
 18045  1D9D  0021               	movlb	1	; select bank1
 18046  1D9E  07AD               	addwf	(_myMain^(0+128)+13),f
 18047  1D9F  3000               	movlw	0
 18048  1DA0  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 18049                           
 18050                           ;main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 18051  1DA1  300D               	movlw	13
 18052  1DA2  3EA0               	addlw	_myMain& (0+255)
 18053  1DA3  0086               	movwf	6
 18054  1DA4  0187               	clrf	7
 18055  1DA5  3F40               	moviw [0]fsr1
 18056  1DA6  3A10               	xorlw	16
 18057  1DA7  1D03               	skipz
 18058  1DA8  2DAB               	goto	u5305
 18059  1DA9  3F41               	moviw [1]fsr1
 18060  1DAA  3A27               	xorlw	39
 18061  1DAB                     u5305:	
 18062  1DAB  1D03               	skipz
 18063  1DAC  0008               	return
 18064                           
 18065                           ;main_B1.c: 277: myMain.Timeout_Counter = 0;
 18066  1DAD  01AD               	clrf	(_myMain^(0+128)+13)
 18067  1DAE  01AE               	clrf	((_myMain+1)^(0+128)+13)
 18068                           
 18069                           ;main_B1.c: 278: myMain.Timeout = 1;
 18070  1DAF  152C               	bsf	(_myMain^(0+128)+12),2
 18071  1DB0  0008               	return
 18072  1DB1                     __end_of_Timeout_Counter:	
 18073                           
 18074                           	psect	text124
 18075  1D4C                     __ptext124:	
 18076 ;; *************** function _CC2500_WriteByte *****************
 18077 ;; Defined at:
 18078 ;;		line 219 in file "../src/CC2500_B1.c"
 18079 ;; Parameters:    Size  Location     Type
 18080 ;;		None
 18081 ;; Auto vars:     Size  Location     Type
 18082 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18083 ;; Return value:  Size  Location     Type
 18084 ;;		None               void
 18085 ;; Registers used:
 18086 ;;		wreg, status,2, status,0
 18087 ;; Tracked objects:
 18088 ;;		On entry : 0/0
 18089 ;;		On exit  : 0/0
 18090 ;;		Unchanged: 0/0
 18091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18095 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18096 ;;Total ram usage:        2 bytes
 18097 ;; Hardware stack levels used:    1
 18098 ;; Hardware stack levels required when called:    5
 18099 ;; This function calls:
 18100 ;;		Nothing
 18101 ;; This function is called by:
 18102 ;;		_CC2500_TxData
 18103 ;;		_CC2500_RxData
 18104 ;;		_CC2500_PowerRST
 18105 ;;		_CC2500_WriteREG
 18106 ;;		_CC2500_WriteCommand
 18107 ;;		_CC2500_ReadStatus
 18108 ;;		_CC2500_ReadREG
 18109 ;; This function uses a non-reentrant model
 18110 ;;
 18111                           
 18112                           
 18113                           ;psect for function _CC2500_WriteByte
 18114  1D4C                     _CC2500_WriteByte:	
 18115                           
 18116                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18117                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18118                           
 18119                           ;incstack = 0
 18120                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18121  1D4C  0020               	movlb	0	; select bank0
 18122  1D4D  01A1               	clrf	CC2500_WriteByte@loop_a
 18123  1D4E                     L12:	
 18124  1D4E  3008               	movlw	8
 18125  1D4F  0221               	subwf	CC2500_WriteByte@loop_a,w
 18126  1D50  1803               	btfsc	3,0
 18127  1D51  0008               	return
 18128                           
 18129                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18130  1D52  1FFB               	btfss	_SPI0Buffer,7
 18131  1D53  2D56               	goto	l328
 18132                           
 18133                           ;CC2500_B1.c: 223: RC0 = 1;
 18134  1D54  140E               	bsf	14,0	;volatile
 18135  1D55  2D57               	goto	l329
 18136  1D56                     l328:	
 18137                           
 18138                           ;CC2500_B1.c: 224: else
 18139                           ;CC2500_B1.c: 225: RC0 = 0;
 18140  1D56  100E               	bcf	14,0	;volatile
 18141  1D57                     l329:	
 18142                           
 18143                           ;CC2500_B1.c: 226: RC1 = 1;
 18144  1D57  148E               	bsf	14,1	;volatile
 18145                           
 18146                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18147  1D58  1003               	clrc
 18148  1D59  0DFB               	rlf	_SPI0Buffer,f
 18149                           
 18150                           ;CC2500_B1.c: 228: RC1 = 0;
 18151  1D5A  108E               	bcf	14,1	;volatile
 18152  1D5B  3001               	movlw	1
 18153  1D5C  00A0               	movwf	??_CC2500_WriteByte
 18154  1D5D  0820               	movf	??_CC2500_WriteByte,w
 18155  1D5E  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18156  1D5F  2D4E               	goto	L12
 18157  1D60                     __end_of_CC2500_WriteByte:	
 18158                           
 18159                           	psect	text125
 18160  1459                     __ptext125:	
 18161 ;; *************** function _Buzzer_Main *****************
 18162 ;; Defined at:
 18163 ;;		line 46 in file "../src/Buzzer_B1.c"
 18164 ;; Parameters:    Size  Location     Type
 18165 ;;		None
 18166 ;; Auto vars:     Size  Location     Type
 18167 ;;		None
 18168 ;; Return value:  Size  Location     Type
 18169 ;;		None               void
 18170 ;; Registers used:
 18171 ;;		wreg, status,2, status,0
 18172 ;; Tracked objects:
 18173 ;;		On entry : 0/0
 18174 ;;		On exit  : 0/0
 18175 ;;		Unchanged: 0/0
 18176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18181 ;;Total ram usage:        1 bytes
 18182 ;; Hardware stack levels used:    1
 18183 ;; Hardware stack levels required when called:    5
 18184 ;; This function calls:
 18185 ;;		Nothing
 18186 ;; This function is called by:
 18187 ;;		_main
 18188 ;; This function uses a non-reentrant model
 18189 ;;
 18190                           
 18191                           
 18192                           ;psect for function _Buzzer_Main
 18193  1459                     _Buzzer_Main:	
 18194                           
 18195                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18196                           
 18197                           ;incstack = 0
 18198                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18199  1459  0021               	movlb	1	; select bank1
 18200  145A  1CAF               	btfss	_Buz1^(0+128),1
 18201  145B  0008               	return
 18202                           
 18203                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18204  145C  3001               	movlw	1
 18205  145D  07B0               	addwf	(_Buz1^(0+128)+1),f
 18206  145E  3000               	movlw	0
 18207  145F  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 18208                           
 18209                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18210  1460  0836               	movf	((_Buz1+1)^(0+128)+6),w
 18211  1461  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 18212  1462  1D03               	skipz
 18213  1463  2C66               	goto	u7615
 18214  1464  0835               	movf	(_Buz1^(0+128)+6),w
 18215  1465  0230               	subwf	(_Buz1^(0+128)+1),w
 18216  1466                     u7615:	
 18217  1466  1C03               	skipc
 18218  1467  0008               	return
 18219                           
 18220                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18221  1468  01B0               	clrf	(_Buz1^(0+128)+1)
 18222  1469  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 18223                           
 18224                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18225  146A  12AF               	bcf	_Buz1^(0+128),5
 18226  146B  0020               	movlb	0	; select bank0
 18227  146C  1D8D               	btfss	13,3	;volatile
 18228  146D  2C70               	goto	l7833
 18229  146E  0021               	movlb	1	; select bank1
 18230  146F  16AF               	bsf	_Buz1^(0+128),5
 18231  1470                     l7833:	
 18232                           
 18233                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18234  1470  0021               	movlb	1	; select bank1
 18235  1471  1AAF               	btfsc	_Buz1^(0+128),5
 18236  1472  2C9C               	goto	l106
 18237                           
 18238                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18239  1473  08B2               	movf	(_Buz1^(0+128)+3),f
 18240  1474  1D03               	skipz
 18241  1475  2C98               	goto	l107
 18242                           
 18243                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18244  1476  1DAF               	btfss	_Buz1^(0+128),3
 18245  1477  2C86               	goto	l108
 18246                           
 18247                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18248  1478  11AF               	bcf	_Buz1^(0+128),3
 18249                           
 18250                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18251  1479  0833               	movf	(_Buz1^(0+128)+4),w
 18252  147A  0020               	movlb	0	; select bank0
 18253  147B  00A0               	movwf	??_Buzzer_Main
 18254  147C  0820               	movf	??_Buzzer_Main,w
 18255  147D  0021               	movlb	1	; select bank1
 18256  147E  00B2               	movwf	(_Buz1^(0+128)+3)
 18257                           
 18258                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18259  147F  0838               	movf	((_Buz1+1)^(0+128)+8),w
 18260  1480  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18261  1481  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18262  1482  0837               	movf	(_Buz1^(0+128)+8),w
 18263  1483  01B5               	clrf	(_Buz1^(0+128)+6)
 18264  1484  07B5               	addwf	(_Buz1^(0+128)+6),f
 18265                           
 18266                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18267  1485  0008               	return
 18268  1486                     l108:	
 18269  1486  1E2F               	btfss	_Buz1^(0+128),4
 18270  1487  2C96               	goto	l110
 18271                           
 18272                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18273  1488  122F               	bcf	_Buz1^(0+128),4
 18274                           
 18275                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18276  1489  0834               	movf	(_Buz1^(0+128)+5),w
 18277  148A  0020               	movlb	0	; select bank0
 18278  148B  00A0               	movwf	??_Buzzer_Main
 18279  148C  0820               	movf	??_Buzzer_Main,w
 18280  148D  0021               	movlb	1	; select bank1
 18281  148E  00B2               	movwf	(_Buz1^(0+128)+3)
 18282                           
 18283                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18284  148F  083A               	movf	((_Buz1+1)^(0+128)+10),w
 18285  1490  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18286  1491  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18287  1492  0839               	movf	(_Buz1^(0+128)+10),w
 18288  1493  01B5               	clrf	(_Buz1^(0+128)+6)
 18289  1494  07B5               	addwf	(_Buz1^(0+128)+6),f
 18290                           
 18291                           ;Buzzer_B1.c: 62: } else {
 18292  1495  0008               	return
 18293  1496                     l110:	
 18294                           
 18295                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18296  1496  10AF               	bcf	_Buz1^(0+128),1
 18297                           
 18298                           ;Buzzer_B1.c: 64: }
 18299                           ;Buzzer_B1.c: 65: } else {
 18300  1497  0008               	return
 18301  1498                     l107:	
 18302                           
 18303                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18304  1498  16AF               	bsf	_Buz1^(0+128),5
 18305                           
 18306                           ;Buzzer_B1.c: 68: RB3 = 1;
 18307  1499  0020               	movlb	0	; select bank0
 18308  149A  158D               	bsf	13,3	;volatile
 18309                           
 18310                           ;Buzzer_B1.c: 69: }
 18311                           ;Buzzer_B1.c: 70: } else {
 18312  149B  0008               	return
 18313  149C                     l106:	
 18314                           
 18315                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18316  149C  12AF               	bcf	_Buz1^(0+128),5
 18317                           
 18318                           ;Buzzer_B1.c: 73: RB3 = 0;
 18319  149D  0020               	movlb	0	; select bank0
 18320  149E  118D               	bcf	13,3	;volatile
 18321                           
 18322                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18323  149F  3001               	movlw	1
 18324  14A0  0021               	movlb	1	; select bank1
 18325  14A1  02B2               	subwf	(_Buz1^(0+128)+3),f
 18326  14A2  0008               	return
 18327  14A3                     __end_of_Buzzer_Main:	
 18328                           
 18329                           	psect	text126
 18330  1B0D                     __ptext126:	
 18331 ;; *************** function _Buzzer_Initialization *****************
 18332 ;; Defined at:
 18333 ;;		line 11 in file "../src/Buzzer_B1.c"
 18334 ;; Parameters:    Size  Location     Type
 18335 ;;		None
 18336 ;; Auto vars:     Size  Location     Type
 18337 ;;		None
 18338 ;; Return value:  Size  Location     Type
 18339 ;;		None               void
 18340 ;; Registers used:
 18341 ;;		None
 18342 ;; Tracked objects:
 18343 ;;		On entry : 0/0
 18344 ;;		On exit  : 0/0
 18345 ;;		Unchanged: 0/0
 18346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18351 ;;Total ram usage:        0 bytes
 18352 ;; Hardware stack levels used:    1
 18353 ;; Hardware stack levels required when called:    5
 18354 ;; This function calls:
 18355 ;;		Nothing
 18356 ;; This function is called by:
 18357 ;;		_main
 18358 ;; This function uses a non-reentrant model
 18359 ;;
 18360                           
 18361                           
 18362                           ;psect for function _Buzzer_Initialization
 18363  1B0D                     _Buzzer_Initialization:	
 18364                           
 18365                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18366                           
 18367                           ;incstack = 0
 18368                           ; Regs used in _Buzzer_Initialization: []
 18369  1B0D  0021               	movlb	1	; select bank1
 18370  1B0E  142F               	bsf	_Buz1^(0+128),0
 18371  1B0F  0008               	return
 18372  1B10                     __end_of_Buzzer_Initialization:	
 18373                           
 18374                           	psect	intentry
 18375  0004                     __pintentry:	
 18376 ;; *************** function _ISR *****************
 18377 ;; Defined at:
 18378 ;;		line 107 in file "../src/MCU_B1.c"
 18379 ;; Parameters:    Size  Location     Type
 18380 ;;		None
 18381 ;; Auto vars:     Size  Location     Type
 18382 ;;		None
 18383 ;; Return value:  Size  Location     Type
 18384 ;;		None               void
 18385 ;; Registers used:
 18386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18387 ;; Tracked objects:
 18388 ;;		On entry : 0/0
 18389 ;;		On exit  : 0/0
 18390 ;;		Unchanged: 0/0
 18391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;Total ram usage:        1 bytes
 18397 ;; Hardware stack levels used:    1
 18398 ;; Hardware stack levels required when called:    4
 18399 ;; This function calls:
 18400 ;;		_IOC_ISR
 18401 ;;		_TMR1_ISR
 18402 ;; This function is called by:
 18403 ;;		Interrupt level 1
 18404 ;; This function uses a non-reentrant model
 18405 ;;
 18406                           
 18407  0004                     _ISR:	
 18408                           
 18409                           ;incstack = 0
 18410                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18411  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18412  0005  3180               	pagesel	$
 18413  0006  0020               	movlb	0	; select bank0
 18414  0007  087F               	movf	127,w
 18415  0008  00F7               	movwf	??_ISR
 18416                           
 18417                           ;MCU_B1.c: 109: IOC_ISR();
 18418  0009  319C  2413  3180   	fcall	_IOC_ISR
 18419                           
 18420                           ;MCU_B1.c: 111: ;;
 18421                           ;MCU_B1.c: 113: TMR1_ISR();
 18422  000C  3190  20D2         	fcall	_TMR1_ISR
 18423  000E  0877               	movf	??_ISR,w
 18424  000F  0020               	movlb	0	; select bank0
 18425  0010  00FF               	movwf	127
 18426  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18427  0012  0009               	retfie
 18428  0013                     __end_of_ISR:	
 18429                           
 18430                           	psect	text128
 18431  10D2                     __ptext128:	
 18432 ;; *************** function _TMR1_ISR *****************
 18433 ;; Defined at:
 18434 ;;		line 209 in file "../src/MCU_B1.c"
 18435 ;; Parameters:    Size  Location     Type
 18436 ;;		None
 18437 ;; Auto vars:     Size  Location     Type
 18438 ;;		None
 18439 ;; Return value:  Size  Location     Type
 18440 ;;		None               void
 18441 ;; Registers used:
 18442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18443 ;; Tracked objects:
 18444 ;;		On entry : 0/0
 18445 ;;		On exit  : 0/0
 18446 ;;		Unchanged: 0/0
 18447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18452 ;;Total ram usage:        0 bytes
 18453 ;; Hardware stack levels used:    1
 18454 ;; Hardware stack levels required when called:    2
 18455 ;; This function calls:
 18456 ;;		_setDimmerLights_IntrControl
 18457 ;; This function is called by:
 18458 ;;		_ISR
 18459 ;; This function uses a non-reentrant model
 18460 ;;
 18461                           
 18462                           
 18463                           ;psect for function _TMR1_ISR
 18464  10D2                     _TMR1_ISR:	
 18465                           
 18466                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18467                           
 18468                           ;incstack = 0
 18469                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18470  10D2  0021               	movlb	1	; select bank1
 18471  10D3  1C11               	btfss	17,0	;volatile
 18472  10D4  0008               	return
 18473  10D5  0020               	movlb	0	; select bank0
 18474  10D6  1C11               	btfss	17,0	;volatile
 18475  10D7  0008               	return
 18476                           
 18477                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18478  10D8  30FA               	movlw	250
 18479  10D9  0097               	movwf	23	;volatile
 18480                           
 18481                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18482  10DA  3038               	movlw	56
 18483  10DB  0096               	movwf	22	;volatile
 18484                           
 18485                           ;MCU_B1.c: 214: TMR1IF = 0;
 18486  10DC  1011               	bcf	17,0	;volatile
 18487                           
 18488                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18489  10DD  3001               	movlw	1
 18490  10DE  3181  21BA  3190   	fcall	_setDimmerLights_IntrControl
 18491                           
 18492                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18493  10E1  3002               	movlw	2
 18494  10E2  3181  21BA  3190   	fcall	_setDimmerLights_IntrControl
 18495                           
 18496                           ;MCU_B1.c: 234: Timer1.Count++;
 18497  10E5  3001               	movlw	1
 18498  10E6  0021               	movlb	1	; select bank1
 18499  10E7  07C8               	addwf	(_Timer1^(0+128)+1),f
 18500  10E8  3000               	movlw	0
 18501  10E9  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18502                           
 18503                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18504  10EA  3001               	movlw	1
 18505  10EB  3EC7               	addlw	_Timer1& (0+255)
 18506  10EC  0086               	movwf	6
 18507  10ED  0187               	clrf	7
 18508  10EE  3F40               	moviw [0]fsr1
 18509  10EF  3A64               	xorlw	100
 18510  10F0  1D03               	skipz
 18511  10F1  28F4               	goto	u777_25
 18512  10F2  3F41               	moviw [1]fsr1
 18513  10F3  3A00               	xorlw	0
 18514  10F4                     u777_25:	
 18515  10F4  1D03               	skipz
 18516  10F5  0008               	return
 18517                           
 18518                           ;MCU_B1.c: 236: {
 18519                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18520  10F6  01C8               	clrf	(_Timer1^(0+128)+1)
 18521  10F7  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18522                           
 18523                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18524  10F8  1447               	bsf	_Timer1^(0+128),0
 18525  10F9  0008               	return
 18526  10FA                     __end_of_TMR1_ISR:	
 18527                           
 18528                           	psect	text129
 18529  01BA                     __ptext129:	
 18530 ;; *************** function _setDimmerLights_IntrControl *****************
 18531 ;; Defined at:
 18532 ;;		line 93 in file "../src/Dimmer_B1.c"
 18533 ;; Parameters:    Size  Location     Type
 18534 ;;  lights          1    wreg     unsigned char 
 18535 ;; Auto vars:     Size  Location     Type
 18536 ;;  lights          1    6[COMMON] unsigned char 
 18537 ;; Return value:  Size  Location     Type
 18538 ;;		None               void
 18539 ;; Registers used:
 18540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18541 ;; Tracked objects:
 18542 ;;		On entry : 0/0
 18543 ;;		On exit  : 0/0
 18544 ;;		Unchanged: 0/0
 18545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18549 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18550 ;;Total ram usage:        5 bytes
 18551 ;; Hardware stack levels used:    1
 18552 ;; Hardware stack levels required when called:    1
 18553 ;; This function calls:
 18554 ;;		_DimmerIntrPointSelect
 18555 ;; This function is called by:
 18556 ;;		_TMR1_ISR
 18557 ;; This function uses a non-reentrant model
 18558 ;;
 18559                           
 18560                           
 18561                           ;psect for function _setDimmerLights_IntrControl
 18562  01BA                     _setDimmerLights_IntrControl:	
 18563                           
 18564                           ;incstack = 0
 18565                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18566                           ;setDimmerLights_IntrControl@lights stored from wreg
 18567  01BA  00F6               	movwf	setDimmerLights_IntrControl@lights
 18568                           
 18569                           ;Dimmer_B1.c: 231: DimmerIntrPointSelect(lights);
 18570  01BB  0876               	movf	setDimmerLights_IntrControl@lights,w
 18571  01BC  319C  24A4  3181   	fcall	_DimmerIntrPointSelect
 18572                           
 18573                           ;Dimmer_B1.c: 232: if (DimmerLightsIntr->GO == 1) {
 18574  01BF  0879               	movf	_DimmerLightsIntr,w
 18575  01C0  0086               	movwf	6
 18576  01C1  3001               	movlw	1	; select bank2/3
 18577  01C2  0087               	movwf	7
 18578  01C3  1C01               	btfss	1,0
 18579  01C4  2A1C               	goto	i1l7277
 18580                           
 18581                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count++;
 18582  01C5  3001               	movlw	1
 18583  01C6  00F2               	movwf	??_setDimmerLights_IntrControl
 18584  01C7  0879               	movf	_DimmerLightsIntr,w
 18585  01C8  3E03               	addlw	3
 18586  01C9  0086               	movwf	6
 18587  01CA  3001               	movlw	1	; select bank2/3
 18588  01CB  0087               	movwf	7
 18589  01CC  0872               	movf	??_setDimmerLights_IntrControl,w
 18590  01CD  0781               	addwf	1,f
 18591                           
 18592                           ;Dimmer_B1.c: 234: if (DimmerLightsIntr->Count
 18593                           ;Dimmer_B1.c: 235: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18594  01CE  0022               	movlb	2	; select bank2
 18595  01CF  0840               	movf	(_Dimmer^(0+256)+2),w
 18596  01D0  00F2               	movwf	??_setDimmerLights_IntrControl
 18597  01D1  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18598  01D2  09F2               	comf	??_setDimmerLights_IntrControl,f
 18599  01D3  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18600  01D4  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18601  01D5  1903               	skipnz
 18602  01D6  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18603  01D7  0879               	movf	_DimmerLightsIntr,w
 18604  01D8  3E04               	addlw	4
 18605  01D9  0086               	movwf	6
 18606  01DA  3001               	movlw	1	; select bank2/3
 18607  01DB  0087               	movwf	7
 18608  01DC  0801               	movf	1,w
 18609  01DD  0772               	addwf	??_setDimmerLights_IntrControl,w
 18610  01DE  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18611  01DF  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18612  01E0  1803               	skipnc
 18613  01E1  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18614  01E2  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18615  01E3  0879               	movf	_DimmerLightsIntr,w
 18616  01E4  3E03               	addlw	3
 18617  01E5  0086               	movwf	6
 18618  01E6  3001               	movlw	1	; select bank2/3
 18619  01E7  0087               	movwf	7
 18620  01E8  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18621  01E9  3A80               	xorlw	128
 18622  01EA  3C80               	sublw	128
 18623  01EB  1D03               	skipz
 18624  01EC  29EF               	goto	u661_25
 18625  01ED  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18626  01EE  0201               	subwf	1,w
 18627  01EF                     u661_25:	
 18628  01EF  1C03               	skipc
 18629  01F0  0008               	return
 18630                           
 18631                           ;Dimmer_B1.c: 236: DimmerLightsIntr->Count = 0;
 18632  01F1  0879               	movf	_DimmerLightsIntr,w
 18633  01F2  3E03               	addlw	3
 18634  01F3  0086               	movwf	6
 18635  01F4  3001               	movlw	1	; select bank2/3
 18636  01F5  0087               	movwf	7
 18637  01F6  0181               	clrf	1
 18638                           
 18639                           ;Dimmer_B1.c: 237: DimmerLightsIntr->GO = 0;
 18640  01F7  0879               	movf	_DimmerLightsIntr,w
 18641  01F8  0086               	movwf	6
 18642  01F9  3001               	movlw	1	; select bank2/3
 18643  01FA  0087               	movwf	7
 18644  01FB  1001               	bcf	1,0
 18645                           
 18646                           ;Dimmer_B1.c: 238: DimmerLightsIntr->Flag = 1;
 18647  01FC  0879               	movf	_DimmerLightsIntr,w
 18648  01FD  3E08               	addlw	8
 18649  01FE  0086               	movwf	6
 18650  01FF  3001               	movlw	1	; select bank2/3
 18651  0200  0087               	movwf	7
 18652  0201  1401               	bsf	1,0
 18653                           
 18654                           ;Dimmer_B1.c: 239: if (DimmerLightsIntr->MOSFET == 1) {
 18655  0202  0879               	movf	_DimmerLightsIntr,w
 18656  0203  3E09               	addlw	9
 18657  0204  0086               	movwf	6
 18658  0205  3001               	movlw	1	; select bank2/3
 18659  0206  0087               	movwf	7
 18660  0207  1E01               	btfss	1,4
 18661  0208  0008               	return
 18662                           
 18663                           ;Dimmer_B1.c: 240: DimmerLightsIntr->MOSFET = 0;
 18664  0209  0879               	movf	_DimmerLightsIntr,w
 18665  020A  3E09               	addlw	9
 18666  020B  0086               	movwf	6
 18667  020C  3001               	movlw	1	; select bank2/3
 18668  020D  0087               	movwf	7
 18669  020E  1201               	bcf	1,4
 18670                           
 18671                           ;Dimmer_B1.c: 242: if (lights == 1) {
 18672  020F  0876               	movf	setDimmerLights_IntrControl@lights,w
 18673  0210  3A01               	xorlw	1
 18674  0211  1D03               	skipz
 18675  0212  2A15               	goto	i1l7273
 18676                           
 18677                           ;Dimmer_B1.c: 243: RA7 = 0;
 18678  0213  0020               	movlb	0	; select bank0
 18679  0214  138C               	bcf	12,7	;volatile
 18680  0215                     i1l7273:	
 18681                           
 18682                           ;Dimmer_B1.c: 245: }
 18683                           ;Dimmer_B1.c: 248: if (lights == 2) {
 18684  0215  0876               	movf	setDimmerLights_IntrControl@lights,w
 18685  0216  3A02               	xorlw	2
 18686  0217  1D03               	skipz
 18687  0218  0008               	return
 18688                           
 18689                           ;Dimmer_B1.c: 249: RB4 = 0;
 18690  0219  0020               	movlb	0	; select bank0
 18691  021A  120D               	bcf	13,4	;volatile
 18692                           
 18693                           ;Dimmer_B1.c: 250: }
 18694                           ;Dimmer_B1.c: 252: }
 18695                           ;Dimmer_B1.c: 253: }
 18696                           ;Dimmer_B1.c: 254: } else {
 18697  021B  0008               	return
 18698  021C                     i1l7277:	
 18699                           
 18700                           ;Dimmer_B1.c: 255: if (DimmerLightsIntr->Flag == 1) {
 18701  021C  0879               	movf	_DimmerLightsIntr,w
 18702  021D  3E08               	addlw	8
 18703  021E  0086               	movwf	6
 18704  021F  3001               	movlw	1	; select bank2/3
 18705  0220  0087               	movwf	7
 18706  0221  1C01               	btfss	1,0
 18707  0222  2AE0               	goto	i1l744
 18708                           
 18709                           ;Dimmer_B1.c: 256: DimmerLightsIntr->Flag = 0;
 18710  0223  0879               	movf	_DimmerLightsIntr,w
 18711  0224  3E08               	addlw	8
 18712  0225  0086               	movwf	6
 18713  0226  3001               	movlw	1	; select bank2/3
 18714  0227  0087               	movwf	7
 18715  0228  1001               	bcf	1,0
 18716                           
 18717                           ;Dimmer_B1.c: 257: if (DimmerLightsIntr->Signal == 1) {
 18718  0229  0879               	movf	_DimmerLightsIntr,w
 18719  022A  0086               	movwf	6
 18720  022B  3001               	movlw	1	; select bank2/3
 18721  022C  0087               	movwf	7
 18722  022D  1C81               	btfss	1,1
 18723  022E  2AE0               	goto	i1l744
 18724                           
 18725                           ;Dimmer_B1.c: 258: DimmerLightsIntr->DimmingTime++;
 18726  022F  3001               	movlw	1
 18727  0230  00F2               	movwf	??_setDimmerLights_IntrControl
 18728  0231  0A79               	incf	_DimmerLightsIntr,w
 18729  0232  0086               	movwf	6
 18730  0233  3001               	movlw	1	; select bank2/3
 18731  0234  0087               	movwf	7
 18732  0235  0872               	movf	??_setDimmerLights_IntrControl,w
 18733  0236  0781               	addwf	1,f
 18734                           
 18735                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18736  0237  0A79               	incf	_DimmerLightsIntr,w
 18737  0238  0086               	movwf	6
 18738  0239  3001               	movlw	1	; select bank2/3
 18739  023A  0087               	movwf	7
 18740  023B  0879               	movf	_DimmerLightsIntr,w
 18741  023C  3E02               	addlw	2
 18742  023D  0084               	movwf	4
 18743  023E  3001               	movlw	1	; select bank2/3
 18744  023F  0085               	movwf	5
 18745  0240  0800               	movf	0,w
 18746  0241  0201               	subwf	1,w
 18747  0242  1C03               	skipc
 18748  0243  2AE0               	goto	i1l744
 18749                           
 18750                           ;Dimmer_B1.c: 260: DimmerLightsIntr->DimmingTime = 0;
 18751  0244  0A79               	incf	_DimmerLightsIntr,w
 18752  0245  0086               	movwf	6
 18753  0246  3001               	movlw	1	; select bank2/3
 18754  0247  0087               	movwf	7
 18755  0248  0181               	clrf	1
 18756                           
 18757                           ;Dimmer_B1.c: 261: if (DimmerLightsIntr->AdjFlag == 1) {
 18758  0249  0879               	movf	_DimmerLightsIntr,w
 18759  024A  0086               	movwf	6
 18760  024B  3001               	movlw	1	; select bank2/3
 18761  024C  0087               	movwf	7
 18762  024D  1D81               	btfss	1,3
 18763  024E  2A95               	goto	i1l7307
 18764                           
 18765                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjStatus == 0) {
 18766  024F  0879               	movf	_DimmerLightsIntr,w
 18767  0250  0086               	movwf	6
 18768  0251  3001               	movlw	1	; select bank2/3
 18769  0252  0087               	movwf	7
 18770  0253  1A01               	btfsc	1,4
 18771  0254  2A76               	goto	i1l7299
 18772                           
 18773                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18774  0255  0879               	movf	_DimmerLightsIntr,w
 18775  0256  3E04               	addlw	4
 18776  0257  0086               	movwf	6
 18777  0258  3001               	movlw	1	; select bank2/3
 18778  0259  0087               	movwf	7
 18779  025A  3040               	movlw	64
 18780  025B  0201               	subwf	1,w
 18781  025C  1803               	skipnc
 18782  025D  2A67               	goto	i1l7295
 18783                           
 18784                           ;Dimmer_B1.c: 264: DimmerLightsIntr->DimmingValue++;
 18785  025E  3001               	movlw	1
 18786  025F  00F2               	movwf	??_setDimmerLights_IntrControl
 18787  0260  0879               	movf	_DimmerLightsIntr,w
 18788  0261  3E04               	addlw	4
 18789  0262  0086               	movwf	6
 18790  0263  3001               	movlw	1	; select bank2/3
 18791  0264  0087               	movwf	7
 18792  0265  0872               	movf	??_setDimmerLights_IntrControl,w
 18793  0266  0781               	addwf	1,f
 18794  0267                     i1l7295:	
 18795                           
 18796                           ;Dimmer_B1.c: 265: }
 18797                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue == ((char)(80*0.8))) {
 18798  0267  0879               	movf	_DimmerLightsIntr,w
 18799  0268  3E04               	addlw	4
 18800  0269  0086               	movwf	6
 18801  026A  3001               	movlw	1	; select bank2/3
 18802  026B  0087               	movwf	7
 18803  026C  0801               	movf	1,w
 18804  026D  3A40               	xorlw	64
 18805  026E  1D03               	skipz
 18806  026F  2AE0               	goto	i1l744
 18807                           
 18808                           ;Dimmer_B1.c: 267: DimmerLightsIntr->AdjStatus = 1;
 18809  0270  0879               	movf	_DimmerLightsIntr,w
 18810  0271  0086               	movwf	6
 18811  0272  3001               	movlw	1	; select bank2/3
 18812  0273  0087               	movwf	7
 18813  0274  1601               	bsf	1,4
 18814                           
 18815                           ;Dimmer_B1.c: 268: }
 18816                           ;Dimmer_B1.c: 269: } else {
 18817  0275  2AE0               	goto	i1l744
 18818  0276                     i1l7299:	
 18819                           
 18820                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18821  0276  0879               	movf	_DimmerLightsIntr,w
 18822  0277  3E04               	addlw	4
 18823  0278  0086               	movwf	6
 18824  0279  3001               	movlw	1	; select bank2/3
 18825  027A  0087               	movwf	7
 18826  027B  300D               	movlw	13
 18827  027C  0201               	subwf	1,w
 18828  027D  1C03               	skipc
 18829  027E  2A86               	goto	i1l7303
 18830                           
 18831                           ;Dimmer_B1.c: 271: DimmerLightsIntr->DimmingValue--;
 18832  027F  0879               	movf	_DimmerLightsIntr,w
 18833  0280  3E04               	addlw	4
 18834  0281  0086               	movwf	6
 18835  0282  3001               	movlw	1	; select bank2/3
 18836  0283  0087               	movwf	7
 18837  0284  3001               	movlw	1
 18838  0285  0281               	subwf	1,f
 18839  0286                     i1l7303:	
 18840                           
 18841                           ;Dimmer_B1.c: 272: }
 18842                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18843  0286  0879               	movf	_DimmerLightsIntr,w
 18844  0287  3E04               	addlw	4
 18845  0288  0086               	movwf	6
 18846  0289  3001               	movlw	1	; select bank2/3
 18847  028A  0087               	movwf	7
 18848  028B  0801               	movf	1,w
 18849  028C  3A0C               	xorlw	12
 18850  028D  1D03               	skipz
 18851  028E  2AE0               	goto	i1l744
 18852                           
 18853                           ;Dimmer_B1.c: 274: DimmerLightsIntr->AdjStatus = 0;
 18854  028F  0879               	movf	_DimmerLightsIntr,w
 18855  0290  0086               	movwf	6
 18856  0291  3001               	movlw	1	; select bank2/3
 18857  0292  0087               	movwf	7
 18858  0293  1201               	bcf	1,4
 18859                           
 18860                           ;Dimmer_B1.c: 275: }
 18861                           ;Dimmer_B1.c: 276: }
 18862                           ;Dimmer_B1.c: 277: } else if (DimmerLightsIntr->AdjRF == 1) {
 18863  0294  2AE0               	goto	i1l744
 18864  0295                     i1l7307:	
 18865  0295  0879               	movf	_DimmerLightsIntr,w
 18866  0296  0086               	movwf	6
 18867  0297  3001               	movlw	1	; select bank2/3
 18868  0298  0087               	movwf	7
 18869  0299  1D01               	btfss	1,2
 18870  029A  2AE0               	goto	i1l744
 18871                           
 18872                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18873  029B  0879               	movf	_DimmerLightsIntr,w
 18874  029C  3E04               	addlw	4
 18875  029D  0086               	movwf	6
 18876  029E  3001               	movlw	1	; select bank2/3
 18877  029F  0087               	movwf	7
 18878  02A0  0879               	movf	_DimmerLightsIntr,w
 18879  02A1  3E05               	addlw	5
 18880  02A2  0084               	movwf	4
 18881  02A3  3001               	movlw	1	; select bank2/3
 18882  02A4  0085               	movwf	5
 18883  02A5  0800               	movf	0,w
 18884  02A6  0201               	subwf	1,w
 18885  02A7  1803               	skipnc
 18886  02A8  2AB3               	goto	i1l7313
 18887                           
 18888                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue++;
 18889  02A9  3001               	movlw	1
 18890  02AA  00F2               	movwf	??_setDimmerLights_IntrControl
 18891  02AB  0879               	movf	_DimmerLightsIntr,w
 18892  02AC  3E04               	addlw	4
 18893  02AD  0086               	movwf	6
 18894  02AE  3001               	movlw	1	; select bank2/3
 18895  02AF  0087               	movwf	7
 18896  02B0  0872               	movf	??_setDimmerLights_IntrControl,w
 18897  02B1  0781               	addwf	1,f
 18898                           
 18899                           ;Dimmer_B1.c: 280: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18900  02B2  2AC8               	goto	i1l7317
 18901  02B3                     i1l7313:	
 18902  02B3  0879               	movf	_DimmerLightsIntr,w
 18903  02B4  3E05               	addlw	5
 18904  02B5  0086               	movwf	6
 18905  02B6  3001               	movlw	1	; select bank2/3
 18906  02B7  0087               	movwf	7
 18907  02B8  0879               	movf	_DimmerLightsIntr,w
 18908  02B9  3E04               	addlw	4
 18909  02BA  0084               	movwf	4
 18910  02BB  3001               	movlw	1	; select bank2/3
 18911  02BC  0085               	movwf	5
 18912  02BD  0800               	movf	0,w
 18913  02BE  0201               	subwf	1,w
 18914  02BF  1803               	skipnc
 18915  02C0  2AC8               	goto	i1l7317
 18916                           
 18917                           ;Dimmer_B1.c: 281: DimmerLightsIntr->DimmingValue--;
 18918  02C1  0879               	movf	_DimmerLightsIntr,w
 18919  02C2  3E04               	addlw	4
 18920  02C3  0086               	movwf	6
 18921  02C4  3001               	movlw	1	; select bank2/3
 18922  02C5  0087               	movwf	7
 18923  02C6  3001               	movlw	1
 18924  02C7  0281               	subwf	1,f
 18925  02C8                     i1l7317:	
 18926                           
 18927                           ;Dimmer_B1.c: 282: }
 18928                           ;Dimmer_B1.c: 283: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18929  02C8  0879               	movf	_DimmerLightsIntr,w
 18930  02C9  3E05               	addlw	5
 18931  02CA  0086               	movwf	6
 18932  02CB  3001               	movlw	1	; select bank2/3
 18933  02CC  0087               	movwf	7
 18934  02CD  0879               	movf	_DimmerLightsIntr,w
 18935  02CE  3E04               	addlw	4
 18936  02CF  0084               	movwf	4
 18937  02D0  3001               	movlw	1	; select bank2/3
 18938  02D1  0085               	movwf	5
 18939  02D2  0800               	movf	0,w
 18940  02D3  0601               	xorwf	1,w
 18941  02D4  1D03               	skipz
 18942  02D5  2AE0               	goto	i1l744
 18943                           
 18944                           ;Dimmer_B1.c: 284: DimmerLightsIntr->AdjRF = 0;
 18945  02D6  0879               	movf	_DimmerLightsIntr,w
 18946  02D7  0086               	movwf	6
 18947  02D8  3001               	movlw	1	; select bank2/3
 18948  02D9  0087               	movwf	7
 18949  02DA  1101               	bcf	1,2
 18950                           
 18951                           ;Dimmer_B1.c: 285: DimmerLightsIntr->Signal = 0;
 18952  02DB  0879               	movf	_DimmerLightsIntr,w
 18953  02DC  0086               	movwf	6
 18954  02DD  3001               	movlw	1	; select bank2/3
 18955  02DE  0087               	movwf	7
 18956  02DF  1081               	bcf	1,1
 18957  02E0                     i1l744:	
 18958                           
 18959                           ;Dimmer_B1.c: 286: }
 18960                           ;Dimmer_B1.c: 287: }
 18961                           ;Dimmer_B1.c: 305: }
 18962                           ;Dimmer_B1.c: 306: }
 18963                           ;Dimmer_B1.c: 307: }
 18964                           ;Dimmer_B1.c: 309: if (DimmerLightsIntr->MosfetSignal == 1) {
 18965  02E0  0879               	movf	_DimmerLightsIntr,w
 18966  02E1  3E09               	addlw	9
 18967  02E2  0086               	movwf	6
 18968  02E3  3001               	movlw	1	; select bank2/3
 18969  02E4  0087               	movwf	7
 18970  02E5  1D81               	btfss	1,3
 18971  02E6  0008               	return
 18972                           
 18973                           ;Dimmer_B1.c: 310: DimmerLightsIntr->MosfetSignalCount++;
 18974  02E7  3001               	movlw	1
 18975  02E8  00F2               	movwf	??_setDimmerLights_IntrControl
 18976  02E9  0879               	movf	_DimmerLightsIntr,w
 18977  02EA  3E0C               	addlw	12
 18978  02EB  0086               	movwf	6
 18979  02EC  3001               	movlw	1	; select bank2/3
 18980  02ED  0087               	movwf	7
 18981  02EE  0872               	movf	??_setDimmerLights_IntrControl,w
 18982  02EF  0781               	addwf	1,f
 18983                           
 18984                           ;Dimmer_B1.c: 311: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18985  02F0  0879               	movf	_DimmerLightsIntr,w
 18986  02F1  3E0C               	addlw	12
 18987  02F2  0086               	movwf	6
 18988  02F3  3001               	movlw	1	; select bank2/3
 18989  02F4  0087               	movwf	7
 18990  02F5  0801               	movf	1,w
 18991  02F6  3A05               	xorlw	5
 18992  02F7  1D03               	skipz
 18993  02F8  0008               	return
 18994                           
 18995                           ;Dimmer_B1.c: 312: DimmerLightsIntr->MosfetSignalCount = 0;
 18996  02F9  0879               	movf	_DimmerLightsIntr,w
 18997  02FA  3E0C               	addlw	12
 18998  02FB  0086               	movwf	6
 18999  02FC  3001               	movlw	1	; select bank2/3
 19000  02FD  0087               	movwf	7
 19001  02FE  0181               	clrf	1
 19002                           
 19003                           ;Dimmer_B1.c: 313: DimmerLightsIntr->MosfetSignal = 0;
 19004  02FF  0879               	movf	_DimmerLightsIntr,w
 19005  0300  3E09               	addlw	9
 19006  0301  0086               	movwf	6
 19007  0302  3001               	movlw	1	; select bank2/3
 19008  0303  0087               	movwf	7
 19009  0304  1181               	bcf	1,3
 19010  0305  0008               	return
 19011  0306                     __end_of_setDimmerLights_IntrControl:	
 19012                           
 19013                           	psect	text130
 19014  1CA4                     __ptext130:	
 19015 ;; *************** function _DimmerIntrPointSelect *****************
 19016 ;; Defined at:
 19017 ;;		line 71 in file "../src/Dimmer_B1.c"
 19018 ;; Parameters:    Size  Location     Type
 19019 ;;  lights          1    wreg     unsigned char 
 19020 ;; Auto vars:     Size  Location     Type
 19021 ;;  lights          1    1[COMMON] unsigned char 
 19022 ;; Return value:  Size  Location     Type
 19023 ;;		None               void
 19024 ;; Registers used:
 19025 ;;		wreg
 19026 ;; Tracked objects:
 19027 ;;		On entry : 0/0
 19028 ;;		On exit  : 0/0
 19029 ;;		Unchanged: 0/0
 19030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19035 ;;Total ram usage:        2 bytes
 19036 ;; Hardware stack levels used:    1
 19037 ;; This function calls:
 19038 ;;		Nothing
 19039 ;; This function is called by:
 19040 ;;		_setDimmerLights_IntrControl
 19041 ;; This function uses a non-reentrant model
 19042 ;;
 19043                           
 19044                           
 19045                           ;psect for function _DimmerIntrPointSelect
 19046  1CA4                     _DimmerIntrPointSelect:	
 19047                           
 19048                           ;incstack = 0
 19049                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19050                           ;DimmerIntrPointSelect@lights stored from wreg
 19051  1CA4  00F1               	movwf	DimmerIntrPointSelect@lights
 19052                           
 19053                           ;Dimmer_B1.c: 73: if (lights == 1) {
 19054  1CA5  0871               	movf	DimmerIntrPointSelect@lights,w
 19055  1CA6  3A01               	xorlw	1
 19056  1CA7  1D03               	skipz
 19057  1CA8  2CAD               	goto	i1l733
 19058                           
 19059                           ;Dimmer_B1.c: 74: DimmerLightsIntr = &DimmerLights1;
 19060  1CA9  30A0               	movlw	_DimmerLights1& (0+255)
 19061  1CAA  00F0               	movwf	??_DimmerIntrPointSelect
 19062  1CAB  0870               	movf	??_DimmerIntrPointSelect,w
 19063  1CAC  00F9               	movwf	_DimmerLightsIntr
 19064  1CAD                     i1l733:	
 19065                           
 19066                           ;Dimmer_B1.c: 75: }
 19067                           ;Dimmer_B1.c: 78: if (lights == 2) {
 19068  1CAD  0871               	movf	DimmerIntrPointSelect@lights,w
 19069  1CAE  3A02               	xorlw	2
 19070  1CAF  1D03               	skipz
 19071  1CB0  0008               	return
 19072                           
 19073                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights2;
 19074  1CB1  30AF               	movlw	_DimmerLights2& (0+255)
 19075  1CB2  00F0               	movwf	??_DimmerIntrPointSelect
 19076  1CB3  0870               	movf	??_DimmerIntrPointSelect,w
 19077  1CB4  00F9               	movwf	_DimmerLightsIntr
 19078  1CB5  0008               	return
 19079  1CB6                     __end_of_DimmerIntrPointSelect:	
 19080                           
 19081                           	psect	text131
 19082  1C13                     __ptext131:	
 19083 ;; *************** function _IOC_ISR *****************
 19084 ;; Defined at:
 19085 ;;		line 401 in file "../src/MCU_B1.c"
 19086 ;; Parameters:    Size  Location     Type
 19087 ;;		None
 19088 ;; Auto vars:     Size  Location     Type
 19089 ;;		None
 19090 ;; Return value:  Size  Location     Type
 19091 ;;		None               void
 19092 ;; Registers used:
 19093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19094 ;; Tracked objects:
 19095 ;;		On entry : 0/0
 19096 ;;		On exit  : 0/0
 19097 ;;		Unchanged: 0/0
 19098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19103 ;;Total ram usage:        0 bytes
 19104 ;; Hardware stack levels used:    1
 19105 ;; Hardware stack levels required when called:    3
 19106 ;; This function calls:
 19107 ;;		_setDimmerReClock
 19108 ;; This function is called by:
 19109 ;;		_ISR
 19110 ;; This function uses a non-reentrant model
 19111 ;;
 19112                           
 19113                           
 19114                           ;psect for function _IOC_ISR
 19115  1C13                     _IOC_ISR:	
 19116                           
 19117                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19118                           
 19119                           ;incstack = 0
 19120                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19121  1C13  1D8B               	btfss	11,3	;volatile
 19122  1C14  0008               	return
 19123  1C15  1C0B               	btfss	11,0	;volatile
 19124  1C16  0008               	return
 19125  1C17  0027               	movlb	7	; select bank7
 19126  1C18  1D16               	btfss	22,2	;volatile
 19127  1C19  0008               	return
 19128                           
 19129                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19130  1C1A  1116               	bcf	22,2	;volatile
 19131                           
 19132                           ;MCU_B1.c: 404: IOCIF = 0;
 19133  1C1B  100B               	bcf	11,0	;volatile
 19134                           
 19135                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19136  1C1C  0021               	movlb	1	; select bank1
 19137  1C1D  1C20               	btfss	_myMain^(0+128),0
 19138  1C1E  0008               	return
 19139                           
 19140                           ;MCU_B1.c: 408: setDimmerReClock();
 19141  1C1F  319B  234C         	fcall	_setDimmerReClock
 19142  1C21  0008               	return
 19143  1C22                     __end_of_IOC_ISR:	
 19144                           
 19145                           	psect	text132
 19146  1B4C                     __ptext132:	
 19147 ;; *************** function _setDimmerReClock *****************
 19148 ;; Defined at:
 19149 ;;		line 244 in file "../src/MCU_B1.c"
 19150 ;; Parameters:    Size  Location     Type
 19151 ;;		None
 19152 ;; Auto vars:     Size  Location     Type
 19153 ;;		None
 19154 ;; Return value:  Size  Location     Type
 19155 ;;		None               void
 19156 ;; Registers used:
 19157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19158 ;; Tracked objects:
 19159 ;;		On entry : 0/0
 19160 ;;		On exit  : 0/0
 19161 ;;		Unchanged: 0/0
 19162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19167 ;;Total ram usage:        0 bytes
 19168 ;; Hardware stack levels used:    1
 19169 ;; Hardware stack levels required when called:    2
 19170 ;; This function calls:
 19171 ;;		_setDimmerLights_IntrIOC_GO
 19172 ;; This function is called by:
 19173 ;;		_IOC_ISR
 19174 ;; This function uses a non-reentrant model
 19175 ;;
 19176                           
 19177                           
 19178                           ;psect for function _setDimmerReClock
 19179  1B4C                     _setDimmerReClock:	
 19180                           
 19181                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19182                           
 19183                           ;incstack = 0
 19184                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19185  1B4C  3001               	movlw	1
 19186  1B4D  3193  231B  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19187                           
 19188                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19189  1B50  3002               	movlw	2
 19190  1B51  3193  231B         	fcall	_setDimmerLights_IntrIOC_GO
 19191  1B53  0008               	return
 19192  1B54                     __end_of_setDimmerReClock:	
 19193                           
 19194                           	psect	text133
 19195  131B                     __ptext133:	
 19196 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19197 ;; Defined at:
 19198 ;;		line 28 in file "../src/Dimmer_B1.c"
 19199 ;; Parameters:    Size  Location     Type
 19200 ;;  lights          1    wreg     unsigned char 
 19201 ;; Auto vars:     Size  Location     Type
 19202 ;;  lights          1    2[COMMON] unsigned char 
 19203 ;; Return value:  Size  Location     Type
 19204 ;;		None               void
 19205 ;; Registers used:
 19206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19207 ;; Tracked objects:
 19208 ;;		On entry : 0/0
 19209 ;;		On exit  : 0/0
 19210 ;;		Unchanged: 0/0
 19211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19216 ;;Total ram usage:        1 bytes
 19217 ;; Hardware stack levels used:    1
 19218 ;; Hardware stack levels required when called:    1
 19219 ;; This function calls:
 19220 ;;		_DimmerIntrIOCPointSelect
 19221 ;; This function is called by:
 19222 ;;		_setDimmerReClock
 19223 ;; This function uses a non-reentrant model
 19224 ;;
 19225                           
 19226                           
 19227                           ;psect for function _setDimmerLights_IntrIOC_GO
 19228  131B                     _setDimmerLights_IntrIOC_GO:	
 19229                           
 19230                           ;incstack = 0
 19231                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19232                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19233  131B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19234                           
 19235                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19236  131C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19237  131D  319D  2538  3193   	fcall	_DimmerIntrIOCPointSelect
 19238                           
 19239                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 19240  1320  0021               	movlb	1	; select bank1
 19241  1321  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19242  1322  0086               	movwf	6
 19243  1323  3001               	movlw	1	; select bank2/3
 19244  1324  0087               	movwf	7
 19245  1325  1801               	btfsc	1,0
 19246  1326  0008               	return
 19247  1327  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19248  1328  3E09               	addlw	9
 19249  1329  0086               	movwf	6
 19250  132A  3001               	movlw	1	; select bank2/3
 19251  132B  0087               	movwf	7
 19252  132C  1981               	btfsc	1,3
 19253  132D  0008               	return
 19254                           
 19255                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19256  132E  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19257  132F  0086               	movwf	6
 19258  1330  3001               	movlw	1	; select bank2/3
 19259  1331  0087               	movwf	7
 19260  1332  1401               	bsf	1,0
 19261                           
 19262                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19263  1333  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19264  1334  3E09               	addlw	9
 19265  1335  0086               	movwf	6
 19266  1336  3001               	movlw	1	; select bank2/3
 19267  1337  0087               	movwf	7
 19268  1338  1581               	bsf	1,3
 19269                           
 19270                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19271  1339  0022               	movlb	2	; select bank2
 19272  133A  01C0               	clrf	(_Dimmer^(0+256)+2)
 19273                           
 19274                           ;Dimmer_B1.c: 49: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19275  133B  0021               	movlb	1	; select bank1
 19276  133C  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19277  133D  0086               	movwf	6
 19278  133E  3001               	movlw	1	; select bank2/3
 19279  133F  0087               	movwf	7
 19280  1340  1F01               	btfss	1,6
 19281  1341  0008               	return
 19282                           
 19283                           ;Dimmer_B1.c: 50: DimmerLightsIntrIOC->MOSFET = 1;
 19284  1342  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19285  1343  3E09               	addlw	9
 19286  1344  0086               	movwf	6
 19287  1345  3001               	movlw	1	; select bank2/3
 19288  1346  0087               	movwf	7
 19289  1347  1601               	bsf	1,4
 19290                           
 19291                           ;Dimmer_B1.c: 52: if (lights == 1) {
 19292  1348  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19293  1349  3A01               	xorlw	1
 19294  134A  1D03               	skipz
 19295  134B  2B4E               	goto	i1l6853
 19296                           
 19297                           ;Dimmer_B1.c: 53: RA7 = 1;
 19298  134C  0020               	movlb	0	; select bank0
 19299  134D  178C               	bsf	12,7	;volatile
 19300  134E                     i1l6853:	
 19301                           
 19302                           ;Dimmer_B1.c: 55: }
 19303                           ;Dimmer_B1.c: 58: if (lights == 2) {
 19304  134E  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19305  134F  3A02               	xorlw	2
 19306  1350  1D03               	skipz
 19307  1351  0008               	return
 19308                           
 19309                           ;Dimmer_B1.c: 59: RB4 = 1;
 19310  1352  0020               	movlb	0	; select bank0
 19311  1353  160D               	bsf	13,4	;volatile
 19312  1354  0008               	return
 19313  1355                     __end_of_setDimmerLights_IntrIOC_GO:	
 19314                           
 19315                           	psect	text134
 19316  1D38                     __ptext134:	
 19317 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19318 ;; Defined at:
 19319 ;;		line 8 in file "../src/Dimmer_B1.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;  lights          1    wreg     unsigned char 
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;  lights          1    1[COMMON] unsigned char 
 19324 ;; Return value:  Size  Location     Type
 19325 ;;		None               void
 19326 ;; Registers used:
 19327 ;;		wreg
 19328 ;; Tracked objects:
 19329 ;;		On entry : 0/0
 19330 ;;		On exit  : 0/0
 19331 ;;		Unchanged: 0/0
 19332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;Total ram usage:        2 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; This function calls:
 19340 ;;		Nothing
 19341 ;; This function is called by:
 19342 ;;		_setDimmerLights_IntrIOC_GO
 19343 ;; This function uses a non-reentrant model
 19344 ;;
 19345                           
 19346                           
 19347                           ;psect for function _DimmerIntrIOCPointSelect
 19348  1D38                     _DimmerIntrIOCPointSelect:	
 19349                           
 19350                           ;incstack = 0
 19351                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19352                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19353  1D38  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19354                           
 19355                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19356  1D39  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19357  1D3A  3A01               	xorlw	1
 19358  1D3B  1D03               	skipz
 19359  1D3C  2D42               	goto	i1l721
 19360                           
 19361                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19362  1D3D  30A0               	movlw	_DimmerLights1& (0+255)
 19363  1D3E  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19364  1D3F  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19365  1D40  0021               	movlb	1	; select bank1
 19366  1D41  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19367  1D42                     i1l721:	
 19368                           
 19369                           ;Dimmer_B1.c: 12: }
 19370                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19371  1D42  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19372  1D43  3A02               	xorlw	2
 19373  1D44  1D03               	skipz
 19374  1D45  0008               	return
 19375                           
 19376                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19377  1D46  30AF               	movlw	_DimmerLights2& (0+255)
 19378  1D47  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19379  1D48  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19380  1D49  0021               	movlb	1	; select bank1
 19381  1D4A  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19382  1D4B  0008               	return
 19383  1D4C                     __end_of_DimmerIntrIOCPointSelect:	
 19384  007E                     btemp	set	126	;btemp
 19385  007E                     pic14e$flags	set	126
 19386  007E                     wtemp	set	126
 19387  007E                     wtemp0	set	126
 19388  0080                     wtemp1	set	128
 19389  0082                     wtemp2	set	130
 19390  0084                     wtemp3	set	132
 19391  0086                     wtemp4	set	134
 19392  0088                     wtemp5	set	136
 19393  007F                     wtemp6	set	127
 19394  007E                     ttemp	set	126
 19395  007E                     ttemp0	set	126
 19396  0081                     ttemp1	set	129
 19397  0084                     ttemp2	set	132
 19398  0087                     ttemp3	set	135
 19399  007F                     ttemp4	set	127
 19400  007E                     ltemp	set	126
 19401  007E                     ltemp0	set	126
 19402  0082                     ltemp1	set	130
 19403  0086                     ltemp2	set	134
 19404  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         266
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   97222
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11672
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    6308
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5136
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29470
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29470
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28687
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26847
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7483
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2038
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15503
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15280
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15214
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     809
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1369
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28549
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   28136
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12665
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13705
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     205
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3949
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3949
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     189      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     189      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 01 16:20:18 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 166D                                       l98 1681  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F75  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1D25  
                 __end_of_setDelayOff_GO 085E                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1695  
                   _setDimmerLights_Line 1DC6                             ___ftadd@sign 004B  
                                    l110 1496                                      l106 149C  
                                    l107 1498                                      l108 1486  
                   _setDimmerLights_SwOn 1355                                      l255 09B3  
                                    l328 1D56                                      l329 1D57  
                                    l372 108A                                      l765 1CF6  
                                    l776 1239                                      l864 1D2E  
                                    l865 1D35                                      _GIE 005F  
                                    _CRC 00CC                                      l996 1E8A  
                                    l997 1E92                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007A                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BB  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01BE  
                                    _Sw2 01C7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D60                    _Buzzer_Initialization 1B0D  
                        __end_of_ADC_Set 1B4C                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CE5  
                 _setMain_Exception$7086 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FB9                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C22                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1031 13C9                                     l2013 1C27  
                                   l2021 0DA5                                     l2031 0DFB  
                                   l1313 11A3                                     l1322 14E9  
                                   l2051 0B72                                     l2037 12E0  
                                   l3014 04E9                                     l2063 13FB  
               ?_DimmerLightsPointSelect 0070                                     l1461 033D  
                                   l1462 0414                                     l1463 0412  
                                   l1615 0E9F                                     l1458 0444  
                                   l1299 12A8                          __end_of_IOC_Set 1BEC  
                                   l6001 0F63                                     l2369 1DE2  
                                   l2385 1FEC                                     l2395 01B1  
                                   l2724 11F2                                     l6101 1D6B  
                                   l2725 120D                                     l2397 008A  
                                   l6031 0FD0                                     l6023 0FBC  
                                   l6007 0F79                                     l2680 0905  
                                   l2729 1209                                     l1970 0569  
                                   l6035 0FD8                                     l6019 0FB4  
                                   l1971 056B                                     l1972 0573  
                                   l6117 114C                                     l7101 0DC0  
                                   l6143 159B                                     l6223 0839  
                                   l7111 0DE6                                     l1968 061B  
                                   l6161 15BA                                     l6225 0846  
                                   l7009 118B                                     l1977 059E  
                         _Load_Main$3859 002D                                     l6171 15D5  
                                   l6227 084F                                     l6219 0833  
                                   l6315 1444                                     l6059 0C77  
                                   l1979 05D7                                     l6149 15A6  
                                   l6093 0CDC                                     l6085 0CC2  
                                   l6077 0CA7                                     l6333 1794  
                                   l8101 0381                                     l7053 1C9E  
                                   l7117 0DF1                                     l7141 1073  
                                   l6175 15DD                                     l6167 15CC  
                                   l6159 15AE                                     l2991 0963  
                                   l6087 0CCB                                     l6079 0CB5  
                                   l7127 1D7F                                     l7151 107F  
                                   l7143 1075                                     l8031 0C23  
                                   l8023 0BFE                                     l6601 1560  
                                   l2985 094C                                     l6089 0CCE  
                                   l6249 1C7B                                     l7153 1083  
                                   l6523 1E45                                     l7171 07E1  
                                   l8131 03DD                                     l6435 1E2A  
                                   l8051 0C58                                     l8035 0C2B  
                  _setDimmerLights_SwOff 1410                                     l6517 1E3C  
                                   l7181 07F1                                     l6621 1582  
                                   l8125 03D0                                     l8133 03E3  
                                   l6437 1E2E                                     l6533 1FA0  
                                   l6509 13E9                                     l7077 0D91  
                                   l8213 130C                                     l6519 1E3F  
                                   l7175 07E7                                     l6455 1725  
                                   l5831 0929                                     l5911 04A2  
                                   l8143 03F8                                     l6535 1FA3  
                                   l6703 0981                                     l7185 07F7  
                                   l7169 07DE                                     l6457 16FA  
                                   l6617 157E                                     l6625 1586  
                                   l6609 1568                                     l5841 0951  
                                   l5833 0933                                     l5921 04C4  
                                   l7353 16BA                                     l6705 0984  
                                   l7089 0DA8                                     l8241 1FF5  
                                   l7179 07EE                                     l6459 172B  
                                   l6635 1DD3                                     l5843 0959  
                                   l5835 0938                                     l5827 0922  
                                   l5931 04E5                                     l5923 04C8  
                                   l7355 16C0                                     l8075 032C  
                                   l6539 1FA9                                     l6723 099B  
                                   l6387 11B7                                     l6299 138B  
                                   l6491 1524                                     l8403 1608  
                                   l6813 109B                                     l6821 1F5C  
                                   l6565 11ED                                     l5917 04B5  
                                   l7365 16E8                                     l6741 09CF  
                                   l6733 09C2                                     l6709 098A  
                                   l7525 0E12                                     l7453 1F27  
                                   l6815 10A6                                     l6823 1F5F  
                                   l5855 1CB9                                     l6575 1204  
                                   l6567 11F6                                     l5935 04FB  
                                   l5919 04BF                                     l6911 0D5A  
                                   l7471 14BF                                     l8191 0432  
                                   l8095 0357                                     l6735 09C6  
                                   l6727 09B9                                     l6495 1533  
                                   l7607 058A                                     l7447 1F1F  
                                   l8271 08EF                                     l8407 1613  
                                   l5929 04DB                                     l7465 14AA  
                                   l6753 0B77                                     l6761 0B83  
                                   l6737 09C9                                     l6729 09BC  
                                   l7641 05BC                                     l7713 17C3  
                                   l7705 17B0                                     l7449 1F22  
                                   l8281 0906                                     l8265 08DD  
                                   l6827 1F65                                     l5859 1CBF  
                                   l6587 154F                                     l6595 1557  
                                   l5939 050D                                     l6771 0B95  
                                   l6755 0B7A                                     l6683 0B47  
                                   l6667 0B0C                                     l7643 05BE  
                                   l7723 17E1                                     l7731 17FA  
                                   l7555 0E6B                                     l5877 1F80  
                                   l5949 0528                                     l5893 0479  
                                   l5965 0ED0                                     l6685 0B4B  
                                   l6693 0B57                                     l7557 0E6D  
                                   l5959 0EBA                                     l6919 0ABB  
                                   l6791 0BAC                                     l6775 0B9B  
                                   l6759 0B80                                     l6687 0B4F  
                                   l6679 0B31                                     l7671 0609  
                                   l7719 17D1                                     l6943 1258  
                                   l7743 0075                                     l7567 0E82  
                                   l7833 1470                                     l6873 1173  
                                   l5889 0472                                     l6793 0BC4  
                                   l6769 0B92                                     l6689 0B53  
                                   l7729 17F1                                     l7569 0E83  
                                   l6875 1157                                     l5899 0488  
                                   l5987 0F2A                                     l5979 0F11  
                                   l7659 05E8                                     l7691 1DE7  
                                   l7819 01AD                                     l6877 1178  
                  _myMain_Initialization 1C31                                     l7943 0691  
                                   l7695 1DED                                     l7783 0128  
                                   l7759 00B8                                     l7881 1230  
                                   l7769 00EA                                     l7793 015A  
                                   l6899 0D33                                     l7883 1233  
                                   l7885 123B                                     _CFGS 0CAE  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u5025 15B1  
                                   u4315 0954                                     u5045 15BB  
                                   u5055 15C5                                     u5305 1DAB  
                                   u5065 15CD                                     u4345 096A  
                                   u5250 1752                                     u4275 092E  
                                   u4515 04B6                                     _PEIE 005E  
                                   u6055 1160                                     u4295 0947  
                                   u5255 1750                                     u4545 04C9  
                                   u4485 04A3                                     u4645 0EE2  
                                   u4805 0FDF                                     u4725 0F85  
                                   u4575 04DC                                     u4655 0EF2  
                                   u4735 0F95                                     u7055 0E53  
                                   u4665 0F12                                     u4905 0CC3  
                                   u8105 0388                                     u5395 1703  
                                   u4675 0F21                                     u8115 0396  
                                   u4755 0FBD                                     u7075 0E73  
                                   u4685 0F2B                                     u4845 0C7E  
                                   u4765 0FC3                                     u7175 0584  
                                   u4875 0CA8                                     u4795 0FD9  
                                   u4965 1138                                     u7615 1466  
                                   u8175 03E9                                     u8095 0383  
                                   u7295 05F9                                     u5945 1090  
                                   u8345 08CC                                     u8355 08EB  
                                   u8285 1303                                     u8365 08FD  
                                   u8295 1312                                     u7905 0C11  
                                   u8385 0914                                     u7845 129F  
                                   u7955 0C45                                     _LWLO 0CAD  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00AF                                     _Load 0143  
                                   _Temp 00D7                                     _main 15E4  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 08BB  
                        __end_of_RF_Main 1B16                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1B99                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1B4C  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1410                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1C40  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1BE0         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1CB6                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EC                          __end_of___awdiv 15E4  
                        __end_of___ftadd 0540                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1B85                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l721 1D42                                    i1l733 1CAD  
                                  i1l744 02E0                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0038  
                __end_of_Timeout_Counter 1DB1                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1355               _setDimmerLights_IntrIOC_GO 131B  
                       __end_of_TMR1_ISR 10FA             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 1748               _setDimmerLights_ErrorClose 16EE  
                       __end_of_TMR1_Set 1BF8                                    _getAD 1F14  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1CEC  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1E06                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 117B            __end_of_setLED_Initialization 1C71  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1748              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0A40  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 163C                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1B29                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D6E                     _setSw_Initialization 1B74  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0B0B  
                         _setMemory_Data 1BB0                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1CFF                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 085E  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1F97                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 097A                 _getMain_All_Error_Status 11DC  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1EB7  
                                 i1l7303 0286                                   i1l7313 02B3  
                                 i1l7307 0295                                   i1l7317 02C8  
                                 i1l7273 0215                                   i1l7277 021C  
                                 i1l7295 0267                                   i1l7299 0276  
                                 i1l6853 134E                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u661_25 01EF                       __size_of_Load_Main 0144  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1E4D                                   u777_25 10F4  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1B0C           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1DC6                                   _Dimmer 013E  
                                 _DlySw1 01D0                                   _DlySw2 01D5  
             __end_of_Mcu_Initialization 1CDA                      __end_of_Buzzer_Main 14A3  
                                 _Memory 0220                                   _Timer1 00C7  
     __end_of_setDimmerLights_TriggerAdj 1F14               _setDimmerLights_TriggerAdj 1EF4  
                                 ___bmul 1CB6                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D5                                   _s_data 00D6  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 1540  
                                 _myMain 00A0                   __end_of_setMemory_Data 1BBC  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 163C                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1B33         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 0306  
            _setDimmerLights_IntrControl 01BA                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1D25  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1D88  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 001B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1DDB  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0AA5  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0047  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$5272 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1F34  
                          __end_of_getAD 1F34                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1BC8                          _getSw_KeyStatus 1066  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1DF0                                ?_WDT_Main 0070  
                      __end_of_Load_Main 044A                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 114E               __end_of_set_TimeoutCleared 1B2E  
               __end_of_setDimmerReClock 1B54                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CD  
                         _DimmerLights22 00CE                     __size_of_setLED_Main 003E  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1B16                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1459                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 0800                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1B54                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 15E4                           _getDelayOff_GO 1C50  
                    _CC2500_WriteCommand 1E34                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BDD                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1B64                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1B45  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 12E4  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1BA4                       _setRFSW_AdjControl 13D0  
                                _IOC_ISR 1C13                                  _IOC_Set 1BE0  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1278                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1E66              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 006A                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1B13  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1B8E          __end_of_setControl_Lights_Table 0B73  
                        setRF_Main@error 00EB                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 09DB  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1BB0                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C93                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1C60  
                                _VarLED1 01DE                                  _VarLED2 01E2  
         __end_of_getDimmerLights_Status 1C50                        __end_of_getRxData 0DFE  
                __end_of_getSw_KeyStatus 1085                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1D4C                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1ED5                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 1590                                  ___ftadd 044A  
                                ___ftdiv 0EA3                                  ___ftneg 1B7C  
                                ___ftmul 0F4C                                  ___fttol 0C5E  
                    __end_of_Switch_Main 2000                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1C93                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0050  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 08BB                                  __ptext2 1C31  
                                __ptext3 12E4                                  __ptext4 0BDD  
                                __ptext5 1F14                                  __ptext6 1CDA  
                                __ptext7 0002                                  __ptext8 07FD  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1CA4  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 12AE                __end_of_Flash_Memory_Read 1E80  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 0540  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1B5C  
                      _DimmerLights_Main 120F           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1B39               __end_of_CC2500_ClearRXFIFO 1B1D  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1B21  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1E80                      _DelayOffPointSelect 1D60  
                         _getMain_LoadOK 1C05                                  clrloop0 1B40  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1C05  
                   end_of_initialization 0047                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 10FA                            _DelayTime_1us 1085  
                      __end_of_setTxData 07BA               __end_of_Flash_Memory_Write 11AA  
                                init_ram 1B39                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1B3A                               _setSw_Main 004B  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 1F97                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1C60                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B73  
                          _CC2500_TxData 097A                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 14A3  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1B85                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1243                       _Mcu_Initialization 1CC8  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 0919  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1E9B                  __end_of_setPercentValue 0A40  
                 __end_of_getMain_LoadOK 1C13                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 1124                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0AA5  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1FB9  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E66                     _setRF_Initialization 1B99  
                     _setMemory_LoopSave 1D12                              _Switch_Main 1FDC  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1CEC                  __end_of_getRF_KeyStatus 1CA4  
                      _setMain_Exception 17A4                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1DB1  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1CC8                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1D38  
        _setDimmerLights_AdjControl$2583 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0028            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 1590  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 1695                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1BA4               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 14F1                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 11AA                          ?_LedPointSelect 0070  
                              _Load_Main 0306                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1B6C  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1EF4          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1B29                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01DA  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 1800                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 07FD                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D1  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D3                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1C71                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 120F                         _CC2500_SIDLEMode 1B21  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 11DC  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2562 0022                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1CFF                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E9  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01A0                            _DimmerLights2 01AF  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1EB7  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00DF  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 0800  
                              _getBuz_GO 1C82      __end_of_Flash_Memory_Initialization 06FB  
            _Flash_Memory_Initialization 061F                                 ?___awdiv 0020  
                              __ptext100 0801                                __ptext101 1124  
                              __ptext110 1D60                                __ptext102 1CB6  
                              __ptext111 1DB1                                __ptext103 1C50  
                              __ptext120 1B19                                __ptext112 1B21  
                              __ptext104 1C40                                __ptext121 1E34  
                              __ptext113 07BA                                __ptext105 1CEC  
                              __ptext130 1CA4                                __ptext122 1B29  
                              __ptext114 10FA                                __ptext106 163C  
                              __ptext131 1C13                                __ptext123 1D9C  
                              __ptext115 1ED5                                __ptext107 1590  
                              __ptext132 1B4C                                __ptext124 1D4C  
                              __ptext116 1F54                                __ptext108 1B54  
                              __ptext133 131B                                __ptext125 1459  
                              __ptext117 1BA4                                __ptext109 1B33  
                               ?___ftadd 0041                                __ptext134 1D38  
                              __ptext126 1B0D                                __ptext118 1085  
                              __ptext119 1B1D                                __ptext128 10D2  
                              __ptext129 01BA                                _getRxData 0D6E  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 005E                  __end_of_setRFSW_Control 1540  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B10  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DF0                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1FDC                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2500 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 1459             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C40                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D74  
                    __end_of_setLED_Main 13D0                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1B19             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1BD4  
                        SwPointSelect@sw 0021                                clear_ram0 1B3F  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 08BB                                _setTxData 06FB  
    __end_of_DimmerLights_Initialization 1E1D              _DimmerLights_Initialization 1E06  
                     _CC2500_ClearRXFIFO 1B19                       _CC2500_ClearTXFIFO 1B1D  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1D9C  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 117B  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 10D2                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1BEC                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0141                     __end_of_RF_RxDisable 1C31  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E4D  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1CDA  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E9  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1BC8  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 12E4  
                  _DlyOff_Initialization 1B33                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1B25  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C5E  
                     __end_of_getLoad_OK 1B6C                    _Switch_Initialization 1BF8  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 131B  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1D4C  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D2                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$7096 0021  
          _getMain_All_Error_Status$7097 0023                 __end_of_getDimmer_LoadOK 1B74  
                    _Load_Initialization 1B2E                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1F75  
                       ??_LedPointSelect 0020                                 ___ftpack 0919  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002D                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1392               __end_of_setRF_DimmerLights 17A4  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                               __ptext10 1B16                                 __ptext11 0800  
                               __ptext20 1BF8                                 __ptext12 1FDC  
                               __ptext21 1B74                                 __ptext13 004B  
                               __ptext30 1355                                 __ptext22 1DDB  
                               __ptext14 1D88                                 __ptext31 13D0  
                               __ptext23 1B13                                 __ptext15 1243  
                               __ptext40 097A                                 __ptext32 11AA  
                               __ptext24 0540                                 __ptext16 1066  
                               __ptext41 0B73                                 __ptext33 1FB9  
                               __ptext25 0D6E                                 __ptext17 1D74  
                               __ptext50 1BE0                                 __ptext42 1F97  
                               __ptext34 0A40                                 __ptext26 12AE  
                               __ptext18 17A4                                 __ptext51 1B25  
                               __ptext43 1E1D                                 __ptext35 0F4C  
                               __ptext27 1D12                                 __ptext19 1D25  
                               __ptext60 1BD4                                 __ptext52 1B45  
                               __ptext44 1B10                                 __ptext36 1CFF  
                               __ptext28 0B0B                                 __ptext61 1392  
                               __ptext53 0306                                 __ptext45 1B99  
                               __ptext37 1C93                                 __ptext29 14F1  
                               __ptext70 1B85                                 __ptext62 1BC8  
                               __ptext54 1C05                                 __ptext46 1CC8  
                               __ptext38 1C82                                 __ptext71 1E66  
                               __ptext63 1C60                                 __ptext55 1B6C  
                               __ptext47 1B8E                                 __ptext39 1C22  
                               __ptext80 1B7C                                 __ptext72 120F  
                               __ptext64 1278                                 __ptext56 1DF0  
                               __ptext48 1BEC                                 __ptext81 0EA3  
                               __ptext73 1695                                 __ptext65 14A3  
                               __ptext57 1C71                                 __ptext49 1E4D  
                               __ptext90 1B64                                 __ptext82 044A  
                               __ptext74 0AA5                                 __ptext66 1BBC  
                               __ptext58 1B2E                                 __ptext91 1E06  
                               __ptext83 1F75                                 __ptext75 0CE5  
                               __ptext67 061F                                 __ptext59 1E9B  
                               __ptext92 10AB                                 __ptext84 0919  
                               __ptext76 06FB                                 __ptext68 1BB0  
                               __ptext93 1B0C                                 __ptext85 1540  
                               __ptext77 1748                                 __ptext69 117B  
                               __ptext94 1B5C                                 __ptext86 1E80  
                               __ptext78 09DB                                 __ptext95 085E  
                               __ptext87 1DC6                                 __ptext79 0C5E  
                               __ptext96 16EE                                 __ptext88 11DC  
                               __ptext97 1410                                 __ptext89 114E  
                               __ptext98 1EF4                                 __ptext99 1EB7  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1D38  
          __end_of_Dimmer_Initialization 1B0D             __end_of_setDimmerLights_Main 16EE  
           __end_of_setDimmerLights_Line 1DDB                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 1392                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1D88  
               __end_of_CC2500_SIDLEMode 1B25               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1D74               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00EA                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1E1D  
                     _CC2500_InitPATable 1ED5                 __end_of_setMemory_Modify 1D12  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 061F  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EC  
                               main@argv 00EE                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$6350 0022                     _getSw_KeyStatus$6349 0021  
                        _CC2500_PowerRST 07BA                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 14F1                        ??_getPercentValue 005C  
                            _setLog_Code 12AE              __end_of_Flash_Memory_Unlock 1B8E  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1F54  
                     __end_of_setSw_Main 01BA                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1124                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1C82              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10D2  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 10AB              __end_of_setDimmerLights_Adj 0B0B  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1B10     __size_of_setDimmerLights_IntrControl 014C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1BBC  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1B5C      __size_of_setDimmerLights_IntrIOC_GO 003A  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B64       __end_of_setDimmerLights_AdjControl 1278  
             _setDimmerLights_AdjControl 1243                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0801  
       __size_of_setControl_Lights_Table 0068                   __end_of_DelayTimejudge 114E  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10AB                  __end_of_CC2500_ReadByte 1E34  
           __end_of_setSw_Initialization 1B7C                          _Timeout_Counter 1D9C  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1C22               __end_of_LED_Initialization 1BD4  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 0801  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1B13  
                  __end_of_CC2500_RxData 0BDD                    __end_of_CC2500_TxData 09DB  
                  _setLoad_AH_AL_Restore 1E9B                  __end_of_CC2500_PowerRST 07FD  
         getAll_DimmerLights_AdjGO@adjgo 0021  
