

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 17 15:46:34 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	intentry,global,class=CODE,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   137                           	dabs	1,0x7E,2
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0298                     	;# 
   232  0298                     	;# 
   233  0299                     	;# 
   234  029A                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  0FE4                     	;# 
   239  0FE5                     	;# 
   240  0FE6                     	;# 
   241  0FE7                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  008C                     	;# 
   277  008D                     	;# 
   278  008E                     	;# 
   279  0090                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  011D                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0194                     	;# 
   307  0195                     	;# 
   308  0196                     	;# 
   309  0197                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020D                     	;# 
   322  0210                     	;# 
   323  0211                     	;# 
   324  0211                     	;# 
   325  0212                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0213                     	;# 
   329  0214                     	;# 
   330  0214                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0216                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0217                     	;# 
   338  0291                     	;# 
   339  0291                     	;# 
   340  0292                     	;# 
   341  0293                     	;# 
   342  0298                     	;# 
   343  0298                     	;# 
   344  0299                     	;# 
   345  029A                     	;# 
   346  0394                     	;# 
   347  0395                     	;# 
   348  0396                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0090                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  0116                     	;# 
   407  0117                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018E                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0194                     	;# 
   418  0195                     	;# 
   419  0196                     	;# 
   420  0197                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020D                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0291                     	;# 
   450  0291                     	;# 
   451  0292                     	;# 
   452  0293                     	;# 
   453  0298                     	;# 
   454  0298                     	;# 
   455  0299                     	;# 
   456  029A                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE9                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEF                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  0010                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0090                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  0199                     	;# 
   533  019A                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019C                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020D                     	;# 
   544  0210                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0298                     	;# 
   565  0298                     	;# 
   566  0299                     	;# 
   567  029A                     	;# 
   568  0394                     	;# 
   569  0395                     	;# 
   570  0396                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001C                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0097                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009B                     	;# 
   622  009C                     	;# 
   623  009D                     	;# 
   624  009E                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0197                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020D                     	;# 
   655  0210                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0291                     	;# 
   672  0291                     	;# 
   673  0292                     	;# 
   674  0293                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  0394                     	;# 
   680  0395                     	;# 
   681  0396                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0016                     	;# 
   714  0017                     	;# 
   715  0018                     	;# 
   716  0019                     	;# 
   717  001A                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  008C                     	;# 
   721  008D                     	;# 
   722  008E                     	;# 
   723  0090                     	;# 
   724  0091                     	;# 
   725  0092                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0099                     	;# 
   730  009A                     	;# 
   731  009B                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010D                     	;# 
   738  010E                     	;# 
   739  0116                     	;# 
   740  0117                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018D                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0194                     	;# 
   751  0195                     	;# 
   752  0196                     	;# 
   753  0197                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020D                     	;# 
   766  0210                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  029A                     	;# 
   790  0394                     	;# 
   791  0395                     	;# 
   792  0396                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  0010                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  010C                     	;# 
   848  010D                     	;# 
   849  010E                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  011D                     	;# 
   853  018C                     	;# 
   854  018D                     	;# 
   855  018E                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0197                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  0394                     	;# 
   902  0395                     	;# 
   903  0396                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915  0000                     	;# 
   916  0001                     	;# 
   917  0002                     	;# 
   918  0003                     	;# 
   919  0004                     	;# 
   920  0005                     	;# 
   921  0006                     	;# 
   922  0007                     	;# 
   923  0008                     	;# 
   924  0009                     	;# 
   925  000A                     	;# 
   926  000B                     	;# 
   927  000C                     	;# 
   928  000D                     	;# 
   929  000E                     	;# 
   930  0010                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  0090                     	;# 
   946  0091                     	;# 
   947  0092                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  010C                     	;# 
   959  010D                     	;# 
   960  010E                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020D                     	;# 
   988  0210                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0298                     	;# 
  1009  0298                     	;# 
  1010  0299                     	;# 
  1011  029A                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000D                     	;# 
  1040  000E                     	;# 
  1041  0010                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  008C                     	;# 
  1054  008D                     	;# 
  1055  008E                     	;# 
  1056  0090                     	;# 
  1057  0091                     	;# 
  1058  0092                     	;# 
  1059  0095                     	;# 
  1060  0096                     	;# 
  1061  0097                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009E                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0116                     	;# 
  1073  0117                     	;# 
  1074  011D                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019C                     	;# 
  1094  019C                     	;# 
  1095  019D                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  0210                     	;# 
  1100  0211                     	;# 
  1101  0211                     	;# 
  1102  0212                     	;# 
  1103  0212                     	;# 
  1104  0213                     	;# 
  1105  0213                     	;# 
  1106  0214                     	;# 
  1107  0214                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0216                     	;# 
  1112  0216                     	;# 
  1113  0217                     	;# 
  1114  0217                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  0394                     	;# 
  1124  0395                     	;# 
  1125  0396                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008D                     	;# 
  1166  008E                     	;# 
  1167  0090                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0095                     	;# 
  1171  0096                     	;# 
  1172  0097                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  010C                     	;# 
  1181  010D                     	;# 
  1182  010E                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0197                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019C                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020D                     	;# 
  1210  0210                     	;# 
  1211  0211                     	;# 
  1212  0211                     	;# 
  1213  0212                     	;# 
  1214  0212                     	;# 
  1215  0213                     	;# 
  1216  0213                     	;# 
  1217  0214                     	;# 
  1218  0214                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0215                     	;# 
  1222  0216                     	;# 
  1223  0216                     	;# 
  1224  0217                     	;# 
  1225  0217                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0298                     	;# 
  1231  0298                     	;# 
  1232  0299                     	;# 
  1233  029A                     	;# 
  1234  0394                     	;# 
  1235  0395                     	;# 
  1236  0396                     	;# 
  1237  0FE4                     	;# 
  1238  0FE5                     	;# 
  1239  0FE6                     	;# 
  1240  0FE7                     	;# 
  1241  0FE8                     	;# 
  1242  0FE9                     	;# 
  1243  0FEA                     	;# 
  1244  0FEB                     	;# 
  1245  0FED                     	;# 
  1246  0FEE                     	;# 
  1247  0FEF                     	;# 
  1248  0000                     	;# 
  1249  0001                     	;# 
  1250  0002                     	;# 
  1251  0003                     	;# 
  1252  0004                     	;# 
  1253  0005                     	;# 
  1254  0006                     	;# 
  1255  0007                     	;# 
  1256  0008                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  0010                     	;# 
  1264  0011                     	;# 
  1265  0012                     	;# 
  1266  0015                     	;# 
  1267  0016                     	;# 
  1268  0016                     	;# 
  1269  0017                     	;# 
  1270  0018                     	;# 
  1271  0019                     	;# 
  1272  001A                     	;# 
  1273  001B                     	;# 
  1274  001C                     	;# 
  1275  008C                     	;# 
  1276  008D                     	;# 
  1277  008E                     	;# 
  1278  0090                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0095                     	;# 
  1282  0096                     	;# 
  1283  0097                     	;# 
  1284  0099                     	;# 
  1285  009A                     	;# 
  1286  009B                     	;# 
  1287  009B                     	;# 
  1288  009C                     	;# 
  1289  009D                     	;# 
  1290  009E                     	;# 
  1291  010C                     	;# 
  1292  010D                     	;# 
  1293  010E                     	;# 
  1294  0116                     	;# 
  1295  0117                     	;# 
  1296  011D                     	;# 
  1297  018C                     	;# 
  1298  018D                     	;# 
  1299  018E                     	;# 
  1300  0191                     	;# 
  1301  0191                     	;# 
  1302  0192                     	;# 
  1303  0193                     	;# 
  1304  0193                     	;# 
  1305  0194                     	;# 
  1306  0195                     	;# 
  1307  0196                     	;# 
  1308  0197                     	;# 
  1309  0199                     	;# 
  1310  019A                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019C                     	;# 
  1316  019C                     	;# 
  1317  019D                     	;# 
  1318  019E                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0291                     	;# 
  1338  0291                     	;# 
  1339  0292                     	;# 
  1340  0293                     	;# 
  1341  0298                     	;# 
  1342  0298                     	;# 
  1343  0299                     	;# 
  1344  029A                     	;# 
  1345  0394                     	;# 
  1346  0395                     	;# 
  1347  0396                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  000E                     	;# 
  1374  0010                     	;# 
  1375  0011                     	;# 
  1376  0012                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  008E                     	;# 
  1389  0090                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010D                     	;# 
  1404  010E                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  011D                     	;# 
  1408  018C                     	;# 
  1409  018D                     	;# 
  1410  018E                     	;# 
  1411  0191                     	;# 
  1412  0191                     	;# 
  1413  0192                     	;# 
  1414  0193                     	;# 
  1415  0193                     	;# 
  1416  0194                     	;# 
  1417  0195                     	;# 
  1418  0196                     	;# 
  1419  0197                     	;# 
  1420  0199                     	;# 
  1421  019A                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019C                     	;# 
  1428  019D                     	;# 
  1429  019E                     	;# 
  1430  019F                     	;# 
  1431  020D                     	;# 
  1432  0210                     	;# 
  1433  0211                     	;# 
  1434  0211                     	;# 
  1435  0212                     	;# 
  1436  0212                     	;# 
  1437  0213                     	;# 
  1438  0213                     	;# 
  1439  0214                     	;# 
  1440  0214                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0215                     	;# 
  1444  0216                     	;# 
  1445  0216                     	;# 
  1446  0217                     	;# 
  1447  0217                     	;# 
  1448  0291                     	;# 
  1449  0291                     	;# 
  1450  0292                     	;# 
  1451  0293                     	;# 
  1452  0298                     	;# 
  1453  0298                     	;# 
  1454  0299                     	;# 
  1455  029A                     	;# 
  1456  0394                     	;# 
  1457  0395                     	;# 
  1458  0396                     	;# 
  1459  0FE4                     	;# 
  1460  0FE5                     	;# 
  1461  0FE6                     	;# 
  1462  0FE7                     	;# 
  1463  0FE8                     	;# 
  1464  0FE9                     	;# 
  1465  0FEA                     	;# 
  1466  0FEB                     	;# 
  1467  0FED                     	;# 
  1468  0FEE                     	;# 
  1469  0FEF                     	;# 
  1470  0000                     	;# 
  1471  0001                     	;# 
  1472  0002                     	;# 
  1473  0003                     	;# 
  1474  0004                     	;# 
  1475  0005                     	;# 
  1476  0006                     	;# 
  1477  0007                     	;# 
  1478  0008                     	;# 
  1479  0009                     	;# 
  1480  000A                     	;# 
  1481  000B                     	;# 
  1482  000C                     	;# 
  1483  000D                     	;# 
  1484  000E                     	;# 
  1485  0010                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0015                     	;# 
  1489  0016                     	;# 
  1490  0016                     	;# 
  1491  0017                     	;# 
  1492  0018                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0095                     	;# 
  1504  0096                     	;# 
  1505  0097                     	;# 
  1506  0099                     	;# 
  1507  009A                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  010C                     	;# 
  1514  010D                     	;# 
  1515  010E                     	;# 
  1516  0116                     	;# 
  1517  0117                     	;# 
  1518  011D                     	;# 
  1519  018C                     	;# 
  1520  018D                     	;# 
  1521  018E                     	;# 
  1522  0191                     	;# 
  1523  0191                     	;# 
  1524  0192                     	;# 
  1525  0193                     	;# 
  1526  0193                     	;# 
  1527  0194                     	;# 
  1528  0195                     	;# 
  1529  0196                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0298                     	;# 
  1564  0298                     	;# 
  1565  0299                     	;# 
  1566  029A                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0010                     	;# 
  1597  0011                     	;# 
  1598  0012                     	;# 
  1599  0015                     	;# 
  1600  0016                     	;# 
  1601  0016                     	;# 
  1602  0017                     	;# 
  1603  0018                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  008C                     	;# 
  1609  008D                     	;# 
  1610  008E                     	;# 
  1611  0090                     	;# 
  1612  0091                     	;# 
  1613  0092                     	;# 
  1614  0095                     	;# 
  1615  0096                     	;# 
  1616  0097                     	;# 
  1617  0099                     	;# 
  1618  009A                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  010C                     	;# 
  1625  010D                     	;# 
  1626  010E                     	;# 
  1627  0116                     	;# 
  1628  0117                     	;# 
  1629  011D                     	;# 
  1630  018C                     	;# 
  1631  018D                     	;# 
  1632  018E                     	;# 
  1633  0191                     	;# 
  1634  0191                     	;# 
  1635  0192                     	;# 
  1636  0193                     	;# 
  1637  0193                     	;# 
  1638  0194                     	;# 
  1639  0195                     	;# 
  1640  0196                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  019A                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019C                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020D                     	;# 
  1654  0210                     	;# 
  1655  0211                     	;# 
  1656  0211                     	;# 
  1657  0212                     	;# 
  1658  0212                     	;# 
  1659  0213                     	;# 
  1660  0213                     	;# 
  1661  0214                     	;# 
  1662  0214                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0215                     	;# 
  1666  0216                     	;# 
  1667  0216                     	;# 
  1668  0217                     	;# 
  1669  0217                     	;# 
  1670  0291                     	;# 
  1671  0291                     	;# 
  1672  0292                     	;# 
  1673  0293                     	;# 
  1674  0298                     	;# 
  1675  0298                     	;# 
  1676  0299                     	;# 
  1677  029A                     	;# 
  1678  0394                     	;# 
  1679  0395                     	;# 
  1680  0396                     	;# 
  1681  0FE4                     	;# 
  1682  0FE5                     	;# 
  1683  0FE6                     	;# 
  1684  0FE7                     	;# 
  1685  0FE8                     	;# 
  1686  0FE9                     	;# 
  1687  0FEA                     	;# 
  1688  0FEB                     	;# 
  1689  0FED                     	;# 
  1690  0FEE                     	;# 
  1691  0FEF                     	;# 
  1692  0000                     	;# 
  1693  0001                     	;# 
  1694  0002                     	;# 
  1695  0003                     	;# 
  1696  0004                     	;# 
  1697  0005                     	;# 
  1698  0006                     	;# 
  1699  0007                     	;# 
  1700  0008                     	;# 
  1701  0009                     	;# 
  1702  000A                     	;# 
  1703  000B                     	;# 
  1704  000C                     	;# 
  1705  000D                     	;# 
  1706  000E                     	;# 
  1707  0010                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0090                     	;# 
  1723  0091                     	;# 
  1724  0092                     	;# 
  1725  0095                     	;# 
  1726  0096                     	;# 
  1727  0097                     	;# 
  1728  0099                     	;# 
  1729  009A                     	;# 
  1730  009B                     	;# 
  1731  009B                     	;# 
  1732  009C                     	;# 
  1733  009D                     	;# 
  1734  009E                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020D                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0291                     	;# 
  1782  0291                     	;# 
  1783  0292                     	;# 
  1784  0293                     	;# 
  1785  0298                     	;# 
  1786  0298                     	;# 
  1787  0299                     	;# 
  1788  029A                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0FE4                     	;# 
  1793  0FE5                     	;# 
  1794  0FE6                     	;# 
  1795  0FE7                     	;# 
  1796  0FE8                     	;# 
  1797  0FE9                     	;# 
  1798  0FEA                     	;# 
  1799  0FEB                     	;# 
  1800  0FED                     	;# 
  1801  0FEE                     	;# 
  1802  0FEF                     	;# 
  1803  0000                     	;# 
  1804  0001                     	;# 
  1805  0002                     	;# 
  1806  0003                     	;# 
  1807  0004                     	;# 
  1808  0005                     	;# 
  1809  0006                     	;# 
  1810  0007                     	;# 
  1811  0008                     	;# 
  1812  0009                     	;# 
  1813  000A                     	;# 
  1814  000B                     	;# 
  1815  000C                     	;# 
  1816  000D                     	;# 
  1817  000E                     	;# 
  1818  0010                     	;# 
  1819  0011                     	;# 
  1820  0012                     	;# 
  1821  0015                     	;# 
  1822  0016                     	;# 
  1823  0016                     	;# 
  1824  0017                     	;# 
  1825  0018                     	;# 
  1826  0019                     	;# 
  1827  001A                     	;# 
  1828  001B                     	;# 
  1829  001C                     	;# 
  1830  008C                     	;# 
  1831  008D                     	;# 
  1832  008E                     	;# 
  1833  0090                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0095                     	;# 
  1837  0096                     	;# 
  1838  0097                     	;# 
  1839  0099                     	;# 
  1840  009A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  011D                     	;# 
  1852  018C                     	;# 
  1853  018D                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  020D                     	;# 
  1876  0210                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0298                     	;# 
  1897  0298                     	;# 
  1898  0299                     	;# 
  1899  029A                     	;# 
  1900  0394                     	;# 
  1901  0395                     	;# 
  1902  0396                     	;# 
  1903  0FE4                     	;# 
  1904  0FE5                     	;# 
  1905  0FE6                     	;# 
  1906  0FE7                     	;# 
  1907  0FE8                     	;# 
  1908  0FE9                     	;# 
  1909  0FEA                     	;# 
  1910  0FEB                     	;# 
  1911  0FED                     	;# 
  1912  0FEE                     	;# 
  1913  0FEF                     	;# 
  1914  0000                     	;# 
  1915  0001                     	;# 
  1916  0002                     	;# 
  1917  0003                     	;# 
  1918  0004                     	;# 
  1919  0005                     	;# 
  1920  0006                     	;# 
  1921  0007                     	;# 
  1922  0008                     	;# 
  1923  0009                     	;# 
  1924  000A                     	;# 
  1925  000B                     	;# 
  1926  000C                     	;# 
  1927  000D                     	;# 
  1928  000E                     	;# 
  1929  0010                     	;# 
  1930  0011                     	;# 
  1931  0012                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  008C                     	;# 
  1942  008D                     	;# 
  1943  008E                     	;# 
  1944  0090                     	;# 
  1945  0091                     	;# 
  1946  0092                     	;# 
  1947  0095                     	;# 
  1948  0096                     	;# 
  1949  0097                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0116                     	;# 
  1961  0117                     	;# 
  1962  011D                     	;# 
  1963  018C                     	;# 
  1964  018D                     	;# 
  1965  018E                     	;# 
  1966  0191                     	;# 
  1967  0191                     	;# 
  1968  0192                     	;# 
  1969  0193                     	;# 
  1970  0193                     	;# 
  1971  0194                     	;# 
  1972  0195                     	;# 
  1973  0196                     	;# 
  1974  0197                     	;# 
  1975  0199                     	;# 
  1976  019A                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019C                     	;# 
  1982  019C                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019F                     	;# 
  1986  020D                     	;# 
  1987  0210                     	;# 
  1988  0211                     	;# 
  1989  0211                     	;# 
  1990  0212                     	;# 
  1991  0212                     	;# 
  1992  0213                     	;# 
  1993  0213                     	;# 
  1994  0214                     	;# 
  1995  0214                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0215                     	;# 
  1999  0216                     	;# 
  2000  0216                     	;# 
  2001  0217                     	;# 
  2002  0217                     	;# 
  2003  0291                     	;# 
  2004  0291                     	;# 
  2005  0292                     	;# 
  2006  0293                     	;# 
  2007  0298                     	;# 
  2008  0298                     	;# 
  2009  0299                     	;# 
  2010  029A                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE9                     	;# 
  2020  0FEA                     	;# 
  2021  0FEB                     	;# 
  2022  0FED                     	;# 
  2023  0FEE                     	;# 
  2024  0FEF                     	;# 
  2025                           
  2026                           	psect	idataBANK4
  2027  1327                     __pidataBANK4:	
  2028                           
  2029                           ;initializer for __product
  2030  1327  3463               	retlw	99
  2031  1328  3402               	retlw	2
  2032  1329  3400               	retlw	0
  2033  132A  3400               	retlw	0
  2034  132B  3400               	retlw	0
  2035  132C  3400               	retlw	0
  2036  132D  3400               	retlw	0
  2037  132E  3400               	retlw	0
  2038  132F  3400               	retlw	0
  2039  1330  3400               	retlw	0
  2040  1331  3400               	retlw	0
  2041  1332  3400               	retlw	0
  2042  1333  34FF               	retlw	255
  2043  1334  34FF               	retlw	255
  2044  1335  34FF               	retlw	255
  2045  1336  3400               	retlw	0
  2046  1337  3400               	retlw	0
  2047  1338  3400               	retlw	0
  2048  1339  3400               	retlw	0
  2049  133A  3400               	retlw	0
  2050  133B  3400               	retlw	0
  2051  133C  3400               	retlw	0
  2052  133D  3400               	retlw	0
  2053  133E  3400               	retlw	0
  2054  133F  3400               	retlw	0
  2055  1340  3400               	retlw	0
  2056  1341  3400               	retlw	0
  2057  1342  3400               	retlw	0
  2058  1343  3400               	retlw	0
  2059  1344  3400               	retlw	0
  2060  1345  3400               	retlw	0
  2061  1346  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext
  2064  1000                     __pstringtext:	
  2065  1000                     _CC2500_registers_address:	
  2066  1000  3403               	retlw	3
  2067  1001  3416               	retlw	22
  2068  1002  3417               	retlw	23
  2069  1003  341E               	retlw	30
  2070  1004  341F               	retlw	31
  2071  1005  3420               	retlw	32
  2072  1006  342A               	retlw	42
  2073  1007  342B               	retlw	43
  2074  1008  340B               	retlw	11
  2075  1009  340C               	retlw	12
  2076  100A  340D               	retlw	13
  2077  100B  340E               	retlw	14
  2078  100C  340F               	retlw	15
  2079  100D  3410               	retlw	16
  2080  100E  3411               	retlw	17
  2081  100F  3412               	retlw	18
  2082  1010  3413               	retlw	19
  2083  1011  3414               	retlw	20
  2084  1012  340A               	retlw	10
  2085  1013  3415               	retlw	21
  2086  1014  3421               	retlw	33
  2087  1015  3422               	retlw	34
  2088  1016  3418               	retlw	24
  2089  1017  3419               	retlw	25
  2090  1018  341A               	retlw	26
  2091  1019  341B               	retlw	27
  2092  101A  341C               	retlw	28
  2093  101B  341D               	retlw	29
  2094  101C  3423               	retlw	35
  2095  101D  3424               	retlw	36
  2096  101E  3425               	retlw	37
  2097  101F  3426               	retlw	38
  2098  1020  3429               	retlw	41
  2099  1021  342C               	retlw	44
  2100  1022  342D               	retlw	45
  2101  1023  342E               	retlw	46
  2102  1024  3400               	retlw	0
  2103  1025  3401               	retlw	1
  2104  1026  3402               	retlw	2
  2105  1027  3407               	retlw	7
  2106  1028  3408               	retlw	8
  2107  1029  3409               	retlw	9
  2108  102A  3406               	retlw	6
  2109  102B  3404               	retlw	4
  2110  102C  3405               	retlw	5
  2111  102D  3427               	retlw	39
  2112  102E  3428               	retlw	40
  2113  102F                     __end_of_CC2500_registers_address:	
  2114  102F                     _CC2500_rfSettings:	
  2115  102F  3407               	retlw	7
  2116  1030  3407               	retlw	7
  2117  1031  3430               	retlw	48
  2118  1032  3487               	retlw	135
  2119  1033  346B               	retlw	107
  2120  1034  34F8               	retlw	248
  2121  1035  347F               	retlw	127
  2122  1036  343F               	retlw	63
  2123  1037  3409               	retlw	9
  2124  1038  3400               	retlw	0
  2125  1039  345C               	retlw	92
  2126  103A  34A7               	retlw	167
  2127  103B  3462               	retlw	98
  2128  103C  3486               	retlw	134
  2129  103D  3483               	retlw	131
  2130  103E  3403               	retlw	3
  2131  103F  3422               	retlw	34
  2132  1040  34F8               	retlw	248
  2133  1041  3400               	retlw	0
  2134  1042  3444               	retlw	68
  2135  1043  34B6               	retlw	182
  2136  1044  3410               	retlw	16
  2137  1045  3418               	retlw	24
  2138  1046  341D               	retlw	29
  2139  1047  341C               	retlw	28
  2140  1048  34C7               	retlw	199
  2141  1049  3400               	retlw	0
  2142  104A  34B2               	retlw	178
  2143  104B  34EA               	retlw	234
  2144  104C  340A               	retlw	10
  2145  104D  3400               	retlw	0
  2146  104E  3411               	retlw	17
  2147  104F  3459               	retlw	89
  2148  1050  3488               	retlw	136
  2149  1051  3431               	retlw	49
  2150  1052  340B               	retlw	11
  2151  1053  342F               	retlw	47
  2152  1054  342E               	retlw	46
  2153  1055  3406               	retlw	6
  2154  1056  3404               	retlw	4
  2155  1057  3405               	retlw	5
  2156  1058  3400               	retlw	0
  2157  1059  3430               	retlw	48
  2158  105A  34D3               	retlw	211
  2159  105B  3491               	retlw	145
  2160  105C  3441               	retlw	65
  2161  105D  3400               	retlw	0
  2162  105E                     __end_of_CC2500_rfSettings:	
  2163  105E                     _CC2500_patable_vaule:	
  2164  105E  34FE               	retlw	254
  2165  105F  34FE               	retlw	254
  2166  1060  34FE               	retlw	254
  2167  1061  34FE               	retlw	254
  2168  1062  34FE               	retlw	254
  2169  1063  34FE               	retlw	254
  2170  1064  34FE               	retlw	254
  2171  1065  34FE               	retlw	254
  2172  1066                     __end_of_CC2500_patable_vaule:	
  2173                           
  2174                           	psect	nvBANK0
  2175  006F                     __pnvBANK0:	
  2176  006F                     _product:	
  2177  006F                     	ds	1
  2178  000C                     _PORTA	set	12
  2179  000D                     _PORTB	set	13
  2180  000E                     _PORTC	set	14
  2181  0018                     _T1CON	set	24
  2182  0017                     _TMR1H	set	23
  2183  0016                     _TMR1L	set	22
  2184  005F                     _GIE	set	95
  2185  005B                     _IOCIE	set	91
  2186  0058                     _IOCIF	set	88
  2187  005E                     _PEIE	set	94
  2188  0060                     _RA0	set	96
  2189  0063                     _RA3	set	99
  2190  0064                     _RA4	set	100
  2191  0066                     _RA6	set	102
  2192  0067                     _RA7	set	103
  2193  0068                     _RB0	set	104
  2194  0069                     _RB1	set	105
  2195  006B                     _RB3	set	107
  2196  006C                     _RB4	set	108
  2197  006D                     _RB5	set	109
  2198  0070                     _RC0	set	112
  2199  0071                     _RC1	set	113
  2200  0072                     _RC2	set	114
  2201  0074                     _RC4	set	116
  2202  0075                     _RC5	set	117
  2203  0077                     _RC7	set	119
  2204  0088                     _TMR1IF	set	136
  2205  009D                     _ADCON0	set	157
  2206  009E                     _ADCON1	set	158
  2207  009C                     _ADRESH	set	156
  2208  009B                     _ADRESL	set	155
  2209  0099                     _OSCCON	set	153
  2210  008C                     _TRISA	set	140
  2211  008D                     _TRISB	set	141
  2212  008E                     _TRISC	set	142
  2213  0097                     _WDTCON	set	151
  2214  04E9                     _GO_nDONE	set	1257
  2215  0488                     _TMR1IE	set	1160
  2216  0117                     _FVRCON	set	279
  2217  010C                     _LATA	set	268
  2218  010D                     _LATB	set	269
  2219  010E                     _LATC	set	270
  2220  018C                     _ANSELA	set	396
  2221  018D                     _ANSELB	set	397
  2222  018E                     _ANSELC	set	398
  2223  0192                     _PMADRH	set	402
  2224  0191                     _PMADRL	set	401
  2225  0196                     _PMCON2	set	406
  2226  0194                     _PMDATH	set	404
  2227  0193                     _PMDATL	set	403
  2228  0CAE                     _CFGS	set	3246
  2229  0CAC                     _FREE	set	3244
  2230  0CAD                     _LWLO	set	3245
  2231  0CA8                     _RD	set	3240
  2232  0CA9                     _WR	set	3241
  2233  0CAA                     _WREN	set	3242
  2234  1069                     _WPUB1	set	4201
  2235  106A                     _WPUB2	set	4202
  2236  0396                     _IOCBF	set	918
  2237  0395                     _IOCBN	set	917
  2238  0394                     _IOCBP	set	916
  2239  1CB2                     _IOCBF2	set	7346
  2240                           
  2241                           ; #config settings
  2242  0000                     
  2243                           	psect	cinit
  2244  0015                     start_initialization:	
  2245  0015                     __initialization:	
  2246                           
  2247                           ; Clear objects allocated to BITCOMMON
  2248  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2249                           
  2250                           ; Clear objects allocated to COMMON
  2251  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2252  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2253  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2254  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2255                           
  2256                           ; Clear objects allocated to BANK1
  2257  001A  30A0               	movlw	low __pbssBANK1
  2258  001B  0084               	movwf	4
  2259  001C  3000               	movlw	high __pbssBANK1
  2260  001D  0085               	movwf	5
  2261  001E  3043               	movlw	67
  2262  001F  319F  2720  3180   	fcall	clear_ram0
  2263                           
  2264                           ; Clear objects allocated to BANK2
  2265  0022  3020               	movlw	low __pbssBANK2
  2266  0023  0084               	movwf	4
  2267  0024  3001               	movlw	high __pbssBANK2
  2268  0025  0085               	movwf	5
  2269  0026  3048               	movlw	72
  2270  0027  319F  2720  3180   	fcall	clear_ram0
  2271                           
  2272                           ; Clear objects allocated to BANK3
  2273  002A  30A0               	movlw	low __pbssBANK3
  2274  002B  0084               	movwf	4
  2275  002C  3001               	movlw	high __pbssBANK3
  2276  002D  0085               	movwf	5
  2277  002E  3037               	movlw	55
  2278  002F  319F  2720  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Initialize objects allocated to BANK4
  2281  0032  3027               	movlw	low __pidataBANK4
  2282  0033  0084               	movwf	4
  2283  0034  3093               	movlw	(high __pidataBANK4)| (0+128)
  2284  0035  0085               	movwf	5
  2285  0036  3020               	movlw	low __pdataBANK4
  2286  0037  0086               	movwf	6
  2287  0038  3002               	movlw	high __pdataBANK4
  2288  0039  0087               	movwf	7
  2289  003A  3020               	movlw	32
  2290  003B  319F  271A         	fcall	init_ram
  2291  003D                     end_of_initialization:	
  2292                           ;End of C runtime variable initialization code
  2293                           
  2294  003D                     __end_of__initialization:	
  2295  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2296  003E  0020               	movlb	0
  2297  003F  3196  2EE9         	ljmp	_main	;jump to C main() function
  2298                           
  2299                           	psect	bitbssCOMMON
  2300  03E0                     __pbitbssCOMMON:	
  2301  03E0                     _Receive_OK:	
  2302  03E0                     	ds	1
  2303  03E1                     _Transceive_OK:	
  2304  03E1                     	ds	1
  2305                           
  2306                           	psect	bssCOMMON
  2307  0078                     __pbssCOMMON:	
  2308  0078                     _DelayOff:	
  2309  0078                     	ds	1
  2310  0079                     _DimmerLights:	
  2311  0079                     	ds	1
  2312  007A                     _DimmerLightsIntr:	
  2313  007A                     	ds	1
  2314  007B                     _Sw:	
  2315  007B                     	ds	1
  2316                           
  2317                           	psect	bssBANK1
  2318  00A0                     __pbssBANK1:	
  2319  00A0                     _myMain:	
  2320  00A0                     	ds	16
  2321  00B0                     _Buz1:	
  2322  00B0                     	ds	12
  2323  00BC                     _RF1:	
  2324  00BC                     	ds	12
  2325  00C8                     _Dimmer:	
  2326  00C8                     	ds	3
  2327  00CB                     _Timer1:	
  2328  00CB                     	ds	3
  2329  00CE                     _RF_Count:	
  2330  00CE                     	ds	2
  2331  00D0                     _WDT:	
  2332  00D0                     	ds	2
  2333  00D2                     _CRC:	
  2334  00D2                     	ds	1
  2335  00D3                     _DimmerLights11:	
  2336  00D3                     	ds	1
  2337  00D4                     _DimmerLights22:	
  2338  00D4                     	ds	1
  2339  00D5                     _DimmerLightsIntrIOC:	
  2340  00D5                     	ds	1
  2341  00D6                     _LED:	
  2342  00D6                     	ds	1
  2343  00D7                     _RSSI:	
  2344  00D7                     	ds	1
  2345  00D8                     _Rx_Length:	
  2346  00D8                     	ds	1
  2347  00D9                     _SPI0Buffer:	
  2348  00D9                     	ds	1
  2349  00DA                     _SwDetect:	
  2350  00DA                     	ds	1
  2351  00DB                     _Tx_Length:	
  2352  00DB                     	ds	1
  2353  00DC                     _r_address:	
  2354  00DC                     	ds	1
  2355  00DD                     _r_data:	
  2356  00DD                     	ds	1
  2357  00DE                     _s_data:	
  2358  00DE                     	ds	1
  2359  00DF                     _DlySw1:	
  2360  00DF                     	ds	2
  2361  00E1                     _DlySw2:	
  2362  00E1                     	ds	2
  2363                           
  2364                           	psect	bssBANK2
  2365  0120                     __pbssBANK2:	
  2366  0120                     _RF_Data:	
  2367  0120                     	ds	30
  2368  013E                     _DimmerLights1:	
  2369  013E                     	ds	15
  2370  014D                     _DimmerLights2:	
  2371  014D                     	ds	15
  2372  015C                     _VarErrLED:	
  2373  015C                     	ds	4
  2374  0160                     _VarLED1:	
  2375  0160                     	ds	4
  2376  0164                     _VarLED2:	
  2377  0164                     	ds	4
  2378                           
  2379                           	psect	bssBANK3
  2380  01A0                     __pbssBANK3:	
  2381  01A0                     _Memory:	
  2382  01A0                     	ds	37
  2383  01C5                     _Sw1:	
  2384  01C5                     	ds	9
  2385  01CE                     _Sw2:	
  2386  01CE                     	ds	9
  2387                           
  2388                           	psect	dataBANK4
  2389  0220                     __pdataBANK4:	
  2390  0220                     __product:	
  2391  0220                     	ds	32
  2392                           
  2393                           	psect	clrtext
  2394  1F20                     clear_ram0:	
  2395                           ;	Called with FSR0 containing the base address, and
  2396                           ;	WREG with the size to clear
  2397                           
  2398  1F20  0064               	clrwdt	;clear the watchdog before getting into this loop
  2399  1F21                     clrloop0:	
  2400  1F21  0180               	clrf	0	;clear RAM location pointed to by FSR
  2401  1F22  3101               	addfsr 0,1
  2402  1F23  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2403  1F24  2F21               	goto	clrloop0	;have we reached the end yet?
  2404  1F25  3400               	retlw	0	;all done for this memory range, return
  2405                           
  2406                           	psect	inittext
  2407  1F1A                     init_ram:	
  2408  1F1A  00FE               	movwf	126
  2409  1F1B                     initloop:	
  2410  1F1B  0012               	moviw fsr0++
  2411  1F1C  001E               	movwi fsr1++
  2412  1F1D  0BFE               	decfsz	126,f
  2413  1F1E  2F1B               	goto	initloop
  2414  1F1F  3400               	retlw	0
  2415                           
  2416                           	psect	cstackBANK1
  2417  00E3                     __pcstackBANK1:	
  2418  00E3                     setMain_Exception@buz:	
  2419                           
  2420                           ; 1 bytes @ 0x0
  2421  00E3                     	ds	1
  2422  00E4                     _setMain_Exception$6052:	
  2423                           
  2424                           ; 2 bytes @ 0x1
  2425  00E4                     	ds	2
  2426  00E6                     setMain_Exception@status:	
  2427                           
  2428                           ; 1 bytes @ 0x3
  2429  00E6                     	ds	1
  2430  00E7                     setMain_Exception@command:	
  2431                           
  2432                           ; 1 bytes @ 0x4
  2433  00E7                     	ds	1
  2434  00E8                     ?_main:	
  2435  00E8                     main@argc:	
  2436                           ; 2 bytes @ 0x5
  2437                           
  2438                           
  2439                           ; 2 bytes @ 0x5
  2440  00E8                     	ds	2
  2441  00EA                     main@argv:	
  2442                           
  2443                           ; 2 bytes @ 0x7
  2444  00EA                     	ds	2
  2445                           
  2446                           	psect	cstackCOMMON
  2447  0070                     __pcstackCOMMON:	
  2448  0070                     ?_Timeout_Counter:	
  2449  0070                     ?_set_TimeoutCleared:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ?_CC2500_WriteByte:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0070                     ?_CC2500_WriteCommand:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0070                     ?_CC2500_ReadStatus:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_CC2500_ReadByte:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_PowerRST:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_InitSetREG:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_InitPATable:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ClearTXFIFO:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_ClearRXFIFO:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_FrequencyCabr:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_SIDLEMode:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_DlyOff_Initialization:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_DlyOff_Main:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_setDimmerLights_SwOn:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_setDimmerLights_SwOff:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_setDimmerLights_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_Dimmer_Initialization:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setDimmerLights_Main:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setTxData:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setDimmerLights_Line:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setLED_Initialization:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setLED_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_Fosc_Set:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_IO_Set:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_TMR1_Set:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_ADC_Set:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_IOC_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_WDT_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_IOC_ISR:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_TMR1_ISR:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_Flash_Memory_Write:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_Flash_Memory_Modify:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_WDT_Clearing:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_setRF_Initialization:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_setRF_Main:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_getRxData:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_setLog_Code:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_setControl_Lights_Table:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_setRFSW_Control:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_setRFSW_AdjControl:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_setRF_DimmerValue:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_setSw_Initialization:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_setMain_Exception:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_setSw_Main:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_myMain_Initialization:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_my_MainTimer:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Buzzer_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_Buzzer_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_TxData:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_RxData:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_PowerOnInitial:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_DelayOffPointSelect:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DelayOff_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DelayOff_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_DimmerIntrIOCPointSelect:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ??_DimmerIntrIOCPointSelect:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_DimmerIntrPointSelect:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ??_DimmerIntrPointSelect:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setDimmerLights_IntrControl:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DimmerLightsPointSelect:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DimmerLights_Initialization:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DimmerLights_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_AdjControl:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_ErrorClose:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_AdjRF:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_LedPointSelect:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_LED_Initialization:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_LED_Main:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Mcu_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_ISR:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerReClock:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Flash_Memory_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Flash_Memory_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Flash_Memory_Unlock:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Flash_Memory_Erasing:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setMemory_Modify:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setMemory_LoopSave:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_WDT_Main:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_RF_Initialization:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_RF_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setRF_Learn:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_TouchPower:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_SwPointSelect:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Switch_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Switch_Main:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getDimmerLights_Status:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_DelayTimejudge:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0070                     ?_getPercentValue:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Read:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0070                     ?_getMain_LightsStatus:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725  0070                     ?_getMain_All_Error_Status:	
  2726                           ; 1 bytes @ 0x0
  2727                           
  2728  0070                     ?_getRF_KeyStatus:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0070                     ?_getSw_KeyStatus:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0070                     ?_getAll_DimmerLights_AdjGO:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0070                     ?_getDimmerLights_Line:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0070                     ?_setPercentValue:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0070                     getMain_All_Error_Status@command:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746                           
  2747                           ; 1 bytes @ 0x0
  2748  0070                     	ds	1
  2749  0071                     DimmerIntrIOCPointSelect@lights:	
  2750  0071                     DimmerIntrPointSelect@lights:	
  2751                           ; 1 bytes @ 0x1
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x1
  2755  0071                     	ds	1
  2756  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2757  0072                     ??_setDimmerLights_IntrControl:	
  2758                           ; 0 bytes @ 0x2
  2759                           
  2760  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2761                           ; 0 bytes @ 0x2
  2762                           
  2763                           
  2764                           ; 1 bytes @ 0x2
  2765  0072                     	ds	1
  2766  0073                     ??_IOC_ISR:	
  2767  0073                     ??_setDimmerReClock:	
  2768                           ; 0 bytes @ 0x3
  2769                           
  2770                           
  2771                           ; 0 bytes @ 0x3
  2772  0073                     	ds	3
  2773  0076                     setDimmerLights_IntrControl@lights:	
  2774                           
  2775                           ; 1 bytes @ 0x6
  2776  0076                     	ds	1
  2777  0077                     ??_TMR1_ISR:	
  2778  0077                     ??_ISR:	
  2779                           ; 0 bytes @ 0x7
  2780                           
  2781                           
  2782                           ; 0 bytes @ 0x7
  2783  0077                     	ds	1
  2784                           
  2785                           	psect	cstackBANK0
  2786  0020                     __pcstackBANK0:	
  2787  0020                     ??_Timeout_Counter:	
  2788  0020                     ??_set_TimeoutCleared:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0020                     ??_CC2500_WriteByte:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0020                     ??_CC2500_ReadByte:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ?_DelayTime_1us:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_Dimmer_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_setTxData:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_setDimmerLights_Line:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Fosc_Set:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_IO_Set:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_TMR1_Set:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_ADC_Set:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_IOC_Set:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_WDT_Set:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_Flash_Memory_Read:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ?_setMemory_Data:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_Flash_Memory_Write:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_WDT_Clearing:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_setRF_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_getMain_All_Error_Status:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_getRF_KeyStatus:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_getSw_KeyStatus:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_myMain_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_Buzzer_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_Buzzer_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_DelayOffPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_DimmerLightsPointSelect:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_getAll_DimmerLights_AdjGO:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_getDimmerLights_Line:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_LedPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_setMemory_Modify:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setRF_Learn:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ?___bmul:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ?_getBuz_GO:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0020                     ?___awdiv:	
  2906                           ; 2 bytes @ 0x0
  2907                           
  2908  0020                     ?___ftpack:	
  2909                           ; 2 bytes @ 0x0
  2910                           
  2911  0020                     setDimmerLights_Line@lights:	
  2912                           ; 3 bytes @ 0x0
  2913                           
  2914  0020                     setMemory_Data@data:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0020                     getMain_All_Error_Status@status:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0020                     ___bmul@multiplicand:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0020                     DelayTime_1us@count:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0020                     ___awdiv@divisor:	
  2927                           ; 2 bytes @ 0x0
  2928                           
  2929  0020                     ___ftpack@arg:	
  2930                           ; 2 bytes @ 0x0
  2931                           
  2932                           
  2933                           ; 3 bytes @ 0x0
  2934  0020                     	ds	1
  2935  0021                     ??_setMemory_Data:	
  2936  0021                     ??_Mcu_Initialization:	
  2937                           ; 0 bytes @ 0x1
  2938                           
  2939  0021                     ??_RF_Initialization:	
  2940                           ; 0 bytes @ 0x1
  2941                           
  2942  0021                     ??___bmul:	
  2943                           ; 0 bytes @ 0x1
  2944                           
  2945  0021                     CC2500_WriteByte@loop_a:	
  2946                           ; 0 bytes @ 0x1
  2947                           
  2948  0021                     CC2500_ReadByte@loop_b:	
  2949                           ; 1 bytes @ 0x1
  2950                           
  2951  0021                     DelayOffPointSelect@sw:	
  2952                           ; 1 bytes @ 0x1
  2953                           
  2954  0021                     DimmerLightsPointSelect@lights:	
  2955                           ; 1 bytes @ 0x1
  2956                           
  2957  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  2958                           ; 1 bytes @ 0x1
  2959                           
  2960  0021                     getDimmerLights_Line@line:	
  2961                           ; 1 bytes @ 0x1
  2962                           
  2963  0021                     LedPointSelect@led:	
  2964                           ; 1 bytes @ 0x1
  2965                           
  2966  0021                     Flash_Memory_Read@i:	
  2967                           ; 1 bytes @ 0x1
  2968                           
  2969  0021                     Flash_Memory_Write@i:	
  2970                           ; 1 bytes @ 0x1
  2971                           
  2972  0021                     setMemory_Modify@command:	
  2973                           ; 1 bytes @ 0x1
  2974                           
  2975  0021                     setMemory_LoopSave@command:	
  2976                           ; 1 bytes @ 0x1
  2977                           
  2978  0021                     setRF_Learn@command:	
  2979                           ; 1 bytes @ 0x1
  2980                           
  2981  0021                     getRF_KeyStatus@key:	
  2982                           ; 1 bytes @ 0x1
  2983                           
  2984  0021                     SwPointSelect@sw:	
  2985                           ; 1 bytes @ 0x1
  2986                           
  2987  0021                     _getSw_KeyStatus$5437:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990                           
  2991                           ; 1 bytes @ 0x1
  2992  0021                     	ds	1
  2993  0022                     ??_CC2500_WriteCommand:	
  2994  0022                     ??_CC2500_ReadStatus:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0022                     ??_DelayTime_1us:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0022                     ?_CC2500_WriteREG:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0022                     ??_DlyOff_Initialization:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0022                     ??_getDimmerLights_Status:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0022                     ??_setDimmerLights_Initialization:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0022                     ?_setDimmerLights_Trigger:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0022                     ?_setDimmerLights_TriggerAdj:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0022                     ?_setLED:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0022                     ??_setLED_Main:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0022                     ??_getBuz_GO:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0022                     CC2500_WriteREG@value:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0022                     DlyOff_Initialization@sw:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0022                     getDimmerLights_Status@lights:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0022                     _getAll_DimmerLights_AdjGO$2245:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0022                     setDimmerLights_Trigger@command:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0022                     setDimmerLights_TriggerAdj@command:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0022                     setLED@command:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0022                     Flash_Memory_Read@address:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0022                     setMemory_Data@address:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054  0022                     _getRF_KeyStatus$4517:	
  3055                           ; 1 bytes @ 0x2
  3056                           
  3057  0022                     _getSw_KeyStatus$5438:	
  3058                           ; 1 bytes @ 0x2
  3059                           
  3060  0022                     ___bmul@product:	
  3061                           ; 1 bytes @ 0x2
  3062                           
  3063  0022                     DelayTime_1us@i:	
  3064                           ; 1 bytes @ 0x2
  3065                           
  3066  0022                     ___awdiv@dividend:	
  3067                           ; 2 bytes @ 0x2
  3068                           
  3069                           
  3070                           ; 2 bytes @ 0x2
  3071  0022                     	ds	1
  3072  0023                     ??_CC2500_WriteREG:	
  3073  0023                     ??_setDimmerLights_Trigger:	
  3074                           ; 0 bytes @ 0x3
  3075                           
  3076  0023                     ??_setDimmerLights_TriggerAdj:	
  3077                           ; 0 bytes @ 0x3
  3078                           
  3079  0023                     ??_setLED:	
  3080                           ; 0 bytes @ 0x3
  3081                           
  3082  0023                     ??_DelayOff_Initialization:	
  3083                           ; 0 bytes @ 0x3
  3084                           
  3085  0023                     CC2500_WriteCommand@command:	
  3086                           ; 0 bytes @ 0x3
  3087                           
  3088  0023                     CC2500_ReadStatus@status_addr:	
  3089                           ; 1 bytes @ 0x3
  3090                           
  3091  0023                     setDimmerLights_Initialization@lights:	
  3092                           ; 1 bytes @ 0x3
  3093                           
  3094  0023                     getDimmerLights_Status@status:	
  3095                           ; 1 bytes @ 0x3
  3096                           
  3097  0023                     setLED@led:	
  3098                           ; 1 bytes @ 0x3
  3099                           
  3100  0023                     Flash_Memory_Read@ret:	
  3101                           ; 1 bytes @ 0x3
  3102                           
  3103  0023                     getSw_KeyStatus@status:	
  3104                           ; 1 bytes @ 0x3
  3105                           
  3106  0023                     ___bmul@multiplier:	
  3107                           ; 1 bytes @ 0x3
  3108                           
  3109  0023                     ___ftpack@exp:	
  3110                           ; 1 bytes @ 0x3
  3111                           
  3112                           
  3113                           ; 1 bytes @ 0x3
  3114  0023                     	ds	1
  3115  0024                     ??_CC2500_ClearTXFIFO:	
  3116  0024                     ??_CC2500_ClearRXFIFO:	
  3117                           ; 0 bytes @ 0x4
  3118                           
  3119  0024                     ??_CC2500_SIDLEMode:	
  3120                           ; 0 bytes @ 0x4
  3121                           
  3122  0024                     ??_DelayTimejudge:	
  3123                           ; 0 bytes @ 0x4
  3124                           
  3125  0024                     ?_setDimmerLights:	
  3126                           ; 0 bytes @ 0x4
  3127                           
  3128  0024                     ??_setLED_Initialization:	
  3129                           ; 0 bytes @ 0x4
  3130                           
  3131  0024                     ??_getMain_LightsStatus:	
  3132                           ; 0 bytes @ 0x4
  3133                           
  3134  0024                     ??_Flash_Memory_Modify:	
  3135                           ; 0 bytes @ 0x4
  3136                           
  3137  0024                     ??_setSw_Initialization:	
  3138                           ; 0 bytes @ 0x4
  3139                           
  3140  0024                     ??_CC2500_TxData:	
  3141                           ; 0 bytes @ 0x4
  3142                           
  3143  0024                     ??_CC2500_RxData:	
  3144                           ; 0 bytes @ 0x4
  3145                           
  3146  0024                     ??_DimmerLights_Initialization:	
  3147                           ; 0 bytes @ 0x4
  3148                           
  3149  0024                     ??___awdiv:	
  3150                           ; 0 bytes @ 0x4
  3151                           
  3152  0024                     CC2500_WriteREG@w_addr:	
  3153                           ; 0 bytes @ 0x4
  3154                           
  3155  0024                     setDimmerLights@status:	
  3156                           ; 1 bytes @ 0x4
  3157                           
  3158  0024                     setDimmerLights_Trigger@lights:	
  3159                           ; 1 bytes @ 0x4
  3160                           
  3161  0024                     setDimmerLights_TriggerAdj@lights:	
  3162                           ; 1 bytes @ 0x4
  3163                           
  3164  0024                     setLED_Initialization@led:	
  3165                           ; 1 bytes @ 0x4
  3166                           
  3167  0024                     setLED_Main@led:	
  3168                           ; 1 bytes @ 0x4
  3169                           
  3170  0024                     setSw_Initialization@sw:	
  3171                           ; 1 bytes @ 0x4
  3172                           
  3173  0024                     getSw_KeyStatus@sw:	
  3174                           ; 1 bytes @ 0x4
  3175                           
  3176  0024                     ___ftpack@sign:	
  3177                           ; 1 bytes @ 0x4
  3178                           
  3179  0024                     getBuz_GO@i:	
  3180                           ; 1 bytes @ 0x4
  3181                           
  3182  0024                     DelayTime_1us@j:	
  3183                           ; 2 bytes @ 0x4
  3184                           
  3185                           
  3186                           ; 2 bytes @ 0x4
  3187  0024                     	ds	1
  3188  0025                     ??_CC2500_InitSetREG:	
  3189  0025                     ??_CC2500_InitPATable:	
  3190                           ; 0 bytes @ 0x5
  3191                           
  3192  0025                     ??_setDimmerLights:	
  3193                           ; 0 bytes @ 0x5
  3194                           
  3195  0025                     ??___ftpack:	
  3196                           ; 0 bytes @ 0x5
  3197                           
  3198  0025                     ??_setDimmerLights_AdjControl:	
  3199                           ; 0 bytes @ 0x5
  3200                           
  3201  0025                     ??_LED_Initialization:	
  3202                           ; 0 bytes @ 0x5
  3203                           
  3204  0025                     ??_LED_Main:	
  3205                           ; 0 bytes @ 0x5
  3206                           
  3207  0025                     ??_Switch_Initialization:	
  3208                           ; 0 bytes @ 0x5
  3209                           
  3210  0025                     CC2500_TxData@loop_e:	
  3211                           ; 0 bytes @ 0x5
  3212                           
  3213  0025                     CC2500_RxData@loop_f:	
  3214                           ; 1 bytes @ 0x5
  3215                           
  3216  0025                     Flash_Memory_Modify@i:	
  3217                           ; 1 bytes @ 0x5
  3218                           
  3219  0025                     getMain_LightsStatus@count:	
  3220                           ; 1 bytes @ 0x5
  3221                           
  3222  0025                     ___awdiv@counter:	
  3223                           ; 1 bytes @ 0x5
  3224                           
  3225                           
  3226                           ; 1 bytes @ 0x5
  3227  0025                     	ds	1
  3228  0026                     ??_CC2500_PowerRST:	
  3229  0026                     ??_CC2500_FrequencyCabr:	
  3230                           ; 0 bytes @ 0x6
  3231                           
  3232  0026                     CC2500_InitSetREG@temp1:	
  3233                           ; 0 bytes @ 0x6
  3234                           
  3235  0026                     CC2500_InitPATable@temp:	
  3236                           ; 1 bytes @ 0x6
  3237                           
  3238  0026                     DelayTimejudge@i:	
  3239                           ; 1 bytes @ 0x6
  3240                           
  3241  0026                     setDimmerLights_AdjControl@idle:	
  3242                           ; 1 bytes @ 0x6
  3243                           
  3244  0026                     setDimmerLights@lights:	
  3245                           ; 1 bytes @ 0x6
  3246                           
  3247  0026                     ___awdiv@sign:	
  3248                           ; 1 bytes @ 0x6
  3249                           
  3250  0026                     getMain_LightsStatus@i:	
  3251                           ; 1 bytes @ 0x6
  3252                           
  3253                           
  3254                           ; 2 bytes @ 0x6
  3255  0026                     	ds	1
  3256  0027                     CC2500_InitSetREG@temp2:	
  3257  0027                     CC2500_InitPATable@loop_d:	
  3258                           ; 1 bytes @ 0x7
  3259                           
  3260  0027                     DelayTimejudge@j:	
  3261                           ; 1 bytes @ 0x7
  3262                           
  3263  0027                     _setDimmerLights_AdjControl$2265:	
  3264                           ; 1 bytes @ 0x7
  3265                           
  3266  0027                     ___awdiv@quotient:	
  3267                           ; 1 bytes @ 0x7
  3268                           
  3269                           
  3270                           ; 2 bytes @ 0x7
  3271  0027                     	ds	1
  3272  0028                     ?___awtoft:	
  3273  0028                     CC2500_InitSetREG@loop_c:	
  3274                           ; 3 bytes @ 0x8
  3275                           
  3276  0028                     DelayTimejudge@k:	
  3277                           ; 1 bytes @ 0x8
  3278                           
  3279  0028                     setDimmerLights_AdjControl@sw:	
  3280                           ; 1 bytes @ 0x8
  3281                           
  3282  0028                     getMain_LightsStatus@status:	
  3283                           ; 1 bytes @ 0x8
  3284                           
  3285  0028                     ___awtoft@c:	
  3286                           ; 1 bytes @ 0x8
  3287                           
  3288                           
  3289                           ; 2 bytes @ 0x8
  3290  0028                     	ds	1
  3291  0029                     ?_setBuz:	
  3292  0029                     ??_CC2500_PowerOnInitial:	
  3293                           ; 0 bytes @ 0x9
  3294                           
  3295  0029                     ??_Flash_Memory_Main:	
  3296                           ; 0 bytes @ 0x9
  3297                           
  3298  0029                     DelayTimejudge@value:	
  3299                           ; 0 bytes @ 0x9
  3300                           
  3301  0029                     setBuz@time:	
  3302                           ; 1 bytes @ 0x9
  3303                           
  3304                           
  3305                           ; 2 bytes @ 0x9
  3306  0029                     	ds	1
  3307  002A                     ?_setDelayOff_GO:	
  3308  002A                     setDelayOff_GO@command:	
  3309                           ; 0 bytes @ 0xA
  3310                           
  3311                           
  3312                           ; 1 bytes @ 0xA
  3313  002A                     	ds	1
  3314  002B                     ??_setBuz:	
  3315  002B                     ??___awtoft:	
  3316                           ; 0 bytes @ 0xB
  3317                           
  3318  002B                     setDelayOff_GO@value:	
  3319                           ; 0 bytes @ 0xB
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0xB
  3323  002B                     	ds	1
  3324  002C                     ??_setDelayOff_GO:	
  3325  002C                     setBuz@count:	
  3326                           ; 0 bytes @ 0xC
  3327                           
  3328                           
  3329                           ; 1 bytes @ 0xC
  3330  002C                     	ds	1
  3331  002D                     ??_setLog_Code:	
  3332  002D                     ??_my_MainTimer:	
  3333                           ; 0 bytes @ 0xD
  3334                           
  3335  002D                     ___awtoft@sign:	
  3336                           ; 0 bytes @ 0xD
  3337                           
  3338                           
  3339                           ; 1 bytes @ 0xD
  3340  002D                     	ds	1
  3341  002E                     ?___ftdiv:	
  3342  002E                     ?___ftmul:	
  3343                           ; 3 bytes @ 0xE
  3344                           
  3345  002E                     setDelayOff_GO@sw:	
  3346                           ; 3 bytes @ 0xE
  3347                           
  3348  002E                     ___ftdiv@f2:	
  3349                           ; 1 bytes @ 0xE
  3350                           
  3351  002E                     ___ftmul@f1:	
  3352                           ; 3 bytes @ 0xE
  3353                           
  3354                           
  3355                           ; 3 bytes @ 0xE
  3356  002E                     	ds	3
  3357  0031                     ___ftdiv@f1:	
  3358  0031                     ___ftmul@f2:	
  3359                           ; 3 bytes @ 0x11
  3360                           
  3361                           
  3362                           ; 3 bytes @ 0x11
  3363  0031                     	ds	3
  3364  0034                     ??___ftdiv:	
  3365  0034                     ??___ftmul:	
  3366                           ; 0 bytes @ 0x14
  3367                           
  3368                           
  3369                           ; 0 bytes @ 0x14
  3370  0034                     	ds	4
  3371  0038                     ___ftdiv@cntr:	
  3372  0038                     ___ftmul@exp:	
  3373                           ; 1 bytes @ 0x18
  3374                           
  3375                           
  3376                           ; 1 bytes @ 0x18
  3377  0038                     	ds	1
  3378  0039                     ___ftdiv@f3:	
  3379  0039                     ___ftmul@f3_as_product:	
  3380                           ; 3 bytes @ 0x19
  3381                           
  3382                           
  3383                           ; 3 bytes @ 0x19
  3384  0039                     	ds	3
  3385  003C                     ___ftdiv@exp:	
  3386  003C                     ___ftmul@cntr:	
  3387                           ; 1 bytes @ 0x1C
  3388                           
  3389                           
  3390                           ; 1 bytes @ 0x1C
  3391  003C                     	ds	1
  3392  003D                     ___ftdiv@sign:	
  3393  003D                     ___ftmul@sign:	
  3394                           ; 1 bytes @ 0x1D
  3395                           
  3396                           
  3397                           ; 1 bytes @ 0x1D
  3398  003D                     	ds	1
  3399  003E                     ?___ftadd:	
  3400  003E                     ___ftadd@f1:	
  3401                           ; 3 bytes @ 0x1E
  3402                           
  3403                           
  3404                           ; 3 bytes @ 0x1E
  3405  003E                     	ds	3
  3406  0041                     ___ftadd@f2:	
  3407                           
  3408                           ; 3 bytes @ 0x21
  3409  0041                     	ds	3
  3410  0044                     ??___ftadd:	
  3411                           
  3412                           ; 0 bytes @ 0x24
  3413  0044                     	ds	4
  3414  0048                     ___ftadd@sign:	
  3415                           
  3416                           ; 1 bytes @ 0x28
  3417  0048                     	ds	1
  3418  0049                     ___ftadd@exp2:	
  3419                           
  3420                           ; 1 bytes @ 0x29
  3421  0049                     	ds	1
  3422  004A                     ___ftadd@exp1:	
  3423                           
  3424                           ; 1 bytes @ 0x2A
  3425  004A                     	ds	1
  3426  004B                     ?___fttol:	
  3427  004B                     ___fttol@f1:	
  3428                           ; 4 bytes @ 0x2B
  3429                           
  3430                           
  3431                           ; 3 bytes @ 0x2B
  3432  004B                     	ds	4
  3433  004F                     ??___fttol:	
  3434                           
  3435                           ; 0 bytes @ 0x2F
  3436  004F                     	ds	4
  3437  0053                     ___fttol@sign1:	
  3438                           
  3439                           ; 1 bytes @ 0x33
  3440  0053                     	ds	1
  3441  0054                     ___fttol@lval:	
  3442                           
  3443                           ; 4 bytes @ 0x34
  3444  0054                     	ds	4
  3445  0058                     ___fttol@exp1:	
  3446                           
  3447                           ; 1 bytes @ 0x38
  3448  0058                     	ds	1
  3449  0059                     ??_getPercentValue:	
  3450  0059                     ??_setPercentValue:	
  3451                           ; 0 bytes @ 0x39
  3452                           
  3453  0059                     setPercentValue@value:	
  3454                           ; 0 bytes @ 0x39
  3455                           
  3456                           
  3457                           ; 1 bytes @ 0x39
  3458  0059                     	ds	1
  3459  005A                     setPercentValue@i:	
  3460                           
  3461                           ; 3 bytes @ 0x3A
  3462  005A                     	ds	1
  3463  005B                     getPercentValue@value:	
  3464                           
  3465                           ; 1 bytes @ 0x3B
  3466  005B                     	ds	1
  3467  005C                     getPercentValue@i:	
  3468                           
  3469                           ; 3 bytes @ 0x3C
  3470  005C                     	ds	1
  3471  005D                     ?_setRF_DimmerLights:	
  3472  005D                     ??_Flash_Memory_Initialization:	
  3473                           ; 0 bytes @ 0x3D
  3474                           
  3475  005D                     setRF_DimmerLights@on:	
  3476                           ; 0 bytes @ 0x3D
  3477                           
  3478                           
  3479                           ; 1 bytes @ 0x3D
  3480  005D                     	ds	1
  3481  005E                     ??_setRF_DimmerLights:	
  3482  005E                     Flash_Memory_Initialization@i:	
  3483                           ; 0 bytes @ 0x3E
  3484                           
  3485                           
  3486                           ; 1 bytes @ 0x3E
  3487  005E                     	ds	1
  3488  005F                     ??_setDimmerLights_AdjRF:	
  3489                           
  3490                           ; 0 bytes @ 0x3F
  3491  005F                     	ds	1
  3492  0060                     setDimmerLights_AdjRF@lights:	
  3493  0060                     setRF_DimmerLights@status:	
  3494                           ; 1 bytes @ 0x40
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0x40
  3498  0060                     	ds	1
  3499  0061                     ??_setRF_DimmerValue:	
  3500  0061                     setRF_DimmerLights@lights:	
  3501                           ; 0 bytes @ 0x41
  3502                           
  3503                           
  3504                           ; 1 bytes @ 0x41
  3505  0061                     	ds	1
  3506  0062                     ??_setDimmerLights_SwOn:	
  3507  0062                     ??_setDimmerLights_SwOff:	
  3508                           ; 0 bytes @ 0x42
  3509                           
  3510  0062                     ?_setDimmerLights_Adj:	
  3511                           ; 0 bytes @ 0x42
  3512                           
  3513  0062                     setDimmerLights_Adj@status:	
  3514                           ; 0 bytes @ 0x42
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x42
  3518  0062                     	ds	1
  3519  0063                     ??_setDimmerLights_Adj:	
  3520  0063                     setDimmerLights_SwOn@idle:	
  3521                           ; 0 bytes @ 0x43
  3522                           
  3523  0063                     setRF_DimmerValue@lights:	
  3524                           ; 1 bytes @ 0x43
  3525                           
  3526                           
  3527                           ; 1 bytes @ 0x43
  3528  0063                     	ds	1
  3529  0064                     ??_setRFSW_AdjControl:	
  3530  0064                     setDimmerLights_SwOn@sw:	
  3531                           ; 0 bytes @ 0x44
  3532                           
  3533  0064                     setDimmerLights_SwOff@command:	
  3534                           ; 1 bytes @ 0x44
  3535                           
  3536  0064                     setDimmerLights_Adj@lights:	
  3537                           ; 1 bytes @ 0x44
  3538                           
  3539                           
  3540                           ; 1 bytes @ 0x44
  3541  0064                     	ds	1
  3542  0065                     ??_setDimmerLights_Main:	
  3543  0065                     setDimmerLights_Main@lights:	
  3544                           ; 0 bytes @ 0x45
  3545                           
  3546  0065                     setDimmerLights_SwOff@sw:	
  3547                           ; 1 bytes @ 0x45
  3548                           
  3549                           
  3550                           ; 1 bytes @ 0x45
  3551  0065                     	ds	1
  3552  0066                     ??_DlyOff_Main:	
  3553  0066                     ??_setRFSW_Control:	
  3554                           ; 0 bytes @ 0x46
  3555                           
  3556  0066                     ??_setSw_Main:	
  3557                           ; 0 bytes @ 0x46
  3558                           
  3559  0066                     ??_DimmerLights_Main:	
  3560                           ; 0 bytes @ 0x46
  3561                           
  3562  0066                     ??_setDimmerLights_ErrorClose:	
  3563                           ; 0 bytes @ 0x46
  3564                           
  3565  0066                     setRFSW_AdjControl@status:	
  3566                           ; 0 bytes @ 0x46
  3567                           
  3568                           
  3569                           ; 1 bytes @ 0x46
  3570  0066                     	ds	1
  3571  0067                     setDimmerLights_ErrorClose@count:	
  3572  0067                     setRFSW_Control@status:	
  3573                           ; 1 bytes @ 0x47
  3574                           
  3575  0067                     setRFSW_AdjControl@sw:	
  3576                           ; 1 bytes @ 0x47
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x47
  3580  0067                     	ds	1
  3581  0068                     DlyOff_Main@sw:	
  3582  0068                     setDimmerLights_ErrorClose@lights:	
  3583                           ; 1 bytes @ 0x48
  3584                           
  3585  0068                     setRFSW_Control@sw:	
  3586                           ; 1 bytes @ 0x48
  3587                           
  3588  0068                     setSw_Main@sw:	
  3589                           ; 1 bytes @ 0x48
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x48
  3593  0068                     	ds	1
  3594  0069                     ??_getRxData:	
  3595  0069                     ??_setControl_Lights_Table:	
  3596                           ; 0 bytes @ 0x49
  3597                           
  3598  0069                     ??_DelayOff_Main:	
  3599                           ; 0 bytes @ 0x49
  3600                           
  3601  0069                     setDimmerLights_ErrorClose@i:	
  3602                           ; 0 bytes @ 0x49
  3603                           
  3604                           
  3605                           ; 2 bytes @ 0x49
  3606  0069                     	ds	1
  3607  006A                     getRxData@error:	
  3608                           
  3609                           ; 1 bytes @ 0x4A
  3610  006A                     	ds	1
  3611  006B                     ??_setRF_Main:	
  3612  006B                     ??_setMain_Exception:	
  3613                           ; 0 bytes @ 0x4B
  3614                           
  3615                           
  3616                           ; 0 bytes @ 0x4B
  3617  006B                     	ds	1
  3618  006C                     setRF_Main@loop_f:	
  3619                           
  3620                           ; 1 bytes @ 0x4C
  3621  006C                     	ds	1
  3622  006D                     ??_Switch_Main:	
  3623  006D                     setRF_Main@Receive_OK:	
  3624                           ; 0 bytes @ 0x4D
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x4D
  3628  006D                     	ds	1
  3629  006E                     setRF_Main@error:	
  3630  006E                     Switch_Main@error:	
  3631                           ; 1 bytes @ 0x4E
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0x4E
  3635  006E                     	ds	1
  3636  006F                     ??_RF_Main:	
  3637  006F                     ??_main:	
  3638                           ; 0 bytes @ 0x4F
  3639                           
  3640                           
  3641                           	psect	maintext
  3642  16E9                     __pmaintext:	
  3643                           ; 0 bytes @ 0x4F
  3644 ;;
  3645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3646 ;;
  3647 ;; *************** function _main *****************
  3648 ;; Defined at:
  3649 ;;		line 7 in file "../src/main_B1.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  argc            2    5[BANK1 ] int 
  3652 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  2    5[BANK1 ] int 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 17F/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3664 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3667 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3668 ;;Total ram usage:        4 bytes
  3669 ;; Hardware stack levels required when called:   15
  3670 ;; This function calls:
  3671 ;;		_Buzzer_Initialization
  3672 ;;		_Buzzer_Main
  3673 ;;		_CC2500_PowerOnInitial
  3674 ;;		_DelayOff_Initialization
  3675 ;;		_DelayOff_Main
  3676 ;;		_DimmerLights_Initialization
  3677 ;;		_DimmerLights_Main
  3678 ;;		_Flash_Memory_Initialization
  3679 ;;		_Flash_Memory_Main
  3680 ;;		_LED_Initialization
  3681 ;;		_LED_Main
  3682 ;;		_Mcu_Initialization
  3683 ;;		_RF_Initialization
  3684 ;;		_RF_Main
  3685 ;;		_Switch_Initialization
  3686 ;;		_Switch_Main
  3687 ;;		_WDT_Main
  3688 ;;		_myMain_Initialization
  3689 ;;		_my_MainTimer
  3690 ;; This function is called by:
  3691 ;;		Startup code after reset
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _main
  3697  16E9                     _main:	
  3698                           
  3699                           ;main_B1.c: 8: myMain_Initialization();
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3703  16E9  319F  27E1  3196   	fcall	_myMain_Initialization
  3704                           
  3705                           ;main_B1.c: 9: Mcu_Initialization();
  3706  16EC  3190  20DD  3196   	fcall	_Mcu_Initialization
  3707                           
  3708                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3709  16EF  3184  24D3  3196   	fcall	_Flash_Memory_Initialization
  3710                           
  3711                           ;main_B1.c: 11: LED_Initialization();
  3712  16F2  319F  27A2  3196   	fcall	_LED_Initialization
  3713                           
  3714                           ;main_B1.c: 12: Buzzer_Initialization();
  3715  16F5  319E  26F8  3196   	fcall	_Buzzer_Initialization
  3716                           
  3717                           ;main_B1.c: 14: ;;
  3718                           ;main_B1.c: 15: ;;
  3719                           ;main_B1.c: 16: ;;
  3720                           ;main_B1.c: 17: ;;
  3721                           ;main_B1.c: 18: DelayOff_Initialization();
  3722  16F8  319F  2735  3196   	fcall	_DelayOff_Initialization
  3723                           
  3724                           ;main_B1.c: 20: DimmerLights_Initialization();
  3725  16FB  3191  21F1  3196   	fcall	_DimmerLights_Initialization
  3726                           
  3727                           ;main_B1.c: 21: ;;
  3728                           ;main_B1.c: 22: ;;
  3729                           ;main_B1.c: 23: ;;
  3730                           ;main_B1.c: 24: Switch_Initialization();
  3731  16FE  3190  2067  3196   	fcall	_Switch_Initialization
  3732                           
  3733                           ;main_B1.c: 25: RF_Initialization();
  3734  1701  319E  26FB  3196   	fcall	_RF_Initialization
  3735                           
  3736                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3737  1704  3191  21B2  3196   	fcall	_CC2500_PowerOnInitial
  3738  1707                     l2446:	
  3739                           ;main_B1.c: 27: ;;
  3740                           ;main_B1.c: 29: while (1) {
  3741                           
  3742                           
  3743                           ;main_B1.c: 56: }
  3744                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3745  1707  0021               	movlb	1	; select bank1
  3746  1708  1C4B               	btfss	_Timer1^(0+128),0
  3747  1709  2F07               	goto	l2446
  3748                           
  3749                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3750  170A  104B               	bcf	_Timer1^(0+128),0
  3751                           
  3752                           ;main_B1.c: 94: my_MainTimer();
  3753  170B  3195  25F2  3196   	fcall	_my_MainTimer
  3754                           
  3755                           ;main_B1.c: 95: WDT_Main();
  3756  170E  3190  20EF  3196   	fcall	_WDT_Main
  3757                           
  3758                           ;main_B1.c: 96: ;;
  3759                           ;main_B1.c: 97: ;;
  3760                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3761  1711  0021               	movlb	1	; select bank1
  3762  1712  1C20               	btfss	_myMain^(0+128),0
  3763  1713  2F07               	goto	l2446
  3764                           
  3765                           ;main_B1.c: 99: Flash_Memory_Main();
  3766  1714  3195  2586  3196   	fcall	_Flash_Memory_Main
  3767                           
  3768                           ;main_B1.c: 101: LED_Main();
  3769  1717  319F  27AE  3196   	fcall	_LED_Main
  3770                           
  3771                           ;main_B1.c: 102: Buzzer_Main();
  3772  171A  3197  27B6  3196   	fcall	_Buzzer_Main
  3773                           
  3774                           ;main_B1.c: 104: ;;
  3775                           ;main_B1.c: 105: ;;
  3776                           ;main_B1.c: 106: ;;
  3777                           ;main_B1.c: 107: ;;
  3778                           ;main_B1.c: 109: ;;
  3779                           ;main_B1.c: 110: DimmerLights_Main();
  3780  171D  319F  2745  3196   	fcall	_DimmerLights_Main
  3781                           
  3782                           ;main_B1.c: 111: Switch_Main();
  3783  1720  3193  23AF  3196   	fcall	_Switch_Main
  3784                           
  3785                           ;main_B1.c: 112: ;;
  3786                           ;main_B1.c: 113: ;;
  3787                           ;main_B1.c: 115: RF_Main();
  3788  1723  319E  26FE  3196   	fcall	_RF_Main
  3789                           
  3790                           ;main_B1.c: 116: DelayOff_Main();
  3791  1726  319F  273D  3196   	fcall	_DelayOff_Main
  3792                           
  3793                           ;main_B1.c: 117: ;;
  3794  1729  2F07               	goto	l2446
  3795  172A                     __end_of_main:	
  3796                           ;main_B1.c: 125: }
  3797                           ;main_B1.c: 126: }
  3798                           ;main_B1.c: 160: }
  3799                           ;main_B1.c: 161: return (0);
  3800                           ;	Return value of _main is never used
  3801                           
  3802                           
  3803                           	psect	text1
  3804  15F2                     __ptext1:	
  3805 ;; *************** function _my_MainTimer *****************
  3806 ;; Defined at:
  3807 ;;		line 180 in file "../src/main_B1.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;		None               void
  3814 ;; Registers used:
  3815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3825 ;;Total ram usage:        0 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    7
  3828 ;; This function calls:
  3829 ;;		_setBuz
  3830 ;; This function is called by:
  3831 ;;		_main
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _my_MainTimer
  3837  15F2                     _my_MainTimer:	
  3838                           
  3839                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3843  15F2  0021               	movlb	1	; select bank1
  3844  15F3  1820               	btfsc	_myMain^(0+128),0
  3845  15F4  2E13               	goto	l8824
  3846                           
  3847                           ;main_B1.c: 183: myMain.PowerCount++;
  3848  15F5  3001               	movlw	1
  3849  15F6  07A2               	addwf	(_myMain^(0+128)+2),f
  3850  15F7  3000               	movlw	0
  3851  15F8  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3852                           
  3853                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  3854  15F9  3002               	movlw	2
  3855  15FA  3EA0               	addlw	_myMain& (0+255)
  3856  15FB  0086               	movwf	6
  3857  15FC  0187               	clrf	7
  3858  15FD  3F40               	moviw [0]fsr1
  3859  15FE  3A96               	xorlw	150
  3860  15FF  1D03               	skipz
  3861  1600  2E03               	goto	u9435
  3862  1601  3F41               	moviw [1]fsr1
  3863  1602  3A00               	xorlw	0
  3864  1603                     u9435:	
  3865  1603  1D03               	skipz
  3866  1604  0008               	return
  3867                           
  3868                           ;main_B1.c: 185: {
  3869                           ;main_B1.c: 186: myMain.PowerCount = 0;
  3870  1605  01A2               	clrf	(_myMain^(0+128)+2)
  3871  1606  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3872                           
  3873                           ;main_B1.c: 187: myMain.PowerON = 1;
  3874  1607  1420               	bsf	_myMain^(0+128),0
  3875                           
  3876                           ;main_B1.c: 193: setBuz(3, 50);
  3877  1608  3032               	movlw	50
  3878  1609  0020               	movlb	0	; select bank0
  3879  160A  00A9               	movwf	setBuz@time
  3880  160B  3000               	movlw	0
  3881  160C  00AA               	movwf	setBuz@time+1
  3882  160D  3003               	movlw	3
  3883  160E  318A  2240         	fcall	_setBuz
  3884                           
  3885                           ;main_B1.c: 194: myMain.SelfTest = 1;
  3886  1610  0021               	movlb	1	; select bank1
  3887  1611  1620               	bsf	_myMain^(0+128),4
  3888                           
  3889                           ;main_B1.c: 203: }
  3890                           ;main_B1.c: 204: } else {
  3891  1612  0008               	return
  3892  1613                     l8824:	
  3893                           
  3894                           ;main_B1.c: 212: myMain.Count1++;
  3895  1613  3001               	movlw	1
  3896  1614  07A6               	addwf	(_myMain^(0+128)+6),f
  3897  1615  3000               	movlw	0
  3898  1616  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3899                           
  3900                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  3901  1617  3006               	movlw	6
  3902  1618  3EA0               	addlw	_myMain& (0+255)
  3903  1619  0086               	movwf	6
  3904  161A  0187               	clrf	7
  3905  161B  3F40               	moviw [0]fsr1
  3906  161C  3A64               	xorlw	100
  3907  161D  1D03               	skipz
  3908  161E  2E21               	goto	u9445
  3909  161F  3F41               	moviw [1]fsr1
  3910  1620  3A00               	xorlw	0
  3911  1621                     u9445:	
  3912  1621  1D03               	skipz
  3913  1622  0008               	return
  3914                           
  3915                           ;main_B1.c: 214: {
  3916                           ;main_B1.c: 215: myMain.Count1 = 0;
  3917  1623  01A6               	clrf	(_myMain^(0+128)+6)
  3918  1624  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3919                           
  3920                           ;main_B1.c: 227: if (myMain.Flag) {
  3921  1625  1CA0               	btfss	_myMain^(0+128),1
  3922  1626  2E29               	goto	l2461
  3923                           
  3924                           ;main_B1.c: 228: myMain.Flag = 0;
  3925  1627  10A0               	bcf	_myMain^(0+128),1
  3926                           
  3927                           ;main_B1.c: 237: } else {
  3928  1628  0008               	return
  3929  1629                     l2461:	
  3930                           
  3931                           ;main_B1.c: 238: myMain.Flag = 1;
  3932  1629  14A0               	bsf	_myMain^(0+128),1
  3933  162A  0008               	return
  3934  162B                     __end_of_my_MainTimer:	
  3935                           
  3936                           	psect	text2
  3937  1FE1                     __ptext2:	
  3938 ;; *************** function _myMain_Initialization *****************
  3939 ;; Defined at:
  3940 ;;		line 167 in file "../src/main_B1.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;		None               void
  3947 ;; Registers used:
  3948 ;;		wreg, fsr1l, fsr1h
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;Total ram usage:        1 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    5
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_main
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           
  3969                           ;psect for function _myMain_Initialization
  3970  1FE1                     _myMain_Initialization:	
  3971                           
  3972                           ;main_B1.c: 169: product = &_product;
  3973                           
  3974                           ;incstack = 0
  3975                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3976  1FE1  3020               	movlw	__product& (0+255)
  3977  1FE2  0020               	movlb	0	; select bank0
  3978  1FE3  00A0               	movwf	??_myMain_Initialization
  3979  1FE4  0820               	movf	??_myMain_Initialization,w
  3980  1FE5  00EF               	movwf	_product
  3981                           
  3982                           ;main_B1.c: 170: product->Data[20] = 210;
  3983  1FE6  30D2               	movlw	210
  3984  1FE7  00A0               	movwf	??_myMain_Initialization
  3985  1FE8  086F               	movf	_product,w
  3986  1FE9  3E14               	addlw	20
  3987  1FEA  0086               	movwf	6
  3988  1FEB  3002               	movlw	2	; select bank4/5
  3989  1FEC  0087               	movwf	7
  3990  1FED  0820               	movf	??_myMain_Initialization,w
  3991  1FEE  0081               	movwf	1
  3992  1FEF  0008               	return
  3993  1FF0                     __end_of_myMain_Initialization:	
  3994                           
  3995                           	psect	text3
  3996  10EF                     __ptext3:	
  3997 ;; *************** function _WDT_Main *****************
  3998 ;; Defined at:
  3999 ;;		line 1033 in file "../src/MCU_B1.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;		None               void
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0, pclath, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;Total ram usage:        1 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    6
  4020 ;; This function calls:
  4021 ;;		_WDT_Clearing
  4022 ;; This function is called by:
  4023 ;;		_main
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _WDT_Main
  4029  10EF                     _WDT_Main:	
  4030                           
  4031                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4035  10EF  0021               	movlb	1	; select bank1
  4036  10F0  1C50               	btfss	_WDT^(0+128),0
  4037  10F1  0008               	return
  4038                           
  4039                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4040  10F2  3001               	movlw	1
  4041  10F3  02D1               	subwf	(_WDT^(0+128)+1),f
  4042  10F4  0851               	movf	(_WDT^(0+128)+1),w
  4043  10F5  3AFF               	xorlw	255
  4044  10F6  1903               	skipnz
  4045  10F7  0008               	return
  4046                           
  4047                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4048  10F8  3064               	movlw	100
  4049  10F9  0020               	movlb	0	; select bank0
  4050  10FA  00A0               	movwf	??_WDT_Main
  4051  10FB  0820               	movf	??_WDT_Main,w
  4052  10FC  0021               	movlb	1	; select bank1
  4053  10FD  00D1               	movwf	(_WDT^(0+128)+1)
  4054                           
  4055                           ;MCU_B1.c: 1037: WDT_Clearing();
  4056  10FE  3180  2002         	fcall	_WDT_Clearing
  4057  1100  0008               	return
  4058  1101                     __end_of_WDT_Main:	
  4059                           
  4060                           	psect	text4
  4061  0002                     __ptext4:	
  4062 ;; *************** function _WDT_Clearing *****************
  4063 ;; Defined at:
  4064 ;;		line 1043 in file "../src/MCU_B1.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;		None
  4069 ;; Return value:  Size  Location     Type
  4070 ;;		None               void
  4071 ;; Registers used:
  4072 ;;		None
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;Total ram usage:        0 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    5
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_WDT_Main
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           
  4093                           ;psect for function _WDT_Clearing
  4094  0002                     _WDT_Clearing:	
  4095                           
  4096                           ;incstack = 0
  4097                           ; Regs used in _WDT_Clearing: []
  4098  0002  0064               	clrwdt	;# 
  4099  0003  0008               	return
  4100  0004                     __end_of_WDT_Clearing:	
  4101                           
  4102                           	psect	text5
  4103  13AF                     __ptext5:	
  4104 ;; *************** function _Switch_Main *****************
  4105 ;; Defined at:
  4106 ;;		line 72 in file "../src/Switch_B1.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  error           1   78[BANK0 ] unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;		None               void
  4113 ;; Registers used:
  4114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;Total ram usage:        2 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:   12
  4127 ;; This function calls:
  4128 ;;		_TouchPower
  4129 ;;		_getMain_All_Error_Status
  4130 ;;		_setMain_Exception
  4131 ;;		_setSw_Main
  4132 ;; This function is called by:
  4133 ;;		_main
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           
  4138                           ;psect for function _Switch_Main
  4139  13AF                     _Switch_Main:	
  4140                           
  4141                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4145  13AF  3000               	movlw	0
  4146  13B0  319F  2711  3193   	fcall	_getMain_All_Error_Status
  4147  13B3  0020               	movlb	0	; select bank0
  4148  13B4  00ED               	movwf	??_Switch_Main
  4149  13B5  086D               	movf	??_Switch_Main,w
  4150  13B6  00EE               	movwf	Switch_Main@error
  4151                           
  4152                           ;Switch_B1.c: 74: if (error != 0) {
  4153  13B7  086E               	movf	Switch_Main@error,w
  4154  13B8  1903               	btfsc	3,2
  4155  13B9  2BBF               	goto	l2187
  4156                           
  4157                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  4158  13BA  0021               	movlb	1	; select bank1
  4159  13BB  185A               	btfsc	_SwDetect^(0+128),0
  4160  13BC  2BC8               	goto	l8800
  4161                           
  4162                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  4163  13BD  145A               	bsf	_SwDetect^(0+128),0
  4164  13BE  2BC3               	goto	L1
  4165  13BF                     l2187:	
  4166                           ;Switch_B1.c: 80: }
  4167                           ;Switch_B1.c: 81: } else {
  4168                           
  4169                           ;Switch_B1.c: 78: setMain_Exception(error);
  4170                           
  4171                           
  4172                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  4173  13BF  0021               	movlb	1	; select bank1
  4174  13C0  1C5A               	btfss	_SwDetect^(0+128),0
  4175  13C1  2BC8               	goto	l8800
  4176                           
  4177                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  4178  13C2  105A               	bcf	_SwDetect^(0+128),0
  4179  13C3                     L1:	
  4180                           
  4181                           ;Switch_B1.c: 85: setMain_Exception(error);
  4182  13C3  0020               	movlb	0	; select bank0
  4183  13C4  086E               	movf	Switch_Main@error,w
  4184  13C5  318C  246A  3193   	fcall	_setMain_Exception
  4185  13C8                     l8800:	
  4186                           
  4187                           ;Switch_B1.c: 87: }
  4188                           ;Switch_B1.c: 88: }
  4189                           ;Switch_B1.c: 91: setSw_Main(1);
  4190  13C8  3001               	movlw	1
  4191  13C9  3180  2041  3193   	fcall	_setSw_Main
  4192                           
  4193                           ;Switch_B1.c: 95: setSw_Main(2);
  4194  13CC  3002               	movlw	2
  4195  13CD  3180  2041  3193   	fcall	_setSw_Main
  4196                           
  4197                           ;Switch_B1.c: 103: TouchPower();
  4198  13D0  3191  21DC         	fcall	_TouchPower
  4199  13D2  0008               	return
  4200  13D3                     __end_of_Switch_Main:	
  4201                           
  4202                           	psect	text6
  4203  0041                     __ptext6:	
  4204 ;; *************** function _setSw_Main *****************
  4205 ;; Defined at:
  4206 ;;		line 137 in file "../src/Switch_B1.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  sw              1    wreg     unsigned char 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  sw              1   72[BANK0 ] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;		None               void
  4213 ;; Registers used:
  4214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4223 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;Total ram usage:        3 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:   10
  4227 ;; This function calls:
  4228 ;;		_SwPointSelect
  4229 ;;		_getSw_KeyStatus
  4230 ;;		_setBuz
  4231 ;;		_setDimmerLights_AdjControl
  4232 ;;		_setDimmerLights_SwOff
  4233 ;;		_setDimmerLights_SwOn
  4234 ;;		_setRF_Learn
  4235 ;; This function is called by:
  4236 ;;		_Switch_Main
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _setSw_Main
  4242  0041                     _setSw_Main:	
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4246                           ;setSw_Main@sw stored from wreg
  4247  0041  0020               	movlb	0	; select bank0
  4248  0042  00E8               	movwf	setSw_Main@sw
  4249                           
  4250                           ;Switch_B1.c: 138: SwPointSelect(sw);
  4251  0043  0868               	movf	setSw_Main@sw,w
  4252  0044  3191  2175  3180   	fcall	_SwPointSelect
  4253                           
  4254                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  4255  0047  087B               	movf	_Sw,w
  4256  0048  0086               	movwf	6
  4257  0049  3001               	movlw	1	; select bank2/3
  4258  004A  0087               	movwf	7
  4259  004B  1C01               	btfss	1,0
  4260  004C  29A7               	goto	l2197
  4261                           
  4262                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  4263  004D  0021               	movlb	1	; select bank1
  4264  004E  185A               	btfsc	_SwDetect^(0+128),0
  4265  004F  286B               	goto	l8604
  4266                           
  4267                           ;Switch_B1.c: 141: Sw->Detect = 0;
  4268  0050  0A7B               	incf	_Sw,w
  4269  0051  0086               	movwf	6
  4270  0052  3001               	movlw	1	; select bank2/3
  4271  0053  0087               	movwf	7
  4272  0054  1081               	bcf	1,1
  4273                           
  4274                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4275  0055  0020               	movlb	0	; select bank0
  4276  0056  0868               	movf	setSw_Main@sw,w
  4277  0057  3192  22C8  3180   	fcall	_getSw_KeyStatus
  4278  005A  3A01               	xorlw	1
  4279  005B  3000               	movlw	0
  4280  005C  1903               	skipnz
  4281  005D  3001               	movlw	1
  4282  005E  0020               	movlb	0	; select bank0
  4283  005F  00E6               	movwf	??_setSw_Main
  4284  0060  087B               	movf	_Sw,w
  4285  0061  0086               	movwf	6
  4286  0062  3001               	movlw	1	; select bank2/3
  4287  0063  0087               	movwf	7
  4288  0064  0DE6               	rlf	??_setSw_Main,f
  4289  0065  0801               	movf	1,w
  4290  0066  0666               	xorwf	??_setSw_Main,w
  4291  0067  39FD               	andlw	-3
  4292  0068  0666               	xorwf	??_setSw_Main,w
  4293  0069  0081               	movwf	1
  4294                           
  4295                           ;Switch_B1.c: 143: } else {
  4296  006A  2880               	goto	l2199
  4297  006B                     l8604:	
  4298                           
  4299                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  4300  006B  0A7B               	incf	_Sw,w
  4301  006C  0086               	movwf	6
  4302  006D  3001               	movlw	1	; select bank2/3
  4303  006E  0087               	movwf	7
  4304  006F  1881               	btfsc	1,1
  4305  0070  2880               	goto	l2199
  4306                           
  4307                           ;Switch_B1.c: 145: Sw->Detect = 1;
  4308  0071  0A7B               	incf	_Sw,w
  4309  0072  0086               	movwf	6
  4310  0073  3001               	movlw	1	; select bank2/3
  4311  0074  0087               	movwf	7
  4312  0075  1481               	bsf	1,1
  4313                           
  4314                           ;Switch_B1.c: 146: Sw->Touch = 0;
  4315  0076  087B               	movf	_Sw,w
  4316  0077  0086               	movwf	6
  4317  0078  3001               	movlw	1	; select bank2/3
  4318  0079  0087               	movwf	7
  4319  007A  1081               	bcf	1,1
  4320                           
  4321                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  4322  007B  087B               	movf	_Sw,w
  4323  007C  0086               	movwf	6
  4324  007D  3001               	movlw	1	; select bank2/3
  4325  007E  0087               	movwf	7
  4326  007F  1501               	bsf	1,2
  4327  0080                     l2199:	
  4328                           
  4329                           ;Switch_B1.c: 148: }
  4330                           ;Switch_B1.c: 149: }
  4331                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  4332  0080  087B               	movf	_Sw,w
  4333  0081  0086               	movwf	6
  4334  0082  3001               	movlw	1	; select bank2/3
  4335  0083  0087               	movwf	7
  4336  0084  1C81               	btfss	1,1
  4337  0085  2950               	goto	l8654
  4338                           
  4339                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  4340  0086  087B               	movf	_Sw,w
  4341  0087  0086               	movwf	6
  4342  0088  3001               	movlw	1	; select bank2/3
  4343  0089  0087               	movwf	7
  4344  008A  1901               	btfsc	1,2
  4345  008B  28AE               	goto	l8620
  4346                           
  4347                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  4348  008C  3001               	movlw	1
  4349  008D  0020               	movlb	0	; select bank0
  4350  008E  00E6               	movwf	??_setSw_Main
  4351  008F  087B               	movf	_Sw,w
  4352  0090  3E02               	addlw	2
  4353  0091  0086               	movwf	6
  4354  0092  3001               	movlw	1	; select bank2/3
  4355  0093  0087               	movwf	7
  4356  0094  0866               	movf	??_setSw_Main,w
  4357  0095  0781               	addwf	1,f
  4358                           
  4359                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  4360  0096  087B               	movf	_Sw,w
  4361  0097  3E02               	addlw	2
  4362  0098  0086               	movwf	6
  4363  0099  3001               	movlw	1	; select bank2/3
  4364  009A  0087               	movwf	7
  4365  009B  3005               	movlw	5
  4366  009C  0201               	subwf	1,w
  4367  009D  1C03               	skipc
  4368  009E  0008               	return
  4369                           
  4370                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  4371  009F  087B               	movf	_Sw,w
  4372  00A0  3E02               	addlw	2
  4373  00A1  0086               	movwf	6
  4374  00A2  3001               	movlw	1	; select bank2/3
  4375  00A3  0087               	movwf	7
  4376  00A4  0181               	clrf	1
  4377                           
  4378                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  4379  00A5  087B               	movf	_Sw,w
  4380  00A6  0086               	movwf	6
  4381  00A7  3001               	movlw	1	; select bank2/3
  4382  00A8  0087               	movwf	7
  4383  00A9  1501               	bsf	1,2
  4384                           
  4385                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  4386  00AA  0868               	movf	setSw_Main@sw,w
  4387  00AB  3197  2770         	fcall	_setDimmerLights_SwOn
  4388                           
  4389                           ;Switch_B1.c: 162: }
  4390                           ;Switch_B1.c: 163: } else {
  4391  00AD  0008               	return
  4392  00AE                     l8620:	
  4393                           
  4394                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  4395  00AE  087B               	movf	_Sw,w
  4396  00AF  0086               	movwf	6
  4397  00B0  3001               	movlw	1	; select bank2/3
  4398  00B1  0087               	movwf	7
  4399  00B2  1981               	btfsc	1,3
  4400  00B3  28E0               	goto	l8630
  4401                           
  4402                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  4403  00B4  087B               	movf	_Sw,w
  4404  00B5  3E03               	addlw	3
  4405  00B6  0086               	movwf	6
  4406  00B7  3001               	movlw	1	; select bank2/3
  4407  00B8  0087               	movwf	7
  4408  00B9  3001               	movlw	1
  4409  00BA  0781               	addwf	1,f
  4410  00BB  3141               	addfsr 1,1
  4411  00BC  1803               	skipnc
  4412  00BD  0A81               	incf	1,f
  4413                           
  4414                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  4415  00BE  087B               	movf	_Sw,w
  4416  00BF  3E03               	addlw	3
  4417  00C0  0086               	movwf	6
  4418  00C1  3001               	movlw	1	; select bank2/3
  4419  00C2  0087               	movwf	7
  4420  00C3  3F40               	moviw [0]fsr1
  4421  00C4  0020               	movlb	0	; select bank0
  4422  00C5  00E6               	movwf	??_setSw_Main
  4423  00C6  3F41               	moviw [1]fsr1
  4424  00C7  00E7               	movwf	??_setSw_Main+1
  4425  00C8  3000               	movlw	0
  4426  00C9  0267               	subwf	??_setSw_Main+1,w
  4427  00CA  3096               	movlw	150
  4428  00CB  1903               	skipnz
  4429  00CC  0266               	subwf	??_setSw_Main,w
  4430  00CD  1C03               	skipc
  4431  00CE  0008               	return
  4432                           
  4433                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  4434  00CF  087B               	movf	_Sw,w
  4435  00D0  3E03               	addlw	3
  4436  00D1  0086               	movwf	6
  4437  00D2  3001               	movlw	1	; select bank2/3
  4438  00D3  0087               	movwf	7
  4439  00D4  3000               	movlw	0
  4440  00D5  3FC0               	movwi [0]fsr1
  4441  00D6  3FC1               	movwi [1]fsr1
  4442                           
  4443                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  4444  00D7  087B               	movf	_Sw,w
  4445  00D8  0086               	movwf	6
  4446  00D9  3001               	movlw	1	; select bank2/3
  4447  00DA  0087               	movwf	7
  4448  00DB  1581               	bsf	1,3
  4449                           
  4450                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  4451  00DC  0868               	movf	setSw_Main@sw,w
  4452  00DD  3195  2551         	fcall	_setDimmerLights_AdjControl
  4453                           
  4454                           ;Switch_B1.c: 174: }
  4455                           ;Switch_B1.c: 175: } else {
  4456  00DF  0008               	return
  4457  00E0                     l8630:	
  4458                           
  4459                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  4460  00E0  087B               	movf	_Sw,w
  4461  00E1  0086               	movwf	6
  4462  00E2  3001               	movlw	1	; select bank2/3
  4463  00E3  0087               	movwf	7
  4464  00E4  1A01               	btfsc	1,4
  4465  00E5  291E               	goto	l8644
  4466                           
  4467                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  4468  00E6  087B               	movf	_Sw,w
  4469  00E7  3E05               	addlw	5
  4470  00E8  0086               	movwf	6
  4471  00E9  3001               	movlw	1	; select bank2/3
  4472  00EA  0087               	movwf	7
  4473  00EB  3001               	movlw	1
  4474  00EC  0781               	addwf	1,f
  4475  00ED  3141               	addfsr 1,1
  4476  00EE  1803               	skipnc
  4477  00EF  0A81               	incf	1,f
  4478                           
  4479                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  4480  00F0  087B               	movf	_Sw,w
  4481  00F1  3E05               	addlw	5
  4482  00F2  0086               	movwf	6
  4483  00F3  3001               	movlw	1	; select bank2/3
  4484  00F4  0087               	movwf	7
  4485  00F5  3F40               	moviw [0]fsr1
  4486  00F6  0020               	movlb	0	; select bank0
  4487  00F7  00E6               	movwf	??_setSw_Main
  4488  00F8  3F41               	moviw [1]fsr1
  4489  00F9  00E7               	movwf	??_setSw_Main+1
  4490  00FA  3000               	movlw	0
  4491  00FB  0267               	subwf	??_setSw_Main+1,w
  4492  00FC  3096               	movlw	150
  4493  00FD  1903               	skipnz
  4494  00FE  0266               	subwf	??_setSw_Main,w
  4495  00FF  1C03               	skipc
  4496  0100  0008               	return
  4497                           
  4498                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  4499  0101  087B               	movf	_Sw,w
  4500  0102  3E05               	addlw	5
  4501  0103  0086               	movwf	6
  4502  0104  3001               	movlw	1	; select bank2/3
  4503  0105  0087               	movwf	7
  4504  0106  3000               	movlw	0
  4505  0107  3FC0               	movwi [0]fsr1
  4506  0108  3FC1               	movwi [1]fsr1
  4507                           
  4508                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  4509  0109  087B               	movf	_Sw,w
  4510  010A  0086               	movwf	6
  4511  010B  3001               	movlw	1	; select bank2/3
  4512  010C  0087               	movwf	7
  4513  010D  1601               	bsf	1,4
  4514                           
  4515                           ;Switch_B1.c: 183: setRF_Learn(1);
  4516  010E  3001               	movlw	1
  4517  010F  3191  2189  3180   	fcall	_setRF_Learn
  4518                           
  4519                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  4520  0112  0021               	movlb	1	; select bank1
  4521  0113  1EA0               	btfss	_myMain^(0+128),5
  4522  0114  0008               	return
  4523                           
  4524                           ;Switch_B1.c: 186: setBuz(2, 100);
  4525  0115  3064               	movlw	100
  4526  0116  0020               	movlb	0	; select bank0
  4527  0117  00A9               	movwf	setBuz@time
  4528  0118  3000               	movlw	0
  4529  0119  00AA               	movwf	setBuz@time+1
  4530  011A  3002               	movlw	2
  4531  011B  318A  2240         	fcall	_setBuz
  4532                           
  4533                           ;Switch_B1.c: 187: }
  4534                           ;Switch_B1.c: 189: }
  4535                           ;Switch_B1.c: 190: } else {
  4536  011D  0008               	return
  4537  011E                     l8644:	
  4538                           
  4539                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  4540  011E  087B               	movf	_Sw,w
  4541  011F  0086               	movwf	6
  4542  0120  3001               	movlw	1	; select bank2/3
  4543  0121  0087               	movwf	7
  4544  0122  1A81               	btfsc	1,5
  4545  0123  0008               	return
  4546                           
  4547                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  4548  0124  087B               	movf	_Sw,w
  4549  0125  3E07               	addlw	7
  4550  0126  0086               	movwf	6
  4551  0127  3001               	movlw	1	; select bank2/3
  4552  0128  0087               	movwf	7
  4553  0129  3001               	movlw	1
  4554  012A  0781               	addwf	1,f
  4555  012B  3141               	addfsr 1,1
  4556  012C  1803               	skipnc
  4557  012D  0A81               	incf	1,f
  4558                           
  4559                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  4560  012E  087B               	movf	_Sw,w
  4561  012F  3E07               	addlw	7
  4562  0130  0086               	movwf	6
  4563  0131  3001               	movlw	1	; select bank2/3
  4564  0132  0087               	movwf	7
  4565  0133  3F40               	moviw [0]fsr1
  4566  0134  0020               	movlb	0	; select bank0
  4567  0135  00E6               	movwf	??_setSw_Main
  4568  0136  3F41               	moviw [1]fsr1
  4569  0137  00E7               	movwf	??_setSw_Main+1
  4570  0138  3001               	movlw	1
  4571  0139  0267               	subwf	??_setSw_Main+1,w
  4572  013A  302C               	movlw	44
  4573  013B  1903               	skipnz
  4574  013C  0266               	subwf	??_setSw_Main,w
  4575  013D  1C03               	skipc
  4576  013E  0008               	return
  4577                           
  4578                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  4579  013F  087B               	movf	_Sw,w
  4580  0140  3E07               	addlw	7
  4581  0141  0086               	movwf	6
  4582  0142  3001               	movlw	1	; select bank2/3
  4583  0143  0087               	movwf	7
  4584  0144  3000               	movlw	0
  4585  0145  3FC0               	movwi [0]fsr1
  4586  0146  3FC1               	movwi [1]fsr1
  4587                           
  4588                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  4589  0147  087B               	movf	_Sw,w
  4590  0148  0086               	movwf	6
  4591  0149  3001               	movlw	1	; select bank2/3
  4592  014A  0087               	movwf	7
  4593  014B  1681               	bsf	1,5
  4594                           
  4595                           ;Switch_B1.c: 198: setRF_Learn(0);
  4596  014C  3000               	movlw	0
  4597  014D  3191  2189         	fcall	_setRF_Learn
  4598                           
  4599                           ;Switch_B1.c: 201: }
  4600                           ;Switch_B1.c: 202: }
  4601                           ;Switch_B1.c: 203: }
  4602                           ;Switch_B1.c: 204: }
  4603                           ;Switch_B1.c: 205: }
  4604                           ;Switch_B1.c: 206: } else {
  4605  014F  0008               	return
  4606  0150                     l8654:	
  4607                           
  4608                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  4609  0150  087B               	movf	_Sw,w
  4610  0151  0086               	movwf	6
  4611  0152  3001               	movlw	1	; select bank2/3
  4612  0153  0087               	movwf	7
  4613  0154  1D01               	btfss	1,2
  4614  0155  0008               	return
  4615                           
  4616                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  4617  0156  3001               	movlw	1
  4618  0157  0020               	movlb	0	; select bank0
  4619  0158  00E6               	movwf	??_setSw_Main
  4620  0159  087B               	movf	_Sw,w
  4621  015A  3E02               	addlw	2
  4622  015B  0086               	movwf	6
  4623  015C  3001               	movlw	1	; select bank2/3
  4624  015D  0087               	movwf	7
  4625  015E  0866               	movf	??_setSw_Main,w
  4626  015F  0781               	addwf	1,f
  4627                           
  4628                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  4629  0160  087B               	movf	_Sw,w
  4630  0161  3E02               	addlw	2
  4631  0162  0086               	movwf	6
  4632  0163  3001               	movlw	1	; select bank2/3
  4633  0164  0087               	movwf	7
  4634  0165  3005               	movlw	5
  4635  0166  0201               	subwf	1,w
  4636  0167  1C03               	skipc
  4637  0168  0008               	return
  4638                           
  4639                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  4640  0169  087B               	movf	_Sw,w
  4641  016A  3E02               	addlw	2
  4642  016B  0086               	movwf	6
  4643  016C  3001               	movlw	1	; select bank2/3
  4644  016D  0087               	movwf	7
  4645  016E  0181               	clrf	1
  4646                           
  4647                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  4648  016F  087B               	movf	_Sw,w
  4649  0170  0086               	movwf	6
  4650  0171  3001               	movlw	1	; select bank2/3
  4651  0172  0087               	movwf	7
  4652  0173  1101               	bcf	1,2
  4653                           
  4654                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  4655  0174  087B               	movf	_Sw,w
  4656  0175  3E03               	addlw	3
  4657  0176  0086               	movwf	6
  4658  0177  3001               	movlw	1	; select bank2/3
  4659  0178  0087               	movwf	7
  4660  0179  3000               	movlw	0
  4661  017A  3FC0               	movwi [0]fsr1
  4662  017B  3FC1               	movwi [1]fsr1
  4663                           
  4664                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  4665  017C  087B               	movf	_Sw,w
  4666  017D  0086               	movwf	6
  4667  017E  3001               	movlw	1	; select bank2/3
  4668  017F  0087               	movwf	7
  4669  0180  1181               	bcf	1,3
  4670                           
  4671                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  4672  0181  087B               	movf	_Sw,w
  4673  0182  3E05               	addlw	5
  4674  0183  0086               	movwf	6
  4675  0184  3001               	movlw	1	; select bank2/3
  4676  0185  0087               	movwf	7
  4677  0186  3000               	movlw	0
  4678  0187  3FC0               	movwi [0]fsr1
  4679  0188  3FC1               	movwi [1]fsr1
  4680                           
  4681                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  4682  0189  087B               	movf	_Sw,w
  4683  018A  0086               	movwf	6
  4684  018B  3001               	movlw	1	; select bank2/3
  4685  018C  0087               	movwf	7
  4686  018D  1201               	bcf	1,4
  4687                           
  4688                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  4689  018E  087B               	movf	_Sw,w
  4690  018F  3E07               	addlw	7
  4691  0190  0086               	movwf	6
  4692  0191  3001               	movlw	1	; select bank2/3
  4693  0192  0087               	movwf	7
  4694  0193  3000               	movlw	0
  4695  0194  3FC0               	movwi [0]fsr1
  4696  0195  3FC1               	movwi [1]fsr1
  4697                           
  4698                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  4699  0196  087B               	movf	_Sw,w
  4700  0197  0086               	movwf	6
  4701  0198  3001               	movlw	1	; select bank2/3
  4702  0199  0087               	movwf	7
  4703  019A  1281               	bcf	1,5
  4704                           
  4705                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  4706  019B  0021               	movlb	1	; select bank1
  4707  019C  185A               	btfsc	_SwDetect^(0+128),0
  4708  019D  29A3               	goto	l8680
  4709                           
  4710                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  4711  019E  0020               	movlb	0	; select bank0
  4712  019F  0868               	movf	setSw_Main@sw,w
  4713  01A0  318B  23AA  3180   	fcall	_setDimmerLights_SwOff
  4714  01A3                     l8680:	
  4715                           
  4716                           ;Switch_B1.c: 221: }
  4717                           ;Switch_B1.c: 224: setRF_Learn(0);
  4718  01A3  3000               	movlw	0
  4719  01A4  3191  2189         	fcall	_setRF_Learn
  4720                           
  4721                           ;Switch_B1.c: 226: }
  4722                           ;Switch_B1.c: 227: }
  4723                           ;Switch_B1.c: 228: }
  4724                           ;Switch_B1.c: 229: } else {
  4725  01A6  0008               	return
  4726  01A7                     l2197:	
  4727                           
  4728                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  4729  01A7  0021               	movlb	1	; select bank1
  4730  01A8  1C20               	btfss	_myMain^(0+128),0
  4731  01A9  0008               	return
  4732                           
  4733                           ;Switch_B1.c: 231: Sw->Enable = 1;
  4734  01AA  087B               	movf	_Sw,w
  4735  01AB  0086               	movwf	6
  4736  01AC  3001               	movlw	1	; select bank2/3
  4737  01AD  0087               	movwf	7
  4738  01AE  1401               	bsf	1,0
  4739  01AF  0008               	return
  4740  01B0                     __end_of_setSw_Main:	
  4741                           
  4742                           	psect	text7
  4743  1189                     __ptext7:	
  4744 ;; *************** function _setRF_Learn *****************
  4745 ;; Defined at:
  4746 ;;		line 23 in file "../src/RF_Control_B1.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  command         1    wreg     unsigned char 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  command         1    1[BANK0 ] unsigned char 
  4751 ;; Return value:  Size  Location     Type
  4752 ;;		None               void
  4753 ;; Registers used:
  4754 ;;		wreg, status,2, status,0
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;Total ram usage:        2 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    5
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_setSw_Main
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           
  4775                           ;psect for function _setRF_Learn
  4776  1189                     _setRF_Learn:	
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  4780                           ;setRF_Learn@command stored from wreg
  4781  1189  0020               	movlb	0	; select bank0
  4782  118A  00A1               	movwf	setRF_Learn@command
  4783                           
  4784                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  4785  118B  0821               	movf	setRF_Learn@command,w
  4786  118C  3A01               	xorlw	1
  4787  118D  3000               	movlw	0
  4788  118E  1903               	skipnz
  4789  118F  3001               	movlw	1
  4790  1190  00A0               	movwf	??_setRF_Learn
  4791  1191  0EA0               	swapf	??_setRF_Learn,f
  4792  1192  0DA0               	rlf	??_setRF_Learn,f
  4793  1193  0DA0               	rlf	??_setRF_Learn,f
  4794  1194  0021               	movlb	1	; select bank1
  4795  1195  083C               	movf	_RF1^(0+128),w
  4796  1196  0020               	movlb	0	; select bank0
  4797  1197  0620               	xorwf	??_setRF_Learn,w
  4798  1198  39BF               	andlw	-65
  4799  1199  0620               	xorwf	??_setRF_Learn,w
  4800  119A  0021               	movlb	1	; select bank1
  4801  119B  00BC               	movwf	_RF1^(0+128)
  4802  119C  0008               	return
  4803  119D                     __end_of_setRF_Learn:	
  4804                           
  4805                           	psect	text8
  4806  1551                     __ptext8:	
  4807 ;; *************** function _setDimmerLights_AdjControl *****************
  4808 ;; Defined at:
  4809 ;;		line 565 in file "../src/Dimmer_B1.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  sw              1    wreg     unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  sw              1    8[BANK0 ] unsigned char 
  4814 ;;  idle            1    6[BANK0 ] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;Total ram usage:        4 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    7
  4831 ;; This function calls:
  4832 ;;		_DimmerLightsPointSelect
  4833 ;;		_getAll_DimmerLights_AdjGO
  4834 ;;		_setDimmerLights_TriggerAdj
  4835 ;; This function is called by:
  4836 ;;		_setSw_Main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _setDimmerLights_AdjControl
  4842  1551                     _setDimmerLights_AdjControl:	
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4846                           ;setDimmerLights_AdjControl@sw stored from wreg
  4847  1551  0020               	movlb	0	; select bank0
  4848  1552  00A8               	movwf	setDimmerLights_AdjControl@sw
  4849                           
  4850                           ;Dimmer_B1.c: 566: DimmerLightsPointSelect(sw);
  4851  1553  0828               	movf	setDimmerLights_AdjControl@sw,w
  4852  1554  3191  2101  3195   	fcall	_DimmerLightsPointSelect
  4853                           
  4854                           ;Dimmer_B1.c: 567: char idle = 0;
  4855  1557  0020               	movlb	0	; select bank0
  4856  1558  01A6               	clrf	setDimmerLights_AdjControl@idle
  4857                           
  4858                           ;Dimmer_B1.c: 569: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  4859  1559  01A7               	clrf	_setDimmerLights_AdjControl$2265
  4860  155A  3190  2074  3195   	fcall	_getAll_DimmerLights_AdjGO
  4861  155D  3A01               	xorlw	1
  4862  155E  1D03               	skipz
  4863  155F  2D66               	goto	l8140
  4864  1560  0021               	movlb	1	; select bank1
  4865  1561  1CC8               	btfss	_Dimmer^(0+128),1
  4866  1562  2D66               	goto	l8140
  4867  1563  0020               	movlb	0	; select bank0
  4868  1564  01A7               	clrf	_setDimmerLights_AdjControl$2265
  4869  1565  0AA7               	incf	_setDimmerLights_AdjControl$2265,f
  4870  1566                     l8140:	
  4871  1566  0020               	movlb	0	; select bank0
  4872  1567  0827               	movf	_setDimmerLights_AdjControl$2265,w
  4873  1568  00A5               	movwf	??_setDimmerLights_AdjControl
  4874  1569  0825               	movf	??_setDimmerLights_AdjControl,w
  4875  156A  00A6               	movwf	setDimmerLights_AdjControl@idle
  4876                           
  4877                           ;Dimmer_B1.c: 571: if (idle == 0) {
  4878  156B  08A6               	movf	setDimmerLights_AdjControl@idle,f
  4879  156C  1D03               	skipz
  4880  156D  0008               	return
  4881                           
  4882                           ;Dimmer_B1.c: 572: if (DimmerLights->SwFlag == 1) {
  4883  156E  0879               	movf	_DimmerLights,w
  4884  156F  3E09               	addlw	9
  4885  1570  0086               	movwf	6
  4886  1571  3001               	movlw	1	; select bank2/3
  4887  1572  0087               	movwf	7
  4888  1573  1F01               	btfss	1,6
  4889  1574  0008               	return
  4890                           
  4891                           ;Dimmer_B1.c: 573: DimmerLights->SwAdj = 1;
  4892  1575  0879               	movf	_DimmerLights,w
  4893  1576  3E09               	addlw	9
  4894  1577  0086               	movwf	6
  4895  1578  3001               	movlw	1	; select bank2/3
  4896  1579  0087               	movwf	7
  4897  157A  1781               	bsf	1,7
  4898                           
  4899                           ;Dimmer_B1.c: 574: DimmerLights->Status = 1;
  4900  157B  0879               	movf	_DimmerLights,w
  4901  157C  0086               	movwf	6
  4902  157D  3001               	movlw	1	; select bank2/3
  4903  157E  0087               	movwf	7
  4904  157F  1681               	bsf	1,5
  4905                           
  4906                           ;Dimmer_B1.c: 575: setDimmerLights_TriggerAdj(sw, 1);
  4907  1580  01A2               	clrf	setDimmerLights_TriggerAdj@command
  4908  1581  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  4909  1582  0828               	movf	setDimmerLights_AdjControl@sw,w
  4910  1583  3192  22E7         	fcall	_setDimmerLights_TriggerAdj
  4911  1585  0008               	return
  4912  1586                     __end_of_setDimmerLights_AdjControl:	
  4913                           
  4914                           	psect	text9
  4915  12C8                     __ptext9:	
  4916 ;; *************** function _getSw_KeyStatus *****************
  4917 ;; Defined at:
  4918 ;;		line 237 in file "../src/Switch_B1.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  sw              1    wreg     unsigned char 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  sw              1    4[BANK0 ] unsigned char 
  4923 ;;  status          1    3[BANK0 ] unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      unsigned char 
  4926 ;; Registers used:
  4927 ;;		wreg, status,2
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;Total ram usage:        5 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    5
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_setSw_Main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _getSw_KeyStatus
  4949  12C8                     _getSw_KeyStatus:	
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4953                           ;getSw_KeyStatus@sw stored from wreg
  4954  12C8  0020               	movlb	0	; select bank0
  4955  12C9  00A4               	movwf	getSw_KeyStatus@sw
  4956                           
  4957                           ;Switch_B1.c: 238: char status = 0;
  4958  12CA  01A3               	clrf	getSw_KeyStatus@status
  4959                           
  4960                           ;Switch_B1.c: 250: if (sw == 1) {
  4961  12CB  0824               	movf	getSw_KeyStatus@sw,w
  4962  12CC  3A01               	xorlw	1
  4963  12CD  1D03               	skipz
  4964  12CE  2AD7               	goto	l8332
  4965                           
  4966                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  4967  12CF  01A1               	clrf	_getSw_KeyStatus$5437
  4968  12D0  0AA1               	incf	_getSw_KeyStatus$5437,f
  4969  12D1  1F0C               	btfss	12,6	;volatile
  4970  12D2  1A0C               	btfsc	12,4	;volatile
  4971  12D3  2AD5               	goto	l8330
  4972  12D4  01A1               	clrf	_getSw_KeyStatus$5437
  4973  12D5                     l8330:	
  4974  12D5  0821               	movf	_getSw_KeyStatus$5437,w
  4975  12D6  2AE2               	goto	L2
  4976  12D7                     l8332:	
  4977                           ;Switch_B1.c: 252: } else if (sw == 2) {
  4978                           
  4979  12D7  0824               	movf	getSw_KeyStatus@sw,w
  4980  12D8  3A02               	xorlw	2
  4981  12D9  1D03               	skipz
  4982  12DA  2AE5               	goto	l8342
  4983                           
  4984                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  4985  12DB  01A2               	clrf	_getSw_KeyStatus$5438
  4986  12DC  0AA2               	incf	_getSw_KeyStatus$5438,f
  4987  12DD  1C0C               	btfss	12,0	;volatile
  4988  12DE  188D               	btfsc	13,1	;volatile
  4989  12DF  2AE1               	goto	l8340
  4990  12E0  01A2               	clrf	_getSw_KeyStatus$5438
  4991  12E1                     l8340:	
  4992  12E1  0822               	movf	_getSw_KeyStatus$5438,w
  4993  12E2                     L2:	
  4994  12E2  00A0               	movwf	??_getSw_KeyStatus
  4995  12E3  0820               	movf	??_getSw_KeyStatus,w
  4996  12E4  00A3               	movwf	getSw_KeyStatus@status
  4997  12E5                     l8342:	
  4998                           
  4999                           ;Switch_B1.c: 254: }
  5000                           ;Switch_B1.c: 261: return status;
  5001  12E5  0823               	movf	getSw_KeyStatus@status,w
  5002  12E6  0008               	return
  5003  12E7                     __end_of_getSw_KeyStatus:	
  5004                           
  5005                           	psect	text10
  5006  1175                     __ptext10:	
  5007 ;; *************** function _SwPointSelect *****************
  5008 ;; Defined at:
  5009 ;;		line 25 in file "../src/Switch_B1.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  sw              1    wreg     unsigned char 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  sw              1    1[BANK0 ] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;		None               void
  5016 ;; Registers used:
  5017 ;;		wreg
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;Total ram usage:        2 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    5
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_setSw_Main
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           
  5038                           ;psect for function _SwPointSelect
  5039  1175                     _SwPointSelect:	
  5040                           
  5041                           ;incstack = 0
  5042                           ; Regs used in _SwPointSelect: [wreg]
  5043                           ;SwPointSelect@sw stored from wreg
  5044  1175  0020               	movlb	0	; select bank0
  5045  1176  00A1               	movwf	SwPointSelect@sw
  5046                           
  5047                           ;Switch_B1.c: 28: if (sw == 1) {
  5048  1177  0821               	movf	SwPointSelect@sw,w
  5049  1178  3A01               	xorlw	1
  5050  1179  1D03               	skipz
  5051  117A  2980               	goto	l8316
  5052                           
  5053                           ;Switch_B1.c: 29: Sw = &Sw1;
  5054  117B  30C5               	movlw	_Sw1& (0+255)
  5055  117C  00A0               	movwf	??_SwPointSelect
  5056  117D  0820               	movf	??_SwPointSelect,w
  5057  117E  00FB               	movwf	_Sw
  5058                           
  5059                           ;Switch_B1.c: 30: }
  5060  117F  0008               	return
  5061  1180                     l8316:	
  5062                           
  5063                           ;Switch_B1.c: 33: else if (sw == 2) {
  5064  1180  0821               	movf	SwPointSelect@sw,w
  5065  1181  3A02               	xorlw	2
  5066  1182  1D03               	skipz
  5067  1183  0008               	return
  5068                           
  5069                           ;Switch_B1.c: 34: Sw = &Sw2;
  5070  1184  30CE               	movlw	_Sw2& (0+255)
  5071  1185  00A0               	movwf	??_SwPointSelect
  5072  1186  0820               	movf	??_SwPointSelect,w
  5073  1187  00FB               	movwf	_Sw
  5074  1188  0008               	return
  5075  1189                     __end_of_SwPointSelect:	
  5076                           
  5077                           	psect	text11
  5078  0C6A                     __ptext11:	
  5079 ;; *************** function _setMain_Exception *****************
  5080 ;; Defined at:
  5081 ;;		line 276 in file "../src/main_B1.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;  command         1    wreg     unsigned char 
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;  command         1    4[BANK1 ] unsigned char 
  5086 ;;  status          1    3[BANK1 ] unsigned char 
  5087 ;;  buz             1    0[BANK1 ] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;		None               void
  5090 ;; Registers used:
  5091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;Total ram usage:        7 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:   11
  5104 ;; This function calls:
  5105 ;;		_getDimmerLights_Line
  5106 ;;		_getMain_LightsStatus
  5107 ;;		_setBuz
  5108 ;;		_setDimmerLights_ErrorClose
  5109 ;;		_setLED
  5110 ;; This function is called by:
  5111 ;;		_Switch_Main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           
  5116                           ;psect for function _setMain_Exception
  5117  0C6A                     _setMain_Exception:	
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5121                           ;setMain_Exception@command stored from wreg
  5122  0C6A  0021               	movlb	1	; select bank1
  5123  0C6B  00E7               	movwf	setMain_Exception@command^(0+128)
  5124                           
  5125                           ;main_B1.c: 277: char status = 0, buz = 0;
  5126  0C6C  01E6               	clrf	setMain_Exception@status^(0+128)
  5127  0C6D  01E3               	clrf	setMain_Exception@buz^(0+128)
  5128                           
  5129                           ;main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  5130  0C6E  0867               	movf	setMain_Exception@command^(0+128),w
  5131  0C6F  3A03               	xorlw	3
  5132  0C70  1903               	skipnz
  5133  0C71  2C77               	goto	l8566
  5134  0C72  30FF               	movlw	255
  5135  0C73  00E4               	movwf	_setMain_Exception$6052^(0+128)
  5136  0C74  3000               	movlw	0
  5137  0C75  00E5               	movwf	(_setMain_Exception$6052^(0+128)+1)
  5138  0C76  2C84               	goto	l8568
  5139  0C77                     l8566:	
  5140  0C77  3191  213A  318C   	fcall	_getDimmerLights_Line
  5141  0C7A  0020               	movlb	0	; select bank0
  5142  0C7B  00EB               	movwf	??_setMain_Exception
  5143  0C7C  01EC               	clrf	??_setMain_Exception+1
  5144  0C7D  086B               	movf	??_setMain_Exception,w
  5145  0C7E  0021               	movlb	1	; select bank1
  5146  0C7F  00E4               	movwf	_setMain_Exception$6052^(0+128)
  5147  0C80  0020               	movlb	0	; select bank0
  5148  0C81  086C               	movf	??_setMain_Exception+1,w
  5149  0C82  0021               	movlb	1	; select bank1
  5150  0C83  00E5               	movwf	(_setMain_Exception$6052+1)^(0+128)
  5151  0C84                     l8568:	
  5152  0C84  0864               	movf	_setMain_Exception$6052^(0+128),w
  5153  0C85  0020               	movlb	0	; select bank0
  5154  0C86  00EB               	movwf	??_setMain_Exception
  5155  0C87  086B               	movf	??_setMain_Exception,w
  5156  0C88  0021               	movlb	1	; select bank1
  5157  0C89  00E6               	movwf	setMain_Exception@status^(0+128)
  5158                           
  5159                           ;main_B1.c: 294: if (command == 0) {
  5160  0C8A  08E7               	movf	setMain_Exception@command^(0+128),f
  5161  0C8B  1D03               	skipz
  5162  0C8C  2C8F               	goto	l8574
  5163                           
  5164                           ;main_B1.c: 295: setLED(99, 10);
  5165  0C8D  300A               	movlw	10
  5166  0C8E  2C90               	goto	L3
  5167  0C8F                     l8574:	
  5168                           ;main_B1.c: 296: } else {
  5169                           
  5170                           
  5171                           ;main_B1.c: 297: setLED(99, 11);
  5172  0C8F  300B               	movlw	11
  5173  0C90                     L3:	
  5174  0C90  0020               	movlb	0	; select bank0
  5175  0C91  00EB               	movwf	??_setMain_Exception
  5176  0C92  086B               	movf	??_setMain_Exception,w
  5177  0C93  00A2               	movwf	setLED@command
  5178  0C94  3063               	movlw	99
  5179  0C95  3188  2092  318C   	fcall	_setLED
  5180                           
  5181                           ;main_B1.c: 298: }
  5182                           ;main_B1.c: 300: if (command != 0) {
  5183  0C98  0021               	movlb	1	; select bank1
  5184  0C99  0867               	movf	setMain_Exception@command^(0+128),w
  5185  0C9A  1903               	btfsc	3,2
  5186  0C9B  0008               	return
  5187                           
  5188                           ;main_B1.c: 301: switch (command) {
  5189  0C9C  2CBD               	goto	l8590
  5190  0C9D                     l8580:	
  5191                           ;main_B1.c: 302: case 2:
  5192                           
  5193                           
  5194                           ;main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  5195  0C9D  3194  24C1  318C   	fcall	_getMain_LightsStatus
  5196  0CA0  3A01               	xorlw	1
  5197  0CA1  1D03               	skipz
  5198  0CA2  2CC6               	goto	l8592
  5199                           
  5200                           ;main_B1.c: 304: setBuz(10, 300);
  5201  0CA3  302C               	movlw	44
  5202  0CA4  0020               	movlb	0	; select bank0
  5203  0CA5  00A9               	movwf	setBuz@time
  5204  0CA6  3001               	movlw	1
  5205  0CA7  00AA               	movwf	setBuz@time+1
  5206  0CA8  300A               	movlw	10
  5207  0CA9  318A  2240  318C   	fcall	_setBuz
  5208                           
  5209                           ;main_B1.c: 305: }
  5210                           ;main_B1.c: 306: break;
  5211  0CAC  2CC6               	goto	l8592
  5212  0CAD                     l8584:	
  5213                           ;main_B1.c: 307: case 3:
  5214                           
  5215                           
  5216                           ;main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  5217  0CAD  3194  24C1  318C   	fcall	_getMain_LightsStatus
  5218  0CB0  3A01               	xorlw	1
  5219  0CB1  1D03               	skipz
  5220  0CB2  2CC6               	goto	l8592
  5221                           
  5222                           ;main_B1.c: 309: setBuz(5, 300);
  5223  0CB3  302C               	movlw	44
  5224  0CB4  0020               	movlb	0	; select bank0
  5225  0CB5  00A9               	movwf	setBuz@time
  5226  0CB6  3001               	movlw	1
  5227  0CB7  00AA               	movwf	setBuz@time+1
  5228  0CB8  3005               	movlw	5
  5229  0CB9  318A  2240  318C   	fcall	_setBuz
  5230                           
  5231                           ;main_B1.c: 312: }
  5232                           
  5233                           ;main_B1.c: 310: }
  5234                           ;main_B1.c: 311: break;
  5235  0CBC  2CC6               	goto	l8592
  5236  0CBD                     l8590:	
  5237  0CBD  0021               	movlb	1	; select bank1
  5238  0CBE  0867               	movf	setMain_Exception@command^(0+128),w
  5239                           
  5240                           ; Switch size 1, requested type "space"
  5241                           ; Number of cases is 2, Range of values is 2 to 3
  5242                           ; switch strategies available:
  5243                           ; Name         Instructions Cycles
  5244                           ; simple_byte            7     4 (average)
  5245                           ; direct_byte           13     9 (fixed)
  5246                           ; jumptable            263     9 (fixed)
  5247                           ;	Chosen strategy is simple_byte
  5248  0CBF  3A02               	xorlw	2	; case 2
  5249  0CC0  1903               	skipnz
  5250  0CC1  2C9D               	goto	l8580
  5251  0CC2  3A01               	xorlw	1	; case 3
  5252  0CC3  1903               	skipnz
  5253  0CC4  2CAD               	goto	l8584
  5254  0CC5  2CC6               	goto	l8592
  5255  0CC6                     l8592:	
  5256                           
  5257                           ;main_B1.c: 313: setDimmerLights_ErrorClose(status);
  5258  0CC6  0021               	movlb	1	; select bank1
  5259  0CC7  0866               	movf	setMain_Exception@status^(0+128),w
  5260  0CC8  318A  2299         	fcall	_setDimmerLights_ErrorClose
  5261  0CCA  0021               	movlb	1	; select bank1
  5262  0CCB  0008               	return
  5263  0CCC                     __end_of_setMain_Exception:	
  5264                           
  5265                           	psect	text12
  5266  0A99                     __ptext12:	
  5267 ;; *************** function _setDimmerLights_ErrorClose *****************
  5268 ;; Defined at:
  5269 ;;		line 581 in file "../src/Dimmer_B1.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  lights          1    wreg     unsigned char 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  lights          1   72[BANK0 ] unsigned char 
  5274 ;;  i               2   73[BANK0 ] int 
  5275 ;;  count           1   71[BANK0 ] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        5 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:   10
  5292 ;; This function calls:
  5293 ;;		_DimmerLightsPointSelect
  5294 ;;		_getDimmerLights_Status
  5295 ;;		_setDimmerLights_SwOff
  5296 ;; This function is called by:
  5297 ;;		_setMain_Exception
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           
  5302                           ;psect for function _setDimmerLights_ErrorClose
  5303  0A99                     _setDimmerLights_ErrorClose:	
  5304                           
  5305                           ;incstack = 0
  5306                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5307                           ;setDimmerLights_ErrorClose@lights stored from wreg
  5308  0A99  0020               	movlb	0	; select bank0
  5309  0A9A  00E8               	movwf	setDimmerLights_ErrorClose@lights
  5310                           
  5311                           ;Dimmer_B1.c: 582: if (lights == 255) {
  5312  0A9B  0868               	movf	setDimmerLights_ErrorClose@lights,w
  5313  0A9C  3AFF               	xorlw	255
  5314  0A9D  1D03               	skipz
  5315  0A9E  2AD6               	goto	l8168
  5316                           
  5317                           ;Dimmer_B1.c: 587: char count = 2;
  5318  0A9F  3002               	movlw	2
  5319  0AA0  00E6               	movwf	??_setDimmerLights_ErrorClose
  5320  0AA1  0866               	movf	??_setDimmerLights_ErrorClose,w
  5321  0AA2  00E7               	movwf	setDimmerLights_ErrorClose@count
  5322                           
  5323                           ;Dimmer_B1.c: 592: for (int i = 0; i < count; i++) {
  5324  0AA3  01E9               	clrf	setDimmerLights_ErrorClose@i
  5325  0AA4  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  5326  0AA5                     l8166:	
  5327  0AA5  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  5328  0AA6  3A80               	xorlw	128
  5329  0AA7  00E6               	movwf	??_setDimmerLights_ErrorClose
  5330  0AA8  3080               	movlw	128
  5331  0AA9  0266               	subwf	??_setDimmerLights_ErrorClose,w
  5332  0AAA  1D03               	skipz
  5333  0AAB  2AAE               	goto	u8365
  5334  0AAC  0867               	movf	setDimmerLights_ErrorClose@count,w
  5335  0AAD  0269               	subwf	setDimmerLights_ErrorClose@i,w
  5336  0AAE                     u8365:	
  5337  0AAE  1803               	btfsc	3,0
  5338  0AAF  0008               	return
  5339                           
  5340                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(i + 1);
  5341  0AB0  0020               	movlb	0	; select bank0
  5342  0AB1  0869               	movf	setDimmerLights_ErrorClose@i,w
  5343  0AB2  3E01               	addlw	1
  5344  0AB3  3191  2101  318A   	fcall	_DimmerLightsPointSelect
  5345                           
  5346                           ;Dimmer_B1.c: 594: if (getDimmerLights_Status(i + 1) == 1) {
  5347  0AB6  0020               	movlb	0	; select bank0
  5348  0AB7  0869               	movf	setDimmerLights_ErrorClose@i,w
  5349  0AB8  3E01               	addlw	1
  5350  0AB9  319F  27F0  318A   	fcall	_getDimmerLights_Status
  5351  0ABC  3A01               	xorlw	1
  5352  0ABD  1D03               	skipz
  5353  0ABE  2AD0               	goto	l8164
  5354                           
  5355                           ;Dimmer_B1.c: 595: DimmerLights->SwFlag = 1;
  5356  0ABF  0879               	movf	_DimmerLights,w
  5357  0AC0  3E09               	addlw	9
  5358  0AC1  0086               	movwf	6
  5359  0AC2  3001               	movlw	1	; select bank2/3
  5360  0AC3  0087               	movwf	7
  5361  0AC4  1701               	bsf	1,6
  5362                           
  5363                           ;Dimmer_B1.c: 596: DimmerLights->Status = 0;
  5364  0AC5  0879               	movf	_DimmerLights,w
  5365  0AC6  0086               	movwf	6
  5366  0AC7  3001               	movlw	1	; select bank2/3
  5367  0AC8  0087               	movwf	7
  5368  0AC9  1281               	bcf	1,5
  5369                           
  5370                           ;Dimmer_B1.c: 597: setDimmerLights_SwOff(i + 1);
  5371  0ACA  0020               	movlb	0	; select bank0
  5372  0ACB  0869               	movf	setDimmerLights_ErrorClose@i,w
  5373  0ACC  3E01               	addlw	1
  5374  0ACD  318B  23AA  318A   	fcall	_setDimmerLights_SwOff
  5375  0AD0                     l8164:	
  5376  0AD0  3001               	movlw	1
  5377  0AD1  0020               	movlb	0	; select bank0
  5378  0AD2  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  5379  0AD3  3000               	movlw	0
  5380  0AD4  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  5381  0AD5  2AA5               	goto	l8166
  5382  0AD6                     l8168:	
  5383                           ;Dimmer_B1.c: 598: }
  5384                           ;Dimmer_B1.c: 599: }
  5385                           ;Dimmer_B1.c: 600: } else {
  5386                           
  5387                           
  5388                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(lights);
  5389  0AD6  0020               	movlb	0	; select bank0
  5390  0AD7  0868               	movf	setDimmerLights_ErrorClose@lights,w
  5391  0AD8  3191  2101  318A   	fcall	_DimmerLightsPointSelect
  5392                           
  5393                           ;Dimmer_B1.c: 602: if (getDimmerLights_Status(lights) == 1) {
  5394  0ADB  0020               	movlb	0	; select bank0
  5395  0ADC  0868               	movf	setDimmerLights_ErrorClose@lights,w
  5396  0ADD  319F  27F0  318A   	fcall	_getDimmerLights_Status
  5397  0AE0  3A01               	xorlw	1
  5398  0AE1  1D03               	skipz
  5399  0AE2  0008               	return
  5400                           
  5401                           ;Dimmer_B1.c: 603: DimmerLights->SwFlag = 1;
  5402  0AE3  0879               	movf	_DimmerLights,w
  5403  0AE4  3E09               	addlw	9
  5404  0AE5  0086               	movwf	6
  5405  0AE6  3001               	movlw	1	; select bank2/3
  5406  0AE7  0087               	movwf	7
  5407  0AE8  1701               	bsf	1,6
  5408                           
  5409                           ;Dimmer_B1.c: 604: DimmerLights->Status = 0;
  5410  0AE9  0879               	movf	_DimmerLights,w
  5411  0AEA  0086               	movwf	6
  5412  0AEB  3001               	movlw	1	; select bank2/3
  5413  0AEC  0087               	movwf	7
  5414  0AED  1281               	bcf	1,5
  5415                           
  5416                           ;Dimmer_B1.c: 605: setDimmerLights_SwOff(lights);
  5417  0AEE  0020               	movlb	0	; select bank0
  5418  0AEF  0868               	movf	setDimmerLights_ErrorClose@lights,w
  5419  0AF0  318B  23AA         	fcall	_setDimmerLights_SwOff
  5420  0AF2  0008               	return
  5421  0AF3                     __end_of_setDimmerLights_ErrorClose:	
  5422                           
  5423                           	psect	text13
  5424  113A                     __ptext13:	
  5425 ;; *************** function _getDimmerLights_Line *****************
  5426 ;; Defined at:
  5427 ;;		line 730 in file "../src/Dimmer_B1.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  line            1    1[BANK0 ] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      unsigned char 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;Total ram usage:        2 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    5
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_setMain_Exception
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function _getDimmerLights_Line
  5457  113A                     _getDimmerLights_Line:	
  5458                           
  5459                           ;Dimmer_B1.c: 731: char line = 0;
  5460                           
  5461                           ;incstack = 0
  5462                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  5463  113A  0020               	movlb	0	; select bank0
  5464  113B  01A1               	clrf	getDimmerLights_Line@line
  5465                           
  5466                           ;Dimmer_B1.c: 733: if (DimmerLights1.Line == 1) {
  5467  113C  0022               	movlb	2	; select bank2
  5468  113D  1C47               	btfss	(_DimmerLights1^(0+256)+9),0
  5469  113E  2943               	goto	l831
  5470                           
  5471                           ;Dimmer_B1.c: 734: line = 1;
  5472  113F  0020               	movlb	0	; select bank0
  5473  1140  01A1               	clrf	getDimmerLights_Line@line
  5474  1141  0AA1               	incf	getDimmerLights_Line@line,f
  5475                           
  5476                           ;Dimmer_B1.c: 735: }
  5477  1142  294A               	goto	l832
  5478  1143                     l831:	
  5479                           
  5480                           ;Dimmer_B1.c: 738: else if (DimmerLights2.Line == 1) {
  5481  1143  1C56               	btfss	(_DimmerLights2^(0+256)+9),0
  5482  1144  294A               	goto	l832
  5483                           
  5484                           ;Dimmer_B1.c: 739: line = 2;
  5485  1145  3002               	movlw	2
  5486  1146  0020               	movlb	0	; select bank0
  5487  1147  00A0               	movwf	??_getDimmerLights_Line
  5488  1148  0820               	movf	??_getDimmerLights_Line,w
  5489  1149  00A1               	movwf	getDimmerLights_Line@line
  5490  114A                     l832:	
  5491                           
  5492                           ;Dimmer_B1.c: 740: }
  5493                           ;Dimmer_B1.c: 747: return line;
  5494  114A  0020               	movlb	0	; select bank0
  5495  114B  0821               	movf	getDimmerLights_Line@line,w
  5496  114C  0008               	return
  5497  114D                     __end_of_getDimmerLights_Line:	
  5498                           
  5499                           	psect	text14
  5500  1067                     __ptext14:	
  5501 ;; *************** function _Switch_Initialization *****************
  5502 ;; Defined at:
  5503 ;;		line 46 in file "../src/Switch_B1.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;		None
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;		None               void
  5510 ;; Registers used:
  5511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;Total ram usage:        0 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    8
  5524 ;; This function calls:
  5525 ;;		_TouchPower
  5526 ;;		_setSw_Initialization
  5527 ;; This function is called by:
  5528 ;;		_main
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _Switch_Initialization
  5534  1067                     _Switch_Initialization:	
  5535                           
  5536                           ;Switch_B1.c: 47: TouchPower();
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5540  1067  3191  21DC  3190   	fcall	_TouchPower
  5541                           
  5542                           ;Switch_B1.c: 49: WPUB1 = 0;
  5543  106A  0024               	movlb	4	; select bank4
  5544  106B  108D               	bcf	13,1	;volatile
  5545                           
  5546                           ;Switch_B1.c: 58: setSw_Initialization(1);
  5547  106C  3001               	movlw	1
  5548  106D  319F  274D  3190   	fcall	_setSw_Initialization
  5549                           
  5550                           ;Switch_B1.c: 62: setSw_Initialization(2);
  5551  1070  3002               	movlw	2
  5552  1071  319F  274D         	fcall	_setSw_Initialization
  5553  1073  0008               	return
  5554  1074                     __end_of_Switch_Initialization:	
  5555                           
  5556                           	psect	text15
  5557  1F4D                     __ptext15:	
  5558 ;; *************** function _setSw_Initialization *****************
  5559 ;; Defined at:
  5560 ;;		line 109 in file "../src/Switch_B1.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  sw              1    wreg     unsigned char 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  sw              1    4[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        1 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    7
  5581 ;; This function calls:
  5582 ;;		_setLED
  5583 ;; This function is called by:
  5584 ;;		_Switch_Initialization
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function _setSw_Initialization
  5590  1F4D                     _setSw_Initialization:	
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5594                           ;setSw_Initialization@sw stored from wreg
  5595  1F4D  0020               	movlb	0	; select bank0
  5596  1F4E  00A4               	movwf	setSw_Initialization@sw
  5597                           
  5598                           ;Switch_B1.c: 110: setLED(sw, 1);
  5599  1F4F  01A2               	clrf	setLED@command
  5600  1F50  0AA2               	incf	setLED@command,f
  5601  1F51  0824               	movf	setSw_Initialization@sw,w
  5602  1F52  3188  2092         	fcall	_setLED
  5603  1F54  0008               	return
  5604  1F55                     __end_of_setSw_Initialization:	
  5605                           
  5606                           	psect	text16
  5607  11DC                     __ptext16:	
  5608 ;; *************** function _TouchPower *****************
  5609 ;; Defined at:
  5610 ;;		line 10 in file "../src/Switch_B1.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;		None
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;		None
  5615 ;; Return value:  Size  Location     Type
  5616 ;;		None               void
  5617 ;; Registers used:
  5618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;Total ram usage:        0 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    6
  5631 ;; This function calls:
  5632 ;;		_Timeout_Counter
  5633 ;;		_set_TimeoutCleared
  5634 ;; This function is called by:
  5635 ;;		_Switch_Initialization
  5636 ;;		_Switch_Main
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _TouchPower
  5642  11DC                     _TouchPower:	
  5643                           
  5644                           ;Switch_B1.c: 11: if (RC5 == 0) {
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5648  11DC  0020               	movlb	0	; select bank0
  5649  11DD  1A8E               	btfsc	14,5	;volatile
  5650  11DE  0008               	return
  5651                           
  5652                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  5653  11DF  0021               	movlb	1	; select bank1
  5654  11E0  1C20               	btfss	_myMain^(0+128),0
  5655  11E1  0008               	return
  5656  11E2  29E8               	goto	l6828
  5657  11E3                     l2171:	
  5658                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  5659                           
  5660                           
  5661                           ;Switch_B1.c: 14: RC5 = 1;
  5662  11E3  0020               	movlb	0	; select bank0
  5663  11E4  168E               	bsf	14,5	;volatile
  5664                           
  5665                           ;Switch_B1.c: 15: Timeout_Counter();
  5666  11E5  3191  219D  3191   	fcall	_Timeout_Counter
  5667  11E8                     l6828:	
  5668  11E8  0020               	movlb	0	; select bank0
  5669  11E9  1A8E               	btfsc	14,5	;volatile
  5670  11EA  29EE               	goto	l6832
  5671  11EB  0021               	movlb	1	; select bank1
  5672  11EC  1D2D               	btfss	(_myMain^(0+128)+13),2
  5673  11ED  29E3               	goto	l2171
  5674  11EE                     l6832:	
  5675                           
  5676                           ;Switch_B1.c: 16: }
  5677                           ;Switch_B1.c: 17: set_TimeoutCleared();
  5678  11EE  319F  2715         	fcall	_set_TimeoutCleared
  5679  11F0  0008               	return
  5680  11F1                     __end_of_TouchPower:	
  5681                           
  5682                           	psect	text17
  5683  1EFE                     __ptext17:	
  5684 ;; *************** function _RF_Main *****************
  5685 ;; Defined at:
  5686 ;;		line 16 in file "../src/RF_Control_B1.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;		None               void
  5693 ;; Registers used:
  5694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;Total ram usage:        0 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:   14
  5707 ;; This function calls:
  5708 ;;		_setRF_Main
  5709 ;; This function is called by:
  5710 ;;		_main
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           
  5715                           ;psect for function _RF_Main
  5716  1EFE                     _RF_Main:	
  5717                           
  5718                           ;RF_Control_B1.c: 18: setRF_Main();
  5719                           
  5720                           ;incstack = 0
  5721                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5722  1EFE  3183  23E2         	fcall	_setRF_Main
  5723  1F00  0008               	return
  5724  1F01                     __end_of_RF_Main:	
  5725                           
  5726                           	psect	text18
  5727  03E2                     __ptext18:	
  5728 ;; *************** function _setRF_Main *****************
  5729 ;; Defined at:
  5730 ;;		line 52 in file "../src/RF_Control_B1.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;		None
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  error           1   78[BANK0 ] unsigned char 
  5735 ;;  Receive_OK      1   77[BANK0 ] unsigned char 
  5736 ;;  loop_f          1   76[BANK0 ] unsigned char 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;		None               void
  5739 ;; Registers used:
  5740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;Total ram usage:        4 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:   13
  5753 ;; This function calls:
  5754 ;;		_CC2500_ReadStatus
  5755 ;;		_CC2500_RxData
  5756 ;;		_CC2500_TxData
  5757 ;;		_CC2500_WriteCommand
  5758 ;;		_getBuz_GO
  5759 ;;		_getMain_All_Error_Status
  5760 ;;		_getRF_KeyStatus
  5761 ;;		_getRxData
  5762 ;; This function is called by:
  5763 ;;		_RF_Main
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           
  5768                           ;psect for function _setRF_Main
  5769  03E2                     _setRF_Main:	
  5770                           
  5771                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  5772                           
  5773                           ;incstack = 0
  5774                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5775  03E2  0020               	movlb	0	; select bank0
  5776  03E3  01EC               	clrf	setRF_Main@loop_f
  5777  03E4  01ED               	clrf	setRF_Main@Receive_OK
  5778  03E5  01EE               	clrf	setRF_Main@error
  5779                           
  5780                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5781  03E6  0021               	movlb	1	; select bank1
  5782  03E7  1C3C               	btfss	_RF1^(0+128),0
  5783  03E8  2CCF               	goto	l1784
  5784                           
  5785                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5786  03E9  3190  2085  3183   	fcall	_getBuz_GO
  5787  03EC  0020               	movlb	0	; select bank0
  5788  03ED  0821               	movf	?_getBuz_GO+1,w
  5789  03EE  0420               	iorwf	?_getBuz_GO,w
  5790  03EF  1D03               	skipz
  5791  03F0  0008               	return
  5792                           
  5793                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  5794  03F1  3000               	movlw	0
  5795  03F2  319F  2711  3183   	fcall	_getMain_All_Error_Status
  5796  03F5  3800               	iorlw	0
  5797  03F6  1D03               	skipz
  5798  03F7  2C0C               	goto	l1786
  5799                           
  5800                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  5801  03F8  3190  2096  3183   	fcall	_getRF_KeyStatus
  5802  03FB  3A01               	xorlw	1
  5803  03FC  3000               	movlw	0
  5804  03FD  1903               	skipnz
  5805  03FE  3001               	movlw	1
  5806  03FF  0020               	movlb	0	; select bank0
  5807  0400  00EB               	movwf	??_setRF_Main
  5808  0401  0CEB               	rrf	??_setRF_Main,f
  5809  0402  0CEB               	rrf	??_setRF_Main,f
  5810  0403  0021               	movlb	1	; select bank1
  5811  0404  083C               	movf	_RF1^(0+128),w
  5812  0405  0020               	movlb	0	; select bank0
  5813  0406  066B               	xorwf	??_setRF_Main,w
  5814  0407  397F               	andlw	-129
  5815  0408  066B               	xorwf	??_setRF_Main,w
  5816  0409  0021               	movlb	1	; select bank1
  5817  040A  00BC               	movwf	_RF1^(0+128)
  5818                           
  5819                           ;RF_Control_B1.c: 65: } else {
  5820  040B  2C0E               	goto	l1787
  5821  040C                     l1786:	
  5822                           
  5823                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  5824  040C  0021               	movlb	1	; select bank1
  5825  040D  13BC               	bcf	_RF1^(0+128),7
  5826  040E                     l1787:	
  5827                           
  5828                           ;RF_Control_B1.c: 70: }
  5829                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  5830  040E  1BBC               	btfsc	_RF1^(0+128),7
  5831  040F  1B3C               	btfsc	_RF1^(0+128),6
  5832  0410  2C16               	goto	l1788
  5833                           
  5834                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  5835  0411  01BE               	clrf	(_RF1^(0+128)+2)
  5836  0412  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5837                           
  5838                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  5839  0413  14BD               	bsf	(_RF1^(0+128)+1),1
  5840                           
  5841                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  5842  0414  11BC               	bcf	_RF1^(0+128),3
  5843                           
  5844                           ;RF_Control_B1.c: 76: } else {
  5845  0415  0008               	return
  5846  0416                     l1788:	
  5847                           
  5848                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5849  0416  18BD               	btfsc	(_RF1^(0+128)+1),1
  5850  0417  1B3C               	btfsc	_RF1^(0+128),6
  5851  0418  2C2D               	goto	l8482
  5852                           
  5853                           ;RF_Control_B1.c: 78: RF1.Count++;
  5854  0419  3001               	movlw	1
  5855  041A  07BE               	addwf	(_RF1^(0+128)+2),f
  5856  041B  3000               	movlw	0
  5857  041C  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  5858                           
  5859                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5860  041D  3002               	movlw	2
  5861  041E  3EBC               	addlw	_RF1& (0+255)
  5862  041F  0086               	movwf	6
  5863  0420  0187               	clrf	7
  5864  0421  3F40               	moviw [0]fsr1
  5865  0422  0643               	xorwf	(_RF1^(0+128)+7),w
  5866  0423  1D03               	skipz
  5867  0424  2C27               	goto	u8915
  5868  0425  3F41               	moviw [1]fsr1
  5869  0426  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  5870  0427                     u8915:	
  5871  0427  1D03               	skipz
  5872  0428  2C9C               	goto	l8534
  5873                           
  5874                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5875  0429  01BE               	clrf	(_RF1^(0+128)+2)
  5876  042A  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5877                           
  5878                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5879  042B  10BD               	bcf	(_RF1^(0+128)+1),1
  5880                           
  5881                           ;RF_Control_B1.c: 82: }
  5882                           ;RF_Control_B1.c: 83: } else {
  5883  042C  2C9C               	goto	l8534
  5884  042D                     l8482:	
  5885                           
  5886                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5887  042D  01BE               	clrf	(_RF1^(0+128)+2)
  5888  042E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5889                           
  5890                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5891  042F  10BD               	bcf	(_RF1^(0+128)+1),1
  5892                           
  5893                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5894  0430  193C               	btfsc	_RF1^(0+128),2
  5895  0431  1B3C               	btfsc	_RF1^(0+128),6
  5896  0432  2C4E               	goto	l1793
  5897                           
  5898                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5899  0433  113C               	bcf	_RF1^(0+128),2
  5900                           
  5901                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5902  0434  11BC               	bcf	_RF1^(0+128),3
  5903                           
  5904                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5905  0435  10BC               	bcf	_RF1^(0+128),1
  5906                           
  5907                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5908  0436  303B               	movlw	59
  5909  0437  3193  23D3  3183   	fcall	_CC2500_ReadStatus
  5910                           
  5911                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5912  043A  0021               	movlb	1	; select bank1
  5913  043B  085E               	movf	_s_data^(0+128),w
  5914  043C  1903               	btfsc	3,2
  5915  043D  2C4A               	goto	l1794
  5916                           
  5917                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5918  043E  3036               	movlw	54
  5919  043F  3192  223A  3183   	fcall	_CC2500_WriteCommand
  5920                           
  5921                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5922  0442  303B               	movlw	59
  5923  0443  3192  223A  3183   	fcall	_CC2500_WriteCommand
  5924                           
  5925                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5926  0446  303A               	movlw	58
  5927  0447  3192  223A  3183   	fcall	_CC2500_WriteCommand
  5928  044A                     l1794:	
  5929                           
  5930                           ;RF_Control_B1.c: 97: }
  5931                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5932  044A  318C  24CC  3183   	fcall	_CC2500_TxData
  5933                           
  5934                           ;RF_Control_B1.c: 100: } else {
  5935  044D  2C9C               	goto	l8534
  5936  044E                     l1793:	
  5937                           
  5938                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5939  044E  1DBC               	btfss	_RF1^(0+128),3
  5940  044F  2C87               	goto	l1796
  5941                           
  5942                           ;RF_Control_B1.c: 104: CC2500_RxData();
  5943  0450  318E  2683  3183   	fcall	_CC2500_RxData
  5944                           
  5945                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  5946  0453  0021               	movlb	1	; select bank1
  5947  0454  1CBC               	btfss	_RF1^(0+128),1
  5948  0455  2C9C               	goto	l8534
  5949                           
  5950                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  5951  0456  10BC               	bcf	_RF1^(0+128),1
  5952                           
  5953                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  5954  0457  12BD               	bcf	(_RF1^(0+128)+1),5
  5955                           
  5956                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  5957  0458  01C6               	clrf	(_RF1^(0+128)+10)
  5958  0459  01C7               	clrf	((_RF1+1)^(0+128)+10)
  5959                           
  5960                           ;RF_Control_B1.c: 117: getRxData();
  5961  045A  318E  260F  3183   	fcall	_getRxData
  5962                           
  5963                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  5964  045D  0021               	movlb	1	; select bank1
  5965  045E  14BD               	bsf	(_RF1^(0+128)+1),1
  5966                           
  5967                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  5968  045F  1DBD               	btfss	(_RF1^(0+128)+1),3
  5969  0460  2C6E               	goto	l8518
  5970                           
  5971                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  5972  0461  3000               	movlw	0
  5973  0462  0244               	subwf	((_RF1+1)^(0+128)+7),w
  5974  0463  300B               	movlw	11
  5975  0464  1903               	skipnz
  5976  0465  0243               	subwf	(_RF1^(0+128)+7),w
  5977  0466  1C03               	skipc
  5978  0467  2C6C               	goto	l8516
  5979                           
  5980                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  5981  0468  300A               	movlw	10
  5982  0469  00C3               	movwf	(_RF1^(0+128)+7)
  5983  046A  3000               	movlw	0
  5984  046B  00C4               	movwf	(_RF1^(0+128)+8)
  5985  046C                     l8516:	
  5986                           
  5987                           ;RF_Control_B1.c: 125: }
  5988                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  5989  046C  01C0               	clrf	(_RF1^(0+128)+4)
  5990                           
  5991                           ;RF_Control_B1.c: 127: } else {
  5992  046D  2C9C               	goto	l8534
  5993  046E                     l8518:	
  5994                           
  5995                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  5996  046E  3001               	movlw	1
  5997  046F  0020               	movlb	0	; select bank0
  5998  0470  00EB               	movwf	??_setRF_Main
  5999  0471  086B               	movf	??_setRF_Main,w
  6000  0472  0021               	movlb	1	; select bank1
  6001  0473  07C0               	addwf	(_RF1^(0+128)+4),f
  6002                           
  6003                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6004  0474  0840               	movf	(_RF1^(0+128)+4),w
  6005  0475  3A02               	xorlw	2
  6006  0476  1D03               	skipz
  6007  0477  2C9C               	goto	l8534
  6008                           
  6009                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6010  0478  01C0               	clrf	(_RF1^(0+128)+4)
  6011                           
  6012                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6013  0479  01C1               	clrf	(_RF1^(0+128)+5)
  6014  047A  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6015                           
  6016                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  6017  047B  3000               	movlw	0
  6018  047C  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6019  047D  30C8               	movlw	200
  6020  047E  1903               	skipnz
  6021  047F  0243               	subwf	(_RF1^(0+128)+7),w
  6022  0480  1803               	skipnc
  6023  0481  2C9C               	goto	l8534
  6024                           
  6025                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6026  0482  300A               	movlw	10
  6027  0483  07C3               	addwf	(_RF1^(0+128)+7),f
  6028  0484  3000               	movlw	0
  6029  0485  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6030                           
  6031                           ;RF_Control_B1.c: 134: }
  6032                           ;RF_Control_B1.c: 135: }
  6033                           ;RF_Control_B1.c: 136: }
  6034                           ;RF_Control_B1.c: 137: }
  6035                           ;RF_Control_B1.c: 138: } else {
  6036  0486  2C9C               	goto	l8534
  6037  0487                     l1796:	
  6038                           
  6039                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6040  0487  1DBC               	btfss	_RF1^(0+128),3
  6041  0488  18BC               	btfsc	_RF1^(0+128),1
  6042  0489  2C9C               	goto	l8534
  6043                           
  6044                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  6045  048A  15BC               	bsf	_RF1^(0+128),3
  6046                           
  6047                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  6048  048B  16BD               	bsf	(_RF1^(0+128)+1),5
  6049                           
  6050                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  6051  048C  3036               	movlw	54
  6052  048D  3192  223A  3183   	fcall	_CC2500_WriteCommand
  6053                           
  6054                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  6055  0490  303B               	movlw	59
  6056  0491  3192  223A  3183   	fcall	_CC2500_WriteCommand
  6057                           
  6058                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  6059  0494  303A               	movlw	58
  6060  0495  3192  223A  3183   	fcall	_CC2500_WriteCommand
  6061                           
  6062                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  6063  0498  3034               	movlw	52
  6064  0499  3192  223A  3183   	fcall	_CC2500_WriteCommand
  6065  049C                     l8534:	
  6066                           
  6067                           ;RF_Control_B1.c: 148: }
  6068                           ;RF_Control_B1.c: 150: }
  6069                           ;RF_Control_B1.c: 151: }
  6070                           ;RF_Control_B1.c: 152: }
  6071                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  6072  049C  0021               	movlb	1	; select bank1
  6073  049D  1DBC               	btfss	_RF1^(0+128),3
  6074  049E  2CBD               	goto	l8546
  6075                           
  6076                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  6077  049F  3001               	movlw	1
  6078  04A0  07C1               	addwf	(_RF1^(0+128)+5),f
  6079  04A1  3000               	movlw	0
  6080  04A2  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  6081                           
  6082                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  6083  04A3  3005               	movlw	5
  6084  04A4  3EBC               	addlw	_RF1& (0+255)
  6085  04A5  0086               	movwf	6
  6086  04A6  0187               	clrf	7
  6087  04A7  3F40               	moviw [0]fsr1
  6088  04A8  3A64               	xorlw	100
  6089  04A9  1D03               	skipz
  6090  04AA  2CAD               	goto	u9045
  6091  04AB  3F41               	moviw [1]fsr1
  6092  04AC  3A00               	xorlw	0
  6093  04AD                     u9045:	
  6094  04AD  1D03               	skipz
  6095  04AE  2CBD               	goto	l8546
  6096                           
  6097                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  6098  04AF  01C1               	clrf	(_RF1^(0+128)+5)
  6099  04B0  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6100                           
  6101                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  6102  04B1  01C0               	clrf	(_RF1^(0+128)+4)
  6103                           
  6104                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  6105  04B2  3000               	movlw	0
  6106  04B3  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6107  04B4  300B               	movlw	11
  6108  04B5  1903               	skipnz
  6109  04B6  0243               	subwf	(_RF1^(0+128)+7),w
  6110  04B7  1C03               	skipc
  6111  04B8  2CBD               	goto	l8546
  6112                           
  6113                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  6114  04B9  300A               	movlw	10
  6115  04BA  02C3               	subwf	(_RF1^(0+128)+7),f
  6116  04BB  3000               	movlw	0
  6117  04BC  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  6118  04BD                     l8546:	
  6119                           
  6120                           ;RF_Control_B1.c: 160: }
  6121                           ;RF_Control_B1.c: 161: }
  6122                           ;RF_Control_B1.c: 162: }
  6123                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  6124  04BD  1EBD               	btfss	(_RF1^(0+128)+1),5
  6125  04BE  0008               	return
  6126                           
  6127                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  6128  04BF  3001               	movlw	1
  6129  04C0  07C6               	addwf	(_RF1^(0+128)+10),f
  6130  04C1  3000               	movlw	0
  6131  04C2  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  6132                           
  6133                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  6134  04C3  3075               	movlw	117
  6135  04C4  0247               	subwf	((_RF1+1)^(0+128)+10),w
  6136  04C5  3030               	movlw	48
  6137  04C6  1903               	skipnz
  6138  04C7  0246               	subwf	(_RF1^(0+128)+10),w
  6139  04C8  1C03               	skipc
  6140  04C9  0008               	return
  6141                           
  6142                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  6143  04CA  01C6               	clrf	(_RF1^(0+128)+10)
  6144  04CB  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6145                           
  6146                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  6147  04CC  11BC               	bcf	_RF1^(0+128),3
  6148                           
  6149                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  6150  04CD  10BC               	bcf	_RF1^(0+128),1
  6151                           
  6152                           ;RF_Control_B1.c: 169: }
  6153                           ;RF_Control_B1.c: 170: }
  6154                           ;RF_Control_B1.c: 171: }
  6155                           ;RF_Control_B1.c: 172: }
  6156                           ;RF_Control_B1.c: 179: } else {
  6157  04CE  0008               	return
  6158  04CF                     l1784:	
  6159                           
  6160                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  6161  04CF  1C20               	btfss	_myMain^(0+128),0
  6162  04D0  0008               	return
  6163                           
  6164                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  6165  04D1  143C               	bsf	_RF1^(0+128),0
  6166  04D2  0008               	return
  6167  04D3                     __end_of_setRF_Main:	
  6168                           
  6169                           	psect	text19
  6170  0E0F                     __ptext19:	
  6171 ;; *************** function _getRxData *****************
  6172 ;; Defined at:
  6173 ;;		line 269 in file "../src/RF_Control_B1.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  error           1   74[BANK0 ] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;		None               void
  6180 ;; Registers used:
  6181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;Total ram usage:        2 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:   12
  6194 ;; This function calls:
  6195 ;;		_getMain_All_Error_Status
  6196 ;;		_setControl_Lights_Table
  6197 ;;		_setLog_Code
  6198 ;; This function is called by:
  6199 ;;		_setRF_Main
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _getRxData
  6205  0E0F                     _getRxData:	
  6206                           
  6207                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6211  0E0F  3000               	movlw	0
  6212  0E10  319F  2711  318E   	fcall	_getMain_All_Error_Status
  6213  0E13  0020               	movlb	0	; select bank0
  6214  0E14  00E9               	movwf	??_getRxData
  6215  0E15  0869               	movf	??_getRxData,w
  6216  0E16  00EA               	movwf	getRxData@error
  6217                           
  6218                           ;RF_Control_B1.c: 271: if (error == 0) {
  6219  0E17  08EA               	movf	getRxData@error,f
  6220  0E18  1D03               	skipz
  6221  0E19  0008               	return
  6222                           
  6223                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  6224  0E1A  0021               	movlb	1	; select bank1
  6225  0E1B  1F3C               	btfss	_RF1^(0+128),6
  6226  0E1C  2E2D               	goto	l8278
  6227                           
  6228                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6229  0E1D  0022               	movlb	2	; select bank2
  6230  0E1E  08A0               	movf	_RF_Data^(0+256),f
  6231  0E1F  1D03               	skipz
  6232  0E20  2E2A               	goto	l1835
  6233  0E21  0821               	movf	(_RF_Data^(0+256)+1),w
  6234  0E22  3A64               	xorlw	100
  6235  0E23  1D03               	skipz
  6236  0E24  2E2A               	goto	l1835
  6237                           
  6238                           ;RF_Control_B1.c: 274: setLog_Code();
  6239  0E25  3195  25BC         	fcall	_setLog_Code
  6240                           
  6241                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  6242  0E27  0021               	movlb	1	; select bank1
  6243  0E28  15BD               	bsf	(_RF1^(0+128)+1),3
  6244                           
  6245                           ;RF_Control_B1.c: 276: } else {
  6246  0E29  0008               	return
  6247  0E2A                     l1835:	
  6248                           
  6249                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  6250  0E2A  0021               	movlb	1	; select bank1
  6251  0E2B  11BD               	bcf	(_RF1^(0+128)+1),3
  6252                           
  6253                           ;RF_Control_B1.c: 278: }
  6254                           ;RF_Control_B1.c: 279: } else {
  6255  0E2C  0008               	return
  6256  0E2D                     l8278:	
  6257                           
  6258                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6259  0E2D  0022               	movlb	2	; select bank2
  6260  0E2E  08A0               	movf	_RF_Data^(0+256),f
  6261  0E2F  1D03               	skipz
  6262  0E30  2E6B               	goto	l8300
  6263  0E31  0821               	movf	(_RF_Data^(0+256)+1),w
  6264  0E32  3A02               	xorlw	2
  6265  0E33  1D03               	skipz
  6266  0E34  2E6B               	goto	l8300
  6267                           
  6268                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6269  0E35  082C               	movf	(_RF_Data^(0+256)+12),w
  6270  0E36  3AFF               	xorlw	255
  6271  0E37  1D03               	skipz
  6272  0E38  2E45               	goto	l8290
  6273  0E39  082D               	movf	(_RF_Data^(0+256)+13),w
  6274  0E3A  3AFF               	xorlw	255
  6275  0E3B  1D03               	skipz
  6276  0E3C  2E45               	goto	l8290
  6277  0E3D  082E               	movf	(_RF_Data^(0+256)+14),w
  6278  0E3E  3AFF               	xorlw	255
  6279  0E3F  1D03               	skipz
  6280  0E40  2E45               	goto	l8290
  6281                           
  6282                           ;RF_Control_B1.c: 283: __nop();
  6283  0E41  0000               	nop
  6284                           
  6285                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  6286  0E42  0021               	movlb	1	; select bank1
  6287  0E43  11BD               	bcf	(_RF1^(0+128)+1),3
  6288                           
  6289                           ;RF_Control_B1.c: 285: } else {
  6290  0E44  0008               	return
  6291  0E45                     l8290:	
  6292                           
  6293                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6294  0E45  0020               	movlb	0	; select bank0
  6295  0E46  086F               	movf	_product,w
  6296  0E47  3E0C               	addlw	12
  6297  0E48  0086               	movwf	6
  6298  0E49  3002               	movlw	2	; select bank4/5
  6299  0E4A  0087               	movwf	7
  6300  0E4B  0022               	movlb	2	; select bank2
  6301  0E4C  082C               	movf	(_RF_Data^(0+256)+12),w
  6302  0E4D  0601               	xorwf	1,w
  6303  0E4E  1D03               	skipz
  6304  0E4F  0008               	return
  6305  0E50  0020               	movlb	0	; select bank0
  6306  0E51  086F               	movf	_product,w
  6307  0E52  3E0D               	addlw	13
  6308  0E53  0086               	movwf	6
  6309  0E54  3002               	movlw	2	; select bank4/5
  6310  0E55  0087               	movwf	7
  6311  0E56  0022               	movlb	2	; select bank2
  6312  0E57  082D               	movf	(_RF_Data^(0+256)+13),w
  6313  0E58  0601               	xorwf	1,w
  6314  0E59  1D03               	skipz
  6315  0E5A  0008               	return
  6316  0E5B  0020               	movlb	0	; select bank0
  6317  0E5C  086F               	movf	_product,w
  6318  0E5D  3E0E               	addlw	14
  6319  0E5E  0086               	movwf	6
  6320  0E5F  3002               	movlw	2	; select bank4/5
  6321  0E60  0087               	movwf	7
  6322  0E61  0022               	movlb	2	; select bank2
  6323  0E62  082E               	movf	(_RF_Data^(0+256)+14),w
  6324  0E63  0601               	xorwf	1,w
  6325  0E64  1D03               	skipz
  6326  0E65  0008               	return
  6327                           
  6328                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  6329  0E66  318D  25A0         	fcall	_setControl_Lights_Table
  6330                           
  6331                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  6332  0E68  0021               	movlb	1	; select bank1
  6333  0E69  15BD               	bsf	(_RF1^(0+128)+1),3
  6334                           
  6335                           ;RF_Control_B1.c: 289: }
  6336                           ;RF_Control_B1.c: 290: }
  6337                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6338  0E6A  0008               	return
  6339  0E6B                     l8300:	
  6340  0E6B  0022               	movlb	2	; select bank2
  6341  0E6C  0820               	movf	_RF_Data^(0+256),w
  6342  0E6D  3AFF               	xorlw	255
  6343  0E6E  1D03               	skipz
  6344  0E6F  2E76               	goto	l8306
  6345  0E70  0821               	movf	(_RF_Data^(0+256)+1),w
  6346  0E71  3A02               	xorlw	2
  6347  0E72  1D03               	skipz
  6348  0E73  2E76               	goto	l8306
  6349                           
  6350                           ;RF_Control_B1.c: 292: __nop();
  6351  0E74  0000               	nop
  6352                           
  6353                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6354  0E75  0008               	return
  6355  0E76                     l8306:	
  6356  0E76  0022               	movlb	2	; select bank2
  6357  0E77  08A0               	movf	_RF_Data^(0+256),f
  6358  0E78  1D03               	skipz
  6359  0E79  2E80               	goto	l1845
  6360  0E7A  0821               	movf	(_RF_Data^(0+256)+1),w
  6361  0E7B  3A65               	xorlw	101
  6362  0E7C  1D03               	skipz
  6363  0E7D  2E80               	goto	l1845
  6364                           
  6365                           ;RF_Control_B1.c: 294: __nop();
  6366  0E7E  0000               	nop
  6367                           
  6368                           ;RF_Control_B1.c: 295: } else {
  6369  0E7F  0008               	return
  6370  0E80                     l1845:	
  6371                           
  6372                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  6373  0E80  0021               	movlb	1	; select bank1
  6374  0E81  11BD               	bcf	(_RF1^(0+128)+1),3
  6375                           
  6376                           ;RF_Control_B1.c: 297: }
  6377                           ;RF_Control_B1.c: 302: }
  6378                           ;RF_Control_B1.c: 303: } else {
  6379  0E82  0008               	return
  6380  0E83                     __end_of_getRxData:	
  6381                           ;RF_Control_B1.c: 304: ;
  6382                           
  6383                           
  6384                           	psect	text20
  6385  15BC                     __ptext20:	
  6386 ;; *************** function _setLog_Code *****************
  6387 ;; Defined at:
  6388 ;;		line 309 in file "../src/RF_Control_B1.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;		None
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;		None               void
  6395 ;; Registers used:
  6396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;Total ram usage:        1 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    7
  6409 ;; This function calls:
  6410 ;;		_setBuz
  6411 ;;		_setMemory_LoopSave
  6412 ;;		_setMemory_Modify
  6413 ;; This function is called by:
  6414 ;;		_getRxData
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _setLog_Code
  6420  15BC                     _setLog_Code:	
  6421                           
  6422                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6426  15BC  0021               	movlb	1	; select bank1
  6427  15BD  133C               	bcf	_RF1^(0+128),6
  6428                           
  6429                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  6430  15BE  0022               	movlb	2	; select bank2
  6431  15BF  082C               	movf	(_RF_Data^(0+256)+12),w
  6432  15C0  0020               	movlb	0	; select bank0
  6433  15C1  00AD               	movwf	??_setLog_Code
  6434  15C2  086F               	movf	_product,w
  6435  15C3  3E0C               	addlw	12
  6436  15C4  0086               	movwf	6
  6437  15C5  3002               	movlw	2	; select bank4/5
  6438  15C6  0087               	movwf	7
  6439  15C7  082D               	movf	??_setLog_Code,w
  6440  15C8  0081               	movwf	1
  6441                           
  6442                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  6443  15C9  0022               	movlb	2	; select bank2
  6444  15CA  082D               	movf	(_RF_Data^(0+256)+13),w
  6445  15CB  0020               	movlb	0	; select bank0
  6446  15CC  00AD               	movwf	??_setLog_Code
  6447  15CD  086F               	movf	_product,w
  6448  15CE  3E0D               	addlw	13
  6449  15CF  0086               	movwf	6
  6450  15D0  3002               	movlw	2	; select bank4/5
  6451  15D1  0087               	movwf	7
  6452  15D2  082D               	movf	??_setLog_Code,w
  6453  15D3  0081               	movwf	1
  6454                           
  6455                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  6456  15D4  0022               	movlb	2	; select bank2
  6457  15D5  082E               	movf	(_RF_Data^(0+256)+14),w
  6458  15D6  0020               	movlb	0	; select bank0
  6459  15D7  00AD               	movwf	??_setLog_Code
  6460  15D8  086F               	movf	_product,w
  6461  15D9  3E0E               	addlw	14
  6462  15DA  0086               	movwf	6
  6463  15DB  3002               	movlw	2	; select bank4/5
  6464  15DC  0087               	movwf	7
  6465  15DD  082D               	movf	??_setLog_Code,w
  6466  15DE  0081               	movwf	1
  6467                           
  6468                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  6469  15DF  3064               	movlw	100
  6470  15E0  00A9               	movwf	setBuz@time
  6471  15E1  3000               	movlw	0
  6472  15E2  00AA               	movwf	setBuz@time+1
  6473  15E3  3001               	movlw	1
  6474  15E4  318A  2240  3195   	fcall	_setBuz
  6475                           
  6476                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  6477  15E7  0021               	movlb	1	; select bank1
  6478  15E8  1EA0               	btfss	_myMain^(0+128),5
  6479  15E9  2DEE               	goto	l1851
  6480                           
  6481                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  6482  15EA  3001               	movlw	1
  6483  15EB  3191  2127  3195   	fcall	_setMemory_LoopSave
  6484  15EE                     l1851:	
  6485                           
  6486                           ;RF_Control_B1.c: 317: }
  6487                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  6488  15EE  3001               	movlw	1
  6489  15EF  3191  2114         	fcall	_setMemory_Modify
  6490  15F1  0008               	return
  6491  15F2                     __end_of_setLog_Code:	
  6492                           
  6493                           	psect	text21
  6494  1127                     __ptext21:	
  6495 ;; *************** function _setMemory_LoopSave *****************
  6496 ;; Defined at:
  6497 ;;		line 1006 in file "../src/MCU_B1.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  command         1    wreg     unsigned char 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  command         1    1[BANK0 ] unsigned char 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;		None               void
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;Total ram usage:        2 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    5
  6518 ;; This function calls:
  6519 ;;		Nothing
  6520 ;; This function is called by:
  6521 ;;		_setLog_Code
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           
  6526                           ;psect for function _setMemory_LoopSave
  6527  1127                     _setMemory_LoopSave:	
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6531                           ;setMemory_LoopSave@command stored from wreg
  6532  1127  0020               	movlb	0	; select bank0
  6533  1128  00A1               	movwf	setMemory_LoopSave@command
  6534                           
  6535                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  6536  1129  0821               	movf	setMemory_LoopSave@command,w
  6537  112A  3A01               	xorlw	1
  6538  112B  3000               	movlw	0
  6539  112C  1903               	skipnz
  6540  112D  3001               	movlw	1
  6541  112E  00A0               	movwf	??_setMemory_LoopSave
  6542  112F  0DA0               	rlf	??_setMemory_LoopSave,f
  6543  1130  0DA0               	rlf	??_setMemory_LoopSave,f
  6544  1131  0023               	movlb	3	; select bank3
  6545  1132  0844               	movf	(_Memory^(0+384)+36),w
  6546  1133  0020               	movlb	0	; select bank0
  6547  1134  0620               	xorwf	??_setMemory_LoopSave,w
  6548  1135  39FB               	andlw	-5
  6549  1136  0620               	xorwf	??_setMemory_LoopSave,w
  6550  1137  0023               	movlb	3	; select bank3
  6551  1138  00C4               	movwf	(_Memory^(0+384)+36)
  6552  1139  0008               	return
  6553  113A                     __end_of_setMemory_LoopSave:	
  6554                           
  6555                           	psect	text22
  6556  0DA0                     __ptext22:	
  6557 ;; *************** function _setControl_Lights_Table *****************
  6558 ;; Defined at:
  6559 ;;		line 322 in file "../src/RF_Control_B1.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;		None               void
  6566 ;; Registers used:
  6567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;Total ram usage:        0 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:   11
  6580 ;; This function calls:
  6581 ;;		_setBuz
  6582 ;;		_setRFSW_AdjControl
  6583 ;;		_setRFSW_Control
  6584 ;;		_setTxData
  6585 ;; This function is called by:
  6586 ;;		_getRxData
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           
  6591                           ;psect for function _setControl_Lights_Table
  6592  0DA0                     _setControl_Lights_Table:	
  6593                           
  6594                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  6595                           
  6596                           ;incstack = 0
  6597                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6598  0DA0  2DF3               	goto	l8078
  6599  0DA1                     l8050:	
  6600                           ;RF_Control_B1.c: 324: case 0x00:
  6601                           
  6602                           
  6603                           ;RF_Control_B1.c: 327: setRFSW_Control(1);
  6604  0DA1  3001               	movlw	1
  6605  0DA2  3189  21E8  318D   	fcall	_setRFSW_Control
  6606                           
  6607                           ;RF_Control_B1.c: 333: setRFSW_Control(2);
  6608  0DA5  3002               	movlw	2
  6609  0DA6  3189  21E8  318D   	fcall	_setRFSW_Control
  6610                           
  6611                           ;RF_Control_B1.c: 341: product->Data[9]=0;
  6612  0DA9  0020               	movlb	0	; select bank0
  6613  0DAA  086F               	movf	_product,w
  6614  0DAB  3E09               	addlw	9
  6615  0DAC  0086               	movwf	6
  6616  0DAD  3002               	movlw	2	; select bank4/5
  6617  0DAE  0087               	movwf	7
  6618  0DAF  0181               	clrf	1
  6619                           
  6620                           ;RF_Control_B1.c: 342: product->Data[11]=0;
  6621  0DB0  086F               	movf	_product,w
  6622  0DB1  3E0B               	addlw	11
  6623  0DB2  0086               	movwf	6
  6624  0DB3  3002               	movlw	2	; select bank4/5
  6625  0DB4  0087               	movwf	7
  6626  0DB5  0181               	clrf	1
  6627                           
  6628                           ;RF_Control_B1.c: 343: product->Data[15]=0;
  6629  0DB6  086F               	movf	_product,w
  6630  0DB7  3E0F               	addlw	15
  6631  0DB8  0086               	movwf	6
  6632  0DB9  3002               	movlw	2	; select bank4/5
  6633  0DBA  0087               	movwf	7
  6634  0DBB  0181               	clrf	1
  6635                           
  6636                           ;RF_Control_B1.c: 344: product->Data[17]=0;
  6637  0DBC  086F               	movf	_product,w
  6638  0DBD  3E11               	addlw	17
  6639  0DBE  0086               	movwf	6
  6640  0DBF  3002               	movlw	2	; select bank4/5
  6641  0DC0  0087               	movwf	7
  6642  0DC1  0181               	clrf	1
  6643                           
  6644                           ;RF_Control_B1.c: 345: setBuz(1, 100);
  6645  0DC2  3064               	movlw	100
  6646  0DC3  00A9               	movwf	setBuz@time
  6647  0DC4  3000               	movlw	0
  6648  0DC5  00AA               	movwf	setBuz@time+1
  6649  0DC6  3001               	movlw	1
  6650  0DC7  318A  2240  318D   	fcall	_setBuz
  6651                           
  6652                           ;RF_Control_B1.c: 346: setTxData();
  6653  0DCA  3185  25AF         	fcall	_setTxData
  6654                           
  6655                           ;RF_Control_B1.c: 347: break;
  6656  0DCC  0008               	return
  6657  0DCD                     l8064:	
  6658                           ;RF_Control_B1.c: 348: case 0x20:
  6659                           
  6660                           
  6661                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  6662  0DCD  0020               	movlb	0	; select bank0
  6663  0DCE  086F               	movf	_product,w
  6664  0DCF  3E09               	addlw	9
  6665  0DD0  0086               	movwf	6
  6666  0DD1  3002               	movlw	2	; select bank4/5
  6667  0DD2  0087               	movwf	7
  6668  0DD3  0181               	clrf	1
  6669                           
  6670                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  6671  0DD4  086F               	movf	_product,w
  6672  0DD5  3E0B               	addlw	11
  6673  0DD6  0086               	movwf	6
  6674  0DD7  3002               	movlw	2	; select bank4/5
  6675  0DD8  0087               	movwf	7
  6676  0DD9  0181               	clrf	1
  6677                           
  6678                           ;RF_Control_B1.c: 351: product->Data[17]=0;
  6679  0DDA  086F               	movf	_product,w
  6680  0DDB  3E11               	addlw	17
  6681  0DDC  0086               	movwf	6
  6682  0DDD  3002               	movlw	2	; select bank4/5
  6683  0DDE  0087               	movwf	7
  6684  0DDF  0181               	clrf	1
  6685                           
  6686                           ;RF_Control_B1.c: 352: setTxData();
  6687  0DE0  3185  25AF         	fcall	_setTxData
  6688                           
  6689                           ;RF_Control_B1.c: 353: break;
  6690  0DE2  0008               	return
  6691  0DE3                     l8068:	
  6692                           ;RF_Control_B1.c: 354: case 0x01:
  6693                           
  6694                           
  6695                           ;RF_Control_B1.c: 356: setRFSW_Control(1);
  6696  0DE3  3001               	movlw	1
  6697  0DE4  3189  21E8         	fcall	_setRFSW_Control
  6698                           
  6699                           ;RF_Control_B1.c: 358: break;
  6700  0DE6  0008               	return
  6701  0DE7                     l8070:	
  6702                           ;RF_Control_B1.c: 359: case 0x02:
  6703                           
  6704                           
  6705                           ;RF_Control_B1.c: 361: setRFSW_Control(2);
  6706  0DE7  3002               	movlw	2
  6707  0DE8  3189  21E8         	fcall	_setRFSW_Control
  6708                           
  6709                           ;RF_Control_B1.c: 368: break;
  6710                           
  6711                           ;RF_Control_B1.c: 364: case 0x03:
  6712                           
  6713                           ;RF_Control_B1.c: 363: break;
  6714  0DEA  0008               	return
  6715  0DEB                     l8072:	
  6716                           ;RF_Control_B1.c: 369: case 0x11:
  6717                           
  6718                           
  6719                           ;RF_Control_B1.c: 372: setRFSW_AdjControl(1);
  6720  0DEB  3001               	movlw	1
  6721  0DEC  3196  2668         	fcall	_setRFSW_AdjControl
  6722                           
  6723                           ;RF_Control_B1.c: 375: break;
  6724  0DEE  0008               	return
  6725  0DEF                     l8074:	
  6726                           ;RF_Control_B1.c: 376: case 0x21:
  6727                           
  6728                           
  6729                           ;RF_Control_B1.c: 379: setRFSW_AdjControl(2);
  6730  0DEF  3002               	movlw	2
  6731  0DF0  3196  2668         	fcall	_setRFSW_AdjControl
  6732                           
  6733                           ;RF_Control_B1.c: 390: }
  6734                           
  6735                           ;RF_Control_B1.c: 389: break;
  6736                           
  6737                           ;RF_Control_B1.c: 383: case 0x31:
  6738                           
  6739                           ;RF_Control_B1.c: 382: break;
  6740  0DF2  0008               	return
  6741  0DF3                     l8078:	
  6742  0DF3  0022               	movlb	2	; select bank2
  6743  0DF4  082F               	movf	(_RF_Data^(0+256)+15),w
  6744                           
  6745                           ; Switch size 1, requested type "space"
  6746                           ; Number of cases is 8, Range of values is 0 to 49
  6747                           ; switch strategies available:
  6748                           ; Name         Instructions Cycles
  6749                           ; simple_byte           25    13 (average)
  6750                           ; direct_byte          106     6 (fixed)
  6751                           ; jumptable            260     6 (fixed)
  6752                           ;	Chosen strategy is simple_byte
  6753  0DF5  3A00               	xorlw	0	; case 0
  6754  0DF6  1903               	skipnz
  6755  0DF7  2DA1               	goto	l8050
  6756  0DF8  3A01               	xorlw	1	; case 1
  6757  0DF9  1903               	skipnz
  6758  0DFA  2DE3               	goto	l8068
  6759  0DFB  3A03               	xorlw	3	; case 2
  6760  0DFC  1903               	skipnz
  6761  0DFD  2DE7               	goto	l8070
  6762  0DFE  3A01               	xorlw	1	; case 3
  6763  0DFF  1903               	skipnz
  6764  0E00  2E0E               	goto	l1865
  6765  0E01  3A12               	xorlw	18	; case 17
  6766  0E02  1903               	skipnz
  6767  0E03  2DEB               	goto	l8072
  6768  0E04  3A31               	xorlw	49	; case 32
  6769  0E05  1903               	skipnz
  6770  0E06  2DCD               	goto	l8064
  6771  0E07  3A01               	xorlw	1	; case 33
  6772  0E08  1903               	skipnz
  6773  0E09  2DEF               	goto	l8074
  6774  0E0A  3A10               	xorlw	16	; case 49
  6775  0E0B  1903               	skipnz
  6776  0E0C  2E0E               	goto	l1865
  6777  0E0D  2E0E               	goto	l1865
  6778  0E0E                     l1865:	
  6779  0E0E  0008               	return
  6780  0E0F                     __end_of_setControl_Lights_Table:	
  6781                           
  6782                           	psect	text23
  6783  09E8                     __ptext23:	
  6784 ;; *************** function _setRFSW_Control *****************
  6785 ;; Defined at:
  6786 ;;		line 473 in file "../src/RF_Control_B1.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;  sw              1    wreg     unsigned char 
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  sw              1   72[BANK0 ] unsigned char 
  6791 ;;  status          1   71[BANK0 ] unsigned char 
  6792 ;; Return value:  Size  Location     Type
  6793 ;;		None               void
  6794 ;; Registers used:
  6795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;Total ram usage:        3 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:   10
  6808 ;; This function calls:
  6809 ;;		_getDimmerLights_Status
  6810 ;;		_setDelayOff_GO
  6811 ;;		_setDimmerLights_SwOff
  6812 ;;		_setDimmerLights_SwOn
  6813 ;;		_setRF_DimmerLights
  6814 ;; This function is called by:
  6815 ;;		_setControl_Lights_Table
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _setRFSW_Control
  6821  09E8                     _setRFSW_Control:	
  6822                           
  6823                           ;incstack = 0
  6824                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6825                           ;setRFSW_Control@sw stored from wreg
  6826  09E8  0020               	movlb	0	; select bank0
  6827  09E9  00E8               	movwf	setRFSW_Control@sw
  6828                           
  6829                           ;RF_Control_B1.c: 474: char status = 0;
  6830  09EA  01E7               	clrf	setRFSW_Control@status
  6831                           
  6832                           ;RF_Control_B1.c: 478: setDimmerLights_SwOn(sw);
  6833  09EB  0868               	movf	setRFSW_Control@sw,w
  6834  09EC  3197  2770  3189   	fcall	_setDimmerLights_SwOn
  6835                           
  6836                           ;RF_Control_B1.c: 479: status = getDimmerLights_Status(sw);
  6837  09EF  0020               	movlb	0	; select bank0
  6838  09F0  0868               	movf	setRFSW_Control@sw,w
  6839  09F1  319F  27F0  3189   	fcall	_getDimmerLights_Status
  6840  09F4  0020               	movlb	0	; select bank0
  6841  09F5  00E6               	movwf	??_setRFSW_Control
  6842  09F6  0866               	movf	??_setRFSW_Control,w
  6843  09F7  00E7               	movwf	setRFSW_Control@status
  6844                           
  6845                           ;RF_Control_B1.c: 481: if (status == 1) {
  6846  09F8  0867               	movf	setRFSW_Control@status,w
  6847  09F9  3A01               	xorlw	1
  6848  09FA  1D03               	skipz
  6849  09FB  2A15               	goto	l7954
  6850                           
  6851                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  6852  09FC  0022               	movlb	2	; select bank2
  6853  09FD  0830               	movf	(_RF_Data^(0+256)+16),w
  6854  09FE  3A80               	xorlw	128
  6855  09FF  1D03               	skipz
  6856  0A00  2A0E               	goto	l1869
  6857                           
  6858                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  6859  0A01  0020               	movlb	0	; select bank0
  6860  0A02  01AA               	clrf	setDelayOff_GO@command
  6861  0A03  0AAA               	incf	setDelayOff_GO@command,f
  6862  0A04  0022               	movlb	2	; select bank2
  6863  0A05  0831               	movf	(_RF_Data^(0+256)+17),w
  6864  0A06  0020               	movlb	0	; select bank0
  6865  0A07  00E6               	movwf	??_setRFSW_Control
  6866  0A08  0866               	movf	??_setRFSW_Control,w
  6867  0A09  00AB               	movwf	setDelayOff_GO@value
  6868  0A0A  0868               	movf	setRFSW_Control@sw,w
  6869  0A0B  318B  234E  3189   	fcall	_setDelayOff_GO
  6870  0A0E                     l1869:	
  6871                           
  6872                           ;RF_Control_B1.c: 484: }
  6873                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  6874  0A0E  0020               	movlb	0	; select bank0
  6875  0A0F  01DD               	clrf	setRF_DimmerLights@on
  6876  0A10  0ADD               	incf	setRF_DimmerLights@on,f
  6877  0A11  0868               	movf	setRFSW_Control@sw,w
  6878  0A12  318D  2534         	fcall	_setRF_DimmerLights
  6879                           
  6880                           ;RF_Control_B1.c: 488: } else {
  6881  0A14  0008               	return
  6882  0A15                     l7954:	
  6883                           
  6884                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  6885  0A15  0022               	movlb	2	; select bank2
  6886  0A16  0830               	movf	(_RF_Data^(0+256)+16),w
  6887  0A17  3A80               	xorlw	128
  6888  0A18  1D03               	skipz
  6889  0A19  2A2E               	goto	l7958
  6890                           
  6891                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  6892  0A1A  0020               	movlb	0	; select bank0
  6893  0A1B  01AA               	clrf	setDelayOff_GO@command
  6894  0A1C  0AAA               	incf	setDelayOff_GO@command,f
  6895  0A1D  0022               	movlb	2	; select bank2
  6896  0A1E  0831               	movf	(_RF_Data^(0+256)+17),w
  6897  0A1F  0020               	movlb	0	; select bank0
  6898  0A20  00E6               	movwf	??_setRFSW_Control
  6899  0A21  0866               	movf	??_setRFSW_Control,w
  6900  0A22  00AB               	movwf	setDelayOff_GO@value
  6901  0A23  0868               	movf	setRFSW_Control@sw,w
  6902  0A24  318B  234E  3189   	fcall	_setDelayOff_GO
  6903                           
  6904                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  6905  0A27  0020               	movlb	0	; select bank0
  6906  0A28  01DD               	clrf	setRF_DimmerLights@on
  6907  0A29  0ADD               	incf	setRF_DimmerLights@on,f
  6908  0A2A  0868               	movf	setRFSW_Control@sw,w
  6909  0A2B  318D  2534         	fcall	_setRF_DimmerLights
  6910                           
  6911                           ;RF_Control_B1.c: 492: } else {
  6912  0A2D  0008               	return
  6913  0A2E                     l7958:	
  6914                           
  6915                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  6916  0A2E  0020               	movlb	0	; select bank0
  6917  0A2F  0868               	movf	setRFSW_Control@sw,w
  6918  0A30  318B  23AA  3189   	fcall	_setDimmerLights_SwOff
  6919                           
  6920                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  6921  0A33  0020               	movlb	0	; select bank0
  6922  0A34  01DD               	clrf	setRF_DimmerLights@on
  6923  0A35  0868               	movf	setRFSW_Control@sw,w
  6924  0A36  318D  2534  3189   	fcall	_setRF_DimmerLights
  6925                           
  6926                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  6927  0A39  0020               	movlb	0	; select bank0
  6928  0A3A  01AA               	clrf	setDelayOff_GO@command
  6929  0A3B  01AB               	clrf	setDelayOff_GO@value
  6930  0A3C  0868               	movf	setRFSW_Control@sw,w
  6931  0A3D  318B  234E         	fcall	_setDelayOff_GO
  6932  0A3F  0008               	return
  6933  0A40                     __end_of_setRFSW_Control:	
  6934                           
  6935                           	psect	text24
  6936  1668                     __ptext24:	
  6937 ;; *************** function _setRFSW_AdjControl *****************
  6938 ;; Defined at:
  6939 ;;		line 503 in file "../src/RF_Control_B1.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  sw              1    wreg     unsigned char 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  sw              1   71[BANK0 ] unsigned char 
  6944 ;;  status          1   70[BANK0 ] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;Total ram usage:        4 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:   10
  6961 ;; This function calls:
  6962 ;;		_getDimmerLights_Status
  6963 ;;		_setMemory_Modify
  6964 ;;		_setRF_DimmerValue
  6965 ;;		_setTxData
  6966 ;; This function is called by:
  6967 ;;		_setControl_Lights_Table
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           
  6972                           ;psect for function _setRFSW_AdjControl
  6973  1668                     _setRFSW_AdjControl:	
  6974                           
  6975                           ;incstack = 0
  6976                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6977                           ;setRFSW_AdjControl@sw stored from wreg
  6978  1668  0020               	movlb	0	; select bank0
  6979  1669  00E7               	movwf	setRFSW_AdjControl@sw
  6980                           
  6981                           ;RF_Control_B1.c: 504: char status = 0;
  6982  166A  01E6               	clrf	setRFSW_AdjControl@status
  6983                           
  6984                           ;RF_Control_B1.c: 506: status = getDimmerLights_Status(sw);
  6985  166B  0867               	movf	setRFSW_AdjControl@sw,w
  6986  166C  319F  27F0  3196   	fcall	_getDimmerLights_Status
  6987  166F  0020               	movlb	0	; select bank0
  6988  1670  00E4               	movwf	??_setRFSW_AdjControl
  6989  1671  0864               	movf	??_setRFSW_AdjControl,w
  6990  1672  00E6               	movwf	setRFSW_AdjControl@status
  6991                           
  6992                           ;RF_Control_B1.c: 509: if (status == 1) {
  6993  1673  0866               	movf	setRFSW_AdjControl@status,w
  6994  1674  3A01               	xorlw	1
  6995  1675  1D03               	skipz
  6996  1676  2E81               	goto	l7970
  6997                           
  6998                           ;RF_Control_B1.c: 510: setMemory_Modify(1);
  6999  1677  3001               	movlw	1
  7000  1678  3191  2114  3196   	fcall	_setMemory_Modify
  7001                           
  7002                           ;RF_Control_B1.c: 511: setRF_DimmerValue(sw);
  7003  167B  0020               	movlb	0	; select bank0
  7004  167C  0867               	movf	setRFSW_AdjControl@sw,w
  7005  167D  3195  251C  3196   	fcall	_setRF_DimmerValue
  7006                           
  7007                           ;RF_Control_B1.c: 512: } else {
  7008  1680  2E93               	goto	l1877
  7009  1681                     l7970:	
  7010                           
  7011                           ;RF_Control_B1.c: 513: product->Data[9]=product->Data[20 + sw];
  7012  1681  0020               	movlb	0	; select bank0
  7013  1682  0867               	movf	setRFSW_AdjControl@sw,w
  7014  1683  3E14               	addlw	20
  7015  1684  076F               	addwf	_product,w
  7016  1685  00E4               	movwf	??_setRFSW_AdjControl
  7017  1686  0864               	movf	??_setRFSW_AdjControl,w
  7018  1687  0086               	movwf	6
  7019  1688  3002               	movlw	2	; select bank4/5
  7020  1689  0087               	movwf	7
  7021  168A  0801               	movf	1,w
  7022  168B  00E5               	movwf	??_setRFSW_AdjControl+1
  7023  168C  086F               	movf	_product,w
  7024  168D  3E09               	addlw	9
  7025  168E  0086               	movwf	6
  7026  168F  3002               	movlw	2	; select bank4/5
  7027  1690  0087               	movwf	7
  7028  1691  0865               	movf	??_setRFSW_AdjControl+1,w
  7029  1692  0081               	movwf	1
  7030  1693                     l1877:	
  7031                           
  7032                           ;RF_Control_B1.c: 514: }
  7033                           ;RF_Control_B1.c: 515: product->Data[17]=product->Data[26 + sw];
  7034  1693  0020               	movlb	0	; select bank0
  7035  1694  0867               	movf	setRFSW_AdjControl@sw,w
  7036  1695  3E1A               	addlw	26
  7037  1696  076F               	addwf	_product,w
  7038  1697  00E4               	movwf	??_setRFSW_AdjControl
  7039  1698  0864               	movf	??_setRFSW_AdjControl,w
  7040  1699  0086               	movwf	6
  7041  169A  3002               	movlw	2	; select bank4/5
  7042  169B  0087               	movwf	7
  7043  169C  0801               	movf	1,w
  7044  169D  00E5               	movwf	??_setRFSW_AdjControl+1
  7045  169E  086F               	movf	_product,w
  7046  169F  3E11               	addlw	17
  7047  16A0  0086               	movwf	6
  7048  16A1  3002               	movlw	2	; select bank4/5
  7049  16A2  0087               	movwf	7
  7050  16A3  0865               	movf	??_setRFSW_AdjControl+1,w
  7051  16A4  0081               	movwf	1
  7052                           
  7053                           ;RF_Control_B1.c: 516: setTxData();
  7054  16A5  3185  25AF         	fcall	_setTxData
  7055  16A7  0008               	return
  7056  16A8                     __end_of_setRFSW_AdjControl:	
  7057                           
  7058                           	psect	text25
  7059  151C                     __ptext25:	
  7060 ;; *************** function _setRF_DimmerValue *****************
  7061 ;; Defined at:
  7062 ;;		line 521 in file "../src/RF_Control_B1.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  lights          1    wreg     unsigned char 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  lights          1   67[BANK0 ] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;		None               void
  7069 ;; Registers used:
  7070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;Total ram usage:        3 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    9
  7083 ;; This function calls:
  7084 ;;		_setDimmerLights_AdjRF
  7085 ;; This function is called by:
  7086 ;;		_setRFSW_AdjControl
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           
  7091                           ;psect for function _setRF_DimmerValue
  7092  151C                     _setRF_DimmerValue:	
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7096                           ;setRF_DimmerValue@lights stored from wreg
  7097  151C  0020               	movlb	0	; select bank0
  7098  151D  00E3               	movwf	setRF_DimmerValue@lights
  7099                           
  7100                           ;RF_Control_B1.c: 522: if (RF_Data[9] > 0x64) {
  7101  151E  3065               	movlw	101
  7102  151F  0022               	movlb	2	; select bank2
  7103  1520  0229               	subwf	(_RF_Data^(0+256)+9),w
  7104  1521  1C03               	skipc
  7105  1522  2D29               	goto	l7924
  7106                           
  7107                           ;RF_Control_B1.c: 523: RF_Data[9] = 0x64;
  7108  1523  3064               	movlw	100
  7109  1524  0020               	movlb	0	; select bank0
  7110  1525  00E1               	movwf	??_setRF_DimmerValue
  7111  1526  0861               	movf	??_setRF_DimmerValue,w
  7112  1527  0022               	movlb	2	; select bank2
  7113  1528  00A9               	movwf	(_RF_Data^(0+256)+9)
  7114  1529                     l7924:	
  7115                           
  7116                           ;RF_Control_B1.c: 524: }
  7117                           ;RF_Control_B1.c: 525: product->Data[9]=RF_Data[9];
  7118  1529  0829               	movf	(_RF_Data^(0+256)+9),w
  7119  152A  0020               	movlb	0	; select bank0
  7120  152B  00E1               	movwf	??_setRF_DimmerValue
  7121  152C  086F               	movf	_product,w
  7122  152D  3E09               	addlw	9
  7123  152E  0086               	movwf	6
  7124  152F  3002               	movlw	2	; select bank4/5
  7125  1530  0087               	movwf	7
  7126  1531  0861               	movf	??_setRF_DimmerValue,w
  7127  1532  0081               	movwf	1
  7128                           
  7129                           ;RF_Control_B1.c: 526: product->Data[11]=lights;
  7130  1533  0863               	movf	setRF_DimmerValue@lights,w
  7131  1534  00E1               	movwf	??_setRF_DimmerValue
  7132  1535  086F               	movf	_product,w
  7133  1536  3E0B               	addlw	11
  7134  1537  0086               	movwf	6
  7135  1538  3002               	movlw	2	; select bank4/5
  7136  1539  0087               	movwf	7
  7137  153A  0861               	movf	??_setRF_DimmerValue,w
  7138  153B  0081               	movwf	1
  7139                           
  7140                           ;RF_Control_B1.c: 527: product->Data[(20 + lights)]=product->Data[9];
  7141  153C  086F               	movf	_product,w
  7142  153D  3E09               	addlw	9
  7143  153E  0086               	movwf	6
  7144  153F  3002               	movlw	2	; select bank4/5
  7145  1540  0087               	movwf	7
  7146  1541  0801               	movf	1,w
  7147  1542  00E1               	movwf	??_setRF_DimmerValue
  7148  1543  0863               	movf	setRF_DimmerValue@lights,w
  7149  1544  3E14               	addlw	20
  7150  1545  076F               	addwf	_product,w
  7151  1546  00E2               	movwf	??_setRF_DimmerValue+1
  7152  1547  0862               	movf	??_setRF_DimmerValue+1,w
  7153  1548  0086               	movwf	6
  7154  1549  3002               	movlw	2	; select bank4/5
  7155  154A  0087               	movwf	7
  7156  154B  0861               	movf	??_setRF_DimmerValue,w
  7157  154C  0081               	movwf	1
  7158                           
  7159                           ;RF_Control_B1.c: 528: setDimmerLights_AdjRF(lights);
  7160  154D  0863               	movf	setRF_DimmerValue@lights,w
  7161  154E  3193  238C         	fcall	_setDimmerLights_AdjRF
  7162  1550  0008               	return
  7163  1551                     __end_of_setRF_DimmerValue:	
  7164                           
  7165                           	psect	text26
  7166  138C                     __ptext26:	
  7167 ;; *************** function _setDimmerLights_AdjRF *****************
  7168 ;; Defined at:
  7169 ;;		line 780 in file "../src/Dimmer_B1.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;  lights          1    wreg     unsigned char 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  lights          1   64[BANK0 ] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;		None               void
  7176 ;; Registers used:
  7177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;Total ram usage:        2 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    8
  7190 ;; This function calls:
  7191 ;;		_DimmerLightsPointSelect
  7192 ;;		_getPercentValue
  7193 ;; This function is called by:
  7194 ;;		_setRF_DimmerValue
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _setDimmerLights_AdjRF
  7200  138C                     _setDimmerLights_AdjRF:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7204                           ;setDimmerLights_AdjRF@lights stored from wreg
  7205  138C  0020               	movlb	0	; select bank0
  7206  138D  00E0               	movwf	setDimmerLights_AdjRF@lights
  7207                           
  7208                           ;Dimmer_B1.c: 781: DimmerLightsPointSelect(lights);
  7209  138E  0860               	movf	setDimmerLights_AdjRF@lights,w
  7210  138F  3191  2101  3193   	fcall	_DimmerLightsPointSelect
  7211                           
  7212                           ;Dimmer_B1.c: 782: DimmerLights->AdjRF = 1;
  7213  1392  0879               	movf	_DimmerLights,w
  7214  1393  0086               	movwf	6
  7215  1394  3001               	movlw	1	; select bank2/3
  7216  1395  0087               	movwf	7
  7217  1396  1501               	bsf	1,2
  7218                           
  7219                           ;Dimmer_B1.c: 783: DimmerLights->Signal = 1;
  7220  1397  0879               	movf	_DimmerLights,w
  7221  1398  0086               	movwf	6
  7222  1399  3001               	movlw	1	; select bank2/3
  7223  139A  0087               	movwf	7
  7224  139B  1481               	bsf	1,1
  7225                           
  7226                           ;Dimmer_B1.c: 784: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7227  139C  0020               	movlb	0	; select bank0
  7228  139D  086F               	movf	_product,w
  7229  139E  3E09               	addlw	9
  7230  139F  0086               	movwf	6
  7231  13A0  3002               	movlw	2	; select bank4/5
  7232  13A1  0087               	movwf	7
  7233  13A2  0801               	movf	1,w
  7234  13A3  318A  22F3         	fcall	_getPercentValue
  7235  13A5  0020               	movlb	0	; select bank0
  7236  13A6  00DF               	movwf	??_setDimmerLights_AdjRF
  7237  13A7  0879               	movf	_DimmerLights,w
  7238  13A8  3E05               	addlw	5
  7239  13A9  0086               	movwf	6
  7240  13AA  3001               	movlw	1	; select bank2/3
  7241  13AB  0087               	movwf	7
  7242  13AC  085F               	movf	??_setDimmerLights_AdjRF,w
  7243  13AD  0081               	movwf	1
  7244  13AE  0008               	return
  7245  13AF                     __end_of_setDimmerLights_AdjRF:	
  7246                           
  7247                           	psect	text27
  7248  0AF3                     __ptext27:	
  7249 ;; *************** function _getPercentValue *****************
  7250 ;; Defined at:
  7251 ;;		line 892 in file "../src/Dimmer_B1.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  value           1    wreg     unsigned char 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;  value           1   59[BANK0 ] unsigned char 
  7256 ;;  i               3   60[BANK0 ] float 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      unsigned char 
  7259 ;; Registers used:
  7260 ;;		wreg, status,2, status,0, pclath, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;Total ram usage:        6 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    7
  7273 ;; This function calls:
  7274 ;;		___awtoft
  7275 ;;		___ftadd
  7276 ;;		___ftdiv
  7277 ;;		___ftmul
  7278 ;;		___fttol
  7279 ;; This function is called by:
  7280 ;;		_setDimmerLights_AdjRF
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _getPercentValue
  7286  0AF3                     _getPercentValue:	
  7287                           
  7288                           ;incstack = 0
  7289                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7290                           ;getPercentValue@value stored from wreg
  7291  0AF3  0020               	movlb	0	; select bank0
  7292  0AF4  00DB               	movwf	getPercentValue@value
  7293                           
  7294                           ;Dimmer_B1.c: 900: float i = ((char)(80*0.8)) - ((char)(10*0.8));
  7295  0AF5  3000               	movlw	0
  7296  0AF6  00DC               	movwf	getPercentValue@i
  7297  0AF7  3060               	movlw	96
  7298  0AF8  00DD               	movwf	getPercentValue@i+1
  7299  0AF9  3042               	movlw	66
  7300  0AFA  00DE               	movwf	getPercentValue@i+2
  7301                           
  7302                           ;Dimmer_B1.c: 901: i /= 100;
  7303  0AFB  3000               	movlw	0
  7304  0AFC  00AE               	movwf	___ftdiv@f2
  7305  0AFD  30C8               	movlw	200
  7306  0AFE  00AF               	movwf	___ftdiv@f2+1
  7307  0AFF  3042               	movlw	66
  7308  0B00  00B0               	movwf	___ftdiv@f2+2
  7309  0B01  085C               	movf	getPercentValue@i,w
  7310  0B02  00B1               	movwf	___ftdiv@f1
  7311  0B03  085D               	movf	getPercentValue@i+1,w
  7312  0B04  00B2               	movwf	___ftdiv@f1+1
  7313  0B05  085E               	movf	getPercentValue@i+2,w
  7314  0B06  00B3               	movwf	___ftdiv@f1+2
  7315  0B07  3187  2720  318A   	fcall	___ftdiv
  7316  0B0A  0020               	movlb	0	; select bank0
  7317  0B0B  082E               	movf	?___ftdiv,w
  7318  0B0C  00DC               	movwf	getPercentValue@i
  7319  0B0D  082F               	movf	?___ftdiv+1,w
  7320  0B0E  00DD               	movwf	getPercentValue@i+1
  7321  0B0F  0830               	movf	?___ftdiv+2,w
  7322  0B10  00DE               	movwf	getPercentValue@i+2
  7323                           
  7324                           ;Dimmer_B1.c: 903: return (char) (((100 - value) * i) + ((char)(80*0.8)));
  7325  0B11  085B               	movf	getPercentValue@value,w
  7326  0B12  00D9               	movwf	??_getPercentValue
  7327  0B13  01DA               	clrf	??_getPercentValue+1
  7328  0B14  09D9               	comf	??_getPercentValue,f
  7329  0B15  09DA               	comf	??_getPercentValue+1,f
  7330  0B16  0AD9               	incf	??_getPercentValue,f
  7331  0B17  1903               	skipnz
  7332  0B18  0ADA               	incf	??_getPercentValue+1,f
  7333  0B19  0859               	movf	??_getPercentValue,w
  7334  0B1A  3E64               	addlw	100
  7335  0B1B  00A8               	movwf	___awtoft@c
  7336  0B1C  3000               	movlw	0
  7337  0B1D  3D5A               	addwfc	??_getPercentValue+1,w
  7338  0B1E  00A9               	movwf	___awtoft@c+1
  7339  0B1F  3193  2347  318A   	fcall	___awtoft
  7340  0B22  0020               	movlb	0	; select bank0
  7341  0B23  0828               	movf	?___awtoft,w
  7342  0B24  00B1               	movwf	___ftmul@f2
  7343  0B25  0829               	movf	?___awtoft+1,w
  7344  0B26  00B2               	movwf	___ftmul@f2+1
  7345  0B27  082A               	movf	?___awtoft+2,w
  7346  0B28  00B3               	movwf	___ftmul@f2+2
  7347  0B29  085C               	movf	getPercentValue@i,w
  7348  0B2A  00AE               	movwf	___ftmul@f1
  7349  0B2B  085D               	movf	getPercentValue@i+1,w
  7350  0B2C  00AF               	movwf	___ftmul@f1+1
  7351  0B2D  085E               	movf	getPercentValue@i+2,w
  7352  0B2E  00B0               	movwf	___ftmul@f1+2
  7353  0B2F  3186  266C  318A   	fcall	___ftmul
  7354  0B32  0020               	movlb	0	; select bank0
  7355  0B33  082E               	movf	?___ftmul,w
  7356  0B34  00C1               	movwf	___ftadd@f2
  7357  0B35  082F               	movf	?___ftmul+1,w
  7358  0B36  00C2               	movwf	___ftadd@f2+1
  7359  0B37  0830               	movf	?___ftmul+2,w
  7360  0B38  00C3               	movwf	___ftadd@f2+2
  7361  0B39  3000               	movlw	0
  7362  0B3A  00BE               	movwf	___ftadd@f1
  7363  0B3B  3080               	movlw	128
  7364  0B3C  00BF               	movwf	___ftadd@f1+1
  7365  0B3D  3042               	movlw	66
  7366  0B3E  00C0               	movwf	___ftadd@f1+2
  7367  0B3F  3182  22EC  318A   	fcall	___ftadd
  7368  0B42  0020               	movlb	0	; select bank0
  7369  0B43  083E               	movf	?___ftadd,w
  7370  0B44  00CB               	movwf	___fttol@f1
  7371  0B45  083F               	movf	?___ftadd+1,w
  7372  0B46  00CC               	movwf	___fttol@f1+1
  7373  0B47  0840               	movf	?___ftadd+2,w
  7374  0B48  00CD               	movwf	___fttol@f1+2
  7375  0B49  318F  2779         	fcall	___fttol
  7376  0B4B  0020               	movlb	0	; select bank0
  7377  0B4C  084B               	movf	?___fttol,w
  7378  0B4D  0008               	return
  7379  0B4E                     __end_of_getPercentValue:	
  7380                           
  7381                           	psect	text28
  7382  066C                     __ptext28:	
  7383 ;; *************** function ___ftmul *****************
  7384 ;; Defined at:
  7385 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  f1              3   14[BANK0 ] float 
  7388 ;;  f2              3   17[BANK0 ] float 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7391 ;;  sign            1   29[BANK0 ] unsigned char 
  7392 ;;  cntr            1   28[BANK0 ] unsigned char 
  7393 ;;  exp             1   24[BANK0 ] unsigned char 
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  3   14[BANK0 ] float 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2, status,0, pclath, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7403 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;Total ram usage:       16 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    6
  7410 ;; This function calls:
  7411 ;;		___ftpack
  7412 ;; This function is called by:
  7413 ;;		_getPercentValue
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           
  7418                           ;psect for function ___ftmul
  7419  066C                     ___ftmul:	
  7420                           
  7421                           ;incstack = 0
  7422                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7423  066C  0020               	movlb	0	; select bank0
  7424  066D  082E               	movf	___ftmul@f1,w
  7425  066E  00B4               	movwf	??___ftmul
  7426  066F  082F               	movf	___ftmul@f1+1,w
  7427  0670  00B5               	movwf	??___ftmul+1
  7428  0671  0830               	movf	___ftmul@f1+2,w
  7429  0672  00B6               	movwf	??___ftmul+2
  7430  0673  1003               	clrc
  7431  0674  0D35               	rlf	??___ftmul+1,w
  7432  0675  0D36               	rlf	??___ftmul+2,w
  7433  0676  00B7               	movwf	??___ftmul+3
  7434  0677  0837               	movf	??___ftmul+3,w
  7435  0678  00B8               	movwf	___ftmul@exp
  7436  0679  08B8               	movf	___ftmul@exp,f
  7437  067A  1D03               	skipz
  7438  067B  2E83               	goto	l7540
  7439  067C  3000               	movlw	0
  7440  067D  00AE               	movwf	?___ftmul
  7441  067E  3000               	movlw	0
  7442  067F  00AF               	movwf	?___ftmul+1
  7443  0680  3000               	movlw	0
  7444  0681  00B0               	movwf	?___ftmul+2
  7445  0682  0008               	return
  7446  0683                     l7540:	
  7447  0683  0831               	movf	___ftmul@f2,w
  7448  0684  00B4               	movwf	??___ftmul
  7449  0685  0832               	movf	___ftmul@f2+1,w
  7450  0686  00B5               	movwf	??___ftmul+1
  7451  0687  0833               	movf	___ftmul@f2+2,w
  7452  0688  00B6               	movwf	??___ftmul+2
  7453  0689  1003               	clrc
  7454  068A  0D35               	rlf	??___ftmul+1,w
  7455  068B  0D36               	rlf	??___ftmul+2,w
  7456  068C  00B7               	movwf	??___ftmul+3
  7457  068D  0837               	movf	??___ftmul+3,w
  7458  068E  00BD               	movwf	___ftmul@sign
  7459  068F  08BD               	movf	___ftmul@sign,f
  7460  0690  1D03               	skipz
  7461  0691  2E99               	goto	l7546
  7462  0692  3000               	movlw	0
  7463  0693  00AE               	movwf	?___ftmul
  7464  0694  3000               	movlw	0
  7465  0695  00AF               	movwf	?___ftmul+1
  7466  0696  3000               	movlw	0
  7467  0697  00B0               	movwf	?___ftmul+2
  7468  0698  0008               	return
  7469  0699                     l7546:	
  7470  0699  083D               	movf	___ftmul@sign,w
  7471  069A  3E7B               	addlw	123
  7472  069B  00B4               	movwf	??___ftmul
  7473  069C  0834               	movf	??___ftmul,w
  7474  069D  07B8               	addwf	___ftmul@exp,f
  7475  069E  082E               	movf	___ftmul@f1,w
  7476  069F  00B4               	movwf	??___ftmul
  7477  06A0  082F               	movf	___ftmul@f1+1,w
  7478  06A1  00B5               	movwf	??___ftmul+1
  7479  06A2  0830               	movf	___ftmul@f1+2,w
  7480  06A3  00B6               	movwf	??___ftmul+2
  7481  06A4  3010               	movlw	16
  7482  06A5                     u7505:	
  7483  06A5  36B6               	lsrf	??___ftmul+2,f
  7484  06A6  0CB5               	rrf	??___ftmul+1,f
  7485  06A7  0CB4               	rrf	??___ftmul,f
  7486  06A8  0B89               	decfsz	9,f
  7487  06A9  2EA5               	goto	u7505
  7488  06AA  0834               	movf	??___ftmul,w
  7489  06AB  00B7               	movwf	??___ftmul+3
  7490  06AC  0837               	movf	??___ftmul+3,w
  7491  06AD  00BD               	movwf	___ftmul@sign
  7492  06AE  0831               	movf	___ftmul@f2,w
  7493  06AF  00B4               	movwf	??___ftmul
  7494  06B0  0832               	movf	___ftmul@f2+1,w
  7495  06B1  00B5               	movwf	??___ftmul+1
  7496  06B2  0833               	movf	___ftmul@f2+2,w
  7497  06B3  00B6               	movwf	??___ftmul+2
  7498  06B4  3010               	movlw	16
  7499  06B5                     u7515:	
  7500  06B5  36B6               	lsrf	??___ftmul+2,f
  7501  06B6  0CB5               	rrf	??___ftmul+1,f
  7502  06B7  0CB4               	rrf	??___ftmul,f
  7503  06B8  0B89               	decfsz	9,f
  7504  06B9  2EB5               	goto	u7515
  7505  06BA  0834               	movf	??___ftmul,w
  7506  06BB  00B7               	movwf	??___ftmul+3
  7507  06BC  0837               	movf	??___ftmul+3,w
  7508  06BD  06BD               	xorwf	___ftmul@sign,f
  7509  06BE  3080               	movlw	128
  7510  06BF  00B4               	movwf	??___ftmul
  7511  06C0  0834               	movf	??___ftmul,w
  7512  06C1  05BD               	andwf	___ftmul@sign,f
  7513  06C2  17AF               	bsf	___ftmul@f1+1,7
  7514  06C3  17B2               	bsf	___ftmul@f2+1,7
  7515  06C4  30FF               	movlw	255
  7516  06C5  05B1               	andwf	___ftmul@f2,f
  7517  06C6  30FF               	movlw	255
  7518  06C7  05B2               	andwf	___ftmul@f2+1,f
  7519  06C8  3000               	movlw	0
  7520  06C9  05B3               	andwf	___ftmul@f2+2,f
  7521  06CA  3000               	movlw	0
  7522  06CB  00B9               	movwf	___ftmul@f3_as_product
  7523  06CC  3000               	movlw	0
  7524  06CD  00BA               	movwf	___ftmul@f3_as_product+1
  7525  06CE  3000               	movlw	0
  7526  06CF  00BB               	movwf	___ftmul@f3_as_product+2
  7527  06D0  3007               	movlw	7
  7528  06D1  00B4               	movwf	??___ftmul
  7529  06D2  0834               	movf	??___ftmul,w
  7530  06D3  00BC               	movwf	___ftmul@cntr
  7531  06D4                     l7558:	
  7532  06D4  1C2E               	btfss	___ftmul@f1,0
  7533  06D5  2EDC               	goto	l7562
  7534  06D6  0831               	movf	___ftmul@f2,w
  7535  06D7  07B9               	addwf	___ftmul@f3_as_product,f
  7536  06D8  0832               	movf	___ftmul@f2+1,w
  7537  06D9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7538  06DA  0833               	movf	___ftmul@f2+2,w
  7539  06DB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7540  06DC                     l7562:	
  7541  06DC  3001               	movlw	1
  7542  06DD                     u7535:	
  7543  06DD  36B0               	lsrf	___ftmul@f1+2,f
  7544  06DE  0CAF               	rrf	___ftmul@f1+1,f
  7545  06DF  0CAE               	rrf	___ftmul@f1,f
  7546  06E0  0B89               	decfsz	9,f
  7547  06E1  2EDD               	goto	u7535
  7548  06E2  3001               	movlw	1
  7549  06E3                     u7545:	
  7550  06E3  35B1               	lslf	___ftmul@f2,f
  7551  06E4  0DB2               	rlf	___ftmul@f2+1,f
  7552  06E5  0DB3               	rlf	___ftmul@f2+2,f
  7553  06E6  0B89               	decfsz	9,f
  7554  06E7  2EE3               	goto	u7545
  7555  06E8  3001               	movlw	1
  7556  06E9  02BC               	subwf	___ftmul@cntr,f
  7557  06EA  1D03               	btfss	3,2
  7558  06EB  2ED4               	goto	l7558
  7559  06EC  3009               	movlw	9
  7560  06ED  00B4               	movwf	??___ftmul
  7561  06EE  0834               	movf	??___ftmul,w
  7562  06EF  00BC               	movwf	___ftmul@cntr
  7563  06F0                     l7570:	
  7564  06F0  1C2E               	btfss	___ftmul@f1,0
  7565  06F1  2EF8               	goto	l7574
  7566  06F2  0831               	movf	___ftmul@f2,w
  7567  06F3  07B9               	addwf	___ftmul@f3_as_product,f
  7568  06F4  0832               	movf	___ftmul@f2+1,w
  7569  06F5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7570  06F6  0833               	movf	___ftmul@f2+2,w
  7571  06F7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7572  06F8                     l7574:	
  7573  06F8  3001               	movlw	1
  7574  06F9                     u7575:	
  7575  06F9  36B0               	lsrf	___ftmul@f1+2,f
  7576  06FA  0CAF               	rrf	___ftmul@f1+1,f
  7577  06FB  0CAE               	rrf	___ftmul@f1,f
  7578  06FC  0B89               	decfsz	9,f
  7579  06FD  2EF9               	goto	u7575
  7580  06FE  3001               	movlw	1
  7581  06FF                     u7585:	
  7582  06FF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7583  0700  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7584  0701  0CB9               	rrf	___ftmul@f3_as_product,f
  7585  0702  0B89               	decfsz	9,f
  7586  0703  2EFF               	goto	u7585
  7587  0704  3001               	movlw	1
  7588  0705  02BC               	subwf	___ftmul@cntr,f
  7589  0706  1D03               	btfss	3,2
  7590  0707  2EF0               	goto	l7570
  7591  0708  0839               	movf	___ftmul@f3_as_product,w
  7592  0709  00A0               	movwf	___ftpack@arg
  7593  070A  083A               	movf	___ftmul@f3_as_product+1,w
  7594  070B  00A1               	movwf	___ftpack@arg+1
  7595  070C  083B               	movf	___ftmul@f3_as_product+2,w
  7596  070D  00A2               	movwf	___ftpack@arg+2
  7597  070E  0838               	movf	___ftmul@exp,w
  7598  070F  00B4               	movwf	??___ftmul
  7599  0710  0834               	movf	??___ftmul,w
  7600  0711  00A3               	movwf	___ftpack@exp
  7601  0712  083D               	movf	___ftmul@sign,w
  7602  0713  00B5               	movwf	??___ftmul+1
  7603  0714  0835               	movf	??___ftmul+1,w
  7604  0715  00A4               	movwf	___ftpack@sign
  7605  0716  318C  2409         	fcall	___ftpack
  7606  0718  0020               	movlb	0	; select bank0
  7607  0719  0820               	movf	?___ftpack,w
  7608  071A  00AE               	movwf	?___ftmul
  7609  071B  0821               	movf	?___ftpack+1,w
  7610  071C  00AF               	movwf	?___ftmul+1
  7611  071D  0822               	movf	?___ftpack+2,w
  7612  071E  00B0               	movwf	?___ftmul+2
  7613  071F  0008               	return
  7614  0720                     __end_of___ftmul:	
  7615                           
  7616                           	psect	text29
  7617  02EC                     __ptext29:	
  7618 ;; *************** function ___ftadd *****************
  7619 ;; Defined at:
  7620 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  f1              3   30[BANK0 ] float 
  7623 ;;  f2              3   33[BANK0 ] float 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  exp1            1   42[BANK0 ] unsigned char 
  7626 ;;  exp2            1   41[BANK0 ] unsigned char 
  7627 ;;  sign            1   40[BANK0 ] unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  3   30[BANK0 ] float 
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0, pclath, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7637 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;Total ram usage:       13 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    6
  7644 ;; This function calls:
  7645 ;;		___ftpack
  7646 ;; This function is called by:
  7647 ;;		_getPercentValue
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function ___ftadd
  7653  02EC                     ___ftadd:	
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7657  02EC  0020               	movlb	0	; select bank0
  7658  02ED  083E               	movf	___ftadd@f1,w
  7659  02EE  00C4               	movwf	??___ftadd
  7660  02EF  083F               	movf	___ftadd@f1+1,w
  7661  02F0  00C5               	movwf	??___ftadd+1
  7662  02F1  0840               	movf	___ftadd@f1+2,w
  7663  02F2  00C6               	movwf	??___ftadd+2
  7664  02F3  1003               	clrc
  7665  02F4  0D45               	rlf	??___ftadd+1,w
  7666  02F5  0D46               	rlf	??___ftadd+2,w
  7667  02F6  00C7               	movwf	??___ftadd+3
  7668  02F7  0847               	movf	??___ftadd+3,w
  7669  02F8  00CA               	movwf	___ftadd@exp1
  7670  02F9  0841               	movf	___ftadd@f2,w
  7671  02FA  00C4               	movwf	??___ftadd
  7672  02FB  0842               	movf	___ftadd@f2+1,w
  7673  02FC  00C5               	movwf	??___ftadd+1
  7674  02FD  0843               	movf	___ftadd@f2+2,w
  7675  02FE  00C6               	movwf	??___ftadd+2
  7676  02FF  1003               	clrc
  7677  0300  0D45               	rlf	??___ftadd+1,w
  7678  0301  0D46               	rlf	??___ftadd+2,w
  7679  0302  00C7               	movwf	??___ftadd+3
  7680  0303  0847               	movf	??___ftadd+3,w
  7681  0304  00C9               	movwf	___ftadd@exp2
  7682  0305  084A               	movf	___ftadd@exp1,w
  7683  0306  1903               	btfsc	3,2
  7684  0307  2B14               	goto	l7428
  7685  0308  0849               	movf	___ftadd@exp2,w
  7686  0309  024A               	subwf	___ftadd@exp1,w
  7687  030A  1803               	skipnc
  7688  030B  2B1B               	goto	l7432
  7689  030C  034A               	decf	___ftadd@exp1,w
  7690  030D  3AFF               	xorlw	255
  7691  030E  0749               	addwf	___ftadd@exp2,w
  7692  030F  00C4               	movwf	??___ftadd
  7693  0310  3019               	movlw	25
  7694  0311  0244               	subwf	??___ftadd,w
  7695  0312  1C03               	skipc
  7696  0313  2B1B               	goto	l7432
  7697  0314                     l7428:	
  7698  0314  0841               	movf	___ftadd@f2,w
  7699  0315  00BE               	movwf	?___ftadd
  7700  0316  0842               	movf	___ftadd@f2+1,w
  7701  0317  00BF               	movwf	?___ftadd+1
  7702  0318  0843               	movf	___ftadd@f2+2,w
  7703  0319  00C0               	movwf	?___ftadd+2
  7704  031A  0008               	return
  7705  031B                     l7432:	
  7706  031B  0849               	movf	___ftadd@exp2,w
  7707  031C  1903               	btfsc	3,2
  7708  031D  0008               	return
  7709  031E  084A               	movf	___ftadd@exp1,w
  7710  031F  0249               	subwf	___ftadd@exp2,w
  7711  0320  1803               	skipnc
  7712  0321  2B2A               	goto	l7438
  7713  0322  0349               	decf	___ftadd@exp2,w
  7714  0323  3AFF               	xorlw	255
  7715  0324  074A               	addwf	___ftadd@exp1,w
  7716  0325  00C4               	movwf	??___ftadd
  7717  0326  3019               	movlw	25
  7718  0327  0244               	subwf	??___ftadd,w
  7719  0328  1803               	btfsc	3,0
  7720  0329  0008               	return
  7721  032A                     l7438:	
  7722  032A  3006               	movlw	6
  7723  032B  00C4               	movwf	??___ftadd
  7724  032C  0844               	movf	??___ftadd,w
  7725  032D  00C8               	movwf	___ftadd@sign
  7726  032E  1BC0               	btfsc	___ftadd@f1+2,7
  7727  032F  17C8               	bsf	___ftadd@sign,7
  7728  0330  1BC3               	btfsc	___ftadd@f2+2,7
  7729  0331  1748               	bsf	___ftadd@sign,6
  7730  0332  17BF               	bsf	___ftadd@f1+1,7
  7731  0333  30FF               	movlw	255
  7732  0334  05BE               	andwf	___ftadd@f1,f
  7733  0335  30FF               	movlw	255
  7734  0336  05BF               	andwf	___ftadd@f1+1,f
  7735  0337  3000               	movlw	0
  7736  0338  05C0               	andwf	___ftadd@f1+2,f
  7737  0339  17C2               	bsf	___ftadd@f2+1,7
  7738  033A  30FF               	movlw	255
  7739  033B  05C1               	andwf	___ftadd@f2,f
  7740  033C  30FF               	movlw	255
  7741  033D  05C2               	andwf	___ftadd@f2+1,f
  7742  033E  3000               	movlw	0
  7743  033F  05C3               	andwf	___ftadd@f2+2,f
  7744  0340  0849               	movf	___ftadd@exp2,w
  7745  0341  024A               	subwf	___ftadd@exp1,w
  7746  0342  1803               	skipnc
  7747  0343  2B66               	goto	l7460
  7748  0344                     l7450:	
  7749  0344  3001               	movlw	1
  7750  0345                     u7265:	
  7751  0345  35C1               	lslf	___ftadd@f2,f
  7752  0346  0DC2               	rlf	___ftadd@f2+1,f
  7753  0347  0DC3               	rlf	___ftadd@f2+2,f
  7754  0348  0B89               	decfsz	9,f
  7755  0349  2B45               	goto	u7265
  7756  034A  3001               	movlw	1
  7757  034B  02C9               	subwf	___ftadd@exp2,f
  7758  034C  0849               	movf	___ftadd@exp2,w
  7759  034D  064A               	xorwf	___ftadd@exp1,w
  7760  034E  1903               	skipnz
  7761  034F  2B61               	goto	l7458
  7762  0350  3001               	movlw	1
  7763  0351  02C8               	subwf	___ftadd@sign,f
  7764  0352  0848               	movf	___ftadd@sign,w
  7765  0353  3907               	andlw	7
  7766  0354  1903               	btfsc	3,2
  7767  0355  2B61               	goto	l7458
  7768  0356  2B44               	goto	l7450
  7769  0357                     l7456:	
  7770  0357  3001               	movlw	1
  7771  0358                     u7295:	
  7772  0358  36C0               	lsrf	___ftadd@f1+2,f
  7773  0359  0CBF               	rrf	___ftadd@f1+1,f
  7774  035A  0CBE               	rrf	___ftadd@f1,f
  7775  035B  0B89               	decfsz	9,f
  7776  035C  2B58               	goto	u7295
  7777  035D  3001               	movlw	1
  7778  035E  00C4               	movwf	??___ftadd
  7779  035F  0844               	movf	??___ftadd,w
  7780  0360  07CA               	addwf	___ftadd@exp1,f
  7781  0361                     l7458:	
  7782  0361  084A               	movf	___ftadd@exp1,w
  7783  0362  0649               	xorwf	___ftadd@exp2,w
  7784  0363  1903               	btfsc	3,2
  7785  0364  2B8B               	goto	l2699
  7786  0365  2B57               	goto	l7456
  7787  0366                     l7460:	
  7788  0366  084A               	movf	___ftadd@exp1,w
  7789  0367  0249               	subwf	___ftadd@exp2,w
  7790  0368  1803               	skipnc
  7791  0369  2B8B               	goto	l2699
  7792  036A                     l7462:	
  7793  036A  3001               	movlw	1
  7794  036B                     u7325:	
  7795  036B  35BE               	lslf	___ftadd@f1,f
  7796  036C  0DBF               	rlf	___ftadd@f1+1,f
  7797  036D  0DC0               	rlf	___ftadd@f1+2,f
  7798  036E  0B89               	decfsz	9,f
  7799  036F  2B6B               	goto	u7325
  7800  0370  3001               	movlw	1
  7801  0371  02CA               	subwf	___ftadd@exp1,f
  7802  0372  0849               	movf	___ftadd@exp2,w
  7803  0373  064A               	xorwf	___ftadd@exp1,w
  7804  0374  1903               	skipnz
  7805  0375  2B87               	goto	l7470
  7806  0376  3001               	movlw	1
  7807  0377  02C8               	subwf	___ftadd@sign,f
  7808  0378  0848               	movf	___ftadd@sign,w
  7809  0379  3907               	andlw	7
  7810  037A  1903               	btfsc	3,2
  7811  037B  2B87               	goto	l7470
  7812  037C  2B6A               	goto	l7462
  7813  037D                     l7468:	
  7814  037D  3001               	movlw	1
  7815  037E                     u7355:	
  7816  037E  36C3               	lsrf	___ftadd@f2+2,f
  7817  037F  0CC2               	rrf	___ftadd@f2+1,f
  7818  0380  0CC1               	rrf	___ftadd@f2,f
  7819  0381  0B89               	decfsz	9,f
  7820  0382  2B7E               	goto	u7355
  7821  0383  3001               	movlw	1
  7822  0384  00C4               	movwf	??___ftadd
  7823  0385  0844               	movf	??___ftadd,w
  7824  0386  07C9               	addwf	___ftadd@exp2,f
  7825  0387                     l7470:	
  7826  0387  084A               	movf	___ftadd@exp1,w
  7827  0388  0649               	xorwf	___ftadd@exp2,w
  7828  0389  1D03               	skipz
  7829  038A  2B7D               	goto	l7468
  7830  038B                     l2699:	
  7831  038B  1FC8               	btfss	___ftadd@sign,7
  7832  038C  2B9D               	goto	l7474
  7833  038D  30FF               	movlw	255
  7834  038E  06BE               	xorwf	___ftadd@f1,f
  7835  038F  30FF               	movlw	255
  7836  0390  06BF               	xorwf	___ftadd@f1+1,f
  7837  0391  30FF               	movlw	255
  7838  0392  06C0               	xorwf	___ftadd@f1+2,f
  7839  0393  3001               	movlw	1
  7840  0394  07BE               	addwf	___ftadd@f1,f
  7841  0395  3000               	movlw	0
  7842  0396  1803               	skipnc
  7843  0397  3001               	movlw	1
  7844  0398  07BF               	addwf	___ftadd@f1+1,f
  7845  0399  3000               	movlw	0
  7846  039A  1803               	skipnc
  7847  039B  3001               	movlw	1
  7848  039C  07C0               	addwf	___ftadd@f1+2,f
  7849  039D                     l7474:	
  7850  039D  1F48               	btfss	___ftadd@sign,6
  7851  039E  2BAF               	goto	l7478
  7852  039F  30FF               	movlw	255
  7853  03A0  06C1               	xorwf	___ftadd@f2,f
  7854  03A1  30FF               	movlw	255
  7855  03A2  06C2               	xorwf	___ftadd@f2+1,f
  7856  03A3  30FF               	movlw	255
  7857  03A4  06C3               	xorwf	___ftadd@f2+2,f
  7858  03A5  3001               	movlw	1
  7859  03A6  07C1               	addwf	___ftadd@f2,f
  7860  03A7  3000               	movlw	0
  7861  03A8  1803               	skipnc
  7862  03A9  3001               	movlw	1
  7863  03AA  07C2               	addwf	___ftadd@f2+1,f
  7864  03AB  3000               	movlw	0
  7865  03AC  1803               	skipnc
  7866  03AD  3001               	movlw	1
  7867  03AE  07C3               	addwf	___ftadd@f2+2,f
  7868  03AF                     l7478:	
  7869  03AF  01C8               	clrf	___ftadd@sign
  7870  03B0  083E               	movf	___ftadd@f1,w
  7871  03B1  07C1               	addwf	___ftadd@f2,f
  7872  03B2  083F               	movf	___ftadd@f1+1,w
  7873  03B3  3DC2               	addwfc	___ftadd@f2+1,f
  7874  03B4  0840               	movf	___ftadd@f1+2,w
  7875  03B5  3DC3               	addwfc	___ftadd@f2+2,f
  7876  03B6  1FC3               	btfss	___ftadd@f2+2,7
  7877  03B7  2BCA               	goto	l7488
  7878  03B8  30FF               	movlw	255
  7879  03B9  06C1               	xorwf	___ftadd@f2,f
  7880  03BA  30FF               	movlw	255
  7881  03BB  06C2               	xorwf	___ftadd@f2+1,f
  7882  03BC  30FF               	movlw	255
  7883  03BD  06C3               	xorwf	___ftadd@f2+2,f
  7884  03BE  3001               	movlw	1
  7885  03BF  07C1               	addwf	___ftadd@f2,f
  7886  03C0  3000               	movlw	0
  7887  03C1  1803               	skipnc
  7888  03C2  3001               	movlw	1
  7889  03C3  07C2               	addwf	___ftadd@f2+1,f
  7890  03C4  3000               	movlw	0
  7891  03C5  1803               	skipnc
  7892  03C6  3001               	movlw	1
  7893  03C7  07C3               	addwf	___ftadd@f2+2,f
  7894  03C8  01C8               	clrf	___ftadd@sign
  7895  03C9  0AC8               	incf	___ftadd@sign,f
  7896  03CA                     l7488:	
  7897  03CA  0841               	movf	___ftadd@f2,w
  7898  03CB  00A0               	movwf	___ftpack@arg
  7899  03CC  0842               	movf	___ftadd@f2+1,w
  7900  03CD  00A1               	movwf	___ftpack@arg+1
  7901  03CE  0843               	movf	___ftadd@f2+2,w
  7902  03CF  00A2               	movwf	___ftpack@arg+2
  7903  03D0  084A               	movf	___ftadd@exp1,w
  7904  03D1  00C4               	movwf	??___ftadd
  7905  03D2  0844               	movf	??___ftadd,w
  7906  03D3  00A3               	movwf	___ftpack@exp
  7907  03D4  0848               	movf	___ftadd@sign,w
  7908  03D5  00C5               	movwf	??___ftadd+1
  7909  03D6  0845               	movf	??___ftadd+1,w
  7910  03D7  00A4               	movwf	___ftpack@sign
  7911  03D8  318C  2409         	fcall	___ftpack
  7912  03DA  0020               	movlb	0	; select bank0
  7913  03DB  0820               	movf	?___ftpack,w
  7914  03DC  00BE               	movwf	?___ftadd
  7915  03DD  0821               	movf	?___ftpack+1,w
  7916  03DE  00BF               	movwf	?___ftadd+1
  7917  03DF  0822               	movf	?___ftpack+2,w
  7918  03E0  00C0               	movwf	?___ftadd+2
  7919  03E1  0008               	return
  7920  03E2                     __end_of___ftadd:	
  7921                           
  7922                           	psect	text30
  7923  1114                     __ptext30:	
  7924 ;; *************** function _setMemory_Modify *****************
  7925 ;; Defined at:
  7926 ;;		line 1000 in file "../src/MCU_B1.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;  command         1    wreg     unsigned char 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  command         1    1[BANK0 ] unsigned char 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;		None               void
  7933 ;; Registers used:
  7934 ;;		wreg, status,2, status,0
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;Total ram usage:        2 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    5
  7947 ;; This function calls:
  7948 ;;		Nothing
  7949 ;; This function is called by:
  7950 ;;		_setLog_Code
  7951 ;;		_setRFSW_AdjControl
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           
  7956                           ;psect for function _setMemory_Modify
  7957  1114                     _setMemory_Modify:	
  7958                           
  7959                           ;incstack = 0
  7960                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7961                           ;setMemory_Modify@command stored from wreg
  7962  1114  0020               	movlb	0	; select bank0
  7963  1115  00A1               	movwf	setMemory_Modify@command
  7964                           
  7965                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  7966  1116  0821               	movf	setMemory_Modify@command,w
  7967  1117  3A01               	xorlw	1
  7968  1118  3000               	movlw	0
  7969  1119  1903               	skipnz
  7970  111A  3001               	movlw	1
  7971  111B  00A0               	movwf	??_setMemory_Modify
  7972  111C  0023               	movlb	3	; select bank3
  7973  111D  0844               	movf	(_Memory^(0+384)+36),w
  7974  111E  0020               	movlb	0	; select bank0
  7975  111F  0620               	xorwf	??_setMemory_Modify,w
  7976  1120  39FE               	andlw	-2
  7977  1121  0620               	xorwf	??_setMemory_Modify,w
  7978  1122  0023               	movlb	3	; select bank3
  7979  1123  00C4               	movwf	(_Memory^(0+384)+36)
  7980                           
  7981                           ;MCU_B1.c: 1002: Memory.Time = 0;
  7982  1124  01C2               	clrf	(_Memory^(0+384)+34)
  7983  1125  01C3               	clrf	((_Memory+1)^(0+384)+34)
  7984  1126  0008               	return
  7985  1127                     __end_of_setMemory_Modify:	
  7986                           
  7987                           	psect	text31
  7988  1F11                     __ptext31:	
  7989 ;; *************** function _getMain_All_Error_Status *****************
  7990 ;; Defined at:
  7991 ;;		line 361 in file "../src/main_B1.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  command         1    wreg     unsigned char 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  command         1    0[COMMON] unsigned char 
  7996 ;;  status          1    0[BANK0 ] unsigned char 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      unsigned char 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;Total ram usage:        1 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    5
  8013 ;; This function calls:
  8014 ;;		Nothing
  8015 ;; This function is called by:
  8016 ;;		_setRF_Main
  8017 ;;		_getRxData
  8018 ;;		_Switch_Main
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           
  8023                           ;psect for function _getMain_All_Error_Status
  8024  1F11                     _getMain_All_Error_Status:	
  8025                           
  8026                           ;main_B1.c: 362: char status = 0;
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  8030  1F11  0020               	movlb	0	; select bank0
  8031  1F12  01A0               	clrf	getMain_All_Error_Status@status
  8032                           
  8033                           ;main_B1.c: 398: return status;
  8034  1F13  0820               	movf	getMain_All_Error_Status@status,w
  8035  1F14  0008               	return
  8036  1F15                     __end_of_getMain_All_Error_Status:	
  8037                           
  8038                           	psect	text32
  8039  1096                     __ptext32:	
  8040 ;; *************** function _getRF_KeyStatus *****************
  8041 ;; Defined at:
  8042 ;;		line 187 in file "../src/RF_Control_B1.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;		None
  8045 ;; Auto vars:     Size  Location     Type
  8046 ;;  key             1    1[BANK0 ] unsigned char 
  8047 ;; Return value:  Size  Location     Type
  8048 ;;                  1    wreg      unsigned char 
  8049 ;; Registers used:
  8050 ;;		wreg, status,2
  8051 ;; Tracked objects:
  8052 ;;		On entry : 0/0
  8053 ;;		On exit  : 0/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;Total ram usage:        3 bytes
  8061 ;; Hardware stack levels used:    1
  8062 ;; Hardware stack levels required when called:    5
  8063 ;; This function calls:
  8064 ;;		Nothing
  8065 ;; This function is called by:
  8066 ;;		_setRF_Main
  8067 ;; This function uses a non-reentrant model
  8068 ;;
  8069                           
  8070                           
  8071                           ;psect for function _getRF_KeyStatus
  8072  1096                     _getRF_KeyStatus:	
  8073                           
  8074                           ;RF_Control_B1.c: 188: char key = 0;
  8075                           
  8076                           ;incstack = 0
  8077                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8078  1096  0020               	movlb	0	; select bank0
  8079  1097  01A1               	clrf	getRF_KeyStatus@key
  8080                           
  8081                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8082  1098  01A2               	clrf	_getRF_KeyStatus$4517
  8083  1099  0AA2               	incf	_getRF_KeyStatus$4517,f
  8084  109A  1F0C               	btfss	12,6	;volatile
  8085  109B  1A0C               	btfsc	12,4	;volatile
  8086  109C  28A1               	goto	l6320
  8087  109D  1C0C               	btfss	12,0	;volatile
  8088  109E  188D               	btfsc	13,1	;volatile
  8089  109F  28A1               	goto	l6320
  8090  10A0  01A2               	clrf	_getRF_KeyStatus$4517
  8091  10A1                     l6320:	
  8092  10A1  0822               	movf	_getRF_KeyStatus$4517,w
  8093  10A2  00A0               	movwf	??_getRF_KeyStatus
  8094  10A3  0820               	movf	??_getRF_KeyStatus,w
  8095  10A4  00A1               	movwf	getRF_KeyStatus@key
  8096                           
  8097                           ;RF_Control_B1.c: 200: return key;
  8098  10A5  0821               	movf	getRF_KeyStatus@key,w
  8099  10A6  0008               	return
  8100  10A7                     __end_of_getRF_KeyStatus:	
  8101                           
  8102                           	psect	text33
  8103  1085                     __ptext33:	
  8104 ;; *************** function _getBuz_GO *****************
  8105 ;; Defined at:
  8106 ;;		line 82 in file "../src/Buzzer_B1.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;		None
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;  i               2    4[BANK0 ] int 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  2    0[BANK0 ] int 
  8113 ;; Registers used:
  8114 ;;		wreg, status,2, status,0
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;Total ram usage:        6 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    5
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		_setRF_Main
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _getBuz_GO
  8136  1085                     _getBuz_GO:	
  8137                           
  8138                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8139                           
  8140                           ;incstack = 0
  8141                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8142  1085  0021               	movlb	1	; select bank1
  8143  1086  0C30               	rrf	_Buz1^(0+128),w
  8144  1087  3901               	andlw	1
  8145  1088  0020               	movlb	0	; select bank0
  8146  1089  00A2               	movwf	??_getBuz_GO
  8147  108A  01A3               	clrf	??_getBuz_GO+1
  8148  108B  0822               	movf	??_getBuz_GO,w
  8149  108C  00A4               	movwf	getBuz_GO@i
  8150  108D  0823               	movf	??_getBuz_GO+1,w
  8151  108E  00A5               	movwf	getBuz_GO@i+1
  8152                           
  8153                           ;Buzzer_B1.c: 84: return i;
  8154  108F  0825               	movf	getBuz_GO@i+1,w
  8155  1090  01A1               	clrf	?_getBuz_GO+1
  8156  1091  07A1               	addwf	?_getBuz_GO+1,f
  8157  1092  0824               	movf	getBuz_GO@i,w
  8158  1093  01A0               	clrf	?_getBuz_GO
  8159  1094  07A0               	addwf	?_getBuz_GO,f
  8160  1095  0008               	return
  8161  1096                     __end_of_getBuz_GO:	
  8162                           
  8163                           	psect	text34
  8164  0CCC                     __ptext34:	
  8165 ;; *************** function _CC2500_TxData *****************
  8166 ;; Defined at:
  8167 ;;		line 32 in file "../src/CC2500_B1.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;		None
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8172 ;; Return value:  Size  Location     Type
  8173 ;;		None               void
  8174 ;; Registers used:
  8175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;Total ram usage:        2 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    7
  8188 ;; This function calls:
  8189 ;;		_CC2500_WriteByte
  8190 ;;		_CC2500_WriteCommand
  8191 ;;		_Timeout_Counter
  8192 ;;		_set_TimeoutCleared
  8193 ;; This function is called by:
  8194 ;;		_setRF_Main
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _CC2500_TxData
  8200  0CCC                     _CC2500_TxData:	
  8201                           
  8202                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8203                           ;CC2500_B1.c: 35: RC4 = 0;
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8207  0CCC  0020               	movlb	0	; select bank0
  8208  0CCD  120E               	bcf	14,4	;volatile
  8209                           
  8210                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8211  0CCE  307F               	movlw	127
  8212  0CCF  00A4               	movwf	??_CC2500_TxData
  8213  0CD0  0824               	movf	??_CC2500_TxData,w
  8214  0CD1  0021               	movlb	1	; select bank1
  8215  0CD2  00D9               	movwf	_SPI0Buffer^(0+128)
  8216                           
  8217                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8218  0CD3  2CD7               	goto	l5958
  8219  0CD4                     l5956:	
  8220                           
  8221                           ;CC2500_B1.c: 38: Timeout_Counter();
  8222  0CD4  3191  219D  318C   	fcall	_Timeout_Counter
  8223  0CD7                     l5958:	
  8224  0CD7  0020               	movlb	0	; select bank0
  8225  0CD8  1D0E               	btfss	14,2	;volatile
  8226  0CD9  2CDD               	goto	l5962
  8227  0CDA  0021               	movlb	1	; select bank1
  8228  0CDB  1D2D               	btfss	(_myMain^(0+128)+13),2
  8229  0CDC  2CD4               	goto	l5956
  8230  0CDD                     l5962:	
  8231                           
  8232                           ;CC2500_B1.c: 39: };
  8233                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8234  0CDD  319F  2715  318C   	fcall	_set_TimeoutCleared
  8235                           
  8236                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8237  0CE0  3192  2208  318C   	fcall	_CC2500_WriteByte
  8238                           
  8239                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8240  0CE3  0021               	movlb	1	; select bank1
  8241  0CE4  085B               	movf	_Tx_Length^(0+128),w
  8242  0CE5  0020               	movlb	0	; select bank0
  8243  0CE6  00A4               	movwf	??_CC2500_TxData
  8244  0CE7  0824               	movf	??_CC2500_TxData,w
  8245  0CE8  0021               	movlb	1	; select bank1
  8246  0CE9  00D9               	movwf	_SPI0Buffer^(0+128)
  8247                           
  8248                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8249  0CEA  3192  2208  318C   	fcall	_CC2500_WriteByte
  8250                           
  8251                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8252  0CED  0020               	movlb	0	; select bank0
  8253  0CEE  01A5               	clrf	CC2500_TxData@loop_e
  8254  0CEF                     l5976:	
  8255  0CEF  0021               	movlb	1	; select bank1
  8256  0CF0  085B               	movf	_Tx_Length^(0+128),w
  8257  0CF1  0020               	movlb	0	; select bank0
  8258  0CF2  0225               	subwf	CC2500_TxData@loop_e,w
  8259  0CF3  1803               	btfsc	3,0
  8260  0CF4  2D08               	goto	l247
  8261                           
  8262                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8263  0CF5  0825               	movf	CC2500_TxData@loop_e,w
  8264  0CF6  3E20               	addlw	_RF_Data& (0+255)
  8265  0CF7  0086               	movwf	6
  8266  0CF8  3001               	movlw	1	; select bank2/3
  8267  0CF9  0087               	movwf	7
  8268  0CFA  0801               	movf	1,w
  8269  0CFB  00A4               	movwf	??_CC2500_TxData
  8270  0CFC  0824               	movf	??_CC2500_TxData,w
  8271  0CFD  0021               	movlb	1	; select bank1
  8272  0CFE  00D9               	movwf	_SPI0Buffer^(0+128)
  8273                           
  8274                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8275  0CFF  3192  2208  318C   	fcall	_CC2500_WriteByte
  8276  0D02  3001               	movlw	1
  8277  0D03  0020               	movlb	0	; select bank0
  8278  0D04  00A4               	movwf	??_CC2500_TxData
  8279  0D05  0824               	movf	??_CC2500_TxData,w
  8280  0D06  07A5               	addwf	CC2500_TxData@loop_e,f
  8281  0D07  2CEF               	goto	l5976
  8282  0D08                     l247:	
  8283                           
  8284                           ;CC2500_B1.c: 48: }
  8285                           ;CC2500_B1.c: 49: RC4 = 1;
  8286  0D08  160E               	bsf	14,4	;volatile
  8287                           
  8288                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8289  0D09  3035               	movlw	53
  8290  0D0A  3192  223A  318C   	fcall	_CC2500_WriteCommand
  8291                           
  8292                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8293  0D0D  2D11               	goto	l5982
  8294  0D0E                     l5980:	
  8295                           
  8296                           ;CC2500_B1.c: 52: Timeout_Counter();
  8297  0D0E  3191  219D  318C   	fcall	_Timeout_Counter
  8298  0D11                     l5982:	
  8299  0D11  0020               	movlb	0	; select bank0
  8300  0D12  180D               	btfsc	13,0	;volatile
  8301  0D13  2D17               	goto	l5986
  8302  0D14  0021               	movlb	1	; select bank1
  8303  0D15  1D2D               	btfss	(_myMain^(0+128)+13),2
  8304  0D16  2D0E               	goto	l5980
  8305  0D17                     l5986:	
  8306                           
  8307                           ;CC2500_B1.c: 53: };
  8308                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8309  0D17  319F  2715  318C   	fcall	_set_TimeoutCleared
  8310                           
  8311                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8312  0D1A  2D1E               	goto	l5990
  8313  0D1B                     l5988:	
  8314                           
  8315                           ;CC2500_B1.c: 57: Timeout_Counter();
  8316  0D1B  3191  219D  318C   	fcall	_Timeout_Counter
  8317  0D1E                     l5990:	
  8318  0D1E  0020               	movlb	0	; select bank0
  8319  0D1F  1C0D               	btfss	13,0	;volatile
  8320  0D20  2D24               	goto	l5994
  8321  0D21  0021               	movlb	1	; select bank1
  8322  0D22  1D2D               	btfss	(_myMain^(0+128)+13),2
  8323  0D23  2D1B               	goto	l5988
  8324  0D24                     l5994:	
  8325                           
  8326                           ;CC2500_B1.c: 58: };
  8327                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8328  0D24  319F  2715  318C   	fcall	_set_TimeoutCleared
  8329                           
  8330                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8331  0D27  3036               	movlw	54
  8332  0D28  3192  223A  318C   	fcall	_CC2500_WriteCommand
  8333                           
  8334                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8335  0D2B  303B               	movlw	59
  8336  0D2C  3192  223A  318C   	fcall	_CC2500_WriteCommand
  8337                           
  8338                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8339  0D2F  303A               	movlw	58
  8340  0D30  3192  223A         	fcall	_CC2500_WriteCommand
  8341                           
  8342                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8343  0D32  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8344  0D33  0008               	return
  8345  0D34                     __end_of_CC2500_TxData:	
  8346                           
  8347                           	psect	text35
  8348  0E83                     __ptext35:	
  8349 ;; *************** function _CC2500_RxData *****************
  8350 ;; Defined at:
  8351 ;;		line 70 in file "../src/CC2500_B1.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;		None
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;		None               void
  8358 ;; Registers used:
  8359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;Total ram usage:        2 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    7
  8372 ;; This function calls:
  8373 ;;		_CC2500_ReadByte
  8374 ;;		_CC2500_ReadStatus
  8375 ;;		_CC2500_WriteByte
  8376 ;;		_Timeout_Counter
  8377 ;;		_set_TimeoutCleared
  8378 ;; This function is called by:
  8379 ;;		_setRF_Main
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function _CC2500_RxData
  8385  0E83                     _CC2500_RxData:	
  8386                           
  8387                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8388                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8389                           
  8390                           ;incstack = 0
  8391                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8392  0E83  0020               	movlb	0	; select bank0
  8393  0E84  180D               	btfsc	13,0	;volatile
  8394  0E85  2E8A               	goto	l6010
  8395  0E86  2E93               	goto	l6016
  8396  0E87                     l6008:	
  8397                           ;CC2500_B1.c: 76: {
  8398                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8399                           
  8400                           
  8401                           ;CC2500_B1.c: 78: Timeout_Counter();
  8402  0E87  3191  219D  318E   	fcall	_Timeout_Counter
  8403  0E8A                     l6010:	
  8404  0E8A  0020               	movlb	0	; select bank0
  8405  0E8B  1C0D               	btfss	13,0	;volatile
  8406  0E8C  2E90               	goto	l6014
  8407  0E8D  0021               	movlb	1	; select bank1
  8408  0E8E  1D2D               	btfss	(_myMain^(0+128)+13),2
  8409  0E8F  2E87               	goto	l6008
  8410  0E90                     l6014:	
  8411                           
  8412                           ;CC2500_B1.c: 79: };
  8413                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8414  0E90  319F  2715  318E   	fcall	_set_TimeoutCleared
  8415  0E93                     l6016:	
  8416                           
  8417                           ;CC2500_B1.c: 81: }
  8418                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8419  0E93  303B               	movlw	59
  8420  0E94  3193  23D3  318E   	fcall	_CC2500_ReadStatus
  8421                           
  8422                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8423  0E97  0021               	movlb	1	; select bank1
  8424  0E98  085E               	movf	_s_data^(0+128),w
  8425  0E99  1903               	btfsc	3,2
  8426  0E9A  0008               	return
  8427                           
  8428                           ;CC2500_B1.c: 86: RC4 = 0;
  8429  0E9B  0020               	movlb	0	; select bank0
  8430  0E9C  120E               	bcf	14,4	;volatile
  8431                           
  8432                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8433  0E9D  30FF               	movlw	255
  8434  0E9E  00A4               	movwf	??_CC2500_RxData
  8435  0E9F  0824               	movf	??_CC2500_RxData,w
  8436  0EA0  0021               	movlb	1	; select bank1
  8437  0EA1  00D9               	movwf	_SPI0Buffer^(0+128)
  8438                           
  8439                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8440  0EA2  2EA9               	goto	l6026
  8441  0EA3                     l6028:	
  8442  0EA3  0021               	movlb	1	; select bank1
  8443  0EA4  192D               	btfsc	(_myMain^(0+128)+13),2
  8444  0EA5  2EAC               	goto	l272
  8445                           
  8446                           ;CC2500_B1.c: 89: Timeout_Counter();
  8447  0EA6  3191  219D  318E   	fcall	_Timeout_Counter
  8448  0EA9                     l6026:	
  8449  0EA9  0020               	movlb	0	; select bank0
  8450  0EAA  190E               	btfsc	14,2	;volatile
  8451  0EAB  2EA3               	goto	l6028
  8452  0EAC                     l272:	
  8453                           
  8454                           ;CC2500_B1.c: 90: };
  8455                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8456  0EAC  0021               	movlb	1	; select bank1
  8457  0EAD  192D               	btfsc	(_myMain^(0+128)+13),2
  8458  0EAE  2EF3               	goto	l273
  8459                           
  8460                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8461  0EAF  3192  2208  318E   	fcall	_CC2500_WriteByte
  8462                           
  8463                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8464  0EB2  3192  226E  318E   	fcall	_CC2500_ReadByte
  8465                           
  8466                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8467  0EB5  0021               	movlb	1	; select bank1
  8468  0EB6  0859               	movf	_SPI0Buffer^(0+128),w
  8469  0EB7  0020               	movlb	0	; select bank0
  8470  0EB8  00A4               	movwf	??_CC2500_RxData
  8471  0EB9  0824               	movf	??_CC2500_RxData,w
  8472  0EBA  0021               	movlb	1	; select bank1
  8473  0EBB  00D8               	movwf	_Rx_Length^(0+128)
  8474                           
  8475                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8476  0EBC  0020               	movlb	0	; select bank0
  8477  0EBD  01A5               	clrf	CC2500_RxData@loop_f
  8478  0EBE                     l6042:	
  8479  0EBE  0021               	movlb	1	; select bank1
  8480  0EBF  0858               	movf	_Rx_Length^(0+128),w
  8481  0EC0  0020               	movlb	0	; select bank0
  8482  0EC1  0225               	subwf	CC2500_RxData@loop_f,w
  8483  0EC2  1803               	btfsc	3,0
  8484  0EC3  2ED7               	goto	l6044
  8485                           
  8486                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8487  0EC4  3192  226E  318E   	fcall	_CC2500_ReadByte
  8488                           
  8489                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8490  0EC7  0021               	movlb	1	; select bank1
  8491  0EC8  0859               	movf	_SPI0Buffer^(0+128),w
  8492  0EC9  0020               	movlb	0	; select bank0
  8493  0ECA  00A4               	movwf	??_CC2500_RxData
  8494  0ECB  0825               	movf	CC2500_RxData@loop_f,w
  8495  0ECC  3E20               	addlw	_RF_Data& (0+255)
  8496  0ECD  0086               	movwf	6
  8497  0ECE  3001               	movlw	1	; select bank2/3
  8498  0ECF  0087               	movwf	7
  8499  0ED0  0824               	movf	??_CC2500_RxData,w
  8500  0ED1  0081               	movwf	1
  8501  0ED2  3001               	movlw	1
  8502  0ED3  00A4               	movwf	??_CC2500_RxData
  8503  0ED4  0824               	movf	??_CC2500_RxData,w
  8504  0ED5  07A5               	addwf	CC2500_RxData@loop_f,f
  8505  0ED6  2EBE               	goto	l6042
  8506  0ED7                     l6044:	
  8507                           
  8508                           ;CC2500_B1.c: 99: }
  8509                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8510  0ED7  3192  226E  318E   	fcall	_CC2500_ReadByte
  8511                           
  8512                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8513  0EDA  0021               	movlb	1	; select bank1
  8514  0EDB  0859               	movf	_SPI0Buffer^(0+128),w
  8515  0EDC  0020               	movlb	0	; select bank0
  8516  0EDD  00A4               	movwf	??_CC2500_RxData
  8517  0EDE  0824               	movf	??_CC2500_RxData,w
  8518  0EDF  0021               	movlb	1	; select bank1
  8519  0EE0  00D7               	movwf	_RSSI^(0+128)
  8520                           
  8521                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8522  0EE1  3192  226E  318E   	fcall	_CC2500_ReadByte
  8523                           
  8524                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8525  0EE4  0021               	movlb	1	; select bank1
  8526  0EE5  0859               	movf	_SPI0Buffer^(0+128),w
  8527  0EE6  0020               	movlb	0	; select bank0
  8528  0EE7  00A4               	movwf	??_CC2500_RxData
  8529  0EE8  0824               	movf	??_CC2500_RxData,w
  8530  0EE9  0021               	movlb	1	; select bank1
  8531  0EEA  00D2               	movwf	_CRC^(0+128)
  8532                           
  8533                           ;CC2500_B1.c: 104: RC4 = 1;
  8534  0EEB  0020               	movlb	0	; select bank0
  8535  0EEC  160E               	bsf	14,4	;volatile
  8536                           
  8537                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8538  0EED  0021               	movlb	1	; select bank1
  8539  0EEE  1BD2               	btfsc	_CRC^(0+128),7
  8540                           
  8541                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8542  0EEF  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8543                           
  8544                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8545  0EF0  11BC               	bcf	_RF1^(0+128),3
  8546                           
  8547                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8548  0EF1  14BC               	bsf	_RF1^(0+128),1
  8549                           
  8550                           ;CC2500_B1.c: 110: } else {
  8551  0EF2  2EF5               	goto	l6056
  8552  0EF3                     l273:	
  8553                           
  8554                           ;CC2500_B1.c: 111: RC4 = 1;
  8555  0EF3  0020               	movlb	0	; select bank0
  8556  0EF4  160E               	bsf	14,4	;volatile
  8557  0EF5                     l6056:	
  8558                           
  8559                           ;CC2500_B1.c: 112: }
  8560                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8561  0EF5  319F  2715         	fcall	_set_TimeoutCleared
  8562  0EF7  0021               	movlb	1	; select bank1
  8563  0EF8  0008               	return
  8564  0EF9                     __end_of_CC2500_RxData:	
  8565                           
  8566                           	psect	text36
  8567  13D3                     __ptext36:	
  8568 ;; *************** function _CC2500_ReadStatus *****************
  8569 ;; Defined at:
  8570 ;;		line 304 in file "../src/CC2500_B1.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  status_addr     1    wreg     unsigned char 
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;		None               void
  8577 ;; Registers used:
  8578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;Total ram usage:        2 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    6
  8591 ;; This function calls:
  8592 ;;		_CC2500_ReadByte
  8593 ;;		_CC2500_WriteByte
  8594 ;;		_Timeout_Counter
  8595 ;;		_set_TimeoutCleared
  8596 ;; This function is called by:
  8597 ;;		_CC2500_RxData
  8598 ;;		_setRF_Main
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           
  8603                           ;psect for function _CC2500_ReadStatus
  8604  13D3                     _CC2500_ReadStatus:	
  8605                           
  8606                           ;incstack = 0
  8607                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8608                           ;CC2500_ReadStatus@status_addr stored from wreg
  8609  13D3  0020               	movlb	0	; select bank0
  8610  13D4  00A3               	movwf	CC2500_ReadStatus@status_addr
  8611                           
  8612                           ;CC2500_B1.c: 305: RC4 = 0;
  8613  13D5  120E               	bcf	14,4	;volatile
  8614                           
  8615                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8616  13D6  0823               	movf	CC2500_ReadStatus@status_addr,w
  8617  13D7  3EC0               	addlw	192
  8618  13D8  00A2               	movwf	??_CC2500_ReadStatus
  8619  13D9  0822               	movf	??_CC2500_ReadStatus,w
  8620  13DA  0021               	movlb	1	; select bank1
  8621  13DB  00D9               	movwf	_SPI0Buffer^(0+128)
  8622                           
  8623                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8624  13DC  2BE0               	goto	l5812
  8625  13DD                     l5810:	
  8626                           
  8627                           ;CC2500_B1.c: 309: Timeout_Counter();
  8628  13DD  3191  219D  3193   	fcall	_Timeout_Counter
  8629  13E0                     l5812:	
  8630  13E0  0020               	movlb	0	; select bank0
  8631  13E1  1D0E               	btfss	14,2	;volatile
  8632  13E2  2BE6               	goto	l5816
  8633  13E3  0021               	movlb	1	; select bank1
  8634  13E4  1D2D               	btfss	(_myMain^(0+128)+13),2
  8635  13E5  2BDD               	goto	l5810
  8636  13E6                     l5816:	
  8637                           
  8638                           ;CC2500_B1.c: 310: };
  8639                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8640  13E6  319F  2715  3193   	fcall	_set_TimeoutCleared
  8641                           
  8642                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8643  13E9  3192  2208  3193   	fcall	_CC2500_WriteByte
  8644                           
  8645                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8646  13EC  3192  226E         	fcall	_CC2500_ReadByte
  8647                           
  8648                           ;CC2500_B1.c: 315: RC4 = 1;
  8649  13EE  0020               	movlb	0	; select bank0
  8650  13EF  160E               	bsf	14,4	;volatile
  8651                           
  8652                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8653  13F0  0021               	movlb	1	; select bank1
  8654  13F1  0859               	movf	_SPI0Buffer^(0+128),w
  8655  13F2  0020               	movlb	0	; select bank0
  8656  13F3  00A2               	movwf	??_CC2500_ReadStatus
  8657  13F4  0822               	movf	??_CC2500_ReadStatus,w
  8658  13F5  0021               	movlb	1	; select bank1
  8659  13F6  00DE               	movwf	_s_data^(0+128)
  8660  13F7  0008               	return
  8661  13F8                     __end_of_CC2500_ReadStatus:	
  8662                           
  8663                           	psect	text37
  8664  126E                     __ptext37:	
  8665 ;; *************** function _CC2500_ReadByte *****************
  8666 ;; Defined at:
  8667 ;;		line 238 in file "../src/CC2500_B1.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;		None
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;		None               void
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;Total ram usage:        2 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    5
  8688 ;; This function calls:
  8689 ;;		Nothing
  8690 ;; This function is called by:
  8691 ;;		_CC2500_RxData
  8692 ;;		_CC2500_ReadStatus
  8693 ;;		_CC2500_ReadREG
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _CC2500_ReadByte
  8699  126E                     _CC2500_ReadByte:	
  8700                           
  8701                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8702                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8706  126E  0020               	movlb	0	; select bank0
  8707  126F  01A1               	clrf	CC2500_ReadByte@loop_b
  8708  1270                     L4:	
  8709  1270  3008               	movlw	8
  8710  1271  0221               	subwf	CC2500_ReadByte@loop_b,w
  8711  1272  1803               	btfsc	3,0
  8712  1273  0008               	return
  8713                           
  8714                           ;CC2500_B1.c: 241: RC1 = 1;
  8715  1274  148E               	bsf	14,1	;volatile
  8716                           
  8717                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8718  1275  1003               	clrc
  8719  1276  0021               	movlb	1	; select bank1
  8720  1277  0DD9               	rlf	_SPI0Buffer^(0+128),f
  8721                           
  8722                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8723  1278  0020               	movlb	0	; select bank0
  8724  1279  1D0E               	btfss	14,2	;volatile
  8725  127A  2A7E               	goto	l5738
  8726                           
  8727                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8728  127B  0021               	movlb	1	; select bank1
  8729  127C  1459               	bsf	_SPI0Buffer^(0+128),0
  8730  127D  2A84               	goto	l5740
  8731  127E                     l5738:	
  8732                           
  8733                           ;CC2500_B1.c: 245: else
  8734                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8735  127E  30FE               	movlw	254
  8736  127F  0020               	movlb	0	; select bank0
  8737  1280  00A0               	movwf	??_CC2500_ReadByte
  8738  1281  0820               	movf	??_CC2500_ReadByte,w
  8739  1282  0021               	movlb	1	; select bank1
  8740  1283  05D9               	andwf	_SPI0Buffer^(0+128),f
  8741  1284                     l5740:	
  8742                           
  8743                           ;CC2500_B1.c: 247: RC1 = 0;
  8744  1284  0020               	movlb	0	; select bank0
  8745  1285  108E               	bcf	14,1	;volatile
  8746  1286  3001               	movlw	1
  8747  1287  00A0               	movwf	??_CC2500_ReadByte
  8748  1288  0820               	movf	??_CC2500_ReadByte,w
  8749  1289  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8750  128A  2A70               	goto	L4
  8751  128B                     __end_of_CC2500_ReadByte:	
  8752                           
  8753                           	psect	text38
  8754  1EFB                     __ptext38:	
  8755 ;; *************** function _RF_Initialization *****************
  8756 ;; Defined at:
  8757 ;;		line 9 in file "../src/RF_Control_B1.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;		None
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;		None
  8762 ;; Return value:  Size  Location     Type
  8763 ;;		None               void
  8764 ;; Registers used:
  8765 ;;		wreg, status,2, status,0, pclath, cstack
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;Total ram usage:        0 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    6
  8778 ;; This function calls:
  8779 ;;		_setRF_Initialization
  8780 ;; This function is called by:
  8781 ;;		_main
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           
  8786                           ;psect for function _RF_Initialization
  8787  1EFB                     _RF_Initialization:	
  8788                           
  8789                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8790                           
  8791                           ;incstack = 0
  8792                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8793  1EFB  319F  2773         	fcall	_setRF_Initialization
  8794  1EFD  0008               	return
  8795  1EFE                     __end_of_RF_Initialization:	
  8796                           
  8797                           	psect	text39
  8798  1F73                     __ptext39:	
  8799 ;; *************** function _setRF_Initialization *****************
  8800 ;; Defined at:
  8801 ;;		line 43 in file "../src/RF_Control_B1.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;		None
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;		None
  8806 ;; Return value:  Size  Location     Type
  8807 ;;		None               void
  8808 ;; Registers used:
  8809 ;;		wreg
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;Total ram usage:        1 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    5
  8822 ;; This function calls:
  8823 ;;		Nothing
  8824 ;; This function is called by:
  8825 ;;		_RF_Initialization
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           
  8830                           ;psect for function _setRF_Initialization
  8831  1F73                     _setRF_Initialization:	
  8832                           
  8833                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8834                           
  8835                           ;incstack = 0
  8836                           ; Regs used in _setRF_Initialization: [wreg]
  8837  1F73  3015               	movlw	21
  8838  1F74  0020               	movlb	0	; select bank0
  8839  1F75  00A0               	movwf	??_setRF_Initialization
  8840  1F76  0820               	movf	??_setRF_Initialization,w
  8841  1F77  0021               	movlb	1	; select bank1
  8842  1F78  00DB               	movwf	_Tx_Length^(0+128)
  8843                           
  8844                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  8845  1F79  300A               	movlw	10
  8846  1F7A  00C3               	movwf	(_RF1^(0+128)+7)
  8847  1F7B  3000               	movlw	0
  8848  1F7C  00C4               	movwf	(_RF1^(0+128)+8)
  8849  1F7D  0008               	return
  8850  1F7E                     __end_of_setRF_Initialization:	
  8851                           
  8852                           	psect	text40
  8853  10DD                     __ptext40:	
  8854 ;; *************** function _Mcu_Initialization *****************
  8855 ;; Defined at:
  8856 ;;		line 30 in file "../src/MCU_B1.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;		None
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;		None
  8861 ;; Return value:  Size  Location     Type
  8862 ;;		None               void
  8863 ;; Registers used:
  8864 ;;		wreg, status,2, status,0, pclath, cstack
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;Total ram usage:        0 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    6
  8877 ;; This function calls:
  8878 ;;		_ADC_Set
  8879 ;;		_Fosc_Set
  8880 ;;		_IOC_Set
  8881 ;;		_IO_Set
  8882 ;;		_TMR1_Set
  8883 ;;		_WDT_Set
  8884 ;; This function is called by:
  8885 ;;		_main
  8886 ;; This function uses a non-reentrant model
  8887 ;;
  8888                           
  8889                           
  8890                           ;psect for function _Mcu_Initialization
  8891  10DD                     _Mcu_Initialization:	
  8892                           
  8893                           ;MCU_B1.c: 32: Fosc_Set();
  8894                           
  8895                           ;incstack = 0
  8896                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8897  10DD  319F  270D  3190   	fcall	_Fosc_Set
  8898                           
  8899                           ;MCU_B1.c: 34: IO_Set();
  8900  10E0  3192  2221  3190   	fcall	_IO_Set
  8901                           
  8902                           ;MCU_B1.c: 36: ;;
  8903                           ;MCU_B1.c: 38: TMR1_Set();
  8904  10E3  319F  27C6  3190   	fcall	_TMR1_Set
  8905                           
  8906                           ;MCU_B1.c: 40: ADC_Set();
  8907  10E6  319F  2726  3190   	fcall	_ADC_Set
  8908                           
  8909                           ;MCU_B1.c: 42: ;;
  8910                           ;MCU_B1.c: 44: ;;
  8911                           ;MCU_B1.c: 46: IOC_Set();
  8912  10E9  319F  27BA  3190   	fcall	_IOC_Set
  8913                           
  8914                           ;MCU_B1.c: 48: ;;
  8915                           ;MCU_B1.c: 50: ;;
  8916                           ;MCU_B1.c: 52: WDT_Set();
  8917  10EC  319F  2768         	fcall	_WDT_Set
  8918  10EE  0008               	return
  8919  10EF                     __end_of_Mcu_Initialization:	
  8920                           
  8921                           	psect	text41
  8922  1F68                     __ptext41:	
  8923 ;; *************** function _WDT_Set *****************
  8924 ;; Defined at:
  8925 ;;		line 1019 in file "../src/MCU_B1.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;		None
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;		None
  8930 ;; Return value:  Size  Location     Type
  8931 ;;		None               void
  8932 ;; Registers used:
  8933 ;;		wreg
  8934 ;; Tracked objects:
  8935 ;;		On entry : 0/0
  8936 ;;		On exit  : 0/0
  8937 ;;		Unchanged: 0/0
  8938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;Total ram usage:        1 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:    5
  8946 ;; This function calls:
  8947 ;;		Nothing
  8948 ;; This function is called by:
  8949 ;;		_Mcu_Initialization
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function _WDT_Set
  8955  1F68                     _WDT_Set:	
  8956                           
  8957                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  8958                           
  8959                           ;incstack = 0
  8960                           ; Regs used in _WDT_Set: [wreg]
  8961  1F68  3017               	movlw	23
  8962  1F69  0021               	movlb	1	; select bank1
  8963  1F6A  0097               	movwf	23	;volatile
  8964                           
  8965                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  8966  1F6B  1450               	bsf	_WDT^(0+128),0
  8967                           
  8968                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  8969  1F6C  300A               	movlw	10
  8970  1F6D  0020               	movlb	0	; select bank0
  8971  1F6E  00A0               	movwf	??_WDT_Set
  8972  1F6F  0820               	movf	??_WDT_Set,w
  8973  1F70  0021               	movlb	1	; select bank1
  8974  1F71  00D1               	movwf	(_WDT^(0+128)+1)
  8975  1F72  0008               	return
  8976  1F73                     __end_of_WDT_Set:	
  8977                           
  8978                           	psect	text42
  8979  1FC6                     __ptext42:	
  8980 ;; *************** function _TMR1_Set *****************
  8981 ;; Defined at:
  8982 ;;		line 199 in file "../src/MCU_B1.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;		None               void
  8989 ;; Registers used:
  8990 ;;		wreg
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;Total ram usage:        0 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    5
  9003 ;; This function calls:
  9004 ;;		Nothing
  9005 ;; This function is called by:
  9006 ;;		_Mcu_Initialization
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _TMR1_Set
  9012  1FC6                     _TMR1_Set:	
  9013                           
  9014                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _TMR1_Set: [wreg]
  9018  1FC6  3041               	movlw	65
  9019  1FC7  0020               	movlb	0	; select bank0
  9020  1FC8  0098               	movwf	24	;volatile
  9021                           
  9022                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9023  1FC9  30FA               	movlw	250
  9024  1FCA  0097               	movwf	23	;volatile
  9025                           
  9026                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9027  1FCB  3038               	movlw	56
  9028  1FCC  0096               	movwf	22	;volatile
  9029                           
  9030                           ;MCU_B1.c: 203: TMR1IE = 1;
  9031  1FCD  0021               	movlb	1	; select bank1
  9032  1FCE  1411               	bsf	17,0	;volatile
  9033                           
  9034                           ;MCU_B1.c: 204: PEIE = 1;
  9035  1FCF  170B               	bsf	11,6	;volatile
  9036                           
  9037                           ;MCU_B1.c: 205: GIE = 1;
  9038  1FD0  178B               	bsf	11,7	;volatile
  9039  1FD1  0008               	return
  9040  1FD2                     __end_of_TMR1_Set:	
  9041                           
  9042                           	psect	text43
  9043  1221                     __ptext43:	
  9044 ;; *************** function _IO_Set *****************
  9045 ;; Defined at:
  9046 ;;		line 60 in file "../src/MCU_B1.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;		None
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;		None
  9051 ;; Return value:  Size  Location     Type
  9052 ;;		None               void
  9053 ;; Registers used:
  9054 ;;		wreg, status,2
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;Total ram usage:        0 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    5
  9067 ;; This function calls:
  9068 ;;		Nothing
  9069 ;; This function is called by:
  9070 ;;		_Mcu_Initialization
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _IO_Set
  9076  1221                     _IO_Set:	
  9077                           
  9078                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9079                           
  9080                           ;incstack = 0
  9081                           ; Regs used in _IO_Set: [wreg+status,2]
  9082  1221  3077               	movlw	119
  9083  1222  0021               	movlb	1	; select bank1
  9084  1223  008C               	movwf	12	;volatile
  9085                           
  9086                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9087  1224  3007               	movlw	7
  9088  1225  008D               	movwf	13	;volatile
  9089                           
  9090                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9091  1226  300C               	movlw	12
  9092  1227  008E               	movwf	14	;volatile
  9093                           
  9094                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9095  1228  0022               	movlb	2	; select bank2
  9096  1229  018C               	clrf	12	;volatile
  9097                           
  9098                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9099  122A  3002               	movlw	2
  9100  122B  008D               	movwf	13	;volatile
  9101                           
  9102                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9103  122C  018E               	clrf	14	;volatile
  9104                           
  9105                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9106  122D  3022               	movlw	34
  9107  122E  0023               	movlb	3	; select bank3
  9108  122F  008C               	movwf	12	;volatile
  9109                           
  9110                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9111  1230  018D               	clrf	13	;volatile
  9112                           
  9113                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9114  1231  018E               	clrf	14	;volatile
  9115                           
  9116                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9117  1232  3077               	movlw	119
  9118  1233  0020               	movlb	0	; select bank0
  9119  1234  008C               	movwf	12	;volatile
  9120                           
  9121                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9122  1235  3007               	movlw	7
  9123  1236  008D               	movwf	13	;volatile
  9124                           
  9125                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9126  1237  300C               	movlw	12
  9127  1238  008E               	movwf	14	;volatile
  9128  1239  0008               	return
  9129  123A                     __end_of_IO_Set:	
  9130                           
  9131                           	psect	text44
  9132  1FBA                     __ptext44:	
  9133 ;; *************** function _IOC_Set *****************
  9134 ;; Defined at:
  9135 ;;		line 366 in file "../src/MCU_B1.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;		None               void
  9142 ;; Registers used:
  9143 ;;		wreg, status,2
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    5
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_Mcu_Initialization
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function _IOC_Set
  9165  1FBA                     _IOC_Set:	
  9166                           
  9167                           ;MCU_B1.c: 367: WPUB2 = 0;
  9168                           
  9169                           ;incstack = 0
  9170                           ; Regs used in _IOC_Set: [wreg+status,2]
  9171  1FBA  0024               	movlb	4	; select bank4
  9172  1FBB  110D               	bcf	13,2	;volatile
  9173                           
  9174                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9175  1FBC  0027               	movlb	7	; select bank7
  9176  1FBD  0194               	clrf	20	;volatile
  9177                           
  9178                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9179  1FBE  3004               	movlw	4
  9180  1FBF  0095               	movwf	21	;volatile
  9181                           
  9182                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9183  1FC0  0196               	clrf	22	;volatile
  9184                           
  9185                           ;MCU_B1.c: 394: IOCIE = 1;
  9186  1FC1  158B               	bsf	11,3	;volatile
  9187                           
  9188                           ;MCU_B1.c: 395: IOCIF = 0;
  9189  1FC2  100B               	bcf	11,0	;volatile
  9190                           
  9191                           ;MCU_B1.c: 396: PEIE = 1;
  9192  1FC3  170B               	bsf	11,6	;volatile
  9193                           
  9194                           ;MCU_B1.c: 397: GIE = 1;
  9195  1FC4  178B               	bsf	11,7	;volatile
  9196  1FC5  0008               	return
  9197  1FC6                     __end_of_IOC_Set:	
  9198                           
  9199                           	psect	text45
  9200  1F0D                     __ptext45:	
  9201 ;; *************** function _Fosc_Set *****************
  9202 ;; Defined at:
  9203 ;;		line 56 in file "../src/MCU_B1.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;		None
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;		None               void
  9210 ;; Registers used:
  9211 ;;		wreg
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        0 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; Hardware stack levels required when called:    5
  9224 ;; This function calls:
  9225 ;;		Nothing
  9226 ;; This function is called by:
  9227 ;;		_Mcu_Initialization
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _Fosc_Set
  9233  1F0D                     _Fosc_Set:	
  9234                           
  9235                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _Fosc_Set: [wreg]
  9239  1F0D  3078               	movlw	120
  9240  1F0E  0021               	movlb	1	; select bank1
  9241  1F0F  0099               	movwf	25	;volatile
  9242  1F10  0008               	return
  9243  1F11                     __end_of_Fosc_Set:	
  9244                           
  9245                           	psect	text46
  9246  1F26                     __ptext46:	
  9247 ;; *************** function _ADC_Set *****************
  9248 ;; Defined at:
  9249 ;;		line 420 in file "../src/MCU_B1.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;		None
  9254 ;; Return value:  Size  Location     Type
  9255 ;;		None               void
  9256 ;; Registers used:
  9257 ;;		wreg
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;Total ram usage:        0 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    5
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_Mcu_Initialization
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           
  9278                           ;psect for function _ADC_Set
  9279  1F26                     _ADC_Set:	
  9280                           
  9281                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9282                           
  9283                           ;incstack = 0
  9284                           ; Regs used in _ADC_Set: [wreg]
  9285  1F26  30F3               	movlw	243
  9286  1F27  0021               	movlb	1	; select bank1
  9287  1F28  009E               	movwf	30	;volatile
  9288                           
  9289                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9290  1F29  30C1               	movlw	193
  9291  1F2A  0022               	movlb	2	; select bank2
  9292  1F2B  0097               	movwf	23	;volatile
  9293  1F2C  0008               	return
  9294  1F2D                     __end_of_ADC_Set:	
  9295                           
  9296                           	psect	text47
  9297  1FAE                     __ptext47:	
  9298 ;; *************** function _LED_Main *****************
  9299 ;; Defined at:
  9300 ;;		line 47 in file "../src/LED_B1.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;		None
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;		None
  9305 ;; Return value:  Size  Location     Type
  9306 ;;		None               void
  9307 ;; Registers used:
  9308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;Total ram usage:        0 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    7
  9321 ;; This function calls:
  9322 ;;		_setLED_Main
  9323 ;; This function is called by:
  9324 ;;		_main
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           
  9329                           ;psect for function _LED_Main
  9330  1FAE                     _LED_Main:	
  9331                           
  9332                           ;LED_B1.c: 49: setLED_Main(1);
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9336  1FAE  3001               	movlw	1
  9337  1FAF  3196  26A8  319F   	fcall	_setLED_Main
  9338                           
  9339                           ;LED_B1.c: 52: setLED_Main(2);
  9340  1FB2  3002               	movlw	2
  9341  1FB3  3196  26A8  319F   	fcall	_setLED_Main
  9342                           
  9343                           ;LED_B1.c: 58: setLED_Main(99);
  9344  1FB6  3063               	movlw	99
  9345  1FB7  3196  26A8         	fcall	_setLED_Main
  9346  1FB9  0008               	return
  9347  1FBA                     __end_of_LED_Main:	
  9348                           
  9349                           	psect	text48
  9350  16A8                     __ptext48:	
  9351 ;; *************** function _setLED_Main *****************
  9352 ;; Defined at:
  9353 ;;		line 216 in file "../src/LED_B1.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;  led             1    wreg     unsigned char 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  led             1    4[BANK0 ] unsigned char 
  9358 ;; Return value:  Size  Location     Type
  9359 ;;		None               void
  9360 ;; Registers used:
  9361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;Total ram usage:        3 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    6
  9374 ;; This function calls:
  9375 ;;		_LedPointSelect
  9376 ;; This function is called by:
  9377 ;;		_LED_Main
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           
  9382                           ;psect for function _setLED_Main
  9383  16A8                     _setLED_Main:	
  9384                           
  9385                           ;incstack = 0
  9386                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9387                           ;setLED_Main@led stored from wreg
  9388  16A8  0020               	movlb	0	; select bank0
  9389  16A9  00A4               	movwf	setLED_Main@led
  9390                           
  9391                           ;LED_B1.c: 217: LedPointSelect(led);
  9392  16AA  0824               	movf	setLED_Main@led,w
  9393  16AB  3193  2307  3196   	fcall	_LedPointSelect
  9394                           
  9395                           ;LED_B1.c: 218: if (LED->GO == 1) {
  9396  16AE  0021               	movlb	1	; select bank1
  9397  16AF  0856               	movf	_LED^(0+128),w
  9398  16B0  0086               	movwf	6
  9399  16B1  3001               	movlw	1	; select bank2/3
  9400  16B2  0087               	movwf	7
  9401  16B3  1C81               	btfss	1,1
  9402  16B4  0008               	return
  9403                           
  9404                           ;LED_B1.c: 219: LED->Time++;
  9405  16B5  0A56               	incf	_LED^(0+128),w
  9406  16B6  0086               	movwf	6
  9407  16B7  3001               	movlw	1	; select bank2/3
  9408  16B8  0087               	movwf	7
  9409  16B9  3001               	movlw	1
  9410  16BA  0781               	addwf	1,f
  9411  16BB  3141               	addfsr 1,1
  9412  16BC  1803               	skipnc
  9413  16BD  0A81               	incf	1,f
  9414                           
  9415                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
  9416  16BE  0A56               	incf	_LED^(0+128),w
  9417  16BF  0086               	movwf	6
  9418  16C0  3001               	movlw	1	; select bank2/3
  9419  16C1  0087               	movwf	7
  9420  16C2  3F40               	moviw [0]fsr1
  9421  16C3  0020               	movlb	0	; select bank0
  9422  16C4  00A2               	movwf	??_setLED_Main
  9423  16C5  3F41               	moviw [1]fsr1
  9424  16C6  00A3               	movwf	??_setLED_Main+1
  9425  16C7  3000               	movlw	0
  9426  16C8  0223               	subwf	??_setLED_Main+1,w
  9427  16C9  3032               	movlw	50
  9428  16CA  1903               	skipnz
  9429  16CB  0222               	subwf	??_setLED_Main,w
  9430  16CC  1C03               	skipc
  9431  16CD  0008               	return
  9432                           
  9433                           ;LED_B1.c: 221: LED->Time = 0;
  9434  16CE  0021               	movlb	1	; select bank1
  9435  16CF  0A56               	incf	_LED^(0+128),w
  9436  16D0  0086               	movwf	6
  9437  16D1  3001               	movlw	1	; select bank2/3
  9438  16D2  0087               	movwf	7
  9439  16D3  3000               	movlw	0
  9440  16D4  3FC0               	movwi [0]fsr1
  9441  16D5  3FC1               	movwi [1]fsr1
  9442                           
  9443                           ;LED_B1.c: 223: if (led == 1) {
  9444  16D6  0020               	movlb	0	; select bank0
  9445  16D7  0824               	movf	setLED_Main@led,w
  9446  16D8  3A01               	xorlw	1
  9447                           
  9448                           ;LED_B1.c: 224: RA3 = RA3 == 1 ? 0 : 1;
  9449  16D9  3008               	movlw	8
  9450  16DA  1903               	btfsc	3,2
  9451  16DB  068C               	xorwf	12,f
  9452                           
  9453                           ;LED_B1.c: 225: }
  9454                           ;LED_B1.c: 228: if (led == 2) {
  9455  16DC  0824               	movf	setLED_Main@led,w
  9456  16DD  3A02               	xorlw	2
  9457  16DE  1D03               	skipz
  9458  16DF  2EE2               	goto	l994
  9459                           
  9460                           ;LED_B1.c: 229: RC7 = RC7 == 1 ? 0 : 1;
  9461  16E0  3080               	movlw	128
  9462  16E1  068E               	xorwf	14,f
  9463  16E2                     l994:	
  9464                           
  9465                           ;LED_B1.c: 230: }
  9466                           ;LED_B1.c: 238: if (led == 99) {
  9467  16E2  0824               	movf	setLED_Main@led,w
  9468  16E3  3A63               	xorlw	99
  9469  16E4  1D03               	skipz
  9470  16E5  0008               	return
  9471                           
  9472                           ;LED_B1.c: 239: RB5 = RB5 == 1 ? 0 : 1;
  9473  16E6  3020               	movlw	32
  9474  16E7  068D               	xorwf	13,f
  9475  16E8  0008               	return
  9476  16E9                     __end_of_setLED_Main:	
  9477                           
  9478                           	psect	text49
  9479  1FA2                     __ptext49:	
  9480 ;; *************** function _LED_Initialization *****************
  9481 ;; Defined at:
  9482 ;;		line 31 in file "../src/LED_B1.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    8
  9503 ;; This function calls:
  9504 ;;		_setLED_Initialization
  9505 ;; This function is called by:
  9506 ;;		_main
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _LED_Initialization
  9512  1FA2                     _LED_Initialization:	
  9513                           
  9514                           ;LED_B1.c: 33: setLED_Initialization(1);
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9518  1FA2  3001               	movlw	1
  9519  1FA3  3190  20CB  319F   	fcall	_setLED_Initialization
  9520                           
  9521                           ;LED_B1.c: 36: setLED_Initialization(2);
  9522  1FA6  3002               	movlw	2
  9523  1FA7  3190  20CB  319F   	fcall	_setLED_Initialization
  9524                           
  9525                           ;LED_B1.c: 42: setLED_Initialization(99);
  9526  1FAA  3063               	movlw	99
  9527  1FAB  3190  20CB         	fcall	_setLED_Initialization
  9528  1FAD  0008               	return
  9529  1FAE                     __end_of_LED_Initialization:	
  9530                           
  9531                           	psect	text50
  9532  10CB                     __ptext50:	
  9533 ;; *************** function _setLED_Initialization *****************
  9534 ;; Defined at:
  9535 ;;		line 66 in file "../src/LED_B1.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;  led             1    wreg     unsigned char 
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;  led             1    4[BANK0 ] unsigned char 
  9540 ;; Return value:  Size  Location     Type
  9541 ;;		None               void
  9542 ;; Registers used:
  9543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;Total ram usage:        1 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    7
  9556 ;; This function calls:
  9557 ;;		_LedPointSelect
  9558 ;;		_setLED
  9559 ;; This function is called by:
  9560 ;;		_LED_Initialization
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _setLED_Initialization
  9566  10CB                     _setLED_Initialization:	
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9570                           ;setLED_Initialization@led stored from wreg
  9571  10CB  0020               	movlb	0	; select bank0
  9572  10CC  00A4               	movwf	setLED_Initialization@led
  9573                           
  9574                           ;LED_B1.c: 67: LedPointSelect(led);
  9575  10CD  0824               	movf	setLED_Initialization@led,w
  9576  10CE  3193  2307  3190   	fcall	_LedPointSelect
  9577                           
  9578                           ;LED_B1.c: 68: LED->Enable = 1;
  9579  10D1  0021               	movlb	1	; select bank1
  9580  10D2  0856               	movf	_LED^(0+128),w
  9581  10D3  0086               	movwf	6
  9582  10D4  3001               	movlw	1	; select bank2/3
  9583  10D5  0087               	movwf	7
  9584  10D6  1401               	bsf	1,0
  9585                           
  9586                           ;LED_B1.c: 69: setLED(led, 0);
  9587  10D7  0020               	movlb	0	; select bank0
  9588  10D8  01A2               	clrf	setLED@command
  9589  10D9  0824               	movf	setLED_Initialization@led,w
  9590  10DA  3188  2092         	fcall	_setLED
  9591  10DC  0008               	return
  9592  10DD                     __end_of_setLED_Initialization:	
  9593                           
  9594                           	psect	text51
  9595  1586                     __ptext51:	
  9596 ;; *************** function _Flash_Memory_Main *****************
  9597 ;; Defined at:
  9598 ;;		line 901 in file "../src/MCU_B1.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;		None
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;		None
  9603 ;; Return value:  Size  Location     Type
  9604 ;;		None               void
  9605 ;; Registers used:
  9606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;Total ram usage:        1 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    8
  9619 ;; This function calls:
  9620 ;;		_Flash_Memory_Modify
  9621 ;;		_getMain_LightsStatus
  9622 ;; This function is called by:
  9623 ;;		_main
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           
  9628                           ;psect for function _Flash_Memory_Main
  9629  1586                     _Flash_Memory_Main:	
  9630                           
  9631                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
  9632                           
  9633                           ;incstack = 0
  9634                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9635  1586  0023               	movlb	3	; select bank3
  9636  1587  1C44               	btfss	(_Memory^(0+384)+36),0
  9637  1588  0008               	return
  9638                           
  9639                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
  9640  1589  3194  24C1  3195   	fcall	_getMain_LightsStatus
  9641  158C  3A00               	xorlw	0
  9642  158D  3000               	movlw	0
  9643  158E  1903               	skipnz
  9644  158F  3001               	movlw	1
  9645  1590  0020               	movlb	0	; select bank0
  9646  1591  00A9               	movwf	??_Flash_Memory_Main
  9647  1592  0DA9               	rlf	??_Flash_Memory_Main,f
  9648  1593  0023               	movlb	3	; select bank3
  9649  1594  0844               	movf	(_Memory^(0+384)+36),w
  9650  1595  0020               	movlb	0	; select bank0
  9651  1596  0629               	xorwf	??_Flash_Memory_Main,w
  9652  1597  39FD               	andlw	-3
  9653  1598  0629               	xorwf	??_Flash_Memory_Main,w
  9654  1599  0023               	movlb	3	; select bank3
  9655  159A  00C4               	movwf	(_Memory^(0+384)+36)
  9656                           
  9657                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
  9658  159B  1CC4               	btfss	(_Memory^(0+384)+36),1
  9659  159C  2DB6               	goto	l1258
  9660                           
  9661                           ;MCU_B1.c: 905: Memory.Runtime = 1;
  9662  159D  15C4               	bsf	(_Memory^(0+384)+36),3
  9663                           
  9664                           ;MCU_B1.c: 906: Memory.Time++;
  9665  159E  3001               	movlw	1
  9666  159F  07C2               	addwf	(_Memory^(0+384)+34),f
  9667  15A0  3000               	movlw	0
  9668  15A1  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9669                           
  9670                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
  9671  15A2  3022               	movlw	34
  9672  15A3  3EA0               	addlw	_Memory& (0+255)
  9673  15A4  0086               	movwf	6
  9674  15A5  3001               	movlw	1	; select bank3/4
  9675  15A6  0087               	movwf	7
  9676  15A7  3F40               	moviw [0]fsr1
  9677  15A8  3A19               	xorlw	25
  9678  15A9  1D03               	skipz
  9679  15AA  2DAD               	goto	u9375
  9680  15AB  3F41               	moviw [1]fsr1
  9681  15AC  3A00               	xorlw	0
  9682  15AD                     u9375:	
  9683  15AD  1D03               	skipz
  9684  15AE  0008               	return
  9685                           
  9686                           ;MCU_B1.c: 908: Memory.Time = 0;
  9687  15AF  01C2               	clrf	(_Memory^(0+384)+34)
  9688  15B0  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9689                           
  9690                           ;MCU_B1.c: 909: Memory.Modify = 0;
  9691  15B1  1044               	bcf	(_Memory^(0+384)+36),0
  9692                           
  9693                           ;MCU_B1.c: 910: Memory.GO = 0;
  9694  15B2  10C4               	bcf	(_Memory^(0+384)+36),1
  9695                           
  9696                           ;MCU_B1.c: 911: Flash_Memory_Modify();
  9697  15B3  3188  2044         	fcall	_Flash_Memory_Modify
  9698                           
  9699                           ;MCU_B1.c: 912: }
  9700                           ;MCU_B1.c: 913: } else {
  9701  15B5  0008               	return
  9702  15B6                     l1258:	
  9703                           
  9704                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
  9705  15B6  1DC4               	btfss	(_Memory^(0+384)+36),3
  9706  15B7  0008               	return
  9707                           
  9708                           ;MCU_B1.c: 915: Memory.Runtime = 0;
  9709  15B8  11C4               	bcf	(_Memory^(0+384)+36),3
  9710                           
  9711                           ;MCU_B1.c: 916: Memory.Time = 0;
  9712  15B9  01C2               	clrf	(_Memory^(0+384)+34)
  9713  15BA  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9714  15BB  0008               	return
  9715  15BC                     __end_of_Flash_Memory_Main:	
  9716                           
  9717                           	psect	text52
  9718  14C1                     __ptext52:	
  9719 ;; *************** function _getMain_LightsStatus *****************
  9720 ;; Defined at:
  9721 ;;		line 334 in file "../src/main_B1.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  i               2    6[BANK0 ] int 
  9726 ;;  status          1    8[BANK0 ] unsigned char 
  9727 ;;  count           1    5[BANK0 ] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  1    wreg      unsigned char 
  9730 ;; Registers used:
  9731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;Total ram usage:        5 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    7
  9744 ;; This function calls:
  9745 ;;		_getDimmerLights_Status
  9746 ;; This function is called by:
  9747 ;;		_Flash_Memory_Main
  9748 ;;		_setMain_Exception
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           
  9753                           ;psect for function _getMain_LightsStatus
  9754  14C1                     _getMain_LightsStatus:	
  9755                           
  9756                           ;main_B1.c: 335: char status = 0;
  9757                           
  9758                           ;incstack = 0
  9759                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9760  14C1  0020               	movlb	0	; select bank0
  9761  14C2  01A8               	clrf	getMain_LightsStatus@status
  9762                           
  9763                           ;main_B1.c: 341: char count = 2;
  9764  14C3  3002               	movlw	2
  9765  14C4  00A4               	movwf	??_getMain_LightsStatus
  9766  14C5  0824               	movf	??_getMain_LightsStatus,w
  9767  14C6  00A5               	movwf	getMain_LightsStatus@count
  9768                           
  9769                           ;main_B1.c: 347: for (int i = 0; i < count; i++) {
  9770  14C7  01A6               	clrf	getMain_LightsStatus@i
  9771  14C8  01A7               	clrf	getMain_LightsStatus@i+1
  9772  14C9                     l8242:	
  9773  14C9  0827               	movf	getMain_LightsStatus@i+1,w
  9774  14CA  3A80               	xorlw	128
  9775  14CB  00A4               	movwf	??_getMain_LightsStatus
  9776  14CC  3080               	movlw	128
  9777  14CD  0224               	subwf	??_getMain_LightsStatus,w
  9778  14CE  1D03               	skipz
  9779  14CF  2CD2               	goto	u8415
  9780  14D0  0825               	movf	getMain_LightsStatus@count,w
  9781  14D1  0226               	subwf	getMain_LightsStatus@i,w
  9782  14D2                     u8415:	
  9783  14D2  1803               	btfsc	3,0
  9784  14D3  2CEA               	goto	l8244
  9785                           
  9786                           ;main_B1.c: 348: if (status == 0) {
  9787  14D4  0020               	movlb	0	; select bank0
  9788  14D5  08A8               	movf	getMain_LightsStatus@status,f
  9789  14D6  1D03               	skipz
  9790  14D7  2CE5               	goto	l8240
  9791                           
  9792                           ;main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
  9793  14D8  0826               	movf	getMain_LightsStatus@i,w
  9794  14D9  3E01               	addlw	1
  9795  14DA  319F  27F0  3194   	fcall	_getDimmerLights_Status
  9796  14DD  3A01               	xorlw	1
  9797  14DE  3000               	movlw	0
  9798  14DF  1903               	skipnz
  9799  14E0  3001               	movlw	1
  9800  14E1  0020               	movlb	0	; select bank0
  9801  14E2  00A4               	movwf	??_getMain_LightsStatus
  9802  14E3  0824               	movf	??_getMain_LightsStatus,w
  9803  14E4  00A8               	movwf	getMain_LightsStatus@status
  9804  14E5                     l8240:	
  9805  14E5  3001               	movlw	1
  9806  14E6  07A6               	addwf	getMain_LightsStatus@i,f
  9807  14E7  3000               	movlw	0
  9808  14E8  3DA7               	addwfc	getMain_LightsStatus@i+1,f
  9809  14E9  2CC9               	goto	l8242
  9810  14EA                     l8244:	
  9811                           
  9812                           ;main_B1.c: 355: }
  9813                           ;main_B1.c: 356: }
  9814                           ;main_B1.c: 357: return status;
  9815  14EA  0020               	movlb	0	; select bank0
  9816  14EB  0828               	movf	getMain_LightsStatus@status,w
  9817  14EC  0008               	return
  9818  14ED                     __end_of_getMain_LightsStatus:	
  9819                           
  9820                           	psect	text53
  9821  0844                     __ptext53:	
  9822 ;; *************** function _Flash_Memory_Modify *****************
  9823 ;; Defined at:
  9824 ;;		line 974 in file "../src/MCU_B1.c"
  9825 ;; Parameters:    Size  Location     Type
  9826 ;;		None
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;  i               1    5[BANK0 ] unsigned char 
  9829 ;; Return value:  Size  Location     Type
  9830 ;;		None               void
  9831 ;; Registers used:
  9832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9833 ;; Tracked objects:
  9834 ;;		On entry : 0/0
  9835 ;;		On exit  : 0/0
  9836 ;;		Unchanged: 0/0
  9837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;Total ram usage:        2 bytes
  9843 ;; Hardware stack levels used:    1
  9844 ;; Hardware stack levels required when called:    7
  9845 ;; This function calls:
  9846 ;;		_Flash_Memory_Erasing
  9847 ;;		_Flash_Memory_Read
  9848 ;;		_Flash_Memory_Write
  9849 ;;		_setMemory_Data
  9850 ;; This function is called by:
  9851 ;;		_Flash_Memory_Main
  9852 ;; This function uses a non-reentrant model
  9853 ;;
  9854                           
  9855                           
  9856                           ;psect for function _Flash_Memory_Modify
  9857  0844                     _Flash_Memory_Modify:	
  9858                           
  9859                           ;MCU_B1.c: 975: char i = 0;
  9860                           
  9861                           ;incstack = 0
  9862                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9863  0844  0020               	movlb	0	; select bank0
  9864  0845  01A5               	clrf	Flash_Memory_Modify@i
  9865                           
  9866                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
  9867  0846  01A5               	clrf	Flash_Memory_Modify@i
  9868  0847  3020               	movlw	32
  9869  0848  0225               	subwf	Flash_Memory_Modify@i,w
  9870  0849  1803               	btfsc	3,0
  9871  084A  2860               	goto	l8442
  9872  084B                     l8436:	
  9873                           
  9874                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
  9875  084B  0825               	movf	Flash_Memory_Modify@i,w
  9876  084C  3192  2254  3188   	fcall	_Flash_Memory_Read
  9877  084F  0020               	movlb	0	; select bank0
  9878  0850  00A4               	movwf	??_Flash_Memory_Modify
  9879  0851  0825               	movf	Flash_Memory_Modify@i,w
  9880  0852  3EA0               	addlw	_Memory& (0+255)
  9881  0853  0086               	movwf	6
  9882  0854  3001               	movlw	1	; select bank3/4
  9883  0855  0087               	movwf	7
  9884  0856  0824               	movf	??_Flash_Memory_Modify,w
  9885  0857  0081               	movwf	1
  9886  0858  3001               	movlw	1
  9887  0859  00A4               	movwf	??_Flash_Memory_Modify
  9888  085A  0824               	movf	??_Flash_Memory_Modify,w
  9889  085B  07A5               	addwf	Flash_Memory_Modify@i,f
  9890  085C  3020               	movlw	32
  9891  085D  0225               	subwf	Flash_Memory_Modify@i,w
  9892  085E  1C03               	skipc
  9893  085F  284B               	goto	l8436
  9894  0860                     l8442:	
  9895                           
  9896                           ;MCU_B1.c: 978: }
  9897                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
  9898  0860  086F               	movf	_product,w
  9899  0861  0086               	movwf	6
  9900  0862  3002               	movlw	2	; select bank4/5
  9901  0863  0087               	movwf	7
  9902  0864  3002               	movlw	2	; select bank4/5
  9903  0865  3F4C               	moviw [12]fsr1
  9904  0866  00A0               	movwf	setMemory_Data@data
  9905  0867  3000               	movlw	0
  9906  0868  319F  278A  3188   	fcall	_setMemory_Data
  9907                           
  9908                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
  9909  086B  0020               	movlb	0	; select bank0
  9910  086C  086F               	movf	_product,w
  9911  086D  0086               	movwf	6
  9912  086E  3002               	movlw	2	; select bank4/5
  9913  086F  0087               	movwf	7
  9914  0870  3002               	movlw	2	; select bank4/5
  9915  0871  3F4D               	moviw [13]fsr1
  9916  0872  00A0               	movwf	setMemory_Data@data
  9917  0873  3001               	movlw	1
  9918  0874  319F  278A  3188   	fcall	_setMemory_Data
  9919                           
  9920                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
  9921  0877  0020               	movlb	0	; select bank0
  9922  0878  086F               	movf	_product,w
  9923  0879  0086               	movwf	6
  9924  087A  3002               	movlw	2	; select bank4/5
  9925  087B  0087               	movwf	7
  9926  087C  3002               	movlw	2	; select bank4/5
  9927  087D  3F4E               	moviw [14]fsr1
  9928  087E  00A0               	movwf	setMemory_Data@data
  9929  087F  3002               	movlw	2
  9930  0880  319F  278A  3188   	fcall	_setMemory_Data
  9931                           
  9932                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
  9933  0883  0023               	movlb	3	; select bank3
  9934  0884  1D44               	btfss	(_Memory^(0+384)+36),2
  9935  0885  288A               	goto	l1281
  9936                           
  9937                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
  9938  0886  1144               	bcf	(_Memory^(0+384)+36),2
  9939                           
  9940                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
  9941  0887  0021               	movlb	1	; select bank1
  9942  0888  11A0               	bcf	_myMain^(0+128),3
  9943                           
  9944                           ;MCU_B1.c: 990: myMain.First = 0;
  9945  0889  12A0               	bcf	_myMain^(0+128),5
  9946  088A                     l1281:	
  9947                           
  9948                           ;MCU_B1.c: 992: }
  9949                           ;MCU_B1.c: 993: GIE = 0;
  9950  088A  138B               	bcf	11,7	;volatile
  9951                           
  9952                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
  9953  088B  319F  2796  3188   	fcall	_Flash_Memory_Erasing
  9954                           
  9955                           ;MCU_B1.c: 995: Flash_Memory_Write();
  9956  088E  3194  24ED         	fcall	_Flash_Memory_Write
  9957                           
  9958                           ;MCU_B1.c: 996: GIE = 1;
  9959  0890  178B               	bsf	11,7	;volatile
  9960  0891  0008               	return
  9961  0892                     __end_of_Flash_Memory_Modify:	
  9962                           
  9963                           	psect	text54
  9964  1F96                     __ptext54:	
  9965 ;; *************** function _Flash_Memory_Erasing *****************
  9966 ;; Defined at:
  9967 ;;		line 963 in file "../src/MCU_B1.c"
  9968 ;; Parameters:    Size  Location     Type
  9969 ;;		None
  9970 ;; Auto vars:     Size  Location     Type
  9971 ;;		None
  9972 ;; Return value:  Size  Location     Type
  9973 ;;		None               void
  9974 ;; Registers used:
  9975 ;;		wreg, status,2, status,0, pclath, cstack
  9976 ;; Tracked objects:
  9977 ;;		On entry : 0/0
  9978 ;;		On exit  : 0/0
  9979 ;;		Unchanged: 0/0
  9980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;Total ram usage:        0 bytes
  9986 ;; Hardware stack levels used:    1
  9987 ;; Hardware stack levels required when called:    6
  9988 ;; This function calls:
  9989 ;;		_Flash_Memory_Unlock
  9990 ;; This function is called by:
  9991 ;;		_Flash_Memory_Modify
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           
  9996                           ;psect for function _Flash_Memory_Erasing
  9997  1F96                     _Flash_Memory_Erasing:	
  9998                           
  9999                           ;MCU_B1.c: 964: CFGS = 0;
 10000                           
 10001                           ;incstack = 0
 10002                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10003  1F96  0023               	movlb	3	; select bank3
 10004  1F97  1315               	bcf	21,6	;volatile
 10005                           
 10006                           ;MCU_B1.c: 965: PMADRH = 0x30;
 10007  1F98  3030               	movlw	48
 10008  1F99  0092               	movwf	18	;volatile
 10009                           
 10010                           ;MCU_B1.c: 966: PMADRL = 0x00;
 10011  1F9A  0191               	clrf	17	;volatile
 10012                           
 10013                           ;MCU_B1.c: 967: FREE = 1;
 10014  1F9B  1615               	bsf	21,4	;volatile
 10015                           
 10016                           ;MCU_B1.c: 968: WREN = 1;
 10017  1F9C  1515               	bsf	21,2	;volatile
 10018                           
 10019                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 10020  1F9D  319F  2755         	fcall	_Flash_Memory_Unlock
 10021                           
 10022                           ;MCU_B1.c: 970: WREN = 0;
 10023  1F9F  0023               	movlb	3	; select bank3
 10024  1FA0  1115               	bcf	21,2	;volatile
 10025  1FA1  0008               	return
 10026  1FA2                     __end_of_Flash_Memory_Erasing:	
 10027                           
 10028                           	psect	text55
 10029  04D3                     __ptext55:	
 10030 ;; *************** function _Flash_Memory_Initialization *****************
 10031 ;; Defined at:
 10032 ;;		line 860 in file "../src/MCU_B1.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;		None
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;  i               1   62[BANK0 ] unsigned char 
 10037 ;; Return value:  Size  Location     Type
 10038 ;;		None               void
 10039 ;; Registers used:
 10040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;Total ram usage:        2 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:    8
 10053 ;; This function calls:
 10054 ;;		_Flash_Memory_Read
 10055 ;;		_Flash_Memory_Write
 10056 ;;		_setMemory_Data
 10057 ;;		_setPercentValue
 10058 ;; This function is called by:
 10059 ;;		_main
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _Flash_Memory_Initialization
 10065  04D3                     _Flash_Memory_Initialization:	
 10066                           
 10067                           ;MCU_B1.c: 861: char i = 0;
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10071  04D3  0020               	movlb	0	; select bank0
 10072  04D4  01DE               	clrf	Flash_Memory_Initialization@i
 10073                           
 10074                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 10075  04D5  301F               	movlw	31
 10076  04D6  3192  2254  3184   	fcall	_Flash_Memory_Read
 10077  04D9  3AAA               	xorlw	170
 10078  04DA  1D03               	skipz
 10079  04DB  2D45               	goto	l8724
 10080                           
 10081                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 10082  04DC  3000               	movlw	0
 10083  04DD  3192  2254  3184   	fcall	_Flash_Memory_Read
 10084  04E0  0020               	movlb	0	; select bank0
 10085  04E1  00DD               	movwf	??_Flash_Memory_Initialization
 10086  04E2  086F               	movf	_product,w
 10087  04E3  3E0C               	addlw	12
 10088  04E4  0086               	movwf	6
 10089  04E5  3002               	movlw	2	; select bank4/5
 10090  04E6  0087               	movwf	7
 10091  04E7  085D               	movf	??_Flash_Memory_Initialization,w
 10092  04E8  0081               	movwf	1
 10093                           
 10094                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 10095  04E9  3001               	movlw	1
 10096  04EA  3192  2254  3184   	fcall	_Flash_Memory_Read
 10097  04ED  0020               	movlb	0	; select bank0
 10098  04EE  00DD               	movwf	??_Flash_Memory_Initialization
 10099  04EF  086F               	movf	_product,w
 10100  04F0  3E0D               	addlw	13
 10101  04F1  0086               	movwf	6
 10102  04F2  3002               	movlw	2	; select bank4/5
 10103  04F3  0087               	movwf	7
 10104  04F4  085D               	movf	??_Flash_Memory_Initialization,w
 10105  04F5  0081               	movwf	1
 10106                           
 10107                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 10108  04F6  3002               	movlw	2
 10109  04F7  3192  2254  3184   	fcall	_Flash_Memory_Read
 10110  04FA  0020               	movlb	0	; select bank0
 10111  04FB  00DD               	movwf	??_Flash_Memory_Initialization
 10112  04FC  086F               	movf	_product,w
 10113  04FD  3E0E               	addlw	14
 10114  04FE  0086               	movwf	6
 10115  04FF  3002               	movlw	2	; select bank4/5
 10116  0500  0087               	movwf	7
 10117  0501  085D               	movf	??_Flash_Memory_Initialization,w
 10118  0502  0081               	movwf	1
 10119                           
 10120                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 10121  0503  3040               	movlw	64
 10122  0504  3197  272A  3184   	fcall	_setPercentValue
 10123  0507  0020               	movlb	0	; select bank0
 10124  0508  00DD               	movwf	??_Flash_Memory_Initialization
 10125  0509  085D               	movf	??_Flash_Memory_Initialization,w
 10126  050A  00DE               	movwf	Flash_Memory_Initialization@i
 10127                           
 10128                           ;MCU_B1.c: 872: product->Data[21] = i;
 10129  050B  085E               	movf	Flash_Memory_Initialization@i,w
 10130  050C  00DD               	movwf	??_Flash_Memory_Initialization
 10131  050D  086F               	movf	_product,w
 10132  050E  3E15               	addlw	21
 10133  050F  0086               	movwf	6
 10134  0510  3002               	movlw	2	; select bank4/5
 10135  0511  0087               	movwf	7
 10136  0512  085D               	movf	??_Flash_Memory_Initialization,w
 10137  0513  0081               	movwf	1
 10138                           
 10139                           ;MCU_B1.c: 873: product->Data[22] = i;
 10140  0514  085E               	movf	Flash_Memory_Initialization@i,w
 10141  0515  00DD               	movwf	??_Flash_Memory_Initialization
 10142  0516  086F               	movf	_product,w
 10143  0517  3E16               	addlw	22
 10144  0518  0086               	movwf	6
 10145  0519  3002               	movlw	2	; select bank4/5
 10146  051A  0087               	movwf	7
 10147  051B  085D               	movf	??_Flash_Memory_Initialization,w
 10148  051C  0081               	movwf	1
 10149                           
 10150                           ;MCU_B1.c: 874: product->Data[23] = i;
 10151  051D  085E               	movf	Flash_Memory_Initialization@i,w
 10152  051E  00DD               	movwf	??_Flash_Memory_Initialization
 10153  051F  086F               	movf	_product,w
 10154  0520  3E17               	addlw	23
 10155  0521  0086               	movwf	6
 10156  0522  3002               	movlw	2	; select bank4/5
 10157  0523  0087               	movwf	7
 10158  0524  085D               	movf	??_Flash_Memory_Initialization,w
 10159  0525  0081               	movwf	1
 10160                           
 10161                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10162  0526  086F               	movf	_product,w
 10163  0527  3E0C               	addlw	12
 10164  0528  0086               	movwf	6
 10165  0529  3002               	movlw	2	; select bank4/5
 10166  052A  0087               	movwf	7
 10167  052B  0801               	movf	1,w
 10168  052C  3AFF               	xorlw	255
 10169  052D  1D03               	skipz
 10170  052E  0008               	return
 10171  052F  086F               	movf	_product,w
 10172  0530  3E0D               	addlw	13
 10173  0531  0086               	movwf	6
 10174  0532  3002               	movlw	2	; select bank4/5
 10175  0533  0087               	movwf	7
 10176  0534  0801               	movf	1,w
 10177  0535  3AFF               	xorlw	255
 10178  0536  1D03               	skipz
 10179  0537  0008               	return
 10180  0538  086F               	movf	_product,w
 10181  0539  3E0E               	addlw	14
 10182  053A  0086               	movwf	6
 10183  053B  3002               	movlw	2	; select bank4/5
 10184  053C  0087               	movwf	7
 10185  053D  0801               	movf	1,w
 10186  053E  3AFF               	xorlw	255
 10187  053F  1D03               	skipz
 10188  0540  0008               	return
 10189                           
 10190                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 10191  0541  0021               	movlb	1	; select bank1
 10192  0542  15A0               	bsf	_myMain^(0+128),3
 10193                           
 10194                           ;MCU_B1.c: 878: myMain.First = 1;
 10195  0543  16A0               	bsf	_myMain^(0+128),5
 10196                           
 10197                           ;MCU_B1.c: 879: }
 10198                           ;MCU_B1.c: 880: } else {
 10199  0544  0008               	return
 10200  0545                     l8724:	
 10201                           
 10202                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 10203  0545  3040               	movlw	64
 10204  0546  3197  272A  3184   	fcall	_setPercentValue
 10205  0549  0020               	movlb	0	; select bank0
 10206  054A  00DD               	movwf	??_Flash_Memory_Initialization
 10207  054B  085D               	movf	??_Flash_Memory_Initialization,w
 10208  054C  00DE               	movwf	Flash_Memory_Initialization@i
 10209                           
 10210                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 10211  054D  30FF               	movlw	255
 10212  054E  00DD               	movwf	??_Flash_Memory_Initialization
 10213  054F  085D               	movf	??_Flash_Memory_Initialization,w
 10214  0550  00A0               	movwf	setMemory_Data@data
 10215  0551  3000               	movlw	0
 10216  0552  319F  278A  3184   	fcall	_setMemory_Data
 10217                           
 10218                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 10219  0555  30FF               	movlw	255
 10220  0556  0020               	movlb	0	; select bank0
 10221  0557  00DD               	movwf	??_Flash_Memory_Initialization
 10222  0558  085D               	movf	??_Flash_Memory_Initialization,w
 10223  0559  00A0               	movwf	setMemory_Data@data
 10224  055A  3001               	movlw	1
 10225  055B  319F  278A  3184   	fcall	_setMemory_Data
 10226                           
 10227                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 10228  055E  30FF               	movlw	255
 10229  055F  0020               	movlb	0	; select bank0
 10230  0560  00DD               	movwf	??_Flash_Memory_Initialization
 10231  0561  085D               	movf	??_Flash_Memory_Initialization,w
 10232  0562  00A0               	movwf	setMemory_Data@data
 10233  0563  3002               	movlw	2
 10234  0564  319F  278A  3184   	fcall	_setMemory_Data
 10235                           
 10236                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 10237  0567  30FF               	movlw	255
 10238  0568  0020               	movlb	0	; select bank0
 10239  0569  00DD               	movwf	??_Flash_Memory_Initialization
 10240  056A  085D               	movf	??_Flash_Memory_Initialization,w
 10241  056B  00A0               	movwf	setMemory_Data@data
 10242  056C  3003               	movlw	3
 10243  056D  319F  278A  3184   	fcall	_setMemory_Data
 10244                           
 10245                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 10246  0570  30FF               	movlw	255
 10247  0571  0020               	movlb	0	; select bank0
 10248  0572  00DD               	movwf	??_Flash_Memory_Initialization
 10249  0573  085D               	movf	??_Flash_Memory_Initialization,w
 10250  0574  00A0               	movwf	setMemory_Data@data
 10251  0575  3004               	movlw	4
 10252  0576  319F  278A  3184   	fcall	_setMemory_Data
 10253                           
 10254                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 10255  0579  30FF               	movlw	255
 10256  057A  0020               	movlb	0	; select bank0
 10257  057B  00DD               	movwf	??_Flash_Memory_Initialization
 10258  057C  085D               	movf	??_Flash_Memory_Initialization,w
 10259  057D  00A0               	movwf	setMemory_Data@data
 10260  057E  3005               	movlw	5
 10261  057F  319F  278A  3184   	fcall	_setMemory_Data
 10262                           
 10263                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 10264  0582  30AA               	movlw	170
 10265  0583  0020               	movlb	0	; select bank0
 10266  0584  00DD               	movwf	??_Flash_Memory_Initialization
 10267  0585  085D               	movf	??_Flash_Memory_Initialization,w
 10268  0586  00A0               	movwf	setMemory_Data@data
 10269  0587  301F               	movlw	31
 10270  0588  319F  278A  3184   	fcall	_setMemory_Data
 10271                           
 10272                           ;MCU_B1.c: 889: product->Data[21] = i;
 10273  058B  0020               	movlb	0	; select bank0
 10274  058C  085E               	movf	Flash_Memory_Initialization@i,w
 10275  058D  00DD               	movwf	??_Flash_Memory_Initialization
 10276  058E  086F               	movf	_product,w
 10277  058F  3E15               	addlw	21
 10278  0590  0086               	movwf	6
 10279  0591  3002               	movlw	2	; select bank4/5
 10280  0592  0087               	movwf	7
 10281  0593  085D               	movf	??_Flash_Memory_Initialization,w
 10282  0594  0081               	movwf	1
 10283                           
 10284                           ;MCU_B1.c: 890: product->Data[22] = i;
 10285  0595  085E               	movf	Flash_Memory_Initialization@i,w
 10286  0596  00DD               	movwf	??_Flash_Memory_Initialization
 10287  0597  086F               	movf	_product,w
 10288  0598  3E16               	addlw	22
 10289  0599  0086               	movwf	6
 10290  059A  3002               	movlw	2	; select bank4/5
 10291  059B  0087               	movwf	7
 10292  059C  085D               	movf	??_Flash_Memory_Initialization,w
 10293  059D  0081               	movwf	1
 10294                           
 10295                           ;MCU_B1.c: 891: product->Data[23] = i;
 10296  059E  085E               	movf	Flash_Memory_Initialization@i,w
 10297  059F  00DD               	movwf	??_Flash_Memory_Initialization
 10298  05A0  086F               	movf	_product,w
 10299  05A1  3E17               	addlw	23
 10300  05A2  0086               	movwf	6
 10301  05A3  3002               	movlw	2	; select bank4/5
 10302  05A4  0087               	movwf	7
 10303  05A5  085D               	movf	??_Flash_Memory_Initialization,w
 10304  05A6  0081               	movwf	1
 10305                           
 10306                           ;MCU_B1.c: 892: GIE = 0;
 10307  05A7  138B               	bcf	11,7	;volatile
 10308                           
 10309                           ;MCU_B1.c: 893: Flash_Memory_Write();
 10310  05A8  3194  24ED         	fcall	_Flash_Memory_Write
 10311                           
 10312                           ;MCU_B1.c: 894: GIE = 1;
 10313  05AA  178B               	bsf	11,7	;volatile
 10314                           
 10315                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 10316  05AB  0021               	movlb	1	; select bank1
 10317  05AC  15A0               	bsf	_myMain^(0+128),3
 10318                           
 10319                           ;MCU_B1.c: 896: myMain.First = 1;
 10320  05AD  16A0               	bsf	_myMain^(0+128),5
 10321  05AE  0008               	return
 10322  05AF                     __end_of_Flash_Memory_Initialization:	
 10323                           
 10324                           	psect	text56
 10325  1F8A                     __ptext56:	
 10326 ;; *************** function _setMemory_Data *****************
 10327 ;; Defined at:
 10328 ;;		line 1011 in file "../src/MCU_B1.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;  address         1    wreg     unsigned char 
 10331 ;;  data            1    0[BANK0 ] unsigned char 
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;  address         1    2[BANK0 ] unsigned char 
 10334 ;; Return value:  Size  Location     Type
 10335 ;;		None               void
 10336 ;; Registers used:
 10337 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;Total ram usage:        3 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    5
 10350 ;; This function calls:
 10351 ;;		Nothing
 10352 ;; This function is called by:
 10353 ;;		_Flash_Memory_Initialization
 10354 ;;		_Flash_Memory_Modify
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function _setMemory_Data
 10360  1F8A                     _setMemory_Data:	
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10364                           ;setMemory_Data@address stored from wreg
 10365  1F8A  0020               	movlb	0	; select bank0
 10366  1F8B  00A2               	movwf	setMemory_Data@address
 10367                           
 10368                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 10369  1F8C  0820               	movf	setMemory_Data@data,w
 10370  1F8D  00A1               	movwf	??_setMemory_Data
 10371  1F8E  0822               	movf	setMemory_Data@address,w
 10372  1F8F  3EA0               	addlw	_Memory& (0+255)
 10373  1F90  0086               	movwf	6
 10374  1F91  3001               	movlw	1	; select bank3/4
 10375  1F92  0087               	movwf	7
 10376  1F93  0821               	movf	??_setMemory_Data,w
 10377  1F94  0081               	movwf	1
 10378  1F95  0008               	return
 10379  1F96                     __end_of_setMemory_Data:	
 10380                           
 10381                           	psect	text57
 10382  14ED                     __ptext57:	
 10383 ;; *************** function _Flash_Memory_Write *****************
 10384 ;; Defined at:
 10385 ;;		line 944 in file "../src/MCU_B1.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  i               1    1[BANK0 ] unsigned char 
 10390 ;; Return value:  Size  Location     Type
 10391 ;;		None               void
 10392 ;; Registers used:
 10393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10394 ;; Tracked objects:
 10395 ;;		On entry : 0/0
 10396 ;;		On exit  : 0/0
 10397 ;;		Unchanged: 0/0
 10398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;Total ram usage:        2 bytes
 10404 ;; Hardware stack levels used:    1
 10405 ;; Hardware stack levels required when called:    6
 10406 ;; This function calls:
 10407 ;;		_Flash_Memory_Unlock
 10408 ;; This function is called by:
 10409 ;;		_Flash_Memory_Initialization
 10410 ;;		_Flash_Memory_Modify
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           
 10415                           ;psect for function _Flash_Memory_Write
 10416  14ED                     _Flash_Memory_Write:	
 10417                           
 10418                           ;MCU_B1.c: 945: char i = 0;
 10419                           
 10420                           ;incstack = 0
 10421                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10422  14ED  0020               	movlb	0	; select bank0
 10423  14EE  01A1               	clrf	Flash_Memory_Write@i
 10424                           
 10425                           ;MCU_B1.c: 946: CFGS = 0;
 10426  14EF  0023               	movlb	3	; select bank3
 10427  14F0  1315               	bcf	21,6	;volatile
 10428                           
 10429                           ;MCU_B1.c: 947: PMADRH = 0x30;
 10430  14F1  3030               	movlw	48
 10431  14F2  0092               	movwf	18	;volatile
 10432                           
 10433                           ;MCU_B1.c: 948: PMDATH = 0;
 10434  14F3  0194               	clrf	20	;volatile
 10435                           
 10436                           ;MCU_B1.c: 949: FREE = 0;
 10437  14F4  1215               	bcf	21,4	;volatile
 10438                           
 10439                           ;MCU_B1.c: 950: LWLO = 1;
 10440  14F5  1695               	bsf	21,5	;volatile
 10441                           
 10442                           ;MCU_B1.c: 951: WREN = 1;
 10443  14F6  1515               	bsf	21,2	;volatile
 10444                           
 10445                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 10446  14F7  0020               	movlb	0	; select bank0
 10447  14F8  01A1               	clrf	Flash_Memory_Write@i
 10448  14F9  3020               	movlw	32
 10449  14FA  0221               	subwf	Flash_Memory_Write@i,w
 10450  14FB  1803               	btfsc	3,0
 10451  14FC  2D15               	goto	l1272
 10452  14FD                     l8216:	
 10453                           
 10454                           ;MCU_B1.c: 953: PMADRL = i;
 10455  14FD  0821               	movf	Flash_Memory_Write@i,w
 10456  14FE  0023               	movlb	3	; select bank3
 10457  14FF  0091               	movwf	17	;volatile
 10458                           
 10459                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 10460  1500  0020               	movlb	0	; select bank0
 10461  1501  0821               	movf	Flash_Memory_Write@i,w
 10462  1502  3EA0               	addlw	_Memory& (0+255)
 10463  1503  0086               	movwf	6
 10464  1504  3001               	movlw	1	; select bank3/4
 10465  1505  0087               	movwf	7
 10466  1506  0801               	movf	1,w
 10467  1507  0023               	movlb	3	; select bank3
 10468  1508  0093               	movwf	19	;volatile
 10469                           
 10470                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 10471  1509  319F  2755  3194   	fcall	_Flash_Memory_Unlock
 10472  150C  3001               	movlw	1
 10473  150D  0020               	movlb	0	; select bank0
 10474  150E  00A0               	movwf	??_Flash_Memory_Write
 10475  150F  0820               	movf	??_Flash_Memory_Write,w
 10476  1510  07A1               	addwf	Flash_Memory_Write@i,f
 10477  1511  3020               	movlw	32
 10478  1512  0221               	subwf	Flash_Memory_Write@i,w
 10479  1513  1C03               	skipc
 10480  1514  2CFD               	goto	l8216
 10481  1515                     l1272:	
 10482                           
 10483                           ;MCU_B1.c: 956: }
 10484                           ;MCU_B1.c: 957: LWLO = 0;
 10485  1515  0023               	movlb	3	; select bank3
 10486  1516  1295               	bcf	21,5	;volatile
 10487                           
 10488                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 10489  1517  319F  2755         	fcall	_Flash_Memory_Unlock
 10490                           
 10491                           ;MCU_B1.c: 959: WREN = 0;
 10492  1519  0023               	movlb	3	; select bank3
 10493  151A  1115               	bcf	21,2	;volatile
 10494  151B  0008               	return
 10495  151C                     __end_of_Flash_Memory_Write:	
 10496                           
 10497                           	psect	text58
 10498  1F55                     __ptext58:	
 10499 ;; *************** function _Flash_Memory_Unlock *****************
 10500 ;; Defined at:
 10501 ;;		line 923 in file "../src/MCU_B1.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;		None               void
 10508 ;; Registers used:
 10509 ;;		wreg
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    5
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_Flash_Memory_Write
 10526 ;;		_Flash_Memory_Erasing
 10527 ;; This function uses a non-reentrant model
 10528 ;;
 10529                           
 10530                           
 10531                           ;psect for function _Flash_Memory_Unlock
 10532  1F55                     _Flash_Memory_Unlock:	
 10533                           
 10534                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 10535                           
 10536                           ;incstack = 0
 10537                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10538  1F55  3055               	movlw	85
 10539  1F56  0023               	movlb	3	; select bank3
 10540  1F57  0096               	movwf	22	;volatile
 10541                           
 10542                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 10543  1F58  30AA               	movlw	170
 10544  1F59  0096               	movwf	22	;volatile
 10545                           
 10546                           ;MCU_B1.c: 926: WR = 1;
 10547  1F5A  1495               	bsf	21,1	;volatile
 10548                           
 10549                           ;MCU_B1.c: 927: __nop();
 10550  1F5B  0000               	nop
 10551                           
 10552                           ;MCU_B1.c: 928: __nop();
 10553  1F5C  0000               	nop
 10554  1F5D  0008               	return
 10555  1F5E                     __end_of_Flash_Memory_Unlock:	
 10556                           
 10557                           	psect	text59
 10558  1254                     __ptext59:	
 10559 ;; *************** function _Flash_Memory_Read *****************
 10560 ;; Defined at:
 10561 ;;		line 932 in file "../src/MCU_B1.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  address         1    wreg     unsigned char 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  address         1    2[BANK0 ] unsigned char 
 10566 ;;  ret             1    3[BANK0 ] unsigned char 
 10567 ;;  i               1    1[BANK0 ] unsigned char 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      unsigned char 
 10570 ;; Registers used:
 10571 ;;		wreg, status,2
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;Total ram usage:        4 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    5
 10584 ;; This function calls:
 10585 ;;		Nothing
 10586 ;; This function is called by:
 10587 ;;		_Flash_Memory_Initialization
 10588 ;;		_Flash_Memory_Modify
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           
 10593                           ;psect for function _Flash_Memory_Read
 10594  1254                     _Flash_Memory_Read:	
 10595                           
 10596                           ;incstack = 0
 10597                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10598                           ;Flash_Memory_Read@address stored from wreg
 10599  1254  0020               	movlb	0	; select bank0
 10600  1255  00A2               	movwf	Flash_Memory_Read@address
 10601                           
 10602                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 10603  1256  01A1               	clrf	Flash_Memory_Read@i
 10604  1257  01A3               	clrf	Flash_Memory_Read@ret
 10605                           
 10606                           ;MCU_B1.c: 934: PMADRH = 0x30;
 10607  1258  3030               	movlw	48
 10608  1259  0023               	movlb	3	; select bank3
 10609  125A  0092               	movwf	18	;volatile
 10610                           
 10611                           ;MCU_B1.c: 935: PMADRL = address;
 10612  125B  0020               	movlb	0	; select bank0
 10613  125C  0822               	movf	Flash_Memory_Read@address,w
 10614  125D  0023               	movlb	3	; select bank3
 10615  125E  0091               	movwf	17	;volatile
 10616                           
 10617                           ;MCU_B1.c: 936: CFGS = 0;
 10618  125F  1315               	bcf	21,6	;volatile
 10619                           
 10620                           ;MCU_B1.c: 937: RD = 1;
 10621  1260  1415               	bsf	21,0	;volatile
 10622                           
 10623                           ;MCU_B1.c: 938: i = PMDATH;
 10624  1261  0814               	movf	20,w	;volatile
 10625  1262  0020               	movlb	0	; select bank0
 10626  1263  00A0               	movwf	??_Flash_Memory_Read
 10627  1264  0820               	movf	??_Flash_Memory_Read,w
 10628  1265  00A1               	movwf	Flash_Memory_Read@i
 10629                           
 10630                           ;MCU_B1.c: 939: ret = PMDATL;
 10631  1266  0023               	movlb	3	; select bank3
 10632  1267  0813               	movf	19,w	;volatile
 10633  1268  0020               	movlb	0	; select bank0
 10634  1269  00A0               	movwf	??_Flash_Memory_Read
 10635  126A  0820               	movf	??_Flash_Memory_Read,w
 10636  126B  00A3               	movwf	Flash_Memory_Read@ret
 10637                           
 10638                           ;MCU_B1.c: 940: return ret;
 10639  126C  0823               	movf	Flash_Memory_Read@ret,w
 10640  126D  0008               	return
 10641  126E                     __end_of_Flash_Memory_Read:	
 10642                           
 10643                           	psect	text60
 10644  1F45                     __ptext60:	
 10645 ;; *************** function _DimmerLights_Main *****************
 10646 ;; Defined at:
 10647 ;;		line 404 in file "../src/Dimmer_B1.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;		None
 10650 ;; Auto vars:     Size  Location     Type
 10651 ;;		None
 10652 ;; Return value:  Size  Location     Type
 10653 ;;		None               void
 10654 ;; Registers used:
 10655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;Total ram usage:        0 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:   11
 10668 ;; This function calls:
 10669 ;;		_setDimmerLights_Main
 10670 ;; This function is called by:
 10671 ;;		_main
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           
 10676                           ;psect for function _DimmerLights_Main
 10677  1F45                     _DimmerLights_Main:	
 10678                           
 10679                           ;Dimmer_B1.c: 416: setDimmerLights_Main(1);
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10683  1F45  3001               	movlw	1
 10684  1F46  3189  2139  319F   	fcall	_setDimmerLights_Main
 10685                           
 10686                           ;Dimmer_B1.c: 420: setDimmerLights_Main(2);
 10687  1F49  3002               	movlw	2
 10688  1F4A  3189  2139         	fcall	_setDimmerLights_Main
 10689  1F4C  0008               	return
 10690  1F4D                     __end_of_DimmerLights_Main:	
 10691                           
 10692                           	psect	text61
 10693  0939                     __ptext61:	
 10694 ;; *************** function _setDimmerLights_Main *****************
 10695 ;; Defined at:
 10696 ;;		line 430 in file "../src/Dimmer_B1.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  lights          1    wreg     unsigned char 
 10699 ;; Auto vars:     Size  Location     Type
 10700 ;;  lights          1   69[BANK0 ] unsigned char 
 10701 ;; Return value:  Size  Location     Type
 10702 ;;		None               void
 10703 ;; Registers used:
 10704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10705 ;; Tracked objects:
 10706 ;;		On entry : 0/0
 10707 ;;		On exit  : 0/0
 10708 ;;		Unchanged: 0/0
 10709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;Total ram usage:        1 bytes
 10715 ;; Hardware stack levels used:    1
 10716 ;; Hardware stack levels required when called:   10
 10717 ;; This function calls:
 10718 ;;		_DimmerLightsPointSelect
 10719 ;;		_setBuz
 10720 ;;		_setDimmerLights
 10721 ;;		_setDimmerLights_Adj
 10722 ;; This function is called by:
 10723 ;;		_DimmerLights_Main
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function _setDimmerLights_Main
 10729  0939                     _setDimmerLights_Main:	
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10733                           ;setDimmerLights_Main@lights stored from wreg
 10734  0939  0020               	movlb	0	; select bank0
 10735  093A  00E5               	movwf	setDimmerLights_Main@lights
 10736                           
 10737                           ;Dimmer_B1.c: 431: DimmerLightsPointSelect(lights);
 10738  093B  0865               	movf	setDimmerLights_Main@lights,w
 10739  093C  3191  2101  3189   	fcall	_DimmerLightsPointSelect
 10740                           
 10741                           ;Dimmer_B1.c: 432: if (DimmerLights->Trigger == 1) {
 10742  093F  0879               	movf	_DimmerLights,w
 10743  0940  3E08               	addlw	8
 10744  0941  0086               	movwf	6
 10745  0942  3001               	movlw	1	; select bank2/3
 10746  0943  0087               	movwf	7
 10747  0944  1D01               	btfss	1,2
 10748  0945  2963               	goto	l8394
 10749                           
 10750                           ;Dimmer_B1.c: 434: if (Dimmer.LoadOK == 0) {
 10751  0946  0021               	movlb	1	; select bank1
 10752  0947  18C8               	btfsc	_Dimmer^(0+128),1
 10753  0948  0008               	return
 10754                           
 10755                           ;Dimmer_B1.c: 435: DimmerLights->Trigger = 0;
 10756  0949  0879               	movf	_DimmerLights,w
 10757  094A  3E08               	addlw	8
 10758  094B  0086               	movwf	6
 10759  094C  3001               	movlw	1	; select bank2/3
 10760  094D  0087               	movwf	7
 10761  094E  1101               	bcf	1,2
 10762                           
 10763                           ;Dimmer_B1.c: 437: if (DimmerLights->Switch == 1) {
 10764  094F  0879               	movf	_DimmerLights,w
 10765  0950  3E08               	addlw	8
 10766  0951  0086               	movwf	6
 10767  0952  3001               	movlw	1	; select bank2/3
 10768  0953  0087               	movwf	7
 10769  0954  1C81               	btfss	1,1
 10770  0955  295D               	goto	l8392
 10771                           
 10772                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 1);
 10773  0956  0020               	movlb	0	; select bank0
 10774  0957  01A4               	clrf	setDimmerLights@status
 10775  0958  0AA4               	incf	setDimmerLights@status,f
 10776  0959  0865               	movf	setDimmerLights_Main@lights,w
 10777  095A  318E  26F9         	fcall	_setDimmerLights
 10778                           
 10779                           ;Dimmer_B1.c: 439: } else {
 10780  095C  0008               	return
 10781  095D                     l8392:	
 10782                           
 10783                           ;Dimmer_B1.c: 440: setDimmerLights(lights, 0);
 10784  095D  0020               	movlb	0	; select bank0
 10785  095E  01A4               	clrf	setDimmerLights@status
 10786  095F  0865               	movf	setDimmerLights_Main@lights,w
 10787  0960  318E  26F9         	fcall	_setDimmerLights
 10788                           
 10789                           ;Dimmer_B1.c: 441: }
 10790                           ;Dimmer_B1.c: 442: }
 10791                           ;Dimmer_B1.c: 443: } else {
 10792  0962  0008               	return
 10793  0963                     l8394:	
 10794                           
 10795                           ;Dimmer_B1.c: 444: if (DimmerLights->TriggerAdj == 1) {
 10796  0963  0879               	movf	_DimmerLights,w
 10797  0964  3E08               	addlw	8
 10798  0965  0086               	movwf	6
 10799  0966  3001               	movlw	1	; select bank2/3
 10800  0967  0087               	movwf	7
 10801  0968  1E01               	btfss	1,4
 10802  0969  0008               	return
 10803                           
 10804                           ;Dimmer_B1.c: 445: if (Dimmer.LoadOK == 0) {
 10805  096A  0021               	movlb	1	; select bank1
 10806  096B  18C8               	btfsc	_Dimmer^(0+128),1
 10807  096C  0008               	return
 10808                           
 10809                           ;Dimmer_B1.c: 446: DimmerLights->TriggerAdj = 0;
 10810  096D  0879               	movf	_DimmerLights,w
 10811  096E  3E08               	addlw	8
 10812  096F  0086               	movwf	6
 10813  0970  3001               	movlw	1	; select bank2/3
 10814  0971  0087               	movwf	7
 10815  0972  1201               	bcf	1,4
 10816                           
 10817                           ;Dimmer_B1.c: 447: if (DimmerLights->AdjGo == 1) {
 10818  0973  0879               	movf	_DimmerLights,w
 10819  0974  3E08               	addlw	8
 10820  0975  0086               	movwf	6
 10821  0976  3001               	movlw	1	; select bank2/3
 10822  0977  0087               	movwf	7
 10823  0978  1D81               	btfss	1,3
 10824  0979  298A               	goto	l8404
 10825                           
 10826                           ;Dimmer_B1.c: 448: setDimmerLights_Adj(lights, 1);
 10827  097A  0020               	movlb	0	; select bank0
 10828  097B  01E2               	clrf	setDimmerLights_Adj@status
 10829  097C  0AE2               	incf	setDimmerLights_Adj@status,f
 10830  097D  0865               	movf	setDimmerLights_Main@lights,w
 10831  097E  3196  262B  3189   	fcall	_setDimmerLights_Adj
 10832                           
 10833                           ;Dimmer_B1.c: 449: setBuz(1, 100);
 10834  0981  3064               	movlw	100
 10835  0982  0020               	movlb	0	; select bank0
 10836  0983  00A9               	movwf	setBuz@time
 10837  0984  3000               	movlw	0
 10838  0985  00AA               	movwf	setBuz@time+1
 10839  0986  3001               	movlw	1
 10840  0987  318A  2240         	fcall	_setBuz
 10841                           
 10842                           ;Dimmer_B1.c: 450: } else {
 10843  0989  0008               	return
 10844  098A                     l8404:	
 10845                           
 10846                           ;Dimmer_B1.c: 451: setDimmerLights_Adj(lights, 0);
 10847  098A  0020               	movlb	0	; select bank0
 10848  098B  01E2               	clrf	setDimmerLights_Adj@status
 10849  098C  0865               	movf	setDimmerLights_Main@lights,w
 10850  098D  3196  262B         	fcall	_setDimmerLights_Adj
 10851  098F  0008               	return
 10852  0990                     __end_of_setDimmerLights_Main:	
 10853                           
 10854                           	psect	text62
 10855  162B                     __ptext62:	
 10856 ;; *************** function _setDimmerLights_Adj *****************
 10857 ;; Defined at:
 10858 ;;		line 751 in file "../src/Dimmer_B1.c"
 10859 ;; Parameters:    Size  Location     Type
 10860 ;;  lights          1    wreg     unsigned char 
 10861 ;;  status          1   66[BANK0 ] unsigned char 
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;  lights          1   68[BANK0 ] unsigned char 
 10864 ;; Return value:  Size  Location     Type
 10865 ;;		None               void
 10866 ;; Registers used:
 10867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10873 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;Total ram usage:        3 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    9
 10880 ;; This function calls:
 10881 ;;		_DimmerLightsPointSelect
 10882 ;;		_setRF_DimmerLights
 10883 ;;		_setTxData
 10884 ;; This function is called by:
 10885 ;;		_setDimmerLights_Main
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           
 10890                           ;psect for function _setDimmerLights_Adj
 10891  162B                     _setDimmerLights_Adj:	
 10892                           
 10893                           ;incstack = 0
 10894                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10895                           ;setDimmerLights_Adj@lights stored from wreg
 10896  162B  0020               	movlb	0	; select bank0
 10897  162C  00E4               	movwf	setDimmerLights_Adj@lights
 10898                           
 10899                           ;Dimmer_B1.c: 752: DimmerLightsPointSelect(lights);
 10900  162D  0864               	movf	setDimmerLights_Adj@lights,w
 10901  162E  3191  2101  3196   	fcall	_DimmerLightsPointSelect
 10902                           
 10903                           ;Dimmer_B1.c: 753: if (status == 1) {
 10904  1631  0020               	movlb	0	; select bank0
 10905  1632  0862               	movf	setDimmerLights_Adj@status,w
 10906  1633  3A01               	xorlw	1
 10907  1634  1D03               	skipz
 10908  1635  2E41               	goto	l8120
 10909                           
 10910                           ;Dimmer_B1.c: 754: DimmerLights->AdjFlag = 1;
 10911  1636  0879               	movf	_DimmerLights,w
 10912  1637  0086               	movwf	6
 10913  1638  3001               	movlw	1	; select bank2/3
 10914  1639  0087               	movwf	7
 10915  163A  1581               	bsf	1,3
 10916                           
 10917                           ;Dimmer_B1.c: 755: DimmerLights->Signal = 1;
 10918  163B  0879               	movf	_DimmerLights,w
 10919  163C  0086               	movwf	6
 10920  163D  3001               	movlw	1	; select bank2/3
 10921  163E  0087               	movwf	7
 10922  163F  1481               	bsf	1,1
 10923                           
 10924                           ;Dimmer_B1.c: 756: } else {
 10925  1640  0008               	return
 10926  1641                     l8120:	
 10927                           
 10928                           ;Dimmer_B1.c: 757: if (DimmerLights->AdjFlag == 1) {
 10929  1641  0879               	movf	_DimmerLights,w
 10930  1642  0086               	movwf	6
 10931  1643  3001               	movlw	1	; select bank2/3
 10932  1644  0087               	movwf	7
 10933  1645  1D81               	btfss	1,3
 10934  1646  0008               	return
 10935                           
 10936                           ;Dimmer_B1.c: 758: DimmerLights->Signal = 0;
 10937  1647  0879               	movf	_DimmerLights,w
 10938  1648  0086               	movwf	6
 10939  1649  3001               	movlw	1	; select bank2/3
 10940  164A  0087               	movwf	7
 10941  164B  1081               	bcf	1,1
 10942                           
 10943                           ;Dimmer_B1.c: 759: DimmerLights->AdjFlag = 0;
 10944  164C  0879               	movf	_DimmerLights,w
 10945  164D  0086               	movwf	6
 10946  164E  3001               	movlw	1	; select bank2/3
 10947  164F  0087               	movwf	7
 10948  1650  1181               	bcf	1,3
 10949                           
 10950                           ;Dimmer_B1.c: 760: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10951  1651  0879               	movf	_DimmerLights,w
 10952  1652  3E04               	addlw	4
 10953  1653  0086               	movwf	6
 10954  1654  3001               	movlw	1	; select bank2/3
 10955  1655  0087               	movwf	7
 10956  1656  0801               	movf	1,w
 10957  1657  00E3               	movwf	??_setDimmerLights_Adj
 10958  1658  0879               	movf	_DimmerLights,w
 10959  1659  3E05               	addlw	5
 10960  165A  0086               	movwf	6
 10961  165B  3001               	movlw	1	; select bank2/3
 10962  165C  0087               	movwf	7
 10963  165D  0863               	movf	??_setDimmerLights_Adj,w
 10964  165E  0081               	movwf	1
 10965                           
 10966                           ;Dimmer_B1.c: 773: setRF_DimmerLights(lights, 1);
 10967  165F  01DD               	clrf	setRF_DimmerLights@on
 10968  1660  0ADD               	incf	setRF_DimmerLights@on,f
 10969  1661  0864               	movf	setDimmerLights_Adj@lights,w
 10970  1662  318D  2534  3196   	fcall	_setRF_DimmerLights
 10971                           
 10972                           ;Dimmer_B1.c: 774: setTxData();
 10973  1665  3185  25AF         	fcall	_setTxData
 10974  1667  0008               	return
 10975  1668                     __end_of_setDimmerLights_Adj:	
 10976                           
 10977                           	psect	text63
 10978  0EF9                     __ptext63:	
 10979 ;; *************** function _setDimmerLights *****************
 10980 ;; Defined at:
 10981 ;;		line 630 in file "../src/Dimmer_B1.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  lights          1    wreg     unsigned char 
 10984 ;;  status          1    4[BANK0 ] unsigned char 
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;  lights          1    6[BANK0 ] unsigned char 
 10987 ;; Return value:  Size  Location     Type
 10988 ;;		None               void
 10989 ;; Registers used:
 10990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10996 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;Total ram usage:        3 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    7
 11003 ;; This function calls:
 11004 ;;		_DimmerLightsPointSelect
 11005 ;;		_setDimmerLights_Line
 11006 ;;		_setLED
 11007 ;; This function is called by:
 11008 ;;		_setDimmerLights_Main
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _setDimmerLights
 11014  0EF9                     _setDimmerLights:	
 11015                           
 11016                           ;incstack = 0
 11017                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11018                           ;setDimmerLights@lights stored from wreg
 11019  0EF9  0020               	movlb	0	; select bank0
 11020  0EFA  00A6               	movwf	setDimmerLights@lights
 11021                           
 11022                           ;Dimmer_B1.c: 631: DimmerLightsPointSelect(lights);
 11023  0EFB  0826               	movf	setDimmerLights@lights,w
 11024  0EFC  3191  2101  318E   	fcall	_DimmerLightsPointSelect
 11025                           
 11026                           ;Dimmer_B1.c: 638: if (status == 1) {
 11027  0EFF  0020               	movlb	0	; select bank0
 11028  0F00  0824               	movf	setDimmerLights@status,w
 11029  0F01  3A01               	xorlw	1
 11030  0F02  1D03               	skipz
 11031  0F03  2F3A               	goto	l8098
 11032                           
 11033                           ;Dimmer_B1.c: 639: DimmerLights->Loop = 1;
 11034  0F04  0879               	movf	_DimmerLights,w
 11035  0F05  3E09               	addlw	9
 11036  0F06  0086               	movwf	6
 11037  0F07  3001               	movlw	1	; select bank2/3
 11038  0F08  0087               	movwf	7
 11039  0F09  1481               	bsf	1,1
 11040                           
 11041                           ;Dimmer_B1.c: 640: setLED(lights, 0);
 11042  0F0A  01A2               	clrf	setLED@command
 11043  0F0B  0826               	movf	setDimmerLights@lights,w
 11044  0F0C  3188  2092  318E   	fcall	_setLED
 11045                           
 11046                           ;Dimmer_B1.c: 642: setDimmerLights_Line(lights);
 11047  0F0F  0020               	movlb	0	; select bank0
 11048  0F10  0826               	movf	setDimmerLights@lights,w
 11049  0F11  3191  21C7         	fcall	_setDimmerLights_Line
 11050                           
 11051                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 1;
 11052  0F13  0879               	movf	_DimmerLights,w
 11053  0F14  0086               	movwf	6
 11054  0F15  3001               	movlw	1	; select bank2/3
 11055  0F16  0087               	movwf	7
 11056  0F17  1701               	bsf	1,6
 11057                           
 11058                           ;Dimmer_B1.c: 645: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11059  0F18  0879               	movf	_DimmerLights,w
 11060  0F19  3E05               	addlw	5
 11061  0F1A  0086               	movwf	6
 11062  0F1B  3001               	movlw	1	; select bank2/3
 11063  0F1C  0087               	movwf	7
 11064  0F1D  0801               	movf	1,w
 11065  0F1E  0020               	movlb	0	; select bank0
 11066  0F1F  00A5               	movwf	??_setDimmerLights
 11067  0F20  0879               	movf	_DimmerLights,w
 11068  0F21  3E04               	addlw	4
 11069  0F22  0086               	movwf	6
 11070  0F23  3001               	movlw	1	; select bank2/3
 11071  0F24  0087               	movwf	7
 11072  0F25  0825               	movf	??_setDimmerLights,w
 11073  0F26  0081               	movwf	1
 11074                           
 11075                           ;Dimmer_B1.c: 649: DimmerLights->DimmingValue = ((char)(80*0.8));
 11076  0F27  3040               	movlw	64
 11077  0F28  00A5               	movwf	??_setDimmerLights
 11078  0F29  0879               	movf	_DimmerLights,w
 11079  0F2A  3E04               	addlw	4
 11080  0F2B  0086               	movwf	6
 11081  0F2C  3001               	movlw	1	; select bank2/3
 11082  0F2D  0087               	movwf	7
 11083  0F2E  0825               	movf	??_setDimmerLights,w
 11084  0F2F  0081               	movwf	1
 11085                           
 11086                           ;Dimmer_B1.c: 656: DimmerLights->DimmingTimeValue = 7;
 11087  0F30  3007               	movlw	7
 11088  0F31  00A5               	movwf	??_setDimmerLights
 11089  0F32  0879               	movf	_DimmerLights,w
 11090  0F33  3E02               	addlw	2
 11091  0F34  0086               	movwf	6
 11092  0F35  3001               	movlw	1	; select bank2/3
 11093  0F36  0087               	movwf	7
 11094  0F37  0825               	movf	??_setDimmerLights,w
 11095  0F38  0081               	movwf	1
 11096                           
 11097                           ;Dimmer_B1.c: 658: } else {
 11098  0F39  0008               	return
 11099  0F3A                     l8098:	
 11100                           
 11101                           ;Dimmer_B1.c: 659: DimmerLights->StatusFlag = 0;
 11102  0F3A  0879               	movf	_DimmerLights,w
 11103  0F3B  0086               	movwf	6
 11104  0F3C  3001               	movlw	1	; select bank2/3
 11105  0F3D  0087               	movwf	7
 11106  0F3E  1301               	bcf	1,6
 11107                           
 11108                           ;Dimmer_B1.c: 660: DimmerLights->Loop = 0;
 11109  0F3F  0879               	movf	_DimmerLights,w
 11110  0F40  3E09               	addlw	9
 11111  0F41  0086               	movwf	6
 11112  0F42  3001               	movlw	1	; select bank2/3
 11113  0F43  0087               	movwf	7
 11114  0F44  1081               	bcf	1,1
 11115                           
 11116                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 11117  0F45  01A2               	clrf	setLED@command
 11118  0F46  0AA2               	incf	setLED@command,f
 11119  0F47  0826               	movf	setDimmerLights@lights,w
 11120  0F48  3188  2092  318E   	fcall	_setLED
 11121                           
 11122                           ;Dimmer_B1.c: 679: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11123  0F4B  0879               	movf	_DimmerLights,w
 11124  0F4C  3E06               	addlw	6
 11125  0F4D  0086               	movwf	6
 11126  0F4E  3001               	movlw	1	; select bank2/3
 11127  0F4F  0087               	movwf	7
 11128  0F50  0801               	movf	1,w
 11129  0F51  0020               	movlb	0	; select bank0
 11130  0F52  00A5               	movwf	??_setDimmerLights
 11131  0F53  0879               	movf	_DimmerLights,w
 11132  0F54  3E04               	addlw	4
 11133  0F55  0086               	movwf	6
 11134  0F56  3001               	movlw	1	; select bank2/3
 11135  0F57  0087               	movwf	7
 11136  0F58  0825               	movf	??_setDimmerLights,w
 11137  0F59  0081               	movwf	1
 11138                           
 11139                           ;Dimmer_B1.c: 684: DimmerLights->MosfetClose = 1;
 11140  0F5A  0879               	movf	_DimmerLights,w
 11141  0F5B  3E08               	addlw	8
 11142  0F5C  0086               	movwf	6
 11143  0F5D  3001               	movlw	1	; select bank2/3
 11144  0F5E  0087               	movwf	7
 11145  0F5F  1781               	bsf	1,7
 11146                           
 11147                           ;Dimmer_B1.c: 687: DimmerLights->AdjFlag = 0;
 11148  0F60  0879               	movf	_DimmerLights,w
 11149  0F61  0086               	movwf	6
 11150  0F62  3001               	movlw	1	; select bank2/3
 11151  0F63  0087               	movwf	7
 11152  0F64  1181               	bcf	1,3
 11153                           
 11154                           ;Dimmer_B1.c: 688: DimmerLights->AdjStatus = 0;
 11155  0F65  0879               	movf	_DimmerLights,w
 11156  0F66  0086               	movwf	6
 11157  0F67  3001               	movlw	1	; select bank2/3
 11158  0F68  0087               	movwf	7
 11159  0F69  1201               	bcf	1,4
 11160                           
 11161                           ;Dimmer_B1.c: 689: DimmerLights->AdjRF = 0;
 11162  0F6A  0879               	movf	_DimmerLights,w
 11163  0F6B  0086               	movwf	6
 11164  0F6C  3001               	movlw	1	; select bank2/3
 11165  0F6D  0087               	movwf	7
 11166  0F6E  1101               	bcf	1,2
 11167                           
 11168                           ;Dimmer_B1.c: 690: DimmerLights->DimmingTimeValue = 7;
 11169  0F6F  3007               	movlw	7
 11170  0F70  00A5               	movwf	??_setDimmerLights
 11171  0F71  0879               	movf	_DimmerLights,w
 11172  0F72  3E02               	addlw	2
 11173  0F73  0086               	movwf	6
 11174  0F74  3001               	movlw	1	; select bank2/3
 11175  0F75  0087               	movwf	7
 11176  0F76  0825               	movf	??_setDimmerLights,w
 11177  0F77  0081               	movwf	1
 11178  0F78  0008               	return
 11179  0F79                     __end_of_setDimmerLights:	
 11180                           
 11181                           	psect	text64
 11182  0892                     __ptext64:	
 11183 ;; *************** function _setLED *****************
 11184 ;; Defined at:
 11185 ;;		line 73 in file "../src/LED_B1.c"
 11186 ;; Parameters:    Size  Location     Type
 11187 ;;  led             1    wreg     unsigned char 
 11188 ;;  command         1    2[BANK0 ] unsigned char 
 11189 ;; Auto vars:     Size  Location     Type
 11190 ;;  led             1    3[BANK0 ] unsigned char 
 11191 ;; Return value:  Size  Location     Type
 11192 ;;		None               void
 11193 ;; Registers used:
 11194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11195 ;; Tracked objects:
 11196 ;;		On entry : 0/0
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11200 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;Total ram usage:        2 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    6
 11207 ;; This function calls:
 11208 ;;		_LedPointSelect
 11209 ;; This function is called by:
 11210 ;;		_setDimmerLights
 11211 ;;		_setLED_Initialization
 11212 ;;		_setSw_Initialization
 11213 ;;		_setMain_Exception
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           
 11218                           ;psect for function _setLED
 11219  0892                     _setLED:	
 11220                           
 11221                           ;incstack = 0
 11222                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11223                           ;setLED@led stored from wreg
 11224  0892  0020               	movlb	0	; select bank0
 11225  0893  00A3               	movwf	setLED@led
 11226                           
 11227                           ;LED_B1.c: 74: LedPointSelect(led);
 11228  0894  0823               	movf	setLED@led,w
 11229  0895  3193  2307  3188   	fcall	_LedPointSelect
 11230                           
 11231                           ;LED_B1.c: 75: if (command == 0) {
 11232  0898  0020               	movlb	0	; select bank0
 11233  0899  08A2               	movf	setLED@command,f
 11234  089A  1D03               	skipz
 11235  089B  28A9               	goto	l7990
 11236                           
 11237                           ;LED_B1.c: 77: if (led == 1) {
 11238  089C  0823               	movf	setLED@led,w
 11239  089D  3A01               	xorlw	1
 11240  089E  1D03               	skipz
 11241  089F  28A1               	goto	l7982
 11242                           
 11243                           ;LED_B1.c: 81: RA3 = 1;
 11244  08A0  158C               	bsf	12,3	;volatile
 11245  08A1                     l7982:	
 11246                           
 11247                           ;LED_B1.c: 83: }
 11248                           ;LED_B1.c: 86: if (led == 2) {
 11249  08A1  0823               	movf	setLED@led,w
 11250  08A2  3A02               	xorlw	2
 11251  08A3  1903               	btfsc	3,2
 11252                           
 11253                           ;LED_B1.c: 90: RC7 = 1;
 11254  08A4  178E               	bsf	14,7	;volatile
 11255                           
 11256                           ;LED_B1.c: 92: }
 11257                           ;LED_B1.c: 104: if (led == 99) {
 11258  08A5  0823               	movf	setLED@led,w
 11259  08A6  3A63               	xorlw	99
 11260  08A7  1903               	btfsc	3,2
 11261                           
 11262                           ;LED_B1.c: 108: RB5 = 1;
 11263  08A8  168D               	bsf	13,5	;volatile
 11264  08A9                     l7990:	
 11265                           
 11266                           ;LED_B1.c: 110: }
 11267                           ;LED_B1.c: 112: } if (command == 1) {
 11268  08A9  0822               	movf	setLED@command,w
 11269  08AA  3A01               	xorlw	1
 11270  08AB  1D03               	skipz
 11271  08AC  28BA               	goto	l8004
 11272                           
 11273                           ;LED_B1.c: 114: if (led == 1) {
 11274  08AD  0823               	movf	setLED@led,w
 11275  08AE  3A01               	xorlw	1
 11276  08AF  1D03               	skipz
 11277  08B0  28B2               	goto	l7996
 11278                           
 11279                           ;LED_B1.c: 118: RA3 = 0;
 11280  08B1  118C               	bcf	12,3	;volatile
 11281  08B2                     l7996:	
 11282                           
 11283                           ;LED_B1.c: 120: }
 11284                           ;LED_B1.c: 123: if (led == 2) {
 11285  08B2  0823               	movf	setLED@led,w
 11286  08B3  3A02               	xorlw	2
 11287  08B4  1903               	btfsc	3,2
 11288                           
 11289                           ;LED_B1.c: 127: RC7 = 0;
 11290  08B5  138E               	bcf	14,7	;volatile
 11291                           
 11292                           ;LED_B1.c: 129: }
 11293                           ;LED_B1.c: 141: if (led == 99) {
 11294  08B6  0823               	movf	setLED@led,w
 11295  08B7  3A63               	xorlw	99
 11296  08B8  1903               	btfsc	3,2
 11297                           
 11298                           ;LED_B1.c: 145: RB5 = 0;
 11299  08B9  128D               	bcf	13,5	;volatile
 11300  08BA                     l8004:	
 11301                           
 11302                           ;LED_B1.c: 147: }
 11303                           ;LED_B1.c: 149: } if (command == 10) {
 11304  08BA  0822               	movf	setLED@command,w
 11305  08BB  3A0A               	xorlw	10
 11306  08BC  1D03               	skipz
 11307  08BD  28DA               	goto	l8020
 11308                           
 11309                           ;LED_B1.c: 150: LED->GO = 0;
 11310  08BE  0021               	movlb	1	; select bank1
 11311  08BF  0856               	movf	_LED^(0+128),w
 11312  08C0  0086               	movwf	6
 11313  08C1  3001               	movlw	1	; select bank2/3
 11314  08C2  0087               	movwf	7
 11315  08C3  1081               	bcf	1,1
 11316                           
 11317                           ;LED_B1.c: 151: LED->Time = 0;
 11318  08C4  0A56               	incf	_LED^(0+128),w
 11319  08C5  0086               	movwf	6
 11320  08C6  3001               	movlw	1	; select bank2/3
 11321  08C7  0087               	movwf	7
 11322  08C8  3000               	movlw	0
 11323  08C9  3FC0               	movwi [0]fsr1
 11324  08CA  3FC1               	movwi [1]fsr1
 11325                           
 11326                           ;LED_B1.c: 153: if (led == 1) {
 11327  08CB  0020               	movlb	0	; select bank0
 11328  08CC  0823               	movf	setLED@led,w
 11329  08CD  3A01               	xorlw	1
 11330  08CE  1D03               	skipz
 11331  08CF  28D2               	goto	l8012
 11332                           
 11333                           ;LED_B1.c: 157: RA3 = 1;
 11334  08D0  158C               	bsf	12,3	;volatile
 11335                           
 11336                           ;LED_B1.c: 159: }
 11337  08D1  28D6               	goto	l8016
 11338  08D2                     l8012:	
 11339                           
 11340                           ;LED_B1.c: 162: else if (led == 2) {
 11341  08D2  0823               	movf	setLED@led,w
 11342  08D3  3A02               	xorlw	2
 11343  08D4  1903               	btfsc	3,2
 11344                           
 11345                           ;LED_B1.c: 166: RC7 = 1;
 11346  08D5  178E               	bsf	14,7	;volatile
 11347  08D6                     l8016:	
 11348                           
 11349                           ;LED_B1.c: 168: }
 11350                           ;LED_B1.c: 180: if (led == 99) {
 11351  08D6  0823               	movf	setLED@led,w
 11352  08D7  3A63               	xorlw	99
 11353  08D8  1903               	btfsc	3,2
 11354                           
 11355                           ;LED_B1.c: 184: RB5 = 1;
 11356  08D9  168D               	bsf	13,5	;volatile
 11357  08DA                     l8020:	
 11358                           
 11359                           ;LED_B1.c: 186: }
 11360                           ;LED_B1.c: 188: }
 11361                           ;LED_B1.c: 189: if (command == 11) {
 11362  08DA  0822               	movf	setLED@command,w
 11363  08DB  3A0B               	xorlw	11
 11364  08DC  1D03               	skipz
 11365  08DD  0008               	return
 11366                           
 11367                           ;LED_B1.c: 190: LED->GO = 1;
 11368  08DE  0021               	movlb	1	; select bank1
 11369  08DF  0856               	movf	_LED^(0+128),w
 11370  08E0  0086               	movwf	6
 11371  08E1  3001               	movlw	1	; select bank2/3
 11372  08E2  0087               	movwf	7
 11373  08E3  1481               	bsf	1,1
 11374  08E4  0008               	return
 11375  08E5                     __end_of_setLED:	
 11376                           
 11377                           	psect	text65
 11378  1307                     __ptext65:	
 11379 ;; *************** function _LedPointSelect *****************
 11380 ;; Defined at:
 11381 ;;		line 7 in file "../src/LED_B1.c"
 11382 ;; Parameters:    Size  Location     Type
 11383 ;;  led             1    wreg     unsigned char 
 11384 ;; Auto vars:     Size  Location     Type
 11385 ;;  led             1    1[BANK0 ] unsigned char 
 11386 ;; Return value:  Size  Location     Type
 11387 ;;		None               void
 11388 ;; Registers used:
 11389 ;;		wreg
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11398 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11399 ;;Total ram usage:        2 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:    5
 11402 ;; This function calls:
 11403 ;;		Nothing
 11404 ;; This function is called by:
 11405 ;;		_setLED_Initialization
 11406 ;;		_setLED
 11407 ;;		_setLED_Main
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           
 11412                           ;psect for function _LedPointSelect
 11413  1307                     _LedPointSelect:	
 11414                           
 11415                           ;incstack = 0
 11416                           ; Regs used in _LedPointSelect: [wreg]
 11417                           ;LedPointSelect@led stored from wreg
 11418  1307  0020               	movlb	0	; select bank0
 11419  1308  00A1               	movwf	LedPointSelect@led
 11420                           
 11421                           ;LED_B1.c: 9: if (led == 1) {
 11422  1309  0821               	movf	LedPointSelect@led,w
 11423  130A  3A01               	xorlw	1
 11424  130B  1D03               	skipz
 11425  130C  2B12               	goto	l959
 11426                           
 11427                           ;LED_B1.c: 10: LED = &VarLED1;
 11428  130D  3060               	movlw	_VarLED1& (0+255)
 11429  130E  00A0               	movwf	??_LedPointSelect
 11430  130F  0820               	movf	??_LedPointSelect,w
 11431  1310  0021               	movlb	1	; select bank1
 11432  1311  00D6               	movwf	_LED^(0+128)
 11433  1312                     l959:	
 11434                           
 11435                           ;LED_B1.c: 11: }
 11436                           ;LED_B1.c: 14: if (led == 2) {
 11437  1312  0020               	movlb	0	; select bank0
 11438  1313  0821               	movf	LedPointSelect@led,w
 11439  1314  3A02               	xorlw	2
 11440  1315  1D03               	skipz
 11441  1316  2B1C               	goto	l960
 11442                           
 11443                           ;LED_B1.c: 15: LED = &VarLED2;
 11444  1317  3064               	movlw	_VarLED2& (0+255)
 11445  1318  00A0               	movwf	??_LedPointSelect
 11446  1319  0820               	movf	??_LedPointSelect,w
 11447  131A  0021               	movlb	1	; select bank1
 11448  131B  00D6               	movwf	_LED^(0+128)
 11449  131C                     l960:	
 11450                           
 11451                           ;LED_B1.c: 16: }
 11452                           ;LED_B1.c: 24: if (led == 99) {
 11453  131C  0020               	movlb	0	; select bank0
 11454  131D  0821               	movf	LedPointSelect@led,w
 11455  131E  3A63               	xorlw	99
 11456  131F  1D03               	skipz
 11457  1320  0008               	return
 11458                           
 11459                           ;LED_B1.c: 25: LED = &VarErrLED;
 11460  1321  305C               	movlw	_VarErrLED& (0+255)
 11461  1322  00A0               	movwf	??_LedPointSelect
 11462  1323  0820               	movf	??_LedPointSelect,w
 11463  1324  0021               	movlb	1	; select bank1
 11464  1325  00D6               	movwf	_LED^(0+128)
 11465  1326  0008               	return
 11466  1327                     __end_of_LedPointSelect:	
 11467                           
 11468                           	psect	text66
 11469  11C7                     __ptext66:	
 11470 ;; *************** function _setDimmerLights_Line *****************
 11471 ;; Defined at:
 11472 ;;		line 702 in file "../src/Dimmer_B1.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;  lights          1    wreg     unsigned char 
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  lights          1    0[BANK0 ] unsigned char 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;		None               void
 11479 ;; Registers used:
 11480 ;;		wreg
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;Total ram usage:        1 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    5
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_setDimmerLights
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           
 11501                           ;psect for function _setDimmerLights_Line
 11502  11C7                     _setDimmerLights_Line:	
 11503                           
 11504                           ;incstack = 0
 11505                           ; Regs used in _setDimmerLights_Line: [wreg]
 11506                           ;setDimmerLights_Line@lights stored from wreg
 11507  11C7  0020               	movlb	0	; select bank0
 11508  11C8  00A0               	movwf	setDimmerLights_Line@lights
 11509                           
 11510                           ;Dimmer_B1.c: 704: DimmerLights1.Line = 0;
 11511  11C9  0022               	movlb	2	; select bank2
 11512  11CA  1047               	bcf	(_DimmerLights1^(0+256)+9),0
 11513                           
 11514                           ;Dimmer_B1.c: 707: DimmerLights2.Line = 0;
 11515  11CB  1056               	bcf	(_DimmerLights2^(0+256)+9),0
 11516                           
 11517                           ;Dimmer_B1.c: 713: if (lights == 1) {
 11518  11CC  0020               	movlb	0	; select bank0
 11519  11CD  0820               	movf	setDimmerLights_Line@lights,w
 11520  11CE  3A01               	xorlw	1
 11521  11CF  1D03               	skipz
 11522  11D0  29D4               	goto	l5888
 11523                           
 11524                           ;Dimmer_B1.c: 714: DimmerLights1.Line = 1;
 11525  11D1  0022               	movlb	2	; select bank2
 11526  11D2  1447               	bsf	(_DimmerLights1^(0+256)+9),0
 11527                           
 11528                           ;Dimmer_B1.c: 715: }
 11529  11D3  0008               	return
 11530  11D4                     l5888:	
 11531                           
 11532                           ;Dimmer_B1.c: 718: else if (lights == 2) {
 11533  11D4  0020               	movlb	0	; select bank0
 11534  11D5  0820               	movf	setDimmerLights_Line@lights,w
 11535  11D6  3A02               	xorlw	2
 11536  11D7  1D03               	skipz
 11537  11D8  0008               	return
 11538                           
 11539                           ;Dimmer_B1.c: 719: DimmerLights2.Line = 1;
 11540  11D9  0022               	movlb	2	; select bank2
 11541  11DA  1456               	bsf	(_DimmerLights2^(0+256)+9),0
 11542  11DB  0008               	return
 11543  11DC                     __end_of_setDimmerLights_Line:	
 11544                           
 11545                           	psect	text67
 11546  11F1                     __ptext67:	
 11547 ;; *************** function _DimmerLights_Initialization *****************
 11548 ;; Defined at:
 11549 ;;		line 343 in file "../src/Dimmer_B1.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;		None
 11554 ;; Return value:  Size  Location     Type
 11555 ;;		None               void
 11556 ;; Registers used:
 11557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;Total ram usage:        1 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    7
 11570 ;; This function calls:
 11571 ;;		_Dimmer_Initialization
 11572 ;;		_setDimmerLights_Initialization
 11573 ;; This function is called by:
 11574 ;;		_main
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           
 11579                           ;psect for function _DimmerLights_Initialization
 11580  11F1                     _DimmerLights_Initialization:	
 11581                           
 11582                           ;Dimmer_B1.c: 345: DimmerLights11 = &DimmerLights1;
 11583                           
 11584                           ;incstack = 0
 11585                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11586  11F1  303E               	movlw	_DimmerLights1& (0+255)
 11587  11F2  0020               	movlb	0	; select bank0
 11588  11F3  00A4               	movwf	??_DimmerLights_Initialization
 11589  11F4  0824               	movf	??_DimmerLights_Initialization,w
 11590  11F5  0021               	movlb	1	; select bank1
 11591  11F6  00D3               	movwf	_DimmerLights11^(0+128)
 11592                           
 11593                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(1);
 11594  11F7  3001               	movlw	1
 11595  11F8  3194  241E  3191   	fcall	_setDimmerLights_Initialization
 11596                           
 11597                           ;Dimmer_B1.c: 350: DimmerLights22 = &DimmerLights2;
 11598  11FB  304D               	movlw	_DimmerLights2& (0+255)
 11599  11FC  0020               	movlb	0	; select bank0
 11600  11FD  00A4               	movwf	??_DimmerLights_Initialization
 11601  11FE  0824               	movf	??_DimmerLights_Initialization,w
 11602  11FF  0021               	movlb	1	; select bank1
 11603  1200  00D4               	movwf	_DimmerLights22^(0+128)
 11604                           
 11605                           ;Dimmer_B1.c: 351: setDimmerLights_Initialization(2);
 11606  1201  3002               	movlw	2
 11607  1202  3194  241E  3191   	fcall	_setDimmerLights_Initialization
 11608                           
 11609                           ;Dimmer_B1.c: 360: Dimmer_Initialization();
 11610  1205  3190  2066         	fcall	_Dimmer_Initialization
 11611  1207  0008               	return
 11612  1208                     __end_of_DimmerLights_Initialization:	
 11613                           
 11614                           	psect	text68
 11615  141E                     __ptext68:	
 11616 ;; *************** function _setDimmerLights_Initialization *****************
 11617 ;; Defined at:
 11618 ;;		line 366 in file "../src/Dimmer_B1.c"
 11619 ;; Parameters:    Size  Location     Type
 11620 ;;  lights          1    wreg     unsigned char 
 11621 ;; Auto vars:     Size  Location     Type
 11622 ;;  lights          1    3[BANK0 ] unsigned char 
 11623 ;; Return value:  Size  Location     Type
 11624 ;;		None               void
 11625 ;; Registers used:
 11626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11627 ;; Tracked objects:
 11628 ;;		On entry : 0/0
 11629 ;;		On exit  : 0/0
 11630 ;;		Unchanged: 0/0
 11631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;Total ram usage:        2 bytes
 11637 ;; Hardware stack levels used:    1
 11638 ;; Hardware stack levels required when called:    6
 11639 ;; This function calls:
 11640 ;;		_DimmerLightsPointSelect
 11641 ;; This function is called by:
 11642 ;;		_DimmerLights_Initialization
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           
 11647                           ;psect for function _setDimmerLights_Initialization
 11648  141E                     _setDimmerLights_Initialization:	
 11649                           
 11650                           ;incstack = 0
 11651                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11652                           ;setDimmerLights_Initialization@lights stored from wreg
 11653  141E  0020               	movlb	0	; select bank0
 11654  141F  00A3               	movwf	setDimmerLights_Initialization@lights
 11655                           
 11656                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 11657  1420  0823               	movf	setDimmerLights_Initialization@lights,w
 11658  1421  3191  2101         	fcall	_DimmerLightsPointSelect
 11659                           
 11660                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(80*0.8));
 11661  1423  3040               	movlw	64
 11662  1424  0020               	movlb	0	; select bank0
 11663  1425  00A2               	movwf	??_setDimmerLights_Initialization
 11664  1426  0879               	movf	_DimmerLights,w
 11665  1427  3E05               	addlw	5
 11666  1428  0086               	movwf	6
 11667  1429  3001               	movlw	1	; select bank2/3
 11668  142A  0087               	movwf	7
 11669  142B  0822               	movf	??_setDimmerLights_Initialization,w
 11670  142C  0081               	movwf	1
 11671                           
 11672                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(10*0.8));
 11673  142D  3008               	movlw	8
 11674  142E  00A2               	movwf	??_setDimmerLights_Initialization
 11675  142F  0879               	movf	_DimmerLights,w
 11676  1430  3E06               	addlw	6
 11677  1431  0086               	movwf	6
 11678  1432  3001               	movlw	1	; select bank2/3
 11679  1433  0087               	movwf	7
 11680  1434  0822               	movf	??_setDimmerLights_Initialization,w
 11681  1435  0081               	movwf	1
 11682                           
 11683                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11684  1436  0879               	movf	_DimmerLights,w
 11685  1437  3E05               	addlw	5
 11686  1438  0086               	movwf	6
 11687  1439  3001               	movlw	1	; select bank2/3
 11688  143A  0087               	movwf	7
 11689  143B  0801               	movf	1,w
 11690  143C  00A2               	movwf	??_setDimmerLights_Initialization
 11691  143D  0879               	movf	_DimmerLights,w
 11692  143E  3E04               	addlw	4
 11693  143F  0086               	movwf	6
 11694  1440  3001               	movlw	1	; select bank2/3
 11695  1441  0087               	movwf	7
 11696  1442  0822               	movf	??_setDimmerLights_Initialization,w
 11697  1443  0081               	movwf	1
 11698  1444  0008               	return
 11699  1445                     __end_of_setDimmerLights_Initialization:	
 11700                           
 11701                           	psect	text69
 11702  1066                     __ptext69:	
 11703 ;; *************** function _Dimmer_Initialization *****************
 11704 ;; Defined at:
 11705 ;;		line 926 in file "../src/Dimmer_B1.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;		None               void
 11712 ;; Registers used:
 11713 ;;		None
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;Total ram usage:        0 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    5
 11726 ;; This function calls:
 11727 ;;		Nothing
 11728 ;; This function is called by:
 11729 ;;		_DimmerLights_Initialization
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           
 11734                           ;psect for function _Dimmer_Initialization
 11735  1066                     _Dimmer_Initialization:	
 11736                           
 11737                           ;incstack = 0
 11738                           ; Regs used in _Dimmer_Initialization: []
 11739  1066  0008               	return
 11740  1067                     __end_of_Dimmer_Initialization:	
 11741                           
 11742                           	psect	text70
 11743  1F3D                     __ptext70:	
 11744 ;; *************** function _DelayOff_Main *****************
 11745 ;; Defined at:
 11746 ;;		line 41 in file "../src/DelayOff_B1.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;		None
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;		None
 11751 ;; Return value:  Size  Location     Type
 11752 ;;		None               void
 11753 ;; Registers used:
 11754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;Total ram usage:        0 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:   11
 11767 ;; This function calls:
 11768 ;;		_DlyOff_Main
 11769 ;; This function is called by:
 11770 ;;		_main
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           
 11775                           ;psect for function _DelayOff_Main
 11776  1F3D                     _DelayOff_Main:	
 11777                           
 11778                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11782  1F3D  3001               	movlw	1
 11783  1F3E  3189  2190  319F   	fcall	_DlyOff_Main
 11784                           
 11785                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 11786  1F41  3002               	movlw	2
 11787  1F42  3189  2190         	fcall	_DlyOff_Main
 11788  1F44  0008               	return
 11789  1F45                     __end_of_DelayOff_Main:	
 11790                           
 11791                           	psect	text71
 11792  0990                     __ptext71:	
 11793 ;; *************** function _DlyOff_Main *****************
 11794 ;; Defined at:
 11795 ;;		line 62 in file "../src/DelayOff_B1.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;  sw              1    wreg     unsigned char 
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  sw              1   72[BANK0 ] unsigned char 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;		None               void
 11802 ;; Registers used:
 11803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;Total ram usage:        3 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; Hardware stack levels required when called:   10
 11816 ;; This function calls:
 11817 ;;		_DelayOffPointSelect
 11818 ;;		_getDimmerLights_Status
 11819 ;;		_setDimmerLights_SwOff
 11820 ;;		_setDimmerLights_SwOn
 11821 ;;		_setRF_DimmerLights
 11822 ;; This function is called by:
 11823 ;;		_DelayOff_Main
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           
 11828                           ;psect for function _DlyOff_Main
 11829  0990                     _DlyOff_Main:	
 11830                           
 11831                           ;incstack = 0
 11832                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11833                           ;DlyOff_Main@sw stored from wreg
 11834  0990  0020               	movlb	0	; select bank0
 11835  0991  00E8               	movwf	DlyOff_Main@sw
 11836                           
 11837                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 11838  0992  0868               	movf	DlyOff_Main@sw,w
 11839  0993  3191  2161  3189   	fcall	_DelayOffPointSelect
 11840                           
 11841                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 11842  0996  0878               	movf	_DelayOff,w
 11843  0997  0086               	movwf	6
 11844  0998  0187               	clrf	7
 11845  0999  1C81               	btfss	1,1
 11846  099A  0008               	return
 11847                           
 11848                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 11849  099B  0878               	movf	_DelayOff,w
 11850  099C  0086               	movwf	6
 11851  099D  0187               	clrf	7
 11852  099E  3001               	movlw	1
 11853  099F  0781               	addwf	1,f
 11854  09A0  3141               	addfsr 1,1
 11855  09A1  1803               	skipnc
 11856  09A2  0A81               	incf	1,f
 11857                           
 11858                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 11859  09A3  0878               	movf	_DelayOff,w
 11860  09A4  0086               	movwf	6
 11861  09A5  0187               	clrf	7
 11862  09A6  3F40               	moviw [0]fsr1
 11863  09A7  0020               	movlb	0	; select bank0
 11864  09A8  00E6               	movwf	??_DlyOff_Main
 11865  09A9  3F41               	moviw [1]fsr1
 11866  09AA  00E7               	movwf	??_DlyOff_Main+1
 11867  09AB  3016               	movlw	22
 11868  09AC  0267               	subwf	??_DlyOff_Main+1,w
 11869  09AD  3012               	movlw	18
 11870  09AE  1903               	skipnz
 11871  09AF  0266               	subwf	??_DlyOff_Main,w
 11872  09B0  1C03               	skipc
 11873  09B1  0008               	return
 11874                           
 11875                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 11876  09B2  0878               	movf	_DelayOff,w
 11877  09B3  0086               	movwf	6
 11878  09B4  0187               	clrf	7
 11879  09B5  3000               	movlw	0
 11880  09B6  3FC0               	movwi [0]fsr1
 11881  09B7  3FC1               	movwi [1]fsr1
 11882                           
 11883                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 11884  09B8  3001               	movlw	1
 11885  09B9  00E6               	movwf	??_DlyOff_Main
 11886  09BA  0878               	movf	_DelayOff,w
 11887  09BB  0086               	movwf	6
 11888  09BC  0187               	clrf	7
 11889  09BD  0866               	movf	??_DlyOff_Main,w
 11890  09BE  0781               	addwf	1,f
 11891                           
 11892                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 11893  09BF  0878               	movf	_DelayOff,w
 11894  09C0  0086               	movwf	6
 11895  09C1  0187               	clrf	7
 11896  09C2  0878               	movf	_DelayOff,w
 11897  09C3  0084               	movwf	4
 11898  09C4  0185               	clrf	5
 11899  09C5  0800               	movf	0,w
 11900  09C6  0201               	subwf	1,w
 11901  09C7  1C03               	skipc
 11902  09C8  0008               	return
 11903                           
 11904                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 11905  09C9  0878               	movf	_DelayOff,w
 11906  09CA  0086               	movwf	6
 11907  09CB  0187               	clrf	7
 11908  09CC  0181               	clrf	1
 11909                           
 11910                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 11911  09CD  0878               	movf	_DelayOff,w
 11912  09CE  0086               	movwf	6
 11913  09CF  0187               	clrf	7
 11914  09D0  1081               	bcf	1,1
 11915                           
 11916                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 11917  09D1  0868               	movf	DlyOff_Main@sw,w
 11918  09D2  3197  2770  3189   	fcall	_setDimmerLights_SwOn
 11919                           
 11920                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 11921  09D5  0020               	movlb	0	; select bank0
 11922  09D6  0868               	movf	DlyOff_Main@sw,w
 11923  09D7  319F  27F0  3189   	fcall	_getDimmerLights_Status
 11924  09DA  3A01               	xorlw	1
 11925  09DB  1D03               	skipz
 11926  09DC  29E2               	goto	l566
 11927                           
 11928                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 11929  09DD  0020               	movlb	0	; select bank0
 11930  09DE  0868               	movf	DlyOff_Main@sw,w
 11931  09DF  318B  23AA  3189   	fcall	_setDimmerLights_SwOff
 11932  09E2                     l566:	
 11933                           
 11934                           ;DelayOff_B1.c: 77: }
 11935                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 11936  09E2  0020               	movlb	0	; select bank0
 11937  09E3  01DD               	clrf	setRF_DimmerLights@on
 11938  09E4  0868               	movf	DlyOff_Main@sw,w
 11939  09E5  318D  2534         	fcall	_setRF_DimmerLights
 11940  09E7  0008               	return
 11941  09E8                     __end_of_DlyOff_Main:	
 11942                           
 11943                           	psect	text72
 11944  1770                     __ptext72:	
 11945 ;; *************** function _setDimmerLights_SwOn *****************
 11946 ;; Defined at:
 11947 ;;		line 519 in file "../src/Dimmer_B1.c"
 11948 ;; Parameters:    Size  Location     Type
 11949 ;;  sw              1    wreg     unsigned char 
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;  sw              1   68[BANK0 ] unsigned char 
 11952 ;;  idle            1   67[BANK0 ] unsigned char 
 11953 ;; Return value:  Size  Location     Type
 11954 ;;		None               void
 11955 ;; Registers used:
 11956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;Total ram usage:        3 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    9
 11969 ;; This function calls:
 11970 ;;		_DimmerLightsPointSelect
 11971 ;;		_getAll_DimmerLights_AdjGO
 11972 ;;		_setBuz
 11973 ;;		_setDimmerLights_Trigger
 11974 ;;		_setRF_DimmerLights
 11975 ;;		_setTxData
 11976 ;; This function is called by:
 11977 ;;		_DlyOff_Main
 11978 ;;		_setRFSW_Control
 11979 ;;		_setSw_Main
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           
 11984                           ;psect for function _setDimmerLights_SwOn
 11985  1770                     _setDimmerLights_SwOn:	
 11986                           
 11987                           ;incstack = 0
 11988                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11989                           ;setDimmerLights_SwOn@sw stored from wreg
 11990  1770  0020               	movlb	0	; select bank0
 11991  1771  00E4               	movwf	setDimmerLights_SwOn@sw
 11992                           
 11993                           ;Dimmer_B1.c: 520: DimmerLightsPointSelect(sw);
 11994  1772  0864               	movf	setDimmerLights_SwOn@sw,w
 11995  1773  3191  2101  3197   	fcall	_DimmerLightsPointSelect
 11996                           
 11997                           ;Dimmer_B1.c: 521: char idle = 0;
 11998  1776  0020               	movlb	0	; select bank0
 11999  1777  01E3               	clrf	setDimmerLights_SwOn@idle
 12000                           
 12001                           ;Dimmer_B1.c: 523: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 12002  1778  3190  2074  3197   	fcall	_getAll_DimmerLights_AdjGO
 12003  177B  3A01               	xorlw	1
 12004  177C  3000               	movlw	0
 12005  177D  1903               	skipnz
 12006  177E  3001               	movlw	1
 12007  177F  0020               	movlb	0	; select bank0
 12008  1780  00E2               	movwf	??_setDimmerLights_SwOn
 12009  1781  0862               	movf	??_setDimmerLights_SwOn,w
 12010  1782  00E3               	movwf	setDimmerLights_SwOn@idle
 12011                           
 12012                           ;Dimmer_B1.c: 525: if (idle == 0) {
 12013  1783  08E3               	movf	setDimmerLights_SwOn@idle,f
 12014  1784  1D03               	skipz
 12015  1785  0008               	return
 12016                           
 12017                           ;Dimmer_B1.c: 526: DimmerLights->SwFlag = 1;
 12018  1786  0879               	movf	_DimmerLights,w
 12019  1787  3E09               	addlw	9
 12020  1788  0086               	movwf	6
 12021  1789  3001               	movlw	1	; select bank2/3
 12022  178A  0087               	movwf	7
 12023  178B  1701               	bsf	1,6
 12024                           
 12025                           ;Dimmer_B1.c: 527: setBuz(1, 100);
 12026  178C  3064               	movlw	100
 12027  178D  00A9               	movwf	setBuz@time
 12028  178E  3000               	movlw	0
 12029  178F  00AA               	movwf	setBuz@time+1
 12030  1790  3001               	movlw	1
 12031  1791  318A  2240  3197   	fcall	_setBuz
 12032                           
 12033                           ;Dimmer_B1.c: 528: if (DimmerLights->Status == 0) {
 12034  1794  0879               	movf	_DimmerLights,w
 12035  1795  0086               	movwf	6
 12036  1796  3001               	movlw	1	; select bank2/3
 12037  1797  0087               	movwf	7
 12038  1798  1A81               	btfsc	1,5
 12039  1799  2FB0               	goto	l7888
 12040                           
 12041                           ;Dimmer_B1.c: 529: DimmerLights->Status = 1;
 12042  179A  0879               	movf	_DimmerLights,w
 12043  179B  0086               	movwf	6
 12044  179C  3001               	movlw	1	; select bank2/3
 12045  179D  0087               	movwf	7
 12046  179E  1681               	bsf	1,5
 12047                           
 12048                           ;Dimmer_B1.c: 530: setDimmerLights_Trigger(sw, 1);
 12049  179F  0020               	movlb	0	; select bank0
 12050  17A0  01A2               	clrf	setDimmerLights_Trigger@command
 12051  17A1  0AA2               	incf	setDimmerLights_Trigger@command,f
 12052  17A2  0864               	movf	setDimmerLights_SwOn@sw,w
 12053  17A3  3192  228B  3197   	fcall	_setDimmerLights_Trigger
 12054                           
 12055                           ;Dimmer_B1.c: 531: setRF_DimmerLights(sw, 1);
 12056  17A6  0020               	movlb	0	; select bank0
 12057  17A7  01DD               	clrf	setRF_DimmerLights@on
 12058  17A8  0ADD               	incf	setRF_DimmerLights@on,f
 12059  17A9  0864               	movf	setDimmerLights_SwOn@sw,w
 12060  17AA  318D  2534  3197   	fcall	_setRF_DimmerLights
 12061                           
 12062                           ;Dimmer_B1.c: 532: setTxData();
 12063  17AD  3185  25AF         	fcall	_setTxData
 12064                           
 12065                           ;Dimmer_B1.c: 533: } else {
 12066  17AF  0008               	return
 12067  17B0                     l7888:	
 12068                           
 12069                           ;Dimmer_B1.c: 534: DimmerLights->Status = 0;
 12070  17B0  0879               	movf	_DimmerLights,w
 12071  17B1  0086               	movwf	6
 12072  17B2  3001               	movlw	1	; select bank2/3
 12073  17B3  0087               	movwf	7
 12074  17B4  1281               	bcf	1,5
 12075  17B5  0008               	return
 12076  17B6                     __end_of_setDimmerLights_SwOn:	
 12077                           
 12078                           	psect	text73
 12079  0A40                     __ptext73:	
 12080 ;; *************** function _setBuz *****************
 12081 ;; Defined at:
 12082 ;;		line 22 in file "../src/Buzzer_B1.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  count           1    wreg     unsigned char 
 12085 ;;  time            2    9[BANK0 ] int 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  count           1   12[BANK0 ] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;		None               void
 12090 ;; Registers used:
 12091 ;;		wreg, status,2, status,0, pclath, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;Total ram usage:        4 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; Hardware stack levels required when called:    6
 12104 ;; This function calls:
 12105 ;;		___awdiv
 12106 ;; This function is called by:
 12107 ;;		_setDimmerLights_Main
 12108 ;;		_setDimmerLights_SwOn
 12109 ;;		_setLog_Code
 12110 ;;		_setControl_Lights_Table
 12111 ;;		_setSw_Main
 12112 ;;		_my_MainTimer
 12113 ;;		_setMain_Exception
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function _setBuz
 12119  0A40                     _setBuz:	
 12120                           
 12121                           ;incstack = 0
 12122                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 12123                           ;setBuz@count stored from wreg
 12124  0A40  0020               	movlb	0	; select bank0
 12125  0A41  00AC               	movwf	setBuz@count
 12126                           
 12127                           ;Buzzer_B1.c: 23: time /= 10;
 12128  0A42  300A               	movlw	10
 12129  0A43  00A0               	movwf	___awdiv@divisor
 12130  0A44  3000               	movlw	0
 12131  0A45  00A1               	movwf	___awdiv@divisor+1
 12132  0A46  082A               	movf	setBuz@time+1,w
 12133  0A47  01A3               	clrf	___awdiv@dividend+1
 12134  0A48  07A3               	addwf	___awdiv@dividend+1,f
 12135  0A49  0829               	movf	setBuz@time,w
 12136  0A4A  01A2               	clrf	___awdiv@dividend
 12137  0A4B  07A2               	addwf	___awdiv@dividend,f
 12138  0A4C  3188  20E5  318A   	fcall	___awdiv
 12139  0A4F  0020               	movlb	0	; select bank0
 12140  0A50  0821               	movf	?___awdiv+1,w
 12141  0A51  01AA               	clrf	setBuz@time+1
 12142  0A52  07AA               	addwf	setBuz@time+1,f
 12143  0A53  0820               	movf	?___awdiv,w
 12144  0A54  01A9               	clrf	setBuz@time
 12145  0A55  07A9               	addwf	setBuz@time,f
 12146                           
 12147                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 12148  0A56  0021               	movlb	1	; select bank1
 12149  0A57  1C30               	btfss	_Buz1^(0+128),0
 12150  0A58  0008               	return
 12151                           
 12152                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 12153  0A59  18B0               	btfsc	_Buz1^(0+128),1
 12154  0A5A  2A71               	goto	l92
 12155                           
 12156                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 12157  0A5B  14B0               	bsf	_Buz1^(0+128),1
 12158                           
 12159                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 12160  0A5C  01B1               	clrf	(_Buz1^(0+128)+1)
 12161  0A5D  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 12162                           
 12163                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 12164  0A5E  0020               	movlb	0	; select bank0
 12165  0A5F  082C               	movf	setBuz@count,w
 12166  0A60  00AB               	movwf	??_setBuz
 12167  0A61  082B               	movf	??_setBuz,w
 12168  0A62  0021               	movlb	1	; select bank1
 12169  0A63  00B3               	movwf	(_Buz1^(0+128)+3)
 12170                           
 12171                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 12172  0A64  0020               	movlb	0	; select bank0
 12173  0A65  082A               	movf	setBuz@time+1,w
 12174  0A66  0021               	movlb	1	; select bank1
 12175  0A67  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 12176  0A68  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 12177  0A69  0020               	movlb	0	; select bank0
 12178  0A6A  0829               	movf	setBuz@time,w
 12179  0A6B  0021               	movlb	1	; select bank1
 12180  0A6C  01B6               	clrf	(_Buz1^(0+128)+6)
 12181  0A6D  07B6               	addwf	(_Buz1^(0+128)+6),f
 12182                           
 12183                           ;Buzzer_B1.c: 30: RB3 = 1;
 12184  0A6E  0020               	movlb	0	; select bank0
 12185  0A6F  158D               	bsf	13,3	;volatile
 12186                           
 12187                           ;Buzzer_B1.c: 31: } else {
 12188  0A70  0008               	return
 12189  0A71                     l92:	
 12190                           
 12191                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 12192  0A71  19B0               	btfsc	_Buz1^(0+128),3
 12193  0A72  2A85               	goto	l94
 12194                           
 12195                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 12196  0A73  15B0               	bsf	_Buz1^(0+128),3
 12197                           
 12198                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 12199  0A74  0020               	movlb	0	; select bank0
 12200  0A75  082C               	movf	setBuz@count,w
 12201  0A76  00AB               	movwf	??_setBuz
 12202  0A77  082B               	movf	??_setBuz,w
 12203  0A78  0021               	movlb	1	; select bank1
 12204  0A79  00B4               	movwf	(_Buz1^(0+128)+4)
 12205                           
 12206                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 12207  0A7A  0020               	movlb	0	; select bank0
 12208  0A7B  082A               	movf	setBuz@time+1,w
 12209  0A7C  0021               	movlb	1	; select bank1
 12210  0A7D  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 12211  0A7E  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 12212  0A7F  0020               	movlb	0	; select bank0
 12213  0A80  0829               	movf	setBuz@time,w
 12214  0A81  0021               	movlb	1	; select bank1
 12215  0A82  01B8               	clrf	(_Buz1^(0+128)+8)
 12216  0A83  07B8               	addwf	(_Buz1^(0+128)+8),f
 12217                           
 12218                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 12219  0A84  0008               	return
 12220  0A85                     l94:	
 12221  0A85  1A30               	btfsc	_Buz1^(0+128),4
 12222  0A86  0008               	return
 12223                           
 12224                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 12225  0A87  1630               	bsf	_Buz1^(0+128),4
 12226                           
 12227                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 12228  0A88  0020               	movlb	0	; select bank0
 12229  0A89  082C               	movf	setBuz@count,w
 12230  0A8A  00AB               	movwf	??_setBuz
 12231  0A8B  082B               	movf	??_setBuz,w
 12232  0A8C  0021               	movlb	1	; select bank1
 12233  0A8D  00B5               	movwf	(_Buz1^(0+128)+5)
 12234                           
 12235                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 12236  0A8E  0020               	movlb	0	; select bank0
 12237  0A8F  082A               	movf	setBuz@time+1,w
 12238  0A90  0021               	movlb	1	; select bank1
 12239  0A91  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 12240  0A92  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 12241  0A93  0020               	movlb	0	; select bank0
 12242  0A94  0829               	movf	setBuz@time,w
 12243  0A95  0021               	movlb	1	; select bank1
 12244  0A96  01BA               	clrf	(_Buz1^(0+128)+10)
 12245  0A97  07BA               	addwf	(_Buz1^(0+128)+10),f
 12246  0A98  0008               	return
 12247  0A99                     __end_of_setBuz:	
 12248                           
 12249                           	psect	text74
 12250  08E5                     __ptext74:	
 12251 ;; *************** function ___awdiv *****************
 12252 ;; Defined at:
 12253 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;  divisor         2    0[BANK0 ] int 
 12256 ;;  dividend        2    2[BANK0 ] int 
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  quotient        2    7[BANK0 ] int 
 12259 ;;  sign            1    6[BANK0 ] unsigned char 
 12260 ;;  counter         1    5[BANK0 ] unsigned char 
 12261 ;; Return value:  Size  Location     Type
 12262 ;;                  2    0[BANK0 ] int 
 12263 ;; Registers used:
 12264 ;;		wreg, status,2, status,0
 12265 ;; Tracked objects:
 12266 ;;		On entry : 0/0
 12267 ;;		On exit  : 0/0
 12268 ;;		Unchanged: 0/0
 12269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;Total ram usage:        9 bytes
 12275 ;; Hardware stack levels used:    1
 12276 ;; Hardware stack levels required when called:    5
 12277 ;; This function calls:
 12278 ;;		Nothing
 12279 ;; This function is called by:
 12280 ;;		_setBuz
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           
 12285                           ;psect for function ___awdiv
 12286  08E5                     ___awdiv:	
 12287                           
 12288                           ;incstack = 0
 12289                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12290  08E5  0020               	movlb	0	; select bank0
 12291  08E6  01A6               	clrf	___awdiv@sign
 12292  08E7  1FA1               	btfss	___awdiv@divisor+1,7
 12293  08E8  28F0               	goto	l7682
 12294  08E9  09A0               	comf	___awdiv@divisor,f
 12295  08EA  09A1               	comf	___awdiv@divisor+1,f
 12296  08EB  0AA0               	incf	___awdiv@divisor,f
 12297  08EC  1903               	skipnz
 12298  08ED  0AA1               	incf	___awdiv@divisor+1,f
 12299  08EE  01A6               	clrf	___awdiv@sign
 12300  08EF  0AA6               	incf	___awdiv@sign,f
 12301  08F0                     l7682:	
 12302  08F0  1FA3               	btfss	___awdiv@dividend+1,7
 12303  08F1  28FB               	goto	l7688
 12304  08F2  09A2               	comf	___awdiv@dividend,f
 12305  08F3  09A3               	comf	___awdiv@dividend+1,f
 12306  08F4  0AA2               	incf	___awdiv@dividend,f
 12307  08F5  1903               	skipnz
 12308  08F6  0AA3               	incf	___awdiv@dividend+1,f
 12309  08F7  3001               	movlw	1
 12310  08F8  00A4               	movwf	??___awdiv
 12311  08F9  0824               	movf	??___awdiv,w
 12312  08FA  06A6               	xorwf	___awdiv@sign,f
 12313  08FB                     l7688:	
 12314  08FB  01A7               	clrf	___awdiv@quotient
 12315  08FC  01A8               	clrf	___awdiv@quotient+1
 12316  08FD  0821               	movf	___awdiv@divisor+1,w
 12317  08FE  0420               	iorwf	___awdiv@divisor,w
 12318  08FF  1903               	skipnz
 12319  0900  292A               	goto	l7710
 12320  0901  01A5               	clrf	___awdiv@counter
 12321  0902  0AA5               	incf	___awdiv@counter,f
 12322  0903                     l7698:	
 12323  0903  1BA1               	btfsc	___awdiv@divisor+1,7
 12324  0904  290F               	goto	l7700
 12325  0905  3001               	movlw	1
 12326  0906                     u7795:	
 12327  0906  35A0               	lslf	___awdiv@divisor,f
 12328  0907  0DA1               	rlf	___awdiv@divisor+1,f
 12329  0908  0B89               	decfsz	9,f
 12330  0909  2906               	goto	u7795
 12331  090A  3001               	movlw	1
 12332  090B  00A4               	movwf	??___awdiv
 12333  090C  0824               	movf	??___awdiv,w
 12334  090D  07A5               	addwf	___awdiv@counter,f
 12335  090E  2903               	goto	l7698
 12336  090F                     l7700:	
 12337  090F  3001               	movlw	1
 12338  0910                     u7815:	
 12339  0910  35A7               	lslf	___awdiv@quotient,f
 12340  0911  0DA8               	rlf	___awdiv@quotient+1,f
 12341  0912  0B89               	decfsz	9,f
 12342  0913  2910               	goto	u7815
 12343  0914  0821               	movf	___awdiv@divisor+1,w
 12344  0915  0223               	subwf	___awdiv@dividend+1,w
 12345  0916  1D03               	skipz
 12346  0917  291A               	goto	u7825
 12347  0918  0820               	movf	___awdiv@divisor,w
 12348  0919  0222               	subwf	___awdiv@dividend,w
 12349  091A                     u7825:	
 12350  091A  1C03               	skipc
 12351  091B  2921               	goto	l7706
 12352  091C  0820               	movf	___awdiv@divisor,w
 12353  091D  02A2               	subwf	___awdiv@dividend,f
 12354  091E  0821               	movf	___awdiv@divisor+1,w
 12355  091F  3BA3               	subwfb	___awdiv@dividend+1,f
 12356  0920  1427               	bsf	___awdiv@quotient,0
 12357  0921                     l7706:	
 12358  0921  3001               	movlw	1
 12359  0922                     u7835:	
 12360  0922  36A1               	lsrf	___awdiv@divisor+1,f
 12361  0923  0CA0               	rrf	___awdiv@divisor,f
 12362  0924  0B89               	decfsz	9,f
 12363  0925  2922               	goto	u7835
 12364  0926  3001               	movlw	1
 12365  0927  02A5               	subwf	___awdiv@counter,f
 12366  0928  1D03               	btfss	3,2
 12367  0929  290F               	goto	l7700
 12368  092A                     l7710:	
 12369  092A  0826               	movf	___awdiv@sign,w
 12370  092B  1903               	btfsc	3,2
 12371  092C  2932               	goto	l7714
 12372  092D  09A7               	comf	___awdiv@quotient,f
 12373  092E  09A8               	comf	___awdiv@quotient+1,f
 12374  092F  0AA7               	incf	___awdiv@quotient,f
 12375  0930  1903               	skipnz
 12376  0931  0AA8               	incf	___awdiv@quotient+1,f
 12377  0932                     l7714:	
 12378  0932  0828               	movf	___awdiv@quotient+1,w
 12379  0933  01A1               	clrf	?___awdiv+1
 12380  0934  07A1               	addwf	?___awdiv+1,f
 12381  0935  0827               	movf	___awdiv@quotient,w
 12382  0936  01A0               	clrf	?___awdiv
 12383  0937  07A0               	addwf	?___awdiv,f
 12384  0938  0008               	return
 12385  0939                     __end_of___awdiv:	
 12386                           
 12387                           	psect	text75
 12388  1074                     __ptext75:	
 12389 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 12390 ;; Defined at:
 12391 ;;		line 504 in file "../src/Dimmer_B1.c"
 12392 ;; Parameters:    Size  Location     Type
 12393 ;;		None
 12394 ;; Auto vars:     Size  Location     Type
 12395 ;;  adjgo           1    1[BANK0 ] unsigned char 
 12396 ;; Return value:  Size  Location     Type
 12397 ;;                  1    wreg      unsigned char 
 12398 ;; Registers used:
 12399 ;;		wreg, status,2
 12400 ;; Tracked objects:
 12401 ;;		On entry : 0/0
 12402 ;;		On exit  : 0/0
 12403 ;;		Unchanged: 0/0
 12404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;Total ram usage:        3 bytes
 12410 ;; Hardware stack levels used:    1
 12411 ;; Hardware stack levels required when called:    5
 12412 ;; This function calls:
 12413 ;;		Nothing
 12414 ;; This function is called by:
 12415 ;;		_setDimmerLights_SwOn
 12416 ;;		_setDimmerLights_AdjControl
 12417 ;; This function uses a non-reentrant model
 12418 ;;
 12419                           
 12420                           
 12421                           ;psect for function _getAll_DimmerLights_AdjGO
 12422  1074                     _getAll_DimmerLights_AdjGO:	
 12423                           
 12424                           ;Dimmer_B1.c: 505: char adjgo = 0;
 12425                           
 12426                           ;incstack = 0
 12427                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 12428  1074  0020               	movlb	0	; select bank0
 12429  1075  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 12430                           
 12431                           ;Dimmer_B1.c: 510: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 12432  1076  01A2               	clrf	_getAll_DimmerLights_AdjGO$2245
 12433  1077  0AA2               	incf	_getAll_DimmerLights_AdjGO$2245,f
 12434  1078  0022               	movlb	2	; select bank2
 12435  1079  1DC6               	btfss	(_DimmerLights1^(0+256)+8),3
 12436  107A  19D5               	btfsc	(_DimmerLights2^(0+256)+8),3
 12437  107B  287E               	goto	l7800
 12438  107C  0020               	movlb	0	; select bank0
 12439  107D  01A2               	clrf	_getAll_DimmerLights_AdjGO$2245
 12440  107E                     l7800:	
 12441  107E  0020               	movlb	0	; select bank0
 12442  107F  0822               	movf	_getAll_DimmerLights_AdjGO$2245,w
 12443  1080  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 12444  1081  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 12445  1082  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 12446                           
 12447                           ;Dimmer_B1.c: 515: return adjgo;
 12448  1083  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 12449  1084  0008               	return
 12450  1085                     __end_of_getAll_DimmerLights_AdjGO:	
 12451                           
 12452                           	psect	text76
 12453  0BAA                     __ptext76:	
 12454 ;; *************** function _setDimmerLights_SwOff *****************
 12455 ;; Defined at:
 12456 ;;		line 540 in file "../src/Dimmer_B1.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;  sw              1    wreg     unsigned char 
 12459 ;; Auto vars:     Size  Location     Type
 12460 ;;  sw              1   69[BANK0 ] unsigned char 
 12461 ;;  command         1   68[BANK0 ] unsigned char 
 12462 ;; Return value:  Size  Location     Type
 12463 ;;		None               void
 12464 ;; Registers used:
 12465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12466 ;; Tracked objects:
 12467 ;;		On entry : 0/0
 12468 ;;		On exit  : 0/0
 12469 ;;		Unchanged: 0/0
 12470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;Total ram usage:        4 bytes
 12476 ;; Hardware stack levels used:    1
 12477 ;; Hardware stack levels required when called:    9
 12478 ;; This function calls:
 12479 ;;		_DimmerLightsPointSelect
 12480 ;;		_setDelayOff_GO
 12481 ;;		_setDimmerLights_Trigger
 12482 ;;		_setDimmerLights_TriggerAdj
 12483 ;;		_setRF_DimmerLights
 12484 ;;		_setTxData
 12485 ;; This function is called by:
 12486 ;;		_DlyOff_Main
 12487 ;;		_setDimmerLights_ErrorClose
 12488 ;;		_setRFSW_Control
 12489 ;;		_setSw_Main
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           
 12494                           ;psect for function _setDimmerLights_SwOff
 12495  0BAA                     _setDimmerLights_SwOff:	
 12496                           
 12497                           ;incstack = 0
 12498                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12499                           ;setDimmerLights_SwOff@sw stored from wreg
 12500  0BAA  0020               	movlb	0	; select bank0
 12501  0BAB  00E5               	movwf	setDimmerLights_SwOff@sw
 12502                           
 12503                           ;Dimmer_B1.c: 541: DimmerLightsPointSelect(sw);
 12504  0BAC  0865               	movf	setDimmerLights_SwOff@sw,w
 12505  0BAD  3191  2101  318B   	fcall	_DimmerLightsPointSelect
 12506                           
 12507                           ;Dimmer_B1.c: 542: char command = DimmerLights->Status == 1 ? 1 : 0;
 12508  0BB0  0879               	movf	_DimmerLights,w
 12509  0BB1  0086               	movwf	6
 12510  0BB2  3001               	movlw	1	; select bank2/3
 12511  0BB3  0087               	movwf	7
 12512  0BB4  3000               	movlw	0
 12513  0BB5  1A81               	btfsc	1,5
 12514  0BB6  3001               	movlw	1
 12515  0BB7  0020               	movlb	0	; select bank0
 12516  0BB8  00E4               	movwf	setDimmerLights_SwOff@command
 12517                           
 12518                           ;Dimmer_B1.c: 543: if (DimmerLights->SwFlag == 1) {
 12519  0BB9  0879               	movf	_DimmerLights,w
 12520  0BBA  3E09               	addlw	9
 12521  0BBB  0086               	movwf	6
 12522  0BBC  3001               	movlw	1	; select bank2/3
 12523  0BBD  0087               	movwf	7
 12524  0BBE  1F01               	btfss	1,6
 12525  0BBF  0008               	return
 12526                           
 12527                           ;Dimmer_B1.c: 544: DimmerLights->SwFlag = 0;
 12528  0BC0  0879               	movf	_DimmerLights,w
 12529  0BC1  3E09               	addlw	9
 12530  0BC2  0086               	movwf	6
 12531  0BC3  3001               	movlw	1	; select bank2/3
 12532  0BC4  0087               	movwf	7
 12533  0BC5  1301               	bcf	1,6
 12534                           
 12535                           ;Dimmer_B1.c: 545: if (DimmerLights->Status == 1) {
 12536  0BC6  0879               	movf	_DimmerLights,w
 12537  0BC7  0086               	movwf	6
 12538  0BC8  3001               	movlw	1	; select bank2/3
 12539  0BC9  0087               	movwf	7
 12540  0BCA  1E81               	btfss	1,5
 12541  0BCB  2BF1               	goto	l7914
 12542                           
 12543                           ;Dimmer_B1.c: 546: if (DimmerLights->SwAdj == 1) {
 12544  0BCC  0879               	movf	_DimmerLights,w
 12545  0BCD  3E09               	addlw	9
 12546  0BCE  0086               	movwf	6
 12547  0BCF  3001               	movlw	1	; select bank2/3
 12548  0BD0  0087               	movwf	7
 12549  0BD1  1F81               	btfss	1,7
 12550  0BD2  2BFD               	goto	l793
 12551                           
 12552                           ;Dimmer_B1.c: 547: DimmerLights->SwAdj = 0;
 12553  0BD3  0879               	movf	_DimmerLights,w
 12554  0BD4  3E09               	addlw	9
 12555  0BD5  0086               	movwf	6
 12556  0BD6  3001               	movlw	1	; select bank2/3
 12557  0BD7  0087               	movwf	7
 12558  0BD8  1381               	bcf	1,7
 12559                           
 12560                           ;Dimmer_B1.c: 548: setDimmerLights_TriggerAdj(sw, 0);
 12561  0BD9  01A2               	clrf	setDimmerLights_TriggerAdj@command
 12562  0BDA  0865               	movf	setDimmerLights_SwOff@sw,w
 12563  0BDB  3192  22E7  318B   	fcall	_setDimmerLights_TriggerAdj
 12564                           
 12565                           ;Dimmer_B1.c: 549: product->Data[17]=product->Data[26 + sw];
 12566  0BDE  0020               	movlb	0	; select bank0
 12567  0BDF  0865               	movf	setDimmerLights_SwOff@sw,w
 12568  0BE0  3E1A               	addlw	26
 12569  0BE1  076F               	addwf	_product,w
 12570  0BE2  00E2               	movwf	??_setDimmerLights_SwOff
 12571  0BE3  0862               	movf	??_setDimmerLights_SwOff,w
 12572  0BE4  0086               	movwf	6
 12573  0BE5  3002               	movlw	2	; select bank4/5
 12574  0BE6  0087               	movwf	7
 12575  0BE7  0801               	movf	1,w
 12576  0BE8  00E3               	movwf	??_setDimmerLights_SwOff+1
 12577  0BE9  086F               	movf	_product,w
 12578  0BEA  3E11               	addlw	17
 12579  0BEB  0086               	movwf	6
 12580  0BEC  3002               	movlw	2	; select bank4/5
 12581  0BED  0087               	movwf	7
 12582  0BEE  0863               	movf	??_setDimmerLights_SwOff+1,w
 12583  0BEF  0081               	movwf	1
 12584                           
 12585                           ;Dimmer_B1.c: 552: }
 12586                           ;Dimmer_B1.c: 553: } else {
 12587  0BF0  2BFD               	goto	l793
 12588  0BF1                     l7914:	
 12589                           
 12590                           ;Dimmer_B1.c: 554: setDimmerLights_Trigger(sw, 0);
 12591  0BF1  01A2               	clrf	setDimmerLights_Trigger@command
 12592  0BF2  0865               	movf	setDimmerLights_SwOff@sw,w
 12593  0BF3  3192  228B  318B   	fcall	_setDimmerLights_Trigger
 12594                           
 12595                           ;Dimmer_B1.c: 555: setDelayOff_GO(sw, 0, 0);
 12596  0BF6  0020               	movlb	0	; select bank0
 12597  0BF7  01AA               	clrf	setDelayOff_GO@command
 12598  0BF8  01AB               	clrf	setDelayOff_GO@value
 12599  0BF9  0865               	movf	setDimmerLights_SwOff@sw,w
 12600  0BFA  318B  234E  318B   	fcall	_setDelayOff_GO
 12601  0BFD                     l793:	
 12602                           
 12603                           ;Dimmer_B1.c: 558: }
 12604                           ;Dimmer_B1.c: 559: setRF_DimmerLights(sw, command);
 12605  0BFD  0020               	movlb	0	; select bank0
 12606  0BFE  0864               	movf	setDimmerLights_SwOff@command,w
 12607  0BFF  00E2               	movwf	??_setDimmerLights_SwOff
 12608  0C00  0862               	movf	??_setDimmerLights_SwOff,w
 12609  0C01  00DD               	movwf	setRF_DimmerLights@on
 12610  0C02  0865               	movf	setDimmerLights_SwOff@sw,w
 12611  0C03  318D  2534  318B   	fcall	_setRF_DimmerLights
 12612                           
 12613                           ;Dimmer_B1.c: 560: setTxData();
 12614  0C06  3185  25AF         	fcall	_setTxData
 12615  0C08  0008               	return
 12616  0C09                     __end_of_setDimmerLights_SwOff:	
 12617                           
 12618                           	psect	text77
 12619  05AF                     __ptext77:	
 12620 ;; *************** function _setTxData *****************
 12621 ;; Defined at:
 12622 ;;		line 204 in file "../src/RF_Control_B1.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;		None
 12625 ;; Auto vars:     Size  Location     Type
 12626 ;;  i               1    0        unsigned char 
 12627 ;; Return value:  Size  Location     Type
 12628 ;;		None               void
 12629 ;; Registers used:
 12630 ;;		wreg, fsr1l, fsr1h
 12631 ;; Tracked objects:
 12632 ;;		On entry : 0/0
 12633 ;;		On exit  : 0/0
 12634 ;;		Unchanged: 0/0
 12635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;Total ram usage:        1 bytes
 12641 ;; Hardware stack levels used:    1
 12642 ;; Hardware stack levels required when called:    5
 12643 ;; This function calls:
 12644 ;;		Nothing
 12645 ;; This function is called by:
 12646 ;;		_setDimmerLights_SwOn
 12647 ;;		_setDimmerLights_SwOff
 12648 ;;		_setDimmerLights_Adj
 12649 ;;		_setControl_Lights_Table
 12650 ;;		_setRFSW_AdjControl
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _setTxData
 12656  05AF                     _setTxData:	
 12657                           
 12658                           ;RF_Control_B1.c: 205: char i;
 12659                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 12660                           
 12661                           ;incstack = 0
 12662                           ; Regs used in _setTxData: [wregfsr1]
 12663  05AF  0021               	movlb	1	; select bank1
 12664  05B0  1C3C               	btfss	_RF1^(0+128),0
 12665  05B1  0008               	return
 12666                           
 12667                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 12668  05B2  153C               	bsf	_RF1^(0+128),2
 12669                           
 12670                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 12671  05B3  3014               	movlw	20
 12672  05B4  00C3               	movwf	(_RF1^(0+128)+7)
 12673  05B5  3000               	movlw	0
 12674  05B6  00C4               	movwf	(_RF1^(0+128)+8)
 12675                           
 12676                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 12677  05B7  3063               	movlw	99
 12678  05B8  0020               	movlb	0	; select bank0
 12679  05B9  00A0               	movwf	??_setTxData
 12680  05BA  0820               	movf	??_setTxData,w
 12681  05BB  0022               	movlb	2	; select bank2
 12682  05BC  00A0               	movwf	_RF_Data^(0+256)
 12683                           
 12684                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 12685  05BD  3002               	movlw	2
 12686  05BE  0020               	movlb	0	; select bank0
 12687  05BF  00A0               	movwf	??_setTxData
 12688  05C0  0820               	movf	??_setTxData,w
 12689  05C1  0022               	movlb	2	; select bank2
 12690  05C2  00A1               	movwf	(_RF_Data^(0+256)+1)
 12691                           
 12692                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 12693  05C3  0020               	movlb	0	; select bank0
 12694  05C4  086F               	movf	_product,w
 12695  05C5  0086               	movwf	6
 12696  05C6  3002               	movlw	2	; select bank4/5
 12697  05C7  0087               	movwf	7
 12698  05C8  3002               	movlw	2	; select bank4/5
 12699  05C9  3F42               	moviw [2]fsr1
 12700  05CA  0022               	movlb	2	; select bank2
 12701  05CB  00A2               	movwf	(_RF_Data^(0+256)+2)
 12702                           
 12703                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 12704  05CC  0020               	movlb	0	; select bank0
 12705  05CD  086F               	movf	_product,w
 12706  05CE  0086               	movwf	6
 12707  05CF  3002               	movlw	2	; select bank4/5
 12708  05D0  0087               	movwf	7
 12709  05D1  3002               	movlw	2	; select bank4/5
 12710  05D2  3F43               	moviw [3]fsr1
 12711  05D3  0022               	movlb	2	; select bank2
 12712  05D4  00A3               	movwf	(_RF_Data^(0+256)+3)
 12713                           
 12714                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 12715  05D5  0020               	movlb	0	; select bank0
 12716  05D6  086F               	movf	_product,w
 12717  05D7  0086               	movwf	6
 12718  05D8  3002               	movlw	2	; select bank4/5
 12719  05D9  0087               	movwf	7
 12720  05DA  3002               	movlw	2	; select bank4/5
 12721  05DB  3F44               	moviw [4]fsr1
 12722  05DC  0022               	movlb	2	; select bank2
 12723  05DD  00A4               	movwf	(_RF_Data^(0+256)+4)
 12724                           
 12725                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 12726  05DE  0020               	movlb	0	; select bank0
 12727  05DF  086F               	movf	_product,w
 12728  05E0  0086               	movwf	6
 12729  05E1  3002               	movlw	2	; select bank4/5
 12730  05E2  0087               	movwf	7
 12731  05E3  3002               	movlw	2	; select bank4/5
 12732  05E4  3F45               	moviw [5]fsr1
 12733  05E5  0022               	movlb	2	; select bank2
 12734  05E6  00A5               	movwf	(_RF_Data^(0+256)+5)
 12735                           
 12736                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 12737  05E7  0020               	movlb	0	; select bank0
 12738  05E8  086F               	movf	_product,w
 12739  05E9  0086               	movwf	6
 12740  05EA  3002               	movlw	2	; select bank4/5
 12741  05EB  0087               	movwf	7
 12742  05EC  3002               	movlw	2	; select bank4/5
 12743  05ED  3F46               	moviw [6]fsr1
 12744  05EE  0022               	movlb	2	; select bank2
 12745  05EF  00A6               	movwf	(_RF_Data^(0+256)+6)
 12746                           
 12747                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 12748  05F0  0020               	movlb	0	; select bank0
 12749  05F1  086F               	movf	_product,w
 12750  05F2  0086               	movwf	6
 12751  05F3  3002               	movlw	2	; select bank4/5
 12752  05F4  0087               	movwf	7
 12753  05F5  3002               	movlw	2	; select bank4/5
 12754  05F6  3F47               	moviw [7]fsr1
 12755  05F7  0022               	movlb	2	; select bank2
 12756  05F8  00A7               	movwf	(_RF_Data^(0+256)+7)
 12757                           
 12758                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 12759  05F9  0020               	movlb	0	; select bank0
 12760  05FA  086F               	movf	_product,w
 12761  05FB  0086               	movwf	6
 12762  05FC  3002               	movlw	2	; select bank4/5
 12763  05FD  0087               	movwf	7
 12764  05FE  3002               	movlw	2	; select bank4/5
 12765  05FF  3F48               	moviw [8]fsr1
 12766  0600  0022               	movlb	2	; select bank2
 12767  0601  00A8               	movwf	(_RF_Data^(0+256)+8)
 12768                           
 12769                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 12770  0602  0020               	movlb	0	; select bank0
 12771  0603  086F               	movf	_product,w
 12772  0604  0086               	movwf	6
 12773  0605  3002               	movlw	2	; select bank4/5
 12774  0606  0087               	movwf	7
 12775  0607  3002               	movlw	2	; select bank4/5
 12776  0608  3F49               	moviw [9]fsr1
 12777  0609  0022               	movlb	2	; select bank2
 12778  060A  00A9               	movwf	(_RF_Data^(0+256)+9)
 12779                           
 12780                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 12781  060B  0020               	movlb	0	; select bank0
 12782  060C  086F               	movf	_product,w
 12783  060D  0086               	movwf	6
 12784  060E  3002               	movlw	2	; select bank4/5
 12785  060F  0087               	movwf	7
 12786  0610  3002               	movlw	2	; select bank4/5
 12787  0611  3F4A               	moviw [10]fsr1
 12788  0612  0022               	movlb	2	; select bank2
 12789  0613  00AA               	movwf	(_RF_Data^(0+256)+10)
 12790                           
 12791                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 12792  0614  0020               	movlb	0	; select bank0
 12793  0615  086F               	movf	_product,w
 12794  0616  0086               	movwf	6
 12795  0617  3002               	movlw	2	; select bank4/5
 12796  0618  0087               	movwf	7
 12797  0619  3002               	movlw	2	; select bank4/5
 12798  061A  3F4B               	moviw [11]fsr1
 12799  061B  0022               	movlb	2	; select bank2
 12800  061C  00AB               	movwf	(_RF_Data^(0+256)+11)
 12801                           
 12802                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 12803  061D  0020               	movlb	0	; select bank0
 12804  061E  086F               	movf	_product,w
 12805  061F  0086               	movwf	6
 12806  0620  3002               	movlw	2	; select bank4/5
 12807  0621  0087               	movwf	7
 12808  0622  3002               	movlw	2	; select bank4/5
 12809  0623  3F4C               	moviw [12]fsr1
 12810  0624  0022               	movlb	2	; select bank2
 12811  0625  00AC               	movwf	(_RF_Data^(0+256)+12)
 12812                           
 12813                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 12814  0626  0020               	movlb	0	; select bank0
 12815  0627  086F               	movf	_product,w
 12816  0628  0086               	movwf	6
 12817  0629  3002               	movlw	2	; select bank4/5
 12818  062A  0087               	movwf	7
 12819  062B  3002               	movlw	2	; select bank4/5
 12820  062C  3F4D               	moviw [13]fsr1
 12821  062D  0022               	movlb	2	; select bank2
 12822  062E  00AD               	movwf	(_RF_Data^(0+256)+13)
 12823                           
 12824                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 12825  062F  0020               	movlb	0	; select bank0
 12826  0630  086F               	movf	_product,w
 12827  0631  0086               	movwf	6
 12828  0632  3002               	movlw	2	; select bank4/5
 12829  0633  0087               	movwf	7
 12830  0634  3002               	movlw	2	; select bank4/5
 12831  0635  3F4E               	moviw [14]fsr1
 12832  0636  0022               	movlb	2	; select bank2
 12833  0637  00AE               	movwf	(_RF_Data^(0+256)+14)
 12834                           
 12835                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 12836  0638  0020               	movlb	0	; select bank0
 12837  0639  086F               	movf	_product,w
 12838  063A  0086               	movwf	6
 12839  063B  3002               	movlw	2	; select bank4/5
 12840  063C  0087               	movwf	7
 12841  063D  3002               	movlw	2	; select bank4/5
 12842  063E  3F4F               	moviw [15]fsr1
 12843  063F  0022               	movlb	2	; select bank2
 12844  0640  00AF               	movwf	(_RF_Data^(0+256)+15)
 12845                           
 12846                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 12847  0641  0020               	movlb	0	; select bank0
 12848  0642  086F               	movf	_product,w
 12849  0643  0086               	movwf	6
 12850  0644  3002               	movlw	2	; select bank4/5
 12851  0645  0087               	movwf	7
 12852  0646  3002               	movlw	2	; select bank4/5
 12853  0647  3F50               	moviw [16]fsr1
 12854  0648  0022               	movlb	2	; select bank2
 12855  0649  00B0               	movwf	(_RF_Data^(0+256)+16)
 12856                           
 12857                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 12858  064A  0020               	movlb	0	; select bank0
 12859  064B  086F               	movf	_product,w
 12860  064C  0086               	movwf	6
 12861  064D  3002               	movlw	2	; select bank4/5
 12862  064E  0087               	movwf	7
 12863  064F  3002               	movlw	2	; select bank4/5
 12864  0650  3F51               	moviw [17]fsr1
 12865  0651  0022               	movlb	2	; select bank2
 12866  0652  00B1               	movwf	(_RF_Data^(0+256)+17)
 12867                           
 12868                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 12869  0653  0020               	movlb	0	; select bank0
 12870  0654  086F               	movf	_product,w
 12871  0655  0086               	movwf	6
 12872  0656  3002               	movlw	2	; select bank4/5
 12873  0657  0087               	movwf	7
 12874  0658  3002               	movlw	2	; select bank4/5
 12875  0659  3F52               	moviw [18]fsr1
 12876  065A  0022               	movlb	2	; select bank2
 12877  065B  00B2               	movwf	(_RF_Data^(0+256)+18)
 12878                           
 12879                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 12880  065C  0020               	movlb	0	; select bank0
 12881  065D  086F               	movf	_product,w
 12882  065E  0086               	movwf	6
 12883  065F  3002               	movlw	2	; select bank4/5
 12884  0660  0087               	movwf	7
 12885  0661  3002               	movlw	2	; select bank4/5
 12886  0662  3F53               	moviw [19]fsr1
 12887  0663  0022               	movlb	2	; select bank2
 12888  0664  00B3               	movwf	(_RF_Data^(0+256)+19)
 12889                           
 12890                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 12891  0665  30D2               	movlw	210
 12892  0666  0020               	movlb	0	; select bank0
 12893  0667  00A0               	movwf	??_setTxData
 12894  0668  0820               	movf	??_setTxData,w
 12895  0669  0022               	movlb	2	; select bank2
 12896  066A  00B4               	movwf	(_RF_Data^(0+256)+20)
 12897  066B  0008               	return
 12898  066C                     __end_of_setTxData:	
 12899                           
 12900                           	psect	text78
 12901  0D34                     __ptext78:	
 12902 ;; *************** function _setRF_DimmerLights *****************
 12903 ;; Defined at:
 12904 ;;		line 532 in file "../src/RF_Control_B1.c"
 12905 ;; Parameters:    Size  Location     Type
 12906 ;;  lights          1    wreg     unsigned char 
 12907 ;;  on              1   61[BANK0 ] unsigned char 
 12908 ;; Auto vars:     Size  Location     Type
 12909 ;;  lights          1   65[BANK0 ] unsigned char 
 12910 ;;  status          1   64[BANK0 ] unsigned char 
 12911 ;; Return value:  Size  Location     Type
 12912 ;;		None               void
 12913 ;; Registers used:
 12914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;Total ram usage:        5 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    8
 12927 ;; This function calls:
 12928 ;;		_setPercentValue
 12929 ;; This function is called by:
 12930 ;;		_DlyOff_Main
 12931 ;;		_setDimmerLights_SwOn
 12932 ;;		_setDimmerLights_SwOff
 12933 ;;		_setDimmerLights_Adj
 12934 ;;		_setRFSW_Control
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function _setRF_DimmerLights
 12940  0D34                     _setRF_DimmerLights:	
 12941                           
 12942                           ;incstack = 0
 12943                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12944                           ;setRF_DimmerLights@lights stored from wreg
 12945  0D34  0020               	movlb	0	; select bank0
 12946  0D35  00E1               	movwf	setRF_DimmerLights@lights
 12947                           
 12948                           ;RF_Control_B1.c: 533: char status = 1;
 12949  0D36  01E0               	clrf	setRF_DimmerLights@status
 12950  0D37  0AE0               	incf	setRF_DimmerLights@status,f
 12951                           
 12952                           ;RF_Control_B1.c: 534: status <<= (lights - 1);
 12953  0D38  0861               	movf	setRF_DimmerLights@lights,w
 12954  0D39  3EFF               	addlw	-1
 12955  0D3A  0A89               	incf	9,f
 12956  0D3B  2D3E               	goto	u7900
 12957  0D3C                     u7905:	
 12958  0D3C  1003               	clrc
 12959  0D3D  0DE0               	rlf	setRF_DimmerLights@status,f
 12960  0D3E                     u7900:	
 12961  0D3E  3EFF               	addlw	-1
 12962  0D3F  1D03               	skipz
 12963  0D40  2D3C               	goto	u7905
 12964                           
 12965                           ;RF_Control_B1.c: 535: product->Data[11]=lights;
 12966  0D41  0861               	movf	setRF_DimmerLights@lights,w
 12967  0D42  00DE               	movwf	??_setRF_DimmerLights
 12968  0D43  086F               	movf	_product,w
 12969  0D44  3E0B               	addlw	11
 12970  0D45  0086               	movwf	6
 12971  0D46  3002               	movlw	2	; select bank4/5
 12972  0D47  0087               	movwf	7
 12973  0D48  085E               	movf	??_setRF_DimmerLights,w
 12974  0D49  0081               	movwf	1
 12975                           
 12976                           ;RF_Control_B1.c: 538: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12977  0D4A  3040               	movlw	64
 12978  0D4B  3197  272A  318D   	fcall	_setPercentValue
 12979  0D4E  0020               	movlb	0	; select bank0
 12980  0D4F  00DE               	movwf	??_setRF_DimmerLights
 12981  0D50  0861               	movf	setRF_DimmerLights@lights,w
 12982  0D51  3E14               	addlw	20
 12983  0D52  076F               	addwf	_product,w
 12984  0D53  00DF               	movwf	??_setRF_DimmerLights+1
 12985  0D54  085F               	movf	??_setRF_DimmerLights+1,w
 12986  0D55  0086               	movwf	6
 12987  0D56  3002               	movlw	2	; select bank4/5
 12988  0D57  0087               	movwf	7
 12989  0D58  085E               	movf	??_setRF_DimmerLights,w
 12990  0D59  0081               	movwf	1
 12991                           
 12992                           ;RF_Control_B1.c: 541: product->Data[9]=product->Data[20 + lights];
 12993  0D5A  0861               	movf	setRF_DimmerLights@lights,w
 12994  0D5B  3E14               	addlw	20
 12995  0D5C  076F               	addwf	_product,w
 12996  0D5D  00DE               	movwf	??_setRF_DimmerLights
 12997  0D5E  085E               	movf	??_setRF_DimmerLights,w
 12998  0D5F  0086               	movwf	6
 12999  0D60  3002               	movlw	2	; select bank4/5
 13000  0D61  0087               	movwf	7
 13001  0D62  0801               	movf	1,w
 13002  0D63  00DF               	movwf	??_setRF_DimmerLights+1
 13003  0D64  086F               	movf	_product,w
 13004  0D65  3E09               	addlw	9
 13005  0D66  0086               	movwf	6
 13006  0D67  3002               	movlw	2	; select bank4/5
 13007  0D68  0087               	movwf	7
 13008  0D69  085F               	movf	??_setRF_DimmerLights+1,w
 13009  0D6A  0081               	movwf	1
 13010                           
 13011                           ;RF_Control_B1.c: 542: product->Data[17]=product->Data[26 + lights];
 13012  0D6B  0861               	movf	setRF_DimmerLights@lights,w
 13013  0D6C  3E1A               	addlw	26
 13014  0D6D  076F               	addwf	_product,w
 13015  0D6E  00DE               	movwf	??_setRF_DimmerLights
 13016  0D6F  085E               	movf	??_setRF_DimmerLights,w
 13017  0D70  0086               	movwf	6
 13018  0D71  3002               	movlw	2	; select bank4/5
 13019  0D72  0087               	movwf	7
 13020  0D73  0801               	movf	1,w
 13021  0D74  00DF               	movwf	??_setRF_DimmerLights+1
 13022  0D75  086F               	movf	_product,w
 13023  0D76  3E11               	addlw	17
 13024  0D77  0086               	movwf	6
 13025  0D78  3002               	movlw	2	; select bank4/5
 13026  0D79  0087               	movwf	7
 13027  0D7A  085F               	movf	??_setRF_DimmerLights+1,w
 13028  0D7B  0081               	movwf	1
 13029                           
 13030                           ;RF_Control_B1.c: 543: if (on == 1) {
 13031  0D7C  085D               	movf	setRF_DimmerLights@on,w
 13032  0D7D  3A01               	xorlw	1
 13033  0D7E  1D03               	skipz
 13034  0D7F  2D90               	goto	l7762
 13035                           
 13036                           ;RF_Control_B1.c: 544: product->Data[15]=(product->Data[15] | status);
 13037  0D80  086F               	movf	_product,w
 13038  0D81  3E0F               	addlw	15
 13039  0D82  0086               	movwf	6
 13040  0D83  3002               	movlw	2	; select bank4/5
 13041  0D84  0087               	movwf	7
 13042  0D85  0801               	movf	1,w
 13043  0D86  0460               	iorwf	setRF_DimmerLights@status,w
 13044  0D87  00DE               	movwf	??_setRF_DimmerLights
 13045  0D88  086F               	movf	_product,w
 13046  0D89  3E0F               	addlw	15
 13047  0D8A  0086               	movwf	6
 13048  0D8B  3002               	movlw	2	; select bank4/5
 13049  0D8C  0087               	movwf	7
 13050  0D8D  085E               	movf	??_setRF_DimmerLights,w
 13051  0D8E  0081               	movwf	1
 13052                           
 13053                           ;RF_Control_B1.c: 545: } else {
 13054  0D8F  0008               	return
 13055  0D90                     l7762:	
 13056                           
 13057                           ;RF_Control_B1.c: 546: product->Data[15]=(product->Data[15]&(~status));
 13058  0D90  086F               	movf	_product,w
 13059  0D91  3E0F               	addlw	15
 13060  0D92  0086               	movwf	6
 13061  0D93  3002               	movlw	2	; select bank4/5
 13062  0D94  0087               	movwf	7
 13063  0D95  0960               	comf	setRF_DimmerLights@status,w
 13064  0D96  0501               	andwf	1,w
 13065  0D97  00DE               	movwf	??_setRF_DimmerLights
 13066  0D98  086F               	movf	_product,w
 13067  0D99  3E0F               	addlw	15
 13068  0D9A  0086               	movwf	6
 13069  0D9B  3002               	movlw	2	; select bank4/5
 13070  0D9C  0087               	movwf	7
 13071  0D9D  085E               	movf	??_setRF_DimmerLights,w
 13072  0D9E  0081               	movwf	1
 13073  0D9F  0008               	return
 13074  0DA0                     __end_of_setRF_DimmerLights:	
 13075                           
 13076                           	psect	text79
 13077  172A                     __ptext79:	
 13078 ;; *************** function _setPercentValue *****************
 13079 ;; Defined at:
 13080 ;;		line 908 in file "../src/Dimmer_B1.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;  value           1    wreg     unsigned char 
 13083 ;; Auto vars:     Size  Location     Type
 13084 ;;  value           1   57[BANK0 ] unsigned char 
 13085 ;;  i               3   58[BANK0 ] float 
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  1    wreg      unsigned char 
 13088 ;; Registers used:
 13089 ;;		wreg, status,2, status,0, pclath, cstack
 13090 ;; Tracked objects:
 13091 ;;		On entry : 0/0
 13092 ;;		On exit  : 0/0
 13093 ;;		Unchanged: 0/0
 13094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13098 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13099 ;;Total ram usage:        4 bytes
 13100 ;; Hardware stack levels used:    1
 13101 ;; Hardware stack levels required when called:    7
 13102 ;; This function calls:
 13103 ;;		___awtoft
 13104 ;;		___ftdiv
 13105 ;;		___fttol
 13106 ;; This function is called by:
 13107 ;;		_Flash_Memory_Initialization
 13108 ;;		_setRF_DimmerLights
 13109 ;; This function uses a non-reentrant model
 13110 ;;
 13111                           
 13112                           
 13113                           ;psect for function _setPercentValue
 13114  172A                     _setPercentValue:	
 13115                           
 13116                           ;incstack = 0
 13117                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13118                           ;setPercentValue@value stored from wreg
 13119  172A  0020               	movlb	0	; select bank0
 13120  172B  00D9               	movwf	setPercentValue@value
 13121                           
 13122                           ;Dimmer_B1.c: 916: float i = ((char)(80*0.8)) - ((char)(10*0.8));
 13123  172C  3000               	movlw	0
 13124  172D  00DA               	movwf	setPercentValue@i
 13125  172E  3060               	movlw	96
 13126  172F  00DB               	movwf	setPercentValue@i+1
 13127  1730  3042               	movlw	66
 13128  1731  00DC               	movwf	setPercentValue@i+2
 13129                           
 13130                           ;Dimmer_B1.c: 917: i /= 100;
 13131  1732  3000               	movlw	0
 13132  1733  00AE               	movwf	___ftdiv@f2
 13133  1734  30C8               	movlw	200
 13134  1735  00AF               	movwf	___ftdiv@f2+1
 13135  1736  3042               	movlw	66
 13136  1737  00B0               	movwf	___ftdiv@f2+2
 13137  1738  085A               	movf	setPercentValue@i,w
 13138  1739  00B1               	movwf	___ftdiv@f1
 13139  173A  085B               	movf	setPercentValue@i+1,w
 13140  173B  00B2               	movwf	___ftdiv@f1+1
 13141  173C  085C               	movf	setPercentValue@i+2,w
 13142  173D  00B3               	movwf	___ftdiv@f1+2
 13143  173E  3187  2720  3197   	fcall	___ftdiv
 13144  1741  0020               	movlb	0	; select bank0
 13145  1742  082E               	movf	?___ftdiv,w
 13146  1743  00DA               	movwf	setPercentValue@i
 13147  1744  082F               	movf	?___ftdiv+1,w
 13148  1745  00DB               	movwf	setPercentValue@i+1
 13149  1746  0830               	movf	?___ftdiv+2,w
 13150  1747  00DC               	movwf	setPercentValue@i+2
 13151                           
 13152                           ;Dimmer_B1.c: 919: return (100 - (char) ((value - ((char)(80*0.8))) / i));
 13153  1748  0859               	movf	setPercentValue@value,w
 13154  1749  3EC0               	addlw	192
 13155  174A  00A8               	movwf	___awtoft@c
 13156  174B  30FF               	movlw	255
 13157  174C  1803               	skipnc
 13158  174D  3000               	movlw	0
 13159  174E  00A9               	movwf	___awtoft@c+1
 13160  174F  3193  2347  3197   	fcall	___awtoft
 13161  1752  0020               	movlb	0	; select bank0
 13162  1753  0828               	movf	?___awtoft,w
 13163  1754  00B1               	movwf	___ftdiv@f1
 13164  1755  0829               	movf	?___awtoft+1,w
 13165  1756  00B2               	movwf	___ftdiv@f1+1
 13166  1757  082A               	movf	?___awtoft+2,w
 13167  1758  00B3               	movwf	___ftdiv@f1+2
 13168  1759  085A               	movf	setPercentValue@i,w
 13169  175A  00AE               	movwf	___ftdiv@f2
 13170  175B  085B               	movf	setPercentValue@i+1,w
 13171  175C  00AF               	movwf	___ftdiv@f2+1
 13172  175D  085C               	movf	setPercentValue@i+2,w
 13173  175E  00B0               	movwf	___ftdiv@f2+2
 13174  175F  3187  2720  3197   	fcall	___ftdiv
 13175  1762  0020               	movlb	0	; select bank0
 13176  1763  082E               	movf	?___ftdiv,w
 13177  1764  00CB               	movwf	___fttol@f1
 13178  1765  082F               	movf	?___ftdiv+1,w
 13179  1766  00CC               	movwf	___fttol@f1+1
 13180  1767  0830               	movf	?___ftdiv+2,w
 13181  1768  00CD               	movwf	___fttol@f1+2
 13182  1769  318F  2779         	fcall	___fttol
 13183  176B  0020               	movlb	0	; select bank0
 13184  176C  034B               	decf	?___fttol,w
 13185  176D  3AFF               	xorlw	255
 13186  176E  3E64               	addlw	100
 13187  176F  0008               	return
 13188  1770                     __end_of_setPercentValue:	
 13189                           
 13190                           	psect	text80
 13191  0F79                     __ptext80:	
 13192 ;; *************** function ___fttol *****************
 13193 ;; Defined at:
 13194 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;  f1              3   43[BANK0 ] float 
 13197 ;; Auto vars:     Size  Location     Type
 13198 ;;  lval            4   52[BANK0 ] unsigned long 
 13199 ;;  exp1            1   56[BANK0 ] unsigned char 
 13200 ;;  sign1           1   51[BANK0 ] unsigned char 
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  4   43[BANK0 ] long 
 13203 ;; Registers used:
 13204 ;;		wreg, status,2, status,0
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13210 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;Total ram usage:       14 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    5
 13217 ;; This function calls:
 13218 ;;		Nothing
 13219 ;; This function is called by:
 13220 ;;		_getPercentValue
 13221 ;;		_setPercentValue
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           
 13226                           ;psect for function ___fttol
 13227  0F79                     ___fttol:	
 13228                           
 13229                           ;incstack = 0
 13230                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13231  0F79  0020               	movlb	0	; select bank0
 13232  0F7A  084B               	movf	___fttol@f1,w
 13233  0F7B  00CF               	movwf	??___fttol
 13234  0F7C  084C               	movf	___fttol@f1+1,w
 13235  0F7D  00D0               	movwf	??___fttol+1
 13236  0F7E  084D               	movf	___fttol@f1+2,w
 13237  0F7F  00D1               	movwf	??___fttol+2
 13238  0F80  1003               	clrc
 13239  0F81  0D50               	rlf	??___fttol+1,w
 13240  0F82  0D51               	rlf	??___fttol+2,w
 13241  0F83  00D2               	movwf	??___fttol+3
 13242  0F84  0852               	movf	??___fttol+3,w
 13243  0F85  00D8               	movwf	___fttol@exp1
 13244  0F86  08D8               	movf	___fttol@exp1,f
 13245  0F87  1D03               	skipz
 13246  0F88  2F92               	goto	l7590
 13247  0F89  3000               	movlw	0
 13248  0F8A  00CE               	movwf	?___fttol+3
 13249  0F8B  3000               	movlw	0
 13250  0F8C  00CD               	movwf	?___fttol+2
 13251  0F8D  3000               	movlw	0
 13252  0F8E  00CC               	movwf	?___fttol+1
 13253  0F8F  3000               	movlw	0
 13254  0F90  00CB               	movwf	?___fttol
 13255  0F91  0008               	return
 13256  0F92                     l7590:	
 13257  0F92  084B               	movf	___fttol@f1,w
 13258  0F93  00CF               	movwf	??___fttol
 13259  0F94  084C               	movf	___fttol@f1+1,w
 13260  0F95  00D0               	movwf	??___fttol+1
 13261  0F96  084D               	movf	___fttol@f1+2,w
 13262  0F97  00D1               	movwf	??___fttol+2
 13263  0F98  3017               	movlw	23
 13264  0F99                     u7615:	
 13265  0F99  36D1               	lsrf	??___fttol+2,f
 13266  0F9A  0CD0               	rrf	??___fttol+1,f
 13267  0F9B  0CCF               	rrf	??___fttol,f
 13268  0F9C  0B89               	decfsz	9,f
 13269  0F9D  2F99               	goto	u7615
 13270  0F9E  084F               	movf	??___fttol,w
 13271  0F9F  00D2               	movwf	??___fttol+3
 13272  0FA0  0852               	movf	??___fttol+3,w
 13273  0FA1  00D3               	movwf	___fttol@sign1
 13274  0FA2  17CC               	bsf	___fttol@f1+1,7
 13275  0FA3  30FF               	movlw	255
 13276  0FA4  05CB               	andwf	___fttol@f1,f
 13277  0FA5  30FF               	movlw	255
 13278  0FA6  05CC               	andwf	___fttol@f1+1,f
 13279  0FA7  3000               	movlw	0
 13280  0FA8  05CD               	andwf	___fttol@f1+2,f
 13281  0FA9  084B               	movf	___fttol@f1,w
 13282  0FAA  00D4               	movwf	___fttol@lval
 13283  0FAB  084C               	movf	___fttol@f1+1,w
 13284  0FAC  00D5               	movwf	___fttol@lval+1
 13285  0FAD  084D               	movf	___fttol@f1+2,w
 13286  0FAE  00D6               	movwf	___fttol@lval+2
 13287  0FAF  01D7               	clrf	___fttol@lval+3
 13288  0FB0  308E               	movlw	142
 13289  0FB1  02D8               	subwf	___fttol@exp1,f
 13290  0FB2  1FD8               	btfss	___fttol@exp1,7
 13291  0FB3  2FD0               	goto	l7610
 13292  0FB4  0858               	movf	___fttol@exp1,w
 13293  0FB5  3A80               	xorlw	128
 13294  0FB6  3E8F               	addlw	143
 13295  0FB7  1803               	skipnc
 13296  0FB8  2FC2               	goto	l7608
 13297  0FB9  3000               	movlw	0
 13298  0FBA  00CE               	movwf	?___fttol+3
 13299  0FBB  3000               	movlw	0
 13300  0FBC  00CD               	movwf	?___fttol+2
 13301  0FBD  3000               	movlw	0
 13302  0FBE  00CC               	movwf	?___fttol+1
 13303  0FBF  3000               	movlw	0
 13304  0FC0  00CB               	movwf	?___fttol
 13305  0FC1  0008               	return
 13306  0FC2                     l7608:	
 13307  0FC2  3001               	movlw	1
 13308  0FC3                     u7645:	
 13309  0FC3  36D7               	lsrf	___fttol@lval+3,f
 13310  0FC4  0CD6               	rrf	___fttol@lval+2,f
 13311  0FC5  0CD5               	rrf	___fttol@lval+1,f
 13312  0FC6  0CD4               	rrf	___fttol@lval,f
 13313  0FC7  0B89               	decfsz	9,f
 13314  0FC8  2FC3               	goto	u7645
 13315  0FC9  3001               	movlw	1
 13316  0FCA  00CF               	movwf	??___fttol
 13317  0FCB  084F               	movf	??___fttol,w
 13318  0FCC  07D8               	addwf	___fttol@exp1,f
 13319  0FCD  1903               	btfsc	3,2
 13320  0FCE  2FE9               	goto	l7620
 13321  0FCF  2FC2               	goto	l7608
 13322  0FD0                     l7610:	
 13323  0FD0  3018               	movlw	24
 13324  0FD1  0258               	subwf	___fttol@exp1,w
 13325  0FD2  1C03               	skipc
 13326  0FD3  2FE6               	goto	l7618
 13327  0FD4  3000               	movlw	0
 13328  0FD5  00CE               	movwf	?___fttol+3
 13329  0FD6  3000               	movlw	0
 13330  0FD7  00CD               	movwf	?___fttol+2
 13331  0FD8  3000               	movlw	0
 13332  0FD9  00CC               	movwf	?___fttol+1
 13333  0FDA  3000               	movlw	0
 13334  0FDB  00CB               	movwf	?___fttol
 13335  0FDC  0008               	return
 13336  0FDD                     l7616:	
 13337  0FDD  3001               	movlw	1
 13338  0FDE                     u7675:	
 13339  0FDE  35D4               	lslf	___fttol@lval,f
 13340  0FDF  0DD5               	rlf	___fttol@lval+1,f
 13341  0FE0  0DD6               	rlf	___fttol@lval+2,f
 13342  0FE1  0DD7               	rlf	___fttol@lval+3,f
 13343  0FE2  0B89               	decfsz	9,f
 13344  0FE3  2FDE               	goto	u7675
 13345  0FE4  3001               	movlw	1
 13346  0FE5  02D8               	subwf	___fttol@exp1,f
 13347  0FE6                     l7618:	
 13348  0FE6  08D8               	movf	___fttol@exp1,f
 13349  0FE7  1D03               	skipz
 13350  0FE8  2FDD               	goto	l7616
 13351  0FE9                     l7620:	
 13352  0FE9  0853               	movf	___fttol@sign1,w
 13353  0FEA  1903               	btfsc	3,2
 13354  0FEB  2FF7               	goto	l7624
 13355  0FEC  09D4               	comf	___fttol@lval,f
 13356  0FED  09D5               	comf	___fttol@lval+1,f
 13357  0FEE  09D6               	comf	___fttol@lval+2,f
 13358  0FEF  09D7               	comf	___fttol@lval+3,f
 13359  0FF0  0AD4               	incf	___fttol@lval,f
 13360  0FF1  1903               	skipnz
 13361  0FF2  0AD5               	incf	___fttol@lval+1,f
 13362  0FF3  1903               	skipnz
 13363  0FF4  0AD6               	incf	___fttol@lval+2,f
 13364  0FF5  1903               	skipnz
 13365  0FF6  0AD7               	incf	___fttol@lval+3,f
 13366  0FF7                     l7624:	
 13367  0FF7  0857               	movf	___fttol@lval+3,w
 13368  0FF8  00CE               	movwf	?___fttol+3
 13369  0FF9  0856               	movf	___fttol@lval+2,w
 13370  0FFA  00CD               	movwf	?___fttol+2
 13371  0FFB  0855               	movf	___fttol@lval+1,w
 13372  0FFC  00CC               	movwf	?___fttol+1
 13373  0FFD  0854               	movf	___fttol@lval,w
 13374  0FFE  00CB               	movwf	?___fttol
 13375  0FFF  0008               	return
 13376  1000                     __end_of___fttol:	
 13377                           
 13378                           	psect	text81
 13379  0720                     __ptext81:	
 13380 ;; *************** function ___ftdiv *****************
 13381 ;; Defined at:
 13382 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;  f2              3   14[BANK0 ] float 
 13385 ;;  f1              3   17[BANK0 ] float 
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  f3              3   25[BANK0 ] float 
 13388 ;;  sign            1   29[BANK0 ] unsigned char 
 13389 ;;  exp             1   28[BANK0 ] unsigned char 
 13390 ;;  cntr            1   24[BANK0 ] unsigned char 
 13391 ;; Return value:  Size  Location     Type
 13392 ;;                  3   14[BANK0 ] float 
 13393 ;; Registers used:
 13394 ;;		wreg, status,2, status,0, pclath, cstack
 13395 ;; Tracked objects:
 13396 ;;		On entry : 0/0
 13397 ;;		On exit  : 0/0
 13398 ;;		Unchanged: 0/0
 13399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13400 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;Total ram usage:       16 bytes
 13405 ;; Hardware stack levels used:    1
 13406 ;; Hardware stack levels required when called:    6
 13407 ;; This function calls:
 13408 ;;		___ftpack
 13409 ;; This function is called by:
 13410 ;;		_getPercentValue
 13411 ;;		_setPercentValue
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           
 13416                           ;psect for function ___ftdiv
 13417  0720                     ___ftdiv:	
 13418                           
 13419                           ;incstack = 0
 13420                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13421  0720  0020               	movlb	0	; select bank0
 13422  0721  0831               	movf	___ftdiv@f1,w
 13423  0722  00B4               	movwf	??___ftdiv
 13424  0723  0832               	movf	___ftdiv@f1+1,w
 13425  0724  00B5               	movwf	??___ftdiv+1
 13426  0725  0833               	movf	___ftdiv@f1+2,w
 13427  0726  00B6               	movwf	??___ftdiv+2
 13428  0727  1003               	clrc
 13429  0728  0D35               	rlf	??___ftdiv+1,w
 13430  0729  0D36               	rlf	??___ftdiv+2,w
 13431  072A  00B7               	movwf	??___ftdiv+3
 13432  072B  0837               	movf	??___ftdiv+3,w
 13433  072C  00BC               	movwf	___ftdiv@exp
 13434  072D  08BC               	movf	___ftdiv@exp,f
 13435  072E  1D03               	skipz
 13436  072F  2F37               	goto	l7498
 13437  0730  3000               	movlw	0
 13438  0731  00AE               	movwf	?___ftdiv
 13439  0732  3000               	movlw	0
 13440  0733  00AF               	movwf	?___ftdiv+1
 13441  0734  3000               	movlw	0
 13442  0735  00B0               	movwf	?___ftdiv+2
 13443  0736  0008               	return
 13444  0737                     l7498:	
 13445  0737  082E               	movf	___ftdiv@f2,w
 13446  0738  00B4               	movwf	??___ftdiv
 13447  0739  082F               	movf	___ftdiv@f2+1,w
 13448  073A  00B5               	movwf	??___ftdiv+1
 13449  073B  0830               	movf	___ftdiv@f2+2,w
 13450  073C  00B6               	movwf	??___ftdiv+2
 13451  073D  1003               	clrc
 13452  073E  0D35               	rlf	??___ftdiv+1,w
 13453  073F  0D36               	rlf	??___ftdiv+2,w
 13454  0740  00B7               	movwf	??___ftdiv+3
 13455  0741  0837               	movf	??___ftdiv+3,w
 13456  0742  00BD               	movwf	___ftdiv@sign
 13457  0743  08BD               	movf	___ftdiv@sign,f
 13458  0744  1D03               	skipz
 13459  0745  2F4D               	goto	l7504
 13460  0746  3000               	movlw	0
 13461  0747  00AE               	movwf	?___ftdiv
 13462  0748  3000               	movlw	0
 13463  0749  00AF               	movwf	?___ftdiv+1
 13464  074A  3000               	movlw	0
 13465  074B  00B0               	movwf	?___ftdiv+2
 13466  074C  0008               	return
 13467  074D                     l7504:	
 13468  074D  3000               	movlw	0
 13469  074E  00B9               	movwf	___ftdiv@f3
 13470  074F  3000               	movlw	0
 13471  0750  00BA               	movwf	___ftdiv@f3+1
 13472  0751  3000               	movlw	0
 13473  0752  00BB               	movwf	___ftdiv@f3+2
 13474  0753  3089               	movlw	137
 13475  0754  073D               	addwf	___ftdiv@sign,w
 13476  0755  00B4               	movwf	??___ftdiv
 13477  0756  0834               	movf	??___ftdiv,w
 13478  0757  02BC               	subwf	___ftdiv@exp,f
 13479  0758  0831               	movf	___ftdiv@f1,w
 13480  0759  00B4               	movwf	??___ftdiv
 13481  075A  0832               	movf	___ftdiv@f1+1,w
 13482  075B  00B5               	movwf	??___ftdiv+1
 13483  075C  0833               	movf	___ftdiv@f1+2,w
 13484  075D  00B6               	movwf	??___ftdiv+2
 13485  075E  3010               	movlw	16
 13486  075F                     u7425:	
 13487  075F  36B6               	lsrf	??___ftdiv+2,f
 13488  0760  0CB5               	rrf	??___ftdiv+1,f
 13489  0761  0CB4               	rrf	??___ftdiv,f
 13490  0762  0B89               	decfsz	9,f
 13491  0763  2F5F               	goto	u7425
 13492  0764  0834               	movf	??___ftdiv,w
 13493  0765  00B7               	movwf	??___ftdiv+3
 13494  0766  0837               	movf	??___ftdiv+3,w
 13495  0767  00BD               	movwf	___ftdiv@sign
 13496  0768  082E               	movf	___ftdiv@f2,w
 13497  0769  00B4               	movwf	??___ftdiv
 13498  076A  082F               	movf	___ftdiv@f2+1,w
 13499  076B  00B5               	movwf	??___ftdiv+1
 13500  076C  0830               	movf	___ftdiv@f2+2,w
 13501  076D  00B6               	movwf	??___ftdiv+2
 13502  076E  3010               	movlw	16
 13503  076F                     u7435:	
 13504  076F  36B6               	lsrf	??___ftdiv+2,f
 13505  0770  0CB5               	rrf	??___ftdiv+1,f
 13506  0771  0CB4               	rrf	??___ftdiv,f
 13507  0772  0B89               	decfsz	9,f
 13508  0773  2F6F               	goto	u7435
 13509  0774  0834               	movf	??___ftdiv,w
 13510  0775  00B7               	movwf	??___ftdiv+3
 13511  0776  0837               	movf	??___ftdiv+3,w
 13512  0777  06BD               	xorwf	___ftdiv@sign,f
 13513  0778  3080               	movlw	128
 13514  0779  00B4               	movwf	??___ftdiv
 13515  077A  0834               	movf	??___ftdiv,w
 13516  077B  05BD               	andwf	___ftdiv@sign,f
 13517  077C  17B2               	bsf	___ftdiv@f1+1,7
 13518  077D  30FF               	movlw	255
 13519  077E  05B1               	andwf	___ftdiv@f1,f
 13520  077F  30FF               	movlw	255
 13521  0780  05B2               	andwf	___ftdiv@f1+1,f
 13522  0781  3000               	movlw	0
 13523  0782  05B3               	andwf	___ftdiv@f1+2,f
 13524  0783  17AF               	bsf	___ftdiv@f2+1,7
 13525  0784  30FF               	movlw	255
 13526  0785  05AE               	andwf	___ftdiv@f2,f
 13527  0786  30FF               	movlw	255
 13528  0787  05AF               	andwf	___ftdiv@f2+1,f
 13529  0788  3000               	movlw	0
 13530  0789  05B0               	andwf	___ftdiv@f2+2,f
 13531  078A  3018               	movlw	24
 13532  078B  00B4               	movwf	??___ftdiv
 13533  078C  0834               	movf	??___ftdiv,w
 13534  078D  00B8               	movwf	___ftdiv@cntr
 13535  078E                     l7518:	
 13536  078E  3001               	movlw	1
 13537  078F                     u7445:	
 13538  078F  35B9               	lslf	___ftdiv@f3,f
 13539  0790  0DBA               	rlf	___ftdiv@f3+1,f
 13540  0791  0DBB               	rlf	___ftdiv@f3+2,f
 13541  0792  0B89               	decfsz	9,f
 13542  0793  2F8F               	goto	u7445
 13543  0794  0830               	movf	___ftdiv@f2+2,w
 13544  0795  0233               	subwf	___ftdiv@f1+2,w
 13545  0796  1D03               	skipz
 13546  0797  2F9E               	goto	u7455
 13547  0798  082F               	movf	___ftdiv@f2+1,w
 13548  0799  0232               	subwf	___ftdiv@f1+1,w
 13549  079A  1D03               	skipz
 13550  079B  2F9E               	goto	u7455
 13551  079C  082E               	movf	___ftdiv@f2,w
 13552  079D  0231               	subwf	___ftdiv@f1,w
 13553  079E                     u7455:	
 13554  079E  1C03               	skipc
 13555  079F  2FA7               	goto	l7526
 13556  07A0  082E               	movf	___ftdiv@f2,w
 13557  07A1  02B1               	subwf	___ftdiv@f1,f
 13558  07A2  082F               	movf	___ftdiv@f2+1,w
 13559  07A3  3BB2               	subwfb	___ftdiv@f1+1,f
 13560  07A4  0830               	movf	___ftdiv@f2+2,w
 13561  07A5  3BB3               	subwfb	___ftdiv@f1+2,f
 13562  07A6  1439               	bsf	___ftdiv@f3,0
 13563  07A7                     l7526:	
 13564  07A7  3001               	movlw	1
 13565  07A8                     u7465:	
 13566  07A8  35B1               	lslf	___ftdiv@f1,f
 13567  07A9  0DB2               	rlf	___ftdiv@f1+1,f
 13568  07AA  0DB3               	rlf	___ftdiv@f1+2,f
 13569  07AB  0B89               	decfsz	9,f
 13570  07AC  2FA8               	goto	u7465
 13571  07AD  3001               	movlw	1
 13572  07AE  02B8               	subwf	___ftdiv@cntr,f
 13573  07AF  1D03               	btfss	3,2
 13574  07B0  2F8E               	goto	l7518
 13575  07B1  0839               	movf	___ftdiv@f3,w
 13576  07B2  00A0               	movwf	___ftpack@arg
 13577  07B3  083A               	movf	___ftdiv@f3+1,w
 13578  07B4  00A1               	movwf	___ftpack@arg+1
 13579  07B5  083B               	movf	___ftdiv@f3+2,w
 13580  07B6  00A2               	movwf	___ftpack@arg+2
 13581  07B7  083C               	movf	___ftdiv@exp,w
 13582  07B8  00B4               	movwf	??___ftdiv
 13583  07B9  0834               	movf	??___ftdiv,w
 13584  07BA  00A3               	movwf	___ftpack@exp
 13585  07BB  083D               	movf	___ftdiv@sign,w
 13586  07BC  00B5               	movwf	??___ftdiv+1
 13587  07BD  0835               	movf	??___ftdiv+1,w
 13588  07BE  00A4               	movwf	___ftpack@sign
 13589  07BF  318C  2409         	fcall	___ftpack
 13590  07C1  0020               	movlb	0	; select bank0
 13591  07C2  0820               	movf	?___ftpack,w
 13592  07C3  00AE               	movwf	?___ftdiv
 13593  07C4  0821               	movf	?___ftpack+1,w
 13594  07C5  00AF               	movwf	?___ftdiv+1
 13595  07C6  0822               	movf	?___ftpack+2,w
 13596  07C7  00B0               	movwf	?___ftdiv+2
 13597  07C8  0008               	return
 13598  07C9                     __end_of___ftdiv:	
 13599                           
 13600                           	psect	text82
 13601  1347                     __ptext82:	
 13602 ;; *************** function ___awtoft *****************
 13603 ;; Defined at:
 13604 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;  c               2    8[BANK0 ] int 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;  sign            1   13[BANK0 ] unsigned char 
 13609 ;; Return value:  Size  Location     Type
 13610 ;;                  3    8[BANK0 ] float 
 13611 ;; Registers used:
 13612 ;;		wreg, status,2, status,0, pclath, cstack
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13618 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;Total ram usage:        6 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    6
 13625 ;; This function calls:
 13626 ;;		___ftpack
 13627 ;; This function is called by:
 13628 ;;		_getPercentValue
 13629 ;;		_setPercentValue
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function ___awtoft
 13635  1347                     ___awtoft:	
 13636                           
 13637                           ;incstack = 0
 13638                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13639  1347  0020               	movlb	0	; select bank0
 13640  1348  01AD               	clrf	___awtoft@sign
 13641  1349  1FA9               	btfss	___awtoft@c+1,7
 13642  134A  2B52               	goto	l7416
 13643  134B  09A8               	comf	___awtoft@c,f
 13644  134C  09A9               	comf	___awtoft@c+1,f
 13645  134D  0AA8               	incf	___awtoft@c,f
 13646  134E  1903               	skipnz
 13647  134F  0AA9               	incf	___awtoft@c+1,f
 13648  1350  01AD               	clrf	___awtoft@sign
 13649  1351  0AAD               	incf	___awtoft@sign,f
 13650  1352                     l7416:	
 13651  1352  0828               	movf	___awtoft@c,w
 13652  1353  00A0               	movwf	___ftpack@arg
 13653  1354  0829               	movf	___awtoft@c+1,w
 13654  1355  00A1               	movwf	___ftpack@arg+1
 13655  1356  01A2               	clrf	___ftpack@arg+2
 13656  1357  308E               	movlw	142
 13657  1358  00AB               	movwf	??___awtoft
 13658  1359  082B               	movf	??___awtoft,w
 13659  135A  00A3               	movwf	___ftpack@exp
 13660  135B  082D               	movf	___awtoft@sign,w
 13661  135C  00AC               	movwf	??___awtoft+1
 13662  135D  082C               	movf	??___awtoft+1,w
 13663  135E  00A4               	movwf	___ftpack@sign
 13664  135F  318C  2409         	fcall	___ftpack
 13665  1361  0020               	movlb	0	; select bank0
 13666  1362  0820               	movf	?___ftpack,w
 13667  1363  00A8               	movwf	?___awtoft
 13668  1364  0821               	movf	?___ftpack+1,w
 13669  1365  00A9               	movwf	?___awtoft+1
 13670  1366  0822               	movf	?___ftpack+2,w
 13671  1367  00AA               	movwf	?___awtoft+2
 13672  1368  0008               	return
 13673  1369                     __end_of___awtoft:	
 13674                           
 13675                           	psect	text83
 13676  0C09                     __ptext83:	
 13677 ;; *************** function ___ftpack *****************
 13678 ;; Defined at:
 13679 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;  arg             3    0[BANK0 ] unsigned um
 13682 ;;  exp             1    3[BANK0 ] unsigned char 
 13683 ;;  sign            1    4[BANK0 ] unsigned char 
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;		None
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  3    0[BANK0 ] float 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2, status,0
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13695 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;Total ram usage:        8 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    5
 13702 ;; This function calls:
 13703 ;;		Nothing
 13704 ;; This function is called by:
 13705 ;;		___awtoft
 13706 ;;		___ftadd
 13707 ;;		___ftdiv
 13708 ;;		___ftmul
 13709 ;; This function uses a non-reentrant model
 13710 ;;
 13711                           
 13712                           
 13713                           ;psect for function ___ftpack
 13714  0C09                     ___ftpack:	
 13715                           
 13716                           ;incstack = 0
 13717                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13718  0C09  0020               	movlb	0	; select bank0
 13719  0C0A  0823               	movf	___ftpack@exp,w
 13720  0C0B  1903               	btfsc	3,2
 13721  0C0C  2C12               	goto	l7366
 13722  0C0D  0822               	movf	___ftpack@arg+2,w
 13723  0C0E  0421               	iorwf	___ftpack@arg+1,w
 13724  0C0F  0420               	iorwf	___ftpack@arg,w
 13725  0C10  1D03               	skipz
 13726  0C11  2C23               	goto	l7372
 13727  0C12                     l7366:	
 13728  0C12  3000               	movlw	0
 13729  0C13  00A0               	movwf	?___ftpack
 13730  0C14  3000               	movlw	0
 13731  0C15  00A1               	movwf	?___ftpack+1
 13732  0C16  3000               	movlw	0
 13733  0C17  00A2               	movwf	?___ftpack+2
 13734  0C18  0008               	return
 13735  0C19                     l7370:	
 13736  0C19  3001               	movlw	1
 13737  0C1A  00A5               	movwf	??___ftpack
 13738  0C1B  0825               	movf	??___ftpack,w
 13739  0C1C  07A3               	addwf	___ftpack@exp,f
 13740  0C1D  3001               	movlw	1
 13741  0C1E                     u7055:	
 13742  0C1E  36A2               	lsrf	___ftpack@arg+2,f
 13743  0C1F  0CA1               	rrf	___ftpack@arg+1,f
 13744  0C20  0CA0               	rrf	___ftpack@arg,f
 13745  0C21  0B89               	decfsz	9,f
 13746  0C22  2C1E               	goto	u7055
 13747  0C23                     l7372:	
 13748  0C23  30FE               	movlw	254
 13749  0C24  0522               	andwf	___ftpack@arg+2,w
 13750  0C25  1903               	btfsc	3,2
 13751  0C26  2C3C               	goto	l2670
 13752  0C27  2C19               	goto	l7370
 13753  0C28                     l7374:	
 13754  0C28  3001               	movlw	1
 13755  0C29  00A5               	movwf	??___ftpack
 13756  0C2A  0825               	movf	??___ftpack,w
 13757  0C2B  07A3               	addwf	___ftpack@exp,f
 13758  0C2C  3001               	movlw	1
 13759  0C2D  07A0               	addwf	___ftpack@arg,f
 13760  0C2E  3000               	movlw	0
 13761  0C2F  1803               	skipnc
 13762  0C30  3001               	movlw	1
 13763  0C31  07A1               	addwf	___ftpack@arg+1,f
 13764  0C32  3000               	movlw	0
 13765  0C33  1803               	skipnc
 13766  0C34  3001               	movlw	1
 13767  0C35  07A2               	addwf	___ftpack@arg+2,f
 13768  0C36  3001               	movlw	1
 13769  0C37                     u7075:	
 13770  0C37  36A2               	lsrf	___ftpack@arg+2,f
 13771  0C38  0CA1               	rrf	___ftpack@arg+1,f
 13772  0C39  0CA0               	rrf	___ftpack@arg,f
 13773  0C3A  0B89               	decfsz	9,f
 13774  0C3B  2C37               	goto	u7075
 13775  0C3C                     l2670:	
 13776  0C3C  30FF               	movlw	255
 13777  0C3D  0522               	andwf	___ftpack@arg+2,w
 13778  0C3E  1903               	btfsc	3,2
 13779  0C3F  2C49               	goto	l7382
 13780  0C40  2C28               	goto	l7374
 13781  0C41                     l7380:	
 13782  0C41  3001               	movlw	1
 13783  0C42  02A3               	subwf	___ftpack@exp,f
 13784  0C43  3001               	movlw	1
 13785  0C44                     u7095:	
 13786  0C44  35A0               	lslf	___ftpack@arg,f
 13787  0C45  0DA1               	rlf	___ftpack@arg+1,f
 13788  0C46  0DA2               	rlf	___ftpack@arg+2,f
 13789  0C47  0B89               	decfsz	9,f
 13790  0C48  2C44               	goto	u7095
 13791  0C49                     l7382:	
 13792  0C49  1FA1               	btfss	___ftpack@arg+1,7
 13793  0C4A  2C41               	goto	l7380
 13794  0C4B  1823               	btfsc	___ftpack@exp,0
 13795  0C4C  2C53               	goto	l2676
 13796  0C4D  30FF               	movlw	255
 13797  0C4E  05A0               	andwf	___ftpack@arg,f
 13798  0C4F  307F               	movlw	127
 13799  0C50  05A1               	andwf	___ftpack@arg+1,f
 13800  0C51  30FF               	movlw	255
 13801  0C52  05A2               	andwf	___ftpack@arg+2,f
 13802  0C53                     l2676:	
 13803  0C53  1003               	clrc
 13804  0C54  0CA3               	rrf	___ftpack@exp,f
 13805  0C55  0823               	movf	___ftpack@exp,w
 13806  0C56  00A5               	movwf	??___ftpack
 13807  0C57  01A6               	clrf	??___ftpack+1
 13808  0C58  01A7               	clrf	??___ftpack+2
 13809  0C59  3010               	movlw	16
 13810  0C5A                     u7125:	
 13811  0C5A  35A5               	lslf	??___ftpack,f
 13812  0C5B  0DA6               	rlf	??___ftpack+1,f
 13813  0C5C  0DA7               	rlf	??___ftpack+2,f
 13814  0C5D  0B89               	decfsz	9,f
 13815  0C5E  2C5A               	goto	u7125
 13816  0C5F  0825               	movf	??___ftpack,w
 13817  0C60  04A0               	iorwf	___ftpack@arg,f
 13818  0C61  0826               	movf	??___ftpack+1,w
 13819  0C62  04A1               	iorwf	___ftpack@arg+1,f
 13820  0C63  0827               	movf	??___ftpack+2,w
 13821  0C64  04A2               	iorwf	___ftpack@arg+2,f
 13822  0C65  0824               	movf	___ftpack@sign,w
 13823  0C66  1903               	btfsc	3,2
 13824  0C67  0008               	return
 13825  0C68  17A2               	bsf	___ftpack@arg+2,7
 13826  0C69  0008               	return
 13827  0C6A                     __end_of___ftpack:	
 13828                           
 13829                           	psect	text84
 13830  12E7                     __ptext84:	
 13831 ;; *************** function _setDimmerLights_TriggerAdj *****************
 13832 ;; Defined at:
 13833 ;;		line 807 in file "../src/Dimmer_B1.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;  lights          1    wreg     unsigned char 
 13836 ;;  command         1    2[BANK0 ] unsigned char 
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;  lights          1    4[BANK0 ] unsigned char 
 13839 ;; Return value:  Size  Location     Type
 13840 ;;		None               void
 13841 ;; Registers used:
 13842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13843 ;; Tracked objects:
 13844 ;;		On entry : 0/0
 13845 ;;		On exit  : 0/0
 13846 ;;		Unchanged: 0/0
 13847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13848 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;Total ram usage:        3 bytes
 13853 ;; Hardware stack levels used:    1
 13854 ;; Hardware stack levels required when called:    6
 13855 ;; This function calls:
 13856 ;;		_DimmerLightsPointSelect
 13857 ;; This function is called by:
 13858 ;;		_setDimmerLights_SwOff
 13859 ;;		_setDimmerLights_AdjControl
 13860 ;; This function uses a non-reentrant model
 13861 ;;
 13862                           
 13863                           
 13864                           ;psect for function _setDimmerLights_TriggerAdj
 13865  12E7                     _setDimmerLights_TriggerAdj:	
 13866                           
 13867                           ;incstack = 0
 13868                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13869                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 13870  12E7  0020               	movlb	0	; select bank0
 13871  12E8  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 13872                           
 13873                           ;Dimmer_B1.c: 808: DimmerLightsPointSelect(lights);
 13874  12E9  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 13875  12EA  3191  2101         	fcall	_DimmerLightsPointSelect
 13876                           
 13877                           ;Dimmer_B1.c: 809: DimmerLights->TriggerAdj = 1;
 13878  12EC  0879               	movf	_DimmerLights,w
 13879  12ED  3E08               	addlw	8
 13880  12EE  0086               	movwf	6
 13881  12EF  3001               	movlw	1	; select bank2/3
 13882  12F0  0087               	movwf	7
 13883  12F1  1601               	bsf	1,4
 13884                           
 13885                           ;Dimmer_B1.c: 810: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 13886  12F2  0020               	movlb	0	; select bank0
 13887  12F3  0822               	movf	setDimmerLights_TriggerAdj@command,w
 13888  12F4  3A01               	xorlw	1
 13889  12F5  3000               	movlw	0
 13890  12F6  1903               	skipnz
 13891  12F7  3001               	movlw	1
 13892  12F8  00A3               	movwf	??_setDimmerLights_TriggerAdj
 13893  12F9  0879               	movf	_DimmerLights,w
 13894  12FA  3E08               	addlw	8
 13895  12FB  0086               	movwf	6
 13896  12FC  3001               	movlw	1	; select bank2/3
 13897  12FD  0087               	movwf	7
 13898  12FE  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 13899  12FF  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 13900  1300  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 13901  1301  0801               	movf	1,w
 13902  1302  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 13903  1303  39F7               	andlw	-9
 13904  1304  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 13905  1305  0081               	movwf	1
 13906  1306  0008               	return
 13907  1307                     __end_of_setDimmerLights_TriggerAdj:	
 13908                           
 13909                           	psect	text85
 13910  128B                     __ptext85:	
 13911 ;; *************** function _setDimmerLights_Trigger *****************
 13912 ;; Defined at:
 13913 ;;		line 801 in file "../src/Dimmer_B1.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;  lights          1    wreg     unsigned char 
 13916 ;;  command         1    2[BANK0 ] unsigned char 
 13917 ;; Auto vars:     Size  Location     Type
 13918 ;;  lights          1    4[BANK0 ] unsigned char 
 13919 ;; Return value:  Size  Location     Type
 13920 ;;		None               void
 13921 ;; Registers used:
 13922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13923 ;; Tracked objects:
 13924 ;;		On entry : 0/0
 13925 ;;		On exit  : 0/0
 13926 ;;		Unchanged: 0/0
 13927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13928 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;Total ram usage:        3 bytes
 13933 ;; Hardware stack levels used:    1
 13934 ;; Hardware stack levels required when called:    6
 13935 ;; This function calls:
 13936 ;;		_DimmerLightsPointSelect
 13937 ;; This function is called by:
 13938 ;;		_setDimmerLights_SwOn
 13939 ;;		_setDimmerLights_SwOff
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           
 13944                           ;psect for function _setDimmerLights_Trigger
 13945  128B                     _setDimmerLights_Trigger:	
 13946                           
 13947                           ;incstack = 0
 13948                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13949                           ;setDimmerLights_Trigger@lights stored from wreg
 13950  128B  0020               	movlb	0	; select bank0
 13951  128C  00A4               	movwf	setDimmerLights_Trigger@lights
 13952                           
 13953                           ;Dimmer_B1.c: 802: DimmerLightsPointSelect(lights);
 13954  128D  0824               	movf	setDimmerLights_Trigger@lights,w
 13955  128E  3191  2101         	fcall	_DimmerLightsPointSelect
 13956                           
 13957                           ;Dimmer_B1.c: 803: DimmerLights->Trigger = 1;
 13958  1290  0879               	movf	_DimmerLights,w
 13959  1291  3E08               	addlw	8
 13960  1292  0086               	movwf	6
 13961  1293  3001               	movlw	1	; select bank2/3
 13962  1294  0087               	movwf	7
 13963  1295  1501               	bsf	1,2
 13964                           
 13965                           ;Dimmer_B1.c: 804: DimmerLights->Switch = command == 1 ? 1 : 0;
 13966  1296  0020               	movlb	0	; select bank0
 13967  1297  0822               	movf	setDimmerLights_Trigger@command,w
 13968  1298  3A01               	xorlw	1
 13969  1299  3000               	movlw	0
 13970  129A  1903               	skipnz
 13971  129B  3001               	movlw	1
 13972  129C  00A3               	movwf	??_setDimmerLights_Trigger
 13973  129D  0879               	movf	_DimmerLights,w
 13974  129E  3E08               	addlw	8
 13975  129F  0086               	movwf	6
 13976  12A0  3001               	movlw	1	; select bank2/3
 13977  12A1  0087               	movwf	7
 13978  12A2  0DA3               	rlf	??_setDimmerLights_Trigger,f
 13979  12A3  0801               	movf	1,w
 13980  12A4  0623               	xorwf	??_setDimmerLights_Trigger,w
 13981  12A5  39FD               	andlw	-3
 13982  12A6  0623               	xorwf	??_setDimmerLights_Trigger,w
 13983  12A7  0081               	movwf	1
 13984  12A8  0008               	return
 13985  12A9                     __end_of_setDimmerLights_Trigger:	
 13986                           
 13987                           	psect	text86
 13988  0B4E                     __ptext86:	
 13989 ;; *************** function _setDelayOff_GO *****************
 13990 ;; Defined at:
 13991 ;;		line 86 in file "../src/DelayOff_B1.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;  sw              1    wreg     unsigned char 
 13994 ;;  command         1   10[BANK0 ] unsigned char 
 13995 ;;  value           1   11[BANK0 ] unsigned char 
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;  sw              1   14[BANK0 ] unsigned char 
 13998 ;; Return value:  Size  Location     Type
 13999 ;;		None               void
 14000 ;; Registers used:
 14001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14007 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;Total ram usage:        5 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    7
 14014 ;; This function calls:
 14015 ;;		_DelayOffPointSelect
 14016 ;;		_DelayTimejudge
 14017 ;; This function is called by:
 14018 ;;		_setDimmerLights_SwOff
 14019 ;;		_setRFSW_Control
 14020 ;; This function uses a non-reentrant model
 14021 ;;
 14022                           
 14023                           
 14024                           ;psect for function _setDelayOff_GO
 14025  0B4E                     _setDelayOff_GO:	
 14026                           
 14027                           ;incstack = 0
 14028                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14029                           ;setDelayOff_GO@sw stored from wreg
 14030  0B4E  0020               	movlb	0	; select bank0
 14031  0B4F  00AE               	movwf	setDelayOff_GO@sw
 14032                           
 14033                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 14034  0B50  082E               	movf	setDelayOff_GO@sw,w
 14035  0B51  3191  2161  318B   	fcall	_DelayOffPointSelect
 14036                           
 14037                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 14038  0B54  0878               	movf	_DelayOff,w
 14039  0B55  0086               	movwf	6
 14040  0B56  0187               	clrf	7
 14041  0B57  1C01               	btfss	1,0
 14042  0B58  0008               	return
 14043                           
 14044                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 14045  0B59  0020               	movlb	0	; select bank0
 14046  0B5A  082A               	movf	setDelayOff_GO@command,w
 14047  0B5B  3A01               	xorlw	1
 14048  0B5C  3000               	movlw	0
 14049  0B5D  1903               	skipnz
 14050  0B5E  3001               	movlw	1
 14051  0B5F  00AC               	movwf	??_setDelayOff_GO
 14052  0B60  0878               	movf	_DelayOff,w
 14053  0B61  0086               	movwf	6
 14054  0B62  0187               	clrf	7
 14055  0B63  0DAC               	rlf	??_setDelayOff_GO,f
 14056  0B64  0801               	movf	1,w
 14057  0B65  062C               	xorwf	??_setDelayOff_GO,w
 14058  0B66  39FD               	andlw	-3
 14059  0B67  062C               	xorwf	??_setDelayOff_GO,w
 14060  0B68  0081               	movwf	1
 14061                           
 14062                           ;DelayOff_B1.c: 90: if (command == 1) {
 14063  0B69  082A               	movf	setDelayOff_GO@command,w
 14064  0B6A  3A01               	xorlw	1
 14065  0B6B  1D03               	skipz
 14066  0B6C  2B96               	goto	l7784
 14067                           
 14068                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 14069  0B6D  082B               	movf	setDelayOff_GO@value,w
 14070  0B6E  3194  2497  318B   	fcall	_DelayTimejudge
 14071  0B71  0020               	movlb	0	; select bank0
 14072  0B72  00AC               	movwf	??_setDelayOff_GO
 14073  0B73  0878               	movf	_DelayOff,w
 14074  0B74  0086               	movwf	6
 14075  0B75  0187               	clrf	7
 14076  0B76  082C               	movf	??_setDelayOff_GO,w
 14077  0B77  0081               	movwf	1
 14078                           
 14079                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 14080  0B78  300F               	movlw	15
 14081  0B79  052B               	andwf	setDelayOff_GO@value,w
 14082  0B7A  00AC               	movwf	??_setDelayOff_GO
 14083  0B7B  082C               	movf	??_setDelayOff_GO,w
 14084  0B7C  3A05               	xorlw	5
 14085  0B7D  1903               	skipnz
 14086  0B7E  2B83               	goto	l7778
 14087  0B7F  082B               	movf	setDelayOff_GO@value,w
 14088  0B80  390F               	andlw	15
 14089  0B81  1D03               	btfss	3,2
 14090  0B82  2B89               	goto	l7782
 14091  0B83                     l7778:	
 14092  0B83  3026               	movlw	38
 14093  0B84  022B               	subwf	setDelayOff_GO@value,w
 14094  0B85  1803               	skipnc
 14095  0B86  2B89               	goto	l7782
 14096                           
 14097                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 14098  0B87  082B               	movf	setDelayOff_GO@value,w
 14099  0B88  2B8A               	goto	L5
 14100  0B89                     l7782:	
 14101                           ;DelayOff_B1.c: 94: } else {
 14102                           
 14103                           
 14104                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 14105  0B89  3005               	movlw	5
 14106  0B8A                     L5:	
 14107  0B8A  00AC               	movwf	??_setDelayOff_GO
 14108  0B8B  082E               	movf	setDelayOff_GO@sw,w
 14109  0B8C  3E1A               	addlw	26
 14110  0B8D  076F               	addwf	_product,w
 14111  0B8E  00AD               	movwf	??_setDelayOff_GO+1
 14112  0B8F  082D               	movf	??_setDelayOff_GO+1,w
 14113  0B90  0086               	movwf	6
 14114  0B91  3002               	movlw	2	; select bank4/5
 14115  0B92  0087               	movwf	7
 14116  0B93  082C               	movf	??_setDelayOff_GO,w
 14117  0B94  0081               	movwf	1
 14118                           
 14119                           ;DelayOff_B1.c: 96: }
 14120                           ;DelayOff_B1.c: 97: } else {
 14121  0B95  2B9F               	goto	l7786
 14122  0B96                     l7784:	
 14123                           
 14124                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 14125  0B96  082E               	movf	setDelayOff_GO@sw,w
 14126  0B97  3E1A               	addlw	26
 14127  0B98  076F               	addwf	_product,w
 14128  0B99  00AC               	movwf	??_setDelayOff_GO
 14129  0B9A  082C               	movf	??_setDelayOff_GO,w
 14130  0B9B  0086               	movwf	6
 14131  0B9C  3002               	movlw	2	; select bank4/5
 14132  0B9D  0087               	movwf	7
 14133  0B9E  0181               	clrf	1
 14134  0B9F                     l7786:	
 14135                           
 14136                           ;DelayOff_B1.c: 99: }
 14137                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 14138  0B9F  0878               	movf	_DelayOff,w
 14139  0BA0  0086               	movwf	6
 14140  0BA1  0187               	clrf	7
 14141  0BA2  3000               	movlw	0
 14142  0BA3  3FC0               	movwi [0]fsr1
 14143  0BA4  3FC1               	movwi [1]fsr1
 14144                           
 14145                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 14146  0BA5  0878               	movf	_DelayOff,w
 14147  0BA6  0086               	movwf	6
 14148  0BA7  0187               	clrf	7
 14149  0BA8  0181               	clrf	1
 14150  0BA9  0008               	return
 14151  0BAA                     __end_of_setDelayOff_GO:	
 14152                           
 14153                           	psect	text87
 14154  1497                     __ptext87:	
 14155 ;; *************** function _DelayTimejudge *****************
 14156 ;; Defined at:
 14157 ;;		line 106 in file "../src/DelayOff_B1.c"
 14158 ;; Parameters:    Size  Location     Type
 14159 ;;  value           1    wreg     unsigned char 
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;  value           1    9[BANK0 ] unsigned char 
 14162 ;;  k               1    8[BANK0 ] unsigned char 
 14163 ;;  j               1    7[BANK0 ] unsigned char 
 14164 ;;  i               1    6[BANK0 ] unsigned char 
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      unsigned char 
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, status,0, pclath, cstack
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;Total ram usage:        6 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    6
 14181 ;; This function calls:
 14182 ;;		___bmul
 14183 ;; This function is called by:
 14184 ;;		_setDelayOff_GO
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           
 14189                           ;psect for function _DelayTimejudge
 14190  1497                     _DelayTimejudge:	
 14191                           
 14192                           ;incstack = 0
 14193                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 14194                           ;DelayTimejudge@value stored from wreg
 14195  1497  0020               	movlb	0	; select bank0
 14196  1498  00A9               	movwf	DelayTimejudge@value
 14197                           
 14198                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 14199  1499  3005               	movlw	5
 14200  149A  00A4               	movwf	??_DelayTimejudge
 14201  149B  0824               	movf	??_DelayTimejudge,w
 14202  149C  00A6               	movwf	DelayTimejudge@i
 14203  149D  01A7               	clrf	DelayTimejudge@j
 14204  149E  01A8               	clrf	DelayTimejudge@k
 14205                           
 14206                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 14207  149F  3031               	movlw	49
 14208  14A0  0229               	subwf	DelayTimejudge@value,w
 14209  14A1  1803               	skipnc
 14210  14A2  2CBF               	goto	l7648
 14211                           
 14212                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 14213  14A3  0829               	movf	DelayTimejudge@value,w
 14214  14A4  390F               	andlw	15
 14215  14A5  00A4               	movwf	??_DelayTimejudge
 14216  14A6  0824               	movf	??_DelayTimejudge,w
 14217  14A7  00A7               	movwf	DelayTimejudge@j
 14218                           
 14219                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 14220  14A8  0829               	movf	DelayTimejudge@value,w
 14221  14A9  00A4               	movwf	??_DelayTimejudge
 14222  14AA  3004               	movlw	4
 14223  14AB                     u7735:	
 14224  14AB  36A4               	lsrf	??_DelayTimejudge,f
 14225  14AC  0B89               	decfsz	9,f
 14226  14AD  2CAB               	goto	u7735
 14227  14AE  0824               	movf	??_DelayTimejudge,w
 14228  14AF  390F               	andlw	15
 14229  14B0  00A5               	movwf	??_DelayTimejudge+1
 14230  14B1  0825               	movf	??_DelayTimejudge+1,w
 14231  14B2  00A8               	movwf	DelayTimejudge@k
 14232                           
 14233                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 14234  14B3  300A               	movlw	10
 14235  14B4  00A4               	movwf	??_DelayTimejudge
 14236  14B5  0824               	movf	??_DelayTimejudge,w
 14237  14B6  00A0               	movwf	___bmul@multiplicand
 14238  14B7  0828               	movf	DelayTimejudge@k,w
 14239  14B8  3190  20B9         	fcall	___bmul
 14240  14BA  0020               	movlb	0	; select bank0
 14241  14BB  0727               	addwf	DelayTimejudge@j,w
 14242  14BC  00A5               	movwf	??_DelayTimejudge+1
 14243  14BD  0825               	movf	??_DelayTimejudge+1,w
 14244  14BE  00A6               	movwf	DelayTimejudge@i
 14245  14BF                     l7648:	
 14246                           
 14247                           ;DelayOff_B1.c: 112: }
 14248                           ;DelayOff_B1.c: 133: return i;
 14249  14BF  0826               	movf	DelayTimejudge@i,w
 14250  14C0  0008               	return
 14251  14C1                     __end_of_DelayTimejudge:	
 14252                           
 14253                           	psect	text88
 14254  10B9                     __ptext88:	
 14255 ;; *************** function ___bmul *****************
 14256 ;; Defined at:
 14257 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14258 ;; Parameters:    Size  Location     Type
 14259 ;;  multiplier      1    wreg     unsigned char 
 14260 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14263 ;;  product         1    2[BANK0 ] unsigned char 
 14264 ;; Return value:  Size  Location     Type
 14265 ;;                  1    wreg      unsigned char 
 14266 ;; Registers used:
 14267 ;;		wreg, status,2, status,0
 14268 ;; Tracked objects:
 14269 ;;		On entry : 0/0
 14270 ;;		On exit  : 0/0
 14271 ;;		Unchanged: 0/0
 14272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14273 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;Total ram usage:        4 bytes
 14278 ;; Hardware stack levels used:    1
 14279 ;; Hardware stack levels required when called:    5
 14280 ;; This function calls:
 14281 ;;		Nothing
 14282 ;; This function is called by:
 14283 ;;		_DelayTimejudge
 14284 ;; This function uses a non-reentrant model
 14285 ;;
 14286                           
 14287                           
 14288                           ;psect for function ___bmul
 14289  10B9                     ___bmul:	
 14290                           
 14291                           ;incstack = 0
 14292                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14293                           ;___bmul@multiplier stored from wreg
 14294  10B9  0020               	movlb	0	; select bank0
 14295  10BA  00A3               	movwf	___bmul@multiplier
 14296  10BB  01A2               	clrf	___bmul@product
 14297  10BC                     l7394:	
 14298  10BC  1C23               	btfss	___bmul@multiplier,0
 14299  10BD  28C2               	goto	l7398
 14300  10BE  0820               	movf	___bmul@multiplicand,w
 14301  10BF  00A1               	movwf	??___bmul
 14302  10C0  0821               	movf	??___bmul,w
 14303  10C1  07A2               	addwf	___bmul@product,f
 14304  10C2                     l7398:	
 14305  10C2  1003               	clrc
 14306  10C3  0DA0               	rlf	___bmul@multiplicand,f
 14307  10C4  1003               	clrc
 14308  10C5  0CA3               	rrf	___bmul@multiplier,f
 14309  10C6  08A3               	movf	___bmul@multiplier,f
 14310  10C7  1D03               	skipz
 14311  10C8  28BC               	goto	l7394
 14312  10C9  0822               	movf	___bmul@product,w
 14313  10CA  0008               	return
 14314  10CB                     __end_of___bmul:	
 14315                           
 14316                           	psect	text89
 14317  1FF0                     __ptext89:	
 14318 ;; *************** function _getDimmerLights_Status *****************
 14319 ;; Defined at:
 14320 ;;		line 459 in file "../src/Dimmer_B1.c"
 14321 ;; Parameters:    Size  Location     Type
 14322 ;;  lights          1    wreg     unsigned char 
 14323 ;; Auto vars:     Size  Location     Type
 14324 ;;  lights          1    2[BANK0 ] unsigned char 
 14325 ;;  status          1    3[BANK0 ] unsigned char 
 14326 ;; Return value:  Size  Location     Type
 14327 ;;                  1    wreg      unsigned char 
 14328 ;; Registers used:
 14329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14330 ;; Tracked objects:
 14331 ;;		On entry : 0/0
 14332 ;;		On exit  : 0/0
 14333 ;;		Unchanged: 0/0
 14334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;Total ram usage:        2 bytes
 14340 ;; Hardware stack levels used:    1
 14341 ;; Hardware stack levels required when called:    6
 14342 ;; This function calls:
 14343 ;;		_DimmerLightsPointSelect
 14344 ;; This function is called by:
 14345 ;;		_DlyOff_Main
 14346 ;;		_setDimmerLights_ErrorClose
 14347 ;;		_setRFSW_Control
 14348 ;;		_setRFSW_AdjControl
 14349 ;;		_getMain_LightsStatus
 14350 ;; This function uses a non-reentrant model
 14351 ;;
 14352                           
 14353                           
 14354                           ;psect for function _getDimmerLights_Status
 14355  1FF0                     _getDimmerLights_Status:	
 14356                           
 14357                           ;incstack = 0
 14358                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14359                           ;getDimmerLights_Status@lights stored from wreg
 14360  1FF0  0020               	movlb	0	; select bank0
 14361  1FF1  00A2               	movwf	getDimmerLights_Status@lights
 14362                           
 14363                           ;Dimmer_B1.c: 460: DimmerLightsPointSelect(lights);
 14364  1FF2  0822               	movf	getDimmerLights_Status@lights,w
 14365  1FF3  3191  2101         	fcall	_DimmerLightsPointSelect
 14366                           
 14367                           ;Dimmer_B1.c: 461: char status = DimmerLights->Status == 1 ? 1 : 0;
 14368  1FF5  0879               	movf	_DimmerLights,w
 14369  1FF6  0086               	movwf	6
 14370  1FF7  3001               	movlw	1	; select bank2/3
 14371  1FF8  0087               	movwf	7
 14372  1FF9  3000               	movlw	0
 14373  1FFA  1A81               	btfsc	1,5
 14374  1FFB  3001               	movlw	1
 14375  1FFC  0020               	movlb	0	; select bank0
 14376  1FFD  00A3               	movwf	getDimmerLights_Status@status
 14377                           
 14378                           ;Dimmer_B1.c: 462: return status;
 14379  1FFE  0823               	movf	getDimmerLights_Status@status,w
 14380  1FFF  0008               	return
 14381  2000                     __end_of_getDimmerLights_Status:	
 14382                           
 14383                           	psect	text90
 14384  1101                     __ptext90:	
 14385 ;; *************** function _DimmerLightsPointSelect *****************
 14386 ;; Defined at:
 14387 ;;		line 324 in file "../src/Dimmer_B1.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;  lights          1    wreg     unsigned char 
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  lights          1    1[BANK0 ] unsigned char 
 14392 ;; Return value:  Size  Location     Type
 14393 ;;		None               void
 14394 ;; Registers used:
 14395 ;;		wreg
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;Total ram usage:        2 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:    5
 14408 ;; This function calls:
 14409 ;;		Nothing
 14410 ;; This function is called by:
 14411 ;;		_setDimmerLights_Initialization
 14412 ;;		_setDimmerLights_Main
 14413 ;;		_getDimmerLights_Status
 14414 ;;		_setDimmerLights_SwOn
 14415 ;;		_setDimmerLights_SwOff
 14416 ;;		_setDimmerLights_AdjControl
 14417 ;;		_setDimmerLights_ErrorClose
 14418 ;;		_setDimmerLights
 14419 ;;		_setDimmerLights_Adj
 14420 ;;		_setDimmerLights_AdjRF
 14421 ;;		_setDimmerLights_Trigger
 14422 ;;		_setDimmerLights_TriggerAdj
 14423 ;;		_setDimmerLights_Status
 14424 ;;		_setDimmerLights_GO
 14425 ;;		_setDimmerLights_MaxmumValue
 14426 ;; This function uses a non-reentrant model
 14427 ;;
 14428                           
 14429                           
 14430                           ;psect for function _DimmerLightsPointSelect
 14431  1101                     _DimmerLightsPointSelect:	
 14432                           
 14433                           ;incstack = 0
 14434                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14435                           ;DimmerLightsPointSelect@lights stored from wreg
 14436  1101  0020               	movlb	0	; select bank0
 14437  1102  00A1               	movwf	DimmerLightsPointSelect@lights
 14438                           
 14439                           ;Dimmer_B1.c: 326: if (lights == 1) {
 14440  1103  0821               	movf	DimmerLightsPointSelect@lights,w
 14441  1104  3A01               	xorlw	1
 14442  1105  1D03               	skipz
 14443  1106  290B               	goto	l740
 14444                           
 14445                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 14446  1107  303E               	movlw	_DimmerLights1& (0+255)
 14447  1108  00A0               	movwf	??_DimmerLightsPointSelect
 14448  1109  0820               	movf	??_DimmerLightsPointSelect,w
 14449  110A  00F9               	movwf	_DimmerLights
 14450  110B                     l740:	
 14451                           
 14452                           ;Dimmer_B1.c: 328: }
 14453                           ;Dimmer_B1.c: 331: if (lights == 2) {
 14454  110B  0821               	movf	DimmerLightsPointSelect@lights,w
 14455  110C  3A02               	xorlw	2
 14456  110D  1D03               	skipz
 14457  110E  0008               	return
 14458                           
 14459                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 14460  110F  304D               	movlw	_DimmerLights2& (0+255)
 14461  1110  00A0               	movwf	??_DimmerLightsPointSelect
 14462  1111  0820               	movf	??_DimmerLightsPointSelect,w
 14463  1112  00F9               	movwf	_DimmerLights
 14464  1113  0008               	return
 14465  1114                     __end_of_DimmerLightsPointSelect:	
 14466                           
 14467                           	psect	text91
 14468  1F35                     __ptext91:	
 14469 ;; *************** function _DelayOff_Initialization *****************
 14470 ;; Defined at:
 14471 ;;		line 26 in file "../src/DelayOff_B1.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;		None
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;		None
 14476 ;; Return value:  Size  Location     Type
 14477 ;;		None               void
 14478 ;; Registers used:
 14479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14480 ;; Tracked objects:
 14481 ;;		On entry : 0/0
 14482 ;;		On exit  : 0/0
 14483 ;;		Unchanged: 0/0
 14484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;Total ram usage:        0 bytes
 14490 ;; Hardware stack levels used:    1
 14491 ;; Hardware stack levels required when called:    7
 14492 ;; This function calls:
 14493 ;;		_DlyOff_Initialization
 14494 ;; This function is called by:
 14495 ;;		_main
 14496 ;; This function uses a non-reentrant model
 14497 ;;
 14498                           
 14499                           
 14500                           ;psect for function _DelayOff_Initialization
 14501  1F35                     _DelayOff_Initialization:	
 14502                           
 14503                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14504                           
 14505                           ;incstack = 0
 14506                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14507  1F35  3001               	movlw	1
 14508  1F36  319F  275E  319F   	fcall	_DlyOff_Initialization
 14509                           
 14510                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14511  1F39  3002               	movlw	2
 14512  1F3A  319F  275E         	fcall	_DlyOff_Initialization
 14513  1F3C  0008               	return
 14514  1F3D                     __end_of_DelayOff_Initialization:	
 14515                           
 14516                           	psect	text92
 14517  1F5E                     __ptext92:	
 14518 ;; *************** function _DlyOff_Initialization *****************
 14519 ;; Defined at:
 14520 ;;		line 56 in file "../src/DelayOff_B1.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;  sw              1    wreg     unsigned char 
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;  sw              1    2[BANK0 ] unsigned char 
 14525 ;; Return value:  Size  Location     Type
 14526 ;;		None               void
 14527 ;; Registers used:
 14528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14529 ;; Tracked objects:
 14530 ;;		On entry : 0/0
 14531 ;;		On exit  : 0/0
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;Total ram usage:        1 bytes
 14539 ;; Hardware stack levels used:    1
 14540 ;; Hardware stack levels required when called:    6
 14541 ;; This function calls:
 14542 ;;		_DelayOffPointSelect
 14543 ;; This function is called by:
 14544 ;;		_DelayOff_Initialization
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548                           
 14549                           ;psect for function _DlyOff_Initialization
 14550  1F5E                     _DlyOff_Initialization:	
 14551                           
 14552                           ;incstack = 0
 14553                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14554                           ;DlyOff_Initialization@sw stored from wreg
 14555  1F5E  0020               	movlb	0	; select bank0
 14556  1F5F  00A2               	movwf	DlyOff_Initialization@sw
 14557                           
 14558                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14559  1F60  0822               	movf	DlyOff_Initialization@sw,w
 14560  1F61  3191  2161         	fcall	_DelayOffPointSelect
 14561                           
 14562                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14563  1F63  0878               	movf	_DelayOff,w
 14564  1F64  0086               	movwf	6
 14565  1F65  0187               	clrf	7
 14566  1F66  1401               	bsf	1,0
 14567  1F67  0008               	return
 14568  1F68                     __end_of_DlyOff_Initialization:	
 14569                           
 14570                           	psect	text93
 14571  1161                     __ptext93:	
 14572 ;; *************** function _DelayOffPointSelect *****************
 14573 ;; Defined at:
 14574 ;;		line 7 in file "../src/DelayOff_B1.c"
 14575 ;; Parameters:    Size  Location     Type
 14576 ;;  sw              1    wreg     unsigned char 
 14577 ;; Auto vars:     Size  Location     Type
 14578 ;;  sw              1    1[BANK0 ] unsigned char 
 14579 ;; Return value:  Size  Location     Type
 14580 ;;		None               void
 14581 ;; Registers used:
 14582 ;;		wreg
 14583 ;; Tracked objects:
 14584 ;;		On entry : 0/0
 14585 ;;		On exit  : 0/0
 14586 ;;		Unchanged: 0/0
 14587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;Total ram usage:        2 bytes
 14593 ;; Hardware stack levels used:    1
 14594 ;; Hardware stack levels required when called:    5
 14595 ;; This function calls:
 14596 ;;		Nothing
 14597 ;; This function is called by:
 14598 ;;		_DlyOff_Initialization
 14599 ;;		_DlyOff_Main
 14600 ;;		_setDelayOff_GO
 14601 ;; This function uses a non-reentrant model
 14602 ;;
 14603                           
 14604                           
 14605                           ;psect for function _DelayOffPointSelect
 14606  1161                     _DelayOffPointSelect:	
 14607                           
 14608                           ;incstack = 0
 14609                           ; Regs used in _DelayOffPointSelect: [wreg]
 14610                           ;DelayOffPointSelect@sw stored from wreg
 14611  1161  0020               	movlb	0	; select bank0
 14612  1162  00A1               	movwf	DelayOffPointSelect@sw
 14613                           
 14614                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14615  1163  0821               	movf	DelayOffPointSelect@sw,w
 14616  1164  3A01               	xorlw	1
 14617  1165  1D03               	skipz
 14618  1166  296C               	goto	l7632
 14619                           
 14620                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14621  1167  30DF               	movlw	_DlySw1& (0+255)
 14622  1168  00A0               	movwf	??_DelayOffPointSelect
 14623  1169  0820               	movf	??_DelayOffPointSelect,w
 14624  116A  00F8               	movwf	_DelayOff
 14625                           
 14626                           ;DelayOff_B1.c: 11: }
 14627  116B  0008               	return
 14628  116C                     l7632:	
 14629                           
 14630                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14631  116C  0821               	movf	DelayOffPointSelect@sw,w
 14632  116D  3A02               	xorlw	2
 14633  116E  1D03               	skipz
 14634  116F  0008               	return
 14635                           
 14636                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14637  1170  30E1               	movlw	_DlySw2& (0+255)
 14638  1171  00A0               	movwf	??_DelayOffPointSelect
 14639  1172  0820               	movf	??_DelayOffPointSelect,w
 14640  1173  00F8               	movwf	_DelayOff
 14641  1174  0008               	return
 14642  1175                     __end_of_DelayOffPointSelect:	
 14643                           
 14644                           	psect	text94
 14645  11B2                     __ptext94:	
 14646 ;; *************** function _CC2500_PowerOnInitial *****************
 14647 ;; Defined at:
 14648 ;;		line 122 in file "../src/CC2500_B1.c"
 14649 ;; Parameters:    Size  Location     Type
 14650 ;;		None
 14651 ;; Auto vars:     Size  Location     Type
 14652 ;;		None
 14653 ;; Return value:  Size  Location     Type
 14654 ;;		None               void
 14655 ;; Registers used:
 14656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;Total ram usage:        0 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:    8
 14669 ;; This function calls:
 14670 ;;		_CC2500_ClearRXFIFO
 14671 ;;		_CC2500_ClearTXFIFO
 14672 ;;		_CC2500_FrequencyCabr
 14673 ;;		_CC2500_InitPATable
 14674 ;;		_CC2500_InitSetREG
 14675 ;;		_CC2500_PowerRST
 14676 ;;		_CC2500_SIDLEMode
 14677 ;; This function is called by:
 14678 ;;		_main
 14679 ;; This function uses a non-reentrant model
 14680 ;;
 14681                           
 14682                           
 14683                           ;psect for function _CC2500_PowerOnInitial
 14684  11B2                     _CC2500_PowerOnInitial:	
 14685                           
 14686                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14687                           
 14688                           ;incstack = 0
 14689                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14690  11B2  3188  2000  3191   	fcall	_CC2500_PowerRST
 14691                           
 14692                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14693  11B5  3194  246D  3191   	fcall	_CC2500_InitSetREG
 14694                           
 14695                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14696  11B8  3192  22A9  3191   	fcall	_CC2500_InitPATable
 14697                           
 14698                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14699  11BB  319F  2705  3191   	fcall	_CC2500_ClearTXFIFO
 14700                           
 14701                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14702  11BE  319F  2701  3191   	fcall	_CC2500_ClearRXFIFO
 14703                           
 14704                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14705  11C1  319F  277E  3191   	fcall	_CC2500_FrequencyCabr
 14706                           
 14707                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14708  11C4  319F  2709         	fcall	_CC2500_SIDLEMode
 14709  11C6  0008               	return
 14710  11C7                     __end_of_CC2500_PowerOnInitial:	
 14711                           
 14712                           	psect	text95
 14713  1F09                     __ptext95:	
 14714 ;; *************** function _CC2500_SIDLEMode *****************
 14715 ;; Defined at:
 14716 ;;		line 212 in file "../src/CC2500_B1.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;		None
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;		None
 14721 ;; Return value:  Size  Location     Type
 14722 ;;		None               void
 14723 ;; Registers used:
 14724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14725 ;; Tracked objects:
 14726 ;;		On entry : 0/0
 14727 ;;		On exit  : 0/0
 14728 ;;		Unchanged: 0/0
 14729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;Total ram usage:        0 bytes
 14735 ;; Hardware stack levels used:    1
 14736 ;; Hardware stack levels required when called:    7
 14737 ;; This function calls:
 14738 ;;		_CC2500_WriteCommand
 14739 ;; This function is called by:
 14740 ;;		_CC2500_PowerOnInitial
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           
 14745                           ;psect for function _CC2500_SIDLEMode
 14746  1F09                     _CC2500_SIDLEMode:	
 14747                           
 14748                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14749                           
 14750                           ;incstack = 0
 14751                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14752  1F09  3036               	movlw	54
 14753  1F0A  3192  223A         	fcall	_CC2500_WriteCommand
 14754  1F0C  0008               	return
 14755  1F0D                     __end_of_CC2500_SIDLEMode:	
 14756                           
 14757                           	psect	text96
 14758  0800                     __ptext96:	
 14759 ;; *************** function _CC2500_PowerRST *****************
 14760 ;; Defined at:
 14761 ;;		line 135 in file "../src/CC2500_B1.c"
 14762 ;; Parameters:    Size  Location     Type
 14763 ;;		None
 14764 ;; Auto vars:     Size  Location     Type
 14765 ;;		None
 14766 ;; Return value:  Size  Location     Type
 14767 ;;		None               void
 14768 ;; Registers used:
 14769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14770 ;; Tracked objects:
 14771 ;;		On entry : 0/0
 14772 ;;		On exit  : 0/0
 14773 ;;		Unchanged: 0/0
 14774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14779 ;;Total ram usage:        1 bytes
 14780 ;; Hardware stack levels used:    1
 14781 ;; Hardware stack levels required when called:    6
 14782 ;; This function calls:
 14783 ;;		_CC2500_WriteByte
 14784 ;;		_DelayTime_1us
 14785 ;;		_Timeout_Counter
 14786 ;;		_set_TimeoutCleared
 14787 ;; This function is called by:
 14788 ;;		_CC2500_PowerOnInitial
 14789 ;; This function uses a non-reentrant model
 14790 ;;
 14791                           
 14792                           
 14793                           ;psect for function _CC2500_PowerRST
 14794  0800                     _CC2500_PowerRST:	
 14795                           
 14796                           ;CC2500_B1.c: 136: RC1 = 0;
 14797                           
 14798                           ;incstack = 0
 14799                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14800  0800  0020               	movlb	0	; select bank0
 14801  0801  108E               	bcf	14,1	;volatile
 14802                           
 14803                           ;CC2500_B1.c: 137: RC0 = 0;
 14804  0802  100E               	bcf	14,0	;volatile
 14805                           
 14806                           ;CC2500_B1.c: 138: RC4 = 1;
 14807  0803  160E               	bsf	14,4	;volatile
 14808                           
 14809                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14810  0804  300A               	movlw	10
 14811  0805  00A0               	movwf	DelayTime_1us@count
 14812  0806  3000               	movlw	0
 14813  0807  00A1               	movwf	DelayTime_1us@count+1
 14814  0808  3193  23F8  3188   	fcall	_DelayTime_1us
 14815                           
 14816                           ;CC2500_B1.c: 140: RC4 = 0;
 14817  080B  0020               	movlb	0	; select bank0
 14818  080C  120E               	bcf	14,4	;volatile
 14819                           
 14820                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14821  080D  300A               	movlw	10
 14822  080E  00A0               	movwf	DelayTime_1us@count
 14823  080F  3000               	movlw	0
 14824  0810  00A1               	movwf	DelayTime_1us@count+1
 14825  0811  3193  23F8  3188   	fcall	_DelayTime_1us
 14826                           
 14827                           ;CC2500_B1.c: 142: RC4 = 1;
 14828  0814  0020               	movlb	0	; select bank0
 14829  0815  160E               	bsf	14,4	;volatile
 14830                           
 14831                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14832  0816  3028               	movlw	40
 14833  0817  00A0               	movwf	DelayTime_1us@count
 14834  0818  3000               	movlw	0
 14835  0819  00A1               	movwf	DelayTime_1us@count+1
 14836  081A  3193  23F8  3188   	fcall	_DelayTime_1us
 14837                           
 14838                           ;CC2500_B1.c: 144: RC4 = 0;
 14839  081D  0020               	movlb	0	; select bank0
 14840  081E  120E               	bcf	14,4	;volatile
 14841                           
 14842                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14843  081F  3030               	movlw	48
 14844  0820  00A6               	movwf	??_CC2500_PowerRST
 14845  0821  0826               	movf	??_CC2500_PowerRST,w
 14846  0822  0021               	movlb	1	; select bank1
 14847  0823  00D9               	movwf	_SPI0Buffer^(0+128)
 14848                           
 14849                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14850  0824  2828               	goto	l6422
 14851  0825                     l6420:	
 14852                           
 14853                           ;CC2500_B1.c: 147: Timeout_Counter();
 14854  0825  3191  219D  3188   	fcall	_Timeout_Counter
 14855  0828                     l6422:	
 14856  0828  0020               	movlb	0	; select bank0
 14857  0829  1D0E               	btfss	14,2	;volatile
 14858  082A  282E               	goto	l6426
 14859  082B  0021               	movlb	1	; select bank1
 14860  082C  1D2D               	btfss	(_myMain^(0+128)+13),2
 14861  082D  2825               	goto	l6420
 14862  082E                     l6426:	
 14863                           
 14864                           ;CC2500_B1.c: 148: };
 14865                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14866  082E  319F  2715  3188   	fcall	_set_TimeoutCleared
 14867                           
 14868                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14869  0831  3192  2208  3188   	fcall	_CC2500_WriteByte
 14870                           
 14871                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14872  0834  2838               	goto	l6432
 14873  0835                     l6430:	
 14874                           
 14875                           ;CC2500_B1.c: 152: Timeout_Counter();
 14876  0835  3191  219D  3188   	fcall	_Timeout_Counter
 14877  0838                     l6432:	
 14878  0838  0020               	movlb	0	; select bank0
 14879  0839  1D0E               	btfss	14,2	;volatile
 14880  083A  283E               	goto	l6436
 14881  083B  0021               	movlb	1	; select bank1
 14882  083C  1D2D               	btfss	(_myMain^(0+128)+13),2
 14883  083D  2835               	goto	l6430
 14884  083E                     l6436:	
 14885                           
 14886                           ;CC2500_B1.c: 153: };
 14887                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14888  083E  319F  2715         	fcall	_set_TimeoutCleared
 14889                           
 14890                           ;CC2500_B1.c: 155: RC0 = 0;
 14891  0840  0020               	movlb	0	; select bank0
 14892  0841  100E               	bcf	14,0	;volatile
 14893                           
 14894                           ;CC2500_B1.c: 156: RC4 = 1;
 14895  0842  160E               	bsf	14,4	;volatile
 14896  0843  0008               	return
 14897  0844                     __end_of_CC2500_PowerRST:	
 14898                           
 14899                           	psect	text97
 14900  146D                     __ptext97:	
 14901 ;; *************** function _CC2500_InitSetREG *****************
 14902 ;; Defined at:
 14903 ;;		line 162 in file "../src/CC2500_B1.c"
 14904 ;; Parameters:    Size  Location     Type
 14905 ;;		None
 14906 ;; Auto vars:     Size  Location     Type
 14907 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14908 ;;  temp2           1    7[BANK0 ] unsigned char 
 14909 ;;  temp1           1    6[BANK0 ] unsigned char 
 14910 ;; Return value:  Size  Location     Type
 14911 ;;		None               void
 14912 ;; Registers used:
 14913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14914 ;; Tracked objects:
 14915 ;;		On entry : 0/0
 14916 ;;		On exit  : 0/0
 14917 ;;		Unchanged: 0/0
 14918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;Total ram usage:        4 bytes
 14924 ;; Hardware stack levels used:    1
 14925 ;; Hardware stack levels required when called:    7
 14926 ;; This function calls:
 14927 ;;		_CC2500_WriteREG
 14928 ;; This function is called by:
 14929 ;;		_CC2500_PowerOnInitial
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           
 14934                           ;psect for function _CC2500_InitSetREG
 14935  146D                     _CC2500_InitSetREG:	
 14936                           
 14937                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14938                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14939                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14940                           
 14941                           ;incstack = 0
 14942                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14943  146D  0020               	movlb	0	; select bank0
 14944  146E  01A8               	clrf	CC2500_InitSetREG@loop_c
 14945  146F                     L6:	
 14946  146F  302F               	movlw	47
 14947  1470  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14948  1471  1803               	btfsc	3,0
 14949  1472  0008               	return
 14950                           
 14951                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14952  1473  0828               	movf	CC2500_InitSetREG@loop_c,w
 14953  1474  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14954  1475  0084               	movwf	4
 14955  1476  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14956  1477  1803               	skipnc
 14957  1478  3E01               	addlw	1
 14958  1479  0085               	movwf	5
 14959  147A  0800               	movf	0,w	;code access
 14960  147B  00A5               	movwf	??_CC2500_InitSetREG
 14961  147C  0825               	movf	??_CC2500_InitSetREG,w
 14962  147D  00A6               	movwf	CC2500_InitSetREG@temp1
 14963                           
 14964                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14965  147E  0828               	movf	CC2500_InitSetREG@loop_c,w
 14966  147F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14967  1480  0084               	movwf	4
 14968  1481  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14969  1482  1803               	skipnc
 14970  1483  3E01               	addlw	1
 14971  1484  0085               	movwf	5
 14972  1485  0800               	movf	0,w	;code access
 14973  1486  00A5               	movwf	??_CC2500_InitSetREG
 14974  1487  0825               	movf	??_CC2500_InitSetREG,w
 14975  1488  00A7               	movwf	CC2500_InitSetREG@temp2
 14976                           
 14977                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14978  1489  0827               	movf	CC2500_InitSetREG@temp2,w
 14979  148A  00A5               	movwf	??_CC2500_InitSetREG
 14980  148B  0825               	movf	??_CC2500_InitSetREG,w
 14981  148C  00A2               	movwf	CC2500_WriteREG@value
 14982  148D  0826               	movf	CC2500_InitSetREG@temp1,w
 14983  148E  3193  2369  3194   	fcall	_CC2500_WriteREG
 14984  1491  3001               	movlw	1
 14985  1492  0020               	movlb	0	; select bank0
 14986  1493  00A5               	movwf	??_CC2500_InitSetREG
 14987  1494  0825               	movf	??_CC2500_InitSetREG,w
 14988  1495  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14989  1496  2C6F               	goto	L6
 14990  1497                     __end_of_CC2500_InitSetREG:	
 14991                           
 14992                           	psect	text98
 14993  12A9                     __ptext98:	
 14994 ;; *************** function _CC2500_InitPATable *****************
 14995 ;; Defined at:
 14996 ;;		line 177 in file "../src/CC2500_B1.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;		None
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15001 ;;  temp            1    6[BANK0 ] unsigned char 
 15002 ;; Return value:  Size  Location     Type
 15003 ;;		None               void
 15004 ;; Registers used:
 15005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;Total ram usage:        3 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    7
 15018 ;; This function calls:
 15019 ;;		_CC2500_WriteREG
 15020 ;; This function is called by:
 15021 ;;		_CC2500_PowerOnInitial
 15022 ;; This function uses a non-reentrant model
 15023 ;;
 15024                           
 15025                           
 15026                           ;psect for function _CC2500_InitPATable
 15027  12A9                     _CC2500_InitPATable:	
 15028                           
 15029                           ;CC2500_B1.c: 178: unsigned char loop_d;
 15030                           ;CC2500_B1.c: 179: unsigned char temp;
 15031                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15035  12A9  0020               	movlb	0	; select bank0
 15036  12AA  01A7               	clrf	CC2500_InitPATable@loop_d
 15037  12AB                     L7:	
 15038  12AB  3008               	movlw	8
 15039  12AC  0227               	subwf	CC2500_InitPATable@loop_d,w
 15040  12AD  1803               	btfsc	3,0
 15041  12AE  0008               	return
 15042                           
 15043                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 15044  12AF  0827               	movf	CC2500_InitPATable@loop_d,w
 15045  12B0  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15046  12B1  0084               	movwf	4
 15047  12B2  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15048  12B3  1803               	skipnc
 15049  12B4  3E01               	addlw	1
 15050  12B5  0085               	movwf	5
 15051  12B6  0800               	movf	0,w	;code access
 15052  12B7  00A5               	movwf	??_CC2500_InitPATable
 15053  12B8  0825               	movf	??_CC2500_InitPATable,w
 15054  12B9  00A6               	movwf	CC2500_InitPATable@temp
 15055                           
 15056                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 15057  12BA  0826               	movf	CC2500_InitPATable@temp,w
 15058  12BB  00A5               	movwf	??_CC2500_InitPATable
 15059  12BC  0825               	movf	??_CC2500_InitPATable,w
 15060  12BD  00A2               	movwf	CC2500_WriteREG@value
 15061  12BE  303E               	movlw	62
 15062  12BF  3193  2369  3192   	fcall	_CC2500_WriteREG
 15063  12C2  3001               	movlw	1
 15064  12C3  0020               	movlb	0	; select bank0
 15065  12C4  00A5               	movwf	??_CC2500_InitPATable
 15066  12C5  0825               	movf	??_CC2500_InitPATable,w
 15067  12C6  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15068  12C7  2AAB               	goto	L7
 15069  12C8                     __end_of_CC2500_InitPATable:	
 15070                           
 15071                           	psect	text99
 15072  1369                     __ptext99:	
 15073 ;; *************** function _CC2500_WriteREG *****************
 15074 ;; Defined at:
 15075 ;;		line 254 in file "../src/CC2500_B1.c"
 15076 ;; Parameters:    Size  Location     Type
 15077 ;;  w_addr          1    wreg     unsigned char 
 15078 ;;  value           1    2[BANK0 ] unsigned char 
 15079 ;; Auto vars:     Size  Location     Type
 15080 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15081 ;; Return value:  Size  Location     Type
 15082 ;;		None               void
 15083 ;; Registers used:
 15084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15085 ;; Tracked objects:
 15086 ;;		On entry : 0/0
 15087 ;;		On exit  : 0/0
 15088 ;;		Unchanged: 0/0
 15089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;Total ram usage:        3 bytes
 15095 ;; Hardware stack levels used:    1
 15096 ;; Hardware stack levels required when called:    6
 15097 ;; This function calls:
 15098 ;;		_CC2500_WriteByte
 15099 ;;		_Timeout_Counter
 15100 ;;		_set_TimeoutCleared
 15101 ;; This function is called by:
 15102 ;;		_CC2500_InitSetREG
 15103 ;;		_CC2500_InitPATable
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           
 15108                           ;psect for function _CC2500_WriteREG
 15109  1369                     _CC2500_WriteREG:	
 15110                           
 15111                           ;incstack = 0
 15112                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15113                           ;CC2500_WriteREG@w_addr stored from wreg
 15114  1369  0020               	movlb	0	; select bank0
 15115  136A  00A4               	movwf	CC2500_WriteREG@w_addr
 15116                           
 15117                           ;CC2500_B1.c: 255: RC4 = 0;
 15118  136B  120E               	bcf	14,4	;volatile
 15119                           
 15120                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 15121  136C  0824               	movf	CC2500_WriteREG@w_addr,w
 15122  136D  00A3               	movwf	??_CC2500_WriteREG
 15123  136E  0823               	movf	??_CC2500_WriteREG,w
 15124  136F  0021               	movlb	1	; select bank1
 15125  1370  00D9               	movwf	_SPI0Buffer^(0+128)
 15126                           
 15127                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 15128  1371  2B75               	goto	l6076
 15129  1372                     l6074:	
 15130                           
 15131                           ;CC2500_B1.c: 258: Timeout_Counter();
 15132  1372  3191  219D  3193   	fcall	_Timeout_Counter
 15133  1375                     l6076:	
 15134  1375  0020               	movlb	0	; select bank0
 15135  1376  1D0E               	btfss	14,2	;volatile
 15136  1377  2B7B               	goto	l6080
 15137  1378  0021               	movlb	1	; select bank1
 15138  1379  1D2D               	btfss	(_myMain^(0+128)+13),2
 15139  137A  2B72               	goto	l6074
 15140  137B                     l6080:	
 15141                           
 15142                           ;CC2500_B1.c: 259: };
 15143                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15144  137B  319F  2715  3193   	fcall	_set_TimeoutCleared
 15145                           
 15146                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15147  137E  3192  2208  3193   	fcall	_CC2500_WriteByte
 15148                           
 15149                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15150  1381  0020               	movlb	0	; select bank0
 15151  1382  0822               	movf	CC2500_WriteREG@value,w
 15152  1383  00A3               	movwf	??_CC2500_WriteREG
 15153  1384  0823               	movf	??_CC2500_WriteREG,w
 15154  1385  0021               	movlb	1	; select bank1
 15155  1386  00D9               	movwf	_SPI0Buffer^(0+128)
 15156                           
 15157                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15158  1387  3192  2208         	fcall	_CC2500_WriteByte
 15159                           
 15160                           ;CC2500_B1.c: 265: RC4 = 1;
 15161  1389  0020               	movlb	0	; select bank0
 15162  138A  160E               	bsf	14,4	;volatile
 15163  138B  0008               	return
 15164  138C                     __end_of_CC2500_WriteREG:	
 15165                           
 15166                           	psect	text100
 15167  1F7E                     __ptext100:	
 15168 ;; *************** function _CC2500_FrequencyCabr *****************
 15169 ;; Defined at:
 15170 ;;		line 204 in file "../src/CC2500_B1.c"
 15171 ;; Parameters:    Size  Location     Type
 15172 ;;		None
 15173 ;; Auto vars:     Size  Location     Type
 15174 ;;		None
 15175 ;; Return value:  Size  Location     Type
 15176 ;;		None               void
 15177 ;; Registers used:
 15178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15179 ;; Tracked objects:
 15180 ;;		On entry : 0/0
 15181 ;;		On exit  : 0/0
 15182 ;;		Unchanged: 0/0
 15183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;Total ram usage:        0 bytes
 15189 ;; Hardware stack levels used:    1
 15190 ;; Hardware stack levels required when called:    7
 15191 ;; This function calls:
 15192 ;;		_CC2500_WriteCommand
 15193 ;;		_DelayTime_1us
 15194 ;; This function is called by:
 15195 ;;		_CC2500_PowerOnInitial
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           
 15200                           ;psect for function _CC2500_FrequencyCabr
 15201  1F7E                     _CC2500_FrequencyCabr:	
 15202                           
 15203                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15204                           
 15205                           ;incstack = 0
 15206                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15207  1F7E  3033               	movlw	51
 15208  1F7F  3192  223A  319F   	fcall	_CC2500_WriteCommand
 15209                           
 15210                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15211  1F82  30E8               	movlw	232
 15212  1F83  0020               	movlb	0	; select bank0
 15213  1F84  00A0               	movwf	DelayTime_1us@count
 15214  1F85  3003               	movlw	3
 15215  1F86  00A1               	movwf	DelayTime_1us@count+1
 15216  1F87  3193  23F8         	fcall	_DelayTime_1us
 15217  1F89  0008               	return
 15218  1F8A                     __end_of_CC2500_FrequencyCabr:	
 15219                           
 15220                           	psect	text101
 15221  13F8                     __ptext101:	
 15222 ;; *************** function _DelayTime_1us *****************
 15223 ;; Defined at:
 15224 ;;		line 323 in file "../src/CC2500_B1.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;  count           2    0[BANK0 ] int 
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;  j               2    4[BANK0 ] unsigned int 
 15229 ;;  i               2    2[BANK0 ] unsigned int 
 15230 ;; Return value:  Size  Location     Type
 15231 ;;		None               void
 15232 ;; Registers used:
 15233 ;;		wreg, status,2
 15234 ;; Tracked objects:
 15235 ;;		On entry : 0/0
 15236 ;;		On exit  : 0/0
 15237 ;;		Unchanged: 0/0
 15238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15239 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;Total ram usage:        6 bytes
 15244 ;; Hardware stack levels used:    1
 15245 ;; Hardware stack levels required when called:    5
 15246 ;; This function calls:
 15247 ;;		Nothing
 15248 ;; This function is called by:
 15249 ;;		_CC2500_PowerRST
 15250 ;;		_CC2500_FrequencyCabr
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           
 15255                           ;psect for function _DelayTime_1us
 15256  13F8                     _DelayTime_1us:	
 15257                           
 15258                           ;CC2500_B1.c: 324: unsigned int i, j;
 15259                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15260                           
 15261                           ;incstack = 0
 15262                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15263  13F8  3001               	movlw	1
 15264  13F9  0020               	movlb	0	; select bank0
 15265  13FA  00A2               	movwf	DelayTime_1us@i
 15266  13FB  3000               	movlw	0
 15267  13FC  00A3               	movwf	DelayTime_1us@i+1
 15268  13FD                     l366:	
 15269  13FD  0821               	movf	DelayTime_1us@count+1,w
 15270  13FE  0223               	subwf	DelayTime_1us@i+1,w
 15271  13FF  1D03               	skipz
 15272  1400  2C03               	goto	u5095
 15273  1401  0820               	movf	DelayTime_1us@count,w
 15274  1402  0222               	subwf	DelayTime_1us@i,w
 15275  1403                     u5095:	
 15276  1403  1803               	btfsc	3,0
 15277  1404  0008               	return
 15278                           
 15279                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15280  1405  01A4               	clrf	DelayTime_1us@j
 15281  1406  01A5               	clrf	DelayTime_1us@j+1
 15282  1407  3000               	movlw	0
 15283  1408  0225               	subwf	DelayTime_1us@j+1,w
 15284  1409  3002               	movlw	2
 15285  140A  1903               	skipnz
 15286  140B  0224               	subwf	DelayTime_1us@j,w
 15287  140C  1803               	btfsc	3,0
 15288  140D  2C19               	goto	l6068
 15289  140E                     l6066:	
 15290  140E  3001               	movlw	1
 15291  140F  07A4               	addwf	DelayTime_1us@j,f
 15292  1410  3000               	movlw	0
 15293  1411  3DA5               	addwfc	DelayTime_1us@j+1,f
 15294  1412  3000               	movlw	0
 15295  1413  0225               	subwf	DelayTime_1us@j+1,w
 15296  1414  3002               	movlw	2
 15297  1415  1903               	skipnz
 15298  1416  0224               	subwf	DelayTime_1us@j,w
 15299  1417  1C03               	skipc
 15300  1418  2C0E               	goto	l6066
 15301  1419                     l6068:	
 15302  1419  3001               	movlw	1
 15303  141A  07A2               	addwf	DelayTime_1us@i,f
 15304  141B  3000               	movlw	0
 15305  141C  3DA3               	addwfc	DelayTime_1us@i+1,f
 15306  141D  2BFD               	goto	l366
 15307  141E                     __end_of_DelayTime_1us:	
 15308                           
 15309                           	psect	text102
 15310  1F05                     __ptext102:	
 15311 ;; *************** function _CC2500_ClearTXFIFO *****************
 15312 ;; Defined at:
 15313 ;;		line 190 in file "../src/CC2500_B1.c"
 15314 ;; Parameters:    Size  Location     Type
 15315 ;;		None
 15316 ;; Auto vars:     Size  Location     Type
 15317 ;;		None
 15318 ;; Return value:  Size  Location     Type
 15319 ;;		None               void
 15320 ;; Registers used:
 15321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;Total ram usage:        0 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    7
 15334 ;; This function calls:
 15335 ;;		_CC2500_WriteCommand
 15336 ;; This function is called by:
 15337 ;;		_CC2500_PowerOnInitial
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           
 15342                           ;psect for function _CC2500_ClearTXFIFO
 15343  1F05                     _CC2500_ClearTXFIFO:	
 15344                           
 15345                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15346                           
 15347                           ;incstack = 0
 15348                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15349  1F05  303B               	movlw	59
 15350  1F06  3192  223A         	fcall	_CC2500_WriteCommand
 15351  1F08  0008               	return
 15352  1F09                     __end_of_CC2500_ClearTXFIFO:	
 15353                           
 15354                           	psect	text103
 15355  1F01                     __ptext103:	
 15356 ;; *************** function _CC2500_ClearRXFIFO *****************
 15357 ;; Defined at:
 15358 ;;		line 197 in file "../src/CC2500_B1.c"
 15359 ;; Parameters:    Size  Location     Type
 15360 ;;		None
 15361 ;; Auto vars:     Size  Location     Type
 15362 ;;		None
 15363 ;; Return value:  Size  Location     Type
 15364 ;;		None               void
 15365 ;; Registers used:
 15366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15367 ;; Tracked objects:
 15368 ;;		On entry : 0/0
 15369 ;;		On exit  : 0/0
 15370 ;;		Unchanged: 0/0
 15371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15376 ;;Total ram usage:        0 bytes
 15377 ;; Hardware stack levels used:    1
 15378 ;; Hardware stack levels required when called:    7
 15379 ;; This function calls:
 15380 ;;		_CC2500_WriteCommand
 15381 ;; This function is called by:
 15382 ;;		_CC2500_PowerOnInitial
 15383 ;; This function uses a non-reentrant model
 15384 ;;
 15385                           
 15386                           
 15387                           ;psect for function _CC2500_ClearRXFIFO
 15388  1F01                     _CC2500_ClearRXFIFO:	
 15389                           
 15390                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15391                           
 15392                           ;incstack = 0
 15393                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15394  1F01  303A               	movlw	58
 15395  1F02  3192  223A         	fcall	_CC2500_WriteCommand
 15396  1F04  0008               	return
 15397  1F05                     __end_of_CC2500_ClearRXFIFO:	
 15398                           
 15399                           	psect	text104
 15400  123A                     __ptext104:	
 15401 ;; *************** function _CC2500_WriteCommand *****************
 15402 ;; Defined at:
 15403 ;;		line 288 in file "../src/CC2500_B1.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  command         1    wreg     unsigned char 
 15406 ;; Auto vars:     Size  Location     Type
 15407 ;;  command         1    3[BANK0 ] unsigned char 
 15408 ;; Return value:  Size  Location     Type
 15409 ;;		None               void
 15410 ;; Registers used:
 15411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15412 ;; Tracked objects:
 15413 ;;		On entry : 0/0
 15414 ;;		On exit  : 0/0
 15415 ;;		Unchanged: 0/0
 15416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;Total ram usage:        2 bytes
 15422 ;; Hardware stack levels used:    1
 15423 ;; Hardware stack levels required when called:    6
 15424 ;; This function calls:
 15425 ;;		_CC2500_WriteByte
 15426 ;;		_Timeout_Counter
 15427 ;;		_set_TimeoutCleared
 15428 ;; This function is called by:
 15429 ;;		_CC2500_TxData
 15430 ;;		_CC2500_ClearTXFIFO
 15431 ;;		_CC2500_ClearRXFIFO
 15432 ;;		_CC2500_FrequencyCabr
 15433 ;;		_CC2500_SIDLEMode
 15434 ;;		_setRF_Main
 15435 ;;		_RF_RxDisable
 15436 ;; This function uses a non-reentrant model
 15437 ;;
 15438                           
 15439                           
 15440                           ;psect for function _CC2500_WriteCommand
 15441  123A                     _CC2500_WriteCommand:	
 15442                           
 15443                           ;incstack = 0
 15444                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15445                           ;CC2500_WriteCommand@command stored from wreg
 15446  123A  0020               	movlb	0	; select bank0
 15447  123B  00A3               	movwf	CC2500_WriteCommand@command
 15448                           
 15449                           ;CC2500_B1.c: 289: RC4 = 0;
 15450  123C  120E               	bcf	14,4	;volatile
 15451                           
 15452                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15453  123D  0823               	movf	CC2500_WriteCommand@command,w
 15454  123E  00A2               	movwf	??_CC2500_WriteCommand
 15455  123F  0822               	movf	??_CC2500_WriteCommand,w
 15456  1240  0021               	movlb	1	; select bank1
 15457  1241  00D9               	movwf	_SPI0Buffer^(0+128)
 15458                           
 15459                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15460  1242  2A46               	goto	l5796
 15461  1243                     l5794:	
 15462                           
 15463                           ;CC2500_B1.c: 293: Timeout_Counter();
 15464  1243  3191  219D  3192   	fcall	_Timeout_Counter
 15465  1246                     l5796:	
 15466  1246  0020               	movlb	0	; select bank0
 15467  1247  1D0E               	btfss	14,2	;volatile
 15468  1248  2A4C               	goto	l5800
 15469  1249  0021               	movlb	1	; select bank1
 15470  124A  1D2D               	btfss	(_myMain^(0+128)+13),2
 15471  124B  2A43               	goto	l5794
 15472  124C                     l5800:	
 15473                           
 15474                           ;CC2500_B1.c: 294: };
 15475                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15476  124C  319F  2715  3192   	fcall	_set_TimeoutCleared
 15477                           
 15478                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15479  124F  3192  2208         	fcall	_CC2500_WriteByte
 15480                           
 15481                           ;CC2500_B1.c: 298: RC4 = 1;
 15482  1251  0020               	movlb	0	; select bank0
 15483  1252  160E               	bsf	14,4	;volatile
 15484  1253  0008               	return
 15485  1254                     __end_of_CC2500_WriteCommand:	
 15486                           
 15487                           	psect	text105
 15488  1F15                     __ptext105:	
 15489 ;; *************** function _set_TimeoutCleared *****************
 15490 ;; Defined at:
 15491 ;;		line 270 in file "../src/main_B1.c"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;		None
 15494 ;; Auto vars:     Size  Location     Type
 15495 ;;		None
 15496 ;; Return value:  Size  Location     Type
 15497 ;;		None               void
 15498 ;; Registers used:
 15499 ;;		status,2
 15500 ;; Tracked objects:
 15501 ;;		On entry : 0/0
 15502 ;;		On exit  : 0/0
 15503 ;;		Unchanged: 0/0
 15504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;Total ram usage:        0 bytes
 15510 ;; Hardware stack levels used:    1
 15511 ;; Hardware stack levels required when called:    5
 15512 ;; This function calls:
 15513 ;;		Nothing
 15514 ;; This function is called by:
 15515 ;;		_CC2500_TxData
 15516 ;;		_CC2500_RxData
 15517 ;;		_CC2500_PowerRST
 15518 ;;		_CC2500_WriteREG
 15519 ;;		_CC2500_WriteCommand
 15520 ;;		_CC2500_ReadStatus
 15521 ;;		_TouchPower
 15522 ;;		_CC2500_ReadREG
 15523 ;;		_getAD
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527                           
 15528                           ;psect for function _set_TimeoutCleared
 15529  1F15                     _set_TimeoutCleared:	
 15530                           
 15531                           ;main_B1.c: 271: myMain.Timeout = 0;
 15532                           
 15533                           ;incstack = 0
 15534                           ; Regs used in _set_TimeoutCleared: [status,2]
 15535  1F15  0021               	movlb	1	; select bank1
 15536  1F16  112D               	bcf	(_myMain^(0+128)+13),2
 15537                           
 15538                           ;main_B1.c: 272: myMain.Timeout_Counter = 0;
 15539  1F17  01AE               	clrf	(_myMain^(0+128)+14)
 15540  1F18  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15541  1F19  0008               	return
 15542  1F1A                     __end_of_set_TimeoutCleared:	
 15543                           
 15544                           	psect	text106
 15545  119D                     __ptext106:	
 15546 ;; *************** function _Timeout_Counter *****************
 15547 ;; Defined at:
 15548 ;;		line 261 in file "../src/main_B1.c"
 15549 ;; Parameters:    Size  Location     Type
 15550 ;;		None
 15551 ;; Auto vars:     Size  Location     Type
 15552 ;;		None
 15553 ;; Return value:  Size  Location     Type
 15554 ;;		None               void
 15555 ;; Registers used:
 15556 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15557 ;; Tracked objects:
 15558 ;;		On entry : 0/0
 15559 ;;		On exit  : 0/0
 15560 ;;		Unchanged: 0/0
 15561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;Total ram usage:        0 bytes
 15567 ;; Hardware stack levels used:    1
 15568 ;; Hardware stack levels required when called:    5
 15569 ;; This function calls:
 15570 ;;		Nothing
 15571 ;; This function is called by:
 15572 ;;		_CC2500_TxData
 15573 ;;		_CC2500_RxData
 15574 ;;		_CC2500_PowerRST
 15575 ;;		_CC2500_WriteREG
 15576 ;;		_CC2500_WriteCommand
 15577 ;;		_CC2500_ReadStatus
 15578 ;;		_TouchPower
 15579 ;;		_CC2500_ReadREG
 15580 ;;		_getAD
 15581 ;; This function uses a non-reentrant model
 15582 ;;
 15583                           
 15584                           
 15585                           ;psect for function _Timeout_Counter
 15586  119D                     _Timeout_Counter:	
 15587                           
 15588                           ;main_B1.c: 262: myMain.Timeout_Counter++;
 15589                           
 15590                           ;incstack = 0
 15591                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15592  119D  3001               	movlw	1
 15593  119E  0021               	movlb	1	; select bank1
 15594  119F  07AE               	addwf	(_myMain^(0+128)+14),f
 15595  11A0  3000               	movlw	0
 15596  11A1  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 15597                           
 15598                           ;main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 15599  11A2  300E               	movlw	14
 15600  11A3  3EA0               	addlw	_myMain& (0+255)
 15601  11A4  0086               	movwf	6
 15602  11A5  0187               	clrf	7
 15603  11A6  3F40               	moviw [0]fsr1
 15604  11A7  3A10               	xorlw	16
 15605  11A8  1D03               	skipz
 15606  11A9  29AC               	goto	u4555
 15607  11AA  3F41               	moviw [1]fsr1
 15608  11AB  3A27               	xorlw	39
 15609  11AC                     u4555:	
 15610  11AC  1D03               	skipz
 15611  11AD  0008               	return
 15612                           
 15613                           ;main_B1.c: 264: myMain.Timeout_Counter = 0;
 15614  11AE  01AE               	clrf	(_myMain^(0+128)+14)
 15615  11AF  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15616                           
 15617                           ;main_B1.c: 265: myMain.Timeout = 1;
 15618  11B0  152D               	bsf	(_myMain^(0+128)+13),2
 15619  11B1  0008               	return
 15620  11B2                     __end_of_Timeout_Counter:	
 15621                           
 15622                           	psect	text107
 15623  1208                     __ptext107:	
 15624 ;; *************** function _CC2500_WriteByte *****************
 15625 ;; Defined at:
 15626 ;;		line 222 in file "../src/CC2500_B1.c"
 15627 ;; Parameters:    Size  Location     Type
 15628 ;;		None
 15629 ;; Auto vars:     Size  Location     Type
 15630 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15631 ;; Return value:  Size  Location     Type
 15632 ;;		None               void
 15633 ;; Registers used:
 15634 ;;		wreg, status,2, status,0
 15635 ;; Tracked objects:
 15636 ;;		On entry : 0/0
 15637 ;;		On exit  : 0/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15644 ;;Total ram usage:        2 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; Hardware stack levels required when called:    5
 15647 ;; This function calls:
 15648 ;;		Nothing
 15649 ;; This function is called by:
 15650 ;;		_CC2500_TxData
 15651 ;;		_CC2500_RxData
 15652 ;;		_CC2500_PowerRST
 15653 ;;		_CC2500_WriteREG
 15654 ;;		_CC2500_WriteCommand
 15655 ;;		_CC2500_ReadStatus
 15656 ;;		_CC2500_ReadREG
 15657 ;; This function uses a non-reentrant model
 15658 ;;
 15659                           
 15660                           
 15661                           ;psect for function _CC2500_WriteByte
 15662  1208                     _CC2500_WriteByte:	
 15663                           
 15664                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15665                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15666                           
 15667                           ;incstack = 0
 15668                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15669  1208  0020               	movlb	0	; select bank0
 15670  1209  01A1               	clrf	CC2500_WriteByte@loop_a
 15671  120A                     L8:	
 15672  120A  3008               	movlw	8
 15673  120B  0221               	subwf	CC2500_WriteByte@loop_a,w
 15674  120C  1803               	btfsc	3,0
 15675  120D  0008               	return
 15676                           
 15677                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15678  120E  0021               	movlb	1	; select bank1
 15679  120F  1FD9               	btfss	_SPI0Buffer^(0+128),7
 15680  1210  2A14               	goto	l322
 15681                           
 15682                           ;CC2500_B1.c: 226: RC0 = 1;
 15683  1211  0020               	movlb	0	; select bank0
 15684  1212  140E               	bsf	14,0	;volatile
 15685  1213  2A16               	goto	l323
 15686  1214                     l322:	
 15687                           
 15688                           ;CC2500_B1.c: 227: else
 15689                           ;CC2500_B1.c: 228: RC0 = 0;
 15690  1214  0020               	movlb	0	; select bank0
 15691  1215  100E               	bcf	14,0	;volatile
 15692  1216                     l323:	
 15693                           
 15694                           ;CC2500_B1.c: 229: RC1 = 1;
 15695  1216  148E               	bsf	14,1	;volatile
 15696                           
 15697                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15698  1217  1003               	clrc
 15699  1218  0021               	movlb	1	; select bank1
 15700  1219  0DD9               	rlf	_SPI0Buffer^(0+128),f
 15701                           
 15702                           ;CC2500_B1.c: 231: RC1 = 0;
 15703  121A  0020               	movlb	0	; select bank0
 15704  121B  108E               	bcf	14,1	;volatile
 15705  121C  3001               	movlw	1
 15706  121D  00A0               	movwf	??_CC2500_WriteByte
 15707  121E  0820               	movf	??_CC2500_WriteByte,w
 15708  121F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15709  1220  2A0A               	goto	L8
 15710  1221                     __end_of_CC2500_WriteByte:	
 15711                           
 15712                           	psect	text108
 15713  17B6                     __ptext108:	
 15714 ;; *************** function _Buzzer_Main *****************
 15715 ;; Defined at:
 15716 ;;		line 46 in file "../src/Buzzer_B1.c"
 15717 ;; Parameters:    Size  Location     Type
 15718 ;;		None
 15719 ;; Auto vars:     Size  Location     Type
 15720 ;;		None
 15721 ;; Return value:  Size  Location     Type
 15722 ;;		None               void
 15723 ;; Registers used:
 15724 ;;		wreg, status,2, status,0
 15725 ;; Tracked objects:
 15726 ;;		On entry : 0/0
 15727 ;;		On exit  : 0/0
 15728 ;;		Unchanged: 0/0
 15729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;Total ram usage:        1 bytes
 15735 ;; Hardware stack levels used:    1
 15736 ;; Hardware stack levels required when called:    5
 15737 ;; This function calls:
 15738 ;;		Nothing
 15739 ;; This function is called by:
 15740 ;;		_main
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           
 15745                           ;psect for function _Buzzer_Main
 15746  17B6                     _Buzzer_Main:	
 15747                           
 15748                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15749                           
 15750                           ;incstack = 0
 15751                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15752  17B6  0021               	movlb	1	; select bank1
 15753  17B7  1CB0               	btfss	_Buz1^(0+128),1
 15754  17B8  0008               	return
 15755                           
 15756                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15757  17B9  3001               	movlw	1
 15758  17BA  07B1               	addwf	(_Buz1^(0+128)+1),f
 15759  17BB  3000               	movlw	0
 15760  17BC  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 15761                           
 15762                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15763  17BD  0837               	movf	((_Buz1+1)^(0+128)+6),w
 15764  17BE  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 15765  17BF  1D03               	skipz
 15766  17C0  2FC3               	goto	u6605
 15767  17C1  0836               	movf	(_Buz1^(0+128)+6),w
 15768  17C2  0231               	subwf	(_Buz1^(0+128)+1),w
 15769  17C3                     u6605:	
 15770  17C3  1C03               	skipc
 15771  17C4  0008               	return
 15772                           
 15773                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15774  17C5  01B1               	clrf	(_Buz1^(0+128)+1)
 15775  17C6  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 15776                           
 15777                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15778  17C7  12B0               	bcf	_Buz1^(0+128),5
 15779  17C8  0020               	movlb	0	; select bank0
 15780  17C9  1D8D               	btfss	13,3	;volatile
 15781  17CA  2FCD               	goto	l6970
 15782  17CB  0021               	movlb	1	; select bank1
 15783  17CC  16B0               	bsf	_Buz1^(0+128),5
 15784  17CD                     l6970:	
 15785                           
 15786                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15787  17CD  0021               	movlb	1	; select bank1
 15788  17CE  1AB0               	btfsc	_Buz1^(0+128),5
 15789  17CF  2FF9               	goto	l102
 15790                           
 15791                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15792  17D0  08B3               	movf	(_Buz1^(0+128)+3),f
 15793  17D1  1D03               	skipz
 15794  17D2  2FF5               	goto	l103
 15795                           
 15796                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15797  17D3  1DB0               	btfss	_Buz1^(0+128),3
 15798  17D4  2FE3               	goto	l104
 15799                           
 15800                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15801  17D5  11B0               	bcf	_Buz1^(0+128),3
 15802                           
 15803                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15804  17D6  0834               	movf	(_Buz1^(0+128)+4),w
 15805  17D7  0020               	movlb	0	; select bank0
 15806  17D8  00A0               	movwf	??_Buzzer_Main
 15807  17D9  0820               	movf	??_Buzzer_Main,w
 15808  17DA  0021               	movlb	1	; select bank1
 15809  17DB  00B3               	movwf	(_Buz1^(0+128)+3)
 15810                           
 15811                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15812  17DC  0839               	movf	((_Buz1+1)^(0+128)+8),w
 15813  17DD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15814  17DE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15815  17DF  0838               	movf	(_Buz1^(0+128)+8),w
 15816  17E0  01B6               	clrf	(_Buz1^(0+128)+6)
 15817  17E1  07B6               	addwf	(_Buz1^(0+128)+6),f
 15818                           
 15819                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15820  17E2  0008               	return
 15821  17E3                     l104:	
 15822  17E3  1E30               	btfss	_Buz1^(0+128),4
 15823  17E4  2FF3               	goto	l106
 15824                           
 15825                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15826  17E5  1230               	bcf	_Buz1^(0+128),4
 15827                           
 15828                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15829  17E6  0835               	movf	(_Buz1^(0+128)+5),w
 15830  17E7  0020               	movlb	0	; select bank0
 15831  17E8  00A0               	movwf	??_Buzzer_Main
 15832  17E9  0820               	movf	??_Buzzer_Main,w
 15833  17EA  0021               	movlb	1	; select bank1
 15834  17EB  00B3               	movwf	(_Buz1^(0+128)+3)
 15835                           
 15836                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15837  17EC  083B               	movf	((_Buz1+1)^(0+128)+10),w
 15838  17ED  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15839  17EE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15840  17EF  083A               	movf	(_Buz1^(0+128)+10),w
 15841  17F0  01B6               	clrf	(_Buz1^(0+128)+6)
 15842  17F1  07B6               	addwf	(_Buz1^(0+128)+6),f
 15843                           
 15844                           ;Buzzer_B1.c: 62: } else {
 15845  17F2  0008               	return
 15846  17F3                     l106:	
 15847                           
 15848                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15849  17F3  10B0               	bcf	_Buz1^(0+128),1
 15850                           
 15851                           ;Buzzer_B1.c: 64: }
 15852                           ;Buzzer_B1.c: 65: } else {
 15853  17F4  0008               	return
 15854  17F5                     l103:	
 15855                           
 15856                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15857  17F5  16B0               	bsf	_Buz1^(0+128),5
 15858                           
 15859                           ;Buzzer_B1.c: 68: RB3 = 1;
 15860  17F6  0020               	movlb	0	; select bank0
 15861  17F7  158D               	bsf	13,3	;volatile
 15862                           
 15863                           ;Buzzer_B1.c: 69: }
 15864                           ;Buzzer_B1.c: 70: } else {
 15865  17F8  0008               	return
 15866  17F9                     l102:	
 15867                           
 15868                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15869  17F9  12B0               	bcf	_Buz1^(0+128),5
 15870                           
 15871                           ;Buzzer_B1.c: 73: RB3 = 0;
 15872  17FA  0020               	movlb	0	; select bank0
 15873  17FB  118D               	bcf	13,3	;volatile
 15874                           
 15875                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15876  17FC  3001               	movlw	1
 15877  17FD  0021               	movlb	1	; select bank1
 15878  17FE  02B3               	subwf	(_Buz1^(0+128)+3),f
 15879  17FF  0008               	return
 15880  1800                     __end_of_Buzzer_Main:	
 15881                           
 15882                           	psect	text109
 15883  1EF8                     __ptext109:	
 15884 ;; *************** function _Buzzer_Initialization *****************
 15885 ;; Defined at:
 15886 ;;		line 11 in file "../src/Buzzer_B1.c"
 15887 ;; Parameters:    Size  Location     Type
 15888 ;;		None
 15889 ;; Auto vars:     Size  Location     Type
 15890 ;;		None
 15891 ;; Return value:  Size  Location     Type
 15892 ;;		None               void
 15893 ;; Registers used:
 15894 ;;		None
 15895 ;; Tracked objects:
 15896 ;;		On entry : 0/0
 15897 ;;		On exit  : 0/0
 15898 ;;		Unchanged: 0/0
 15899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;Total ram usage:        0 bytes
 15905 ;; Hardware stack levels used:    1
 15906 ;; Hardware stack levels required when called:    5
 15907 ;; This function calls:
 15908 ;;		Nothing
 15909 ;; This function is called by:
 15910 ;;		_main
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           
 15915                           ;psect for function _Buzzer_Initialization
 15916  1EF8                     _Buzzer_Initialization:	
 15917                           
 15918                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15919                           
 15920                           ;incstack = 0
 15921                           ; Regs used in _Buzzer_Initialization: []
 15922  1EF8  0021               	movlb	1	; select bank1
 15923  1EF9  1430               	bsf	_Buz1^(0+128),0
 15924  1EFA  0008               	return
 15925  1EFB                     __end_of_Buzzer_Initialization:	
 15926                           
 15927                           	psect	intentry
 15928  0004                     __pintentry:	
 15929 ;; *************** function _ISR *****************
 15930 ;; Defined at:
 15931 ;;		line 107 in file "../src/MCU_B1.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;		None
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;		None
 15936 ;; Return value:  Size  Location     Type
 15937 ;;		None               void
 15938 ;; Registers used:
 15939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15940 ;; Tracked objects:
 15941 ;;		On entry : 0/0
 15942 ;;		On exit  : 0/0
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15948 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;Total ram usage:        1 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    4
 15952 ;; This function calls:
 15953 ;;		_IOC_ISR
 15954 ;;		_TMR1_ISR
 15955 ;; This function is called by:
 15956 ;;		Interrupt level 1
 15957 ;; This function uses a non-reentrant model
 15958 ;;
 15959                           
 15960  0004                     _ISR:	
 15961                           
 15962                           ;incstack = 0
 15963                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15964  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15965  0005  3180               	pagesel	$
 15966  0006  0020               	movlb	0	; select bank0
 15967  0007  087F               	movf	127,w
 15968  0008  00F7               	movwf	??_ISR
 15969                           
 15970                           ;MCU_B1.c: 109: IOC_ISR();
 15971  0009  319F  27D2  3180   	fcall	_IOC_ISR
 15972                           
 15973                           ;MCU_B1.c: 111: ;;
 15974                           ;MCU_B1.c: 113: TMR1_ISR();
 15975  000C  3194  2445         	fcall	_TMR1_ISR
 15976  000E  0877               	movf	??_ISR,w
 15977  000F  0020               	movlb	0	; select bank0
 15978  0010  00FF               	movwf	127
 15979  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15980  0012  0009               	retfie
 15981  0013                     __end_of_ISR:	
 15982                           
 15983                           	psect	text111
 15984  1445                     __ptext111:	
 15985 ;; *************** function _TMR1_ISR *****************
 15986 ;; Defined at:
 15987 ;;		line 209 in file "../src/MCU_B1.c"
 15988 ;; Parameters:    Size  Location     Type
 15989 ;;		None
 15990 ;; Auto vars:     Size  Location     Type
 15991 ;;		None
 15992 ;; Return value:  Size  Location     Type
 15993 ;;		None               void
 15994 ;; Registers used:
 15995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15996 ;; Tracked objects:
 15997 ;;		On entry : 0/0
 15998 ;;		On exit  : 0/0
 15999 ;;		Unchanged: 0/0
 16000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;Total ram usage:        0 bytes
 16006 ;; Hardware stack levels used:    1
 16007 ;; Hardware stack levels required when called:    2
 16008 ;; This function calls:
 16009 ;;		_setDimmerLights_IntrControl
 16010 ;; This function is called by:
 16011 ;;		_ISR
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           
 16016                           ;psect for function _TMR1_ISR
 16017  1445                     _TMR1_ISR:	
 16018                           
 16019                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 16020                           
 16021                           ;incstack = 0
 16022                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16023  1445  0021               	movlb	1	; select bank1
 16024  1446  1C11               	btfss	17,0	;volatile
 16025  1447  0008               	return
 16026  1448  0020               	movlb	0	; select bank0
 16027  1449  1C11               	btfss	17,0	;volatile
 16028  144A  0008               	return
 16029                           
 16030                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 16031  144B  30FA               	movlw	250
 16032  144C  0097               	movwf	23	;volatile
 16033                           
 16034                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 16035  144D  3038               	movlw	56
 16036  144E  0096               	movwf	22	;volatile
 16037                           
 16038                           ;MCU_B1.c: 214: TMR1IF = 0;
 16039  144F  1011               	bcf	17,0	;volatile
 16040                           
 16041                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 16042  1450  3001               	movlw	1
 16043  1451  3181  21B0  3194   	fcall	_setDimmerLights_IntrControl
 16044                           
 16045                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 16046  1454  3002               	movlw	2
 16047  1455  3181  21B0  3194   	fcall	_setDimmerLights_IntrControl
 16048                           
 16049                           ;MCU_B1.c: 234: Timer1.Count++;
 16050  1458  3001               	movlw	1
 16051  1459  0021               	movlb	1	; select bank1
 16052  145A  07CC               	addwf	(_Timer1^(0+128)+1),f
 16053  145B  3000               	movlw	0
 16054  145C  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 16055                           
 16056                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 16057  145D  3001               	movlw	1
 16058  145E  3ECB               	addlw	_Timer1& (0+255)
 16059  145F  0086               	movwf	6
 16060  1460  0187               	clrf	7
 16061  1461  3F40               	moviw [0]fsr1
 16062  1462  3A64               	xorlw	100
 16063  1463  1D03               	skipz
 16064  1464  2C67               	goto	u672_25
 16065  1465  3F41               	moviw [1]fsr1
 16066  1466  3A00               	xorlw	0
 16067  1467                     u672_25:	
 16068  1467  1D03               	skipz
 16069  1468  0008               	return
 16070                           
 16071                           ;MCU_B1.c: 236: {
 16072                           ;MCU_B1.c: 237: Timer1.Count = 0;
 16073  1469  01CC               	clrf	(_Timer1^(0+128)+1)
 16074  146A  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 16075                           
 16076                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 16077  146B  144B               	bsf	_Timer1^(0+128),0
 16078  146C  0008               	return
 16079  146D                     __end_of_TMR1_ISR:	
 16080                           
 16081                           	psect	text112
 16082  01B0                     __ptext112:	
 16083 ;; *************** function _setDimmerLights_IntrControl *****************
 16084 ;; Defined at:
 16085 ;;		line 92 in file "../src/Dimmer_B1.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;  lights          1    wreg     unsigned char 
 16088 ;; Auto vars:     Size  Location     Type
 16089 ;;  lights          1    6[COMMON] unsigned char 
 16090 ;; Return value:  Size  Location     Type
 16091 ;;		None               void
 16092 ;; Registers used:
 16093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16094 ;; Tracked objects:
 16095 ;;		On entry : 0/0
 16096 ;;		On exit  : 0/0
 16097 ;;		Unchanged: 0/0
 16098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;Total ram usage:        5 bytes
 16104 ;; Hardware stack levels used:    1
 16105 ;; Hardware stack levels required when called:    1
 16106 ;; This function calls:
 16107 ;;		_DimmerIntrPointSelect
 16108 ;; This function is called by:
 16109 ;;		_TMR1_ISR
 16110 ;; This function uses a non-reentrant model
 16111 ;;
 16112                           
 16113                           
 16114                           ;psect for function _setDimmerLights_IntrControl
 16115  01B0                     _setDimmerLights_IntrControl:	
 16116                           
 16117                           ;incstack = 0
 16118                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16119                           ;setDimmerLights_IntrControl@lights stored from wreg
 16120  01B0  00F6               	movwf	setDimmerLights_IntrControl@lights
 16121                           
 16122                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 16123  01B1  0876               	movf	setDimmerLights_IntrControl@lights,w
 16124  01B2  3190  20A7  3181   	fcall	_DimmerIntrPointSelect
 16125                           
 16126                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 16127  01B5  087A               	movf	_DimmerLightsIntr,w
 16128  01B6  0086               	movwf	6
 16129  01B7  3001               	movlw	1	; select bank2/3
 16130  01B8  0087               	movwf	7
 16131  01B9  1C01               	btfss	1,0
 16132  01BA  2A12               	goto	i1l6532
 16133                           
 16134                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 16135  01BB  3001               	movlw	1
 16136  01BC  00F2               	movwf	??_setDimmerLights_IntrControl
 16137  01BD  087A               	movf	_DimmerLightsIntr,w
 16138  01BE  3E03               	addlw	3
 16139  01BF  0086               	movwf	6
 16140  01C0  3001               	movlw	1	; select bank2/3
 16141  01C1  0087               	movwf	7
 16142  01C2  0872               	movf	??_setDimmerLights_IntrControl,w
 16143  01C3  0781               	addwf	1,f
 16144                           
 16145                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 16146                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 16147  01C4  0021               	movlb	1	; select bank1
 16148  01C5  084A               	movf	(_Dimmer^(0+128)+2),w
 16149  01C6  00F2               	movwf	??_setDimmerLights_IntrControl
 16150  01C7  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16151  01C8  09F2               	comf	??_setDimmerLights_IntrControl,f
 16152  01C9  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16153  01CA  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16154  01CB  1903               	skipnz
 16155  01CC  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16156  01CD  087A               	movf	_DimmerLightsIntr,w
 16157  01CE  3E04               	addlw	4
 16158  01CF  0086               	movwf	6
 16159  01D0  3001               	movlw	1	; select bank2/3
 16160  01D1  0087               	movwf	7
 16161  01D2  0801               	movf	1,w
 16162  01D3  0772               	addwf	??_setDimmerLights_IntrControl,w
 16163  01D4  00F4               	movwf	??_setDimmerLights_IntrControl+2
 16164  01D5  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16165  01D6  1803               	skipnc
 16166  01D7  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 16167  01D8  00F5               	movwf	??_setDimmerLights_IntrControl+3
 16168  01D9  087A               	movf	_DimmerLightsIntr,w
 16169  01DA  3E03               	addlw	3
 16170  01DB  0086               	movwf	6
 16171  01DC  3001               	movlw	1	; select bank2/3
 16172  01DD  0087               	movwf	7
 16173  01DE  0875               	movf	??_setDimmerLights_IntrControl+3,w
 16174  01DF  3A80               	xorlw	128
 16175  01E0  3C80               	sublw	128
 16176  01E1  1D03               	skipz
 16177  01E2  29E5               	goto	u577_25
 16178  01E3  0874               	movf	??_setDimmerLights_IntrControl+2,w
 16179  01E4  0201               	subwf	1,w
 16180  01E5                     u577_25:	
 16181  01E5  1C03               	skipc
 16182  01E6  0008               	return
 16183                           
 16184                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 16185  01E7  087A               	movf	_DimmerLightsIntr,w
 16186  01E8  3E03               	addlw	3
 16187  01E9  0086               	movwf	6
 16188  01EA  3001               	movlw	1	; select bank2/3
 16189  01EB  0087               	movwf	7
 16190  01EC  0181               	clrf	1
 16191                           
 16192                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 16193  01ED  087A               	movf	_DimmerLightsIntr,w
 16194  01EE  0086               	movwf	6
 16195  01EF  3001               	movlw	1	; select bank2/3
 16196  01F0  0087               	movwf	7
 16197  01F1  1001               	bcf	1,0
 16198                           
 16199                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 16200  01F2  087A               	movf	_DimmerLightsIntr,w
 16201  01F3  3E08               	addlw	8
 16202  01F4  0086               	movwf	6
 16203  01F5  3001               	movlw	1	; select bank2/3
 16204  01F6  0087               	movwf	7
 16205  01F7  1401               	bsf	1,0
 16206                           
 16207                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 16208  01F8  087A               	movf	_DimmerLightsIntr,w
 16209  01F9  3E09               	addlw	9
 16210  01FA  0086               	movwf	6
 16211  01FB  3001               	movlw	1	; select bank2/3
 16212  01FC  0087               	movwf	7
 16213  01FD  1E01               	btfss	1,4
 16214  01FE  0008               	return
 16215                           
 16216                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 16217  01FF  087A               	movf	_DimmerLightsIntr,w
 16218  0200  3E09               	addlw	9
 16219  0201  0086               	movwf	6
 16220  0202  3001               	movlw	1	; select bank2/3
 16221  0203  0087               	movwf	7
 16222  0204  1201               	bcf	1,4
 16223                           
 16224                           ;Dimmer_B1.c: 239: if (lights == 1) {
 16225  0205  0876               	movf	setDimmerLights_IntrControl@lights,w
 16226  0206  3A01               	xorlw	1
 16227  0207  1D03               	skipz
 16228  0208  2A0B               	goto	i1l6528
 16229                           
 16230                           ;Dimmer_B1.c: 240: RA7 = 0;
 16231  0209  0020               	movlb	0	; select bank0
 16232  020A  138C               	bcf	12,7	;volatile
 16233  020B                     i1l6528:	
 16234                           ;Dimmer_B1.c: 241: ;;
 16235                           
 16236                           
 16237                           ;Dimmer_B1.c: 242: }
 16238                           ;Dimmer_B1.c: 245: if (lights == 2) {
 16239  020B  0876               	movf	setDimmerLights_IntrControl@lights,w
 16240  020C  3A02               	xorlw	2
 16241  020D  1D03               	skipz
 16242  020E  0008               	return
 16243                           
 16244                           ;Dimmer_B1.c: 246: RB4 = 0;
 16245  020F  0020               	movlb	0	; select bank0
 16246  0210  120D               	bcf	13,4	;volatile
 16247                           
 16248                           ;Dimmer_B1.c: 247: }
 16249                           ;Dimmer_B1.c: 249: }
 16250                           ;Dimmer_B1.c: 250: }
 16251                           ;Dimmer_B1.c: 251: } else {
 16252  0211  0008               	return
 16253  0212                     i1l6532:	
 16254                           
 16255                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 16256  0212  087A               	movf	_DimmerLightsIntr,w
 16257  0213  3E08               	addlw	8
 16258  0214  0086               	movwf	6
 16259  0215  3001               	movlw	1	; select bank2/3
 16260  0216  0087               	movwf	7
 16261  0217  1C01               	btfss	1,0
 16262  0218  2AC6               	goto	i1l719
 16263                           
 16264                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 16265  0219  087A               	movf	_DimmerLightsIntr,w
 16266  021A  3E08               	addlw	8
 16267  021B  0086               	movwf	6
 16268  021C  3001               	movlw	1	; select bank2/3
 16269  021D  0087               	movwf	7
 16270  021E  1001               	bcf	1,0
 16271                           
 16272                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 16273  021F  087A               	movf	_DimmerLightsIntr,w
 16274  0220  0086               	movwf	6
 16275  0221  3001               	movlw	1	; select bank2/3
 16276  0222  0087               	movwf	7
 16277  0223  1C81               	btfss	1,1
 16278  0224  2AC6               	goto	i1l719
 16279                           
 16280                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 16281  0225  3001               	movlw	1
 16282  0226  00F2               	movwf	??_setDimmerLights_IntrControl
 16283  0227  0A7A               	incf	_DimmerLightsIntr,w
 16284  0228  0086               	movwf	6
 16285  0229  3001               	movlw	1	; select bank2/3
 16286  022A  0087               	movwf	7
 16287  022B  0872               	movf	??_setDimmerLights_IntrControl,w
 16288  022C  0781               	addwf	1,f
 16289                           
 16290                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16291  022D  0A7A               	incf	_DimmerLightsIntr,w
 16292  022E  0086               	movwf	6
 16293  022F  3001               	movlw	1	; select bank2/3
 16294  0230  0087               	movwf	7
 16295  0231  087A               	movf	_DimmerLightsIntr,w
 16296  0232  3E02               	addlw	2
 16297  0233  0084               	movwf	4
 16298  0234  3001               	movlw	1	; select bank2/3
 16299  0235  0085               	movwf	5
 16300  0236  0800               	movf	0,w
 16301  0237  0201               	subwf	1,w
 16302  0238  1C03               	skipc
 16303  0239  2AC6               	goto	i1l719
 16304                           
 16305                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 16306  023A  0A7A               	incf	_DimmerLightsIntr,w
 16307  023B  0086               	movwf	6
 16308  023C  3001               	movlw	1	; select bank2/3
 16309  023D  0087               	movwf	7
 16310  023E  0181               	clrf	1
 16311                           
 16312                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 16313  023F  087A               	movf	_DimmerLightsIntr,w
 16314  0240  0086               	movwf	6
 16315  0241  3001               	movlw	1	; select bank2/3
 16316  0242  0087               	movwf	7
 16317  0243  1D81               	btfss	1,3
 16318  0244  2A7B               	goto	i1l6558
 16319                           
 16320                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 16321  0245  087A               	movf	_DimmerLightsIntr,w
 16322  0246  0086               	movwf	6
 16323  0247  3001               	movlw	1	; select bank2/3
 16324  0248  0087               	movwf	7
 16325  0249  1A01               	btfsc	1,4
 16326  024A  2A64               	goto	i1l6552
 16327                           
 16328                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 16329  024B  087A               	movf	_DimmerLightsIntr,w
 16330  024C  3E04               	addlw	4
 16331  024D  0086               	movwf	6
 16332  024E  3001               	movlw	1	; select bank2/3
 16333  024F  0087               	movwf	7
 16334  0250  3040               	movlw	64
 16335  0251  0201               	subwf	1,w
 16336  0252  1803               	skipnc
 16337  0253  2A5E               	goto	i1l6550
 16338                           
 16339                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 16340  0254  3001               	movlw	1
 16341  0255  00F2               	movwf	??_setDimmerLights_IntrControl
 16342  0256  087A               	movf	_DimmerLightsIntr,w
 16343  0257  3E04               	addlw	4
 16344  0258  0086               	movwf	6
 16345  0259  3001               	movlw	1	; select bank2/3
 16346  025A  0087               	movwf	7
 16347  025B  0872               	movf	??_setDimmerLights_IntrControl,w
 16348  025C  0781               	addwf	1,f
 16349                           
 16350                           ;Dimmer_B1.c: 262: } else {
 16351  025D  2AC6               	goto	i1l719
 16352  025E                     i1l6550:	
 16353                           
 16354                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 16355  025E  087A               	movf	_DimmerLightsIntr,w
 16356  025F  0086               	movwf	6
 16357  0260  3001               	movlw	1	; select bank2/3
 16358  0261  0087               	movwf	7
 16359  0262  1601               	bsf	1,4
 16360                           
 16361                           ;Dimmer_B1.c: 264: }
 16362                           ;Dimmer_B1.c: 265: } else {
 16363  0263  2AC6               	goto	i1l719
 16364  0264                     i1l6552:	
 16365                           
 16366                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(10*0.8))) {
 16367  0264  087A               	movf	_DimmerLightsIntr,w
 16368  0265  3E04               	addlw	4
 16369  0266  0086               	movwf	6
 16370  0267  3001               	movlw	1	; select bank2/3
 16371  0268  0087               	movwf	7
 16372  0269  3009               	movlw	9
 16373  026A  0201               	subwf	1,w
 16374  026B  1C03               	skipc
 16375  026C  2A75               	goto	i1l6556
 16376                           
 16377                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 16378  026D  087A               	movf	_DimmerLightsIntr,w
 16379  026E  3E04               	addlw	4
 16380  026F  0086               	movwf	6
 16381  0270  3001               	movlw	1	; select bank2/3
 16382  0271  0087               	movwf	7
 16383  0272  3001               	movlw	1
 16384  0273  0281               	subwf	1,f
 16385                           
 16386                           ;Dimmer_B1.c: 268: } else {
 16387  0274  2AC6               	goto	i1l719
 16388  0275                     i1l6556:	
 16389                           
 16390                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 16391  0275  087A               	movf	_DimmerLightsIntr,w
 16392  0276  0086               	movwf	6
 16393  0277  3001               	movlw	1	; select bank2/3
 16394  0278  0087               	movwf	7
 16395  0279  1201               	bcf	1,4
 16396                           
 16397                           ;Dimmer_B1.c: 270: }
 16398                           ;Dimmer_B1.c: 271: }
 16399                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 16400  027A  2AC6               	goto	i1l719
 16401  027B                     i1l6558:	
 16402  027B  087A               	movf	_DimmerLightsIntr,w
 16403  027C  0086               	movwf	6
 16404  027D  3001               	movlw	1	; select bank2/3
 16405  027E  0087               	movwf	7
 16406  027F  1D01               	btfss	1,2
 16407  0280  2AC6               	goto	i1l719
 16408                           
 16409                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 16410  0281  087A               	movf	_DimmerLightsIntr,w
 16411  0282  3E04               	addlw	4
 16412  0283  0086               	movwf	6
 16413  0284  3001               	movlw	1	; select bank2/3
 16414  0285  0087               	movwf	7
 16415  0286  087A               	movf	_DimmerLightsIntr,w
 16416  0287  3E05               	addlw	5
 16417  0288  0084               	movwf	4
 16418  0289  3001               	movlw	1	; select bank2/3
 16419  028A  0085               	movwf	5
 16420  028B  0800               	movf	0,w
 16421  028C  0201               	subwf	1,w
 16422  028D  1803               	skipnc
 16423  028E  2A99               	goto	i1l6564
 16424                           
 16425                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 16426  028F  3001               	movlw	1
 16427  0290  00F2               	movwf	??_setDimmerLights_IntrControl
 16428  0291  087A               	movf	_DimmerLightsIntr,w
 16429  0292  3E04               	addlw	4
 16430  0293  0086               	movwf	6
 16431  0294  3001               	movlw	1	; select bank2/3
 16432  0295  0087               	movwf	7
 16433  0296  0872               	movf	??_setDimmerLights_IntrControl,w
 16434  0297  0781               	addwf	1,f
 16435                           
 16436                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 16437  0298  2AAE               	goto	i1l6568
 16438  0299                     i1l6564:	
 16439  0299  087A               	movf	_DimmerLightsIntr,w
 16440  029A  3E05               	addlw	5
 16441  029B  0086               	movwf	6
 16442  029C  3001               	movlw	1	; select bank2/3
 16443  029D  0087               	movwf	7
 16444  029E  087A               	movf	_DimmerLightsIntr,w
 16445  029F  3E04               	addlw	4
 16446  02A0  0084               	movwf	4
 16447  02A1  3001               	movlw	1	; select bank2/3
 16448  02A2  0085               	movwf	5
 16449  02A3  0800               	movf	0,w
 16450  02A4  0201               	subwf	1,w
 16451  02A5  1803               	skipnc
 16452  02A6  2AAE               	goto	i1l6568
 16453                           
 16454                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 16455  02A7  087A               	movf	_DimmerLightsIntr,w
 16456  02A8  3E04               	addlw	4
 16457  02A9  0086               	movwf	6
 16458  02AA  3001               	movlw	1	; select bank2/3
 16459  02AB  0087               	movwf	7
 16460  02AC  3001               	movlw	1
 16461  02AD  0281               	subwf	1,f
 16462  02AE                     i1l6568:	
 16463                           
 16464                           ;Dimmer_B1.c: 277: }
 16465                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16466  02AE  087A               	movf	_DimmerLightsIntr,w
 16467  02AF  3E05               	addlw	5
 16468  02B0  0086               	movwf	6
 16469  02B1  3001               	movlw	1	; select bank2/3
 16470  02B2  0087               	movwf	7
 16471  02B3  087A               	movf	_DimmerLightsIntr,w
 16472  02B4  3E04               	addlw	4
 16473  02B5  0084               	movwf	4
 16474  02B6  3001               	movlw	1	; select bank2/3
 16475  02B7  0085               	movwf	5
 16476  02B8  0800               	movf	0,w
 16477  02B9  0601               	xorwf	1,w
 16478  02BA  1D03               	skipz
 16479  02BB  2AC6               	goto	i1l719
 16480                           
 16481                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 16482  02BC  087A               	movf	_DimmerLightsIntr,w
 16483  02BD  0086               	movwf	6
 16484  02BE  3001               	movlw	1	; select bank2/3
 16485  02BF  0087               	movwf	7
 16486  02C0  1101               	bcf	1,2
 16487                           
 16488                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 16489  02C1  087A               	movf	_DimmerLightsIntr,w
 16490  02C2  0086               	movwf	6
 16491  02C3  3001               	movlw	1	; select bank2/3
 16492  02C4  0087               	movwf	7
 16493  02C5  1081               	bcf	1,1
 16494  02C6                     i1l719:	
 16495                           
 16496                           ;Dimmer_B1.c: 281: }
 16497                           ;Dimmer_B1.c: 282: }
 16498                           ;Dimmer_B1.c: 300: }
 16499                           ;Dimmer_B1.c: 301: }
 16500                           ;Dimmer_B1.c: 302: }
 16501                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 16502  02C6  087A               	movf	_DimmerLightsIntr,w
 16503  02C7  3E09               	addlw	9
 16504  02C8  0086               	movwf	6
 16505  02C9  3001               	movlw	1	; select bank2/3
 16506  02CA  0087               	movwf	7
 16507  02CB  1D81               	btfss	1,3
 16508  02CC  0008               	return
 16509                           
 16510                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 16511  02CD  3001               	movlw	1
 16512  02CE  00F2               	movwf	??_setDimmerLights_IntrControl
 16513  02CF  087A               	movf	_DimmerLightsIntr,w
 16514  02D0  3E0C               	addlw	12
 16515  02D1  0086               	movwf	6
 16516  02D2  3001               	movlw	1	; select bank2/3
 16517  02D3  0087               	movwf	7
 16518  02D4  0872               	movf	??_setDimmerLights_IntrControl,w
 16519  02D5  0781               	addwf	1,f
 16520                           
 16521                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 16522  02D6  087A               	movf	_DimmerLightsIntr,w
 16523  02D7  3E0C               	addlw	12
 16524  02D8  0086               	movwf	6
 16525  02D9  3001               	movlw	1	; select bank2/3
 16526  02DA  0087               	movwf	7
 16527  02DB  0801               	movf	1,w
 16528  02DC  3A05               	xorlw	5
 16529  02DD  1D03               	skipz
 16530  02DE  0008               	return
 16531                           
 16532                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 16533  02DF  087A               	movf	_DimmerLightsIntr,w
 16534  02E0  3E0C               	addlw	12
 16535  02E1  0086               	movwf	6
 16536  02E2  3001               	movlw	1	; select bank2/3
 16537  02E3  0087               	movwf	7
 16538  02E4  0181               	clrf	1
 16539                           
 16540                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 16541  02E5  087A               	movf	_DimmerLightsIntr,w
 16542  02E6  3E09               	addlw	9
 16543  02E7  0086               	movwf	6
 16544  02E8  3001               	movlw	1	; select bank2/3
 16545  02E9  0087               	movwf	7
 16546  02EA  1181               	bcf	1,3
 16547  02EB  0008               	return
 16548  02EC                     __end_of_setDimmerLights_IntrControl:	
 16549                           
 16550                           	psect	text113
 16551  10A7                     __ptext113:	
 16552 ;; *************** function _DimmerIntrPointSelect *****************
 16553 ;; Defined at:
 16554 ;;		line 70 in file "../src/Dimmer_B1.c"
 16555 ;; Parameters:    Size  Location     Type
 16556 ;;  lights          1    wreg     unsigned char 
 16557 ;; Auto vars:     Size  Location     Type
 16558 ;;  lights          1    1[COMMON] unsigned char 
 16559 ;; Return value:  Size  Location     Type
 16560 ;;		None               void
 16561 ;; Registers used:
 16562 ;;		wreg
 16563 ;; Tracked objects:
 16564 ;;		On entry : 0/0
 16565 ;;		On exit  : 0/0
 16566 ;;		Unchanged: 0/0
 16567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;Total ram usage:        2 bytes
 16573 ;; Hardware stack levels used:    1
 16574 ;; This function calls:
 16575 ;;		Nothing
 16576 ;; This function is called by:
 16577 ;;		_setDimmerLights_IntrControl
 16578 ;; This function uses a non-reentrant model
 16579 ;;
 16580                           
 16581                           
 16582                           ;psect for function _DimmerIntrPointSelect
 16583  10A7                     _DimmerIntrPointSelect:	
 16584                           
 16585                           ;incstack = 0
 16586                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16587                           ;DimmerIntrPointSelect@lights stored from wreg
 16588  10A7  00F1               	movwf	DimmerIntrPointSelect@lights
 16589                           
 16590                           ;Dimmer_B1.c: 72: if (lights == 1) {
 16591  10A8  0871               	movf	DimmerIntrPointSelect@lights,w
 16592  10A9  3A01               	xorlw	1
 16593  10AA  1D03               	skipz
 16594  10AB  28B0               	goto	i1l708
 16595                           
 16596                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 16597  10AC  303E               	movlw	_DimmerLights1& (0+255)
 16598  10AD  00F0               	movwf	??_DimmerIntrPointSelect
 16599  10AE  0870               	movf	??_DimmerIntrPointSelect,w
 16600  10AF  00FA               	movwf	_DimmerLightsIntr
 16601  10B0                     i1l708:	
 16602                           
 16603                           ;Dimmer_B1.c: 74: }
 16604                           ;Dimmer_B1.c: 77: if (lights == 2) {
 16605  10B0  0871               	movf	DimmerIntrPointSelect@lights,w
 16606  10B1  3A02               	xorlw	2
 16607  10B2  1D03               	skipz
 16608  10B3  0008               	return
 16609                           
 16610                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 16611  10B4  304D               	movlw	_DimmerLights2& (0+255)
 16612  10B5  00F0               	movwf	??_DimmerIntrPointSelect
 16613  10B6  0870               	movf	??_DimmerIntrPointSelect,w
 16614  10B7  00FA               	movwf	_DimmerLightsIntr
 16615  10B8  0008               	return
 16616  10B9                     __end_of_DimmerIntrPointSelect:	
 16617                           
 16618                           	psect	text114
 16619  1FD2                     __ptext114:	
 16620 ;; *************** function _IOC_ISR *****************
 16621 ;; Defined at:
 16622 ;;		line 401 in file "../src/MCU_B1.c"
 16623 ;; Parameters:    Size  Location     Type
 16624 ;;		None
 16625 ;; Auto vars:     Size  Location     Type
 16626 ;;		None
 16627 ;; Return value:  Size  Location     Type
 16628 ;;		None               void
 16629 ;; Registers used:
 16630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16631 ;; Tracked objects:
 16632 ;;		On entry : 0/0
 16633 ;;		On exit  : 0/0
 16634 ;;		Unchanged: 0/0
 16635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;Total ram usage:        0 bytes
 16641 ;; Hardware stack levels used:    1
 16642 ;; Hardware stack levels required when called:    3
 16643 ;; This function calls:
 16644 ;;		_setDimmerReClock
 16645 ;; This function is called by:
 16646 ;;		_ISR
 16647 ;; This function uses a non-reentrant model
 16648 ;;
 16649                           
 16650                           
 16651                           ;psect for function _IOC_ISR
 16652  1FD2                     _IOC_ISR:	
 16653                           
 16654                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 16655                           
 16656                           ;incstack = 0
 16657                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16658  1FD2  1D8B               	btfss	11,3	;volatile
 16659  1FD3  0008               	return
 16660  1FD4  1C0B               	btfss	11,0	;volatile
 16661  1FD5  0008               	return
 16662  1FD6  0027               	movlb	7	; select bank7
 16663  1FD7  1D16               	btfss	22,2	;volatile
 16664  1FD8  0008               	return
 16665                           
 16666                           ;MCU_B1.c: 403: IOCBF2 = 0;
 16667  1FD9  1116               	bcf	22,2	;volatile
 16668                           
 16669                           ;MCU_B1.c: 404: IOCIF = 0;
 16670  1FDA  100B               	bcf	11,0	;volatile
 16671                           
 16672                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 16673  1FDB  0021               	movlb	1	; select bank1
 16674  1FDC  1C20               	btfss	_myMain^(0+128),0
 16675  1FDD  0008               	return
 16676                           
 16677                           ;MCU_B1.c: 408: setDimmerReClock();
 16678  1FDE  319F  272D         	fcall	_setDimmerReClock
 16679  1FE0  0008               	return
 16680  1FE1                     __end_of_IOC_ISR:	
 16681                           
 16682                           	psect	text115
 16683  1F2D                     __ptext115:	
 16684 ;; *************** function _setDimmerReClock *****************
 16685 ;; Defined at:
 16686 ;;		line 244 in file "../src/MCU_B1.c"
 16687 ;; Parameters:    Size  Location     Type
 16688 ;;		None
 16689 ;; Auto vars:     Size  Location     Type
 16690 ;;		None
 16691 ;; Return value:  Size  Location     Type
 16692 ;;		None               void
 16693 ;; Registers used:
 16694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16695 ;; Tracked objects:
 16696 ;;		On entry : 0/0
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;Total ram usage:        0 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:    2
 16707 ;; This function calls:
 16708 ;;		_setDimmerLights_IntrIOC_GO
 16709 ;; This function is called by:
 16710 ;;		_IOC_ISR
 16711 ;; This function uses a non-reentrant model
 16712 ;;
 16713                           
 16714                           
 16715                           ;psect for function _setDimmerReClock
 16716  1F2D                     _setDimmerReClock:	
 16717                           
 16718                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 16719                           
 16720                           ;incstack = 0
 16721                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16722  1F2D  3001               	movlw	1
 16723  1F2E  3187  27C9  319F   	fcall	_setDimmerLights_IntrIOC_GO
 16724                           
 16725                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 16726  1F31  3002               	movlw	2
 16727  1F32  3187  27C9         	fcall	_setDimmerLights_IntrIOC_GO
 16728  1F34  0008               	return
 16729  1F35                     __end_of_setDimmerReClock:	
 16730                           
 16731                           	psect	text116
 16732  07C9                     __ptext116:	
 16733 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16734 ;; Defined at:
 16735 ;;		line 28 in file "../src/Dimmer_B1.c"
 16736 ;; Parameters:    Size  Location     Type
 16737 ;;  lights          1    wreg     unsigned char 
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;  lights          1    2[COMMON] unsigned char 
 16740 ;; Return value:  Size  Location     Type
 16741 ;;		None               void
 16742 ;; Registers used:
 16743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;Total ram usage:        1 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:    1
 16756 ;; This function calls:
 16757 ;;		_DimmerIntrIOCPointSelect
 16758 ;; This function is called by:
 16759 ;;		_setDimmerReClock
 16760 ;; This function uses a non-reentrant model
 16761 ;;
 16762                           
 16763                           
 16764                           ;psect for function _setDimmerLights_IntrIOC_GO
 16765  07C9                     _setDimmerLights_IntrIOC_GO:	
 16766                           
 16767                           ;incstack = 0
 16768                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16769                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16770  07C9  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16771                           
 16772                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 16773  07CA  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16774  07CB  3191  214D  3187   	fcall	_DimmerIntrIOCPointSelect
 16775                           
 16776                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 16777  07CE  0021               	movlb	1	; select bank1
 16778  07CF  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 16779  07D0  0086               	movwf	6
 16780  07D1  3001               	movlw	1	; select bank2/3
 16781  07D2  0087               	movwf	7
 16782  07D3  1801               	btfsc	1,0
 16783  07D4  0008               	return
 16784  07D5  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 16785  07D6  3E09               	addlw	9
 16786  07D7  0086               	movwf	6
 16787  07D8  3001               	movlw	1	; select bank2/3
 16788  07D9  0087               	movwf	7
 16789  07DA  1981               	btfsc	1,3
 16790  07DB  0008               	return
 16791                           
 16792                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 16793  07DC  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 16794  07DD  0086               	movwf	6
 16795  07DE  3001               	movlw	1	; select bank2/3
 16796  07DF  0087               	movwf	7
 16797  07E0  1401               	bsf	1,0
 16798                           
 16799                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 16800  07E1  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 16801  07E2  3E09               	addlw	9
 16802  07E3  0086               	movwf	6
 16803  07E4  3001               	movlw	1	; select bank2/3
 16804  07E5  0087               	movwf	7
 16805  07E6  1581               	bsf	1,3
 16806                           
 16807                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 16808  07E7  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 16809  07E8  0086               	movwf	6
 16810  07E9  3001               	movlw	1	; select bank2/3
 16811  07EA  0087               	movwf	7
 16812  07EB  1F01               	btfss	1,6
 16813  07EC  0008               	return
 16814                           
 16815                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 16816  07ED  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 16817  07EE  3E09               	addlw	9
 16818  07EF  0086               	movwf	6
 16819  07F0  3001               	movlw	1	; select bank2/3
 16820  07F1  0087               	movwf	7
 16821  07F2  1601               	bsf	1,4
 16822                           
 16823                           ;Dimmer_B1.c: 51: if (lights == 1) {
 16824  07F3  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16825  07F4  3A01               	xorlw	1
 16826  07F5  1D03               	skipz
 16827  07F6  2FF9               	goto	i1l6102
 16828                           
 16829                           ;Dimmer_B1.c: 52: RA7 = 1;
 16830  07F7  0020               	movlb	0	; select bank0
 16831  07F8  178C               	bsf	12,7	;volatile
 16832  07F9                     i1l6102:	
 16833                           ;Dimmer_B1.c: 53: ;;
 16834                           
 16835                           
 16836                           ;Dimmer_B1.c: 54: }
 16837                           ;Dimmer_B1.c: 57: if (lights == 2) {
 16838  07F9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16839  07FA  3A02               	xorlw	2
 16840  07FB  1D03               	skipz
 16841  07FC  0008               	return
 16842                           
 16843                           ;Dimmer_B1.c: 58: RB4 = 1;
 16844  07FD  0020               	movlb	0	; select bank0
 16845  07FE  160D               	bsf	13,4	;volatile
 16846  07FF  0008               	return
 16847  0800                     __end_of_setDimmerLights_IntrIOC_GO:	
 16848                           
 16849                           	psect	text117
 16850  114D                     __ptext117:	
 16851 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16852 ;; Defined at:
 16853 ;;		line 8 in file "../src/Dimmer_B1.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;  lights          1    wreg     unsigned char 
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;  lights          1    1[COMMON] unsigned char 
 16858 ;; Return value:  Size  Location     Type
 16859 ;;		None               void
 16860 ;; Registers used:
 16861 ;;		wreg
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16868 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;Total ram usage:        2 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; This function calls:
 16874 ;;		Nothing
 16875 ;; This function is called by:
 16876 ;;		_setDimmerLights_IntrIOC_GO
 16877 ;; This function uses a non-reentrant model
 16878 ;;
 16879                           
 16880                           
 16881                           ;psect for function _DimmerIntrIOCPointSelect
 16882  114D                     _DimmerIntrIOCPointSelect:	
 16883                           
 16884                           ;incstack = 0
 16885                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16886                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16887  114D  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16888                           
 16889                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16890  114E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16891  114F  3A01               	xorlw	1
 16892  1150  1D03               	skipz
 16893  1151  2957               	goto	i1l696
 16894                           
 16895                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16896  1152  303E               	movlw	_DimmerLights1& (0+255)
 16897  1153  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16898  1154  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16899  1155  0021               	movlb	1	; select bank1
 16900  1156  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 16901  1157                     i1l696:	
 16902                           
 16903                           ;Dimmer_B1.c: 12: }
 16904                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16905  1157  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16906  1158  3A02               	xorlw	2
 16907  1159  1D03               	skipz
 16908  115A  0008               	return
 16909                           
 16910                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16911  115B  304D               	movlw	_DimmerLights2& (0+255)
 16912  115C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16913  115D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16914  115E  0021               	movlb	1	; select bank1
 16915  115F  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 16916  1160  0008               	return
 16917  1161                     __end_of_DimmerIntrIOCPointSelect:	
 16918  007E                     btemp	set	126	;btemp
 16919  007E                     pic14e$flags	set	126
 16920  007E                     wtemp	set	126
 16921  007E                     wtemp0	set	126
 16922  0080                     wtemp1	set	128
 16923  0082                     wtemp2	set	130
 16924  0084                     wtemp3	set	132
 16925  0086                     wtemp4	set	134
 16926  0088                     wtemp5	set	136
 16927  007F                     wtemp6	set	127
 16928  007E                     ttemp	set	126
 16929  007E                     ttemp0	set	126
 16930  0081                     ttemp1	set	129
 16931  0084                     ttemp2	set	132
 16932  0087                     ttemp3	set	135
 16933  007F                     ttemp4	set	127
 16934  007E                     ltemp	set	126
 16935  007E                     ltemp0	set	126
 16936  0082                     ltemp1	set	130
 16937  0086                     ltemp2	set	134
 16938  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         198
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     79      80
    BANK1            80      9      76
    BANK2            80      0      72
    BANK3            80      0      55
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _getMain_LightsStatus->_getDimmerLights_Status
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  168365
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43351
                                             77 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27047
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     604
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0   16174
                                             75 BANK0      2     2      0
                                              0 BANK1      5     5      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   12795
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   58538
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   58538
                                             75 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   57830
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   55995
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   36129
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18161
                                             68 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getMain_All_Error_Status                             2     2      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1739
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     297
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13598
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   13598
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10056
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1620
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
               _setDimmerLights_Line
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34351
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34351
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   11996
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12318
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9693
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      37      11       68.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     148      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     148      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 17 15:46:34 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l92 0A71  
                                     l94 0A85                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 138C                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
                   _getDimmerLights_Line 113A                   __end_of_setDelayOff_GO 0BAA  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                 __size_of_getRF_KeyStatus 0011  
                   _setDimmerLights_Main 0939                     _setDimmerLights_Line 11C7  
                           ___ftadd@sign 0048                                      l102 17F9  
                                    l103 17F5                                      l104 17E3  
                                    l106 17F3                                      l322 1214  
                                    l323 1216                     _setDimmerLights_SwOn 1770  
                                    l247 0D08                                      l272 0EAC  
                                    l273 0EF3                                      l366 13FD  
                                    l740 110B                                      l566 09E2  
                                    l831 1143                                      l832 114A  
                                    l960 131C                                      l793 0BFD  
                                    l959 1312                                      l994 16E2  
                                    _GIE 005F                                      _CRC 00D2  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00D6  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 00D0             getDimmerLights_Status@lights 0022  
                                    _Sw1 01C5                                      _Sw2 01CE  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1221  
                  _Buzzer_Initialization 1EF8                          __end_of_ADC_Set 1F2D  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0EF9                   _setMain_Exception$6052 00E4  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 138C  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0067  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1FE1  
                           ___ftdiv@sign 003D                                     l1272 1515  
                                   l1281 088A                                     l1258 15B6  
               ?_DimmerLightsPointSelect 0070                                     l2171 11E3  
                                   l2187 13BF                          __end_of_IOC_Set 1FC6  
                                   l2197 01A7                                     l2461 1629  
                                   l2446 1707                                     l2199 0080  
                                   l6010 0E8A                                     l1851 15EE  
                                   l1835 0E2A                                     l1845 0E80  
                                   l2670 0C3C                                     l6014 0E90  
                                   l6008 0E87                                     l6016 0E93  
                                   l1784 04CF                                     l1865 0E0E  
                                   l1793 044E                                     l6042 0EBE  
                                   l6026 0EA9                                     l1794 044A  
                                   l1786 040C                                     l1787 040E  
                                   l2676 0C53                                     l6044 0ED7  
                                   l6028 0EA3                                     l1796 0487  
                                   l1788 0416                                     l1877 1693  
                                   l1869 0A0E                                     l6080 137B  
                                   l6056 0EF5                                     l6320 10A1  
                                   l6066 140E                                     l6074 1372  
                                   l2699 038B                                     l6068 1419  
                                   l6076 1375                                     l6420 0825  
                                   l8012 08D2                                     l8020 08DA  
                                   l8004 08BA                                     l6430 0835  
                                   l6422 0828                                     l5800 124C  
                                   l6432 0838                                     l8016 08D6  
                                   l8120 1641                                     l6426 082E  
                                   l5810 13DD                                     l8050 0DA1  
                                   l6436 083E                                     l5740 1284  
                                   l5812 13E0                                     l8300 0E6B  
                                   l8140 1566                    _setDimmerLights_SwOff 0BAA  
                                   l8070 0DE7                                     l7416 1352  
                                   l7504 074D                                     l8216 14FD  
                                   l8240 14E5                                     l5816 13E6  
                                   l7432 031B                                     l8072 0DEB  
                                   l8064 0DCD                                     l7370 0C19  
                                   l7610 0FD0                                     l8242 14C9  
                                   l5738 127E                                     l7450 0344  
                                   l8074 0DEF                                     l8306 0E76  
                                   l8330 12D5                                     l7380 0C41  
                                   l7372 0C23                                     l7620 0FE9  
                                   l7700 090F                                     l8404 098A  
                                   l8244 14EA                                     l7460 0366  
                                   l7428 0314                                     l7540 0683  
                                   l8068 0DE3                                     l8164 0AD0  
                                   l8316 1180                                     l8340 12E1  
                                   l8332 12D7                                     l7382 0C49  
                                   l7374 0C28                                     l7366 0C12  
                                   l7526 07A7                                     l7518 078E  
                                   l7710 092A                                     l7470 0387  
                                   l7462 036A                                     l7438 032A  
                                   l8078 0DF3                                     l8166 0AA5  
                                   l8342 12E5                                     l7632 116C  
                                   l7624 0FF7                                     l7616 0FDD  
                                   l7608 0FC2                                     l7800 107E  
                                   l7456 0357                                     l6832 11EE  
                                   l8168 0AD6                                     l5794 1243  
                                   l7394 10BC                                     l7618 0FE6  
                                   l7714 0932                                     l7706 0921  
                                   l8098 0F3A                                     l8442 0860  
                                   l5962 0CDD                                     l7474 039D  
                                   l7458 0361                                     l7570 06F0  
                                   l7562 06DC                                     l7546 0699  
                                   l8290 0E45                                     l5796 1246  
                                   l8436 084B                                     l5980 0D0E  
                                   l5956 0CD4                                     l7468 037D  
                                   l8516 046C                                     l6828 11E8  
                                   l8620 00AE                                     l8604 006B  
                                   l7398 10C2                                     l7590 0F92  
                                   l5990 0D1E                                     l5982 0D11  
                                   l5958 0CD7                                     l7478 03AF  
                                   l7574 06F8                                     l7558 06D4  
                                   l8278 0E2D                                     l8518 046E  
                                   l8534 049C                                     l8630 00E0  
                                   l7648 14BF                                     l5888 11D4  
                                   l8392 095D                                     l5976 0CEF  
                                   l7488 03CA                                     l8800 13C8  
                                   l6970 17CD                                     l7498 0737  
                                   l7762 0D90                                     l7914 0BF1  
                                   l7682 08F0                                     l8394 0963  
                                   l5994 0D24                                     l5986 0D17  
                                   l8546 04BD                                     l8482 042D  
                                   l8724 0545                                     l5988 0D1B  
                                   l7924 1529                                     l8580 0C9D  
                                   l8644 011E                    _myMain_Initialization 1FE1  
                                   l7782 0B89                                     l8590 0CBD  
                                   l8574 0C8F                                     l8566 0C77  
                                   l8654 0150                                     l7784 0B96  
                                   l7688 08FB                                     l8584 0CAD  
                                   l8592 0CC6                                     l8568 0C84  
                                   l8680 01A3                                     l8824 1613  
                                   l7786 0B9F                                     l7778 0B83  
                                   l7698 0903                                     l7970 1681  
                                   l7954 0A15                                     l7982 08A1  
                                   l7990 08A9                                     l7958 0A2E  
                                   l7888 17B0                                     _CFGS 0CAE  
                                   l7996 08B2                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _PEIE 005E                                     u5095 1403  
                                   u4555 11AC                                     u7125 0C5A  
                                   u7055 0C1E                                     u7075 0C37  
                                   u6605 17C3                                     u7325 036B  
                                   u7095 0C44                                     u7425 075F  
                                   u7265 0345                                     u7505 06A5  
                                   u7435 076F                                     u7355 037E  
                                   u7515 06B5                                     u7445 078F  
                                   u9045 04AD                                     u7455 079E  
                                   u7615 0F99                                     u8415 14D2  
                                   u7295 0358                                     u7535 06DD  
                                   u7465 07A8                                     u7545 06E3  
                                   u7900 0D3E                                     u7645 0FC3  
                                   u8365 0AAE                                     u7735 14AB  
                                   u7815 0910                                     u7575 06F9  
                                   u7905 0D3C                                     u7825 091A  
                                   u7585 06FF                                     u7675 0FDE  
                                   u7835 0922                                     u9435 1603  
                                   u9445 1621                                     u9375 15AD  
                                   u7795 0906                                     u8915 0427  
                                   _LWLO 0CAD                                     _RSSI 00D7  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _main 16E9                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 09E8                          __end_of_RF_Main 1F01  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1F73  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1F2D                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 16A8  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                 _getDimmerLights_Status 1FF0           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1FBA         setDimmerLights_ErrorClose@lights 0068  
          __end_of_DimmerIntrPointSelect 10B9                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00E8                          __end_of___awdiv 0939  
                        __end_of___ftadd 03E2                          __end_of___ftdiv 07C9  
                        __end_of___ftmul 0720                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 1000  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l708 10B0  
                                  i1l719 02C6                                    i1l696 1157  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 00E3                  __end_of_Timeout_Counter 11B2  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 0800  
             _setDimmerLights_IntrIOC_GO 07C9                         __end_of_TMR1_ISR 146D  
           __size_of_CC2500_WriteCommand 001A       __end_of_setDimmerLights_ErrorClose 0AF3  
             _setDimmerLights_ErrorClose 0A99                         __end_of_TMR1_Set 1FD2  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1101  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 14ED  
          __end_of_setLED_Initialization 10DD                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0D34  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0AF3  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                      ??_setPercentValue 0059                             __end_of_main 172A  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1F11  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0F79  
                   _setSw_Initialization 1F4D                                   ??_main 006F  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0DA0                           _setMemory_Data 1F8A  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1114  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 0058  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 005E  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 0990  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006F  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1369                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0C6A                 _getMain_All_Error_Status 1F11  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 128B  
                                 i1l6102 07F9                                   i1l6532 0212  
                                 i1l6550 025E                                   i1l6552 0264  
                                 i1l6528 020B                                   i1l6564 0299  
                                 i1l6556 0275                                   i1l6558 027B  
                                 i1l6568 02AE                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u672_25 1467                                   u577_25 01E5  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1221                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1066  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 11C7  
                                 _Dimmer 00C8                                   _DlySw1 00DF  
                                 _DlySw2 00E1               __end_of_Mcu_Initialization 10EF  
                    __end_of_Buzzer_Main 1800                                   _Memory 01A0  
                                 _Timer1 00CB       __end_of_setDimmerLights_TriggerAdj 1307  
             _setDimmerLights_TriggerAdj 12E7                                   ___bmul 10B9  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                   ??_setDimmerLights_Line 0020  
                                 _r_data 00DD                                   _s_data 00DE  
                 ??_setDimmerLights_SwOn 0062                                   _setLED 0892  
                                 _myMain 00A0                   __end_of_setMemory_Data 1F96  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0A40         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 02EC  
            _setDimmerLights_IntrControl 01B0                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 113A  
                  __end_of_SwPointSelect 1189             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 0020  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 11DC  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0B4E  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003D  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$4517 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1327                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1FA2  
                        _getSw_KeyStatus 12C8                ??_setControl_Lights_Table 0069  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 14C1  
             __end_of_set_TimeoutCleared 1F1A                 __end_of_setDimmerReClock 1F35  
                     __size_of_getRxData 0074                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00D3                           _DimmerLights22 00D4  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                     ??_CC2500_WriteByte 0020                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 17B6  
                      ??_setRFSW_Control 0066                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1F35                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 006D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 16E9                      _CC2500_WriteCommand 123A  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                     __size_of_setTxData 00BD                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1F26  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1F7E  
                     _setRFSW_AdjControl 1668                                  _IOC_ISR 1FD2  
                                _IOC_Set 1FBA                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1586  
                      _Flash_Memory_Read 1254              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0076                   __size_of_CC2500_TxData 0068  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1EFE  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1F68          __end_of_setControl_Lights_Table 0E0F  
                        setRF_Main@error 006E                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 172A  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1F8A  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1096  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0160                                  _VarLED2 0164  
         __end_of_getDimmerLights_Status 2000                        __end_of_getRxData 0E83  
                __end_of_getSw_KeyStatus 12E7                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1161          __end_of_setDimmerLights_Trigger 12A9  
                   ??_setRFSW_AdjControl 0064                          __size_of___bmul 0012  
                                ___awdiv 08E5                                  ___ftadd 02EC  
                                ___ftdiv 0720                                  ___ftmul 066C  
                                ___fttol 0F79                      __end_of_Switch_Main 13D3  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1096  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0053                     setRFSW_AdjControl@sw 0067  
                        __size_of_setBuz 0059                                  __ptext1 15F2  
                                __ptext2 1FE1                                  __ptext3 10EF  
                                __ptext4 0002                                  __ptext5 13AF  
                                __ptext6 0041                                  __ptext7 1189  
                                __ptext8 1551                                  __ptext9 12C8  
                ??_setDimmerLights_AdjRF 005F                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 10A7                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 15BC  
              __end_of_Flash_Memory_Read 126E                  ??_setDimmerLights_SwOff 0062  
                             _setRF_Main 03E2                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1F3D                        _DimmerLights_Main 1F45  
         __size_of_DlyOff_Initialization 000A                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1F68  
             __end_of_CC2500_ClearRXFIFO 1F05               __end_of_CC2500_ClearTXFIFO 1F09  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006F  
                         _LedPointSelect 1307                      _DelayOffPointSelect 1161  
                                clrloop0 1F21           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1074                     end_of_initialization 003D  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 146D  
                          _DelayTime_1us 13F8                        __end_of_setTxData 066C  
             __end_of_Flash_Memory_Write 151C                                  init_ram 1F1A  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0066  
                   Flash_Memory_Read@ret 0023                                  initloop 1F1B  
                             _setSw_Main 0041                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 0064                        _CC2500_ReadStatus 13D3  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 10CB  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0E83  
                          _CC2500_TxData 0CCC                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 0844  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1F55  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1F4D                       _Mcu_Initialization 10DD  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 162B  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1327                  __end_of_setPercentValue 1770  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 1497  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 162B                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 13F8              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 123A                     _setRF_Initialization 1F73  
                     _setMemory_LoopSave 1127                              _Switch_Main 13AF  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1101                  __end_of_getRF_KeyStatus 10A7  
                      _setMain_Exception 0C6A                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 11B2  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 10CB                 setMain_Exception@command 00E7  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 114D  
        _setDimmerLights_AdjControl$2265 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0028            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0057                           __end_of_setLED 08E5  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 0046  
                         __end_of_setBuz 0A99                      ??_setMain_Exception 006B  
                   _CC2500_FrequencyCabr 1F7E               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 09E8                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 151C                          ?_LedPointSelect 0070  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 12C8                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1F15  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015C                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0CCC                __size_of_CC2500_WriteByte 0019  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D8                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00DB  
                            __pdataBANK4 0220                _getAll_DimmerLights_AdjGO 1074  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0069  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1F15  
                       _CC2500_SIDLEMode 1F09               __size_of_DimmerLights_Main 0008  
              __end_of_setRF_DimmerValue 1551                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2245 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1114  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E3  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0058               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013E                            _DimmerLights2 014D  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                          ??_CC2500_RxData 0024  
               setRFSW_AdjControl@status 0066                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                           getRxData@error 006A  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 00F1                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                              _getBuz_GO 1085      __end_of_Flash_Memory_Initialization 05AF  
            _Flash_Memory_Initialization 04D3                                 ?___awdiv 0020  
                              __ptext100 1F7E                                __ptext101 13F8  
                              __ptext102 1F05                                __ptext111 1445  
                              __ptext103 1F01                                __ptext112 01B0  
                              __ptext104 123A                                __ptext113 10A7  
                              __ptext105 1F15                                __ptext114 1FD2  
                              __ptext106 119D                                __ptext115 1F2D  
                              __ptext107 1208                                __ptext116 07C9  
                              __ptext108 17B6                                __ptext117 114D  
                              __ptext109 1EF8                                 ?___ftadd 003E  
                              _getRxData 0E0F                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 0039                  __end_of_setRFSW_Control 0A40  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1EFB                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0021                       __end_of_TouchPower 11F1  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 13AF  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00DC  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 0C09             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1FF0                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1175                      __end_of_setLED_Main 16E9  
                    _DimmerLightsIntrIOC 00D5                   ??_setRF_Initialization 0020  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1FAE                          SwPointSelect@sw 0021  
                              clear_ram0 1F20                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0062                             _my_MainTimer 15F2  
                              _setTxData 05AF      __end_of_DimmerLights_Initialization 1208  
            _DimmerLights_Initialization 11F1                       _CC2500_ClearRXFIFO 1F01  
                     _CC2500_ClearTXFIFO 1F05           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 119D                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 14ED                               ?_getRxData 0070  
                               _TMR1_ISR 1445                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1FC6  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CE  
            __end_of_CC2500_WriteCommand 1254                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 10EF                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 006C                  __size_of_setDelayOff_GO 005C  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0020                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1FA2                           ?_SwPointSelect 0070  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 15F2                    _DlyOff_Initialization 1F5E  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1F0D                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0067                  setMain_Exception@status 00E6  
                  _Switch_Initialization 1067        __size_of_getMain_All_Error_Status 0004  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1208  
           Flash_Memory_Initialization@i 005E                                 _SwDetect 00DA  
                      setRFSW_Control@sw 0068                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 0063                                 ___awtoft 1347  
                       ??_LedPointSelect 0020                                 ___ftpack 0C09  
          __size_of_getMain_LightsStatus 002C                             ??_setRF_Main 006B  
                   CC2500_WriteREG@value 0022                              _setLED_Main 16A8  
             __end_of_setRF_DimmerLights 0DA0                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                               __ptext10 1175                                 __ptext11 0C6A  
                               __ptext20 15BC                                 __ptext12 0A99  
                               __ptext21 1127                                 __ptext13 113A  
                               __ptext30 1114                                 __ptext22 0DA0  
                               __ptext14 1067                                 __ptext31 1F11  
                               __ptext23 09E8                                 __ptext15 1F4D  
                               __ptext40 10DD                                 __ptext32 1096  
                               __ptext24 1668                                 __ptext16 11DC  
                               __ptext41 1F68                                 __ptext33 1085  
                               __ptext25 151C                                 __ptext17 1EFE  
                               __ptext50 10CB                                 __ptext42 1FC6  
                               __ptext34 0CCC                                 __ptext26 138C  
                               __ptext18 03E2                                 __ptext51 1586  
                               __ptext43 1221                                 __ptext35 0E83  
                               __ptext27 0AF3                                 __ptext19 0E0F  
                               __ptext60 1F45                                 __ptext52 14C1  
                               __ptext44 1FBA                                 __ptext36 13D3  
                               __ptext28 066C                                 __ptext61 0939  
                               __ptext53 0844                                 __ptext45 1F0D  
                               __ptext37 126E                                 __ptext29 02EC  
                               __ptext70 1F3D                                 __ptext62 162B  
                               __ptext54 1F96                                 __ptext46 1F26  
                               __ptext38 1EFB                                 __ptext71 0990  
                               __ptext63 0EF9                                 __ptext55 04D3  
                               __ptext47 1FAE                                 __ptext39 1F73  
                               __ptext80 0F79                                 __ptext72 1770  
                               __ptext64 0892                                 __ptext56 1F8A  
                               __ptext48 16A8                                 __ptext81 0720  
                               __ptext73 0A40                                 __ptext65 1307  
                               __ptext57 14ED                                 __ptext49 1FA2  
                               __ptext90 1101                                 __ptext82 1347  
                               __ptext74 08E5                                 __ptext66 11C7  
                               __ptext58 1F55                                 __ptext91 1F35  
                               __ptext83 0C09                                 __ptext75 1074  
                               __ptext67 11F1                                 __ptext59 1254  
                               __ptext92 1F5E                                 __ptext84 12E7  
                               __ptext76 0BAA                                 __ptext68 141E  
                               __ptext93 1161                                 __ptext85 128B  
                               __ptext77 05AF                                 __ptext69 1066  
                               __ptext94 11B2                                 __ptext86 0B4E  
                               __ptext78 0D34                                 __ptext95 1F09  
                               __ptext87 1497                                 __ptext79 172A  
                               __ptext96 0800                                 __ptext88 10B9  
                               __ptext97 146D                                 __ptext89 1FF0  
                               __ptext98 12A9                                 __ptext99 1369  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 114D  
          __end_of_Dimmer_Initialization 1067             __end_of_setDimmerLights_Main 0990  
           __end_of_setDimmerLights_Line 11DC                         Switch_Main@error 006E  
           __end_of_setDimmerLights_SwOn 17B6                             ??_setSw_Main 0066  
                          setLED@command 0022                            __size_of_main 0041  
                            _setRF_Learn 1189                 __end_of_CC2500_SIDLEMode 1F0D  
             setDimmerLights_Main@lights 0065              __end_of_DelayOffPointSelect 1175  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 006D  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 126E                       _CC2500_InitPATable 12A9  
               __end_of_setMemory_Modify 1127            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 04D3                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0069  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0069  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00E8  
                               main@argv 00EA                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$5437 0021                     _getSw_KeyStatus$5438 0022  
                        _CC2500_PowerRST 0800                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 0892                        ??_getPercentValue 0059  
                            _setLog_Code 15BC              __end_of_Flash_Memory_Unlock 1F5E  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1369  
                     __end_of_setSw_Main 01B0                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1497  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0066  
                setDimmerLights_SwOff@sw 0065        __end_of_getAll_DimmerLights_AdjGO 1085  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1445  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 141E  
            __end_of_setDimmerLights_Adj 1668                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1EFB  
   __size_of_setDimmerLights_IntrControl 013C                     _Flash_Memory_Erasing 1F96  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00D9  
        __end_of_DelayOff_Initialization 1F3D      __size_of_setDimmerLights_IntrIOC_GO 0037  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1F45       __end_of_setDimmerLights_AdjControl 1586  
             _setDimmerLights_AdjControl 1551                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0B4E  
       __size_of_setControl_Lights_Table 006F                   __end_of_DelayTimejudge 14C1  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0066                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 141E                  __end_of_CC2500_ReadByte 128B  
           __end_of_setSw_Initialization 1F55                          _Timeout_Counter 119D  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1FAE         __size_of_setDimmerLights_Trigger 001E  
               __size_of_setPercentValue 0046                  setMemory_Modify@command 0021  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1EFE  
                  __end_of_CC2500_RxData 0EF9                    __end_of_CC2500_TxData 0D34  
                __end_of_CC2500_PowerRST 0844           getAll_DimmerLights_AdjGO@adjgo 0021  
